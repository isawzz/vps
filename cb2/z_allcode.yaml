___enteredRecursion: var ___enteredRecursion = 0;
_AUDIOCONTEXT: var _AUDIOCONTEXT;
_audioSources: "var _audioSources = {\r

  \  incorrect1: '../base/assets/sounds/incorrect1.wav',\r

  \  incorrect3: '../base/assets/sounds/incorrect3.mp3',\r

  \  goodBye: \"../base/assets/sounds/level1.wav\",\r

  \  down: \"../base/assets/sounds/down.mp3\",\r

  \  levelComplete: \"../base/assets/sounds/sound1.wav\",\r

  \  rubberBand: \"../base/assets/sounds/sound2.wav\",\r

  \  hit: \"../base/assets/sounds/hit.wav\",\r

  \  mozart: \"../base/assets/music/mozart_s39_4.mp3\",\r

  };"
_idleSound: var _idleSound = true;
_qSound: var _qSound;
_sndCounter: var _sndCounter = 0;
_sndPlayer: var _sndPlayer;
_TOSound: var _TOSound;
A: var A;
activatedTests: var activatedTests = [];
ActiveButton: var ActiveButton = null;
ActiveChats: var ActiveChats = {};
AD: var AD;
ADS: var ADS;
AGAME: "var AGAME = {\r

  \  stage: {\r

  \  }\r

  };"
aiActivated: var aiActivated;
AIThinkingTime: var AIThinkingTime = 30;
AkQ: var AkQ;
Algae: "var Algae = {\r

  \  axiom: 'A',\r

  \  rules: [\r

  \    { aus: 'A', mach: 'A+[B]-[A]' },\r

  \    { aus: 'B', mach: 'AA' }\r

  \  ],\r

  \  angle: 25,\r

  \  factor: .9,\r

  \  max: 5,\r

  };"
allAreas: var allAreas = {};
allGames: var allGames = null;
allGames1: "var allGames1 = {\r

  \  ttt: {\r

  \    name: 'TicTacToe',\r

  \    long_name: 'Tic-Tac-Toe',\r

  \    short_name: 'ttt',\r

  \    num_players: [2],\r

  \    player_names: ['Player1', 'Player2'],\r

  \  },\r

  \  s1: {\r

  \    name: 's1',\r

  \    long_name: 's1',\r

  \    short_name: 's1',\r

  \    num_players: [2, 3, 4, 5],\r

  \    player_names: ['Player1', 'Player2', 'Player3', 'Player4',
  'Player5'],\r

  \  },\r

  \  starter: {\r

  \    name: 'Starter',\r

  \    long_name: 'Starter',\r

  \    short_name: 'starter',\r

  \    num_players: [2],\r

  \    player_names: ['Player1', 'Player2'],\r

  \  },\r

  \  catan: {\r

  \    name: 'Catan',\r

  \    long_name: 'The Settlers of Catan',\r

  \    short_name: 'catan',\r

  \    num_players: [3, 4],\r

  \    player_names: ['White', 'Red', 'Blue', 'Orange'],\r

  \  },\r

  \  aristocracy: {\r

  \    name: 'Aristocracy',\r

  \    long_name: 'Aristocracy',\r

  \    short_name: 'aristocracy',\r

  \    num_players: [2, 3, 4, 5],\r

  \    player_names: ['Player1', 'Player2', 'Player3', 'Player4',
  'Player5'],\r

  \  }\r

  };"
allGamesC: var allGamesC = null;
Animation1: var Animation1;
AnimTimer: "var AnimTimer = function () {\r

  \  this.date = new Date();\r

  \  this.lastTime = 0;\r

  \  this.currentTime = 0;\r

  \  this.start = function () {\r

  \    this.currentTime = Date.now();\r

  \  }\r

  \  this.reset = function () {\r

  \    this.currentTime = Date.now();\r

  \  }\r

  \  this.getTimeElapsed = function () {\r

  \    this.lastTime = this.currentTime;\r

  \    this.currentTime = Date.now();\r

  \    return (this.currentTime - this.lastTime);\r

  \  }\r

  }"
answerCorrect: var answerCorrect;
App: var App;
AREAS: const AREAS = {};
areaSubTypes: var areaSubTypes = {};
Aristocards: var Aristocards;
AU: var AU = {};
autoplayFunction: var autoplayFunction = () => false;
Autoreload: var Autoreload = false;
auxOpen: var auxOpen;
Avatars: var Avatars = [];
AvatarTimeout: var AvatarTimeout;
B: var B = {};
Badges: var Badges = [];
Ball: "var Ball = function () {\r

  \  var velocity = [0, 0];\r

  \  var position = [0, 0];\r

  \  var element = $('#ball');\r

  \  var owner;\r

  \  var halfTile = 32;\r

  \  var paused = false;\r

  \  function move(t) {\r

  \    if (owner !== undefined) {\r

  \      var ownerPosition = owner.getPosition();\r

  \      position[1] = ownerPosition[1] + owner.getSize() / 2;\r

  \      if (owner.getSide() === 'left') {\r

  \        position[0] = ownerPosition[0] + owner.getSize();\r

  \      } else {\r

  \        position[0] = ownerPosition[0];\r

  \      }\r

  \    } else {\r

  \      if (position[1] - halfTile <= 0 ||\r

  \        position[1] + halfTile >= innerHeight) {\r

  \        velocity[1] = -velocity[1];\r

  \      }\r

  \      position[0] += velocity[0] * t;\r

  \      position[1] += velocity[1] * t;\r

  \    }\r

  \    element.css('left', (position[0] - halfTile) + 'px');\r

  \    element.css('top', (position[1] - halfTile) + 'px');\r

  \  };\r

  \  function checkScored() {\r

  \    if (position[0] <= 0) {\r

  \      pause();\r

  \      $(document).trigger('ping:opponentScored');\r

  \    }\r

  \    if (position[0] >= innerWidth) {\r

  \      pause();\r

  \      $(document).trigger('ping:playerScored');\r

  \    }\r

  \  }\r

  \  function update(t) {\r

  \    if (!paused) {\r

  \      move(t);\r

  \    }\r

  \    if (owner !== undefined) {\r

  \      return;\r

  \    }\r

  \    var playerPosition = player.getPosition();\r

  \    if (position[0] <= player.getSize() &&\r

  \      position[1] >= playerPosition[1] &&\r

  \      position[1] <= playerPosition[1] + player.getSize()) {\r

  \      console.log(\"Grabbed by player!\");\r

  \      owner = player;\r

  \    }\r

  \    var opponentPosition = opponent.getPosition();\r

  \    if (position[0] >= innerWidth - opponent.getSize() &&\r

  \      position[1] >= opponentPosition[1] &&\r

  \      position[1] <= opponentPosition[1] + opponent.getSize()) {\r

  \      console.log(\"Grabbed by opponent!\");\r

  \      owner = opponent;\r

  \    }\r

  \    checkScored();\r

  \  }\r

  \  function pause() {\r

  \    paused = true;\r

  \  }\r

  \  function start() {\r

  \    paused = false;\r

  \  }\r

  \  return {\r

  \    update: update,\r

  \    pause: pause,\r

  \    start: start,\r

  \    getOwner: function () { return owner; },\r

  \    setOwner: function (o) { owner = o; },\r

  \    getVelocity: function () { return velocity },\r

  \    setVelocity: function (v) { velocity = v; },\r

  \    getPosition: function (p) { return position; },\r

  \  }\r

  };"
BallPlayer: "var BallPlayer = function (elementName, side) {\r

  \  var position = [0, 0];\r

  \  var aim = 0;\r

  \  var tileSize = 128;\r

  \  var element = $('#' + elementName);\r

  \  var move = function (y) {\r

  \    position[1] += y;\r

  \    if (position[1] <= 0) {\r

  \      position[1] = 0;\r

  \    }\r

  \    if (position[1] >= innerHeight - tileSize) {\r

  \      position[1] = innerHeight - tileSize;\r

  \    }\r

  \    if (side == 'right') {\r

  \      position[0] = innerWidth - tileSize;\r

  \    }\r

  \    element.css('left', position[0] + 'px');\r

  \    element.css('top', position[1] + 'px');\r

  \  }\r

  \  var fire = function () {\r

  \    if (ball.getOwner() !== this) {\r

  \      return;\r

  \    }\r

  \    var v = [0, 0];\r

  \    if (side == 'left') {\r

  \      switch (aim) {\r

  \        case -1:\r

  \          v = [.707, -.707];\r

  \          break;\r

  \        case 0:\r

  \          v = [1, 0];\r

  \          break;\r

  \        case 1:\r

  \          v = [.707, .707];\r

  \      }\r

  \    } else {\r

  \      switch (aim) {\r

  \        case -1:\r

  \          v = [-.707, -.707];\r

  \          break;\r

  \        case 0:\r

  \          v = [-1, 0];\r

  \          break;\r

  \        case 1:\r

  \          v = [-.707, .707];\r

  \      }\r

  \    }\r

  \    ball.setVelocity(v);\r

  \    ball.setOwner(undefined);\r

  \  }\r

  \  return {\r

  \    move: move,\r

  \    fire: fire,\r

  \    getSide: function () { return side; },\r

  \    setAim: function (a) { aim = a; },\r

  \    getPosition: function () { return position; },\r

  \    getSize: function () { return tileSize; }\r

  \  }\r

  };"
BaseColor: var BaseColor;
Basepath: var Basepath;
bBySuit: var bBySuit = document.createElement('button')
bDeal: var bDeal = document.createElement('button')
BestKeysD: var BestKeysD;
BestKeysE: var BestKeysE;
BestKeySets: var BestKeySets;
BestMinusScore: var BestMinusScore = Infinity;
BestMinusState: var BestMinusState;
BestPlusScore: var BestPlusScore = -Infinity;
BestPlusState: var BestPlusState;
bestWord: var bestWord;
bFan: var bFan = document.createElement('button')
BFBoard: var BFBoard = {};
BFGameContr: var BFGameContr = {};
bFlip: var bFlip = document.createElement('button')
BFUserMove: var BFUserMove = {};
BG_CARD_BACK: var BG_CARD_BACK = randomColor();
bicycleRental: "var bicycleRental = {\r

  \  \"type\": \"FeatureCollection\",\r

  \  \"features\": [\r

  \    {\r

  \      \"geometry\": {\r

  \        \"type\": \"Point\",\r

  \        \"coordinates\": [\r

  \          -104.9998241,\r

  \          39.7471494\r

  \        ]\r

  \      },\r

  \      \"type\": \"Feature\",\r

  \      \"properties\": {\r

  \        \"popupContent\": \"This is a B-Cycle Station. Come pick up a bike
  and pay by the hour. What a deal!\"\r

  \      },\r

  \      \"id\": 51\r

  \    },\r

  \    {\r

  \      \"geometry\": {\r

  \        \"type\": \"Point\",\r

  \        \"coordinates\": [\r

  \          -104.9983545,\r

  \          39.7502833\r

  \        ]\r

  \      },\r

  \      \"type\": \"Feature\",\r

  \      \"properties\": {\r

  \        \"popupContent\": \"This is a B-Cycle Station. Come pick up a bike
  and pay by the hour. What a deal!\"\r

  \      },\r

  \      \"id\": 52\r

  \    },\r

  \    {\r

  \      \"geometry\": {\r

  \        \"type\": \"Point\",\r

  \        \"coordinates\": [\r

  \          -104.9963919,\r

  \          39.7444271\r

  \        ]\r

  \      },\r

  \      \"type\": \"Feature\",\r

  \      \"properties\": {\r

  \        \"popupContent\": \"This is a B-Cycle Station. Come pick up a bike
  and pay by the hour. What a deal!\"\r

  \      },\r

  \      \"id\": 54\r

  \    },\r

  \    {\r

  \      \"geometry\": {\r

  \        \"type\": \"Point\",\r

  \        \"coordinates\": [\r

  \          -104.9960754,\r

  \          39.7498956\r

  \        ]\r

  \      },\r

  \      \"type\": \"Feature\",\r

  \      \"properties\": {\r

  \        \"popupContent\": \"This is a B-Cycle Station. Come pick up a bike
  and pay by the hour. What a deal!\"\r

  \      },\r

  \      \"id\": 55\r

  \    },\r

  \    {\r

  \      \"geometry\": {\r

  \        \"type\": \"Point\",\r

  \        \"coordinates\": [\r

  \          -104.9933717,\r

  \          39.7477264\r

  \        ]\r

  \      },\r

  \      \"type\": \"Feature\",\r

  \      \"properties\": {\r

  \        \"popupContent\": \"This is a B-Cycle Station. Come pick up a bike
  and pay by the hour. What a deal!\"\r

  \      },\r

  \      \"id\": 57\r

  \    },\r

  \    {\r

  \      \"geometry\": {\r

  \        \"type\": \"Point\",\r

  \        \"coordinates\": [\r

  \          -104.9913392,\r

  \          39.7432392\r

  \        ]\r

  \      },\r

  \      \"type\": \"Feature\",\r

  \      \"properties\": {\r

  \        \"popupContent\": \"This is a B-Cycle Station. Come pick up a bike
  and pay by the hour. What a deal!\"\r

  \      },\r

  \      \"id\": 58\r

  \    },\r

  \    {\r

  \      \"geometry\": {\r

  \        \"type\": \"Point\",\r

  \        \"coordinates\": [\r

  \          -104.9788452,\r

  \          39.6933755\r

  \        ]\r

  \      },\r

  \      \"type\": \"Feature\",\r

  \      \"properties\": {\r

  \        \"popupContent\": \"This is a B-Cycle Station. Come pick up a bike
  and pay by the hour. What a deal!\"\r

  \      },\r

  \      \"id\": 74\r

  \    }\r

  \  ]\r

  };"
BiDir: var BiDir = [-9, -11, 11, 9];
BINDINGS: var BINDINGS = {}
BishopPair: var BishopPair = 30;
BishopTable: "var BishopTable = [\r

  \  0, 0, -10, 0, 0, -10, 0, 0,\r

  \  0, 0, 0, 10, 10, 0, 0, 0,\r

  \  0, 0, 10, 15, 15, 10, 0, 0,\r

  \  0, 10, 15, 20, 20, 15, 10, 0,\r

  \  0, 10, 15, 20, 20, 15, 10, 0,\r

  \  0, 0, 10, 15, 15, 10, 0, 0,\r

  \  0, 0, 0, 10, 10, 0, 0, 0,\r

  \  0, 0, 0, 0, 0, 0, 0, 0\r

  ];"
BlockServerSend: var BlockServerSend = false;
BlockServerSend1: var BlockServerSend1 = false;
boatFilters: var boatFilters = [];
boatHighlighted: var boatHighlighted = null;
bodyZoom: var bodyZoom = 1.0;
BOOL: "var BOOL = { FALSE: 0, TRUE: 1 };"
BotTicker: var BotTicker;
bPoker: var bPoker = document.createElement('button')
brd_bookLines: var brd_bookLines = [];
brd_castlePerm: var brd_castlePerm;
brd_enPas: var brd_enPas = SQUARES.NO_SQ;
brd_fiftyMove: var brd_fiftyMove;
brd_hisPly: var brd_hisPly;
brd_history: var brd_history = [];
brd_material: var brd_material = new Array(2);
brd_moveList: var brd_moveList = new Array(MAXDEPTH * MAXPOSITIONMOVES);
brd_moveListStart: var brd_moveListStart = new Array(MAXDEPTH);
brd_moveScores: var brd_moveScores = new Array(MAXDEPTH * MAXPOSITIONMOVES);
brd_pceNum: var brd_pceNum = new Array(13);
brd_pieces: var brd_pieces = new Array(BRD_SQ_NUM);
brd_pList: var brd_pList = new Array(14 * 10);
brd_ply: var brd_ply;
brd_posKey: var brd_posKey;
brd_PvArray: var brd_PvArray = new Array(MAXDEPTH);
brd_PvTable: var brd_PvTable = [];
brd_searchHistory: var brd_searchHistory = new Array(14 * BRD_SQ_NUM);
brd_searchKillers: var brd_searchKillers = new Array(3 * MAXDEPTH);
brd_side: var brd_side = COLOURS.WHITE;
BRD_SQ_NUM: var BRD_SQ_NUM = 120;
browserZoom: var browserZoom = Math.round(window.devicePixelRatio * 100);
bShuffle: var bShuffle = document.createElement('button')
bSort: var bSort = document.createElement('button')
ByGroupSubgroup: var ByGroupSubgroup;
C: var C = null;
c52: var c52;
C52: var C52;
c52C: var c52C = null;
C52Cards: var C52Cards;
CACHE_CODE: const CACHE_CODE = false;
CACHE_DEFAULTSPEC: const CACHE_DEFAULTSPEC = false;
CACHE_USERSPEC: const CACHE_USERSPEC = false;
CANCEL_AI: var CANCEL_AI;
Card: "function Card(img, bunch, id, reverse) {\r

  \  var self = this;\r

  \  this.img = img;\r

  \  this.bunch = bunch;\r

  \  this.id = id;\r

  \  this.reverse = reverse;\r

  \  this.suit = Math.floor(id / self.bunch.board.deck.cardSuit);\r

  \  this.number = Math.floor(id % self.bunch.board.deck.cardSuit) + 1;\r

  \  this.color = Math.floor(id / self.bunch.board.deck.cardSuit) % 2;\r

  \  this.img.card = self;\r

  \  this.onDblClick = function () {\r

  \    self.reverse ? self.bunch.onDblClickReverse(self) :
  self.bunch.onDblClickCard(self);\r

  \  }\r

  \  this.flip = function () {\r

  \    self.reverse = !self.reverse;\r

  \    self.img.src = self.bunch.board.deck.cardSrc(self.id, self.reverse);\r

  \  }\r

  \  this.moveTo = function (bunch) {\r

  \    self.bunch = bunch;\r

  \    self.img.style.zIndex = self.bunch.cardZIndex();\r

  \    self.img.style.left = String(self.bunch.cardLeft()) + \"px\";\r

  \    self.img.style.top = String(self.bunch.cardTop()) + \"px\";\r

  \    self.reverse = self.bunch.cardReverse();\r

  \    self.img.src = self.bunch.board.deck.cardSrc(self.id, self.reverse);\r

  \  }\r

  }"
CASTLEBIT: "var CASTLEBIT = { WKCA: 1, WQCA: 2, BKCA: 4, BQCA: 8 };"
CastleKeys: var CastleKeys = new Array(16);
CastlePerm: "var CastlePerm = [\r

  \  15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\r

  \  15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\r

  \  15, 13, 15, 15, 15, 12, 15, 15, 14, 15,\r

  \  15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\r

  \  15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\r

  \  15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\r

  \  15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\r

  \  15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\r

  \  15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\r

  \  15, 7, 15, 15, 15, 3, 15, 15, 11, 15,\r

  \  15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\r

  \  15, 15, 15, 15, 15, 15, 15, 15, 15, 15\r

  ];"
Categories: var Categories;
CCC: var CCC = 0;
CGAP: var CGAP = CSZ * .05;
CHEIGHT: var CHEIGHT = CSZ;
choiceCompleted: var choiceCompleted = false;
Cinno: var Cinno;
CLEAR_LOCAL_STORAGE: const CLEAR_LOCAL_STORAGE = false;
CLICK_TO_SELECT: var CLICK_TO_SELECT = true;
Clientdata: var Clientdata = {};
ClientId: var ClientId;
ColBrd: var ColBrd = new Array(BRD_SQ_NUM);
ColChar: var ColChar = "abcdefgh";
ColorDi: var ColorDi;
ColorNames: var ColorNames;
colorPalette: "function colorPalette(color, type = 'shade') {\r

  \  color = colorFrom(color);\r

  \  return colorShades(color);\r

  }"
ColorThiefObject: var ColorThiefObject;
COLOURS: "var COLOURS = { WHITE: 0, BLACK: 1, BOTH: 2 };"
COLUMNS: "var COLUMNS = { COL_A: 0, COL_B: 1, COL_C: 2, COL_D: 3, COL_E: 4,
  COL_F: 5, COL_G: 6, COL_H: 7, COL_NONE: 8 };"
commandChain: var commandChain = [];
Complex: "var Complex = {\r

  \  axiom: 'F',\r

  \  rules: [\r

  \    { aus: 'F', mach: 'FF+[+F-F-F]-[-F+F+F]' }\r

  \  ],\r

  \  angle: 25,\r

  \  factor: .5,\r

  \  max: 6,\r

  };"
COND: var COND = {};
Config: var Config;
CONTEXT: var CONTEXT = null;
coorsField: "var coorsField = {\r

  \  \"type\": \"Feature\",\r

  \  \"properties\": {\r

  \    \"popupContent\": \"Coors Field\"\r

  \  },\r

  \  \"geometry\": {\r

  \    \"type\": \"Point\",\r

  \    \"coordinates\": [-104.99404191970824, 39.756213909328125]\r

  \  }\r

  };"
CorrectWords: var CorrectWords;
CorrectWordsCorrect: var CorrectWordsCorrect;
CorrectWordsExact: var CorrectWordsExact;
CorrectWordsFailed: var CorrectWordsFailed;
Counter: "var Counter = { server: 0 };"
CSZ: var CSZ = 300;
CURRENT_CHAT_USER: var CURRENT_CHAT_USER = "";
CURRENT_FEN: var CURRENT_FEN = "";
CURRENT_GAME: var CURRENT_GAME = "";
currentCategories: var currentCategories = ['nosymbols'];
currentDeck: var currentDeck;
currentGame: "var currentGame = IS_TESTING ? 'gTouchPic' : 'sequence';"
CurrentGameData: var CurrentGameData;
currentGamename: var currentGamename;
currentInfo: var currentInfo;
currentKey: var currentKey = null;
currentKeys: var currentKeys;
currentLanguage: var currentLanguage = 'E';
currentLevel: var currentLevel;
CurrentLevelData: var CurrentLevelData;
currentNumPlayers: var currentNumPlayers;
currentPlaymode: var currentPlaymode;
currentSeed: var currentSeed;
CurrentSessionData: var CurrentSessionData;
currentUser: var currentUser = 'Gunter';
CV: var CV;
CWIDTH: var CWIDTH = CSZ * .7
CX: var CX;
CYCLES: var CYCLES = 0;
DA: var DA = {};
Daat: var Daat = {};
dActions: var dActions;
dActions0: var dActions0;
dActions1: var dActions1;
dActions2: var dActions2;
dActions3: var dActions3;
dActions4: var dActions4;
dActions5: var dActions5;
dAux: var dAux;
dAuxContent: var dAuxContent;
DB: var DB;
dBottom: var dBottom;
dButtons: var dButtons;
dCenter: var dCenter;
dCode: var dCode;
dConsole: var dConsole;
dContent: var dContent;
dCurrent: var dCurrent = null;
DDInfo: var DDInfo = null;
DeckA: "var DeckA = (function () {\r

  \  //#region variables  \r

  \  var ____fontSize;\r

  \  var ___fontSize;\r

  \  var __fontSize;\r

  \  var _fontSize;\r

  \  var ticking;\r

  \  var animations = [];\r

  \  var style = document.createElement('p').style;\r

  \  var memoized = {};\r

  \  var has3d;\r

  \  var maxZ = 52;\r

  \  var displacement = 4;\r

  \  window.requestAnimationFrame || (window.requestAnimationFrame = function
  (cb) { setTimeout(cb, 0); });\r

  \  //#endregion\r

  \  //#region modules\r

  \  var ease = {\r

  \    linear: function linear(t) {\r

  \      return t;\r

  \    },\r

  \    quadIn: function quadIn(t) {\r

  \      return t * t;\r

  \    },\r

  \    quadOut: function quadOut(t) {\r

  \      return t * (2 - t);\r

  \    },\r

  \    quadInOut: function quadInOut(t) {\r

  \      return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\r

  \    },\r

  \    cubicIn: function cubicIn(t) {\r

  \      return t * t * t;\r

  \    },\r

  \    cubicOut: function cubicOut(t) {\r

  \      return --t * t * t + 1;\r

  \    },\r

  \    cubicInOut: function cubicInOut(t) {\r

  \      return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2)
  + 1;\r

  \    },\r

  \    quartIn: function quartIn(t) {\r

  \      return t * t * t * t;\r

  \    },\r

  \    quartOut: function quartOut(t) {\r

  \      return 1 - --t * t * t * t;\r

  \    },\r

  \    quartInOut: function quartInOut(t) {\r

  \      return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\r

  \    },\r

  \    quintIn: function quintIn(t) {\r

  \      return t * t * t * t * t;\r

  \    },\r

  \    quintOut: function quintOut(t) {\r

  \      return 1 + --t * t * t * t * t;\r

  \    },\r

  \    quintInOut: function quintInOut(t) {\r

  \      return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t *
  t;\r

  \    }\r

  \  };\r

  \  var flip = {\r

  \    deck: function deck(_deck) {\r

  \      _deck.flip = _deck.queued(flip);\r

  \      function flip(next, side) {\r

  \        var flipped = _deck.cards.filter(function (card) {\r

  \          return card.side === 'front';\r

  \        }).length / _deck.cards.length;\r

  \        _deck.cards.forEach(function (card, i) {\r

  \          card.setSide(side ? side : flipped > 0.5 ? 'back' : 'front');\r

  \        });\r

  \        next();\r

  \      }\r

  \    }\r

  \  };\r

  \  var sort = {\r

  \    deck: function deck(_deck2) {\r

  \      _deck2.sort = _deck2.queued(sort);\r

  \      function sort(next, reverse) {\r

  \        var cards = _deck2.cards;\r

  \        cards.sort(function (a, b) {\r

  \          if (reverse) {\r

  \            return a.i - b.i;\r

  \          } else {\r

  \            return b.i - a.i;\r

  \          }\r

  \        });\r

  \        cards.forEach(function (card, i) {\r

  \          card.sort(i, cards.length, function (i) {\r

  \            if (i === cards.length - 1) {\r

  \              next();\r

  \            }\r

  \          }, reverse);\r

  \        });\r

  \      }\r

  \    },\r

  \    card: function card(_card2) {\r

  \      var cardElem = _card2.elem;\r

  \      _card2.sort = function (i, len, cb, reverse) {\r

  \        var z = i / 4;\r

  \        var delay = i * 10;\r

  \        _card2.animateTo({\r

  \          delay: delay,\r

  \          duration: 400,\r

  \          x: -z,\r

  \          y: -150,\r

  \          rot: 0,\r

  \          onComplete: function onComplete() {\r

  \            cardElem.style.zIndex = i;\r

  \          }\r

  \        });\r

  \        _card2.animateTo({\r

  \          delay: delay + 500,\r

  \          duration: 400,\r

  \          x: -z,\r

  \          y: -z,\r

  \          rot: 0,\r

  \          onComplete: function onComplete() {\r

  \            cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  var shuffle = {\r

  \    deck: function deck(_deck3) {\r

  \      _deck3.shuffle = _deck3.queued(shuffle);\r

  \      function shuffle(next) {\r

  \        var cards = _deck3.cards;\r

  \        ____fontSize = fontSize();\r

  \        fisherYates(cards);\r

  \        cards.forEach(function (card, i) {\r

  \          card.pos = i;\r

  \          card.shuffle(function (i) {\r

  \            if (i === cards.length - 1) {\r

  \              next();\r

  \            }\r

  \          });\r

  \        });\r

  \        return;\r

  \      }\r

  \    },\r

  \    card: function card(_card3) {\r

  \      var cardElem = _card3.elem;\r

  \      _card3.shuffle = function (cb) {\r

  \        var i = _card3.pos;\r

  \        var z = i / 4;\r

  \        var delay = i * 2;\r

  \        _card3.animateTo({\r

  \          delay: delay,\r

  \          duration: 200,\r

  \          x: plusminus(Math.random() * 40 + 20) * ____fontSize / 16,\r

  \          y: -z,\r

  \          rot: 0\r

  \        });\r

  \        _card3.animateTo({\r

  \          delay: 200 + delay,\r

  \          duration: 200,\r

  \          x: -z,\r

  \          y: -z,\r

  \          rot: 0,\r

  \          onStart: function onStart() {\r

  \            cardElem.style.zIndex = i;\r

  \          },\r

  \          onComplete: function onComplete() {\r

  \            cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  var poker = {\r

  \    deck: function deck(_deck4) {\r

  \      _deck4.poker = _deck4.queued(poker);\r

  \      function poker(next) {\r

  \        var cards = _deck4.cards;\r

  \        var len = cards.length;\r

  \        __fontSize = fontSize();\r

  \        cards.slice(-5).reverse().forEach(function (card, i) {\r

  \          card.poker(i, len, function (i) {\r

  \            card.setSide('front');\r

  \            if (i === 4) {\r

  \              next();\r

  \            }\r

  \          });\r

  \        });\r

  \      }\r

  \    },\r

  \    card: function card(_card4) {\r

  \      var cardElem = _card4.elem;\r

  \      _card4.poker = function (i, len, cb) {\r

  \        var delay = i * 250;\r

  \        _card4.animateTo({\r

  \          delay: delay,\r

  \          duration: 250,\r

  \          x: Math.round((i - 2.05) * 70 * __fontSize / 16),\r

  \          y: Math.round(-110 * __fontSize / 16),\r

  \          rot: 0,\r

  \          onStart: function onStart() {\r

  \            cardElem.style.zIndex = len - 1 + i;\r

  \          },\r

  \          onComplete: function onComplete() {\r

  \            cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  var pokerN = {\r

  \    deck: function deck(_deck4) {\r

  \      _deck4.pokerN = _deck4.queued(pokerN);\r

  \      function pokerN(next, num) {\r

  \        var cards = _deck4.cards;\r

  \        var len = cards.length;\r

  \        __fontSize = fontSize();\r

  \        console.log()\r

  \        cards.slice(-num).reverse().forEach(function (card, i) {\r

  \          card.pokerN(num, i, len, function (i) {\r

  \            card.setSide('front');\r

  \            if (i === num - 1) {\r

  \              next();\r

  \            }\r

  \          });\r

  \        });\r

  \      }\r

  \    },\r

  \    card: function card(_card4) {\r

  \      var cardElem = _card4.elem;\r

  \      _card4.pokerN = function (num, i, len, cb) {\r

  \        var delay = i * 250;\r

  \        _card4.animateTo({\r

  \          delay: delay,\r

  \          duration: 250,\r

  \          x: Math.round((i - (num - .8) / 2) * 70 * __fontSize / 16),\r

  \          y: Math.round(-110 * __fontSize / 16),\r

  \          rot: 0,\r

  \          onStart: function onStart() {\r

  \            cardElem.style.zIndex = len - 1 + i;\r

  \          },\r

  \          onComplete: function onComplete() {\r

  \            cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  var intro = {\r

  \    deck: function deck(_deck5) {\r

  \      _deck5.intro = _deck5.queued(intro);\r

  \      function intro(next) {\r

  \        var cards = _deck5.cards;\r

  \        cards.forEach(function (card, i) {\r

  \          card.setSide('front');\r

  \          card.intro(i, function (i) {\r

  \            animationFrames(250, 0).start(function () {\r

  \              card.setSide('back');\r

  \            });\r

  \            if (i === cards.length - 1) {\r

  \              next();\r

  \            }\r

  \          });\r

  \        });\r

  \      }\r

  \    },\r

  \    card: function card(_card5) {\r

  \      var transform = prefix('transform');\r

  \      var cardElem = _card5.elem;\r

  \      _card5.intro = function (i, cb) {\r

  \        var delay = 500 + i * 10;\r

  \        var z = i / 4;\r

  \        cardElem.style[transform] = translate(-z + 'px', '-250px');\r

  \        cardElem.style.opacity = 0;\r

  \        _card5.x = -z;\r

  \        _card5.y = -250 - z;\r

  \        _card5.rot = 0;\r

  \        _card5.animateTo({\r

  \          delay: delay,\r

  \          duration: 1000,\r

  \          x: -z,\r

  \          y: -z,\r

  \          onStart: function onStart() {\r

  \            cardElem.style.zIndex = i;\r

  \          },\r

  \          onProgress: function onProgress(t) {\r

  \            cardElem.style.opacity = t;\r

  \          },\r

  \          onComplete: function onComplete() {\r

  \            cardElem.style.opacity = '';\r

  \            cb && cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  var fan = {\r

  \    deck: function deck(_deck6) {\r

  \      _deck6.fan = _deck6.queued(fan);\r

  \      function fan(next) {\r

  \        var cards = _deck6.cards;\r

  \        var len = cards.length;\r

  \        _fontSize = fontSize();\r

  \        cards.forEach(function (card, i) {\r

  \          card.fan(i, len, function (i) {\r

  \            if (i === cards.length - 1) {\r

  \              next();\r

  \            }\r

  \          });\r

  \        });\r

  \      }\r

  \    },\r

  \    card: function card(_card6) {\r

  \      var cardElem = _card6.elem;\r

  \      _card6.fan = function (i, len, cb) {\r

  \        var z = i / 4;\r

  \        var delay = i * 10;\r

  \        var rot = i / (len - 1) * 260 - 130;\r

  \        _card6.animateTo({\r

  \          delay: delay,\r

  \          duration: 300,\r

  \          x: -z,\r

  \          y: -z,\r

  \          rot: 0\r

  \        });\r

  \        _card6.animateTo({\r

  \          delay: 300 + delay,\r

  \          duration: 300,\r

  \          x: Math.cos(deg2rad(rot - 90)) * 55 * _fontSize / 16,\r

  \          y: Math.sin(deg2rad(rot - 90)) * 55 * _fontSize / 16,\r

  \          rot: rot,\r

  \          onStart: function onStart() {\r

  \            cardElem.style.zIndex = i;\r

  \          },\r

  \          onComplete: function onComplete() {\r

  \            cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  var bysuit = {\r

  \    deck: function deck(_deck7) {\r

  \      _deck7.bysuit = _deck7.queued(bysuit);\r

  \      function bysuit(next) {\r

  \        var cards = _deck7.cards;\r

  \        ___fontSize = fontSize();\r

  \        cards.forEach(function (card) {\r

  \          card.bysuit(function (i) {\r

  \            if (i === cards.length - 1) {\r

  \              next();\r

  \            }\r

  \          });\r

  \        });\r

  \      }\r

  \    },\r

  \    card: function card(_card7) {\r

  \      var rank = _card7.rank;\r

  \      var suit = _card7.suit;\r

  \      _card7.bysuit = function (cb) {\r

  \        var i = _card7.i;\r

  \        var delay = i * 10;\r

  \        _card7.animateTo({\r

  \          delay: delay,\r

  \          duration: 400,\r

  \          x: -Math.round((6.75 - rank) * 8 * ___fontSize / 16),\r

  \          y: -Math.round((1.5 - suit) * 92 * ___fontSize / 16),\r

  \          rot: 0,\r

  \          onComplete: function onComplete() {\r

  \            cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  //#endregion\r

  \  //#region helpers\r

  \  function createElement(type) {\r

  \    return document.createElement(type);\r

  \  }\r

  \  function addListener(target, name, listener) {\r

  \    target.addEventListener(name, listener);\r

  \  }\r

  \  function removeListener(target, name, listener) {\r

  \    target.removeEventListener(name, listener);\r

  \  }\r

  \  function plusminus(value) {\r

  \    var plusminus = Math.round(Math.random()) ? -1 : 1;\r

  \    return plusminus * value;\r

  \  }\r

  \  function fisherYates(array) {\r

  \    var rnd, temp;\r

  \    for (var i = array.length - 1; i; i--) {\r

  \      rnd = Math.random() * i | 0;\r

  \      temp = array[i];\r

  \      array[i] = array[rnd];\r

  \      array[rnd] = temp;\r

  \    }\r

  \    return array;\r

  \  }\r

  \  function fontSize() {\r

  \    return
  window.getComputedStyle(document.body).getPropertyValue('font-size').slice(0,
  -2);\r

  \  }\r

  \  function deg2rad(degrees) {\r

  \    return degrees * Math.PI / 180;\r

  \  }\r

  \  function queue(target) {\r

  \    var array = Array.prototype;\r

  \    var queueing = [];\r

  \    target.queue = queue;\r

  \    target.queued = queued;\r

  \    return target;\r

  \    function queued(action) {\r

  \      return function () {\r

  \        var self = this;\r

  \        var args = arguments;\r

  \        queue(function (next) {\r

  \          action.apply(self, array.concat.apply(next, args));\r

  \        });\r

  \      };\r

  \    }\r

  \    function queue(action) {\r

  \      if (!action) {\r

  \        return;\r

  \      }\r

  \      queueing.push(action);\r

  \      if (queueing.length === 1) {\r

  \        next();\r

  \      }\r

  \    }\r

  \    function next() {\r

  \      queueing[0](function (err) {\r

  \        if (err) {\r

  \          throw err;\r

  \        }\r

  \        queueing = queueing.slice(1);\r

  \        if (queueing.length) {\r

  \          next();\r

  \        }\r

  \      });\r

  \    }\r

  \  }\r

  \  function observable(target) {\r

  \    target || (target = {});\r

  \    var listeners = {};\r

  \    target.on = on;\r

  \    target.one = one;\r

  \    target.off = off;\r

  \    target.trigger = trigger;\r

  \    return target;\r

  \    function on(name, cb, ctx) {\r

  \      listeners[name] || (listeners[name] = []);\r

  \      listeners[name].push({ cb: cb, ctx: ctx });\r

  \    }\r

  \    function one(name, cb, ctx) {\r

  \      listeners[name] || (listeners[name] = []);\r

  \      listeners[name].push({\r

  \        cb: cb, ctx: ctx, once: true\r

  \      });\r

  \    }\r

  \    function trigger(name) {\r

  \      var self = this;\r

  \      var args = Array.prototype.slice(arguments, 1);\r

  \      var currentListeners = listeners[name] || [];\r

  \      currentListeners.filter(function (listener) {\r

  \        listener.cb.apply(self, args);\r

  \        return !listener.once;\r

  \      });\r

  \    }\r

  \    function off(name, cb) {\r

  \      if (!name) {\r

  \        listeners = {};\r

  \        return;\r

  \      }\r

  \      if (!cb) {\r

  \        listeners[name] = [];\r

  \        return;\r

  \      }\r

  \      listeners[name] = listeners[name].filter(function (listener) {\r

  \        return listener.cb !== cb;\r

  \      });\r

  \    }\r

  \  }\r

  \  function animationFrames(delay, duration) {\r

  \    var now = Date.now();\r

  \    var start = now + delay;\r

  \    var end = start + duration;\r

  \    var animation = {\r

  \      start: start,\r

  \      end: end\r

  \    };\r

  \    animations.push(animation);\r

  \    if (!ticking) {\r

  \      ticking = true;\r

  \      requestAnimationFrame(tick);\r

  \    }\r

  \    var self = {\r

  \      start: function start(cb) {\r

  \        animation.startcb = cb;\r

  \        return self;\r

  \      },\r

  \      progress: function progress(cb) {\r

  \        animation.progresscb = cb;\r

  \        return self;\r

  \      },\r

  \      end: function end(cb) {\r

  \        animation.endcb = cb;\r

  \        return self;\r

  \      }\r

  \    };\r

  \    return self;\r

  \  }\r

  \  function tick() {\r

  \    var now = Date.now();\r

  \    if (!animations.length) {\r

  \      ticking = false;\r

  \      return;\r

  \    }\r

  \    for (var i = 0, animation; i < animations.length; i++) {\r

  \      animation = animations[i];\r

  \      if (now < animation.start) {\r

  \        continue;\r

  \      }\r

  \      if (!animation.started) {\r

  \        animation.started = true;\r

  \        animation.startcb && animation.startcb();\r

  \      }\r

  \      var t = (now - animation.start) / (animation.end -
  animation.start);\r

  \      animation.progresscb && animation.progresscb(t < 1 ? t : 1);\r

  \      if (now > animation.end) {\r

  \        animation.endcb && animation.endcb();\r

  \        animations.splice(i--, 1);\r

  \        continue;\r

  \      }\r

  \    }\r

  \    requestAnimationFrame(tick);\r

  \  }\r

  \  function prefix(param) {\r

  \    if (typeof memoized[param] !== 'undefined') {\r

  \      return memoized[param];\r

  \    }\r

  \    if (typeof style[param] !== 'undefined') {\r

  \      memoized[param] = param;\r

  \      return param;\r

  \    }\r

  \    var camelCase = param[0].toUpperCase() + param.slice(1);\r

  \    var prefixes = ['webkit', 'moz', 'Moz', 'ms', 'o'];\r

  \    var test;\r

  \    for (var i = 0, len = prefixes.length; i < len; i++) {\r

  \      test = prefixes[i] + camelCase;\r

  \      if (typeof style[test] !== 'undefined') {\r

  \        memoized[param] = test;\r

  \        return test;\r

  \      }\r

  \    }\r

  \  }\r

  \  function translate(a, b, c) {\r

  \    typeof has3d !== 'undefined' || (has3d = check3d());\r

  \    c = c || 0;\r

  \    if (has3d) {\r

  \      return 'translate3d(' + a + ', ' + b + ', ' + c + ')';\r

  \    } else {\r

  \      return 'translate(' + a + ', ' + b + ')';\r

  \    }\r

  \  }\r

  \  function check3d() {\r

  \    // http://julian.com/research/velocity/\r

  \    var isMobile =
  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera
  Mini/i.test(navigator.userAgent);\r

  \    if (!isMobile) {\r

  \      return false;\r

  \    }\r

  \    var transform = prefix('transform');\r

  \    var $p = document.createElement('p');\r

  \    document.body.appendChild($p);\r

  \    $p.style[transform] = 'translate3d(1px,1px,1px)';\r

  \    has3d = $p.style[transform];\r

  \    has3d = has3d != null && has3d.length && has3d !== 'none';\r

  \    document.body.removeChild($p);\r

  \    return has3d;\r

  \  }\r

  \  function iToSuit52(suit) {\r

  \    return suit === 0 ? 'spades' : suit === 1 ? 'hearts' : suit === 2 ?
  'clubs' : suit === 3 ? 'diamonds' : 'joker';\r

  \  }\r

  \  //#endregion\r

  \  function _card(i, text = '') {\r

  \    var transform = prefix('transform');\r

  \    var rank = i % 13 + 1;\r

  \    var suit = i / 13 | 0;\r

  \    var z = (52 - i) / displacement;\r

  \    var elem = createElement('div');\r

  \    var faceElem = createElement('div');\r

  \    var backElem = createElement('div');\r

  \    var isDraggable = false;\r

  \    var isFlippable = false;\r

  \    var self = {\r

  \      text: text, i: i, rank: rank, suit: suit, pos: i, elem: elem,\r

  \      mount: mount, unmount: unmount, setSide: setSide\r

  \    };\r

  \    var modules = DeckA.modules;\r

  \    var module;\r

  \    faceElem.classList.add('face');\r

  \    backElem.classList.add('back');\r

  \    elem.style[transform] = translate(-z + 'px', -z + 'px');\r

  \    self.x = -z;\r

  \    self.y = -z;\r

  \    self.z = z;\r

  \    self.rot = 0;\r

  \    self.setSide('back');\r

  \    addListener(elem, 'mousedown', onMousedown);\r

  \    addListener(elem, 'touchstart', onMousedown);\r

  \    for (module in modules) {\r

  \      addModule(modules[module]);\r

  \    }\r

  \    self.animateTo = function (params) {\r

  \      var delay = params.delay;\r

  \      var duration = params.duration;\r

  \      var _params$x = params.x;\r

  \      var x = _params$x === undefined ? self.x : _params$x;\r

  \      var _params$y = params.y;\r

  \      var y = _params$y === undefined ? self.y : _params$y;\r

  \      var _params$rot = params.rot;\r

  \      var rot = _params$rot === undefined ? self.rot : _params$rot;\r

  \      var ease$$ = params.ease;\r

  \      var onStart = params.onStart;\r

  \      var onProgress = params.onProgress;\r

  \      var onComplete = params.onComplete;\r

  \      var startX, startY, startRot;\r

  \      var diffX, diffY, diffRot;\r

  \      animationFrames(delay, duration).start(function () {\r

  \        startX = self.x || 0;\r

  \        startY = self.y || 0;\r

  \        startRot = self.rot || 0;\r

  \        onStart && onStart();\r

  \      }).progress(function (t) {\r

  \        var et = ease[ease$$ || 'cubicInOut'](t);\r

  \        diffX = x - startX;\r

  \        diffY = y - startY;\r

  \        diffRot = rot - startRot;\r

  \        onProgress && onProgress(t, et);\r

  \        self.x = startX + diffX * et;\r

  \        self.y = startY + diffY * et;\r

  \        self.rot = startRot + diffRot * et;\r

  \        elem.style[transform] = translate(self.x + 'px', self.y + 'px') +
  (diffRot ? 'rotate(' + self.rot + 'deg)' : '');\r

  \      }).end(function () {\r

  \        onComplete && onComplete();\r

  \      });\r

  \    };\r

  \    self.setRankSuit = function (rank, suit) {\r

  \      elem.setAttribute('class', 'card blank')\r

  \      faceElem.style.fontSize = '8px';\r

  \      faceElem.innerHTML = 'hallo das ist eine wundeschoene catan
  karte!';\r

  \    };\r

  \    self.setText = function (text = 'hallo das ist eine wundeschoene catan
  karte!') {\r

  \      elem.setAttribute('class', 'card blank')\r

  \      faceElem.innerHTML = text;\r

  \    };\r

  \    self.setRankSuit(rank, suit);\r

  \    self.enableDragging = function () {\r

  \      if (isDraggable) {\r

  \        return;\r

  \      }\r

  \      isDraggable = true;\r

  \      elem.style.cursor = 'move';\r

  \    };\r

  \    self.enableFlipping = function () {\r

  \      if (isFlippable) {\r

  \        return;\r

  \      }\r

  \      isFlippable = true;\r

  \    };\r

  \    self.disableFlipping = function () {\r

  \      if (!isFlippable) {\r

  \        return;\r

  \      }\r

  \      isFlippable = false;\r

  \    };\r

  \    self.disableDragging = function () {\r

  \      if (!isDraggable) {\r

  \        return;\r

  \      }\r

  \      isDraggable = false;\r

  \      elem.style.cursor = '';\r

  \    };\r

  \    return self;\r

  \    function addModule(module) {\r

  \      module.card && module.card(self);\r

  \    }\r

  \    function onMousedown(e) {\r

  \      var startPos = {};\r

  \      var pos = {};\r

  \      var starttime = Date.now();\r

  \      e.preventDefault();\r

  \      if (e.type === 'mousedown') {\r

  \        startPos.x = pos.x = e.clientX;\r

  \        startPos.y = pos.y = e.clientY;\r

  \        addListener(window, 'mousemove', onMousemove);\r

  \        addListener(window, 'mouseup', onMouseup);\r

  \      } else {\r

  \        startPos.x = pos.x = e.touches[0].clientX;\r

  \        startPos.y = pos.y = e.touches[0].clientY;\r

  \        addListener(window, 'touchmove', onMousemove);\r

  \        addListener(window, 'touchend', onMouseup);\r

  \      }\r

  \      if (!isDraggable) {\r

  \        return;\r

  \      }\r

  \      elem.style[transform] = translate(self.x + 'px', self.y + 'px') +
  (self.rot ? ' rotate(' + self.rot + 'deg)' : '');\r

  \      elem.style.zIndex = maxZ++;\r

  \      function onMousemove(e) {\r

  \        if (!isDraggable) {\r

  \          return;\r

  \        }\r

  \        if (e.type === 'mousemove') {\r

  \          pos.x = e.clientX;\r

  \          pos.y = e.clientY;\r

  \        } else {\r

  \          pos.x = e.touches[0].clientX;\r

  \          pos.y = e.touches[0].clientY;\r

  \        }\r

  \        elem.style[transform] = translate(Math.round(self.x + pos.x -
  startPos.x) + 'px', Math.round(self.y + pos.y - startPos.y) + 'px') +
  (self.rot ? ' rotate(' + self.rot + 'deg)' : '');\r

  \      }\r

  \      function onMouseup(e) {\r

  \        if (isFlippable && Date.now() - starttime < 200) {\r

  \          self.setSide(self.side === 'front' ? 'back' : 'front');\r

  \        }\r

  \        if (e.type === 'mouseup') {\r

  \          removeListener(window, 'mousemove', onMousemove);\r

  \          removeListener(window, 'mouseup', onMouseup);\r

  \        } else {\r

  \          removeListener(window, 'touchmove', onMousemove);\r

  \          removeListener(window, 'touchend', onMouseup);\r

  \        }\r

  \        if (!isDraggable) {\r

  \          return;\r

  \        }\r

  \        self.x = self.x + pos.x - startPos.x;\r

  \        self.y = self.y + pos.y - startPos.y;\r

  \      }\r

  \    }\r

  \    function mount(target) {\r

  \      target.appendChild(elem);\r

  \      self.dCard = target;\r

  \    }\r

  \    function unmount() {\r

  \      self.dCard && self.dCard.removeChild(elem);\r

  \      self.dCard = null;\r

  \    }\r

  \    function setSide(newSide) {\r

  \      if (newSide === 'front') {\r

  \        if (self.side === 'back') {\r

  \          elem.removeChild(backElem);\r

  \        }\r

  \        self.side = 'front';\r

  \        elem.appendChild(faceElem);\r

  \        self.setRankSuit(self.rank, self.suit);\r

  \      } else {\r

  \        if (self.side === 'front') {\r

  \          elem.removeChild(faceElem);\r

  \        }\r

  \        self.side = 'back';\r

  \        elem.appendChild(backElem);\r

  \        elem.setAttribute('class', 'card');\r

  \      }\r

  \    }\r

  \  }\r

  \  function DeckA(jokers) {\r

  \    var cards = new Array(jokers ? 55 : 52);\r

  \    var deckElem = createElement('div');\r

  \    var self = observable({ mount: mount, unmount: unmount, cards: cards,
  elem: deckElem });\r

  \    var dDeck;\r

  \    var modules = DeckA.modules;\r

  \    var module;\r

  \    queue(self);\r

  \    for (module in modules) {\r

  \      addModule(modules[module]);\r

  \    }\r

  \    deckElem.classList.add('deck');\r

  \    var card;\r

  \    for (var i = cards.length; i; i--) {\r

  \      card = cards[i - 1] = _card(i - 1);\r

  \      card.setSide('back');\r

  \      card.mount(deckElem);\r

  \    }\r

  \    return self;\r

  \    function mount(root) {\r

  \      dDeck = root;\r

  \      dDeck.appendChild(deckElem);\r

  \    }\r

  \    function unmount() {\r

  \      dDeck.removeChild(deckElem);\r

  \    }\r

  \    function addModule(module) {\r

  \      module.deck && module.deck(self);\r

  \    }\r

  \  }\r

  \  DeckA.animationFrames = animationFrames;\r

  \  DeckA.ease = ease;\r

  \  DeckA.modules = { bysuit: bysuit, fan: fan, intro: intro, poker: poker,
  pokerN: pokerN, shuffle: shuffle, sort: sort, flip: flip };\r

  \  DeckA.Card = _card;\r

  \  DeckA.prefix = prefix;\r

  \  DeckA.translate = translate;\r

  \  return DeckA;\r

  })();"
DeckB: "var DeckB = (function () {\r

  \  //#region variables  \r

  \  let ____fontSize;\r

  \  let ___fontSize;\r

  \  let __fontSize;\r

  \  let _fontSize;\r

  \  let ticking;\r

  \  let animations = [];\r

  \  let style = document.createElement('p').style;\r

  \  let memoized = {};\r

  \  let has3d;\r

  \  let maxZ = 52;\r

  \  let displacement = 4;\r

  \  let _deckParams = {};\r

  \  window.requestAnimationFrame || (window.requestAnimationFrame = function
  (cb) { setTimeout(cb, 0); });\r

  \  //#endregion\r

  \  //#region modules\r

  \  var ease = {\r

  \    linear: function linear(t) {\r

  \      return t;\r

  \    },\r

  \    quadIn: function quadIn(t) {\r

  \      return t * t;\r

  \    },\r

  \    quadOut: function quadOut(t) {\r

  \      return t * (2 - t);\r

  \    },\r

  \    quadInOut: function quadInOut(t) {\r

  \      return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\r

  \    },\r

  \    cubicIn: function cubicIn(t) {\r

  \      return t * t * t;\r

  \    },\r

  \    cubicOut: function cubicOut(t) {\r

  \      return --t * t * t + 1;\r

  \    },\r

  \    cubicInOut: function cubicInOut(t) {\r

  \      return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2)
  + 1;\r

  \    },\r

  \    quartIn: function quartIn(t) {\r

  \      return t * t * t * t;\r

  \    },\r

  \    quartOut: function quartOut(t) {\r

  \      return 1 - --t * t * t * t;\r

  \    },\r

  \    quartInOut: function quartInOut(t) {\r

  \      return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\r

  \    },\r

  \    quintIn: function quintIn(t) {\r

  \      return t * t * t * t * t;\r

  \    },\r

  \    quintOut: function quintOut(t) {\r

  \      return 1 + --t * t * t * t * t;\r

  \    },\r

  \    quintInOut: function quintInOut(t) {\r

  \      return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t *
  t;\r

  \    }\r

  \  };\r

  \  var flip = {\r

  \    deck: function deck(_deck) {\r

  \      _deck.flip = _deck.queued(flip);\r

  \      function flip(next, side) {\r

  \        var flipped = _deck.cards.filter(function (card) {\r

  \          return card.side === 'front';\r

  \        }).length / _deck.cards.length;\r

  \        _deck.cards.forEach(function (card, i) {\r

  \          card.setSide(side ? side : flipped > 0.5 ? 'back' : 'front');\r

  \        });\r

  \        next();\r

  \      }\r

  \    }\r

  \  };\r

  \  var sort = {\r

  \    deck: function deck(_deck2) {\r

  \      _deck2.sort = _deck2.queued(sort);\r

  \      function sort(next, reverse) {\r

  \        var cards = _deck2.cards;\r

  \        cards.sort(function (a, b) {\r

  \          if (reverse) {\r

  \            return a.i - b.i;\r

  \          } else {\r

  \            return b.i - a.i;\r

  \          }\r

  \        });\r

  \        cards.forEach(function (card, i) {\r

  \          card.sort(i, cards.length, function (i) {\r

  \            if (i === cards.length - 1) {\r

  \              next();\r

  \            }\r

  \          }, reverse);\r

  \        });\r

  \      }\r

  \    },\r

  \    card: function card(_card2) {\r

  \      var cardElem = _card2.elem;\r

  \      _card2.sort = function (i, len, cb, reverse) {\r

  \        var z = i / 4;\r

  \        var delay = i * 10;\r

  \        _card2.animateTo({\r

  \          delay: delay,\r

  \          duration: 400,\r

  \          x: -z,\r

  \          y: -150,\r

  \          rot: 0,\r

  \          onComplete: function onComplete() {\r

  \            cardElem.style.zIndex = i;\r

  \          }\r

  \        });\r

  \        _card2.animateTo({\r

  \          delay: delay + 500,\r

  \          duration: 400,\r

  \          x: -z,\r

  \          y: -z,\r

  \          rot: 0,\r

  \          onComplete: function onComplete() {\r

  \            cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  var shuffle = {\r

  \    deck: function deck(_deck3) {\r

  \      _deck3.shuffle = _deck3.queued(shuffle);\r

  \      function shuffle(next) {\r

  \        var cards = _deck3.cards;\r

  \        ____fontSize = fontSize();\r

  \        fisherYates(cards);\r

  \        cards.forEach(function (card, i) {\r

  \          card.pos = i;\r

  \          card.shuffle(function (i) {\r

  \            if (i === cards.length - 1) {\r

  \              next();\r

  \            }\r

  \          });\r

  \        });\r

  \        return;\r

  \      }\r

  \    },\r

  \    card: function card(_card3) {\r

  \      var cardElem = _card3.elem;\r

  \      _card3.shuffle = function (cb) {\r

  \        var i = _card3.pos;\r

  \        var z = i / 4;\r

  \        var delay = i * 2;\r

  \        _card3.animateTo({\r

  \          delay: delay,\r

  \          duration: 200,\r

  \          x: plusminus(Math.random() * 40 + 20) * ____fontSize / 16,\r

  \          y: -z,\r

  \          rot: 0\r

  \        });\r

  \        _card3.animateTo({\r

  \          delay: 200 + delay,\r

  \          duration: 200,\r

  \          x: -z,\r

  \          y: -z,\r

  \          rot: 0,\r

  \          onStart: function onStart() {\r

  \            cardElem.style.zIndex = i;\r

  \          },\r

  \          onComplete: function onComplete() {\r

  \            cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  var poker = {\r

  \    deck: function deck(_deck4) {\r

  \      _deck4.poker = _deck4.queued(poker);\r

  \      function poker(next) {\r

  \        var cards = _deck4.cards;\r

  \        var len = cards.length;\r

  \        __fontSize = fontSize();\r

  \        cards.slice(-5).reverse().forEach(function (card, i) {\r

  \          card.poker(i, len, function (i) {\r

  \            card.setSide('front');\r

  \            if (i === 4) {\r

  \              next();\r

  \            }\r

  \          });\r

  \        });\r

  \      }\r

  \    },\r

  \    card: function card(_card4) {\r

  \      var cardElem = _card4.elem;\r

  \      _card4.poker = function (i, len, cb) {\r

  \        var delay = i * 250;\r

  \        _card4.animateTo({\r

  \          delay: delay,\r

  \          duration: 250,\r

  \          x: Math.round((i - 2.05) * 70 * __fontSize / 16),\r

  \          y: Math.round(-110 * __fontSize / 16),\r

  \          rot: 0,\r

  \          onStart: function onStart() {\r

  \            cardElem.style.zIndex = len - 1 + i;\r

  \          },\r

  \          onComplete: function onComplete() {\r

  \            cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  var intro = {\r

  \    deck: function deck(_deck5) {\r

  \      _deck5.intro = _deck5.queued(intro);\r

  \      function intro(next) {\r

  \        var cards = _deck5.cards;\r

  \        cards.forEach(function (card, i) {\r

  \          card.setSide('front');\r

  \          card.intro(i, function (i) {\r

  \            animationFrames(250, 0).start(function () {\r

  \              card.setSide('back');\r

  \            });\r

  \            if (i === cards.length - 1) {\r

  \              next();\r

  \            }\r

  \          });\r

  \        });\r

  \      }\r

  \    },\r

  \    card: function card(_card5) {\r

  \      var transform = prefix('transform');\r

  \      var cardElem = _card5.elem;\r

  \      _card5.intro = function (i, cb) {\r

  \        var delay = 500 + i * 10;\r

  \        var z = i / 4;\r

  \        cardElem.style[transform] = translate(-z + 'px', '-250px');\r

  \        cardElem.style.opacity = 0;\r

  \        _card5.x = -z;\r

  \        _card5.y = -250 - z;\r

  \        _card5.rot = 0;\r

  \        _card5.animateTo({\r

  \          delay: delay,\r

  \          duration: 1000,\r

  \          x: -z,\r

  \          y: -z,\r

  \          onStart: function onStart() {\r

  \            cardElem.style.zIndex = i;\r

  \          },\r

  \          onProgress: function onProgress(t) {\r

  \            cardElem.style.opacity = t;\r

  \          },\r

  \          onComplete: function onComplete() {\r

  \            cardElem.style.opacity = '';\r

  \            cb && cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  var fan = {\r

  \    deck: function deck(_deck6) {\r

  \      _deck6.fan = _deck6.queued(fan);\r

  \      function fan(next) {\r

  \        var cards = _deck6.cards;\r

  \        var len = cards.length;\r

  \        _fontSize = fontSize();\r

  \        cards.forEach(function (card, i) {\r

  \          card.fan(i, len, function (i) {\r

  \            if (i === cards.length - 1) {\r

  \              next();\r

  \            }\r

  \          });\r

  \        });\r

  \      }\r

  \    },\r

  \    card: function card(_card6) {\r

  \      var cardElem = _card6.elem;\r

  \      _card6.fan = function (i, len, cb) {\r

  \        var z = i / 4;\r

  \        var delay = i * 10;\r

  \        var rot = i / (len - 1) * 260 - 130;\r

  \        _card6.animateTo({\r

  \          delay: delay,\r

  \          duration: 300,\r

  \          x: -z,\r

  \          y: -z,\r

  \          rot: 0\r

  \        });\r

  \        _card6.animateTo({\r

  \          delay: 300 + delay,\r

  \          duration: 300,\r

  \          x: Math.cos(deg2rad(rot - 90)) * 55 * _fontSize / 16,\r

  \          y: Math.sin(deg2rad(rot - 90)) * 55 * _fontSize / 16,\r

  \          rot: rot,\r

  \          onStart: function onStart() {\r

  \            cardElem.style.zIndex = i;\r

  \          },\r

  \          onComplete: function onComplete() {\r

  \            cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  var bysuit = {\r

  \    deck: function deck(_deck7) {\r

  \      _deck7.bysuit = _deck7.queued(bysuit);\r

  \      function bysuit(next) {\r

  \        var cards = _deck7.cards;\r

  \        ___fontSize = fontSize();\r

  \        cards.forEach(function (card) {\r

  \          card.bysuit(function (i) {\r

  \            if (i === cards.length - 1) {\r

  \              next();\r

  \            }\r

  \          });\r

  \        });\r

  \      }\r

  \    },\r

  \    card: function card(_card7) {\r

  \      var rank = _card7.rank;\r

  \      var suit = _card7.suit;\r

  \      _card7.bysuit = function (cb) {\r

  \        var i = _card7.i;\r

  \        var delay = i * 10;\r

  \        _card7.animateTo({\r

  \          delay: delay,\r

  \          duration: 400,\r

  \          x: -Math.round((6.75 - rank) * 8 * ___fontSize / 16),\r

  \          y: -Math.round((1.5 - suit) * 92 * ___fontSize / 16),\r

  \          rot: 0,\r

  \          onComplete: function onComplete() {\r

  \            cb(i);\r

  \          }\r

  \        });\r

  \      };\r

  \    }\r

  \  };\r

  \  //#endregion\r

  \  //#region helpers\r

  \  function createElement(type) {\r

  \    return document.createElement(type);\r

  \  }\r

  \  function addListener(target, name, listener) {\r

  \    target.addEventListener(name, listener);\r

  \  }\r

  \  function removeListener(target, name, listener) {\r

  \    target.removeEventListener(name, listener);\r

  \  }\r

  \  function plusminus(value) {\r

  \    var plusminus = Math.round(Math.random()) ? -1 : 1;\r

  \    return plusminus * value;\r

  \  }\r

  \  function fisherYates(array) {\r

  \    var rnd, temp;\r

  \    for (var i = array.length - 1; i; i--) {\r

  \      rnd = Math.random() * i | 0;\r

  \      temp = array[i];\r

  \      array[i] = array[rnd];\r

  \      array[rnd] = temp;\r

  \    }\r

  \    return array;\r

  \  }\r

  \  function fontSize() {\r

  \    return
  window.getComputedStyle(document.body).getPropertyValue('font-size').slice(0,
  -2);\r

  \  }\r

  \  function deg2rad(degrees) {\r

  \    return degrees * Math.PI / 180;\r

  \  }\r

  \  function queue(target) {\r

  \    var array = Array.prototype;\r

  \    var queueing = [];\r

  \    target.queue = queue;\r

  \    target.queued = queued;\r

  \    return target;\r

  \    function queued(action) {\r

  \      return function () {\r

  \        var self = this;\r

  \        var args = arguments;\r

  \        queue(function (next) {\r

  \          action.apply(self, array.concat.apply(next, args));\r

  \        });\r

  \      };\r

  \    }\r

  \    function queue(action) {\r

  \      if (!action) {\r

  \        return;\r

  \      }\r

  \      queueing.push(action);\r

  \      if (queueing.length === 1) {\r

  \        next();\r

  \      }\r

  \    }\r

  \    function next() {\r

  \      queueing[0](function (err) {\r

  \        if (err) {\r

  \          throw err;\r

  \        }\r

  \        queueing = queueing.slice(1);\r

  \        if (queueing.length) {\r

  \          next();\r

  \        }\r

  \      });\r

  \    }\r

  \  }\r

  \  function observable(target) {\r

  \    target || (target = {});\r

  \    var listeners = {};\r

  \    target.on = on;\r

  \    target.one = one;\r

  \    target.off = off;\r

  \    target.trigger = trigger;\r

  \    return target;\r

  \    function on(name, cb, ctx) {\r

  \      listeners[name] || (listeners[name] = []);\r

  \      listeners[name].push({ cb: cb, ctx: ctx });\r

  \    }\r

  \    function one(name, cb, ctx) {\r

  \      listeners[name] || (listeners[name] = []);\r

  \      listeners[name].push({\r

  \        cb: cb, ctx: ctx, once: true\r

  \      });\r

  \    }\r

  \    function trigger(name) {\r

  \      var self = this;\r

  \      var args = Array.prototype.slice(arguments, 1);\r

  \      var currentListeners = listeners[name] || [];\r

  \      currentListeners.filter(function (listener) {\r

  \        listener.cb.apply(self, args);\r

  \        return !listener.once;\r

  \      });\r

  \    }\r

  \    function off(name, cb) {\r

  \      if (!name) {\r

  \        listeners = {};\r

  \        return;\r

  \      }\r

  \      if (!cb) {\r

  \        listeners[name] = [];\r

  \        return;\r

  \      }\r

  \      listeners[name] = listeners[name].filter(function (listener) {\r

  \        return listener.cb !== cb;\r

  \      });\r

  \    }\r

  \  }\r

  \  function animationFrames(delay, duration) {\r

  \    var now = Date.now();\r

  \    var start = now + delay;\r

  \    var end = start + duration;\r

  \    var animation = {\r

  \      start: start,\r

  \      end: end\r

  \    };\r

  \    animations.push(animation);\r

  \    if (!ticking) {\r

  \      ticking = true;\r

  \      requestAnimationFrame(tick);\r

  \    }\r

  \    var self = {\r

  \      start: function start(cb) {\r

  \        animation.startcb = cb;\r

  \        return self;\r

  \      },\r

  \      progress: function progress(cb) {\r

  \        animation.progresscb = cb;\r

  \        return self;\r

  \      },\r

  \      end: function end(cb) {\r

  \        animation.endcb = cb;\r

  \        return self;\r

  \      }\r

  \    };\r

  \    return self;\r

  \  }\r

  \  function tick() {\r

  \    var now = Date.now();\r

  \    if (!animations.length) {\r

  \      ticking = false;\r

  \      return;\r

  \    }\r

  \    for (var i = 0, animation; i < animations.length; i++) {\r

  \      animation = animations[i];\r

  \      if (now < animation.start) {\r

  \        continue;\r

  \      }\r

  \      if (!animation.started) {\r

  \        animation.started = true;\r

  \        animation.startcb && animation.startcb();\r

  \      }\r

  \      var t = (now - animation.start) / (animation.end -
  animation.start);\r

  \      animation.progresscb && animation.progresscb(t < 1 ? t : 1);\r

  \      if (now > animation.end) {\r

  \        animation.endcb && animation.endcb();\r

  \        animations.splice(i--, 1);\r

  \        continue;\r

  \      }\r

  \    }\r

  \    requestAnimationFrame(tick);\r

  \  }\r

  \  function prefix(param) {\r

  \    if (typeof memoized[param] !== 'undefined') {\r

  \      return memoized[param];\r

  \    }\r

  \    if (typeof style[param] !== 'undefined') {\r

  \      memoized[param] = param;\r

  \      return param;\r

  \    }\r

  \    var camelCase = param[0].toUpperCase() + param.slice(1);\r

  \    var prefixes = ['webkit', 'moz', 'Moz', 'ms', 'o'];\r

  \    var test;\r

  \    for (var i = 0, len = prefixes.length; i < len; i++) {\r

  \      test = prefixes[i] + camelCase;\r

  \      if (typeof style[test] !== 'undefined') {\r

  \        memoized[param] = test;\r

  \        return test;\r

  \      }\r

  \    }\r

  \  }\r

  \  function translate(a, b, c) {\r

  \    typeof has3d !== 'undefined' || (has3d = check3d());\r

  \    c = c || 0;\r

  \    if (has3d) {\r

  \      return 'translate3d(' + a + ', ' + b + ', ' + c + ')';\r

  \    } else {\r

  \      return 'translate(' + a + ', ' + b + ')';\r

  \    }\r

  \  }\r

  \  function check3d() {\r

  \    // http://julian.com/research/velocity/\r

  \    var isMobile =
  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera
  Mini/i.test(navigator.userAgent);\r

  \    if (!isMobile) {\r

  \      return false;\r

  \    }\r

  \    var transform = prefix('transform');\r

  \    var $p = document.createElement('p');\r

  \    document.body.appendChild($p);\r

  \    $p.style[transform] = 'translate3d(1px,1px,1px)';\r

  \    has3d = $p.style[transform];\r

  \    has3d = has3d != null && has3d.length && has3d !== 'none';\r

  \    document.body.removeChild($p);\r

  \    return has3d;\r

  \  }\r

  \  //#endregion\r

  \  function fCard(i) {\r

  \    let transform = prefix('transform');\r

  \    let rank = i % 13 + 1;\r

  \    let suit = i / 13 | 0;\r

  \    let z = (_deckParams.N - i) / displacement;\r

  \    let elem = createElement('div');\r

  \    let faceElem = createElement('div');\r

  \    let backElem = createElement('div');\r

  \    let isDraggable = false;\r

  \    let isFlippable = false;\r

  \    let text = 'hallo';\r

  \    let self = { params: _deckParams, text: text, i: i, rank: rank, suit:
  suit, pos: i, elem: elem, mount: mount, unmount: unmount, setSide: setSide
  };\r

  \    let modules = DeckB.modules;\r

  \    let module;\r

  \    faceElem.classList.add('face');\r

  \    backElem.classList.add('back');\r

  \    elem.style[transform] = translate(-z + 'px', -z + 'px');\r

  \    self.x = -z;\r

  \    self.y = -z;\r

  \    self.z = z;\r

  \    self.rot = 0;\r

  \    addListener(elem, 'mousedown', onMousedown);\r

  \    addListener(elem, 'touchstart', onMousedown);\r

  \    for (module in modules) {\r

  \      addModule(modules[module]);\r

  \    }\r

  \    self.animateTo = function (_params) {\r

  \      var delay = _params.delay;\r

  \      var duration = _params.duration;\r

  \      var _params$x = _params.x;\r

  \      var x = _params$x === undefined ? self.x : _params$x;\r

  \      var _params$y = _params.y;\r

  \      var y = _params$y === undefined ? self.y : _params$y;\r

  \      var _params$rot = _params.rot;\r

  \      var rot = _params$rot === undefined ? self.rot : _params$rot;\r

  \      var ease$$ = _params.ease;\r

  \      var onStart = _params.onStart;\r

  \      var onProgress = _params.onProgress;\r

  \      var onComplete = _params.onComplete;\r

  \      var startX, startY, startRot;\r

  \      var diffX, diffY, diffRot;\r

  \      animationFrames(delay, duration).start(function () {\r

  \        startX = self.x || 0;\r

  \        startY = self.y || 0;\r

  \        startRot = self.rot || 0;\r

  \        onStart && onStart();\r

  \      }).progress(function (t) {\r

  \        var et = ease[ease$$ || 'cubicInOut'](t);\r

  \        diffX = x - startX;\r

  \        diffY = y - startY;\r

  \        diffRot = rot - startRot;\r

  \        onProgress && onProgress(t, et);\r

  \        self.x = startX + diffX * et;\r

  \        self.y = startY + diffY * et;\r

  \        self.rot = startRot + diffRot * et;\r

  \        elem.style[transform] = translate(self.x + 'px', self.y + 'px') +
  (diffRot ? 'rotate(' + self.rot + 'deg)' : '');\r

  \      }).end(function () {\r

  \        onComplete && onComplete();\r

  \      });\r

  \    };\r

  \    self.eraseFace = function () {\r

  \      clearElement(faceElem);\r

  \    }\r

  \    self.prepFace = function () {\r

  \      self.params.fPrepFace(self, self.params);\r

  \    }\r

  \    self.updateFace = function () {\r

  \      self.params.fUpdateFace(self, self.params);\r

  \    }\r

  \    self.updateBack = function () {\r

  \      self.params.fUpdateBack(self, self.params);\r

  \    }\r

  \    self.prepFace();\r

  \    self.setSide('back');\r

  \    self.enableDragging = function () {\r

  \      if (isDraggable) {\r

  \        return;\r

  \      }\r

  \      isDraggable = true;\r

  \      elem.style.cursor = 'move';\r

  \    };\r

  \    self.enableFlipping = function () {\r

  \      if (isFlippable) {\r

  \        return;\r

  \      }\r

  \      isFlippable = true;\r

  \    };\r

  \    self.disableFlipping = function () {\r

  \      if (!isFlippable) {\r

  \        return;\r

  \      }\r

  \      isFlippable = false;\r

  \    };\r

  \    self.disableDragging = function () {\r

  \      if (!isDraggable) {\r

  \        return;\r

  \      }\r

  \      isDraggable = false;\r

  \      elem.style.cursor = '';\r

  \    };\r

  \    return self;\r

  \    function addModule(module) {\r

  \      module.card && module.card(self);\r

  \    }\r

  \    function onMousedown(e) {\r

  \      var startPos = {};\r

  \      var pos = {};\r

  \      var starttime = Date.now();\r

  \      e.preventDefault();\r

  \      if (e.type === 'mousedown') {\r

  \        startPos.x = pos.x = e.clientX;\r

  \        startPos.y = pos.y = e.clientY;\r

  \        addListener(window, 'mousemove', onMousemove);\r

  \        addListener(window, 'mouseup', onMouseup);\r

  \      } else {\r

  \        startPos.x = pos.x = e.touches[0].clientX;\r

  \        startPos.y = pos.y = e.touches[0].clientY;\r

  \        addListener(window, 'touchmove', onMousemove);\r

  \        addListener(window, 'touchend', onMouseup);\r

  \      }\r

  \      if (!isDraggable) {\r

  \        return;\r

  \      }\r

  \      elem.style[transform] = translate(self.x + 'px', self.y + 'px') +
  (self.rot ? ' rotate(' + self.rot + 'deg)' : '');\r

  \      elem.style.zIndex = maxZ++;\r

  \      function onMousemove(e) {\r

  \        if (!isDraggable) {\r

  \          return;\r

  \        }\r

  \        if (e.type === 'mousemove') {\r

  \          pos.x = e.clientX;\r

  \          pos.y = e.clientY;\r

  \        } else {\r

  \          pos.x = e.touches[0].clientX;\r

  \          pos.y = e.touches[0].clientY;\r

  \        }\r

  \        elem.style[transform] = translate(Math.round(self.x + pos.x -
  startPos.x) + 'px', Math.round(self.y + pos.y - startPos.y) + 'px') +
  (self.rot ? ' rotate(' + self.rot + 'deg)' : '');\r

  \      }\r

  \      function onMouseup(e) {\r

  \        if (isFlippable && Date.now() - starttime < 200) {\r

  \          self.setSide(self.side === 'front' ? 'back' : 'front');\r

  \        }\r

  \        if (e.type === 'mouseup') {\r

  \          removeListener(window, 'mousemove', onMousemove);\r

  \          removeListener(window, 'mouseup', onMouseup);\r

  \        } else {\r

  \          removeListener(window, 'touchmove', onMousemove);\r

  \          removeListener(window, 'touchend', onMouseup);\r

  \        }\r

  \        if (!isDraggable) {\r

  \          return;\r

  \        }\r

  \        self.x = self.x + pos.x - startPos.x;\r

  \        self.y = self.y + pos.y - startPos.y;\r

  \      }\r

  \    }\r

  \    function mount(target) {\r

  \      target.appendChild(elem);\r

  \      self.dParent = target;\r

  \    }\r

  \    function unmount() {\r

  \      self.dParent && self.dParent.removeChild(elem);\r

  \      self.dParent = null;\r

  \    }\r

  \    function setSide(newSide) {\r

  \      if (newSide === 'front') {\r

  \        if (self.side === 'back') {\r

  \          elem.removeChild(backElem);\r

  \        }\r

  \        self.side = 'front';\r

  \        elem.appendChild(faceElem);\r

  \        self.updateFace();\r

  \      } else {\r

  \        if (self.side === 'front') {\r

  \          elem.removeChild(faceElem);\r

  \        }\r

  \        self.side = 'back';\r

  \        elem.appendChild(backElem);\r

  \        self.updateBack();\r

  \      }\r

  \    }\r

  \  }\r

  \  function fDeck(deckParams) {\r

  \    _deckParams = deckParams;\r

  \    let w = deckParams.size.w;\r

  \    let h = deckParams.size.h;\r

  \    if (deckParams.orientation == 'landscape' && w < h || w > h) {\r

  \      deckParams.size = { w: h, h: w };\r

  \      w = deckParams.size.w;\r

  \      h = deckParams.size.h;\r

  \    }\r

  \    setCSSVariable('--wCard', w + 'px');\r

  \    setCSSVariable('--hCard', h + 'px');\r

  \    let cards = new Array(_deckParams.NTotal);\r

  \    let deckElem = createElement('div');\r

  \    let self = observable({ mount: mount, unmount: unmount, cards: cards,
  elem: deckElem });\r

  \    let dParent;\r

  \    let modules = DeckB.modules;\r

  \    let module;\r

  \    queue(self);\r

  \    for (module in modules) {\r

  \      addModule(modules[module]);\r

  \    }\r

  \    deckElem.classList.add('deck');\r

  \    let card;\r

  \    for (let i = cards.length; i; i--) {\r

  \      card = cards[i - 1] = fCard(i - 1);\r

  \      card.setSide('back');\r

  \      card.mount(deckElem);\r

  \    }\r

  \    return self;\r

  \    function mount(root) {\r

  \      dParent = root;\r

  \      dParent.appendChild(deckElem);\r

  \    }\r

  \    function unmount() {\r

  \      dParent.removeChild(deckElem);\r

  \    }\r

  \    function addModule(module) {\r

  \      module.deck && module.deck(self);\r

  \    }\r

  \  }\r

  \  fDeck.animationFrames = animationFrames;\r

  \  fDeck.ease = ease;\r

  \  fDeck.modules = { bysuit: bysuit, fan: fan, intro: intro, poker: poker,
  shuffle: shuffle, sort: sort, flip: flip };\r

  \  fDeck.Card = fCard;\r

  \  fDeck.prefix = prefix;\r

  \  fDeck.translate = translate;\r

  \  fDeck.params = _deckParams;\r

  \  return { fDeck: fDeck };\r

  })();"
DECKS: var DECKS = 'br';
DeDict: var DeDict;
DEF_DOM_TAG: var DEF_DOM_TAG = 'div';
DEF_ITEM_TYPE: var DEF_ITEM_TYPE = 'dom';
DEF_LIST_TYPE: var DEF_LIST_TYPE = 'dom';
DEFAULT_OBJECT_AREA: var DEFAULT_OBJECT_AREA = 'area_objects';
DEFAULT_PLAYER_AREA: var DEFAULT_PLAYER_AREA = 'area_players';
defaultFocusElement: var defaultFocusElement;
DefaultScoringMode: var DefaultScoringMode = 'n';
defaultSpec: var defaultSpec = null
defaultSpecC: var defaultSpecC = null;
DEFAULTUSERNAME: var DEFAULTUSERNAME = 'gul';
DEFS: var DEFS = null;
DELAY: var DELAY = 1000;
DELAY_APPEAR: var DELAY_APPEAR = 100;
DELAY_BETWEEN_MIKE_AND_SPEECH: var DELAY_BETWEEN_MIKE_AND_SPEECH = 2000;
DELAY_DISAPPEAR: var DELAY_DISAPPEAR = 100;
DELAY_PANE: var DELAY_PANE = 100;
DELETED_IDS: var DELETED_IDS = [];
DELETED_THIS_ROUND: var DELETED_THIS_ROUND = [];
dError: var dError;
dFeedback: var dFeedback;
dFiddle: var dFiddle;
dFleetingMessage: var dFleetingMessage;
dFooter: var dFooter;
dGameControls: var dGameControls;
dGames: var dGames;
dGameTitle: var dGameTitle;
dHeader: var dHeader;
dHelp: var dHelp;
dHint: var dHint;
Dictionary: var Dictionary;
Dinno: var Dinno;
dInstruction: var dInstruction;
DirNum: var DirNum = [0, 0, 8, 4, 4, 8, 8, 0, 8, 4, 4, 8, 8];
divMain: var divMain;
divOpps: var divOpps;
divPlayer: var divPlayer;
dLeft: var dLeft;
dLeiste: var dLeiste;
dLevel: var dLevel;
dLineBottom: var dLineBottom;
dLineBottomLeft: var dLineBottomLeft;
dLineBottomMiddle: var dLineBottomMiddle;
dLineBottomOuter: var dLineBottomOuter;
dLineBottomRight: var dLineBottomRight;
dLineTable: var dLineTable;
dLineTableLeft: var dLineTableLeft;
dLineTableMiddle: var dLineTableMiddle;
dLineTableOuter: var dLineTableOuter;
dLineTableRight: var dLineTableRight;
dLineTitle: var dLineTitle;
dLineTitleLeft: var dLineTitleLeft;
dLineTitleMiddle: var dLineTitleMiddle;
dLineTitleOuter: var dLineTitleOuter;
dLineTitleRight: var dLineTitleRight;
dLineTop: var dLineTop;
dLineTopLeft: var dLineTopLeft;
dLineTopMiddle: var dLineTopMiddle;
dLineTopOuter: var dLineTopOuter;
dLineTopRight: var dLineTopRight;
dLinks: var dLinks;
dLoggedIn: var dLoggedIn;
dLogo: var dLogo;
dMain: var dMain;
dMap: var dMap;
DMAX: var DMAX;
dMenu: var dMenu;
dMessage: var dMessage;
DMM: var DMM = {};
dMoveControls: var dMoveControls;
dOben: var dOben;
DOC_CURRENT_FUNC: var DOC_CURRENT_FUNC;
DOC_CURRENT_PATH_INDEX: var DOC_CURRENT_PATH_INDEX;
DOC_dvIndex: var DOC_dvIndex;
DOC_UIS: var DOC_UIS;
DOC_vault: var DOC_vault;
domUpdate_depth: var domUpdate_depth;
domUpdate_move: var domUpdate_move;
domUpdate_nodes: var domUpdate_nodes;
domUpdate_ordering: var domUpdate_ordering;
domUpdate_score: var domUpdate_score;
DONE: var DONE = {};
dPage: var dPage;
dParent: var dParent;
dPlayerNames: var dPlayerNames;
dPlayerStats: var dPlayerStats;
dPuppet: var dPuppet;
DragElem: var DragElem = null;
draggedElement: var draggedElement;
DragSource: var DragSource = null;
DragSourceItem: var DragSourceItem = null;
DragSourceItems: var DragSourceItems = [];
dragStartOffset: var dragStartOffset;
dRechts: var dRechts;
dRight: var dRight;
dropPosition: var dropPosition = 'none';
DropZoneItem: var DropZoneItem = null;
DropZoneItems: var DropZoneItems = [];
DropZones: var DropZones = [];
dScore: var dScore;
dSettings: var dSettings = mBy('dSettings');
dSidebar: var dSidebar;
DSPEC_PATH: var DSPEC_PATH = '/DATA/defaultSpec';
dStatus: var dStatus;
dSubmitMove: var dSubmitMove;
dTable: var dTable;
dTableName: var dTableName;
dTables: var dTables;
dTableShield: var dTableShield;
dTest: var dTest;
dTestButtons: var dTestButtons;
dTitle: var dTitle;
dTop: var dTop;
dummyString: var dummyString = "translateX(-50%) scale(1.2)";
dUnten: var dUnten;
dUserControls: var dUserControls;
dUsers: var dUsers;
dynSpec: var dynSpec;
EBEF: var EBEF = null;
EC: var EC = {};
EdDict: var EdDict;
EID: var EID = {};
Emicons: "var Emicons = {\r

  \  msmaus:
  \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/micro\
  soft/319/mouse-face_1f42d.png\",\r

  \  gmaus:
  \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/googl\
  e/346/mouse-face_1f42d.png\",\r

  \  smaus:
  \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/softb\
  ank/145/mouse-face_1f42d.png\",\r

  \  twmaus:
  \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/twitt\
  er/322/mouse-face_1f42d.png\",\r

  \  maus:
  \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/whats\
  app/326/mouse-face_1f42d.png\",\r

  };"
emoCharsC: var emoCharsC = null;
emoSets: "var emoSets = {\r

  \  nosymbols: { name: 'nosymbols', f: o => o.group != 'symbols' && o.group
  != 'flags' && o.group != 'clock' },\r

  \  nosymemo: { name: 'nosymemo', f: o => o.group != 'smileys-emotion' &&
  o.group != 'symbols' && o.group != 'flags' && o.group != 'clock' },\r

  \  all: { name: 'all', f: _ => true },\r

  \  activity: { name: 'activity', f: o => o.group == 'people-body' &&
  (o.subgroups == 'person-activity' || o.subgroups == 'person-resting') },\r

  \  animal: { name: 'animal', f: o => startsWith(o.group, 'animal') &&
  startsWith(o.subgroups, 'animal') },\r

  \  body: { name: 'body', f: o => o.group == 'people-body' && o.subgroups ==
  'body-parts' },\r

  \  clock: { name: 'clock', f: o => o.group == 'clock' },\r

  \  drink: { name: 'drink', f: o => o.group == 'food-drink' && o.subgroups ==
  'drink' },\r

  \  emotion: { name: 'emotion', f: o => o.group == 'smileys-emotion' },\r

  \  family: { name: 'family', f: o => o.group == 'people-body' && o.subgroups
  == 'family' },\r

  \  fantasy: { name: 'fantasy', f: o => o.group == 'people-body' &&
  o.subgroups == 'person-fantasy' },\r

  \  food: { name: 'food', f: o => o.group == 'food-drink' &&
  startsWith(o.subgroups, 'food') },\r

  \  fruit: { name: 'fruit', f: o => o.group == 'food-drink' && o.subgroups ==
  'food-fruit' },\r

  \  game: { name: 'game', f: o => (o.group == 'activities' && o.subgroups ==
  'game') },\r

  \  gesture: { name: 'gesture', f: o => o.group == 'people-body' &&
  (o.subgroups == 'person-gesture' || o.subgroups.includes('hand')) },\r

  \  kitchen: { name: 'kitchen', f: o => o.group == 'food-drink' &&
  o.subgroups == 'dishware' },\r

  \  math: { name: 'math', f: o => o.group == 'symbols' && o.subgroups ==
  'math' },\r

  \  misc: { name: 'misc', f: o => o.group == 'symbols' && o.subgroups ==
  'other-symbol' },\r

  \  object: {\r

  \    name: 'object', f: o =>\r

  \      (o.group == 'food-drink' && o.subgroups == 'dishware')\r

  \      || (o.group == 'travel-places' && o.subgroups == 'time')\r

  \      || (o.group == 'activities' && o.subgroups == 'event')\r

  \      || (o.group == 'activities' && o.subgroups == 'award-medal')\r

  \      || (o.group == 'activities' && o.subgroups == 'arts-crafts')\r

  \      || (o.group == 'activities' && o.subgroups == 'sport')\r

  \      || (o.group == 'activities' && o.subgroups == 'game')\r

  \      || (o.group == 'objects')\r

  \      || (o.group == 'activities' && o.subgroups == 'event')\r

  \      || (o.group == 'travel-places' && o.subgroups == 'sky-weather')\r

  \  },\r

  \  person: { name: 'person', f: o => o.group == 'people-body' && o.subgroups
  == 'person' },\r

  \  place: { name: 'place', f: o => startsWith(o.subgroups, 'place') },\r

  \  plant: { name: 'plant', f: o => startsWith(o.group, 'animal') &&
  startsWith(o.subgroups, 'plant') },\r

  \  punctuation: { name: 'punctuation', f: o => o.group == 'symbols' &&
  o.subgroups == 'punctuation' },\r

  \  role: { name: 'role', f: o => o.group == 'people-body' && o.subgroups ==
  'person-role' },\r

  \  shapes: { name: 'shapes', f: o => o.group == 'symbols' && o.subgroups ==
  'geometric' },\r

  \  sport: { name: 'sport', f: o => o.group == 'people-body' && o.subgroups
  == 'person-sport' },\r

  \  sports: { name: 'sports', f: o => (o.group == 'activities' && o.subgroups
  == 'sport') },\r

  \  sternzeichen: { name: 'sternzeichen', f: o => o.group == 'symbols' &&
  o.subgroups == 'zodiac' },\r

  \  symbols: { name: 'symbols', f: o => o.group == 'symbols' },\r

  \  time: { name: 'time', f: o => (o.group == 'travel-places' && o.subgroups
  == 'time') },\r

  \  toolbar: {\r

  \    name: 'toolbar', f: o => (o.group == 'symbols' && o.subgroups ==
  'warning')\r

  \      || (o.group == 'symbols' && o.subgroups == 'arrow')\r

  \      || (o.group == 'symbols' && o.subgroups == 'av-symbol')\r

  \      || (o.group == 'symbols' && o.subgroups == 'other-symbol')\r

  \      || (o.group == 'symbols' && o.subgroups == 'keycap')\r

  \  },\r

  \  transport: { name: 'transport', f: o => startsWith(o.subgroups,
  'transport') && o.subgroups != 'transport-sign' },\r

  \  vegetable: { name: 'vegetable', f: o => o.group == 'food-drink' &&
  o.subgroups == 'food-vegetable' },\r

  };"
EmptyFunc: var EmptyFunc = x => nundef(x) || x == ' ';
ENDGAME_MAT: var ENDGAME_MAT = 1 * PieceVal[PIECES.wR] + 2 * PieceVal[PIECES.wN]
  + 2 * PieceVal[PIECES.wP] + PieceVal[PIECES.wK];
ENN: var ENN = {};
Epsilon: var Epsilon = 1e-10;
ET: var ET = {};
evAddCounter: var evAddCounter = 0;
F: var F;
F_APPLYMOVE: var F_APPLYMOVE;
F_END: var F_END;
F_EVAL: var F_EVAL;
F_MOVES: var F_MOVES;
F_UNDOMOVE: var F_UNDOMOVE;
faChars: var faChars;
faKeys: var faKeys;
FASTSTART: var FASTSTART = false && EXPERIMENTAL;
Fen: var Fen;
FenPositionList: var FenPositionList;
FileChar: var FileChar = "abcdefgh";
FILES: "var FILES = { FILE_A: 0, FILE_B: 1, FILE_C: 2, FILE_D: 3, FILE_E: 4,
  FILE_F: 5, FILE_G: 6, FILE_H: 7, FILE_NONE: 8 };"
FilesBrd: var FilesBrd = new Array(BRD_SQ_NUM);
firstDomLoad: var firstDomLoad = null;
FirstLoad: var FirstLoad = true;
FLAG_AI_CANCELED: var FLAG_AI_CANCELED = false;
FLAG_HINT_ONLY: var FLAG_HINT_ONLY = false;
fleetingMessageTimeout: var fleetingMessageTimeout;
FORCE_REDRAW: var FORCE_REDRAW = false;
FR: var FR = 50;
FRAMERATE: var FRAMERATE = 30;
freeBus: "var freeBus = {\r

  \  \"type\": \"FeatureCollection\",\r

  \  \"features\": [\r

  \    {\r

  \      \"type\": \"Feature\",\r

  \      \"geometry\": {\r

  \        \"type\": \"LineString\",\r

  \        \"coordinates\": [\r

  \          [-105.00341892242432, 39.75383843460583],\r

  \          [-105.0008225440979, 39.751891803969535]\r

  \        ]\r

  \      },\r

  \      \"properties\": {\r

  \        \"popupContent\": \"This is a free bus line that will take you
  across downtown.\",\r

  \        \"underConstruction\": false\r

  \      },\r

  \      \"id\": 1\r

  \    },\r

  \    {\r

  \      \"type\": \"Feature\",\r

  \      \"geometry\": {\r

  \        \"type\": \"LineString\",\r

  \        \"coordinates\": [\r

  \          [-105.0008225440979, 39.751891803969535],\r

  \          [-104.99820470809937, 39.74979664004068]\r

  \        ]\r

  \      },\r

  \      \"properties\": {\r

  \        \"popupContent\": \"This is a free bus line that will take you
  across downtown.\",\r

  \        \"underConstruction\": true\r

  \      },\r

  \      \"id\": 2\r

  \    },\r

  \    {\r

  \      \"type\": \"Feature\",\r

  \      \"geometry\": {\r

  \        \"type\": \"LineString\",\r

  \        \"coordinates\": [\r

  \          [-104.99820470809937, 39.74979664004068],\r

  \          [-104.98689651489258, 39.741052354709055]\r

  \        ]\r

  \      },\r

  \      \"properties\": {\r

  \        \"popupContent\": \"This is a free bus line that will take you
  across downtown.\",\r

  \        \"underConstruction\": false\r

  \      },\r

  \      \"id\": 3\r

  \    }\r

  \  ]\r

  };"
FRUIDCounter: var FRUIDCounter = -1;
FUNCS: var FUNCS = {};
FUNCTIONS: "var FUNCTIONS = {\r

  \  instanceof: 'instanceOf',\r

  \  prop: (o, v) => isdef(o[v]),\r

  \  no_prop: (o, v) => nundef(o[v]),\r

  \  no_spec: (o, v) => false,\r

  }"
G: var G = null;
gaChars: var gaChars;
GAME: var GAME = 'ttt';
GAME_PLAY_UI: var GAME_PLAY_UI = null;
GameController: var GameController = {};
GameCounter: var GameCounter;
Gamename: var Gamename;
GAMEPLID: var GAMEPLID = null;
gameSequence: "var gameSequence = IS_TESTING ? ['gSayPicAuto', 'gTouchPic',
  'gTouchColors', 'gWritePic', 'gMissingLetter', 'gSayPic']\r

  \  : ['gSayPic', 'gTouchColors',
  'gWritePic'];//'gMissingLetter','gTouchPic',"
GameTimer: var GameTimer;
Gaussian: "var Gaussian = function (mean, variance) {\r

  \  if (variance <= 0) {\r

  \    throw new Error('Variance must be > 0 (but was ' + variance + ')');\r

  \  }\r

  \  this.mean = mean;\r

  \  this.variance = variance;\r

  \  this.standardDeviation = Math.sqrt(variance);\r

  }"
GBEF: var GBEF = null;
GC: var GC;
Geo: "const Geo = {\r

  \  layerInfo: {\r

  \    empty: {\r

  \      url: '',\r

  \      options: { maxZoom: 22 }\r

  \    },\r

  \    ru: {\r

  \      url: 'https:/' +
  '/core-sat.maps.yandex.net/tiles?l=sat&v=3.1025.0&x={x}&y={y}&z={z}&scale=1&l\
  ang=ru_RU',\r

  \      options: { minZoom: 0, maxZoom: 19, }\r

  \    },\r

  \    satellite: {\r

  \      url: 'http:/' +
  '/server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{\
  z}/{y}/{x}',\r

  \      options: { maxZoom: 19, attribution: '&copy; <a
  href=\"http:/\"+\"www.esri.com/\">Esri</a>, i-cubed, USDA, USGS, AEX, GeoEye,
  Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community' }\r

  \    },\r

  \    gsatellite: {\r

  \      url: 'http:/' + '/{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\r

  \      options: { maxZoom: 22, subdomains: ['mt0', 'mt1', 'mt2', 'mt3'] }\r

  \    },\r

  \    gstreets: {\r

  \      url: 'http:/' + '/{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',\r

  \      options: { maxZoom: 22, subdomains: ['mt0', 'mt1', 'mt2', 'mt3'] }\r

  \    },\r

  \    ghybrid: {\r

  \      url: 'http:/' + '/{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',\r

  \      options: { maxZoom: 22, subdomains: ['mt0', 'mt1', 'mt2', 'mt3'] }\r

  \    },\r

  \    gterrain: {\r

  \      url: 'http:/' + '/{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}',\r

  \      options: { maxZoom: 22, subdomains: ['mt0', 'mt1', 'mt2', 'mt3'] }\r

  \    },\r

  \    mbsat: {\r

  \      url: 'https:/' +
  '/api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWF\
  wYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw',\r

  \      options: { attribution: 'Map data &copy; <a
  href=\"https:/\"+\"/www.openstreetmap.org/copyright\">OpenStreetMap</a>
  contributors, Imagery © <a href=\"https:/\"+\"/www.mapbox.com/\">Mapbox</a>',
  id: 'mapbox/satellite-v9', tileSize: 512, zoomOffset: -1 }\r

  \    },\r

  \    mbstreets: {\r

  \      url: 'https:/' +
  '/api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWF\
  wYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw',\r

  \      options: { attribution: 'Map data &copy; <a
  href=\"https:/\"+\"/www.openstreetmap.org/copyright\">OpenStreetMap</a>
  contributors, Imagery © <a href=\"https:/\"+\"/www.mapbox.com/\">Mapbox</a>',
  id: 'mapbox/streets-v11', tileSize: 512, zoomOffset: -1 }\r

  \    },\r

  \    mb1: {\r

  \      url: 'https:/' +
  '/api.mapbox.com/styles/v1/mapbox-map-design/cl4whev1w002w16s9mgoliotw/static\
  /-90,35,2.5,0/840x464?access_token=pk.eyJ1IjoibWFwYm94LW1hcC1kZXNpZ24iLCJhIjo\
  iY2syeHpiaHlrMDJvODNidDR5azU5NWcwdiJ9.x0uSqSWGXdoFKuHZC5Eo_Q',\r

  \      options: { attribution: 'Map data &copy; <a
  href=\"https:/\"+\"/www.openstreetmap.org/copyright\">OpenStreetMap</a>
  contributors, Imagery © <a href=\"https:/\"+\"/www.mapbox.com/\">Mapbox</a>',
  tileSize: 512, zoomOffset: -1 }\r

  \    },\r

  \    cartolabels: {\r

  \      url: 'https:/' +
  '/{s}.basemaps.cartocdn.com/light_only_labels/{z}/{x}/{y}{r}.png',\r

  \      options: {\r

  \        attribution: '&copy; <a
  href=\"https:/\"+\"/www.openstreetmap.org/copyright\">OpenStreetMap</a>
  contributors &copy; <a
  href=\"https:/\"+\"/carto.com/attributions\">CARTO</a>',\r

  \        subdomains: 'abcd',\r

  \        maxZoom: 20\r

  \      }\r

  \    },\r

  \    cartonolabels: {\r

  \      url: 'https:/' +
  '/{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png',\r

  \      options: {\r

  \        attribution: '&copy; <a
  href=\"https:/\"+\"/www.openstreetmap.org/copyright\">OpenStreetMap</a>
  contributors &copy; <a
  href=\"https:/\"+\"/carto.com/attributions\">CARTO</a>',\r

  \        subdomains: 'abcd',\r

  \        maxZoom: 20\r

  \      }\r

  \    },\r

  \    cartodark: {\r

  \      url: 'https:/' +
  '/{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png',\r

  \      options: {\r

  \        attribution: '&copy; <a
  href=\"https:/\"+\"/www.openstreetmap.org/copyright\">OpenStreetMap</a>
  contributors &copy; <a
  href=\"https:/\"+\"/carto.com/attributions\">CARTO</a>',\r

  \        subdomains: 'abcd',\r

  \        maxZoom: 20\r

  \      }\r

  \    },\r

  \    osm: {\r

  \      url: 'https:/' + '/tile.openstreetmap.org/{z}/{x}/{y}.png',\r

  \      options: { attribution: '&copy; <a
  href=\"https:/\"+\"/www.openstreetmap.org/copyright\">OpenStreetMap</a>',
  subdomains: ['a', 'b', 'c'] }\r

  \    },\r

  \    osmg: {\r

  \      url: 'https:/' +
  '/{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png',\r

  \      options: { attribution: '&copy; <a
  href=\"https:/\"+\"/www.openstreetmap.org/copyright\">OpenStreetMap</a>',
  subdomains: ['a', 'b', 'c'] }\r

  \    },\r

  \    watercolor: {\r

  \      url: 'http:/' + '/{s}.tile.stamen.com/watercolor/{z}/{x}/{y}.jpg',\r

  \      options: { attribution: 'Map tiles by <a
  href=\"http:/\"+\"stamen.com\">Stamen Design</a>, under <a
  href=\"http:/\"+\"creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by
  <a href=\"http:/\"+\"openstreetmap.org\">OpenStreetMap</a>, under <a
  href=\"http:/\"+\"creativecommons.org/licenses/by-sa/3.0\">CC BY SA</a>.',
  maxZoom: 18, subdomains: 'abcd', }\r

  \    },\r

  \    labels: {\r

  \      url: \"http:/\" + \"tile.stamen.com/toner-labels/{z}/{x}/{y}.png\",\r

  \      options: { attribution: 'Map tiles by <a
  href=\"http:/\"+\"stamen.com\">Stamen Design</a>, under <a
  href=\"http:/\"+\"creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by
  <a href=\"http:/\"+\"openstreetmap.org\">OpenStreetMap</a>, under <a
  href=\"http:/\"+\"www.openstreetmap.org/copyright\">ODbL</a>.', maxZoom: 18
  }\r

  \    },\r

  \    terrain: {\r

  \      url: 'http:/' + '/{s}.tile.stamen.com/terrain/{z}/{x}/{y}.jpg',\r

  \      options: { attribution: 'Map tiles by <a
  href=\"http:/\"+\"stamen.com\">Stamen Design</a>, under <a
  href=\"http:/\"+\"creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by
  <a href=\"http:/\"+\"openstreetmap.org\">OpenStreetMap</a>, under <a
  href=\"http:/\"+\"creativecommons.org/licenses/by-sa/3.0\">CC BY SA</a>.',
  maxZoom: 18, }\r

  \    },\r

  \    terrainbg: {\r

  \      url: 'http:/' +
  '/{s}.tile.stamen.com/terrain-background/{z}/{x}/{y}.jpg',\r

  \      options: { attribution: 'Map tiles by <a
  href=\"http:/\"+\"stamen.com\">Stamen Design</a>, under <a
  href=\"http:/\"+\"creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by
  <a href=\"http:/\"+\"openstreetmap.org\">OpenStreetMap</a>, under <a
  href=\"http:/\"+\"creativecommons.org/licenses/by-sa/3.0\">CC BY SA</a>.',
  maxZoom: 18, }\r

  \    },\r

  \    topo: {\r

  \      url: 'https:/' + '/{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\r

  \      options: {\r

  \        maxZoom: 17,\r

  \        attribution: 'Map data: &copy; <a
  href=\"https:/\"+\"/www.openstreetmap.org/copyright\">OpenStreetMap</a>
  contributors, <a href=\"http:/\"+\"viewfinderpanoramas.org\">SRTM</a> | Map
  style: &copy; <a href=\"https:/\"+\"/opentopomap.org\">OpenTopoMap</a> (<a
  href=\"https:/\"+\"/creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\r

  \      }\r

  \    }\r

  \  },\r

  \  places: {\r

  \    tuerkenschanzpark: [48.23562171298636, 16.337871551513675],\r

  \    sievering: [48.245368124489204, 16.342549324035648],\r

  \    zehenthofgasse: [48.24522522864384, 16.34572505950928],\r

  \    vegagasse: [48.23413529351023, 16.346755027771],\r

  \  },\r

  \  continents: {\r

  \    Africa: ['Algeria', 'Angola', 'Benin', 'Botswana', 'Burkina Faso',
  'Burundi', 'Cameroon', 'Cape Verde', 'Central African Republic', 'Chad',
  'Comoros', 'Congo', 'Democratic Republic of the Congo', 'Djibouti', 'Egypt',
  'Equatorial Guinea', 'Eritrea', 'Ethiopia', 'Gabon', 'Gambia', 'Ghana',
  'Guinea', 'Guinea-Bissau', 'Ivory Coast', 'Kenya', 'Lesotho', 'Liberia',
  'Libya', 'Madagascar', 'Malawi', 'Mali', 'Mauritania', 'Mauritius', 'Mayotte',
  'Morocco', 'Mozambique', 'Namibia', 'Niger', 'Nigeria', 'Reunion', 'Rwanda',
  'Sao Tome And Principe', 'Senegal', 'Seychelles', 'Sierra Leone', 'Somalia',
  'South Africa', 'South Sudan', 'Saint Helena', 'Sudan', 'Swaziland',
  'Tanzania', 'Togo', 'Tunisia', 'Uganda', 'Zambia', 'Zimbabwe'],\r

  \    Asia: ['Afghanistan', 'Bahrain', 'Bangladesh', 'Bhutan', 'Brunei',
  'Myanmar', 'Cambodia', 'China', 'East Timor', 'Hong Kong', 'India',
  'Indonesia', 'Iran', 'Iraq', 'Israel', 'Japan', 'Jordan', 'Kazakhstan',
  'Macau', 'North Korea', 'South Korea', 'Kuwait', 'Kyrgyzstan', 'Laos',
  'Lebanon', 'Malaysia', 'Maldives', 'Mongolia', 'Nepal', 'Oman', 'Pakistan',
  'Philippines', 'Qatar', 'Russia', 'Saudi Arabia', 'Singapore', 'Sri Lanka',
  'Syria', 'Taiwan', 'Tajikistan', 'Thailand', 'Turkey', 'Turkmenistan', 'United
  Arab Emirates', 'Uzbekistan', 'Vietnam', 'Yemen'],\r

  \    Europe: ['Albania', 'Andorra', 'Armenia', 'Austria', 'Azerbaijan',
  'Belarus', 'Belgium', 'Bosnia And Herzegovina', 'Bulgaria', 'Croatia',
  'Cyprus', 'Czechia', 'Denmark', 'Estonia', 'Finland', 'France', 'Georgia',
  'Germany', 'Gibraltar', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Isle Of
  Man', 'Italy', 'Jersey', 'Kosovo', 'Latvia', 'Liechtenstein', 'Lithuania',
  'Luxembourg', 'Macedonia', 'Malta', 'Moldova', 'Monaco', 'Montenegro',
  'Netherlands', 'Norway', 'Poland', 'Portugal', 'Romania', 'San Marino',
  'Serbia', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'Ukraine',
  'United Kingdom', 'Vatican City'],\r

  \    'North America': ['Antigua and Barbuda', 'Bahamas', 'Barbados',
  'Belize', 'Bermuda', 'Cayman Islands', 'Canada', 'Costa Rica', 'Cuba',
  'Dominica', 'Dominican Republic', 'El Salvador', 'Grenada', 'Guadeloupe',
  'Guatemala', 'Haiti', 'Honduras', 'Jamaica', 'Martinique', 'Mexico',
  'Nicaragua', 'Panama', 'Puerto Rico', 'Saint Kitts and Nevis', 'Saint Lucia',
  'Saint Vincent And The Grenadines', 'Trinidad And Tobago', 'United States'],\r

  \    Oceania: ['Australia', 'Fiji', 'French Polynesia', 'Kiribati',
  'Marshall Islands', 'Micronesia', 'Nauru', 'New Caledonia', 'New Zealand',
  'Palau', 'Papua New Guinea', 'Samoa', 'Solomon Islands', 'Tonga', 'Tuvalu',
  'Vanuatu'],\r

  \    'South America': ['Argentina', 'Aruba', 'Bolivia', 'Brazil', 'Chile',
  'Colombia', 'Curacao', 'Ecuador', 'French Guiana', 'Guam', 'Guyana',
  'Paraguay', 'Peru', 'Suriname', 'Uruguay', 'Venezuela']\r

  \  }\r

  };"
Globals: var Globals;
globalSum: var globalSum = 0
Goal: var Goal;
hasGotFinalResult: var hasGotFinalResult;
hasGotResult: var hasGotResult;
HeaderColor: var HeaderColor;
higherOrderEmoSetNames: "var higherOrderEmoSetNames = {\r

  \  animals: ['animal'],\r

  \  animalplantfood: ['animal', 'plant', 'drink', 'food', 'fruit',
  'vegetable'],\r

  \  life: ['animal', 'plant', 'drink', 'food', 'fruit', 'vegetable',
  'kitchen', 'game', 'sport'],\r

  \  more: ['animal', 'plant', 'drink', 'food', 'fruit', 'kitchen',
  'vegetable', 'game', 'sport', 'transport', 'object'],\r

  };"
higherOrderEmoSetNames1: "var higherOrderEmoSetNames1 = { all: ['all'], select:
  selectedEmoSetNames, abstract: ['time', 'symbols'], action: ['game',
  'sports'], food: ['drink', 'food', 'fruit', 'kitchen', 'vegetable'], human:
  ['body', 'gesture', 'emotion', 'person', 'role'], life: ['animal', 'plant'],
  mood: ['emotion'], object: ['object'], places: ['place', 'transport'] };"
hintMessage: var hintMessage;
hintWord: var hintWord;
HistoryOfStates: var HistoryOfStates = {};
I: var I;
iColor: var iColor;
iconChars: var iconChars = null;
iconCharsC: var iconCharsC = null;
IconSet: var IconSet;
IdOwner: var IdOwner;
INFINITE: var INFINITE = 30000;
INFO: var INFO = {};
Info: var Info;
initialDataC: var initialDataC = {};
InnoById: var InnoById;
InnoByName: var InnoByName;
inputBox: var inputBox;
inputForm: var inputForm;
inputTxt: var inputTxt;
IS_TESTING: var IS_TESTING = true;
IsAnswerCorrect: var IsAnswerCorrect;
IsCanvasActive: var IsCanvasActive = false;
IsControlKeyDown: var IsControlKeyDown = false;
isINTERRUPT: var isINTERRUPT;
isPlaying: function isPlaying() { return DA.isSound; }
isReallyMultiplayer: var isReallyMultiplayer = false;
isRunning: var isRunning = false;
isSpeakerRunning: var isSpeakerRunning;
isTraceOn: var isTraceOn = true;
Items: var Items = {};
ItemsByKey: var ItemsByKey;
ITER: var ITER = 0;
iTHEME: var iTHEME = 0;
joinCandidate: var joinCandidate = null;
justExpand: var justExpand = false;
KeepSessionUser: var KeepSessionUser = false;
keysDown: var keysDown = new Array(256);
KeySets: var KeySets;
KiDir: var KiDir = [-1, -10, 1, 10, -9, -11, 11, 9];
KingE: "var KingE = [\r

  \  -50, -10, 0, 0, 0, 0, -10, -50,\r

  \  -10, 0, 10, 10, 10, 10, 0, -10,\r

  \  0, 10, 20, 20, 20, 20, 10, 0,\r

  \  0, 10, 20, 40, 40, 20, 10, 0,\r

  \  0, 10, 20, 40, 40, 20, 10, 0,\r

  \  0, 10, 20, 20, 20, 20, 10, 0,\r

  \  -10, 0, 10, 10, 10, 10, 0, -10,\r

  \  -50, -10, 0, 0, 0, 0, -10, -50\r

  ];"
KingO: "var KingO = [\r

  \  0, 5, 5, -10, -10, 0, 10, 5,\r

  \  -30, -30, -30, -30, -30, -30, -30, -30,\r

  \  -50, -50, -50, -50, -50, -50, -50, -50,\r

  \  -70, -70, -70, -70, -70, -70, -70, -70,\r

  \  -70, -70, -70, -70, -70, -70, -70, -70,\r

  \  -70, -70, -70, -70, -70, -70, -70, -70,\r

  \  -70, -70, -70, -70, -70, -70, -70, -70,\r

  \  -70, -70, -70, -70, -70, -70, -70, -70\r

  ];"
Kings: var Kings = [PIECES.wK, PIECES.bK];
KnDir: var KnDir = [-8, -19, -21, -12, 8, 19, 21, 12];
KnightTable: "var KnightTable = [\r

  \  0, -10, 0, 0, 0, 0, -10, 0,\r

  \  0, 0, 0, 5, 5, 0, 0, 0,\r

  \  0, 0, 10, 10, 10, 10, 0, 0,\r

  \  0, 0, 10, 20, 20, 10, 5, 0,\r

  \  5, 10, 15, 20, 20, 15, 10, 5,\r

  \  5, 10, 10, 20, 20, 10, 10, 5,\r

  \  0, 0, 5, 10, 10, 5, 0, 0,\r

  \  0, 0, 0, 0, 0, 0, 0, 0\r

  ];"
lastIndex: var lastIndex;
lastPosition: var lastPosition = 0;
LastPositionX: var LastPositionX = 0;
LastPositionY: var LastPositionY = 0;
lastUpdate: var lastUpdate = 0;
LevelChange: var LevelChange = true;
levelDonePoints: var levelDonePoints = 5;
levelIncrement: var levelIncrement;
levelKeys: "var levelKeys = ['island', 'justice star', 'materials science',
  'mayan pyramid', 'medieval gate',\r

  \  'great pyramid', 'meeple', 'smart', 'stone tower', 'trophy cup', 'viking
  helmet',\r

  \  'flower star', 'island', 'justice star', 'materials science', 'mayan
  pyramid',];"
levelPoints: var levelPoints;
lightRailStop: "var lightRailStop = {\r

  \  \"type\": \"FeatureCollection\",\r

  \  \"features\": [\r

  \    {\r

  \      \"type\": \"Feature\",\r

  \      \"properties\": {\r

  \        \"popupContent\": \"18th & California Light Rail Stop\"\r

  \      },\r

  \      \"geometry\": {\r

  \        \"type\": \"Point\",\r

  \        \"coordinates\": [-104.98999178409576, 39.74683938093904]\r

  \      }\r

  \    }, {\r

  \      \"type\": \"Feature\",\r

  \      \"properties\": {\r

  \        \"popupContent\": \"20th & Welton Light Rail Stop\"\r

  \      },\r

  \      \"geometry\": {\r

  \        \"type\": \"Point\",\r

  \        \"coordinates\": [-104.98689115047453, 39.747924136466565]\r

  \      }\r

  \    }\r

  \  ]\r

  };"
lineWidth: var lineWidth = 4;
Live: var Live;
LIVE_SERVER: var LIVE_SERVER;
LOG: var LOG = {};
logCounter: var logCounter = 0;
LOGDIVS: var LOGDIVS = [];
loggedIn: var loggedIn = false;
LoopNonSlideIndex: var LoopNonSlideIndex = [0, 3];
LoopNonSlidePce: var LoopNonSlidePce = [PIECES.wN, PIECES.wK, 0, PIECES.bN, PIECES.bK, 0];
LoopSlideIndex: var LoopSlideIndex = [0, 4];
LoopSlidePce: var LoopSlidePce = [PIECES.wB, PIECES.wR, PIECES.wQ, 0, PIECES.bB,
  PIECES.bR, PIECES.bQ, 0];
M: var M = {};
magCounter: var magCounter = 0;
MAGNIFIER_IMAGE: var MAGNIFIER_IMAGE;
mappingsInitialized: var mappingsInitialized;
mappingTypes: var mappingTypes;
Markers: var Markers = [];
matchingWords: var matchingWords;
MATE: var MATE = 29000;
MAX_CYCLES: var MAX_CYCLES = 500;
MAXDEPTH: var MAXDEPTH = 64;
MAXGAMEMOVES: var MAXGAMEMOVES = 2048;
MAXIMIZER: var MAXIMIZER;
maxIncrement: var maxIncrement = 5;
MAXITER: var MAXITER = 200;
MAXLEVEL: var MAXLEVEL = 10;
MaxNumTrials: var MaxNumTrials = 1;
MAXPOSITIONMOVES: var MAXPOSITIONMOVES = 256;
MaxPosMissing: var MaxPosMissing;
MaxWordLength: var MaxWordLength = 100;
maxZIndex: var maxZIndex = 110;
MenuItems: var MenuItems;
MessageCounter: var MessageCounter = 0;
MFLAGCA: var MFLAGCA = 0x1000000
MFLAGCAP: var MFLAGCAP = 0x7C000
MFLAGEP: var MFLAGEP = 0x40000
MFLAGPROM: var MFLAGPROM = 0xF00000
MFLAGPS: var MFLAGPS = 0x80000
MicrophoneUi: var MicrophoneUi;
MINIMIZER: var MINIMIZER;
minIncrement: var minIncrement = 1;
MinWordLength: var MinWordLength = 1;
Mirror64: "var Mirror64 = [\r

  \  56, 57, 58, 59, 60, 61, 62, 63,\r

  \  48, 49, 50, 51, 52, 53, 54, 55,\r

  \  40, 41, 42, 43, 44, 45, 46, 47,\r

  \  32, 33, 34, 35, 36, 37, 38, 39,\r

  \  24, 25, 26, 27, 28, 29, 30, 31,\r

  \  16, 17, 18, 19, 20, 21, 22, 23,\r

  \  8, 9, 10, 11, 12, 13, 14, 15,\r

  \  0, 1, 2, 3, 4, 5, 6, 7\r

  ];"
MirrorCols: var MirrorCols = [COLUMNS.COL_H, COLUMNS.COL_G, COLUMNS.COL_F,
  COLUMNS.COL_E, COLUMNS.COL_D, COLUMNS.COL_C, COLUMNS.COL_B, COLUMNS.COL_A];
MirrorFiles: var MirrorFiles = [FILES.FILE_H, FILES.FILE_G, FILES.FILE_F,
  FILES.FILE_E, FILES.FILE_D, FILES.FILE_C, FILES.FILE_B, FILES.FILE_A];
MirrorRanks: var MirrorRanks = [RANKS.RANK_8, RANKS.RANK_7, RANKS.RANK_6,
  RANKS.RANK_5, RANKS.RANK_4, RANKS.RANK_3, RANKS.RANK_2, RANKS.RANK_1];
MirrorRows: var MirrorRows = [ROWS.ROW_8, ROWS.ROW_7, ROWS.ROW_6, ROWS.ROW_5,
  ROWS.ROW_4, ROWS.ROW_3, ROWS.ROW_2, ROWS.ROW_1];
mkMan: var mkMan = null
MouseMoveCounter: var MouseMoveCounter = 0;
mousePullStrength: var mousePullStrength = 0.005;
MSCATS: "const MSCATS = { rect: 'g', g: 'g', circle: 'g', text: 'g', polygon:
  'g', line: 'g', body: 'd', svg: 'd', div: 'd', p: 'd', table: 'd', button:
  'd', a: 'd', span: 'd', image: 'd', paragraph: 'd', anchor: 'd' };"
MSTimeCallback: var MSTimeCallback;
MSTimeClock: var MSTimeClock;
MSTimeDiff: var MSTimeDiff;
MSTimeStart: var MSTimeStart;
MSTimeTO: var MSTimeTO;
MvvLvaScores: var MvvLvaScores = new Array(14 * 14);
MvvLvaValue: var MvvLvaValue = [0, 100, 200, 300, 400, 500, 600, 100, 200, 300,
  400, 500, 600];
MyEasing: const MyEasing = 'cubic-bezier(1,-0.03,.86,.68)';
myGameArea: "var myGameArea = {\r

  \  canvas: document.createElement('canvas'),\r

  \  start: function () {\r

  \    this.canvas.width = 480;\r

  \    this.canvas.height = 270;\r

  \    this.context = this.canvas.getContext('2d');\r

  \    document.body.insertBefore(this.canvas, document.body.childNodes[0]);\r

  \    this.frameNo = 0;\r

  \    this.interval = setInterval(updateGameArea, 20);\r

  \  },\r

  \  clear: function () {\r

  \    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r

  \  },\r

  };"
NAMED_UIDS: var NAMED_UIDS = {};
nextIndex: var nextIndex = -1;
NextPictureIndex: var NextPictureIndex = 0;
NiceBaseColors: var NiceBaseColors = ['#791900']
nMissing: var nMissing;
NODEJS: var NODEJS;
NOMOVE: var NOMOVE = 0
NumColors: var NumColors;
numCorrectAnswers: var numCorrectAnswers;
NUMDECKS: var NUMDECKS = 2;
NUMJOKERS: var NUMJOKERS = 0;
NumLabels: var NumLabels;
NumMissingLetters: var NumMissingLetters;
NumPics: var NumPics;
numPlayersMax: var numPlayersMax = 8;
numPlayersMin: var numPlayersMin = 0;
numTotalAnswers: var numTotalAnswers;
ObjetoSolitario: "var ObjetoSolitario = function () {\r

  \  this.CartaDrag = new Array();\r

  \  this.ImagenDrag = new Array();\r

  \  this.Movimiento = 0;\r

  \  this.Movimientos = new Array();\r

  \  this.MovimientosAuyda = new Array();\r

  \  this.MovimientosAuydaActual = 0;\r

  \  this.Iniciar = function () {\r

  \    $(\"body\").on(\"keydown\", function (e) {\r

  \      if (e.ctrlKey && (String.fromCharCode(e.which) === 'z' ||
  String.fromCharCode(e.which) === 'Z')) {\r

  \        Solitario.Deshacer(e);\r

  \      } else if (e.ctrlKey && (String.fromCharCode(e.which) === 'y' ||
  String.fromCharCode(e.which) === 'Y')) {\r

  \        Solitario.Rehacer(e);\r

  \      } else if (String.fromCharCode(e.which) === 'n' ||
  String.fromCharCode(e.which) === 'N') {\r

  \        Solitario.NuevoJuego();\r

  \      } else if (String.fromCharCode(e.which) === ' ') {\r

  \        Solitario.MostrarAyuda();\r

  \      }\r

  \    });\r

  \    $(\"ventanamenu > button:nth-child(1)\").on(\"click\",
  this.NuevoJuego.bind(this));\r

  \    $(\"ventanamenu > button:nth-child(2)\").on(\"click\",
  this.Deshacer.bind(this));\r

  \    $(\"ventanamenu > button:nth-child(3)\").on(\"click\",
  this.Rehacer.bind(this));\r

  \    $(\"ventanamenu > button:nth-child(4)\").on(\"click\",
  this.MostrarAyuda.bind(this));\r

  \    this.NuevoJuego();\r

  \  };\r

  \  this.MostrarAyuda = function () {\r

  \    $(\"Carta, Solucion, Baraja,
  Columna\").removeAttr(\"ayuda1\").removeAttr(\"ayuda2\");\r

  \    var Mov = this.MovimientosAuyda[this.MovimientosAuydaActual];\r

  \    if (this.MovimientosAuydaActual === this.MovimientosAuyda.length - 1)
  {\r

  \      this.MovimientosAuydaActual = 0;\r

  \    } else {\r

  \      this.MovimientosAuydaActual++;\r

  \    }\r

  \    Mov.origen.attr({\r

  \      \"ayuda1\": \"true\"\r

  \    });\r

  \    Mov.destino.attr({\r

  \      \"ayuda2\": \"true\"\r

  \    });\r

  \  }\r

  \  this.NuevoJuego = function () {\r

  \    var Orden = new Array(4 * 13);\r

  \    var Baraja = Array();\r

  \    for (i = 0; i < 4; i++) {\r

  \      Baraja[i] = $(\"Baraja[num='\" + (i + 1) + \"']\");\r

  \      Baraja[i].html(\"\");\r

  \    }\r

  \    var Solucion = Array();\r

  \    for (i = 0; i < 4; i++) {\r

  \      Solucion[i] = $(\"Solucion[num='\" + (i + 1) + \"']\");\r

  \      Solucion[i].html(\"\");\r

  \    }\r

  \    var Columna = Array();\r

  \    for (i = 0; i < 7; i++) {\r

  \      Columna[i] = $(\"Columna[num='\" + (i + 1) + \"']\");\r

  \      Columna[i].html(\"\");\r

  \    }\r

  \    this.Movimiento = 0;\r

  \    this.Movimientos = [];\r

  \    var Cartas = Array();\r

  \    Contador = 0;\r

  \    for (p = 1; p < 5; p++) {\r

  \      for (v = 0; v < 13; v++) {\r

  \        Orden[Contador] = Contador;\r

  \        Cartas[Contador] = $(\"<Carta></Carta>\")\r

  \        Cartas[Contador++].attr({\r

  \          \"Palo\": p,\r

  \          \"Valor\": v,\r

  \          \"Tapada\": \"true\"\r

  \        });\r

  \      }\r

  \    }\r

  \    for (var Rand, Tmp, i = Orden.length; i; Rand =
  Math.floor(Math.random() * i), Tmp = Orden[--i], Orden[i] = Orden[Rand],
  Orden[Rand] = Tmp);\r

  \    Contador = 0;\r

  \    for (Cols = 0; Cols < 7; Cols++) {\r

  \      Carta = Columna[Cols];\r

  \      for (i = 0; i < Cols + 1; i++) {\r

  \        Carta = Cartas[Orden[Contador++]].appendTo(Carta);\r

  \        if (i == Cols) {\r

  \          Carta.attr({\r

  \            \"Tapada\": \"false\",\r

  \            \"draggable\": \"true\"\r

  \          });\r

  \        }\r

  \        Carta.css({\r

  \          \"z-index\": i\r

  \        });\r

  \      }\r

  \    }\r

  \    Carta = Baraja[0];\r

  \    for (var i = Contador; i < 52; i++) {\r

  \      Carta = Cartas[Orden[i]].appendTo(Carta);\r

  \      Carta.css({\r

  \        \"z-index\": i - Contador\r

  \      });\r

  \    }\r

  \    Baraja[0].off(\"click\").on(\"click\",
  this.Baraja1_EventoClick.bind(this));\r

  \    $(\"Carta\").off(\"mouseover\").on('mouseover',
  this.Carta_EventoMouseOver.bind(this));\r

  \    $(\"Carta\").off(\"mouseout\").on('mouseout',
  this.Carta_EventoMouseOut.bind(this));\r

  \    $(\"Carta\").off(\"dragstart\").on('dragstart',
  this.Carta_EventoDragStart.bind(this));\r

  \    $(\"Carta\").off(\"dragend\").on('dragend',
  this.Carta_EventoDragEnd.bind(this));\r

  \    $(\"Carta\").off(\"dblclick\").on('dblclick',
  this.Carta_EventoDblClick.bind(this));\r

  \    $(\"Columna\").off(\"drop\").on('drop',
  this.Columna_EventoDrop.bind(this));\r

  \    $(\"Columna\").off(\"dragover\").on('dragover',
  this.Columna_EventoDragOver.bind(this));\r

  \    $(\"Solucion\").off(\"drop\").on('drop',
  this.Solucion_EventoDrop.bind(this));\r

  \    $(\"Solucion\").off(\"dragover\").on('dragover',
  this.Solucion_EventoDragOver.bind(this));\r

  \    this.UltimoHijo($(\"Columna[num=7]\"));\r

  \    $(\"Victoria\").css({\r

  \      \"display\": \"none\"\r

  \    });\r

  \    $(\"Derrota\").css({\r

  \      \"display\": \"none\"\r

  \    });\r

  \    this.GuardarMovimiento();\r

  \  };\r

  \  this.Carta_EventoMouseOver = function (e) {\r

  \    Carta = $(e.originalEvent.currentTarget);\r

  \    if (Carta.attr(\"tapada\") !== \"true\" && Carta.attr(\"draggable\")
  === \"true\") {\r

  \      $(e.originalEvent.currentTarget).attr({\r

  \        \"hover\": \"true\"\r

  \      });\r

  \    }\r

  \    e.stopPropagation();\r

  \  };\r

  \  this.Carta_EventoMouseOut = function (e) {\r

  \    $(e.originalEvent.currentTarget).removeAttr(\"hover\");\r

  \    e.stopPropagation();\r

  \  };\r

  \  this.Carta_EventoDblClick = function (e) {\r

  \    Carta = this.UltimoHijo($(e.originalEvent.currentTarget));\r

  \    Palo = 0;\r

  \    Valor = 0;\r

  \    for (i = 1; i < 5; i++) {\r

  \      if (this.UltimoHijo($(\"Solucion[num='\" + i +
  \"']\")).attr(\"palo\") == Carta.attr(\"palo\")) {\r

  \        Valor = parseInt(this.UltimoHijo($(\"Solucion[num='\" + i +
  \"']\")).attr(\"valor\")) + 1;\r

  \        Palo = this.UltimoHijo($(\"Solucion[num='\" + i + \"']\"));\r

  \      }\r

  \    }\r

  \    if (Palo == 0) {\r

  \      for (i = 1; i < 5; i++) {\r

  \        if (this.UltimoHijo($(\"Solucion[num='\" + i +
  \"']\")).attr(\"num\") == i) {\r

  \          Palo = this.UltimoHijo($(\"Solucion[num='\" + i + \"']\"));\r

  \          break;\r

  \        }\r

  \      }\r

  \    }\r

  \    if (parseInt(Carta.attr(\"valor\")) == Valor) {\r

  \      if (typeof (Carta.parent().attr(\"num\")) === \"undefined\") {\r

  \        Carta.parent().attr({\r

  \          \"tapada\": \"false\",\r

  \          \"draggable\": \"true\"\r

  \        });\r

  \      }\r

  \      Carta.appendTo(this.UltimoHijo(Palo));\r

  \      Carta.removeAttr(\"draggable\");\r

  \      this.GuardarMovimiento();\r

  \    }\r

  \    e.stopPropagation();\r

  \  };\r

  \  this.Carta_EventoDragStart = function (e) {\r

  \    this.CartaDrag = $(e.originalEvent.currentTarget);\r

  \    this.ImagenDrag = $(\"#ImgDrag\");\r

  \    this.ImagenDrag.attr({\r

  \      \"palo\": this.CartaDrag.attr(\"palo\"),\r

  \      \"valor\": this.CartaDrag.attr(\"valor\")\r

  \    }).html(this.CartaDrag.html());\r

  \    this.CartaDrag.css({\r

  \      opacity: 0\r

  \    });\r

  \    OffSet = this.CartaDrag.offset();\r

  \    e.originalEvent.dataTransfer.setDragImage(this.ImagenDrag[0],
  e.originalEvent.clientX - OffSet.left, (e.originalEvent.clientY - OffSet.top)
  + $(window).scrollTop());\r

  \    e.originalEvent.dataTransfer.effectAllowed = 'move';\r

  \    e.originalEvent.dataTransfer.setData('text/html',
  e.originalEvent.currentTarget);\r

  \    e.stopPropagation();\r

  \  }\r

  \  this.Carta_EventoDragEnd = function (e) {\r

  \    this.CartaDrag.css({\r

  \      opacity: 1\r

  \    });\r

  \  };\r

  \  this.Baraja1_EventoClick = function (e) {\r

  \    Baraja1 = $(\"Baraja[num='1']\");\r

  \    Baraja2 = $(\"Baraja[num='2']\");\r

  \    if (this.UltimoHijo(Baraja1) !== Baraja1) {\r

  \      $(\"Baraja[num='2'] Carta[draggable]\").removeAttr(\"draggable\");\r

  \      Carta =
  this.UltimoHijo(Baraja1).appendTo(this.UltimoHijo(Baraja2));\r

  \      Carta.css({\r

  \        \"z-index\": (Cartas.length + 1)\r

  \      }).attr({\r

  \        \"Tapada\": \"false\",\r

  \        \"draggable\": \"true\"\r

  \      });\r

  \      this.GuardarMovimiento();\r

  \    } else {\r

  \      if (this.UltimoHijo(Baraja2) === Baraja2) return;\r

  \      Carta = this.UltimoHijo(Baraja2);\r

  \      while (Carta !== Baraja2) {\r

  \        Carta.appendTo(this.UltimoHijo(Baraja1)).attr({\r

  \          \"Tapada\": \"true\",\r

  \          \"draggable\": \"false\"\r

  \        });\r

  \        Carta = this.UltimoHijo(Baraja2);\r

  \      }\r

  \      this.Baraja1_EventoClick();\r

  \    }\r

  \  };\r

  \  this.Solucion_EventoDragOver = function (e) {\r

  \    e.preventDefault();\r

  \    e.stopPropagation();\r

  \    e.originalEvent.dataTransfer.dropEffect = 'move';\r

  \    return false;\r

  \  };\r

  \  this.Solucion_EventoDrop = function (e) {\r

  \    if (this.UltimoHijo(this.CartaDrag) === this.CartaDrag) {\r

  \      Solucion = this.UltimoHijo($(e.originalEvent.target));\r

  \      Valor = 0;\r

  \      if (typeof (Solucion.attr(\"num\")) === \"undefined\") {\r

  \        if (Solucion.attr(\"palo\") === this.CartaDrag.attr(\"palo\")) {\r

  \          Valor = (parseInt(Solucion.attr(\"valor\")) + 1);\r

  \        } else {\r

  \          Valor = -1;\r

  \        }\r

  \      }\r

  \      if (parseInt(this.CartaDrag.attr(\"valor\")) === Valor) {\r

  \        if (typeof (this.CartaDrag.parent().attr(\"num\")) ===
  \"undefined\") {\r

  \          this.CartaDrag.parent().attr({\r

  \            \"tapada\": \"false\",\r

  \            \"draggable\": \"true\"\r

  \          });\r

  \        }\r

  \        this.CartaDrag.appendTo(Solucion);\r

  \        this.CartaDrag.removeAttr(\"draggable\");\r

  \        this.GuardarMovimiento();\r

  \      }\r

  \    }\r

  \  };\r

  \  this.Columna_EventoDragOver = function (e) {\r

  \    e.preventDefault();\r

  \    e.stopPropagation();\r

  \    e.originalEvent.dataTransfer.dropEffect = 'move';\r

  \    return false;\r

  \  };\r

  \  this.Columna_EventoDrop = function (e) {\r

  \    var GM = false;\r

  \    if (this.CartaValida(this.CartaDrag, $(e.originalEvent.target)) ==
  true) {\r

  \      if (this.UltimoHijo(this.CartaDrag) !=
  this.UltimoHijo($(e.originalEvent.target))) {\r

  \        if (typeof (this.CartaDrag.parent().attr(\"num\")) ===
  \"undefined\") {\r

  \          this.CartaDrag.parent().attr({\r

  \            \"tapada\": \"false\",\r

  \            \"draggable\": \"true\"\r

  \          });\r

  \        }\r

  \        this.CartaDrag.appendTo(this.UltimoHijo($(e.originalEvent.target))\
  );\r

  \        GM = true;\r

  \      }\r

  \      UH = this.UltimoHijo($(\"Baraja[num='2']\"));\r

  \      $(\"Baraja[num='2'] Carta[draggable]\").removeAttr(\"draggable\");\r

  \      if (typeof (UH.attr(\"num\")) === \"undefined\") {\r

  \        this.UltimoHijo($(\"Baraja[num='2']\")).attr({\r

  \          \"draggable\": \"true\"\r

  \        });\r

  \      }\r

  \      if (GM === true) {\r

  \        this.GuardarMovimiento();\r

  \      }\r

  \    }\r

  \    e.preventDefault();\r

  \    e.stopPropagation();\r

  \    return false;\r

  \  };\r

  \  this.CartaValida = function (Carta, Destino) {\r

  \    if (typeof (Destino.attr(\"num\")) !== \"undefined\" &&
  parseInt(Carta.attr(\"valor\")) === 12) {\r

  \      return true;\r

  \    }\r

  \    if (Destino.attr(\"tapada\") === true) {\r

  \      return false;\r

  \    }\r

  \    if (parseInt(Carta.attr(\"valor\")) ===
  parseInt(Destino.attr(\"valor\")) - 1) {\r

  \      if (parseInt(Carta.attr(\"palo\")) > 2) {\r

  \        if (parseInt(Destino.attr(\"palo\")) < 3) {\r

  \          return true;\r

  \        }\r

  \      }\r

  \      else {\r

  \        if (parseInt(Destino.attr(\"palo\")) > 2) {\r

  \          return true;\r

  \        }\r

  \      }\r

  \    }\r

  \    return false;\r

  \  };\r

  \  this.UltimoHijo = function (nPadre) {\r

  \    Cartas = nPadre.find(\":last-child\");\r

  \    if (Cartas.length == 0) return nPadre;\r

  \    return $(Cartas[Cartas.length - 1]);\r

  \  };\r

  \  this.Victoria = function () {\r

  \    return ($(\"Columna Carta[tapada='true']\").length > 0) ? false :
  true;\r

  \  }\r

  \  this.GuardarMovimiento = function () {\r

  \    $(\"Carta, Solucion, Baraja,
  Columna\").removeAttr(\"ayuda1\").removeAttr(\"ayuda2\");\r

  \    var DH = [];\r

  \    DH[\"Baraja1\"] = $(\"Baraja[num='1']\").html();\r

  \    DH[\"Baraja2\"] = $(\"Baraja[num='2']\").html();\r

  \    DH[\"Solucion1\"] = $(\"Solucion[num='1']\").html();\r

  \    DH[\"Solucion2\"] = $(\"Solucion[num='2']\").html();\r

  \    DH[\"Solucion3\"] = $(\"Solucion[num='3']\").html();\r

  \    DH[\"Solucion4\"] = $(\"Solucion[num='4']\").html();\r

  \    DH[\"Columna1\"] = $(\"Columna[num='1']\").html();\r

  \    DH[\"Columna2\"] = $(\"Columna[num='2']\").html();\r

  \    DH[\"Columna3\"] = $(\"Columna[num='3']\").html();\r

  \    DH[\"Columna4\"] = $(\"Columna[num='4']\").html();\r

  \    DH[\"Columna5\"] = $(\"Columna[num='5']\").html();\r

  \    DH[\"Columna6\"] = $(\"Columna[num='6']\").html();\r

  \    DH[\"Columna7\"] = $(\"Columna[num='7']\").html();\r

  \    this.Movimientos[this.Movimiento++] = DH;\r

  \    $(\"movimientos\").html(this.Movimiento - 1);\r

  \    var V = this.Victoria();\r

  \    $(\"Derrota\").css({\r

  \      \"display\": (this.Ayuda() === false && V !== true) ? \"block\" :
  \"none\"\r

  \    });\r

  \    $(\"Victoria\").css({\r

  \      \"display\": (V === true) ? \"block\" : \"none\"\r

  \    });\r

  \  };\r

  \  this.Rehacer = function (e) {\r

  \    if (this.Movimiento < this.Movimientos.length) {\r

  \      var DH = this.Movimientos[this.Movimiento++];\r

  \      $(\"Baraja[num='1']\").html(DH[\"Baraja1\"]);\r

  \      $(\"Baraja[num='2']\").html(DH[\"Baraja2\"]);\r

  \      $(\"Solucion[num='1']\").html(DH[\"Solucion1\"]);\r

  \      $(\"Solucion[num='2']\").html(DH[\"Solucion2\"]);\r

  \      $(\"Solucion[num='3']\").html(DH[\"Solucion3\"]);\r

  \      $(\"Solucion[num='4']\").html(DH[\"Solucion4\"]);\r

  \      $(\"Columna[num='1']\").html(DH[\"Columna1\"]);\r

  \      $(\"Columna[num='2']\").html(DH[\"Columna2\"]);\r

  \      $(\"Columna[num='3']\").html(DH[\"Columna3\"]);\r

  \      $(\"Columna[num='4']\").html(DH[\"Columna4\"]);\r

  \      $(\"Columna[num='5']\").html(DH[\"Columna5\"]);\r

  \      $(\"Columna[num='6']\").html(DH[\"Columna6\"]);\r

  \      $(\"Columna[num='7']\").html(DH[\"Columna7\"]);\r

  \      $(\"Carta\").css({\r

  \        opacity: 1\r

  \      }).removeAttr(\"hover\");\r

  \      $(\"Carta\").off(\"mouseover\").on('mouseover',
  this.Carta_EventoMouseOver.bind(this));\r

  \      $(\"Carta\").off(\"mouseout\").on('mouseout',
  this.Carta_EventoMouseOut.bind(this));\r

  \      $(\"Carta\").off(\"dragstart\").on('dragstart',
  this.Carta_EventoDragStart.bind(this));\r

  \      $(\"Carta\").off(\"dragend\").on('dragend',
  this.Carta_EventoDragEnd.bind(this));\r

  \      $(\"Carta\").off(\"dblclick\").on('dblclick',
  this.Carta_EventoDblClick.bind(this));\r

  \    }\r

  \    $(\"movimientos\").html(this.Movimiento - 1);\r

  \    $(\"Derrota\").css({\r

  \      \"display\": (this.Ayuda() === false) ? \"block\" : \"none\"\r

  \    });\r

  \    $(\"Victoria\").css({\r

  \      \"display\": (this.Victoria() === true) ? \"block\" : \"none\"\r

  \    });\r

  \  };\r

  \  this.Deshacer = function (e) {\r

  \    if (this.Movimiento !== 1) {\r

  \      var DH = this.Movimientos[--this.Movimiento - 1];\r

  \      $(\"Baraja[num='1']\").html(DH[\"Baraja1\"]);\r

  \      $(\"Baraja[num='2']\").html(DH[\"Baraja2\"]);\r

  \      $(\"Solucion[num='1']\").html(DH[\"Solucion1\"]);\r

  \      $(\"Solucion[num='2']\").html(DH[\"Solucion2\"]);\r

  \      $(\"Solucion[num='3']\").html(DH[\"Solucion3\"]);\r

  \      $(\"Solucion[num='4']\").html(DH[\"Solucion4\"]);\r

  \      $(\"Columna[num='1']\").html(DH[\"Columna1\"]);\r

  \      $(\"Columna[num='2']\").html(DH[\"Columna2\"]);\r

  \      $(\"Columna[num='3']\").html(DH[\"Columna3\"]);\r

  \      $(\"Columna[num='4']\").html(DH[\"Columna4\"]);\r

  \      $(\"Columna[num='5']\").html(DH[\"Columna5\"]);\r

  \      $(\"Columna[num='6']\").html(DH[\"Columna6\"]);\r

  \      $(\"Columna[num='7']\").html(DH[\"Columna7\"]);\r

  \      $(\"Carta\").css({\r

  \        opacity: 1\r

  \      }).removeAttr(\"hover\");\r

  \      $(\"Carta\").off(\"mouseover\").on('mouseover',
  this.Carta_EventoMouseOver.bind(this));\r

  \      $(\"Carta\").off(\"mouseout\").on('mouseout',
  this.Carta_EventoMouseOut.bind(this));\r

  \      $(\"Carta\").off(\"dragstart\").on('dragstart',
  this.Carta_EventoDragStart.bind(this));\r

  \      $(\"Carta\").off(\"dragend\").on('dragend',
  this.Carta_EventoDragEnd.bind(this));\r

  \      $(\"Carta\").off(\"dblclick\").on('dblclick',
  this.Carta_EventoDblClick.bind(this));\r

  \      $(\"movimientos\").html(this.Movimiento - 1);\r

  \    }\r

  \    $(\"Derrota\").css({\r

  \      \"display\": (this.Ayuda() === false) ? \"block\" : \"none\"\r

  \    });\r

  \    $(\"Victoria\").css({\r

  \      \"display\": (this.Victoria() === true) ? \"block\" : \"none\"\r

  \    });\r

  \  };\r

  \  this.Ayuda = function (e) {\r

  \    var Solucion = [];\r

  \    var Baraja = [];\r

  \    var Columna = [];\r

  \    Solucion[1] = this.UltimoHijo($(\"Solucion[num='1']\"));\r

  \    Solucion[2] = this.UltimoHijo($(\"Solucion[num='2']\"));\r

  \    Solucion[3] = this.UltimoHijo($(\"Solucion[num='3']\"));\r

  \    Solucion[4] = this.UltimoHijo($(\"Solucion[num='4']\"));\r

  \    Baraja[1] = this.UltimoHijo($(\"Baraja[num='1']\"));\r

  \    Baraja[2] = this.UltimoHijo($(\"Baraja[num='2']\"));\r

  \    Columna[1] = this.UltimoHijo($(\"Columna[num='1']\"));\r

  \    Columna[2] = this.UltimoHijo($(\"Columna[num='2']\"));\r

  \    Columna[3] = this.UltimoHijo($(\"Columna[num='3']\"));\r

  \    Columna[4] = this.UltimoHijo($(\"Columna[num='4']\"));\r

  \    Columna[5] = this.UltimoHijo($(\"Columna[num='5']\"));\r

  \    Columna[6] = this.UltimoHijo($(\"Columna[num='6']\"));\r

  \    Columna[7] = this.UltimoHijo($(\"Columna[num='7']\"));\r

  \    this.MovimientosAuyda = new Array();\r

  \    this.MovimientosAuydaActual = 0;\r

  \    this.MovimientosAuyda.push({\r

  \      origen: $(\"Baraja[num='1']\"),\r

  \      destino: $(\"Baraja[num='2']\"),\r

  \      valor: 0\r

  \    });\r

  \    if (Baraja[2].prop(\"tagName\") === \"CARTA\") {\r

  \      for (i = 1; i < 5; i++) {\r

  \        Valor = (Solucion[i].prop(\"tagName\") === \"CARTA\") ?
  parseInt(Solucion[i].attr(\"valor\")) : -1;\r

  \        Palo = (Solucion[i].prop(\"tagName\") === \"CARTA\") ?
  Solucion[i].attr(\"palo\") : Baraja[2].attr(\"palo\");\r

  \        if (Valor + 1 === parseInt(Baraja[2].attr(\"valor\")) && Palo ===
  Baraja[2].attr(\"palo\")) {\r

  \          this.MovimientosAuyda.push({\r

  \            origen: Baraja[2],\r

  \            destino: Solucion[i],\r

  \            valor: 150 - ((Valor + 1) * 10)\r

  \          });\r

  \        }\r

  \      }\r

  \    }\r

  \    for (c = 7; c > 0; c--) {\r

  \      for (i = 1; i < 5; i++) {\r

  \        Valor = (Solucion[i].prop(\"tagName\") === \"CARTA\") ?
  parseInt(Solucion[i].attr(\"valor\")) : -1;\r

  \        Palo = (Solucion[i].prop(\"tagName\") === \"CARTA\") ?
  Solucion[i].attr(\"palo\") : Columna[c].attr(\"palo\");\r

  \        if (Valor + 1 === parseInt(Columna[c].attr(\"valor\")) && Palo ===
  Columna[c].attr(\"palo\")) {\r

  \          this.MovimientosAuyda.push({\r

  \            origen: Columna[c],\r

  \            destino: Solucion[i],\r

  \            valor: 150 - ((Valor + 1) * 10)\r

  \          });\r

  \        }\r

  \      }\r

  \    }\r

  \    for (c = 7; c > 0; c--) {\r

  \      Carta = this.UltimoHijo(Columna[c]);\r

  \      if (Carta.prop(\"tagName\") === \"CARTA\") {\r

  \        Padres = 1;\r

  \        do {\r

  \          for (c2 = 7; c2 > 0; c2--) {\r

  \            CC = this.UltimoHijo(Columna[c2]);\r

  \            Valor = (CC.prop(\"tagName\") === \"CARTA\") ?
  parseInt(CC.attr(\"valor\")) : -1;\r

  \            Palo = (CC.prop(\"tagName\") === \"CARTA\") ? CC.attr(\"palo\")
  : Carta.attr(\"palo\");\r

  \            if (this.CartaValida(Carta, CC)) {\r

  \              if (Carta.parent().attr(\"tapada\") === \"true\" ||
  Carta.parent().prop(\"tagName\") !== \"CARTA\") {\r

  \                if (parseInt(Carta.attr(\"valor\")) === 12 &&
  CC.prop(\"tagName\") === \"COLUMNA\" && Carta.parent().prop(\"tagName\") ===
  \"COLUMNA\") { } else {\r

  \                  this.MovimientosAuyda.push({\r

  \                    origen: Carta,\r

  \                    destino: CC,\r

  \                    valor: 10 * Padres\r

  \                  });\r

  \                }\r

  \              }\r

  \            }\r

  \          }\r

  \          Carta = Carta.parent();\r

  \          Padres++;\r

  \        } while (Carta.attr(\"tapada\") !== \"true\" &&
  Carta.prop(\"tagName\") === \"CARTA\");\r

  \      }\r

  \    }\r

  \    if (Baraja[2].prop(\"tagName\") === \"CARTA\") {\r

  \      for (c = 7; c > 0; c--) {\r

  \        CC = this.UltimoHijo(Columna[c]);\r

  \        Valor = (CC.prop(\"tagName\") === \"CARTA\") ? CC.attr(\"valor\") :
  -1;\r

  \        Palo = (CC.prop(\"tagName\") === \"CARTA\") ? CC.attr(\"palo\") :
  Baraja[2].attr(\"palo\");\r

  \        if (this.CartaValida(Baraja[2], CC)) {\r

  \          this.MovimientosAuyda.push({\r

  \            origen: Baraja[2],\r

  \            destino: CC,\r

  \            valor: 10\r

  \          });\r

  \        }\r

  \      }\r

  \    }\r

  \    this.MovimientosAuyda.sort(function (a, b) {\r

  \      var a1 = a.valor,\r

  \        b1 = b.valor;\r

  \      if (a1 === b1) return 0;\r

  \      return (a1 < b1) ? 1 : -1;\r

  \    });\r

  \    var DebugIA = $(\"DebugIA\");\r

  \    var DebugHTML = \"<ul>\";\r

  \    var ValoresCartas = Array(\"A\", \"2\", \"3\", \"4\", \"5\", \"6\",
  \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\")\r

  \    for (d = 0; d < this.MovimientosAuyda.length; d++) {\r

  \      var OrigenPalo = this.MovimientosAuyda[d].origen.attr(\"palo\");\r

  \      var OrigenValor = this.MovimientosAuyda[d].origen.attr(\"valor\");\r

  \      var DestinoPalo = this.MovimientosAuyda[d].destino.attr(\"palo\");\r

  \      var DestinoValor =
  this.MovimientosAuyda[d].destino.attr(\"valor\");\r

  \      DebugHTML += \"<li>\" + \"<palo num= '\" + OrigenPalo + \"'> \" +
  ValoresCartas[OrigenValor] + \" -&gt; \" + DestinoPalo + \"'> \" +
  ValoresCartas[DestinoValor] + \"</li>\"\r

  \    }\r

  \    DebugHTML += \"</ul>\"\r

  \    DebugIA.html(DebugHTML);\r

  \    if (this.MovimientosAuyda.length === 1) {\r

  \      for (b = 1; b < 3; b++) {\r

  \        Carta = Baraja[b];\r

  \        do {\r

  \          for (c = 7; c > 0; c--) {\r

  \            if (this.CartaValida(Carta, Columna[c])) {\r

  \              return true;\r

  \            }\r

  \          }\r

  \          Carta = Carta.parent();\r

  \        } while (Carta.prop(\"tagName\") === \"CARTA\");\r

  \      }\r

  \      for (b = 1; b < 3; b++) {\r

  \        Carta = Baraja[b];\r

  \        do {\r

  \          for (s = 1; s < 5; s++) {\r

  \            Valor = (Solucion[s].prop(\"tagName\") === \"CARTA\") ?
  parseInt(Solucion[s].attr(\"valor\")) : -1;\r

  \            Palo = (Solucion[s].prop(\"tagName\") === \"CARTA\") ?
  Solucion[s].attr(\"palo\") : Carta.attr(\"palo\");\r

  \            if (Valor + 1 === parseInt(Carta.attr(\"valor\")) && Palo ===
  Carta.attr(\"palo\")) {\r

  \              return true;\r

  \            }\r

  \          }\r

  \          Carta = Carta.parent();\r

  \        } while (Carta.prop(\"tagName\") === \"CARTA\");\r

  \      }\r

  \      return false;\r

  \    }\r

  \    return true;\r

  \  };\r

  };"
OnMicrophoneGotResult: var OnMicrophoneGotResult;
OnMicrophoneProblem: var OnMicrophoneProblem;
OnMicrophoneReady: var OnMicrophoneReady;
OnTimeOver: var OnTimeOver = null;
Options: var Options = {};
OVD: var OVD = .25;
OVH: var OVH = 20;
OVW: var OVW = 14;
P: var P;
palDict: var palDict = {};
paneOpen: var paneOpen = false;
path2mainIds: var path2mainIds;
PawnIsolated: var PawnIsolated = -10;
PawnPassed: var PawnPassed = [0, 5, 10, 20, 35, 60, 100, 200];
PawnRanksBlack: var PawnRanksBlack = new Array(10);
PawnRanksWhite: var PawnRanksWhite = new Array(10);
PawnRowsBlack: var PawnRowsBlack = new Array(10);
PawnRowsWhite: var PawnRowsWhite = new Array(10);
PawnTable: "var PawnTable = [\r

  \  0, 0, 0, 0, 0, 0, 0, 0,\r

  \  10, 10, 0, -10, -10, 0, 10, 10,\r

  \  5, 0, 0, 5, 5, 0, 0, 5,\r

  \  0, 0, 10, 20, 20, 10, 0, 0,\r

  \  5, 5, 5, 10, 10, 5, 5, 5,\r

  \  10, 10, 10, 20, 20, 10, 10, 10,\r

  \  20, 20, 20, 30, 30, 20, 20, 20,\r

  \  0, 0, 0, 0, 0, 0, 0, 0\r

  ];"
PceChar: var PceChar = ".PNBRQKpnbrqk";
PceDir: var PceDir = [0, 0, KnDir, BiDir, RkDir, KiDir, KiDir, 0, KnDir, BiDir,
  RkDir, KiDir, KiDir];
percentageCorrect: var percentageCorrect;
perft_leafNodes: var perft_leafNodes;
PerlenDict: var PerlenDict;
PGAMEPLID: var PGAMEPLID = null;
PI: var PI = Math.pi, interval_id, angle, factor = .67, tree = [], leaves = [],
  jittering = false;
PICS_PER_LEVEL: "var PICS_PER_LEVEL = IS_TESTING ? 1 : 3;"
Pictures: var Pictures = [];
pictureSize: var pictureSize;
PieceBig: var PieceBig = [BOOL.FALSE, BOOL.FALSE, BOOL.TRUE, BOOL.TRUE,
  BOOL.TRUE, BOOL.TRUE, BOOL.TRUE, BOOL.FALSE, BOOL.TRUE, BOOL.TRUE, BOOL.TRUE,
  BOOL.TRUE, BOOL.TRUE];
PieceBishopQueen: var PieceBishopQueen = [BOOL.FALSE, BOOL.FALSE, BOOL.FALSE,
  BOOL.TRUE, BOOL.FALSE, BOOL.TRUE, BOOL.FALSE, BOOL.FALSE, BOOL.FALSE,
  BOOL.TRUE, BOOL.FALSE, BOOL.TRUE, BOOL.FALSE];
PieceCol: var PieceCol = [COLOURS.BOTH, COLOURS.WHITE, COLOURS.WHITE,
  COLOURS.WHITE, COLOURS.WHITE, COLOURS.WHITE, COLOURS.WHITE, COLOURS.BLACK,
  COLOURS.BLACK, COLOURS.BLACK, COLOURS.BLACK, COLOURS.BLACK, COLOURS.BLACK];
PieceKeys: var PieceKeys = new Array(14 * 120);
PieceKing: var PieceKing = [BOOL.FALSE, BOOL.FALSE, BOOL.FALSE, BOOL.FALSE,
  BOOL.FALSE, BOOL.FALSE, BOOL.TRUE, BOOL.FALSE, BOOL.FALSE, BOOL.FALSE,
  BOOL.FALSE, BOOL.FALSE, BOOL.TRUE];
PieceKnight: var PieceKnight = [BOOL.FALSE, BOOL.FALSE, BOOL.TRUE, BOOL.FALSE,
  BOOL.FALSE, BOOL.FALSE, BOOL.FALSE, BOOL.FALSE, BOOL.TRUE, BOOL.FALSE,
  BOOL.FALSE, BOOL.FALSE, BOOL.FALSE];
PieceMaj: var PieceMaj = [BOOL.FALSE, BOOL.FALSE, BOOL.FALSE, BOOL.FALSE,
  BOOL.TRUE, BOOL.TRUE, BOOL.TRUE, BOOL.FALSE, BOOL.FALSE, BOOL.FALSE,
  BOOL.TRUE, BOOL.TRUE, BOOL.TRUE];
PieceMin: var PieceMin = [BOOL.FALSE, BOOL.FALSE, BOOL.TRUE, BOOL.TRUE,
  BOOL.FALSE, BOOL.FALSE, BOOL.FALSE, BOOL.FALSE, BOOL.TRUE, BOOL.TRUE,
  BOOL.FALSE, BOOL.FALSE, BOOL.FALSE];
PiecePawn: var PiecePawn = [BOOL.FALSE, BOOL.TRUE, BOOL.FALSE, BOOL.FALSE,
  BOOL.FALSE, BOOL.FALSE, BOOL.FALSE, BOOL.TRUE, BOOL.FALSE, BOOL.FALSE,
  BOOL.FALSE, BOOL.FALSE, BOOL.FALSE];
PieceRookQueen: var PieceRookQueen = [BOOL.FALSE, BOOL.FALSE, BOOL.FALSE,
  BOOL.FALSE, BOOL.TRUE, BOOL.TRUE, BOOL.FALSE, BOOL.FALSE, BOOL.FALSE,
  BOOL.FALSE, BOOL.TRUE, BOOL.TRUE, BOOL.FALSE];
PIECES: "var PIECES = { EMPTY: 0, wP: 1, wN: 2, wB: 3, wR: 4, wQ: 5, wK: 6, bP:
  7, bN: 8, bB: 9, bR: 10, bQ: 11, bK: 12 };"
PieceSlides: var PieceSlides = [BOOL.FALSE, BOOL.FALSE, BOOL.FALSE, BOOL.TRUE,
  BOOL.TRUE, BOOL.TRUE, BOOL.FALSE, BOOL.FALSE, BOOL.FALSE, BOOL.TRUE,
  BOOL.TRUE, BOOL.TRUE, BOOL.FALSE];
PieceVal: var PieceVal = [0, 100, 325, 325, 550, 1000, 50000, 100, 325, 325,
  550, 1000, 50000];
pitchValue: var pitchValue;
PL: var PL;
PLAYER_CREATE: var PLAYER_CREATE = {};
PLAYER_UPDATE: var PLAYER_UPDATE = {};
PLAYER_UPDATE_BEHAVIOR: var PLAYER_UPDATE_BEHAVIOR = [];
PLAYER_UPDATE_VISUALIZATION: var PLAYER_UPDATE_VISUALIZATION = [];
playerConfig: var playerConfig = null;
playerConfigC: var playerConfigC = null;
PlayerOnTurn: var PlayerOnTurn;
Players: var Players;
PLAYMODE: var PLAYMODE = 'hotseat';
POLL_COUNTER: var POLL_COUNTER = 0;
Pollmode: var Pollmode = 'auto';
PolyClips: "var PolyClips = {\r

  \  hex: 'polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%)',\r

  \  test1: 'inset(50% 0% 100% 25% 100% 75% 50% 100% 0% 75% 0% 25% round
  10px)',\r

  \  test0: 'inset(45% 0% 33% 10% round 10px)',\r

  \  hexagon: 'polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0%
  25%)',\r

  \  hexF: 'polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)',\r

  \  hexFlat: 'polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0%
  50%)',\r

  \  hexflat: 'polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0%
  50%)',\r

  \  tri: 'polygon(50% 0%, 100% 100%, 0% 100%)',\r

  \  triangle: 'polygon(50% 0%, 100% 100%, 0% 100%)',\r

  \  triUp: 'polygon(50% 0%, 100% 100%, 0% 100%)',\r

  \  triup: 'polygon(50% 0%, 100% 100%, 0% 100%)',\r

  \  triDown: 'polygon(0% 0%, 100% 0%, 50% 100%)',\r

  \  tridown: 'polygon(0% 0%, 100% 0%, 50% 100%)',\r

  \  triright: 'polygon(0% 0%, 100% 50%, 0% 100%)',\r

  \  triRight: 'polygon(0% 0%, 100% 50%, 0% 100%)',\r

  \  trileft: 'polygon(0% 50%, 100% 0%, 100% 100%)',\r

  \  triLeft: 'polygon(0% 50%, 100% 0%, 100% 100%)',\r

  \  splayup: 'polygon(0% 70%, 100% 70%, 100% 100%, 0% 100%)',\r

  }"
POOLS: var POOLS = {};
PORT: var PORT = 3000;
positionCount: var positionCount;
PREFERRED_CARD_HEIGHT: var PREFERRED_CARD_HEIGHT = 0;
PRES: var PRES = {};
prevGamePlid: var prevGamePlid = null;
prevServerData: var prevServerData;
Prevturn: var Prevturn;
PrevUser: var PrevUser = null;
prevWaitingFor: var prevWaitingFor = null;
primitiveSetNames: "var primitiveSetNames = ['all', 'activity', 'animal',
  'body', 'drink',\r

  \  'emotion', 'family', 'fantasy', 'food', 'fruit', 'game', 'gesture',\r

  \  'kitchen', 'object', 'place', 'plant', 'person',\r

  \  'role', 'shapes', 'sport', 'sports',\r

  \  'time', 'transport', 'vegetable',\r

  \  'toolbar', 'math', 'punctuation', 'misc'];"
PROJECTNAME: var PROJECTNAME = 'basinno';
PROTO: var PROTO;
PVENTRIES: var PVENTRIES = 10000;
Q: var Q;
QCancelAutoreset: var QCancelAutoreset;
QContextCounter: var QContextCounter = 0;
QCounter: var QCounter = 0;
QRunnerRunning: var QRunnerRunning = false;
QRunning: var QRunning = false;
Qu: var Qu;
QueenOpenCol: var QueenOpenCol = 5;
QueenOpenFile: var QueenOpenFile = 5;
QueenSemiOpenCol: var QueenSemiOpenCol = 3;
QueenSemiOpenFile: var QueenSemiOpenFile = 3;
QuestionCounter: var QuestionCounter = 0;
R: var R;
RankChar: var RankChar = "12345678";
RANKS: "var RANKS = { RANK_1: 0, RANK_2: 1, RANK_3: 2, RANK_4: 3, RANK_5: 4,
  RANK_6: 5, RANK_7: 6, RANK_8: 7, RANK_NONE: 8 };"
RanksBrd: var RanksBrd = new Array(BRD_SQ_NUM);
rateValue: var rateValue;
RecogHighPriorityOutput: var RecogHighPriorityOutput = true;
RecogOutput: var RecogOutput = false;
RecogOutputError: var RecogOutputError = true;
requestAnimFrame: "var requestAnimFrame = (function () {\r

  \  return window.requestAnimationFrame ||\r

  \    window.webkitRequestAnimationFrame ||\r

  \    window.mozRequestAnimationFrame ||\r

  \    window.oRequestAnimationFrame ||\r

  \    window.msRequestAnimationFrame ||\r

  \    function (callback) {\r

  \      window.setTimeout(callback, 1000 / 60);\r

  \    };\r

  })();"
resizeObserver: "var resizeObserver = new ResizeObserver(entries => {\r

  \  for (let entry of entries) {\r

  \    let cs = window.getComputedStyle(entry.target);\r

  \    console.log('watching element:', entry.target);\r

  \    console.log(entry.contentRect.top, ' is ', cs.paddingTop);\r

  \    console.log(entry.contentRect.left, ' is ', cs.paddingLeft);\r

  \    console.log(entry.borderBoxSize[0].inlineSize, ' is ', cs.width);\r

  \    console.log(entry.borderBoxSize[0].blockSize, ' is ', cs.height);\r

  \    if (entry.target.handleResize)\r

  \      entry.target.handleResize(entry);\r

  \  }\r

  });"
resultMessage: var resultMessage;
RkDir: var RkDir = [-1, -10, 1, 10];
RookOpenCol: var RookOpenCol = 10;
RookOpenFile: var RookOpenFile = 10;
RookSemiOpenCol: var RookSemiOpenCol = 5;
RookSemiOpenFile: var RookSemiOpenFile = 5;
RookTable: "var RookTable = [\r

  \  0, 0, 5, 10, 10, 5, 0, 0,\r

  \  0, 0, 5, 10, 10, 5, 0, 0,\r

  \  0, 0, 5, 10, 10, 5, 0, 0,\r

  \  0, 0, 5, 10, 10, 5, 0, 0,\r

  \  0, 0, 5, 10, 10, 5, 0, 0,\r

  \  0, 0, 5, 10, 10, 5, 0, 0,\r

  \  25, 25, 25, 25, 25, 25, 25, 25,\r

  \  0, 0, 5, 10, 10, 5, 0, 0\r

  ];"
ROOT: var ROOT = null;
ROUND_DELAY: var ROUND_DELAY = 500;
ROUND_OUTPUT: var ROUND_OUTPUT = true;
RowBrd: var RowBrd = new Array(BRD_SQ_NUM);
RowChar: var RowChar = "12345678";
ROWS: "var ROWS = { ROW_1: 0, ROW_2: 1, ROW_3: 2, ROW_4: 3, ROW_5: 4, ROW_6: 5,
  ROW_7: 6, ROW_8: 7, ROW_NONE: 8 };"
S: var S = {};
S_AIThinkingTime: var S_AIThinkingTime = 30;
S_autoplay: var S_autoplay = false;
S_autoplayFunction: var S_autoplayFunction = (_g) => false;
S_boardDetection: var S_boardDetection = true;
S_deckDetection: var S_deckDetection = true;
S_defaultObjectArea: var S_defaultObjectArea = 'a_d_objects';
S_defaultPlayerArea: var S_defaultPlayerArea = 'a_d_players';
S_openTab: var S_openTab = 'CodeTab';
S_playMode: var S_playMode = PLAYMODE;
S_showEvents: var S_showEvents = false;
S_startGame: var S_startGame = GAME;
S_tooltips: var S_tooltips = 'OFF';
S_useBehaviors: var S_useBehaviors = true;
S_useColorHintForObjects: var S_useColorHintForObjects = true;
S_useColorHintForProperties: var S_useColorHintForProperties = true;
S_userBehaviors: var S_userBehaviors = true;
S_username: var S_username = USERNAME;
S_userSettings: var S_userSettings = true;
S_userStructures: var S_userStructures = true;
S_useSimpleCode: var S_useSimpleCode = false;
S_useSpec: var S_useSpec = false;
SAMPLES_PER_LEVEL: var SAMPLES_PER_LEVEL = new Array(20).fill(PICS_PER_LEVEL);
Sayings: var Sayings;
scenarioQ: var scenarioQ = [];
scenarioRunning: var scenarioRunning = false;
SCENEHEIGHT: var SCENEHEIGHT = 600;
SCENEWIDTH: var SCENEWIDTH = 900;
Score: var Score;
scoringMode: var scoringMode;
Script: "var Script = {\r

  \  _loadedScripts: [],\r

  \  include: function (script) {\r

  \    if (this._loadedScripts.include(script)) {\r

  \      return false;\r

  \    }\r

  \    var code = new Ajax.Request(script, {\r

  \      asynchronous: false,\r

  \      method: \"GET\",\r

  \      evalJS: false,\r

  \      evalJSON: false\r

  \    }).transport.responseText;\r

  \    if (Prototype.Browser.IE) {\r

  \      window.execScript(code);\r

  \    } else if (Prototype.Browser.WebKit) {\r

  \      $$(\"head\").first().insert(Object.extend(\r

  \        new Element(\"script\", {\r

  \          type: \"text/javascript\"\r

  \        }), {\r

  \        text: code\r

  \      }\r

  \      ));\r

  \    } else {\r

  \      window.eval(code);\r

  \    }\r

  \    this._loadedScripts.push(script);\r

  \  }\r

  };"
sData: var sData;
SearchController: var SearchController = {};
SEED: var SEED = 1;
SEEN_STATUS: var SEEN_STATUS = false;
Selected: var Selected;
SelectedColor: var SelectedColor;
selectedEmoSetNames: var selectedEmoSetNames = ['all', 'animal', 'body',
  'drink', 'emotion', 'food', 'fruit', 'game', 'gesture', 'kitchen', 'object',
  'person', 'place', 'plant', 'sports', 'time', 'transport', 'vegetable'];
SelectedItem: var SelectedItem;
SelectedMenuKey: var SelectedMenuKey;
SelectedMove: var SelectedMove;
SERVER: var SERVER = 'localhost';
SERVER_DATA: var SERVER_DATA = null;
serverData: var serverData = null;
Serverdata: var Serverdata = {};
SERVERDATA_PATH: var SERVERDATA_PATH = '/DATA/' + TEST_DIR + '/server';
serverDataC: var serverDataC = null;
serverDataUpdated: var serverDataUpdated;
SERVERURL: var SERVERURL;
Session: var Session = {};
SessionId: var SessionId;
SessionScore: var SessionScore = 0;
Settings: var Settings;
SettingsChanged: var SettingsChanged;
SettingsList: var SettingsList;
SettingTypesCommon: "var SettingTypesCommon = {\r

  \  samplesPerGame: true,\r

  \  minutesPerUnit: true,\r

  \  incrementLevelOnPositiveStreak: true,\r

  \  decrementLevelOnNegativeStreak: true,\r

  \  showLabels: true,\r

  \  language: true,\r

  \  vocab: true,\r

  \  showTime: true,\r

  \  spokenFeedback: true,\r

  \  silentMode: true,\r

  \  switchGame: true,\r

  \  trials: false,\r

  \  showHint: false,\r

  }"
SHAPEFUNCS: "const SHAPEFUNCS = { 'circle': agCircle, 'hex': agHex, 'rect': agRect, };"
ShapeKeys: var ShapeKeys = ['hex', 'hexF', 'tri', 'triDown', 'triLeft', 'triRight'];
SHOW_DICTIONARIES: var SHOW_DICTIONARIES = false;
SHOW_IDS_REFS: var SHOW_IDS_REFS = false;
SHOW_OIDNODES: var SHOW_OIDNODES = true;
SHOW_RTREE: var SHOW_RTREE = false;
SHOW_SPEC: const SHOW_SPEC = true;
SHOW_UITREE: var SHOW_UITREE = false;
SICHERER: var SICHERER = 100;
SidebarColor: var SidebarColor;
SideChar: var SideChar = "wb-";
SideKey: var SideKey;
SIGI: var SIGI;
Simple: "var Simple = {\r

  \  axiom: 'A',\r

  \  rules: [\r

  \    { aus: 'A', mach: 'AB' },\r

  \    { aus: 'B', mach: 'A' }\r

  \  ],\r

  };"
SINGLECLIENT: var SINGLECLIENT;
skipAnimations: var skipAnimations = IS_TESTING;
skipBadgeAnimation: var skipBadgeAnimation = true;
Socket: var Socket = null;
SOCKETSERVER: var SOCKETSERVER = 'http://localhost:5000'; //geht im spital
SpeakerOutput: var SpeakerOutput = false;
SPEC: var SPEC = null;
SPEC_PATH: var SPEC_PATH = '/DATA/' + TEST_DIR + '/_spec';
Speech: var Speech;
SpeechGrammarList: var SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList
SpeechRecognition: var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition
SpeechRecognitionEvent: var SpeechRecognitionEvent = SpeechRecognitionEvent ||
  webkitSpeechRecognitionEvent
speechRecognitionList: var speechRecognitionList;
Sq120ToSq64: var Sq120ToSq64 = new Array(BRD_SQ_NUM);
Sq64ToSq120: var Sq64ToSq120 = new Array(64);
SQUARES: "var SQUARES = {\r

  \  A1: 21, B1: 22, C1: 23, D1: 24, E1: 25, F1: 26, G1: 27, H1: 28,\r

  \  A8: 91, B8: 92, C8: 93, D8: 94, E8: 95, F8: 96, G8: 97, H8: 98, NO_SQ:
  99, OFFBOARD: 100\r

  };"
START_FEN: var START_FEN = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
START_IN_MENU: var START_IN_MENU = false;
startAtLevel: "var startAtLevel = IS_TESTING ? { gSayPicAuto: 10, gTouchPic: 3,
  gTouchColors: 6, gWritePic: 10, gMissingLetter: 10, gSayPic: 0 }\r

  \  : { gMissingLetter: 3, gTouchPic: 7, gTouchColors: 8, gWritePic: 10,
  gSayPic: 0 };"
startBoats: var startBoats = ['93', '99', '109', '121', '124', '116', '106',
  '111', '116', '129'];
STARTED: var STARTED;
StateDict: var StateDict = {};
Step: var Step = 0;
StepByStepMode: var StepByStepMode = false;
StepCounter: var StepCounter = 0;
STOPAUS: var STOPAUS = false;
SUITS: var SUITS = 'SHDC';
svgDict: var svgDict;
svgDictC: var svgDictC = null;
svgKeys: var svgKeys;
svgList: var svgList;
symbolColors: "var symbolColors = {\r

  \  knight: 'red',\r

  \  victory_point: 'gold',\r

  \  road_building: 'dimgray',\r

  \  monopoly: 'violet',\r

  \  year_of_plenty: 'green',\r

  };"
symbolDict: var symbolDict;
symbolDictC: var symbolDictC = null;
symbolKeys: var symbolKeys;
symbolList: var symbolList;
symBySet: var symBySet;
symByType: var symByType;
SymKeys: var SymKeys;
symKeysByGroupSub: var symKeysByGroupSub;
symKeysBySet: var symKeysBySet;
symKeysByType: var symKeysByType;
symListBySet: var symListBySet;
symListByType: var symListByType;
Syms: var Syms;
T: var T;
Table: var Table;
TABLE_CREATE: var TABLE_CREATE = {};
TABLE_UPDATE: var TABLE_UPDATE = {};
TABLE_UPDATE_BEHAVIOR: var TABLE_UPDATE_BEHAVIOR = [];
TABLE_UPDATE_VISUALIZATION: var TABLE_UPDATE_VISUALIZATION = [];
Tablename: var Tablename;
Tables: var Tables;
TCount: var TCount;
TEST_DIR: var TEST_DIR = '01mini';
testCards: "function testCards() {\r

  \  initRSGData(); hideLobby(); hideLogin(); showGame(); initDom();\r

  \  testPlayerHand1();\r

  }"
testCardsC: var testCardsC = null
testCounter: var testCounter = 100;
testDict: var testDict = {};
TestInfo: var TestInfo = {};
TESTING: var TESTING = false;
TestList: var TestList;
TestNumber: var TestNumber;
TestRunning: var TestRunning;
TestSuiteRunning: var TestSuiteRunning;
TESTVAR: var TESTVAR = 0;
Tid: var Tid;
TimeElapsed: var TimeElapsed;
TimeElem: var TimeElem;
TimeLeft: var TimeLeft;
Timer: "function Timer() {\r

  \  this.reset = function () {\r

  \    this.date = new Date();\r

  \    this.startTime = this.date.getTime();\r

  \    this.elapsedTime = 0;\r

  \  }\r

  \  this.getCurrentTime = function () {\r

  \    this.date = new Date();\r

  \    return this.date.getTime();\r

  \  }\r

  \  this.getElapsedTime = function () {\r

  \    current = this.getCurrentTime();\r

  \    return (current - this.startTime) / 1000;\r

  \  }\r

  \  this.start = this.reset;\r

  \  this.getTimeElapsed = this.getElapsedTime;\r

  \  this.reset();\r

  }"
TimestampStarted: var TimestampStarted;
TO: var TO = {};
TOAnim: var TOAnim;
TOFleetingMessage: var TOFleetingMessage;
TOList: var TOList;
TOMain: var TOMain;
TOMan: var TOMan;
Toolbar: var Toolbar;
TOQ: var TOQ;
TOQRunner: var TOQRunner;
TOSound: var TOSound;
TOTicker: var TOTicker;
TOTrial: var TOTrial;
trialNumber: var trialNumber;
TT_JUST_UPDATED: var TT_JUST_UPDATED = -1;
tupleGroups: var tupleGroups;
Turn: var Turn;
TV: var TV = {};
U: var U = null;
UBEF: var UBEF = null;
UI: var UI = {};
uiActivated: var uiActivated = false;
uiActivatedTC: var uiActivatedTC;
UID: var UID = 0;
UIDCounter: var UIDCounter = 0;
UIDHelpers: var UIDHelpers = 0;
uiPaused: var uiPaused = 0;
uiPausedStack: var uiPausedStack = [];
UIROOT: var UIROOT;
UIS: var UIS;
unitTestId: var unitTestId = 0;
UPD: var UPD = {};
USE_ADDONS: var USE_ADDONS = false;
USE_BEHAVIORS: var USE_BEHAVIORS = true;
USE_LOCAL_STORAGE: var USE_LOCAL_STORAGE = true;
USE_SETTINGS: var USE_SETTINGS = true;
USE_STRUCTURES: var USE_STRUCTURES = true;
USELIVESERVER: var USELIVESERVER = false;
User: var User;
userCode: var userCode = null;
userCodeC: var userCodeC = null;
Userdata: var Userdata;
UserMove: var UserMove = {};
USERNAME: var USERNAME = 'felix';
Username: var Username;
Users: var Users;
userSpec: var userSpec = null;
userSpecC: var userSpecC = null;
V: var V = {};
VERSION: const VERSION = '_ui';
VictimScore: var VictimScore = [0, 100, 200, 300, 400, 500, 600, 100, 200, 300,
  400, 500, 600];
vidCache: var vidCache;
virtKeys: var virtKeys = false;
visualStructures: var visualStructures = {};
voiceSelect: var voiceSelect;
W_init: var W_init = 10;
Waiting_for: var Waiting_for = null;
WAITINGFORPLAYER: var WAITINGFORPLAYER = null;
WhichCorner: var WhichCorner = 0;
WordP: var WordP;
WordProblems: var WordProblems;
WR: var WR = {};
Z: var Z;
ZMax: var ZMax = 0;
Zones: var Zones = {};
_overwriteMerge: const _overwriteMerge = (destinationArray, sourceArray, options) => sourceArray
ALLOW_CALIBRATION: const ALLOW_CALIBRATION = false;
allPeeps: const allPeeps = []
allPlayerTypes: const allPlayerTypes = ['me', 'human', 'AI regular', 'AI random', 'AI pass'];
ALLTESTS: "const ALLTESTS = {\r

  \  0: {\r

  \    0: {\r

  \      fStruct: makeRoot, options: {\r

  \        presentationStrategy: 'rec', autoType: 'cssEmpty',\r

  \        params: { _1: { width: 40, height: 40, color: 'red',
  'background-color': 'blue' } }\r

  \      }\r

  \    },\r

  \  },\r

  \  1: {\r

  \    0: { fStruct: makeSimplestTree, options: { params: { '_1': { height:
  120 } } } },\r

  \    1: { fStruct: makeSimplestTree, options: { params: { '_1': { width:
  100, height: 120 } } } },\r

  \    2: { fStruct: makeSimpleTree, options: { params: { '_1': { width: 100,
  height: 120 } } } },\r

  \    3: { fStruct: makeSimpleTree, options: { params: { '_1': { orientation:
  'v', width: 100, height: 120 } } } },\r

  \    4: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v'
  }, '_4': { orientation: 'v' } } } },\r

  \    5: { fStruct: makeTree332x2, options: { params: { '_1': { orientation:
  'v' } } } },\r

  \    6: { fStruct: makeTree332x2, options: { params: { '_4': { orientation:
  'v' } } } },\r

  \  },\r

  \  2: {\r

  \    0: { fStruct: makeTree33, options: { params: { '_4': { fg: 'red',
  orientation: 'v' } } } },\r

  \    1: { fStruct: makeTree33, options: { params: { '_4': { orientation: 'v'
  } } } },\r

  \    2: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v'
  } } } },\r

  \    3: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v'
  } } } },\r

  \    4: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v'
  }, '_4': { orientation: 'v' } } } },\r

  \    5: { fStruct: makeTree332x2, options: { params: { '_1': { orientation:
  'v' } } } },\r

  \    6: { fStruct: makeTree332x2, options: { params: { '_4': { orientation:
  'v' } } } },\r

  \    7: { fStruct: makeTree332x2, options: { params: { '_7': { orientation:
  'v' } } } },\r

  \  },\r

  \  3: {\r

  \    0: { fStruct: makeTree33, options: { params: { '_4': { fg: 'red',
  orientation: 'v' } } } },\r

  \    1: { fStruct: makeTree33, options: { params: { '_4': { orientation: 'v'
  } } } },\r

  \    2: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v'
  } } } },\r

  \    3: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v'
  } } } },\r

  \    4: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v'
  }, '_4': { orientation: 'v' } } } },\r

  \    5: { fStruct: makeTree332x2, options: { params: { '_1': { orientation:
  'v' } } } },\r

  \    6: { fStruct: makeTree332x2, options: { params: { '_4': { orientation:
  'v' } } } },\r

  \    7: { fStruct: makeTree332x2, options: { params: { '_7': { orientation:
  'v' } } } },\r

  \    8: { fStruct: makeTree332x2, options: { params: { '_4': { orientation:
  'v' }, '_7': { orientation: 'v' } } } },\r

  \    9: { fStruct: makeSimplestTree, options: undefined },\r

  \    10: { fStruct: makeSimplestTree, options: { fContent:
  contentNoRootContent } },\r

  \    11: { fStruct: makeSimpleTree, options: undefined },\r

  \    12: { fStruct: makeSimpleTree, options: { params: { '_1': {
  orientation: 'v' } } } },\r

  \    13: { fStruct: makeSimpleTree, options: { fContent:
  contentNoRootContent } },\r

  \    14: { fStruct: makeTree33, options: { fContent: contentNoRootContent }
  },\r

  \    15: { fStruct: makeTree332x2, options: undefined },\r

  \    16: { fStruct: makeTree332x2, options: { fContent: contentNoRootContent
  } },\r

  \    17: { fStruct: () => makeSimpleTree(20), options: { fContent:
  contentNoRootContent } },\r

  \    18: { fStruct: makeSimplestTree, options: { fContent:
  contentRootExtralong } },\r

  \    19: { fStruct: makeTree33, options: { fContent: contentRootExtralong }
  },\r

  \    20: { fStruct: () => makeSimpleTree(3), options: { fContent:
  contentRootExtralong } },\r

  \    21: {\r

  \      fStruct: makeTree33, options: {\r

  \        params: {\r

  \          '_1': { bg: 'black', orientation: 'v' },\r

  \          '_4': { bg: 'inherit', orientation: 'v' }\r

  \        }\r

  \      }\r

  \    },\r

  \    22: { fStruct: makeTree33, options: { fContent: contentRootExtralong,
  params: { '_1': { orientation: 'v' } } } },\r

  \    23: { fStruct: makeTree33, options: { fContent: contentRootExtralong,
  params: { '_4': { orientation: 'v' } } } },\r

  \  },\r

  \  4: {\r

  \    0: { fStruct: makeSimplestTree, options: { fContent: n => n.uid == '_1'
  ? 'random' : n.uid, positioning: 'random' } },\r

  \    1: { fStruct: makeSimpleTree, options: { fContent: n => n.uid == '_1' ?
  'random' : n.uid, positioning: 'random' } },\r

  \    2: { fStruct: () => makeSimpleTree(10), options: { fContent: n => n.uid
  == '_1' ? 'random' : n.uid, positioning: 'random' } },\r

  \    3: { fStruct: makeTree33, options: { fContent: n => n.uid == '_1' ?
  'random' : n.uid, positioning: 'random' } },\r

  \  },\r

  \  5: {\r

  \    0: { fStruct: makeSimplestTree, options: { fContent: n => n.uid == '_1'
  ? 'hallo' : n.uid, params: { '_1': { height: 120 } } } },\r

  \    1: {\r

  \      fStruct: makeSimplestTree, options: {\r

  \        fContent: n => n.uid == '_1' ? { first: '1', uid: n.uid } :
  n.uid,\r

  \        params: { '_1': { bg: 'blue', 'text-align': 'center', width: 100,
  height: 120 } }\r

  \      }\r

  \    },\r

  \  },\r

  \  6: {\r

  \    41: {\r

  \      fStruct: () => makeTreeNNEach(2, 4), options: {\r

  \        params: {\r

  \          '_1': { orientation: 'h' },\r

  \          '_2': { orientation: 'w', rows: 2, cols: 2 },\r

  \          '_7': { orientation: 'w', rows: 2, cols: 2 }\r

  \        }\r

  \      }\r

  \    },\r

  \    40: {\r

  \      fStruct: () => makeTreeNNEach(1, 4),\r

  \      options: {\r

  \        params:\r

  \        {\r

  \          '_2': { orientation: 'w', rows: 2, cols: 2 }\r

  \        }\r

  \      }\r

  \    },\r

  \    39: {\r

  \      fStruct: () => makeTreeNNEach(2, 2), options: {\r

  \        params: {\r

  \          '_2': { orientation: 'w', rows: 1, cols: 2 },\r

  \          '_5': { orientation: 'w', rows: 1, cols: 2 }\r

  \        }\r

  \      }\r

  \    },\r

  \    38: {\r

  \      fStruct: () => makeTreeNNEach(2, 4), options: {\r

  \        params: {\r

  \          '_2': { orientation: 'w', rows: 2, cols: 2 },\r

  \          '_7': { orientation: 'w', rows: 2, cols: 2 }\r

  \        }\r

  \      }\r

  \    },\r

  \    37: { fStruct: makeSimpleTree, options: { fType: typePanelInfo,
  fContent: contentHallo } },\r

  \    36: { fStruct: makeSimpleTree, options: { fType: typePanelInfo,
  fContent: contentHallo, presentationStrategy: 'new' } },\r

  \    35: { fStruct: () => makeTreeNN(2, 2), options: { fType: typeEmpty,
  presentationStrategy: 'new' } },\r

  \    34: { fStruct: makeTree33, options: { fType: typeEmpty,
  presentationStrategy: 'new' } },\r

  \    33: { fStruct: makeTree33, options: { fType: typeEmpty,
  presentationStrategy: 'new', params: { '_1': { orientation: 'v' } } } },\r

  \    32: { fStruct: makeTree33, options: { presentationStrategy: 'orig',
  params: { '_1': { orientation: 'v' } } } },\r

  \    31: {\r

  \      fStruct: makeTree33, options: {\r

  \        fType: typePanelInfo,\r

  \        presentationStrategy: 'new',\r

  \        params: { '_1': { orientation: 'v' } }\r

  \      }\r

  \    },\r

  \    30: {\r

  \      fStruct: makeTree33, options: {\r

  \        fType: typeEmpty,\r

  \        presentationStrategy: 'rec',\r

  \        params: { '_1': { orientation: 'h' } }\r

  \      }\r

  \    },\r

  \    29: { fStruct: makeTree33, options: { params: { '_1': { orientation:
  'v' } } } },\r

  \    28: { fStruct: () => makeSimpleTree(8), options: {
  presentationStrategy: 'new', fType: type00flex } },\r

  \    27: { fStruct: makeSimplestTree, options: { presentationStrategy:
  'new', fType: type00flex } },\r

  \    26: { fStruct: makeSimplestTree, options: { presentationStrategy:
  'new', fType: typeEmpty } },\r

  \    25: { fStruct: makeSimplestTree, options: { presentationStrategy: 'new'
  } },\r

  \    24: { fStruct: makeSimplestTree, options: undefined },\r

  \    23: { fStruct: makeSimplestTree, options: { presentationStrategy:
  'orig' } },\r

  \    22: { fStruct: makeSimplestTree, options: { fType: typeEmpty } },\r

  \    21: { fStruct: () => makeHugeBoardInBoardOld(25, 5), options: {
  fContent: contentNoParentContent } },\r

  \    20: { fStruct: () => makeHugeBoardInBoard(25, 5), options: { fContent:
  contentNoParentContent } },\r

  \    19: { fStruct: () => makeHugeBoardInBoard(40, 5), options: { fContent:
  contentNoParentContent } },\r

  \    18: { fStruct: () => makeHugeBoardInBoard(4, 2), options: { fContent:
  contentNoParentContent } },\r

  \    17: { fStruct: () => makeTreeNNEach(2, 4), options: { fContent:
  contentNoParentContent, params: { '_1': { orientation: 'w', rows: 1, cols: 2
  }, '_2': { contentwalign: 'center', contenthalign: 'center' }, '_7': {
  contentwalign: 'center', orientation: 'w', rows: 2, cols: 2 } } } },\r

  \    16: {\r

  \      fStruct: () => makeTreeNNEach(2, 4), options: {\r

  \        fContent: contentRootExtralong,\r

  \        params: {\r

  \          '_1': { orientation: 'w', rows: 1, cols: 2 },\r

  \          '_2': { contenthalign: 'center' },\r

  \          '_7': { contentwalign: 'center', orientation: 'w', rows: 2, cols:
  2 }\r

  \        }\r

  \      }\r

  \    },\r

  \    15: {\r

  \      fStruct: () => makeTreeNNEach(2, 4), options: {\r

  \        params: {\r

  \          '_1': { orientation: 'w', rows: 1, cols: 2 },\r

  \          '_7': { orientation: 'w', rows: 2, cols: 2 }\r

  \        }\r

  \      }\r

  \    },\r

  \    14: { fStruct: () => makeTreeNN(2, 4), options: { fContent:
  contentNoParentContentRootExtralong, params: { '_1': { orientation: 'w', rows:
  1, cols: 2 }, '_2': { orientation: 'w', rows: 2, cols: 2 } } } },\r

  \    13: { fStruct: () => makeTreeNN(2, 4), options: { params: { '_1': {
  orientation: 'w', rows: 1, cols: 2 }, '_2': { orientation: 'w', rows: 2, cols:
  2 } } } },\r

  \    12: { fStruct: () => makeTreeNN(2, 4), options: { fContent:
  contentNoParentContent, params: { '_1': { orientation: 'w', rows: 1, cols: 2
  }, '_2': { orientation: 'w', rows: 2, cols: 2 } } } },\r

  \    11: { fStruct: () => makeSimpleTree(3), options: { fContent:
  contentRootExtralong, params: { '_1': { orientation: 'w', rows: 3, cols: 1 } }
  } },\r

  \    10: { fStruct: () => makeSimpleTree(3), options: { params: { '_1': {
  orientation: 'w', rows: 3, cols: 1 } } } },\r

  \    9: { fStruct: () => makeSimpleTree(3), options: { fContent:
  contentNoParentContent, params: { '_1': { orientation: 'w', rows: 3, cols: 1 }
  } } },\r

  \    8: { fStruct: () => makeSimpleTree(2), options: { fContent:
  contentRootExtralong, params: { '_1': { orientation: 'w', rows: 2, cols: 1 } }
  } },\r

  \    7: { fStruct: () => makeSimpleTree(2), options: { params: { '_1': {
  orientation: 'w', rows: 2, cols: 1 } } } },\r

  \    6: { fStruct: () => makeSimpleTree(2), options: { fContent:
  contentNoParentContent, params: { '_1': { orientation: 'w', rows: 2, cols: 1 }
  } } },\r

  \    5: { fStruct: () => makeSimpleTree(4), options: { fContent:
  contentRootExtralong, params: { '_1': { orientation: 'w', rows: 2, cols: 2 } }
  } },\r

  \    4: { fStruct: () => makeSimpleTree(4), options: { params: { '_1': {
  orientation: 'w', rows: 2, cols: 2 } } } },\r

  \    3: { fStruct: () => makeSimpleTree(2), options: { fContent:
  contentRootExtralong } },\r

  \    2: { fStruct: () => makeSimpleTree(2), options: { positioning:
  'regular', fContent: contentRootExtralong } },\r

  \    1: { fStruct: () => makeSimpleTree(20), options: { positioning:
  'regular' } },\r

  \    0: { fStruct: () => makeSimpleTree(4), options: { fContent: n => n.uid
  == '_1' ? 'board' : n.uid, positioning: 'regular' } },\r

  \  },\r

  \  7: {\r

  \    0: { fStruct: makeSimpleTree, options: { autoType: 'cssEmpty',
  fContent: contentNoParentContent } },\r

  \  },\r

  };"
ALLTESTSOLUTIONS: "const ALLTESTSOLUTIONS = {\r

  \  0: {},\r

  \  1: { \"0\": { \"_1\": { \"w\": 23, \"h\": 120 }, \"_2\": { \"w\": 19,
  \"h\": 19 } }, \"1\": { \"_1\": { \"w\": 104, \"h\": 120 }, \"_2\": { \"w\":
  19, \"h\": 19 } }, \"2\": { \"_1\": { \"w\": 104, \"h\": 120 }, \"_2\": {
  \"w\": 19, \"h\": 19 }, \"_3\": { \"w\": 19, \"h\": 19 } }, \"3\": { \"_1\": {
  \"w\": 104, \"h\": 120 }, \"_2\": { \"w\": 19, \"h\": 19 }, \"_3\": { \"w\":
  19, \"h\": 19 } }, \"4\": { \"_1\": { \"w\": 27, \"h\": 145 }, \"_2\": {
  \"w\": 23, \"h\": 19 }, \"_3\": { \"w\": 23, \"h\": 19 }, \"_4\": { \"w\": 23,
  \"h\": 82 }, \"_5\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\": 19
  }, \"_7\": { \"w\": 19, \"h\": 19 } }, \"5\": { \"_1\": { \"w\": 130, \"h\":
  124 }, \"_2\": { \"w\": 126, \"h\": 19 }, \"_3\": { \"w\": 126, \"h\": 19 },
  \"_4\": { \"w\": 126, \"h\": 61 }, \"_5\": { \"w\": 44, \"h\": 40 }, \"_8\": {
  \"w\": 19, \"h\": 19 }, \"_9\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19,
  \"h\": 40 }, \"_7\": { \"w\": 54, \"h\": 40 }, \"_10\": { \"w\": 24, \"h\": 19
  }, \"_11\": { \"w\": 23, \"h\": 19 } }, \"6\": { \"_1\": { \"w\": 104, \"h\":
  145 }, \"_2\": { \"w\": 19, \"h\": 124 }, \"_3\": { \"w\": 19, \"h\": 124 },
  \"_4\": { \"w\": 58, \"h\": 124 }, \"_5\": { \"w\": 54, \"h\": 40 }, \"_8\": {
  \"w\": 19, \"h\": 19 }, \"_9\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 54,
  \"h\": 19 }, \"_7\": { \"w\": 54, \"h\": 40 }, \"_10\": { \"w\": 24, \"h\": 19
  }, \"_11\": { \"w\": 23, \"h\": 19 } } },\r

  \  2: { \"0\": { \"_1\": { \"w\": 69, \"h\": 103 }, \"_2\": { \"w\": 19,
  \"h\": 82 }, \"_3\": { \"w\": 19, \"h\": 82 }, \"_4\": { \"w\": 23, \"h\": 82
  }, \"_5\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\": 19 }, \"_7\":
  { \"w\": 19, \"h\": 19 } }, \"1\": { \"_1\": { \"w\": 69, \"h\": 103 },
  \"_2\": { \"w\": 19, \"h\": 82 }, \"_3\": { \"w\": 19, \"h\": 82 }, \"_4\": {
  \"w\": 23, \"h\": 82 }, \"_5\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19,
  \"h\": 19 }, \"_7\": { \"w\": 19, \"h\": 19 } }, \"2\": { \"_1\": { \"w\": 69,
  \"h\": 103 }, \"_2\": { \"w\": 65, \"h\": 19 }, \"_3\": { \"w\": 65, \"h\": 19
  }, \"_4\": { \"w\": 65, \"h\": 40 }, \"_5\": { \"w\": 19, \"h\": 19 }, \"_6\":
  { \"w\": 19, \"h\": 19 }, \"_7\": { \"w\": 19, \"h\": 19 } }, \"3\": { \"_1\":
  { \"w\": 69, \"h\": 103 }, \"_2\": { \"w\": 65, \"h\": 19 }, \"_3\": { \"w\":
  65, \"h\": 19 }, \"_4\": { \"w\": 65, \"h\": 40 }, \"_5\": { \"w\": 19, \"h\":
  19 }, \"_6\": { \"w\": 19, \"h\": 19 }, \"_7\": { \"w\": 19, \"h\": 19 } },
  \"4\": { \"_1\": { \"w\": 27, \"h\": 145 }, \"_2\": { \"w\": 23, \"h\": 19 },
  \"_3\": { \"w\": 23, \"h\": 19 }, \"_4\": { \"w\": 23, \"h\": 82 }, \"_5\": {
  \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\": 19 }, \"_7\": { \"w\": 19,
  \"h\": 19 } }, \"5\": { \"_1\": { \"w\": 130, \"h\": 124 }, \"_2\": { \"w\":
  126, \"h\": 19 }, \"_3\": { \"w\": 126, \"h\": 19 }, \"_4\": { \"w\": 126,
  \"h\": 61 }, \"_5\": { \"w\": 44, \"h\": 40 }, \"_8\": { \"w\": 19, \"h\": 19
  }, \"_9\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\": 40 }, \"_7\":
  { \"w\": 54, \"h\": 40 }, \"_10\": { \"w\": 24, \"h\": 19 }, \"_11\": { \"w\":
  23, \"h\": 19 } }, \"6\": { \"_1\": { \"w\": 104, \"h\": 145 }, \"_2\": {
  \"w\": 19, \"h\": 124 }, \"_3\": { \"w\": 19, \"h\": 124 }, \"_4\": { \"w\":
  58, \"h\": 124 }, \"_5\": { \"w\": 54, \"h\": 40 }, \"_8\": { \"w\": 19,
  \"h\": 19 }, \"_9\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 54, \"h\": 19
  }, \"_7\": { \"w\": 54, \"h\": 40 }, \"_10\": { \"w\": 24, \"h\": 19 },
  \"_11\": { \"w\": 23, \"h\": 19 } }, \"7\": { \"_1\": { \"w\": 146, \"h\": 103
  }, \"_2\": { \"w\": 19, \"h\": 82 }, \"_3\": { \"w\": 19, \"h\": 82 }, \"_4\":
  { \"w\": 100, \"h\": 82 }, \"_5\": { \"w\": 44, \"h\": 61 }, \"_8\": { \"w\":
  19, \"h\": 19 }, \"_9\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\":
  61 }, \"_7\": { \"w\": 28, \"h\": 61 }, \"_10\": { \"w\": 24, \"h\": 19 },
  \"_11\": { \"w\": 24, \"h\": 19 } } },\r

  \  3: { \"0\": { \"_1\": { \"w\": 69, \"h\": 103 }, \"_2\": { \"w\": 19,
  \"h\": 82 }, \"_3\": { \"w\": 19, \"h\": 82 }, \"_4\": { \"w\": 23, \"h\": 82
  }, \"_5\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\": 19 }, \"_7\":
  { \"w\": 19, \"h\": 19 } }, \"1\": { \"_1\": { \"w\": 69, \"h\": 103 },
  \"_2\": { \"w\": 19, \"h\": 82 }, \"_3\": { \"w\": 19, \"h\": 82 }, \"_4\": {
  \"w\": 23, \"h\": 82 }, \"_5\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19,
  \"h\": 19 }, \"_7\": { \"w\": 19, \"h\": 19 } }, \"2\": { \"_1\": { \"w\": 69,
  \"h\": 103 }, \"_2\": { \"w\": 65, \"h\": 19 }, \"_3\": { \"w\": 65, \"h\": 19
  }, \"_4\": { \"w\": 65, \"h\": 40 }, \"_5\": { \"w\": 19, \"h\": 19 }, \"_6\":
  { \"w\": 19, \"h\": 19 }, \"_7\": { \"w\": 19, \"h\": 19 } }, \"3\": { \"_1\":
  { \"w\": 69, \"h\": 103 }, \"_2\": { \"w\": 65, \"h\": 19 }, \"_3\": { \"w\":
  65, \"h\": 19 }, \"_4\": { \"w\": 65, \"h\": 40 }, \"_5\": { \"w\": 19, \"h\":
  19 }, \"_6\": { \"w\": 19, \"h\": 19 }, \"_7\": { \"w\": 19, \"h\": 19 } },
  \"4\": { \"_1\": { \"w\": 27, \"h\": 145 }, \"_2\": { \"w\": 23, \"h\": 19 },
  \"_3\": { \"w\": 23, \"h\": 19 }, \"_4\": { \"w\": 23, \"h\": 82 }, \"_5\": {
  \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\": 19 }, \"_7\": { \"w\": 19,
  \"h\": 19 } }, \"5\": { \"_1\": { \"w\": 130, \"h\": 124 }, \"_2\": { \"w\":
  126, \"h\": 19 }, \"_3\": { \"w\": 126, \"h\": 19 }, \"_4\": { \"w\": 126,
  \"h\": 61 }, \"_5\": { \"w\": 44, \"h\": 40 }, \"_8\": { \"w\": 19, \"h\": 19
  }, \"_9\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\": 40 }, \"_7\":
  { \"w\": 54, \"h\": 40 }, \"_10\": { \"w\": 24, \"h\": 19 }, \"_11\": { \"w\":
  23, \"h\": 19 } }, \"6\": { \"_1\": { \"w\": 104, \"h\": 145 }, \"_2\": {
  \"w\": 19, \"h\": 124 }, \"_3\": { \"w\": 19, \"h\": 124 }, \"_4\": { \"w\":
  58, \"h\": 124 }, \"_5\": { \"w\": 54, \"h\": 40 }, \"_8\": { \"w\": 19,
  \"h\": 19 }, \"_9\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 54, \"h\": 19
  }, \"_7\": { \"w\": 54, \"h\": 40 }, \"_10\": { \"w\": 24, \"h\": 19 },
  \"_11\": { \"w\": 23, \"h\": 19 } }, \"7\": { \"_1\": { \"w\": 146, \"h\": 103
  }, \"_2\": { \"w\": 19, \"h\": 82 }, \"_3\": { \"w\": 19, \"h\": 82 }, \"_4\":
  { \"w\": 100, \"h\": 82 }, \"_5\": { \"w\": 44, \"h\": 61 }, \"_8\": { \"w\":
  19, \"h\": 19 }, \"_9\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\":
  61 }, \"_7\": { \"w\": 28, \"h\": 61 }, \"_10\": { \"w\": 24, \"h\": 19 },
  \"_11\": { \"w\": 24, \"h\": 19 } }, \"8\": { \"_1\": { \"w\": 94, \"h\": 166
  }, \"_2\": { \"w\": 19, \"h\": 145 }, \"_3\": { \"w\": 19, \"h\": 145 },
  \"_4\": { \"w\": 48, \"h\": 145 }, \"_5\": { \"w\": 44, \"h\": 40 }, \"_8\": {
  \"w\": 19, \"h\": 19 }, \"_9\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 44,
  \"h\": 19 }, \"_7\": { \"w\": 44, \"h\": 61 }, \"_10\": { \"w\": 24, \"h\": 19
  }, \"_11\": { \"w\": 24, \"h\": 19 } }, \"9\": { \"_1\": { \"w\": 23, \"h\":
  40 }, \"_2\": { \"w\": 19, \"h\": 19 } }, \"10\": { \"_1\": { \"w\": 23,
  \"h\": 23 }, \"_2\": { \"w\": 19, \"h\": 19 } }, \"11\": { \"_1\": { \"w\":
  44, \"h\": 40 }, \"_2\": { \"w\": 19, \"h\": 19 }, \"_3\": { \"w\": 19, \"h\":
  19 } }, \"12\": { \"_1\": { \"w\": 23, \"h\": 61 }, \"_2\": { \"w\": 19,
  \"h\": 19 }, \"_3\": { \"w\": 19, \"h\": 19 } }, \"13\": { \"_1\": { \"w\":
  44, \"h\": 23 }, \"_2\": { \"w\": 19, \"h\": 19 }, \"_3\": { \"w\": 19, \"h\":
  19 } }, \"14\": { \"_1\": { \"w\": 111, \"h\": 44 }, \"_2\": { \"w\": 19,
  \"h\": 40 }, \"_3\": { \"w\": 19, \"h\": 40 }, \"_4\": { \"w\": 65, \"h\": 40
  }, \"_5\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\": 19 }, \"_7\":
  { \"w\": 19, \"h\": 19 } }, \"15\": { \"_1\": { \"w\": 172, \"h\": 82 },
  \"_2\": { \"w\": 19, \"h\": 61 }, \"_3\": { \"w\": 19, \"h\": 61 }, \"_4\": {
  \"w\": 126, \"h\": 61 }, \"_5\": { \"w\": 44, \"h\": 40 }, \"_8\": { \"w\":
  19, \"h\": 19 }, \"_9\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\":
  40 }, \"_7\": { \"w\": 54, \"h\": 40 }, \"_10\": { \"w\": 24, \"h\": 19 },
  \"_11\": { \"w\": 23, \"h\": 19 } }, \"16\": { \"_1\": { \"w\": 172, \"h\": 65
  }, \"_2\": { \"w\": 19, \"h\": 61 }, \"_3\": { \"w\": 19, \"h\": 61 }, \"_4\":
  { \"w\": 126, \"h\": 61 }, \"_5\": { \"w\": 44, \"h\": 40 }, \"_8\": { \"w\":
  19, \"h\": 19 }, \"_9\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\":
  40 }, \"_7\": { \"w\": 54, \"h\": 40 }, \"_10\": { \"w\": 24, \"h\": 19 },
  \"_11\": { \"w\": 23, \"h\": 19 } }, \"17\": { \"_1\": { \"w\": 490, \"h\": 23
  }, \"_2\": { \"w\": 19, \"h\": 19 }, \"_3\": { \"w\": 19, \"h\": 19 }, \"_4\":
  { \"w\": 19, \"h\": 19 }, \"_5\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\":
  19, \"h\": 19 }, \"_7\": { \"w\": 19, \"h\": 19 }, \"_8\": { \"w\": 19, \"h\":
  19 }, \"_9\": { \"w\": 19, \"h\": 19 }, \"_10\": { \"w\": 24, \"h\": 19 },
  \"_11\": { \"w\": 23, \"h\": 19 }, \"_12\": { \"w\": 24, \"h\": 19 }, \"_13\":
  { \"w\": 24, \"h\": 19 }, \"_14\": { \"w\": 24, \"h\": 19 }, \"_15\": { \"w\":
  24, \"h\": 19 }, \"_16\": { \"w\": 24, \"h\": 19 }, \"_17\": { \"w\": 24,
  \"h\": 19 }, \"_18\": { \"w\": 24, \"h\": 19 }, \"_19\": { \"w\": 24, \"h\":
  19 }, \"_20\": { \"w\": 24, \"h\": 19 }, \"_21\": { \"w\": 24, \"h\": 19 } },
  \"18\": { \"_1\": { \"w\": 196, \"h\": 40 }, \"_2\": { \"w\": 19, \"h\": 19 }
  }, \"19\": { \"_1\": { \"w\": 196, \"h\": 61 }, \"_2\": { \"w\": 19, \"h\": 40
  }, \"_3\": { \"w\": 19, \"h\": 40 }, \"_4\": { \"w\": 65, \"h\": 40 }, \"_5\":
  { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\": 19 }, \"_7\": { \"w\":
  19, \"h\": 19 } }, \"20\": { \"_1\": { \"w\": 196, \"h\": 40 }, \"_2\": {
  \"w\": 19, \"h\": 19 }, \"_3\": { \"w\": 19, \"h\": 19 }, \"_4\": { \"w\": 19,
  \"h\": 19 } }, \"21\": { \"_1\": { \"w\": 27, \"h\": 145 }, \"_2\": { \"w\":
  23, \"h\": 19 }, \"_3\": { \"w\": 23, \"h\": 19 }, \"_4\": { \"w\": 23, \"h\":
  82 }, \"_5\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\": 19, \"h\": 19 },
  \"_7\": { \"w\": 19, \"h\": 19 } }, \"22\": { \"_1\": { \"w\": 196, \"h\": 103
  }, \"_2\": { \"w\": 65, \"h\": 19 }, \"_3\": { \"w\": 65, \"h\": 19 }, \"_4\":
  { \"w\": 65, \"h\": 40 }, \"_5\": { \"w\": 19, \"h\": 19 }, \"_6\": { \"w\":
  19, \"h\": 19 }, \"_7\": { \"w\": 19, \"h\": 19 } }, \"23\": { \"_1\": {
  \"w\": 196, \"h\": 103 }, \"_2\": { \"w\": 19, \"h\": 82 }, \"_3\": { \"w\":
  19, \"h\": 82 }, \"_4\": { \"w\": 23, \"h\": 82 }, \"_5\": { \"w\": 19, \"h\":
  19 }, \"_6\": { \"w\": 19, \"h\": 19 }, \"_7\": { \"w\": 19, \"h\": 19 } }
  },\r

  \  4: {},\r

  \  5: { \"0\": { \"_1\": { \"w\": 33, \"h\": 120 }, \"_2\": { \"w\": 19,
  \"h\": 19 } }, \"1\": { \"_1\": { \"w\": 104, \"h\": 120 }, \"_2\": { \"w\":
  19, \"h\": 19 } } },\r

  \  6: {},\r

  \  7: { \"0\": { \"_1\": { \"w\": 22, \"h\": 46 }, \"_2\": { \"w\": 22,
  \"h\": 23 }, \"_3\": { \"w\": 22, \"h\": 23 } } },\r

  };"
ARI: "const ARI = {\r

  \  sz_hand: 7,\r

  \  stage: {\r

  \    1: 'journey',\r

  \    2: 'tax',\r

  \    3: 'auto market',\r

  \    4: 'stall selection',\r

  \    1004: 'TEST_starts_in_stall_selection_complete',\r

  \    5: 'action: command',\r

  \    6: 'action step 2',\r

  \    7: 'action 3',\r

  \    8: 'action 4',\r

  \    9: 'action 5',\r

  \    10: 'end game?',\r

  \    11: 'ball',\r

  \    12: 'auction: bid',\r

  \    13: 'auction: buy',\r

  \    14: 'complementing_market_after_church',\r

  \    15: 'commission',\r

  \    16: 'commission new',\r

  \    17: 'church',\r

  \    18: 'church_minplayer_tithe',\r

  \    19: 'church_newcards',\r

  \    20: 'payment action',\r

  \    21: 'church_minplayer_tithe_add',\r

  \    22: 'church_minplayer_tithe_downgrade',\r

  \    23: 'comm_weitergeben',\r

  \    24: 'rumors_weitergeben',\r

  \    25: 'rumor',\r

  \    26: 'blackmail',\r

  \    blackmail: 26,\r

  \    27: 'inspect',\r

  \    rumor: 25,\r

  \    28: 'buy rumor',\r

  \    'buy rumor': 28,\r

  \    29: 'rumor discard',\r

  \    30: 'pick luxury or journey cards',\r

  \    31: 'add new journey',\r

  \    32: 'rumor_both',\r

  \    33: 'blackmail_owner',\r

  \    34: 'accept_blackmail',\r

  \    35: 'blackmail_complete',\r

  \    36: 'reject_blackmail',\r

  \    37: 'commission_stall',\r

  \    38: 'pick_schwein',\r

  \    40: 'trade',\r

  \    41: 'build',\r

  \    42: 'visit',\r

  \    43: 'buy',\r

  \    44: 'upgrade',\r

  \    45: 'downgrade',\r

  \    46: 'visit destroy',\r

  \    build: 41,\r

  \    upgrade: 44,\r

  \    downgrade: 45,\r

  \    visit: 42,\r

  \    buy: 43,\r

  \    100: 'pickup end',\r

  \    101: 'build end',\r

  \    102: 'select building to upgrade',\r

  \    103: 'select downgrade cards',\r

  \    104: 'next_comm_setup_stage',\r

  \    105: 'next_rumor_setup_stage',\r

  \  }\r

  };"
availablePeeps: const availablePeeps = []
beforeActivationMask: const beforeActivationMask = 1 << 1;
BLUE: const BLUE = '#4363d8';
BLUEGREEN: const BLUEGREEN = '#004054';
BLUFF: "const BLUFF = {\r

  \  torank: { _: '_', three: '3', four: '4', five: '5', six: '6', seven: '7',
  eight: '8', nine: '9', ten: 'T', jack: 'J', queen: 'Q', king: 'K', ace: 'A'
  },\r

  \  toword: { _: '_', '3': 'three', '4': 'four', '5': 'five', '6': 'six',
  '7': 'seven', '8': 'eight', '9': 'nine', T: 'ten', J: 'jack', Q: 'queen', K:
  'king', A: 'ace' },\r

  \  rankstr: '3456789TJQKA',\r

  };"
BoyNames: "const BoyNames = ['aaron', 'andy', 'bill', 'blade', 'bob', 'buddy',
  'creed', 'dan', 'darryl', 'dagobert', 'david', 'donald', 'dwight', 'felix',\r

  \  'gilbert', 'gul', 'jim', 'john', 'kevin', 'leo', 'luis', 'mac', 'max',
  'michael', 'mike', 'oscar', 'peter', 'robert', 'ryan',\r

  \  'sebastian', 'stanley', 'stitch', 'toby', 'tom', 'vladimir', 'wolf',
  'wolfgang'];"
BRAUN: const BRAUN = '#331606';
BROWN: const BROWN = '#96613d';
buildPalette: "const buildPalette = (colorsList) => {\r

  \  const paletteContainer = document.getElementById(\"palette\");\r

  \  const complementaryContainer =
  document.getElementById(\"complementary\");\r

  \  paletteContainer.innerHTML = \"\";\r

  \  complementaryContainer.innerHTML = \"\";\r

  \  const orderedByColor = orderByLuminance(colorsList);\r

  \  const hslColors = convertRGBtoHSL(orderedByColor);\r

  \  for (let i = 0; i < orderedByColor.length; i++) {\r

  \    const hexColor = rgbToHexCOOL(orderedByColor[i]);\r

  \    const hexColorComplementary = hslToHexCOOL(hslColors[i]);\r

  \    if (i > 0) {\r

  \      const difference = calculateColorDifference(\r

  \        orderedByColor[i],\r

  \        orderedByColor[i - 1]\r

  \      );\r

  \      if (difference < 120) {\r

  \        continue;\r

  \      }\r

  \    }\r

  \    const colorElement = document.createElement(\"div\");\r

  \    colorElement.style.backgroundColor = hexColor;\r

  \    colorElement.appendChild(document.createTextNode(hexColor));\r

  \    paletteContainer.appendChild(colorElement);\r

  \    if (hslColors[i].h) {\r

  \      const complementaryElement = document.createElement(\"div\");\r

  \      complementaryElement.style.backgroundColor =
  `hsl(${hslColors[i].h},${hslColors[i].s}%,${hslColors[i].l}%)`;\r

  \      complementaryElement.appendChild(\r

  \        document.createTextNode(hexColorComplementary)\r

  \      );\r

  \      complementaryContainer.appendChild(complementaryElement);\r

  \    }\r

  \  }\r

  };"
buildRgb: "const buildRgb = (imageData) => {\r

  \  const rgbValues = [];\r

  \  for (let i = 0; i < imageData.length; i += 4) {\r

  \    const rgb = {\r

  \      r: imageData[i],\r

  \      g: imageData[i + 1],\r

  \      b: imageData[i + 2],\r

  \    };\r

  \    rgbValues.push(rgb);\r

  \  }\r

  \  return rgbValues;\r

  };"
CACHE_INITDATA: const CACHE_INITDATA = true;
calculateColorDifference: "const calculateColorDifference = (color1, color2) =>
  {\r

  \  const rDifference = Math.pow(color2.r - color1.r, 2);\r

  \  const gDifference = Math.pow(color2.g - color1.g, 2);\r

  \  const bDifference = Math.pow(color2.b - color1.b, 2);\r

  \  return rDifference + gDifference + bDifference;\r

  };"
CARD_SZ: const CARD_SZ = 80;
clientData: const clientData = {};
CODE: const CODE = {};
CODE_VERSION: const CODE_VERSION = 1;
ColorDict: "const ColorDict = {\r

  \  black: { c: 'black', E: 'black', D: 'schwarz' },\r

  \  blue: { c: 'blue', E: 'blue', D: 'blau' },\r

  \  BLUE: { c: '#4363d8', E: 'blue', D: 'blau' },\r

  \  BLUEGREEN: { c: BLUEGREEN, E: 'bluegreen', D: 'blaugrün' },\r

  \  blue1: { c: BLUE, E: 'blue', D: 'blau' },\r

  \  BRAUN: { c: BRAUN, E: 'brown', D: 'braun' },\r

  \  BROWN: { c: BROWN, E: 'brown', D: 'braun' },\r

  \  brown: { c: BRAUN, E: 'brown', D: 'braun' },\r

  \  deepyellow: { c: YELLOW3, E: 'yellow', D: 'gelb' },\r

  \  FIREBRICK: { c: '#800000', E: 'darkred', D: 'rotbraun' },\r

  \  gold: { c: 'gold', E: 'gold', D: 'golden' },\r

  \  green: { c: 'green', E: 'green', D: 'grün' },\r

  \  GREEN: { c: '#3cb44b', E: 'green', D: 'grün' },\r

  \  green1: { c: GREEN, E: 'green', D: 'grün' },\r

  \  grey: { c: 'grey', E: 'grey', D: 'grau' },\r

  \  lightblue: { c: LIGHTBLUE, E: 'lightblue', D: 'hellblau' },\r

  \  LIGHTBLUE: { c: '#42d4f4', E: 'lightblue', D: 'hellblau' },\r

  \  lightgreen: { c: LIGHTGREEN, E: 'lightgreen', D: 'hellgrün' },\r

  \  LIGHTGREEN: { c: '#afff45', E: 'lightgreen', D: 'hellgrün' },\r

  \  lightyellow: { c: YELLOW2, E: 'lightyellow', D: 'gelb' },\r

  \  olive: { c: OLIVE, E: 'olive', D: 'oliv' },\r

  \  OLIVE: { c: '#808000', E: 'olive', D: 'oliv' },\r

  \  orange: { c: ORANGE, E: 'orange', D: 'orange' },\r

  \  ORANGE: { c: '#f58231', E: 'orange', D: 'orange' },\r

  \  pink: { c: 'deeppink', E: 'pink', D: 'rosa' },\r

  \  purple: { c: PURPLE, E: 'purple', D: 'lila' },\r

  \  PURPLE: { c: '#911eb4', E: 'purple', D: 'lila' },\r

  \  red: { c: 'red', E: 'red', D: 'rot' },\r

  \  RED: { c: '#e6194B', E: 'red', D: 'rot' },\r

  \  red1: { c: RED, E: 'red', D: 'rot' },\r

  \  skyblue: { c: 'deepskyblue', E: 'skyblue', D: 'himmelblau' },\r

  \  teal: { c: TEAL, E: 'teal', D: 'blaugrün' },\r

  \  TEAL: { c: '#469990', E: 'teal', D: 'blaugrün' },\r

  \  violet: { c: 'indigo', E: 'violet', D: 'violett' },\r

  \  white: { c: 'white', E: 'white', D: 'weiss' },\r

  \  yellow: { c: 'yellow', E: 'yellow', D: 'gelb' },\r

  \  YELLOW: { c: '#ffe119', E: 'yellow', D: 'gelb' },\r

  \  YELLOW2: { c: YELLOW2, E: 'yellow', D: 'gelb' },\r

  \  YELLOW3: { c: YELLOW3, E: 'yellow', D: 'gelb' },\r

  };"
ColorList: "const ColorList = ['lightgreen', 'lightblue', 'yellow', 'red',
  'green', 'blue', 'purple', 'violet', 'lightyellow',\r

  \  'teal', 'orange', 'brown', 'olive', 'deepskyblue', 'deeppink', 'gold',
  'black', 'white', 'grey'];"
COLORPARAMNAMES: "const COLORPARAMNAMES = {\r

  \  bg: true,\r

  \  fg: true,\r

  \  color: true,\r

  \  'font-color': true,\r

  \  border: true,\r

  \  highlight: true,\r

  \  highlight1: true,\r

  \  highlight1: true,\r

  }"
colorShadeX: "const colorShadeX = (c, amt) => {\r

  \  let col = colorHex(c);\r

  \  col = col.replace(/^#/, '')\r

  \  if (col.length === 3) col = col[0] + col[0] + col[1] + col[1] + col[2] +
  col[2]\r

  \  let [r, g, b] = col.match(/.{2}/g);\r

  \  ([r, g, b] = [parseInt(r, 16) + amt, parseInt(g, 16) + amt, parseInt(b,
  16) + amt])\r

  \  r = Math.max(Math.min(255, r), 0).toString(16)\r

  \  g = Math.max(Math.min(255, g), 0).toString(16)\r

  \  b = Math.max(Math.min(255, b), 0).toString(16)\r

  \  const rr = (r.length < 2 ? '0' : '') + r\r

  \  const gg = (g.length < 2 ? '0' : '') + g\r

  \  const bb = (b.length < 2 ? '0' : '') + b\r

  \  return `#${rr}${gg}${bb}`\r

  }"
complementaryColor: "const complementaryColor = color => {\r

  \  const hexColor = color.replace('#', '0x');\r

  \  return `#${('000000' + ('0xffffff' ^
  hexColor).toString(16)).slice(-6)}`;\r

  };"
config: "const config = {\r

  \  src:
  'https://s3-us-west-2.amazonaws.com/s.cdpn.io/175711/open-peeps-sheet.png',\r

  \  rows: 15,\r

  \  cols: 7\r

  }"
convertRGBtoHSL: "const convertRGBtoHSL = (rgbValues) => {\r

  \  return rgbValues.map((pixel) => {\r

  \    let hue,\r

  \      saturation,\r

  \      luminance = 0;\r

  \    let redOpposite = pixel.r / 255;\r

  \    let greenOpposite = pixel.g / 255;\r

  \    let blueOpposite = pixel.b / 255;\r

  \    const Cmax = Math.max(redOpposite, greenOpposite, blueOpposite);\r

  \    const Cmin = Math.min(redOpposite, greenOpposite, blueOpposite);\r

  \    const difference = Cmax - Cmin;\r

  \    luminance = (Cmax + Cmin) / 2.0;\r

  \    if (luminance <= 0.5) {\r

  \      saturation = difference / (Cmax + Cmin);\r

  \    } else if (luminance >= 0.5) {\r

  \      saturation = difference / (2.0 - Cmax - Cmin);\r

  \    }\r

  \    const maxColorValue = Math.max(pixel.r, pixel.g, pixel.b);\r

  \    if (maxColorValue === pixel.r) {\r

  \      hue = (greenOpposite - blueOpposite) / difference;\r

  \    } else if (maxColorValue === pixel.g) {\r

  \      hue = 2.0 + (blueOpposite - redOpposite) / difference;\r

  \    } else {\r

  \      hue = 4.0 + (greenOpposite - blueOpposite) / difference;\r

  \    }\r

  \    hue = hue * 60;\r

  \    if (hue < 0) {\r

  \      hue = hue + 360;\r

  \    }\r

  \    if (difference === 0) {\r

  \      return false;\r

  \    }\r

  \    return {\r

  \      h: Math.round(hue) + 180,\r

  \      s: parseFloat(saturation * 100).toFixed(2),\r

  \      l: parseFloat(luminance * 100).toFixed(2),\r

  \    };\r

  \  });\r

  };"
CORNERS: const CORNERS = ['◢', '◣', '◤', '◥'];
CORNERS0: const CORNERS0 = ['♠', '♡'];
CORNERS2: const CORNERS2 = ['⬔', '⬕'];
CORNERS3: const CORNERS3 = ['⮜', '⮝', '⮞', '⮟'];
CORNERS4: const CORNERS4 = ['⭐', '⭑'];
CORNERS5: const CORNERS5 = ['⬛', '⬜'];
createMessageHTML: "const createMessageHTML = message => {\r

  \  if (isString(message)) {\r

  \    return `\r

  \      <p class=\"secondary-text text-center mb-2\">${message}</p>\r

  \    `;\r

  \  } else if (isString(message)) {\r

  \    return `\r

  \    <div>\r

  \      <p style=\"color:red\" class=\"message-content\">${message}</p>\r

  \    </div>\r

  \    `;\r

  \  }\r

  \  return `\r

  \  <div class=\"message ${message.type === messageTypes.LEFT ?
  'message-left' : 'message-right'\r

  \    }\">\r

  \    <div class=\"message-details flex\">\r

  \      <p class=\"flex-grow-1 message-author\">${message.author}</p>\r

  \      <p class=\"message-date\">${message.date}</p>\r

  \    </div>\r

  \    <p class=\"message-content\">${message.content}</p>\r

  \  </div>\r

  \  `;\r

  };"
createTextStyle: "const createTextStyle = function (feature, resolution, dom)
  {\r

  \  const align = dom.align.value;\r

  \  const baseline = dom.baseline.value;\r

  \  const size = dom.size.value;\r

  \  const height = dom.height.value;\r

  \  const offsetX = parseInt(dom.offsetX.value, 10);\r

  \  const offsetY = parseInt(dom.offsetY.value, 10);\r

  \  const weight = dom.weight.value;\r

  \  const placement = dom.placement ? dom.placement.value : undefined;\r

  \  const maxAngle = dom.maxangle ? parseFloat(dom.maxangle.value) :
  undefined;\r

  \  const overflow = dom.overflow ? dom.overflow.value == 'true' :
  undefined;\r

  \  const rotation = parseFloat(dom.rotation.value);\r

  \  if (dom.font.value == \"'Open Sans'\" && !openSansAdded) {\r

  \    const openSans = document.createElement('link');\r

  \    openSans.href = 'https://fonts.googleapis.com/css?family=Open+Sans';\r

  \    openSans.rel = 'stylesheet';\r

  \    document.head.appendChild(openSans);\r

  \    openSansAdded = true;\r

  \  }\r

  \  const font = weight + ' ' + size + '/' + height + ' ' + dom.font.value;\r

  \  const fillColor = dom.color.value;\r

  \  const outlineColor = dom.outline.value;\r

  \  const outlineWidth = parseInt(dom.outlineWidth.value, 10);\r

  \  return new Text({\r

  \    textAlign: align == '' ? undefined : align,\r

  \    textBaseline: baseline,\r

  \    font: font,\r

  \    text: getText(feature, resolution, dom),\r

  \    fill: new Fill({ color: fillColor }),\r

  \    stroke: new Stroke({ color: outlineColor, width: outlineWidth }),\r

  \    offsetX: offsetX,\r

  \    offsetY: offsetY,\r

  \    placement: placement,\r

  \    maxAngle: maxAngle,\r

  \    overflow: overflow,\r

  \    rotation: rotation,\r

  \  });\r

  };"
CRIMSON: const CRIMSON = colorDarker('crimson', .25);
crowd: const crowd = []
DARKBLUE: const DARKBLUE = '#04041b';
DD: "const DD = {\r

  \  yellow: 'gelb', green: 'grün', blue: 'blau', red: 'rot', pink: 'rosa',
  orange: 'orange', black: 'schwarz',\r

  \  white: 'weiss', violet: 'violett', '1st': 'erste', '2nd': 'zweite',
  '3rd': 'dritte', '4th': 'vierte', '5th': 'fünfte',\r

  \  add: 'addiere', subtract: 'subtrahiere', multiply: 'mutipliziere', plus:
  'plus', minus: 'minus', times: 'mal',\r

  \  'divided by': 'dividiert durch', excellent: 'sehr gut', very: 'sehr',
  good: 'gut',\r

  \  'to the previous number': 'zur vorhergehenden zahl',\r

  \  'from the previous number': 'von der vorhergehenden zahl',\r

  \  'multiply the previous number by': 'multipliziere die vorhergehende zahl
  mit',\r

  \  'divide the previous number by': 'dividiere die vorhergehende zahl
  durch',\r

  \  'the previous number': 'die vorhergehende zahl', is: 'ist', what: 'was',
  equals: 'ist gleich', enter: \"tippe\",\r

  \  'to the power of': 'hoch', or: 'oder', less: 'kleiner', greater:
  'grösser', than: 'als', equal: 'gleich', and: 'und',\r

  \  not: 'nicht', click: 'click', press: 'tippe', quite: 'ziemlich', 'not
  quite': 'nicht ganz',\r

  \  say: 'sage', write: 'schreibe', complete: 'ergänze', 'unequal':
  'ungleich', except: 'ausser', EXCEPT: 'AUSSER',\r

  \  number: 'Zahl', color: 'farbe', eliminate: 'eliminiere', all: 'alle',
  with: 'mit', true: 'wahr', false: 'falsch',\r

  \  build: 'bilde', count: 'zähle', 'the red dots': 'die roten Punkte',\r

  };"
DEF_ORIENTATION: const DEF_ORIENTATION = 'v';
DEF_SPLIT: const DEF_SPLIT = 0.5;
defaultDeckAreaName: const defaultDeckAreaName = 'deckArea';
defaultGameplayerAreaName: const defaultGameplayerAreaName = 'gameplayerArea';
DEFAULTPICTYPE: const DEFAULTPICTYPE = 'all';
defaultTabletopCardsAreaName: const defaultTabletopCardsAreaName = 'tabletopCardsArea';
DIBOA: "const DIBOA = {\r

  \  home: { link: \"../rechnung/index.html\", img: 'home.png', align: 'left',
  pop: false },\r

  \  bill: { link: \"../rechnung/index.html\", img: 'bill.png', align: 'left',
  pop: false },\r

  \  boa: { link: \"\", img: 'boa.png', align: 'left', pop: false },\r

  \  bw: { link: \"../rechnung/bwindex.html\", img: 'bwicon.png', align:
  'right', pop: true },\r

  \  authenticator: { link: \"../rechnung/boaa.html\", img:
  'authenticator.png', align: 'right', pop: true },\r

  \  authy: { link: \"../rechnung/boaa.html\", img: 'authy.png', align:
  'right', pop: true },\r

  \  onedrive: { link: \"../rechnung/boaa.html\", img: 'onedrive.png', align:
  'right', pop: true },\r

  \  skype: {\r

  \    link: \"../rechnung/boaa.html\", img: 'skype.png', align: 'right', pop:
  false,\r

  \    contacts: {\r

  \      'Julia Oasis': { date: 'Wed', msg: 'Wow', color: BLUEGREEN },\r

  \      '+14778991960': { date: 'Thu', msg: 'Missed Call', color: ORANGE },\r

  \    }\r

  \  },\r

  \  bw_info: {\r

  \    boa: { userid: 'gleem@gmail.com', pwd: rPassword(20) },\r

  \    authy: { userid: 'gleem@gmail.com', pwd: rPassword(20) },\r

  \  },\r

  \  boa_data: {\r

  \    'AAA-MBNA 5464 3332 3333 5555': { sub: '*5555', logo: 'boa.png' },\r

  \    'AMERICAN EXPRESS': { sub: '*4554', logo: 'amex.png' },\r

  \    'AT&T Mobility': { sub: '*1331', logo: 'att.png' },\r

  \    'AT&T Mobility{AT&T WA}': { sub: '*7575', logo: 'att.png' },\r

  \    'AT&T Mobility': { sub: '*8585', logo: 'att.png' },\r

  \    'Bank Of Amerika Credit Card': { sub: '*1212', logo: 'boa.png', 'Last
  Payment': '5-25 $1150.41', brand: 'BofA_rgb' },\r

  \    'Bank Of Amerika': { sub: '*0898', logo: 'boa.png' },\r

  \    'Bank Of Amerika Mail-in1': { sub: '*6565', logo: 'boa.png' },\r

  \    'Bel-Red Oral': { sub: '*2432' },\r

  \    'Bellevue Kendo Club': { sub: '*hallo' },\r

  \    'CapitalOne': { sub: '*1324', logo: 'capitalOne.png' },\r

  \    'CapitalOneVenture': { sub: '*6456', logo: 'capitalOne.png' },\r

  \    'CapitalOneVentureF': { sub: '*9789', logo: 'capitalOne.png' },\r

  \    'Chase': { sub: '*3131', logo: 'chase.png' },\r

  \    'Chase Amazon': { sub: '*0898', 'Last Payment': '5-25 $1150.41', logo:
  'chase.png', brand: 'prime' },\r

  \    'Chase Card': { sub: '*1432', logo: 'chase.png' },\r

  \    'CHASE MANHATTAN BANK-MC': { sub: '*0797', 'Last Payment': '5-25
  $110.99', logo: 'chase.png', brand: 'chase_bank' },\r

  \    'Chase Sapphire': { sub: '*5132', logo: 'chase.png' },\r

  \    'Chase Sapphire': { sub: '*8679', logo: 'chase.png' },\r

  \    'City Cards': { sub: '*3124', logo: 'citi.png' },\r

  \    'City Cards Divident': { sub: '*9678', logo: 'citi.png' },\r

  \    'CITY CARDS Points': { sub: '*7678', logo: 'citi.png' },\r

  \    'Citi Costco': { sub: '*8768', 'Last Payment': '6-17 $506.14', logo:
  'citi.png', brand: 'citibank' },\r

  \    'Citi Costco gu': { sub: '*0890', 'Last Payment': '6-6 $228.92', logo:
  'citi.png', brand: 'citibank' },\r

  \    'CITI DIVIDENT Platinum': { sub: '*3454', logo: 'citi.png' },\r

  \    'CITIBANK VISA NV': { sub: '*7566', logo: 'citi.png' },\r

  \    'City of Redmond': { sub: '*4998' },\r

  \    'City of Redmond WA': { sub: '*2887', 'Last Payment': '5-17 $214.94',
  brand: 'redmond' },\r

  \    'Comcast': { sub: '*7676', logo: 'comcast.png' },\r

  \    'Comcast Perrigo': { sub: '*1324', 'Last Payment': '6-21 $89.44', logo:
  'comcast.png', brand: 'comcast' },\r

  \    'ComCast WA': { sub: '*6456', logo: 'comcast.png' },\r

  \    'DISCOVER CARD SERVICES': { sub: '*8678' },\r

  \    'Dr. Ellie Tabaraie': { sub: '*hallo' },\r

  \    'Fastenerz.com': { sub: '*000' },\r

  \    'Fibonacci': { sub: '*6666' },\r

  \    'Fleet Credit Card Service': { sub: '*8798' },\r

  \    'FLEET CREDIT CARD0MC/VS (32)': { sub: '*8799' },\r

  \    'Frontier': { sub: '*05-5' },\r

  \    'Frontier2': { sub: '*5366' },\r

  \    'GoodToGo': { sub: '*7767' },\r

  \    'Hardford Mutual Funds Inc.': { sub: '*8878' },\r

  \    'King County Treasury': { sub: '*0-02' },\r

  \    'King County Treasury': { sub: '*0-03' },\r

  \    'LabCorp': { sub: '*8899' },\r

  \    'Landover Mortgage': { sub: '*hallo' },\r

  \    'Lauren Magada': { sub: 'Lauren boa' },\r

  \    'Lederman&Pulman': { sub: '*9988' },\r

  \    'Liberty Mutual Group': { sub: '*-660' },\r

  \    'Liberty Mutual Group': { sub: '*-768' },\r

  \    'Liberty Mutual Group': { sub: '*-760' },\r

  \    \"Macy's Star Rewards\": { sub: '*23-0', logo: 'macys.png' },\r

  \    'MBNA': { sub: '*3444' },\r

  \    'MBNA 6455 6677 7924 5555': { sub: '*5555' },\r

  \    'Oachita': { sub: '*6556' },\r

  \    'Oasis Condominium CA': { sub: '*889' },\r

  \    'Oasis Condominium CA': { sub: '*1889', 'Last Payment': '5-31 $581.54',
  brand: 'oasis' },\r

  \    'Orthodontics Roos': { sub: '*1111' },\r

  \    'Overcast Law Office, PS': { sub: '*4423' },\r

  \    'Overlake Medical Center': { sub: '*hallo' },\r

  \    'Pediatric Associates Inc': { sub: '*8383' },\r

  \    'Perrigo Heights HOA': { sub: '*t#98' },\r

  \    'Premier Periodontics': { sub: '*9494' },\r

  \    'PreventionMD': { sub: '*9566' },\r

  \    'Prime Trust LLC': { sub: '*8788' },\r

  \    'ProSport': { sub: '*1233' },\r

  \    'PSE - Puget Sound Energy': { sub: '*3444', 'Last Payment': '5-25
  $70.59', brand: 'PSE' },\r

  \    'Puget Sound Energy': { sub: '*66-9' },\r

  \    'Real Property Management Eclipse': { sub: '*asss' },\r

  \    'Remadina Ridge Family Dentistry': { sub: '*6656' },\r

  \    'Sewage Capacity Charge': { sub: '*7575' },\r

  \    'Silkroad': { sub: '*788-1' },\r

  \    'Suhrco': { sub: '*899' },\r

  \    'Target': { sub: '*9789' },\r

  \    'Target National Bank': { sub: '*1432' },\r

  \    'Univerity Of WA Medical Center': { sub: '*1543' },\r

  \    'US Bank Credit Card FlexPerks': { sub: '*0789', 'Last Payment': '5-20
  $11.13', brand: 'usbank' },\r

  \    'USBank': { sub: '*7567' },\r

  \    'USBank-CashPlus': { sub: '*3123' },\r

  \    'USBank-FlexPerks': { sub: '*1321' },\r

  \    'Verizon': { sub: '*7567' },\r

  \    'Waste Management': { sub: '*87-1' },\r

  \    'Waste Management': { sub: '*23-9' },\r

  \    'Wells Fargo Home Mortgage': { sub: '*1333', 'Last Payment': '6-10
  $1625.06', logo: 'wellsfargo.png', brand: 'wellsfargo' },\r

  \    'Wells Fargo Mortgage': { sub: '*2444', logo: 'wellsfargo.png' },\r

  \    'Williams-Sonoma': { sub: '*9888' },\r

  \    'WINDERMERE PROPERTY MGMT/EASTSID': { sub: '*8766' },\r

  \    'Windermere Real Estate/East': { sub: '*ntal' },\r

  \  }\r

  };"
displayMessages: "const displayMessages = () => {\r

  \  const messagesHTML = messages\r

  \    .map(message => createMessageHTML(message))\r

  \    .join('');\r

  \  messagesList.innerHTML = messagesHTML;\r

  };"
DOMCATS: "const DOMCATS = { rect: 'g', g: 'g', circle: 'g', text: 'g', polygon:
  'g', line: 'g', body: 'd', svg: 'h', div: 'd', p: 'd', table: 'd', button:
  'd', a: 'd', span: 'd', image: 'd', paragraph: 'd', anchor: 'd' };"
DSPEC_VERSION: const DSPEC_VERSION = 3;
EMO: "const EMO = {\r

  \  emoscale: {\r

  \    freedom: { list: 'joyful, empowered, loving, free', key: 'smiling face
  with hearts', n: 4, color: 'violet', E: 'joy', D: 'freiheit', stage: 'open
  heart', danger: 'arrogance', advice: 'be quiet', loc: 'airport', locd:
  'flughafen', syn: 'joy,appreciation,empowerment,love', rem: 'let go' },\r

  \    zone: { list: \"energetic, creative, enthusiastic, in the zone\", key:
  'nerd face', n: 3, color: 'indigo', E: 'energy', D: 'energie', stage:
  'constant flow', danger: 'greed', advice: 'now', loc: 'airport', locd:
  'flughafen', syn: 'passion', rem: 'remain watchful' },\r

  \    grateful: { list: 'peaceful, grateful, happy, playful', key: 'smiling
  face with halo', n: 2, color: 'blue', syn: 'eagerness,happiness', rem: 'stick
  to plan', E: 'energy', D: 'energie', stage: 'energy', danger: 'planlos
  verpuffen lassen, being overly confident', advice: 'make a plan, stick to the
  plan', loc: 'airport', locd: 'flughafen' },\r

  \    contentment: { list: 'calm, centered, content, trusting', key:
  'relieved face', n: 1, color: 'green', rem: 'abide', E: 'serene', D:
  'zufriedenheit', stage: 'gelassenheit', danger: 'passivity', advice: 'stay
  active', loc: 'airport', locd: 'flughafen' },\r

  \    boredom: { list: 'tired, bored, aimless, empty', key: 'slightly
  frowning face', n: 0, color: 'sienna', rem: 'oracle', E: 'bored', D:
  'langeweile', stage: 'gelassenheit', danger: 'passivity', advice: 'stay
  active', loc: 'airport', locd: 'flughafen' },\r

  \    pessimism: { list: 'indecisive, confused, doubting, worried', key:
  'worried face', n: -1, color: 'yellow', rem: 'last day', E: 'serene', D:
  'langeweile', stage: 'gelassenheit', danger: 'passivity', advice: 'stay
  active', loc: 'airport', locd: 'flughafen' },\r

  \    overwhelm: { list: 'irritated, anxious, stressed, overwhelmed', key:
  'anxious face with sweat', n: -2, color: 'orange', rem: 'pause', E:
  'irritated', D: 'irritiert', stage: 'damage control', danger: 'losing
  contenance', advice: 'retreat', loc: 'airport', locd: 'flughafen' },\r

  \    blame: { list: 'impatient, resentful, blaming, angry', key: 'face with
  symbols on mouth', n: -3, color: 'red', syn: 'discouragement,anger,revenge',
  rem: 'robot', E: 'blaming', D: 'schuld zuweisend', stage: 'damage control',
  danger: 'toxicity', advice: 'surrender', loc: 'airport', locd: 'flughafen'
  },\r

  \    hatred: { list: 'ruthless, aggressive, jealous, hateful', key: 'black
  heart', n: -4, color: 'black', syn: 'rage,jealousy', rem: 'robot', E:
  'hateful', D: 'hass', stage: 'damage control', danger: 'toxicity', advice:
  'surrender', loc: 'airport', locd: 'flughafen' },\r

  \    guilt: { list: 'guilty, powerless, frozen, suicidal', key: 'cold face',
  n: -5, color: 'grey', syn: 'insecurity,unworthiness', rem: 'robot', E:
  'guilty', D: 'wertlos', stage: 'damage control', danger: 'toxicity', advice:
  'surrender', loc: 'airport', locd: 'flughafen' },\r

  \  },\r

  \  remedy: {\r

  \    sleep: { list: 'rest, close your eyes, deep breath' },\r

  \    distraction: { list: 'read, movie, docu, audiobook' },\r

  \    walk: { list: 'music, tm, library, walk' },\r

  \    babystep: { list: 'veggies, fruit, haushalt, wae, wasser, tee' },\r

  \    work: { list: 'post, box, shelf, people, todolist' },\r

  \    action: { list: 'piano, violin, game' },\r

  \    choices: { list: 'dice, todolist, openlist, choices' },\r

  \    retreat: { list: 'flight, dimension change' },\r

  \    cafe: { list: 'renew, plan' },\r

  \    inside: { list: 'watch, freeze, meditate' }\r

  \  },\r

  \  attitude: {\r

  \    disziplin: { max: 1 },\r

  \    gelassenheit: { min: 1, max: 4 },\r

  \    energie: { min: 3, max: 5 },\r

  \    ausgelassenheit: { min: 5, max: 7 },\r

  \    friede: { min: 5, max: 7 },\r

  \    freude: { min: 5, max: 7 },\r

  \    freiheit: { min: 5, max: 7 },\r

  \    liebe: { min: 5, max: 7 },\r

  \  }\r

  };"
EMOFONTLIST: const EMOFONTLIST = ['emoOpen', 'openmoBlack', 'segoe ui emoji',
  'segoe ui symbol'];
EXTENDED_COLORS: const EXTENDED_COLORS = ['red', 'green', 'yellow', 'blue',
  'pink', 'indigo', 'gray', 'sienna', 'olive'];
FIELD_SZ: const FIELD_SZ = 40;
fieldSorter: "const fieldSorter = fields => (a, b) =>\r

  \  fields\r

  \    .map(o => {\r

  \      let dir = 1;\r

  \      if (o[0] === '-') {\r

  \        dir = -1;\r

  \        o = o.substring(1);\r

  \      }\r

  \      return a[o] > b[o] ? dir : a[o] < b[o] ? -dir : 0;\r

  \    })\r

  \    .reduce((p, n) => (p ? p : n), 0);"
findBiggestColorRange: "const findBiggestColorRange = (rgbValues) => {\r

  \  let rMin = Number.MAX_VALUE;\r

  \  let gMin = Number.MAX_VALUE;\r

  \  let bMin = Number.MAX_VALUE;\r

  \  let rMax = Number.MIN_VALUE;\r

  \  let gMax = Number.MIN_VALUE;\r

  \  let bMax = Number.MIN_VALUE;\r

  \  rgbValues.forEach((pixel) => {\r

  \    rMin = Math.min(rMin, pixel.r);\r

  \    gMin = Math.min(gMin, pixel.g);\r

  \    bMin = Math.min(bMin, pixel.b);\r

  \    rMax = Math.max(rMax, pixel.r);\r

  \    gMax = Math.max(gMax, pixel.g);\r

  \    bMax = Math.max(bMax, pixel.b);\r

  \  });\r

  \  const rRange = rMax - rMin;\r

  \  const gRange = gMax - gMin;\r

  \  const bRange = bMax - bMin;\r

  \  const biggestRange = Math.max(rRange, gRange, bRange);\r

  \  if (biggestRange === rRange) {\r

  \    return \"r\";\r

  \  } else if (biggestRange === gRange) {\r

  \    return \"g\";\r

  \  } else {\r

  \    return \"b\";\r

  \  }\r

  };"
FIREBRICK: const FIREBRICK = '#800000';
FLASK: const FLASK = true;
GENERATE_EMPTY_MESSAGES: const GENERATE_EMPTY_MESSAGES = true;
germanNumbers: "const germanNumbers = {\r

  \  ein: 1, eins: 1, zwei: 2, 1: 'eins', 2: 'zwei', 3: 'drei', drei: 3, vier:
  4, 4: 'vier', 5: 'fuenf', fuenf: 5, sechs: 6, 6: 'sechs', sex: 6,\r

  \  sieben: 7, 7: 'sieben', 8: 'acht', acht: 8, 9: 'neun', neun: 9, zehn: 10,
  elf: 11, zwoelf: 12, zwanzig: 20, dreissig: 30,\r

  \  10: 'zehn', 11: 'elf', 12: 'zwoelf', 20: 'zwanzig', 30: 'dreissig',
  vierzig: 40, fuenfzig: 50, 40: 'vierzig', 50: 'fuenfzig'\r

  };"
GermanToEnglish: "const GermanToEnglish = {\r

  \  rot: 'red', blau: 'blue', grün: 'green', gelb: 'yellow', violett:
  'violet', lila: 'purple',\r

  \  braun: 'brown', schwarz: 'black', weiss: 'white', grau: 'grey', rosa:
  'pink', orange: 'orange'\r

  };"
getRandomFromArray: const getRandomFromArray = (array) => (array[randomIndex(array) | 0])
getText: "const getText = function (feature, resolution, dom) {\r

  \  const type = dom.text.value;\r

  \  const maxResolution = dom.maxreso.value;\r

  \  let text = feature.get('name');\r

  \  if (resolution > maxResolution) {\r

  \    text = '';\r

  \  } else if (type == 'hide') {\r

  \    text = '';\r

  \  } else if (type == 'shorten') {\r

  \    text = text.trunc(12);\r

  \  } else if (\r

  \    type == 'wrap' &&\r

  \    (!dom.placement || dom.placement.value != 'line')\r

  \  ) {\r

  \    text = stringDivider(text, 16, '\\n');\r

  \  }\r

  \  return text;\r

  };"
GFUNC: "const GFUNC = {\r

  \  gTouchPic: {\r

  \    startGame: startGameTP, startLevel: startLevelTP, startRound:
  startRoundTP, trialPrompt: trialPromptTP, prompt: promptTP, activate:
  activateTP, eval: evalTP\r

  \  },\r

  \  gTouchColors: {\r

  \    startGame: startGameTC, startLevel: startLevelTC, startRound:
  startRoundTC, trialPrompt: trialPromptTC, prompt: promptTC, activate:
  activateTC, eval: evalTC\r

  \  },\r

  \  gWritePic: {\r

  \    startGame: startGameWP, startLevel: startLevelWP, startRound:
  startRoundWP, trialPrompt: trialPromptWP, prompt: promptWP, activate:
  activateWP, eval: evalWP\r

  \  },\r

  \  gMissingLetter: {\r

  \    startGame: startGameML, startLevel: startLevelML, startRound:
  startRoundML, trialPrompt: trialPromptML, prompt: promptML, activate:
  activateML, eval: evalML\r

  \  },\r

  \  gSayPic: {\r

  \    startGame: startGameSP, startLevel: startLevelSP, startRound:
  startRoundSP, trialPrompt: trialPromptSP, prompt: promptSP, activate:
  activateSP, eval: evalSP\r

  \  },\r

  \  gSayPicAuto: {\r

  \    startGame: startGameSPA, startLevel: startLevelSPA, startRound:
  startRoundSPA, trialPrompt: trialPromptSPA, prompt: promptSPA, activate:
  activateSPA, eval: evalSPA\r

  \  },\r

  }"
GirlNames: "const GirlNames = ['afia', 'ally', 'amanda', 'angela', 'anna',
  'annabel', 'birgit', 'bona', 'carmen', 'cassandra',\r

  \  'charlene', 'erin', 'hanna', 'holly', 'jan', 'karen', 'kelly', 'lauren',
  'malta', 'maria', 'maurita', 'minnow', 'meredith',\r

  \  'milda', 'mimi', 'minna', 'minnow', 'mitra', 'nasi', 'nil', 'nimble',
  'nonna', 'pam', 'phyllis', 'poppa', 'rhi', 'sarah',\r

  \  'sheeba', 'valerie', 'viola', 'wala'];"
GREEN: const GREEN = '#3cb44b';
GT: const GT = {};
hasClickedMask: const hasClickedMask = 1 << 2;
HEROKU: const HEROKU = false;
hslToHexCOOL: "const hslToHexCOOL = (hslColor) => {\r

  \  const hslColorCopy = { ...hslColor };\r

  \  hslColorCopy.l /= 100;\r

  \  const a =\r

  \    (hslColorCopy.s * Math.min(hslColorCopy.l, 1 - hslColorCopy.l)) /
  100;\r

  \  const f = (n) => {\r

  \    const k = (n + hslColorCopy.h / 30) % 12;\r

  \    const color = hslColorCopy.l - a * Math.max(Math.min(k - 3, 9 - k, 1),
  -1);\r

  \    return Math.round(255 * color)\r

  \      .toString(16)\r

  \      .padStart(2, \"0\");\r

  \  };\r

  \  return `#${f(0)}${f(8)}${f(4)}`.toUpperCase();\r

  };"
img: const img = document.createElement('img')
immediateStart: const immediateStart = true;
INCREMENTAL_UPDATE: const INCREMENTAL_UPDATE = true;
INIT_CLEAR_LOCALSTORAGE: const INIT_CLEAR_LOCALSTORAGE = true;
INNO: "const INNO = {\r

  \  color: { blue: '#89aad7', red: '#da7887', green: '#72b964', yellow:
  '#e2e57a', purple: '#9b58ba' },\r

  \  sym: {\r

  \    tower: { key: 'white-tower', fg: 'silver', bg: 'dimgray' },\r

  \    leaf: { key: 'leaf', fg: '#96D6BE', bg: '#275D45' },\r

  \    tree: { key: 'leaf', fg: '#96D6BE', bg: '#275D45' },\r

  \    bulb: { key: 'lightbulb', fg: 'white', bg: '#69224C' },\r

  \    crown: { key: 'queen-crown', fg: '#FEE593', bg: '#A27E44' },\r

  \    factory: { key: 'i_factory', fg: '#CD5147', bg: '#6D1A12' },\r

  \    clock: { key: 'clock', fg: '#3E84B5', bg: '#0B5884' },\r

  \    none: { key: 'flamer', fg: 'silver', bg: 'dimgrey' },\r

  \    plus: { key: 'plus', fg: 'silver', bg: '#00000020' },\r

  \    fountain: { key: 'fountain', fg: 'silver', bg: '#00000020' },\r

  \    flag: { key: 'flying-flag', fg: 'silver', bg: '#00000020' },\r

  \    up: { key: 'arrow-up', fg: 'silver', bg: '#00000020' },\r

  \    left: { key: 'arrow-left', fg: 'silver', bg: '#00000020' },\r

  \    right: { key: 'arrow-right', fg: 'silver', bg: '#00000020' },\r

  \  },\r

  \  symNames: ['tower', 'tree', 'bulb', 'crown', 'factory', 'clock'],\r

  \  phases: [\r

  \    { key: 'init', message: 'select initial card to meld!' },\r

  \    { key: 'just_one_turn', message: 'take your first turn!' },\r

  \    { key: 'two_turns', message: 'take your turn!' },\r

  \  ],\r

  \  special_achievements: {\r

  \    MONUMENT: \"Claim immediately if you tuck six cards or score six cards
  during a single turn (May also be claimed via Masonry from Age 1)\",\r

  \    EMPIRE: \"Claim immediately if you have three  or more icons of all six
  types (May also be claimed via Construction from Age 2)\",\r

  \    WORLD: \"Claim immediately if you have twelve or more clocks on your
  board (May also be claimed via Translation from Age 3)\",\r

  \    WONDER: \"Claim immediately if you have all five colors on your board,
  and each is splayed either up or right (May also be claimed via Invention from
  Age 4)\",\r

  \    UNIVERSE: \"Claim immediately if you have five top cards, and each is
  of value 8 or higher (May also be claimed via Astronomy from Age 5)\",\r

  \    LEGEND: \"Claim if you meld a city with a left arrow on a color already
  splayed left\",\r

  \    REPUTE: \"Claim if you meld a city with a right arrow on a color
  already splayed right\",\r

  \    FAME: \"Claim if you meld a city with a up arrow on a color already
  splayed up\",\r

  \    GLORY: \"Claim immediately tuck a city with a flag\",\r

  \    VICTORY: \"Claim immediately tuck a city with a fountain\",\r

  \    SUPREMACY: \"Claim immediately if you have 3 or more of one icon in 4
  different colors (May also be claimed via Novel from Age 3)\",\r

  \    DESTINY: \"Claim immediately if you have 7 or more cards in your
  forecast (May also be claimed via Barometer from Age 4)\",\r

  \    WEALTH: \"Claim immediately if you have 8 or more bonuses (May also be
  claimed via Palampore from Age 5)\",\r

  \    HERITAGE: \"Claim immediately if you have 8 or more numbers in one
  color (May also be claimed via Loom from Age 6)\",\r

  \    HISTORY: \"Claim immediately if you have 4 or more echoes in one color
  (May also be claimed via Photography from Age 7)\",\r

  \  },\r

  };"
INTERACTION: "const INTERACTION = { none: 0, selected: 1, stop: 2, saveLoad: 3, route: 4 };"
IS_MIRROR: const IS_MIRROR = false;
JUST_PERLEN_GAME: const JUST_PERLEN_GAME = true;
KSKeys: "const KSKeys = ['action', 'actionPlus', 'all', 'best25', 'best50',
  'best75', 'best100', 'emo', 'huge',\r

  \  'life', 'life50', 'lifePlus', 'nemo', 'nemo100', 'object', 'object50',
  'objectPlus'];"
LABEL_SZ: const LABEL_SZ = 40;
levelColors: "const levelColors = [LIGHTGREEN, LIGHTBLUE, YELLOW, 'orange',
  RED,\r

  \  GREEN, BLUE, PURPLE, YELLOW2, 'deepskyblue',\r

  \  'deeppink', TEAL, ORANGE, 'seagreen', FIREBRICK, OLIVE,\r

  \  '#ffd8b1', '#000075', '#a9a9a9', '#ffffff', '#000000', 'gold',
  'orangered', 'skyblue', 'pink', 'deeppink',\r

  \  'palegreen', '#e6194B'];"
LevelsML: "const LevelsML = {\r

  \  0: { NumPics: 1, NumLabels: 1, MinWordLength: 3, MaxWordLength: 3,
  NumMissingLetters: 1, MaxPosMissing: 0, MaxNumTrials: 3 },\r

  \  1: { NumPics: 1, NumLabels: 1, MinWordLength: 3, MaxWordLength: 4,
  NumMissingLetters: 1, MaxPosMissing: 0, MaxNumTrials: 3 },\r

  \  2: { NumPics: 1, NumLabels: 1, MinWordLength: 4, MaxWordLength: 5,
  NumMissingLetters: 2, MaxPosMissing: 1, MaxNumTrials: 3 },\r

  \  3: { NumPics: 1, NumLabels: 0, MinWordLength: 4, MaxWordLength: 6,
  NumMissingLetters: 1, MaxPosMissing: 0, MaxNumTrials: 3 },\r

  \  4: { NumPics: 1, NumLabels: 0, MinWordLength: 4, MaxWordLength: 7,
  NumMissingLetters: 2, MaxPosMissing: 1, MaxNumTrials: 3 },\r

  \  5: { NumPics: 1, NumLabels: 0, MinWordLength: 5, MaxWordLength: 8,
  NumMissingLetters: 1, MaxPosMissing: 1, MaxNumTrials: 3 },\r

  \  6: { NumPics: 1, NumLabels: 0, MinWordLength: 5, MaxWordLength: 9,
  NumMissingLetters: 2, MaxPosMissing: 2, MaxNumTrials: 3 },\r

  \  7: { NumPics: 1, NumLabels: 0, MinWordLength: 5, MaxWordLength: 10,
  NumMissingLetters: 3, MaxPosMissing: 4, MaxNumTrials: 3 },\r

  \  8: { NumPics: 1, NumLabels: 0, MinWordLength: 6, MaxWordLength: 11,
  NumMissingLetters: 4, MaxPosMissing: 12, MaxNumTrials: 3 },\r

  \  9: { NumPics: 1, NumLabels: 0, MinWordLength: 6, MaxWordLength: 12,
  NumMissingLetters: 5, MaxPosMissing: 12, MaxNumTrials: 3 },\r

  \  10: { NumPics: 1, NumLabels: 0, MinWordLength: 6, MaxWordLength: 12,
  NumMissingLetters: 6, MaxPosMissing: 12, MaxNumTrials: 3 },\r

  }"
LevelsSP: "const LevelsSP = {\r

  \  0: { NumPics: 1, NumLabels: 1, MinWordLength: 2, MaxWordLength: 21,
  MaxNumTrials: 3 },\r

  \  1: { NumPics: 1, NumLabels: 1, MinWordLength: 3, MaxWordLength: 21,
  MaxNumTrials: 3 },\r

  \  2: { NumPics: 1, NumLabels: 1, MinWordLength: 3, MaxWordLength: 21,
  MaxNumTrials: 3 },\r

  \  3: { NumPics: 1, NumLabels: 0, MinWordLength: 4, MaxWordLength: 21,
  MaxNumTrials: 3 },\r

  \  4: { NumPics: 1, NumLabels: 0, MinWordLength: 4, MaxWordLength: 21,
  MaxNumTrials: 3 },\r

  \  5: { NumPics: 1, NumLabels: 0, MinWordLength: 5, MaxWordLength: 21,
  MaxNumTrials: 3 },\r

  \  6: { NumPics: 1, NumLabels: 0, MinWordLength: 6, MaxWordLength: 21,
  MaxNumTrials: 3 },\r

  \  7: { NumPics: 1, NumLabels: 0, MinWordLength: 7, MaxWordLength: 21,
  MaxNumTrials: 3 },\r

  \  8: { NumPics: 1, NumLabels: 0, MinWordLength: 8, MaxWordLength: 21,
  MaxNumTrials: 3 },\r

  \  9: { NumPics: 1, NumLabels: 0, MinWordLength: 7, MaxWordLength: 21,
  MaxNumTrials: 3 },\r

  \  10: { NumPics: 1, NumLabels: 0, MinWordLength: 6, MaxWordLength: 21,
  MaxNumTrials: 3 },\r

  }"
LevelsSPA: "const LevelsSPA = {\r

  \  0: { NumPics: 1, NumLabels: 1, MinWordLength: 2, MaxWordLength: 4,
  MaxNumTrials: 1 },\r

  \  1: { NumPics: 1, NumLabels: 1, MinWordLength: 3, MaxWordLength: 5,
  MaxNumTrials: 3 },\r

  \  2: { NumPics: 1, NumLabels: 1, MinWordLength: 3, MaxWordLength: 6,
  MaxNumTrials: 3 },\r

  \  3: { NumPics: 1, NumLabels: 0, MinWordLength: 4, MaxWordLength: 7,
  MaxNumTrials: 3 },\r

  \  4: { NumPics: 1, NumLabels: 0, MinWordLength: 4, MaxWordLength: 8,
  MaxNumTrials: 3 },\r

  \  5: { NumPics: 1, NumLabels: 0, MinWordLength: 5, MaxWordLength: 9,
  MaxNumTrials: 3 },\r

  \  6: { NumPics: 1, NumLabels: 0, MinWordLength: 6, MaxWordLength: 10,
  MaxNumTrials: 3 },\r

  \  7: { NumPics: 1, NumLabels: 0, MinWordLength: 7, MaxWordLength: 11,
  MaxNumTrials: 3 },\r

  \  8: { NumPics: 1, NumLabels: 0, MinWordLength: 8, MaxWordLength: 12,
  MaxNumTrials: 3 },\r

  \  9: { NumPics: 1, NumLabels: 0, MinWordLength: 7, MaxWordLength: 13,
  MaxNumTrials: 3 },\r

  \  10: { NumPics: 1, NumLabels: 0, MinWordLength: 6, MaxWordLength: 14,
  MaxNumTrials: 1 },\r

  }"
LevelsTC: "const LevelsTC = {\r

  \  0: { NumColors: 2, NumPics: 2, NumLabels: 4, MinWordLength: 2,
  MaxWordLength: 5, MaxNumTrials: 1 },\r

  \  1: { NumColors: 2, NumPics: 3, NumLabels: 6, MinWordLength: 3,
  MaxWordLength: 6, MaxNumTrials: 1 },\r

  \  2: { NumColors: 3, NumPics: 2, NumLabels: 6, MinWordLength: 3,
  MaxWordLength: 7, MaxNumTrials: 1 },\r

  \  3: { NumColors: 3, NumPics: 3, NumLabels: 9, MinWordLength: 4,
  MaxWordLength: 7, MaxNumTrials: 1 },\r

  \  4: { NumColors: 3, NumPics: 3, NumLabels: 0, MinWordLength: 4,
  MaxWordLength: 14, MaxNumTrials: 2 },\r

  \  5: { NumColors: 2, NumPics: 2, NumLabels: 2, MinWordLength: 4,
  MaxWordLength: 8, MaxNumTrials: 1 },\r

  \  6: { NumColors: 2, NumPics: 2, NumLabels: 2, MinWordLength: 4,
  MaxWordLength: 9, MaxNumTrials: 1 },\r

  \  7: { NumColors: 2, NumPics: 2, NumLabels: 2, MinWordLength: 5,
  MaxWordLength: 10, MaxNumTrials: 2 },\r

  \  8: { NumColors: 3, NumPics: 3, NumLabels: 9, MinWordLength: 5,
  MaxWordLength: 11, MaxNumTrials: 2 },\r

  \  9: { NumColors: 3, NumPics: 3, NumLabels: 3, MinWordLength: 6,
  MaxWordLength: 12, MaxNumTrials: 2 },\r

  \  10: { NumColors: 3, NumPics: 3, NumLabels: 0, MinWordLength: 6,
  MaxWordLength: 13, MaxNumTrials: 3 },\r

  }"
LevelsTP: "const LevelsTP = {\r

  \  0: { NumPics: 2, NumLabels: 2, MinWordLength: 2, MaxWordLength: 4,
  MaxNumTrials: 1 },\r

  \  1: { NumPics: 3, NumLabels: 3, MinWordLength: 3, MaxWordLength: 5,
  MaxNumTrials: 1 },\r

  \  2: { NumPics: 2, NumLabels: 1, MinWordLength: 3, MaxWordLength: 6,
  MaxNumTrials: 1 },\r

  \  3: { NumPics: 3, NumLabels: 2, MinWordLength: 4, MaxWordLength: 7,
  MaxNumTrials: 1 },\r

  \  4: { NumPics: 2, NumLabels: 0, MinWordLength: 4, MaxWordLength: 8,
  MaxNumTrials: 1 },\r

  \  5: { NumPics: 4, NumLabels: 4, MinWordLength: 4, MaxWordLength: 9,
  MaxNumTrials: 1 },\r

  \  6: { NumPics: 3, NumLabels: 1, MinWordLength: 5, MaxWordLength: 10,
  MaxNumTrials: 2 },\r

  \  7: { NumPics: 4, NumLabels: 2, MinWordLength: 5, MaxWordLength: 11,
  MaxNumTrials: 1 },\r

  \  8: { NumPics: 5, NumLabels: 5, MinWordLength: 6, MaxWordLength: 12,
  MaxNumTrials: 1 },\r

  \  9: { NumPics: 3, NumLabels: 0, MinWordLength: 6, MaxWordLength: 13,
  MaxNumTrials: 2 },\r

  \  10: { NumPics: 4, NumLabels: 0, MinWordLength: 4, MaxWordLength: 14,
  MaxNumTrials: 2 },\r

  }"
LevelsWP: "const LevelsWP = {\r

  \  0: { NumPics: 1, NumLabels: 1, MinWordLength: 2, MaxWordLength: 3,
  MaxNumTrials: 3 },\r

  \  1: { NumPics: 1, NumLabels: 1, MinWordLength: 3, MaxWordLength: 4,
  MaxNumTrials: 3 },\r

  \  2: { NumPics: 1, NumLabels: 1, MinWordLength: 3, MaxWordLength: 5,
  MaxNumTrials: 3 },\r

  \  3: { NumPics: 1, NumLabels: 0, MinWordLength: 3, MaxWordLength: 6,
  MaxNumTrials: 3 },\r

  \  4: { NumPics: 1, NumLabels: 0, MinWordLength: 4, MaxWordLength: 7,
  MaxNumTrials: 3 },\r

  \  5: { NumPics: 1, NumLabels: 0, MinWordLength: 5, MaxWordLength: 8,
  MaxNumTrials: 3 },\r

  \  6: { NumPics: 1, NumLabels: 0, MinWordLength: 6, MaxWordLength: 9,
  MaxNumTrials: 3 },\r

  \  7: { NumPics: 1, NumLabels: 0, MinWordLength: 7, MaxWordLength: 11,
  MaxNumTrials: 3 },\r

  \  8: { NumPics: 1, NumLabels: 0, MinWordLength: 8, MaxWordLength: 12,
  MaxNumTrials: 3 },\r

  \  9: { NumPics: 1, NumLabels: 0, MinWordLength: 7, MaxWordLength: 13,
  MaxNumTrials: 3 },\r

  \  10: { NumPics: 1, NumLabels: 0, MinWordLength: 6, MaxWordLength: 14,
  MaxNumTrials: 3 },\r

  }"
LIGHTBLUE: const LIGHTBLUE = '#42d4f4';
LIGHTGREEN: const LIGHTGREEN = '#afff45'; //'#bfef45';
mainCOOL: "const mainCOOL = () => {\r

  \  const imgFile = document.getElementById(\"imgfile\");\r

  \  const image = new Image();\r

  \  const file = imgFile.files[0];\r

  \  const fileReader = new FileReader();\r

  \  fileReader.onload = () => {\r

  \    image.onload = () => {\r

  \      const canvas = document.getElementById(\"canvas\");\r

  \      canvas.width = image.width;\r

  \      canvas.height = image.height;\r

  \      const ctx = canvas.getContext(\"2d\");\r

  \      ctx.drawImage(image, 0, 0);\r

  \      const imageData = ctx.getImageData(0, 0, canvas.width,
  canvas.height);\r

  \      const rgbArray = buildRgb(imageData.data);\r

  \      const quantColors = quantization(rgbArray, 0);\r

  \      buildPalette(quantColors);\r

  \    };\r

  \    image.src = fileReader.result;\r

  \  };\r

  \  fileReader.readAsDataURL(file);\r

  };"
MARGIN_M: const MARGIN_M = '4px 10px';
MARGIN_S: const MARGIN_S = '3px 6px';
MARGIN_XS: const MARGIN_XS = '2px 4px';
MarkerId: "const MarkerId = { SUCCESS: 0, FAIL: 1 };"
MarkerText: const MarkerText = ['✔️', '❌'];
MASTERVOLUME: const MASTERVOLUME = 0.1;
MAX_CARD_HEIGHT: const MAX_CARD_HEIGHT = 100;
MAX_PLAYERS_AVAILABLE: const MAX_PLAYERS_AVAILABLE = 8;
MAX_RECURSIONS: const MAX_RECURSIONS = 200;
MAXNODES: const MAXNODES = 5;
messages: const messages = [];
messageTypes: "const messageTypes = { LEFT: 'left', RIGHT: 'right', LOGIN: 'login' };"
MIN_CARD_HEIGHT: const MIN_CARD_HEIGHT = 60;
MOUSED: const MOUSED = 15;
myDom: "const myDom = {\r

  \  points: {\r

  \    text: document.getElementById('points-text'),\r

  \    align: document.getElementById('points-align'),\r

  \    baseline: document.getElementById('points-baseline'),\r

  \    rotation: document.getElementById('points-rotation'),\r

  \    font: document.getElementById('points-font'),\r

  \    weight: document.getElementById('points-weight'),\r

  \    size: document.getElementById('points-size'),\r

  \    height: document.getElementById('points-height'),\r

  \    offsetX: document.getElementById('points-offset-x'),\r

  \    offsetY: document.getElementById('points-offset-y'),\r

  \    color: document.getElementById('points-color'),\r

  \    outline: document.getElementById('points-outline'),\r

  \    outlineWidth: document.getElementById('points-outline-width'),\r

  \    maxreso: document.getElementById('points-maxreso'),\r

  \  },\r

  \  lines: {\r

  \    text: document.getElementById('lines-text'),\r

  \    align: document.getElementById('lines-align'),\r

  \    baseline: document.getElementById('lines-baseline'),\r

  \    rotation: document.getElementById('lines-rotation'),\r

  \    font: document.getElementById('lines-font'),\r

  \    weight: document.getElementById('lines-weight'),\r

  \    placement: document.getElementById('lines-placement'),\r

  \    maxangle: document.getElementById('lines-maxangle'),\r

  \    overflow: document.getElementById('lines-overflow'),\r

  \    size: document.getElementById('lines-size'),\r

  \    height: document.getElementById('lines-height'),\r

  \    offsetX: document.getElementById('lines-offset-x'),\r

  \    offsetY: document.getElementById('lines-offset-y'),\r

  \    color: document.getElementById('lines-color'),\r

  \    outline: document.getElementById('lines-outline'),\r

  \    outlineWidth: document.getElementById('lines-outline-width'),\r

  \    maxreso: document.getElementById('lines-maxreso'),\r

  \  },\r

  \  polygons: {\r

  \    text: document.getElementById('polygons-text'),\r

  \    align: document.getElementById('polygons-align'),\r

  \    baseline: document.getElementById('polygons-baseline'),\r

  \    rotation: document.getElementById('polygons-rotation'),\r

  \    font: document.getElementById('polygons-font'),\r

  \    weight: document.getElementById('polygons-weight'),\r

  \    placement: document.getElementById('polygons-placement'),\r

  \    maxangle: document.getElementById('polygons-maxangle'),\r

  \    overflow: document.getElementById('polygons-overflow'),\r

  \    size: document.getElementById('polygons-size'),\r

  \    height: document.getElementById('polygons-height'),\r

  \    offsetX: document.getElementById('polygons-offset-x'),\r

  \    offsetY: document.getElementById('polygons-offset-y'),\r

  \    color: document.getElementById('polygons-color'),\r

  \    outline: document.getElementById('polygons-outline'),\r

  \    outlineWidth: document.getElementById('polygons-outline-width'),\r

  \    maxreso: document.getElementById('polygons-maxreso'),\r

  \  },\r

  };"
MyNames: const MyNames = ['amanda', 'angela', 'erin', 'holly', 'jan', 'karen',
  'kelly', 'pam', 'phyllis', 'andy', 'creed', 'darryl', 'david', 'dwight',
  'felix', 'gul', 'jim', 'kevin', 'luis', 'michael', 'nil', 'oscar', 'ryan',
  'stanley', 'toby', 'wolfgang'];
names: const names = ['felix', 'amanda', 'sabine', 'tom', 'taka', 'microbe',
  'dwight', 'jim', 'michael', 'pam', 'kevin', 'darryl', 'lauren', 'anuj',
  'david', 'holly'];
NATURE: "const NATURE = {\r

  \  depth: 6,\r

  \  branching: [-25, 5, 25],\r

  \  lsystems: [\r

  \    {\r

  \      axiom: 'A',\r

  \      rules: [\r

  \        { aus: 'A', wird: 'A+[+A-A]' },\r

  \      ],\r

  \      angle: 25,\r

  \      len: 500,\r

  \      dlen: .7,\r

  \      depth: 6\r

  \    },\r

  \    {\r

  \      axiom: 'F',\r

  \      rules: [\r

  \        { aus: 'F', wird: 'F[+F]F[-F]F' },\r

  \      ],\r

  \      angle: 26,\r

  \      len: 50,\r

  \    },\r

  \    {\r

  \      axiom: 'F',\r

  \      rules: [\r

  \        { aus: 'F', wird: 'F[+F]F[-F][F]' },\r

  \      ],\r

  \      angle: 20,\r

  \      len: 200,\r

  \    },\r

  \    {\r

  \      axiom: 'X',\r

  \      rules: [\r

  \        { aus: 'X', wird: 'F[+X][-X]FX' },\r

  \        { aus: 'F', wird: 'FF' },\r

  \      ],\r

  \      angle: 26,\r

  \      len: 200,\r

  \    },\r

  \    {\r

  \      axiom: 'A',\r

  \      rules: [{ aus: 'A', wird: 'AA+[+A-A-A]-[-A+A+A]' }],\r

  \      angle: 25,\r

  \    },\r

  \    {\r

  \      axiom: 'A',\r

  \      rules: [{ aus: 'F', wird: 'FF' }, { aus: 'A', wird:
  'F-[[A]+A]+F[+FA]-A' }],\r

  \      angle: 23,\r

  \    },\r

  \    {\r

  \      axiom: 'Y',\r

  \      rules: [{ aus: 'X', wird: 'X[-FFF][+FFF]FX' }, { aus: 'Y', wird:
  'YFX[+Y][-Y]' }, { aus: 'F', wird: 'X' }],\r

  \      angle: 25,\r

  \      len: 85,\r

  \    },\r

  \    {\r

  \      axiom: 'F',\r

  \      rules: [{ aus: 'F', wird: 'F[+FF][-FF]F[-F][+F]F' }],\r

  \      angle: 35,\r

  \      len: 70,\r

  \    },\r

  \    {\r

  \      axiom: 'VZFFF',\r

  \      rules: [{ aus: 'V', wird: '[+++W][---W]YV' },\r

  \      { aus: 'W', wird: '+X[-W]Z' },\r

  \      { aus: 'Y', wird: 'YZ' },\r

  \      { aus: 'F', wird: 'Y' },\r

  \      { aus: 'Z', wird: '[-FFF][+FFF]F' },\r

  \      { aus: 'X', wird: '-W[+X]Z' }],\r

  \      angle: 40,\r

  \      len: 100,\r

  \    },\r

  \    {\r

  \      axiom: 'F++F++F',\r

  \      rules: [{ aus: 'F', wird: 'F-F++F-F' }],\r

  \      angle: 60,\r

  \      len: 100,\r

  \      depth: 3,\r

  \      xstart: 3,\r

  \    },\r

  \    {\r

  \      axiom: 'F+F+F+F',\r

  \      rules: [{ aus: 'F', wird: 'FF+F+F+F+FF' }],\r

  \      angle: 90,\r

  \      len: 100,\r

  \      depth: 3,\r

  \      xstart: 6,\r

  \    },\r

  \    {\r

  \      axiom: 'F+F+F+F',\r

  \      rules: [{ aus: 'F', wird: 'F+F-F-FFF+F+F-F' }],\r

  \      angle: 90,\r

  \      len: 28,\r

  \      depth: 3,\r

  \    },\r

  \    {\r

  \      axiom: 'X',\r

  \      rules: [\r

  \        { aus: 'X', wird: '-YF+XFX+FY-' },\r

  \        { aus: 'Y', wird: '+XF-YFY-FX+' },\r

  \        { aus: 'F', wird: 'F' },\r

  \      ],\r

  \      angle: 90,\r

  \      len: 150,\r

  \      xstart: 1.3,\r

  \      depth: 4,\r

  \    },\r

  \    {\r

  \      axiom: 'X',\r

  \      rules: [{ aus: 'F', wird: 'FF' },\r

  \      { aus: 'X', wird: 'F[+X]F[-X]+X' }],\r

  \      angle: 20,\r

  \      len: 200,\r

  \    },\r

  \  ]\r

  };"
NEONORANGE: const NEONORANGE = '#ff6700';
NEONYELLOW: const NEONYELLOW = '#efff04';
NGROK: const NGROK = false; //'http://849aec381695.ngrok.io/'; // MUSS / am ende!!!
normalWalk: "const normalWalk = ({ peep, props }) => {\r

  \  const {\r

  \    startX,\r

  \    startY,\r

  \    endX\r

  \  } = props\r

  \  const xDuration = 10\r

  \  const yDuration = 0.25\r

  \  const tl = gsap.timeline()\r

  \  tl.timeScale(randomRange(0.5, 1.5))\r

  \  tl.to(peep, {\r

  \    duration: xDuration,\r

  \    x: endX,\r

  \    ease: 'none'\r

  \  }, 0)\r

  \  tl.to(peep, {\r

  \    duration: yDuration,\r

  \    repeat: xDuration / yDuration,\r

  \    yoyo: true,\r

  \    y: startY - 10\r

  \  }, 0)\r

  \  return tl\r

  }"
OLIVE: const OLIVE = '#808000';
OPS: "const OPS = {\r

  \  'first': { cmd: 'add', link: 'to', wr: '+', sp: 'plus', f: (a, b) => (a +
  b), min: 20, max: 100 },\r

  \  'plus': { cmd: 'add', link: 'to', wr: '+', sp: 'plus', f: (a, b) => (a +
  b), min: 3, max: 30 },\r

  \  'minus': { cmd: 'subtract', link: 'from', wr: '-', sp: 'minus', f: (a, b)
  => (a - b), min: 1, max: 10 },\r

  \  'div': { cmd: 'divide', link: 'by', wr: ':', sp: 'divided by', f: (a, b)
  => (a / b), min: 2, max: 10 },\r

  \  'intdiv': { cmd: 'divide', link: 'by', wr: 'div', sp: 'divided by', f:
  (a, b) => (Math.floor(a / b)), min: 1, max: 10 },\r

  \  'mult': { cmd: 'multiply', link: 'by', wr: 'x', sp: 'times', f: (a, b) =>
  (a * b), min: 2, max: 10 },\r

  \  'pow': { cmd: 'build', link: 'to the power of', wr: '^', sp: 'to the
  power of', f: (a, b) => (Math.pow(a, b)), min: 0, max: 20 },\r

  \  'mod': { cmd: 'build', link: 'modulo', wr: '%', sp: 'modulo', f: (a, b)
  => (a % b), min: 0, max: 20 },\r

  \  'l': { cmd: 'true or false?', link: 'less than', wr: '<', sp: 'less
  than', f: (a, b) => (a < b) },\r

  \  'g': { cmd: 'true or false?', link: 'greater than', wr: '>', sp: 'greater
  than', f: (a, b) => (a > b) },\r

  \  'leq': { cmd: 'true or false?', link: 'less or equal', wr: '<=', sp:
  'less or equal', f: (a, b) => (a <= b) },\r

  \  'geq': { cmd: 'true or false?', link: 'greater or equal', wr: '>=', sp:
  'greater or equal', f: (a, b) => (a >= b) },\r

  \  'eq': { cmd: 'true or false?', link: 'equal', wr: '=', sp: 'equal', f:
  (a, b) => (a == b) },\r

  \  'neq': { cmd: 'true or false?', link: 'unequal', wr: '#', sp: 'unequal',
  f: (a, b) => (a != b) },\r

  \  'and': { cmd: 'true or false?', link: 'and', wr: '&&', sp: 'and', f: (a,
  b) => (a && b) },\r

  \  'or': { cmd: 'true or false?', link: 'or', wr: '||', sp: 'or', f: (a, b)
  => (a || b) },\r

  \  'nand': { cmd: 'true or false?', link: 'nand', wr: 'nand', sp: 'nand', f:
  (a, b) => (!(a && b)) },\r

  \  'nor': { cmd: 'true or false?', link: 'nor', wr: 'nor', sp: 'nor', f: (a,
  b) => (!(a || b)) },\r

  \  'xor': { cmd: 'true or false?', link: 'xor', wr: 'xor', sp: 'xor', f: (a,
  b) => (a && !b || !a && b) },\r

  }"
ORANGE: const ORANGE = '#f58231';
orderByLuminance: "const orderByLuminance = (rgbValues) => {\r

  \  const calculateLuminance = (p) => {\r

  \    return 0.2126 * p.r + 0.7152 * p.g + 0.0722 * p.b;\r

  \  };\r

  \  return rgbValues.sort((p1, p2) => {\r

  \    return calculateLuminance(p2) - calculateLuminance(p1);\r

  \  });\r

  };"
overwriteMerge: const overwriteMerge = (destinationArray, sourceArray, options) => sourceArray
PARAMCSS: "const PARAMCSS = {\r

  \  bg: 'background-color',\r

  \  fg: 'color',\r

  \  align: 'text-align',\r

  \  rounding: 'border-radius',\r

  };"
PARAMRSG_T: "const PARAMRSG_T = {\r

  \  defaultType: false,\r

  \  show: false,\r

  \  overlap: true,\r

  \  orientation: true,\r

  \  split: true,\r

  \  shape: true,\r

  \  field_spacing: true,\r

  \  size: true,\r

  \  rounding: true,\r

  };"
PERLEN_DATA_PATH: const PERLEN_DATA_PATH = './public/PERLENDATA/';
PERLENPATH_FRONT: const PERLENPATH_FRONT = './PERLENDATA/';
Perlin: "const Perlin = {\r

  \  PERLIN_YWRAPB: 4,\r

  \  PERLIN_YWRAP: 1 << 4,\r

  \  PERLIN_ZWRAPB: 8,\r

  \  PERLIN_ZWRAP: 1 << 8,\r

  \  PERLIN_SIZE: 4095,\r

  \  perlin_octaves: 4,\r

  \  perlin_amp_falloff: 0.5,\r

  \  scaled_cosine: i => 0.5 * (1.0 - Math.cos(i * Math.PI)),\r

  \  perlin: null,\r

  \  lastx: 0,\r

  \  speed: 0.02,\r

  \  channels: {},\r

  }"
PLAYER_CONFIG_FOR_MULTIPLAYER: const PLAYER_CONFIG_FOR_MULTIPLAYER = ['me', 'human', 'human'];
playerColors: "const playerColors = {\r

  \  red: '#D01013',\r

  \  blue: '#003399',\r

  \  green: '#58A813',\r

  \  orange: '#FF6600',\r

  \  yellow: '#FAD302',\r

  \  violet: '#55038C',\r

  \  pink: '#ED527A',\r

  \  beige: '#D99559',\r

  \  sky: '#049DD9',\r

  \  brown: '#A65F46',\r

  \  white: '#FFFFFF',\r

  };"
PlayerColors: "const PlayerColors = {\r

  \  red: '#D01013',\r

  \  blue: '#003399',\r

  \  green: '#58A813',\r

  \  orange: '#FF6600',\r

  \  yellow: '#FAD302',\r

  \  violet: '#55038C',\r

  \  pink: '#ED527A',\r

  \  beige: '#D99559',\r

  \  sky: '#049DD9',\r

  \  brown: '#A65F46',\r

  \  white: '#FFFFFF',\r

  \  lightblue: '#42d4f4',\r

  \  lightgreen: '#afff45',\r

  };"
PURPLE: const PURPLE = '#911eb4';
quantization: "const quantization = (rgbValues, depth) => {\r

  \  const MAX_DEPTH = 4;\r

  \  if (depth === MAX_DEPTH || rgbValues.length === 0) {\r

  \    const color = rgbValues.reduce(\r

  \      (prev, curr) => {\r

  \        prev.r += curr.r;\r

  \        prev.g += curr.g;\r

  \        prev.b += curr.b;\r

  \        return prev;\r

  \      },\r

  \      {\r

  \        r: 0,\r

  \        g: 0,\r

  \        b: 0,\r

  \      }\r

  \    );\r

  \    color.r = Math.round(color.r / rgbValues.length);\r

  \    color.g = Math.round(color.g / rgbValues.length);\r

  \    color.b = Math.round(color.b / rgbValues.length);\r

  \    return [color];\r

  \  }\r

  \  const componentToSortBy = findBiggestColorRange(rgbValues);\r

  \  rgbValues.sort((p1, p2) => {\r

  \    return p1[componentToSortBy] - p2[componentToSortBy];\r

  \  });\r

  \  const mid = rgbValues.length / 2;\r

  \  return [\r

  \    ...quantization(rgbValues.slice(0, mid), depth + 1),\r

  \    ...quantization(rgbValues.slice(mid + 1), depth + 1),\r

  \  ];\r

  };"
randomIndex: const randomIndex = (array) => randomRange(0, array.length) | 0
randomRange: const randomRange = (min, max) => min + Math.random() * (max - min)
RCONTAINERPROP: "const RCONTAINERPROP = {\r

  \  list: 'elm',\r

  \  hand: 'elm',\r

  \  panel: 'sub',\r

  }"
RCREATE: "const RCREATE = {\r

  \  card52: mCard52,\r

  \  card: mCard,\r

  \  hand: mHand,\r

  \  grid: mGrid,\r

  \  info: mInfo,\r

  \  invisible: mInvisible,\r

  \  panel: mPanel,\r

  \  picto: mPicto,\r

  \  manual00: mManual00,\r

  }"
RED: const RED = '#e6194B';
removeFromArray: const removeFromArray = (array, i) => array.splice(i, 1)[0]
removeItemFromArray: const removeItemFromArray = (array, item) =>
  removeFromArray(array, array.indexOf(item))
removeRandomFromArray: const removeRandomFromArray = (array) =>
  removeFromArray(array, randomIndex(array))
resetPeep: "const resetPeep = ({ stage, peep }) => {\r

  \  const direction = Math.random() > 0.5 ? 1 : -1\r

  \  const offsetY = 100 - 250 * gsap.parseEase('power2.in')(Math.random())\r

  \  const startY = stage.height - peep.height + offsetY\r

  \  let startX\r

  \  let endX\r

  \  if (direction === 1) {\r

  \    startX = -peep.width\r

  \    endX = stage.width\r

  \    peep.scaleX = 1\r

  \  } else {\r

  \    startX = stage.width + peep.width\r

  \    endX = 0\r

  \    peep.scaleX = -1\r

  \  }\r

  \  peep.x = startX\r

  \  peep.y = startY\r

  \  peep.anchorY = startY\r

  \  return {\r

  \    startX,\r

  \    startY,\r

  \    endX\r

  \  }\r

  }"
rgbToHexCOOL: "const rgbToHexCOOL = (pixel) => {\r

  \  const componentToHex = (c) => {\r

  \    const hex = c.toString(16);\r

  \    return hex.length == 1 ? \"0\" + hex : hex;\r

  \  };\r

  \  return (\r

  \    \"#\" +\r

  \    componentToHex(pixel.r) +\r

  \    componentToHex(pixel.g) +\r

  \    componentToHex(pixel.b)\r

  \  ).toUpperCase();\r

  };"
RSGTYPES: "const RSGTYPES = { board: 1, hand: 2, field: 101, edge: 102, corner: 103 };"
RUNTEST: const RUNTEST = false;
RUPDATE: "const RUPDATE = {\r

  \  info: mNodeChangeContent,\r

  };"
SEND_MOUSE_MOVE_EVERY: const SEND_MOUSE_MOVE_EVERY = 200;
SERVER_URL: "const SERVER_URL = IS_MIRROR ? 'http://localhost:5555/' : FLASK ?
  (NGROK ? NGROK : 'http://localhost:' + PORT + '/') :
  'http://localhost:5005/';"
SERVERDATA_VERSION: const SERVERDATA_VERSION = 1;
SHERIFF: "const SHERIFF = {\r

  \  color: {\r

  \    legal: GREEN, //'lime',\r

  \    contraband: 'crimson',\r

  \    royal: 'orangered'\r

  \  },\r

  \  cards: {\r

  \    apples: { ksym: 'green apple', kcenter: 'red apple', label: 'apple',
  type: 'legal', value: 2, penalty: 2 },\r

  \    cheese: { ksym: 'cheese wedge', kcenter: 'cheese wedge', label:
  'cheese', type: 'legal', value: 3, penalty: 2 },\r

  \    pineapple: { ksym: 'pineapple', kcenter: 'pineapple', label:
  'pineapple', type: 'legal', value: 4, penalty: 2 },\r

  \    chicken: { ksym: 'poultry leg', kcenter: 'poultry leg', label:
  'chicken', type: 'legal', value: 4, penalty: 2 },\r

  \    bread: { ksym: 'bread', kcenter: 'bread', label: 'bread', type:
  'legal', value: 3, penalty: 2 },\r

  \    pepper: { ksym: 'hot pepper', kcenter: 'hot pepper', label: 'pepper',
  type: 'contraband', value: 6, penalty: 4 },\r

  \    mead: { ksym: 'beer mug', kcenter: 'beer mug', label: 'mead', type:
  'contraband', value: 7, penalty: 4 },\r

  \    silk: { ksym: 'sari', kcenter: 'kimono', label: 'silk', type:
  'contraband', value: 8, penalty: 4 },\r

  \    crossbow: { ksym: 'crossbow', kcenter: 'crossbow', label: 'crossbow',
  type: 'contraband', value: 9, penalty: 4 },\r

  \    chestnut: { ksym: 'chestnut', kcenter: 'chestnut', label: 'chestnut',
  type: 'royal', value: 4, penalty: 3 },\r

  \    pear: { ksym: 'pear', kcenter: 'pear', label: 'pear', type: 'royal',
  value: 6, penalty: 4 },\r

  \    pie: { ksym: 'pie', kcenter: 'pie', label: 'pie', type: 'royal', value:
  6, penalty: 4 },\r

  \    squid: { ksym: 'squid', kcenter: 'squid', label: 'squid', type:
  'royal', value: 9, penalty: 5 },\r

  \    shortcake: { ksym: 'shortcake', kcenter: 'shortcake', label:
  'shortcake', type: 'royal', value: 9, penalty: 5 },\r

  \    grapes: { ksym: 'grapes', kcenter: 'grapes', label: 'grapes', type:
  'royal', value: 9, penalty: 5 },\r

  \    pretzel: { ksym: 'pretzel', kcenter: 'pretzel', label: 'pretzel', type:
  'royal', value: 9, penalty: 5 },\r

  \    baguette: { ksym: 'baguette bread', kcenter: 'baguette bread', label:
  'bread', type: 'royal', value: 6, penalty: 4 },\r

  \    cherries: { ksym: 'cherries', kcenter: 'cherries', label: 'cherries',
  type: 'royal', value: 8, penalty: 4 },\r

  \  },\r

  \  cardtypes: {\r

  \    legal: ['apples', 'cheese', 'pineapple', 'bread'],\r

  \    contraband: ['pepper', 'mead', 'silk', 'crossbow'],\r

  \    royal: ['chestnut', 'pear', 'pie', 'shortcake', 'pretzel', 'grapes',
  'baguette', 'cherries']\r

  \  },\r

  \  stage: {\r

  \    1: 'exchange',\r

  \  }\r

  }"
SHOW_CODE: const SHOW_CODE = false;
SHOW_CODE_DATA: const SHOW_CODE_DATA = false;
SHOW_DEFS: const SHOW_DEFS = false;
SHOW_FREEZER: const SHOW_FREEZER = false;
SHOW_SERVER_RETURN: const SHOW_SERVER_RETURN = false;
SHOW_SERVER_ROUTE: const SHOW_SERVER_ROUTE = false;
SHOW_SERVERDATA: const SHOW_SERVERDATA = false;
SHOW_TRACE: const SHOW_TRACE = false;
SIMPLE_COLORS: const SIMPLE_COLORS = ['red', 'green', 'yellow', 'blue'];
sleep: const sleep = m => new Promise(r => setTimeout(r, m))
soloTypes: const soloTypes = ['me', 'AI regular', 'AI random', 'AI pass'];
stage: "const stage = {\r

  \  width: 0,\r

  \  height: 0,\r

  }"
STARTING_TAB_OPEN: const STARTING_TAB_OPEN = 'bPlayers';
STYLE_PARAMS: "const STYLE_PARAMS = {\r

  \  align: 'text-align',\r

  \  acontent: 'align-content',\r

  \  aitems: 'align-items',\r

  \  aspectRatio: 'aspect-ratio',\r

  \  bg: 'background-color',\r

  \  dir: 'flex-direction',\r

  \  fg: 'color',\r

  \  hgap: 'column-gap',\r

  \  vgap: 'row-gap',\r

  \  jcontent: 'justify-content',\r

  \  jitems: 'justify-items',\r

  \  justify: 'justify-content',\r

  \  matop: 'margin-top',\r

  \  maleft: 'margin-left',\r

  \  mabottom: 'margin-bottom',\r

  \  maright: 'margin-right',\r

  \  origin: 'transform-origin',\r

  \  overx: 'overflow-x',\r

  \  overy: 'overflow-y',\r

  \  patop: 'padding-top',\r

  \  paleft: 'padding-left',\r

  \  pabottom: 'padding-bottom',\r

  \  paright: 'padding-right',\r

  \  place: 'place-items',\r

  \  rounding: 'border-radius',\r

  \  w: 'width',\r

  \  h: 'height',\r

  \  wmin: 'min-width',\r

  \  hmin: 'min-height',\r

  \  hline: 'line-height',\r

  \  wmax: 'max-width',\r

  \  hmax: 'max-height',\r

  \  fontSize: 'font-size',\r

  \  fz: 'font-size',\r

  \  family: 'font-family',\r

  \  weight: 'font-weight',\r

  \  x: 'left',\r

  \  y: 'top',\r

  \  z: 'z-index'\r

  };"
TEAL: const TEAL = '#469990';
TEST_PATH: const TEST_PATH = '/zdata/';
TEST_VERSION: const TEST_VERSION = '17';
THEMES: const THEMES = ['#c9af98', '#2F4F4F', '#6B7A8F', '#00303F', 'rgb(3, 74,
  166)', '#458766', '#7A9D96'];
TIMIT_SHOW: const TIMIT_SHOW = false;
uiHaltedMask: const uiHaltedMask = 1 << 0;
UITEST: const UITEST = false;
UnicodeSymbols: "const UnicodeSymbols = {\r

  \  menu: '☰',\r

  };"
USE_ALL_GAMES_ROUTE: const USE_ALL_GAMES_ROUTE = false;
USE_BACKEND_AI: const USE_BACKEND_AI = true;
USE_MAX_PLAYER_NUM: const USE_MAX_PLAYER_NUM = false;
USE_NON_TESTING_DATA: const USE_NON_TESTING_DATA = true;
USE_OLD_GRID_FUNCTIONS: const USE_OLD_GRID_FUNCTIONS = false;
USE_SOCKETIO: const USE_SOCKETIO = false;
USER_SERVERDATA_STUB: const USER_SERVERDATA_STUB = false;
USERNAME_SELECTION: const USERNAME_SELECTION = 'random';
USPEC_VERSION: const USPEC_VERSION = '2a';
VERBOSE: const VERBOSE = true;
VerboseSocket: const VerboseSocket = false;
voiceNames: "const voiceNames = {\r

  \  david: 'Microsoft David Desktop - English',\r

  \  zira: 'Microsoft Zira Desktop - English',\r

  \  us: 'Google US English',\r

  \  ukFemale: 'Google UK English Female',\r

  \  ukMale: 'Google UK English Male',\r

  \  deutsch: 'Google Deutsch',\r

  };"
walks: "const walks = [\r\n  normalWalk,\r\n]"
wamber: const wamber = '#ffc107';
waqua: const waqua = '#00ffff';
wblack: const wblack = '#000000';
wblue: const wblue = '#2196f3';
wbluegray: const wbluegray = '#607d8b';
wbluegrey: const wbluegrey = '#607d8b';
wbrown: const wbrown = '#795548';
wcyan: const wcyan = '#00bcd4';
wdarkgrey: const wdarkgrey = '#616161';
wdeeporange: const wdeeporange = '#ff5722';
wdeeppurple: const wdeeppurple = '#673ab7';
wgreen: const wgreen = '#4caf50';
wgrey: const wgrey = '#9e9e9e';
windigo: const windigo = '#3f51b5';
wkhaki: const wkhaki = '#f0e68c';
wlight: const wlight = '#f1f1f1';
wlightblue: const wlightblue = '#87ceeb';
wlightgreen: const wlightgreen = '#8bc34a';
wlime: const wlime = '#cddc39';
worange: const worange = '#ff9800';
wpaleblue: const wpaleblue = '#ddffff';
wpalegreen: const wpalegreen = '#ddffdd';
wpalered: const wpalered = '#ffdddd';
wpaleyellow: const wpaleyellow = '#ffffcc';
wpink: const wpink = '#e91e63';
wpurple: const wpurple = '#9c27b0';
wred: const wred = '#f44336';
wsand: const wsand = '#fdf5e6';
wteal: const wteal = '#009688';
wwhite: const wwhite = '#ffffff';
wyellow: const wyellow = '#ffeb3b';
YELLOW: const YELLOW = '#ffe119';
YELLOW2: const YELLOW2 = '#fff620';
YELLOW3: const YELLOW3 = '#ffed01';
_grid: "class _grid {\r

  \  constructor(o, pool, boardInfo, fieldInfo) {\r

  \    this.boardInfo = boardInfo;\r

  \    this.fieldInfo = fieldInfo;\r

  \    let { board, fields, corners, edges } = this.skeleton =
  this.gridSkeleton(o, pool, this.boardInfo, this.fieldInfo);\r

  \    board.oid = o.oid;\r

  \  }\r

  \  gridSkeleton(omap, pool, gridInfoFunc, fieldInfoFunc) {\r

  \    let board = { o: omap, info: gridInfoFunc(omap.rows, omap.cols) };\r

  \    let fields = {};\r

  \    for (const fid of getElements(omap.fields)) {\r

  \      let o = pool[fid];\r

  \      fields[fid] = { oid: fid, o: pool[fid], info:
  fieldInfoFunc(board.info, o.row, o.col) };\r

  \    }\r

  \    board.info.vertices = correctPolys(Object.values(fields).map(x =>
  x.info.poly), 1);\r

  \    let dhelp = {};\r

  \    let corners = {};\r

  \    for (const fid in fields) {\r

  \      let f = fields[fid];\r

  \      let i = 0;\r

  \      for (const cid of getElements(f.o.corners)) {\r

  \        if (cid && nundef(dhelp[cid])) {\r

  \          let pt = f.info.poly[i];\r

  \          corners[cid] = { oid: cid, o: pool[cid], info: { shape: 'circle',
  memType: 'corner', x: pt.x, y: pt.y, w: 1, h: 1 } };\r

  \          dhelp[cid] = true;\r

  \        }\r

  \        i += 1;\r

  \      }\r

  \    }\r

  \    dhelp = {};\r

  \    let edges = {};\r

  \    for (const fid in fields) {\r

  \      let f = fields[fid];\r

  \      for (const eid of getElements(f.o.edges)) {\r

  \        if (eid && nundef(dhelp[eid])) {\r

  \          let el = pool[eid];\r

  \          let n1 = corners[el.corners[0]._obj];\r

  \          let n2 = corners[el.corners[1]._obj];\r

  \          let [x1, y1, x2, y2] = [n1.info.x, n1.info.y, n2.info.x,
  n2.info.y];\r

  \          edges[eid] = { oid: eid, o: el, info: { shape: 'line', memType:
  'edge', x1: x1, y1: y1, x2: x2, y2: y2, x: (x1 + x2) / 2, y: (y1 + y2) / 2,
  thickness: 1, w: 1, h: 1 } };\r

  \          dhelp[eid] = true;\r

  \        }\r

  \      }\r

  \    }\r

  \    return { board: board, fields: fields, corners: corners, edges: edges
  };\r

  \  }\r

  }"
ABattle: "class ABattle {\r

  \  constructor(assets, loc, b, stage) {\r

  \    this.assets = assets;\r

  \    this.location = loc;\r

  \    this.b = b;\r

  \    this.stage = stage;\r

  \    this.roundCounter = 0;\r

  \    this.factions = [b.attacker, b.defender];\r

  \    this.allUnitTypes = Array.from(new Set(b.fire_order.map(x =>
  x.unit.type)));\r

  \    this.ms = {};\r

  \    this.selected = false;\r

  \    this.msFire = null;\r

  \    this.nColsPerFaction = this.calcMaxUnitTypePerFaction();\r

  \    let hTitle = 25 * 2;\r

  \    let usz = assets.SZ.cadreDetail;\r

  \    let hGap = 4;\r

  \    let hRow = usz + hGap;\r

  \    let hTotal = hRow * this.allUnitTypes.length + hTitle + 2 * hGap;\r

  \    if (b.isSeaBattle) {\r

  \      hTotal += 30;\r

  \    }\r

  \    let wGap = hGap;\r

  \    let wFactionGap = 10 * hGap;\r

  \    let wCol = usz + wGap;\r

  \    let wColTotal = Object.values(this.nColsPerFaction).reduce((a, b) => a
  + b, 0);\r

  \    let wColsPerFaction = {};\r

  \    let xStartPerFaction = {};\r

  \    let xAkku = wGap;\r

  \    for (const f of this.factions) {\r

  \      wColsPerFaction[f] = this.nColsPerFaction[f] * wCol;\r

  \      xStartPerFaction[f] = xAkku;\r

  \      xAkku += wColsPerFaction[f] + wFactionGap;\r

  \    }\r

  \    let yStartPerUnitType = {};\r

  \    let yAkku = hGap + 25;\r

  \    for (const t of this.allUnitTypes) {\r

  \      yStartPerUnitType[t] = yAkku;\r

  \      yAkku += hRow;\r

  \    }\r

  \    this.xStartPerFaction = xStartPerFaction;\r

  \    this.yStartPerUnitType = yStartPerUnitType;\r

  \    this.wColsPerFaction = wColsPerFaction;\r

  \    let wTotal = wGap + wColTotal * wCol + wFactionGap *
  this.factions.length + wGap;\r

  \    this.size = { w: wTotal, h: hTotal };\r

  \    this.unitSize = { w: wCol, h: hRow };\r

  \    this.gap = { w: wGap, h: hGap, col: wFactionGap };\r

  \  }\r

  \  highlightBattleGroups(b) {\r

  \    let units = b.fire_order;\r

  \    let battleGroups = b.battle_groups;\r

  \    for (const u of units) {\r

  \      let bgIndex = battleGroups.indexOf(u.battle_group);\r

  \      if (bgIndex >= 0) {\r

  \        let c = getpal(2, 0, 'b', this.battleGroupPalette);\r

  \        let ms = this.ms[u.id];\r

  \        ms.selKeyColor(c, 'bg' + bgIndex, 0.2);\r

  \      }\r

  \    }\r

  \  }\r

  \  coverBattleGroup(bg, b) {\r

  \    for (const u of b.fire_order) {\r

  \      if (u.battle_group == bg) {\r

  \        let ms = this.ms[u.id];\r

  \        let sz = this.assets.SZ.cadreDetail;\r

  \        ms.cover('grey');\r

  \      }\r

  \    }\r

  \  }\r

  \  uncoverBattleGroup(bg, b) {\r

  \    for (const u of b.fire_order) {\r

  \      if (u.battle_group == b.battle_group) {\r

  \        let ms = this.ms[u.id];\r

  \        ms.uncover();\r

  \      }\r

  \    }\r

  \  }\r

  \  selectBattle() {\r

  \    this.battleDiv.style.border = '4px solid yellow';\r

  \  }\r

  \  unselectBattle() {\r

  \    this.battleDiv.style.border = '1px solid ' + getpal(6);\r

  \  }\r

  \  selectFireUnit() {\r

  \    if (this.msFire) this.msFire.unhighlight();\r

  \    this.msFire = this.ms[this.b.fire.id];\r

  \    this.msFire.highlight();\r

  \  }\r

  \  unhighlightUnits() {\r

  \    for (const id in this.ms) {\r

  \      let ms = this.ms[id];\r

  \      if (ms.getTag('dead') || ms.getTag('removed')) continue;\r

  \      ms.unhighlight();\r

  \      ms.unselKeyColor();\r

  \    }\r

  \  }\r

  \  highlightANS(pl) {\r

  \    for (const id in this.ms) {\r

  \      let ms = this.ms[id];\r

  \      let type = ms.getTag('type');\r

  \      let owner = ms.getTag('owner');\r

  \      if (owner == pl && isANS(type)) {\r

  \        if (!ms.getTag('dead') && !ms.getTag('removed')) {\r

  \          ms.highlight();\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  highlightTargetClass() {\r

  \    for (const u of this.b.target_units) {\r

  \      let ms = this.ms[u.id];\r

  \      ms.highlight();\r

  \    }\r

  \  }\r

  \  unhighlightTargetClass() {\r

  \    for (const u of this.b.target_units) {\r

  \      let ms = this.ms[u.id];\r

  \      ms.unhighlight();\r

  \    }\r

  \  }\r

  \  markMandatoryRebased(b_old, b) {\r

  \    for (const u of b_old.fire_order) {\r

  \      let id = u.id;\r

  \      let unitInB = firstCond(b.fire_order, x => x.id == id);\r

  \      if (!unitInB) {\r

  \        this.markAsRetreated(id);\r

  \      }\r

  \    }\r

  \  }\r

  \  markAsRetreated(id) {\r

  \    let ms = this.ms[id];\r

  \    ms.unhighlight();\r

  \    ms.selKeyColor('darkSlateGrey', 'retreated', 0.7);\r

  \    ms.tag('removed', true);\r

  \  }\r

  \  selectTheDead(b_old, b_new) {\r

  \    let degraded = '';\r

  \    let removed = '';\r

  \    let message = '';\r

  \    for (const u of b_old.fire_order) {\r

  \      let id = u.id;\r

  \      let ms = this.ms[id];\r

  \      let uNew = firstCond(b_new.fire_order, x => x.id == id);\r

  \      if (uNew) {\r

  \        let cv_old = u.unit.cv;\r

  \        let cv_new = uNew.unit.cv;\r

  \        if (cv_old != cv_new) {\r

  \          this.updateCv(ms, cv_new);\r

  \          degraded += ' ' + id.toString();\r

  \        }\r

  \      } else {\r

  \        this.updateCv(ms, 0);\r

  \        ms.selColor('black', 0.8);\r

  \        ms.tag('dead', true);\r

  \        removed += ' ' + id.toString();\r

  \      }\r

  \    }\r

  \    if (!empty(degraded)) message += degraded + ' degraded. ';\r

  \    if (!empty(removed)) message += removed + ' removed. ';\r

  \    message += 'Please accept!';\r

  \    return message;\r

  \  }\r

  \  selectUnitsHit(b) {\r

  \    for (const u of b.units_hit) {\r

  \      let id = u.id;\r

  \      let ms = this.ms[id];\r

  \      ms.selKeyColor('red');\r

  \    }\r

  \  }\r

  \  startDiceAnimation(fire) {\r

  \    this.fire = fire;\r

  \    let dDice = fire.owner == this.b.attacker ? this.attackerDiceDiv :
  this.defenderDiceDiv;\r

  \    this.diceRolling = true;\r

  \    dDice.classList.add('pulseOn');\r

  \  }\r

  \  stopDiceAnimation(fire) {\r

  \    let dDice = fire.owner == this.b.attacker ? this.attackerDiceDiv :
  this.defenderDiceDiv;\r

  \    dDice.classList.remove('pulseOn');\r

  \    this.diceRolling = false;\r

  \  }\r

  \  showHits(hits) {\r

  \    let dDice = this.b.fire.owner == this.b.attacker ? this.attackerDiceDiv
  : this.defenderDiceDiv;\r

  \    let html = dDice.innerHTML;\r

  \    dDice.innerHTML = html + '<br>' + hits;\r

  \    divscrolldown(dDice.id);\r

  \  }\r

  \  createUnit(u, id, gName, type, nationality) {\r

  \    let owner = getUnitOwner(nationality);\r

  \    let imagePath = '/a/assets/images/' + type + '.svg';\r

  \    let isMinorColor = !(nationality in this.assets.troopColors);\r

  \    let color = isMinorColor ? this.assets.troopColors['Minor'] :
  this.assets.troopColors[nationality];\r

  \    let darker = darkerColor(color[0], color[1], color[2]);\r

  \    if (this.b.isSeaBattle) {\r

  \      let bgroup = u.battle_group;\r

  \      if (bgroup) {\r

  \        let ibg = this.battleGroups.indexOf(bgroup);\r

  \        darker = getpal(ibg, 0, 'b', this.battleGroupPalette);\r

  \      }\r

  \    }\r

  \    let sz = this.assets.SZ.cadreDetail;\r

  \    let sz80 = sz * 0.86;\r

  \    let szImage = sz / 1.5;\r

  \    let y = szImage / 6;\r

  \    let ms = new MS(id, gName)\r

  \      .roundedRect({ className: 'ground', w: sz, h: sz, fill: color,
  rounding: sz * 0.1 })\r

  \      .roundedRect({ w: sz80, h: sz80, fill: darker, rounding: sz * 0.1
  })\r

  \      .image({ path: imagePath, y: y, w: szImage, h: szImage })\r

  \      .roundedRect({ className: 'unit overlay', w: sz, h: sz, fill: darker,
  rounding: sz * 0.1 });\r

  \    ms.tag('type', type);\r

  \    ms.tag('owner', owner);\r

  \    ms.tag('nationality', nationality);\r

  \    return ms;\r

  \  }\r

  \  calcMaxUnitTypePerFaction() {\r

  \    let unitTypeCountPerFaction = {};\r

  \    let byTypeAndFaction = new CounterClass(this.b.fire_order, x =>
  x.unit.type + '_' + x.owner);\r

  \    for (let g of cartesian(this.allUnitTypes, this.factions)) {\r

  \      let type = stringBefore(g, '_');\r

  \      let faction = stringAfter(g, '_');\r

  \      if (!(faction in unitTypeCountPerFaction))
  unitTypeCountPerFaction[faction] = {};\r

  \      let count = byTypeAndFaction.get(g);\r

  \      unitTypeCountPerFaction[faction][type] = count ? count : 0;\r

  \    }\r

  \    let nColsPerFaction = {};\r

  \    for (const f of this.factions) {\r

  \      nColsPerFaction[f] =
  getItemWithMaxValue(unitTypeCountPerFaction[f])[1];\r

  \    }\r

  \    return nColsPerFaction;\r

  \  }\r

  \  mirror_units(data, H) {\r

  \    unitTestMirrorBattle('new data:', data);\r

  \    unitTestMirrorBattle('H:', H);\r

  \    for (const u of data.battle.fire_order) {\r

  \      let o = H.objects[u.id];\r

  \      if (u.unit.cv != o.cv) {\r

  \        this.updateCv(this.ms[u.id], o.cv);\r

  \      }\r

  \    }\r

  \    if ('dead' in data.battle) {\r

  \      for (const u of data.battle.dead) {\r

  \        if (u.id in H.objects) {\r

  \          unitTestMirrorBattle('H still contains dead unit', u.id);\r

  \        } else {\r

  \          unitTestMirrorBattle('dead unit', u.id, 'has been removed from
  H');\r

  \          if (u.id in this.ms) {\r

  \            let ms = this.ms[u.id];\r

  \            if (!ms.getTag('dead')) {\r

  \              this.updateCv(ms, 0);\r

  \              ms.unhighlight();\r

  \              ms.select();\r

  \              ms.tag('dead', true);\r

  \            } else {\r

  \              unitTestMirrorBattle('unit', u.id, 'has already been marked
  dead!!!');\r

  \            }\r

  \          } else {\r

  \            unitTestMirrorBattle('ERROR!!! dead unit', u.id, 'not in
  ms!!!!');\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  populate(dBattleOuter, gid, bg, fg) {\r

  \    let dBattleLeft = addDivClass(dBattleOuter, 'dBattleLeft',
  'battleLeft');\r

  \    let dBattleRight = addDivClass(dBattleOuter, 'dBattleRight',
  'battleRight');\r

  \    let dBattleMiddle = addDivClass(dBattleOuter, 'dBattleMiddle',
  'battleMiddle');\r

  \    let dBattleTitle = addDivClass(dBattleMiddle, 'dBattleTitle',
  'battleTitle');\r

  \    dBattleTitle.innerHTML = this.location;\r

  \    let dBattleFactions = addDivClass(dBattleMiddle, 'dBattleFactions',
  'battleFactions');\r

  \    dBattleFactions.style.width = this.size.w + 'px';\r

  \    let topBottom = 25 + this.b.isSeaBattle ? 30 : 0;\r

  \    dBattleFactions.style.height = this.size.h - topBottom + 'px';\r

  \    let g1 = addSvgg(dBattleFactions, gid);\r

  \    if (this.b.isSeaBattle) {\r

  \      this.battleGroups = this.b.battle_groups;\r

  \      let dBattleGroups = addDivClass(dBattleMiddle, 'dBattleGroups',
  'battleGroups');\r

  \      let n = this.battleGroups.length;\r

  \      this.battleGroupPalette =
  paletteFromRGBArray(assets.troopColors[this.b.attacker]);\r

  \      for (const gr of this.battleGroups) {\r

  \        let i = this.battleGroups.indexOf(gr);\r

  \        let bg = getpal(i, 0, 'b', this.battleGroupPalette);\r

  \        let fg = getpal(i, 0, 'f', this.battleGroupPalette);\r

  \        let sp = addSpanColor(dBattleGroups, 'sp' + gr, bg, fg);\r

  \        sp.innerHTML = gr;\r

  \      }\r

  \    }\r

  \    this.gid = gid;\r

  \    this.battleDiv = dBattleOuter;\r

  \    this.attackerDiceDiv = dBattleLeft;\r

  \    this.defenderDiceDiv = dBattleRight;\r

  \    let i = 0;\r

  \    for (const f of this.factions) {\r

  \      let id = 't' + i;\r

  \      i += 1;\r

  \      let x = this.xStartPerFaction[f] + this.wColsPerFaction[f] / 2;\r

  \      let msTitle = new MS(id, gid)\r

  \        .text({ txt: f, fill: fg })\r

  \        .setPos(x, 15)\r

  \        .draw();\r

  \    }\r

  \    let xStart = this.gap.w;\r

  \    let yStart = this.gap.h;\r

  \    let x = xStart;\r

  \    let y = yStart;\r

  \    let curFaction = null;\r

  \    let curType = null;\r

  \    for (const u of this.b.fire_order) {\r

  \      let type = u.unit.type;\r

  \      let faction = u.owner;\r

  \      if (faction != curFaction) {\r

  \        x = this.xStartPerFaction[faction];\r

  \      }\r

  \      if (type != curType) {\r

  \        y = this.yStartPerUnitType[type];\r

  \        x = this.xStartPerFaction[faction];\r

  \      }\r

  \      let usz = this.unitSize.w / 2;\r

  \      let ms = this.createUnit(u, 'u' + u.id, gid, type,
  u.unit.nationality);\r

  \      ms.setPos(x + usz, y + usz).draw();\r

  \      this.updateCv(ms, u.unit.cv);\r

  \      this.ms[u.id] = ms;\r

  \      curType = type;\r

  \      curFaction = faction;\r

  \      x += this.unitSize.w + this.gap.w;\r

  \    }\r

  \  }\r

  \  roundEnding() {\r

  \    unitTestCombatStage('roundEnding!!!');\r

  \    for (const id in this.ms) {\r

  \      this.ms[id].unhighlight();\r

  \    }\r

  \  }\r

  \  update(data, H) {\r

  \    let c = data.temp.combat;\r

  \    let b_old = this.b;\r

  \    this.b = c.battle;\r

  \    let b = this.b;\r

  \    unitTestBattle('_______b.stage:', b.stage, b);\r

  \    console.log('b.stage', b.stage);\r

  \    let message = '';\r

  \    if (b.stage == 'battle_start_ack') {\r

  \      message = 'Battle starting in ' + b.tilename.toUpperCase() + ':
  please accept!';\r

  \      this.selectBattle();\r

  \    } else if (b.stage == 'battle_round_start_ack') {\r

  \      message = b.attacker + ', please select active battle group!';\r

  \      this.unhighlightUnits();\r

  \      if (b.isSeaBattle) {\r

  \        for (const bg of b.battle_groups) {\r

  \          this.coverBattleGroup(bg, b);\r

  \        }\r

  \        this.battleGroupsCovered = true;\r

  \      }\r

  \    } else if (b.stage == 'select_combat_action_ack') {\r

  \      this.unhighlightUnits();\r

  \      message = b.fire.owner + ', please select combat action!';\r

  \      if (b.isSeaBattle && this.battleGroupsCovered) {\r

  \        this.uncoverBattleGroup(b.battle_group, b);\r

  \        this.battleGroupsCovered = false;\r

  \      }\r

  \      this.selectFireUnit(b);\r

  \    } else if (b.stage == 'hit_ack') {\r

  \      message = b.fire.owner + ' targeting class ' + b.target_class + ':
  PLEASE ACCEPT!';\r

  \      this.highlightTargetClass();\r

  \      this.startDiceAnimation(b.fire);\r

  \    } else if (b.stage == 'have_hits_ack' || b.stage == 'no_hits_ack') {\r

  \      message = b.hits + ' hits left! (accept or select type)';\r

  \      this.stopDiceAnimation(b.fire);\r

  \      if (b.hits == b.outcome) this.showHits(b.outcome);\r

  \    } else if (b.stage == 'damage_ack') {\r

  \      this.unhighlightTargetClass(b_old);\r

  \      this.selectUnitsHit(b);\r

  \      message = this.selectTheDead(b_old, b);\r

  \    } else if (b.stage == 'battle_ends_ack') {\r

  \      this.unhighlightUnits();\r

  \      this.selectTheDead(b_old, b);\r

  \      this.markMandatoryRebased(b_old, b);\r

  \      message = 'Battle ends!!';\r

  \    } else if (b.stage == 'mandatory_rebase_ack') {\r

  \      this.unhighlightUnits();\r

  \      this.highlightANS(H.player);\r

  \      message = 'Select mandatory rebase option!!';\r

  \    } else if (b.stage == 'retreat_ack') {\r

  \      message = b.selectedRetreatUnit + ' HAS RETREATED TO ' +
  b.selectedRetreatTile;\r

  \      this.markAsRetreated(b.fire.id);\r

  \    } else {\r

  \      return 'NOT IMPLEMENTED!!!!!';\r

  \    }\r

  \    unitTestBattle('____________');\r

  \    return message;\r

  \  }\r

  \  update_dep(data, H) {\r

  \    let c = data.temp.combat;\r

  \    if (c.battle.isSeaBattle) return this.updateSeaBattle(data, H);\r

  \    let b_old = this.b;\r

  \    let b = (this.b = c.battle);\r

  \    unitTestBattle('_______b.stage:', b.stage, b);\r

  \    let message = '';\r

  \    if (b.stage == 'battle_start_ack') {\r

  \      message = 'BATTLE STARTING IN ' + b.tilename.toUpperCase() + ':
  PLEASE ACCEPT!';\r

  \      this.selectBattle();\r

  \    } else if (b.stage == 'select_command') {\r

  \      message = 'SELECT TARGET CLASS OR RETREAT OPTIONS OR ACCEPT!!!';\r

  \      this.selectFireUnit();\r

  \    } else if (b.stage == 'ack_combat_action') {\r

  \      this.selectFireUnit();\r

  \      if (b.combat_action == 'hit') {\r

  \        message = b.fire.owner + ' TARGETING CLASS ' + b.target_class + ':
  PLEASE ACCEPT!';\r

  \        this.highlightTargetClass();\r

  \        this.startDiceAnimation(b.fire);\r

  \      } else {\r

  \        message = b.fire.owner + ' RETREATING TO ' +
  b.retreat_options[0][1] + ': PLEASE ACCEPT!';\r

  \      }\r

  \    } else if (b.stage == 'select_hit_type') {\r

  \      message = b.outcome + ' HITS, PLEASE SELECT TYPE TO HIT FIRST!';\r

  \      this.stopDiceAnimation(b.fire);\r

  \      this.showHits(b.outcome);\r

  \    } else if (b.stage == 'ack_retreat') {\r

  \      message = b.selectedRetreatUnit + ' HAS RETREATED TO ' +
  b.selectedRetreatTile;\r

  \      this.markAsRetreated(b.fire.id);\r

  \    } else if (b.stage == 'select_mandatory_rebase') {\r

  \      this.markMandatoryRebased(b_old, b);\r

  \      message = H.player + ', SELECT MANDATORY REBASE OPTION';\r

  \      this.unhighlightUnits();\r

  \      this.highlightANS(H.player);\r

  \    } else if (b.stage == 'accept_outcome') {\r

  \      if (this.diceRolling) {\r

  \        message = b.outcome + ' HITS HITTING ' + b.units_hit.map(u => u.id
  + '(' + u.type + ')').join(' ') + ': PLEASE ACCEPT!';\r

  \        this.stopDiceAnimation(b.fire);\r

  \        this.showHits(b.outcome);\r

  \        let f = b.fire_order[b.idx];\r

  \      } else {\r

  \        message = this.selectTheDead(b_old, b);\r

  \      }\r

  \    } else if (b.stage == 'ack_combat_action_done') {\r

  \      this.unhighlightTargetClass(b_old);\r

  \      if (b.combat_action == 'hit') {\r

  \        message = this.selectTheDead(b_old, b);\r

  \      } else {\r

  \        message = b.fire.id + ' has retreated. Please accept!';\r

  \      }\r

  \    } else if (b.stage == 'ack_battle_interrupted_no_enemy_units_left') {\r

  \      if (b.combat_action == 'hit') {\r

  \        this.selectTheDead(b_old, b);\r

  \      }\r

  \      message = 'BATTLE ENDS HERE: NO ENEMY UNITS LEFT!!!';\r

  \    } else if (b.stage == 'ack_battle_decided') {\r

  \      if (b.winner == b.owner) {\r

  \        message = b.winner + ' has defended his territory! please
  accept!';\r

  \      } else {\r

  \        message = b.winner + ' has conquered new territory!!! please
  accept!';\r

  \      }\r

  \      this.selectTheDead(b_old, b);\r

  \    } else if (b.stage == 'ack_cleanup_battle') {\r

  \      message = 'battle in ' + b.tilename + ' is ending! please accept!';\r

  \      this.unhighlightUnits();\r

  \      this.markMandatoryRebased(b_old, b);\r

  \      this.unselectBattle();\r

  \    }\r

  \    if (b.stage == 'battle_round_start_ack') {\r

  \      message = b.attacker + ', please select active battle group!';\r

  \      this.highlightBattleGroups(b);\r

  \    }\r

  \    unitTestBattle('____________');\r

  \    return message;\r

  \  }\r

  \  updateSeaBattle(data, H) {\r

  \    let c = data.temp.combat;\r

  \    let b_old = this.b;\r

  \    this.b = c.battle;\r

  \    let b = this.b;\r

  \    unitTestBattle('_______b.stage:', b.stage, b);\r

  \    let message = '';\r

  \    if (b.stage == 'battle_start_ack') {\r

  \      message = 'BATTLE STARTING IN ' + b.tilename.toUpperCase() + ':
  PLEASE ACCEPT!';\r

  \      this.selectBattle();\r

  \    } else if (b.stage == 'battle_round_start_ack') {\r

  \      message = b.attacker + ', please select active battle group!';\r

  \      this.highlightBattleGroups(b);\r

  \    } else if (b.stage == 'select_combat_action_ack') {\r

  \      message = b.attacker + ', please select combat action!';\r

  \      this.coverOtherBattleGroups(b);\r

  \      this.selectFireUnit(b);\r

  \    }\r

  \    if (b.stage == 'ack_combat_action') {\r

  \      this.selectFireUnit();\r

  \      if (b.combat_action == 'hit') {\r

  \        message = b.fire.owner + ' TARGETING CLASS ' + b.target_class + ':
  PLEASE ACCEPT!';\r

  \        this.highlightTargetClass();\r

  \        this.startDiceAnimation(b.fire);\r

  \      } else {\r

  \        message = b.fire.owner + ' RETREATING TO ' +
  b.retreat_options[0][1] + ': PLEASE ACCEPT!';\r

  \      }\r

  \    } else if (b.stage == 'select_hit_type') {\r

  \      message = b.outcome + ' HITS, PLEASE SELECT TYPE TO HIT FIRST!';\r

  \      this.stopDiceAnimation(b.fire);\r

  \      this.showHits(b.outcome);\r

  \    } else if (b.stage == 'ack_retreat') {\r

  \      message = b.selectedRetreatUnit + ' HAS RETREATED TO ' +
  b.selectedRetreatTile;\r

  \      this.markAsRetreated(b.fire.id);\r

  \    } else if (b.stage == 'select_mandatory_rebase') {\r

  \      this.markMandatoryRebased(b_old, b);\r

  \      message = H.player + ', SELECT MANDATORY REBASE OPTION';\r

  \      this.unhighlightUnits();\r

  \      this.highlightANS(H.player);\r

  \    } else if (b.stage == 'accept_outcome') {\r

  \      if (this.diceRolling) {\r

  \        message = b.outcome + ' HITS HITTING ' + b.units_hit.map(u => u.id
  + '(' + u.type + ')').join(' ') + ': PLEASE ACCEPT!';\r

  \        this.stopDiceAnimation(b.fire);\r

  \        this.showHits(b.outcome);\r

  \        let f = b.fire_order[b.idx];\r

  \      } else {\r

  \        message = this.selectTheDead(b_old, b);\r

  \      }\r

  \    } else if (b.stage == 'ack_combat_action_done') {\r

  \      this.unhighlightTargetClass(b_old);\r

  \      if (b.combat_action == 'hit') {\r

  \        message = this.selectTheDead(b_old, b);\r

  \      } else {\r

  \        message = b.fire.id + ' has retreated. Please accept!';\r

  \      }\r

  \    } else if (b.stage == 'ack_battle_interrupted_no_enemy_units_left') {\r

  \      if (b.combat_action == 'hit') {\r

  \        this.selectTheDead(b_old, b);\r

  \      }\r

  \      message = 'BATTLE ENDS HERE: NO ENEMY UNITS LEFT!!!';\r

  \    } else if (b.stage == 'ack_battle_decided') {\r

  \      if (b.winner == b.owner) {\r

  \        message = b.winner + ' has defended his territory! please
  accept!';\r

  \      } else {\r

  \        message = b.winner + ' has conquered new territory!!! please
  accept!';\r

  \      }\r

  \      this.selectTheDead(b_old, b);\r

  \    } else if (b.stage == 'ack_cleanup_battle') {\r

  \      message = 'battle in ' + b.tilename + ' is ending! please accept!';\r

  \      this.unhighlightUnits();\r

  \      this.markMandatoryRebased(b_old, b);\r

  \      this.unselectBattle();\r

  \    }\r

  \    unitTestBattle('____________');\r

  \    return message;\r

  \  }\r

  \  updateCv(ms, cv) {\r

  \    ms.removeFromChildIndex(5);\r

  \    let sz = this.assets.SZ.cadreDetail;\r

  \    let dx = sz / (cv + 1);\r

  \    let xStart = -sz / 2;\r

  \    let y = -sz / 3.2;\r

  \    let diam = Math.min(dx / 1.5, sz / 5);\r

  \    let x = dx + xStart;\r

  \    for (let i = 0; i < cv; i++) {\r

  \      ms.circle({ sz: diam, x: x, y: y, fill: 'white' });\r

  \      x += dx;\r

  \    }\r

  \    ms.tag('cv', cv);\r

  \  }\r

  }"
ABattleSea: "class ABattleSea {\r

  \  constructor(assets, loc, b, stage) {\r

  \    this.assets = assets;\r

  \    this.location = loc;\r

  \    this.b = b;\r

  \    this.stage = stage;\r

  \    this.roundCounter = 0;\r

  \    this.factions = [b.attacker, b.defender];\r

  \    this.allUnitTypes = Array.from(new Set(b.fire_order.map(x =>
  x.unit.type)));\r

  \    this.battle_groups = b.battle_groups;\r

  \    console.log('battle_groups', this.battle_groups)\r

  \    this.ms = {};\r

  \    this.selected = false;\r

  \    this.msFire = null;\r

  \    this.nColsPerFaction = this.calcMaxUnitTypePerFaction();\r

  \    let hTitle = 25 * 2;\r

  \    let usz = assets.SZ.cadreDetail;\r

  \    let hGap = 4;\r

  \    let hRow = usz + hGap;\r

  \    let hTotal = hRow * this.allUnitTypes.length + hTitle + 2 * hGap;\r

  \    let wGap = hGap;\r

  \    let wFactionGap = 10 * hGap;\r

  \    let wCol = usz + wGap;\r

  \    let wColTotal = Object.values(this.nColsPerFaction).reduce((a, b) => a
  + b, 0);\r

  \    let wColsPerFaction = {};\r

  \    let xStartPerFaction = {};\r

  \    let xAkku = wGap;\r

  \    for (const f of this.factions) {\r

  \      wColsPerFaction[f] = this.nColsPerFaction[f] * wCol;\r

  \      xStartPerFaction[f] = xAkku;\r

  \      xAkku += wColsPerFaction[f] + wFactionGap;\r

  \    }\r

  \    let yStartPerUnitType = {};\r

  \    let yAkku = hGap + 25;\r

  \    for (const t of this.allUnitTypes) {\r

  \      yStartPerUnitType[t] = yAkku;\r

  \      yAkku += hRow;\r

  \    }\r

  \    this.xStartPerFaction = xStartPerFaction;\r

  \    this.yStartPerUnitType = yStartPerUnitType;\r

  \    this.wColsPerFaction = wColsPerFaction;\r

  \    let wTotal = wGap + wColTotal * wCol + wFactionGap *
  this.factions.length + wGap;\r

  \    this.size = { w: wTotal, h: hTotal };\r

  \    this.unitSize = { w: wCol, h: hRow };\r

  \    this.gap = { w: wGap, h: hGap, col: wFactionGap };\r

  \  }\r

  \  selectBattle() {\r

  \    this.battleDiv.style.border = '4px solid yellow';\r

  \  }\r

  \  unselectBattle() {\r

  \    this.battleDiv.style.border = '1px solid ' + getpal(6);\r

  \  }\r

  \  selectFireUnit() {\r

  \    if (this.msFire) this.msFire.unhighlight();\r

  \    this.msFire = this.ms[this.b.fire.id];\r

  \    this.msFire.highlight();\r

  \  }\r

  \  unhightlightUnits() {\r

  \    for (const id in this.ms) {\r

  \      let ms = this.ms[id];\r

  \      console.log('unhighlighting', ms.getTag('owner'),
  ms.getTag('type'));\r

  \      ms.unhighlight();\r

  \    }\r

  \  }\r

  \  highlightANS(pl) {\r

  \    for (const id in this.ms) {\r

  \      let ms = this.ms[id];\r

  \      let type = ms.getTag('type');\r

  \      let owner = ms.getTag('owner');\r

  \      if (owner == pl && isANS(type)) {\r

  \        if (!ms.getTag('dead') && !ms.getTag('removed')) {\r

  \          ms.highlight();\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  highlightTargetClass() {\r

  \    for (const id in this.b.target_units) {\r

  \      let ms = this.ms[id];\r

  \      ms.highlight();\r

  \    }\r

  \  }\r

  \  unhighlightTargetClass() {\r

  \    for (const id in this.b.target_units) {\r

  \      let ms = this.ms[id];\r

  \      ms.unhighlight();\r

  \    }\r

  \  }\r

  \  markMandatoryRebased(b_old, b) {\r

  \    for (const u of b_old.fire_order) {\r

  \      let id = u.id;\r

  \      let unitInB = firstCond(b.fire_order, x => x.id == id);\r

  \      if (!unitInB) {\r

  \        this.markAsRetreated(id);\r

  \      }\r

  \    }\r

  \  }\r

  \  markAsRetreated(id) {\r

  \    let ms = this.ms[id];\r

  \    ms.unhighlight();\r

  \    ms.selKeyColor('darkSlateGrey', 'retreated', 0.7);\r

  \    ms.tag('removed', true);\r

  \  }\r

  \  selectTheDead(b_old, b_new) {\r

  \    let degraded = '';\r

  \    let removed = '';\r

  \    let message = '';\r

  \    for (const u of b_old.fire_order) {\r

  \      let id = u.id;\r

  \      let ms = this.ms[id];\r

  \      let uNew = firstCond(b_new.fire_order, x => x.id == id);\r

  \      if (uNew) {\r

  \        let cv_old = u.unit.cv;\r

  \        let cv_new = uNew.unit.cv;\r

  \        if (cv_old != cv_new) {\r

  \          this.updateCv(ms, cv_new);\r

  \          degraded += ' ' + id.toString();\r

  \        }\r

  \      } else {\r

  \        this.updateCv(ms, 0);\r

  \        ms.selColor('black', 0.8);\r

  \        ms.tag('dead', true);\r

  \        removed += ' ' + id.toString();\r

  \      }\r

  \    }\r

  \    if (!empty(degraded)) message += degraded + ' degraded. ';\r

  \    if (!empty(removed)) message += removed + ' removed. ';\r

  \    message += 'Please accept!';\r

  \    return message;\r

  \  }\r

  \  startDiceAnimation(fire) {\r

  \    this.fire = fire;\r

  \    let dDice = fire.owner == this.b.attacker ? this.attackerDiceDiv :
  this.defenderDiceDiv;\r

  \    this.diceRolling = true;\r

  \    dDice.classList.add('pulseOn');\r

  \  }\r

  \  stopDiceAnimation(fire) {\r

  \    let dDice = fire.owner == this.b.attacker ? this.attackerDiceDiv :
  this.defenderDiceDiv;\r

  \    dDice.classList.remove('pulseOn');\r

  \    this.diceRolling = false;\r

  \  }\r

  \  showHits(hits) {\r

  \    let dDice = this.b.fire.owner == this.b.attacker ? this.attackerDiceDiv
  : this.defenderDiceDiv;\r

  \    let html = dDice.innerHTML;\r

  \    dDice.innerHTML = html + '<br>' + hits;\r

  \  }\r

  \  addUnit(id, gName, type, nationality, cv, x, y) {\r

  \    let ms = this.createUnit(id, gName, type, nationality);\r

  \    ms.setPos(x, y).draw();\r

  \    this.updateCv(ms, cv);\r

  \    return ms;\r

  \  }\r

  \  createUnit(id, gName, type, nationality) {\r

  \    let owner = getUnitOwner(nationality);\r

  \    let imagePath = '/a/assets/images/' + type + '.svg';\r

  \    let isMinorColor = !(nationality in this.assets.troopColors);\r

  \    let color = isMinorColor ? this.assets.troopColors['Minor'] :
  this.assets.troopColors[nationality];\r

  \    let darker = darkerColor(color[0], color[1], color[2]);\r

  \    let sz = this.assets.SZ.cadreDetail;\r

  \    let sz80 = sz * 0.86;\r

  \    let szImage = sz / 1.5;\r

  \    let y = szImage / 6;\r

  \    let ms = new MS(id, gName)\r

  \      .roundedRect({ className: 'ground', w: sz, h: sz, fill: color,
  rounding: sz * 0.1 })\r

  \      .roundedRect({ w: sz80, h: sz80, fill: darker, rounding: sz * 0.1
  })\r

  \      .image({ path: imagePath, y: y, w: szImage, h: szImage })\r

  \      .roundedRect({ className: 'unit overlay', w: sz, h: sz, fill: darker,
  rounding: sz * 0.1 });\r

  \    ms.tag('type', type);\r

  \    ms.tag('owner', owner);\r

  \    ms.tag('nationality', nationality);\r

  \    return ms;\r

  \  }\r

  \  calcMaxUnitTypePerFaction() {\r

  \    let unitTypeCountPerFaction = {};\r

  \    let byTypeAndFaction = new CounterClass(this.b.fire_order, x =>
  x.unit.type + '_' + x.owner);\r

  \    for (let g of cartesian(this.allUnitTypes, this.factions)) {\r

  \      let type = stringBefore(g, '_');\r

  \      let faction = stringAfter(g, '_');\r

  \      if (!(faction in unitTypeCountPerFaction))
  unitTypeCountPerFaction[faction] = {};\r

  \      let count = byTypeAndFaction.get(g);\r

  \      unitTypeCountPerFaction[faction][type] = count ? count : 0;\r

  \    }\r

  \    let nColsPerFaction = {};\r

  \    for (const f of this.factions) {\r

  \      nColsPerFaction[f] =
  getItemWithMaxValue(unitTypeCountPerFaction[f])[1];\r

  \    }\r

  \    return nColsPerFaction;\r

  \  }\r

  \  mirror_units(data, H) {\r

  \    unitTestMirrorBattle('new data:', data);\r

  \    unitTestMirrorBattle('H:', H);\r

  \    for (const u of data.battle.fire_order) {\r

  \      let o = H.objects[u.id];\r

  \      if (u.unit.cv != o.cv) {\r

  \        this.updateCv(this.ms[u.id], o.cv);\r

  \      }\r

  \    }\r

  \    if ('dead' in data.battle) {\r

  \      for (const u of data.battle.dead) {\r

  \        if (u.id in H.objects) {\r

  \          unitTestMirrorBattle('H still contains dead unit', u.id);\r

  \        } else {\r

  \          unitTestMirrorBattle('dead unit', u.id, 'has been removed from
  H');\r

  \          if (u.id in this.ms) {\r

  \            let ms = this.ms[u.id];\r

  \            if (!ms.getTag('dead')) {\r

  \              this.updateCv(ms, 0);\r

  \              ms.unhighlight();\r

  \              ms.select();\r

  \              ms.tag('dead', true);\r

  \            } else {\r

  \              unitTestMirrorBattle('unit', u.id, 'has already been marked
  dead!!!');\r

  \            }\r

  \          } else {\r

  \            unitTestMirrorBattle('ERROR!!! dead unit', u.id, 'not in
  ms!!!!');\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  populate(dBattleOuter, gid, bg, fg) {\r

  \    let dBattleLeft = addDivClass(dBattleOuter, 'dBattleLeft',
  'battleLeft');\r

  \    let dBattleRight = addDivClass(dBattleOuter, 'dBattleRight',
  'battleRight');\r

  \    let dBattleMiddle = addDivClass(dBattleOuter, 'dBattleMiddle',
  'battleMiddle');\r

  \    let dBattleTitle = addDivClass(dBattleMiddle, 'dBattleTitle',
  'battleTitle');\r

  \    dBattleTitle.innerHTML = this.location;\r

  \    let dBattleFactions = addDivClass(dBattleMiddle, 'dBattleFactions',
  'battleFactions');\r

  \    dBattleFactions.style.width = this.size.w + 'px';\r

  \    dBattleFactions.style.height = this.size.h - 25 + 'px';\r

  \    let g1 = addSvgg(dBattleFactions, gid);\r

  \    this.gid = gid;\r

  \    this.battleDiv = dBattleOuter;\r

  \    this.attackerDiceDiv = dBattleLeft;\r

  \    this.defenderDiceDiv = dBattleRight;\r

  \    let i = 0;\r

  \    for (const f of this.factions) {\r

  \      let id = 't' + i;\r

  \      i += 1;\r

  \      let x = this.xStartPerFaction[f] + this.wColsPerFaction[f] / 2;\r

  \      let msTitle = new MS(id, gid)\r

  \        .text({ txt: f, fill: fg })\r

  \        .setPos(x, 15)\r

  \        .draw();\r

  \    }\r

  \    let xStart = this.gap.w;\r

  \    let yStart = this.gap.h;\r

  \    let x = xStart;\r

  \    let y = yStart;\r

  \    let curFaction = null;\r

  \    let curType = null;\r

  \    for (const u of this.b.fire_order) {\r

  \      let type = u.unit.type;\r

  \      let faction = u.owner;\r

  \      if (faction != curFaction) {\r

  \        x = this.xStartPerFaction[faction];\r

  \      }\r

  \      if (type != curType) {\r

  \        y = this.yStartPerUnitType[type];\r

  \        x = this.xStartPerFaction[faction];\r

  \      }\r

  \      let usz = this.unitSize.w / 2;\r

  \      let ms = this.createUnit('u' + u.id, gid, type,
  u.unit.nationality);\r

  \      ms.setPos(x + usz, y + usz).draw();\r

  \      this.updateCv(ms, u.unit.cv);\r

  \      this.ms[u.id] = ms;\r

  \      curType = type;\r

  \      curFaction = faction;\r

  \      x += this.unitSize.w + this.gap.w;\r

  \    }\r

  \  }\r

  \  roundEnding() {\r

  \    unitTestCombatStage('roundEnding!!!');\r

  \    for (const id in this.ms) {\r

  \      this.ms[id].unhighlight();\r

  \    }\r

  \  }\r

  \  update(data, H) {\r

  \    let c = data.temp.combat;\r

  \    let b_old = this.b;\r

  \    let b = (this.b = c.battle);\r

  \    unitTestBattle('_______b.stage:', b.stage, b);\r

  \    let message = '';\r

  \    if (b.stage == 'battle_start_ack') {\r

  \      message = 'BATTLE STARTING IN ' + b.tilename.toUpperCase() + ':
  PLEASE ACCEPT!';\r

  \      this.selectBattle();\r

  \    } else if (b.stage == 'select_command') {\r

  \      message = 'SELECT TARGET CLASS OR RETREAT OPTIONS OR ACCEPT!!!';\r

  \      this.selectFireUnit();\r

  \    } else if (b.stage == 'ack_combat_action') {\r

  \      this.selectFireUnit();\r

  \      if (b.combat_action == 'hit') {\r

  \        message = b.fire.owner + ' TARGETING CLASS ' + b.target_class + ':
  PLEASE ACCEPT!';\r

  \        this.highlightTargetClass();\r

  \        this.startDiceAnimation(b.fire);\r

  \      } else {\r

  \        message = b.fire.owner + ' RETREATING TO ' +
  b.retreat_options[0][1] + ': PLEASE ACCEPT!';\r

  \      }\r

  \    } else if (b.stage == 'select_hit_type') {\r

  \      message = b.outcome + ' HITS, PLEASE SELECT TYPE TO HIT FIRST!';\r

  \      this.stopDiceAnimation(b.fire);\r

  \      this.showHits(b.outcome);\r

  \    } else if (b.stage == 'ack_retreat') {\r

  \      message = b.selectedRetreatUnit + ' HAS RETREATED TO ' +
  b.selectedRetreatTile;\r

  \      this.markAsRetreated(b.fire.id);\r

  \    } else if (b.stage == 'select_mandatory_rebase') {\r

  \      this.markMandatoryRebased(b_old, b);\r

  \      message = H.player + ', SELECT MANDATORY REBASE OPTION';\r

  \      this.unhightlightUnits();\r

  \      this.highlightANS(H.player);\r

  \    } else if (b.stage == 'accept_outcome') {\r

  \      if (this.diceRolling) {\r

  \        message = b.outcome + ' HITS HITTING ' + b.units_hit.map(u => u.id
  + '(' + u.type + ')').join(' ') + ': PLEASE ACCEPT!';\r

  \        this.stopDiceAnimation(b.fire);\r

  \        this.showHits(b.outcome);\r

  \        let f = b.fire_order[b.idx];\r

  \      } else {\r

  \        message = this.selectTheDead(b_old, b);\r

  \      }\r

  \    } else if (b.stage == 'ack_combat_action_done') {\r

  \      this.unhighlightTargetClass(b_old);\r

  \      if (b.combat_action == 'hit') {\r

  \        message = this.selectTheDead(b_old, b);\r

  \      } else {\r

  \        message = b.fire.id + ' has retreated. Please accept!';\r

  \      }\r

  \    } else if (b.stage == 'ack_battle_interrupted_no_enemy_units_left') {\r

  \      if (b.combat_action == 'hit') {\r

  \        this.selectTheDead(b_old, b);\r

  \      }\r

  \      message = 'BATTLE ENDS HERE: NO ENEMY UNITS LEFT!!!';\r

  \    } else if (b.stage == 'ack_battle_decided') {\r

  \      if (b.winner == b.owner) {\r

  \        message = b.winner + ' has defended his territory! please
  accept!';\r

  \      } else {\r

  \        message = b.winner + ' has conquered new territory!!! please
  accept!';\r

  \      }\r

  \      this.selectTheDead(b_old, b);\r

  \    } else if (b.stage == 'ack_cleanup_battle') {\r

  \      message = 'battle in ' + b.tilename + ' is ending! please accept!';\r

  \      this.unhightlightUnits();\r

  \      this.markMandatoryRebased(b_old, b)\r

  \      this.unselectBattle();\r

  \    }\r

  \    unitTestBattle('____________');\r

  \    return message;\r

  \  }\r

  \  updateCv(ms, cv) {\r

  \    ms.removeFromChildIndex(5);\r

  \    let sz = this.assets.SZ.cadreDetail;\r

  \    let dx = sz / (cv + 1);\r

  \    let xStart = -sz / 2;\r

  \    let y = -sz / 3.2;\r

  \    let diam = Math.min(dx / 1.5, sz / 5);\r

  \    let x = dx + xStart;\r

  \    for (let i = 0; i < cv; i++) {\r

  \      ms.circle({ sz: diam, x: x, y: y, fill: 'white' });\r

  \      x += dx;\r

  \    }\r

  \    ms.tag('cv', cv);\r

  \  }\r

  }"
AbsGraph1: "class AbsGraph1 {\r

  \  constructor() {\r

  \    let defOptions = {\r

  \      maxZoom: 1,\r

  \      minZoom: .001,\r

  \      motionBlur: false,\r

  \      wheelSensitivity: 0.05,\r

  \      zoomingEnabled: false,\r

  \      userZoomingEnabled: false,\r

  \      panningEnabled: false,\r

  \      userPanningEnabled: false,\r

  \      boxSelectionEnabled: false,\r

  \      layout: { name: 'preset' },\r

  \      elements: [],\r

  \    };\r

  \    this.cy = cytoscape(defOptions);\r

  \  }\r

  \  clear() { this.cy.destroy(); }\r

  \  //#region access and algos\r

  \  getComponents() { return this.cy.elements().components(); }\r

  \  getComponentIds() { return this.cy.elements().components().map(x =>
  x.id()); }\r

  \  getCommonEdgeId(nid1, nid2) { return nid1 + '_' + nid2; }\r

  \  getNumComponents() { return this.cy.elements().components().length; }\r

  \  getNode(id) { return this.cy.getElementById(id); }\r

  \  getNodes() { return this.cy.nodes(); }\r

  \  getNodeIds() { return this.cy.nodes().map(x => x.id()); }\r

  \  getNodeData() { return this.cy.nodes().map(x => x.data()); }\r

  \  getNodePositions() { return this.cy.nodes.map(x => x.position()); }\r

  \  getEdges() { return this.cy.edges(); }\r

  \  getEdgeIds() { return this.cy.edges().map(x => x.id()); }\r

  \  getPosition(id) {\r

  \    let node = this.getNode(id);\r

  \    let pos = node.renderedPosition();\r

  \    return pos;\r

  \  }\r

  \  setPosition(id, x, y) { this.cy.getElementById(id).position({ x: x, y: y
  }); }\r

  \  setProp(id, prop, val) { this.cy.getElementById(id).data()[prop] = val;
  }\r

  \  getProp(id, prop) { return this.cy.getElementById(id).data()[prop]; }\r

  \  getDegree(id) { return this.cy.nodes('#' + id).degree(); }\r

  \  getNodeWithMaxDegree(idlist) {\r

  \    if (nundef(idlist)) idlist = this.cy.elements().filter('node').map(x =>
  x.data().id);\r

  \    let imax = arrMinMax(idlist, x => this.getDegree(x)).imax;\r

  \    let id = idlist[imax];\r

  \    return id;\r

  \  }\r

  \  getShortestPathsFrom(id) { let res = this.cy.elements().dijkstra('#' +
  id); return res; }\r

  \  getShortestPathFromTo(nid1, nid2) {\r

  \    let funcs = this.dijkstra = this.getShortestPathsFrom(nid1);\r

  \    let path = funcs.pathTo('#' + nid2);\r

  \    return path;\r

  \  }\r

  \  getLengthOfShortestPath(nid1, nid2) {\r

  \    let funcs = this.dijkstra = this.getShortestPathsFrom(nid1);\r

  \    let len = funcs.distanceTo('#' + nid2);\r

  \    return len;\r

  \  }\r

  \  storeCurrentPositions(prop = 'center') {\r

  \    for (const n of this.getNodes()) {\r

  \      let id = n.id();\r

  \      let pos = this.getPosition(id);\r

  \      this.setProp(id, prop, pos);\r

  \    }\r

  \  }\r

  \  setPositionData(prop = 'center') {\r

  \    let ids = this.getNodeIds();\r

  \    for (const id of ids) {\r

  \      let pos = this.getProp(id, prop);\r

  \      if (isdef(pos)) this.setPosition(id, pos.x, pos.y);\r

  \      else return false;\r

  \    }\r

  \    return true;\r

  \  }\r

  \  sortNodesByDegree(idlist, descending = true) {\r

  \    if (nundef(idlist)) idlist = this.cy.nodes.map(x => x.data().id);\r

  \    let nodes = idlist.map(x => this.getNode(x));\r

  \    for (const n of nodes) {\r

  \      n.degree = this.getDegree(n.id());\r

  \    }\r

  \    if (descending) sortByDescending(nodes, 'degree'); else sortBy(nodes,
  'degree');\r

  \    return nodes;\r

  \  }\r

  \  //#endregion\r

  \  //#region modify nodes, edges\r

  \  addNode(data, coords) {\r

  \    if (nundef(data)) data = {};\r

  \    if (nundef(data.id)) data.id = getFruid();\r

  \    if (isdef(coords)) {\r

  \      coords.x -= this.cy.pan().x;\r

  \      coords.y -= this.cy.pan().y;\r

  \    } else { coords = { x: 0, y: 0 }; }\r

  \    var ele = this.cy.add({\r

  \      group: 'nodes',\r

  \      data: data,\r

  \      position: coords\r

  \    });\r

  \    return ele.id();\r

  \  }\r

  \  addNodes(n, datalist, coordlist) {\r

  \    let ids = [];\r

  \    if (nundef(datalist)) datalist = new Array(n).map(x => ({ id:
  getFruid() }));\r

  \    if (nundef(coordlist)) coordlist = new Array(n).map(x => ({ coords: {
  x: 0, y: 0 } }));\r

  \    for (let i = 0; i < n; i++) {\r

  \      let id = this.addNode(datalist[i], coordlist[i]);\r

  \      ids.push(id);\r

  \    }\r

  \    return ids;\r

  \  }\r

  \  addEdge(nid1, nid2, data) {\r

  \    if (nundef(data)) data = {};\r

  \    data.id = this.getCommonEdgeId(nid1, nid2);\r

  \    data.source = nid1;\r

  \    data.target = nid2;\r

  \    var ele = this.cy.add({\r

  \      group: 'edges',\r

  \      data: data,\r

  \    });\r

  \    return ele.id();\r

  \  }\r

  \  addEdges(nOrNodePairList) {\r

  \    if (isNumber(nOrNodePairList)) {\r

  \      let nids = this.getNodeIds();\r

  \      let prod = arrPairs(nids);\r

  \      nOrNodePairList = choose(prod, nOrNodePairList);\r

  \    }\r

  \    let res = [];\r

  \    for (const pair of nOrNodePairList) {\r

  \      res.push(this.addEdge(pair[0], pair[1]));\r

  \    }\r

  \    return res;\r

  \  }\r

  \  removeNode(node) { this.removeElement(node); return this.getNodeIds();
  }\r

  \  removeEdge(edge) { this.removeElement(edge); return this.getEdgeIds();
  }\r

  \  removeElement(ne) { if (!isString(ne)) ne = ne.id();
  this.cy.getElementById(ne).remove(); }\r

  \  //#endregion\r

  \  //#region layouts\r

  \  breadthfirst() { this.cy.layout({ name: 'breadthfirst', animate: true
  }).run(); }\r

  \  circle() { this.cy.layout({ name: 'circle', animate: 'end' }).run(); }\r

  \  concentric() { this.cy.layout({ name: 'concentric', animate: true
  }).run(); }\r

  \  comcola() {\r

  \    let defaults = {\r

  \      name: 'cola',\r

  \      animate: true,\r

  \      refresh: 1,\r

  \      maxSimulationTime: 4000,\r

  \      ungrabifyWhileSimulating: false,\r

  \      fit: true,\r

  \      padding: 30,\r

  \      boundingBox: undefined,\r

  \      nodeDimensionsIncludeLabels: false,\r

  \      ready: function () { },\r

  \      stop: function () { },\r

  \      randomize: false,\r

  \      avoidOverlap: true,\r

  \      handleDisconnected: true,\r

  \      convergenceThreshold: 0.01,\r

  \      nodeSpacing: function (node) { return 10; },\r

  \      flow: undefined,\r

  \      alignment: undefined,\r

  \      gapInequalities: undefined,\r

  \      edgeLength: undefined,\r

  \      edgeSymDiffLength: undefined,\r

  \      edgeJaccardLength: undefined,\r

  \      unconstrIter: undefined,\r

  \      userConstIter: undefined,\r

  \      allConstIter: undefined,\r

  \      infinite: false\r

  \    };\r

  \    let options = {\r

  \      name: 'cola',\r

  \      convergenceThreshold: 100,\r

  \      boundingBox: { x1: 20, y1: 20, w: 200, h: 200 },\r

  \    };\r

  \    copyKeys(options, defaults);\r

  \    console.log(defaults.boundingBox)\r

  \    this.cy.layout(defaults).run();\r

  \  }\r

  \  cose() { this.cy.layout({ name: 'cose', animate: 'end' }).run(); }\r

  \  euler() { this.cy.layout({ name: 'euler', fit: true, padding: 25,
  animate: 'end' }).run(); }\r

  \  fcose() {\r

  \    var defaultOptions = {\r

  \      quality: \"default\",\r

  \      randomize: true,\r

  \      animate: true,\r

  \      animationDuration: 500,\r

  \      animationEasing: undefined,\r

  \      fit: true,\r

  \      padding: 30,\r

  \      nodeDimensionsIncludeLabels: false,\r

  \      uniformNodeDimensions: false,\r

  \      packComponents: true,\r

  \      step: \"all\",\r

  \      samplingType: true,\r

  \      sampleSize: 25,\r

  \      nodeSeparation: 75,\r

  \      piTol: 0.0000001,\r

  \      nodeRepulsion: node => 4500,\r

  \      idealEdgeLength: edge => 50,\r

  \      edgeElasticity: edge => 0.45,\r

  \      nestingFactor: 0.1,\r

  \      numIter: 2500,\r

  \      tile: true,\r

  \      tilingPaddingVertical: 10,\r

  \      tilingPaddingHorizontal: 10,\r

  \      gravity: 0.25,\r

  \      gravityRangeCompound: 1.5,\r

  \      gravityCompound: 1.0,\r

  \      gravityRange: 3.8,\r

  \      initialEnergyOnIncremental: 0.3,\r

  \      fixedNodeConstraint: undefined,\r

  \      alignmentConstraint: undefined,\r

  \      relativePlacementConstraint: undefined,\r

  \      ready: () => { },\r

  \      stop: () => { },\r

  \      name: 'fcose',\r

  \    };\r

  \    this.cy.layout(defaultOptions).run();\r

  \  }\r

  \  gridLayout() { this.cy.layout({ name: 'grid', animate: true }).run(); }\r

  \  presetLayout() {\r

  \    let hasCenterProp = this.setPositionData();\r

  \    if (!hasCenterProp) {\r

  \      console.log('no positions are preset: store first!');\r

  \    } else {\r

  \      let options = {\r

  \        name: 'preset',\r

  \        positions: undefined,\r

  \        zoom: undefined,\r

  \        pan: undefined,\r

  \        fit: true,\r

  \        padding: 30,\r

  \        animate: true,\r

  \        animationDuration: 500,\r

  \        animationEasing: undefined,\r

  \        animateFilter: function (node, i) { return true; },\r

  \        ready: undefined,\r

  \        stop: undefined,\r

  \        transform: function (node, position) { return position; }\r

  \      };\r

  \      this.cy.layout(options);\r

  \      this.reset();\r

  \    }\r

  \  }\r

  \  randomLayout() { this.cy.layout({ name: 'random', animate: 'true'
  }).run(); }\r

  \  klay() {\r

  \    let klayDefaults = {\r

  \      // Following descriptions taken from
  http://layout.rtsys.informatik.uni-kiel.de:9444/Providedlayout.html?algorithm\
  =de.cau.cs.kieler.klay.layered\r

  \      addUnnecessaryBendpoints: false,\r

  \      aspectRatio: 1.6,\r

  \      borderSpacing: 20,\r

  \      compactComponents: false,\r

  \      crossingMinimization: 'LAYER_SWEEP',\r

  \      cycleBreaking: 'GREEDY',\r

  \      direction: 'UNDEFINED',\r

  \      edgeRouting: 'ORTHOGONAL',\r

  \      edgeSpacingFactor: 0.5,\r

  \      feedbackEdges: false,\r

  \      fixedAlignment: 'NONE',\r

  \      inLayerSpacingFactor: 1.0,\r

  \      layoutHierarchy: false,\r

  \      linearSegmentsDeflectionDampening: 0.3,\r

  \      mergeEdges: false,\r

  \      mergeHierarchyCrossingEdges: true,\r

  \      nodeLayering: 'NETWORK_SIMPLEX',\r

  \      nodePlacement: 'BRANDES_KOEPF',\r

  \      randomizationSeed: 1,\r

  \      routeSelfLoopInside: false,\r

  \      separateConnectedComponents: true,\r

  \      spacing: 20,\r

  \      thoroughness: 7\r

  \    };\r

  \    var options = {\r

  \      nodeDimensionsIncludeLabels: false,\r

  \      fit: true,\r

  \      padding: 20,\r

  \      animate: true,\r

  \      animateFilter: function (node, i) { return true; },\r

  \      animationDuration: 500,\r

  \      animationEasing: undefined,\r

  \      transform: function (node, pos) { return pos; },\r

  \      ready: this.reset.bind(this),\r

  \      stop: undefined,\r

  \      klay: {\r

  \        addUnnecessaryBendpoints: false,\r

  \        aspectRatio: 1.6,\r

  \        borderSpacing: 20,\r

  \        compactComponents: false,\r

  \        crossingMinimization: 'LAYER_SWEEP',\r

  \        cycleBreaking: 'GREEDY',\r

  \        direction: 'UNDEFINED',\r

  \        edgeRouting: 'ORTHOGONAL',\r

  \        edgeSpacingFactor: 0.5,\r

  \        feedbackEdges: false,\r

  \        fixedAlignment: 'NONE',\r

  \        inLayerSpacingFactor: 1.0,\r

  \        layoutHierarchy: false,\r

  \        linearSegmentsDeflectionDampening: 0.3,\r

  \        mergeEdges: false,\r

  \        mergeHierarchyCrossingEdges: true,\r

  \        nodeLayering: 'NETWORK_SIMPLEX',\r

  \        nodePlacement: 'INTERACTIVE',\r

  \        randomizationSeed: 1,\r

  \        routeSelfLoopInside: false,\r

  \        separateConnectedComponents: true,\r

  \        spacing: 20,\r

  \        thoroughness: 3\r

  \      },\r

  \      name: 'klay',\r

  \      priority: function (edge) { return null; },\r

  \    };\r

  \    this.cy.layout(options).run();\r

  \  }\r

  \  //#endregion\r

  \  //#region ui functions\r

  \  fit() { this.cy.fit(); }\r

  \  center() { this.cy.center(); this.cy.fit(); }\r

  \  reset() { this.pan0(); this.zoom1(); this.center(); }\r

  \  pan0() { this.cy.pan({ x: 0, y: 0 }); }\r

  \  zoom1() { this.cy.zoom(1); }\r

  \  isPan() { return this.cy.panningEnabled(); }\r

  \  isZoom() { return this.cy.zoomingEnabled(); }\r

  \  enablePanZoom() { this.pan(true); this.zoom(true); }\r

  \  pan(isOn, reset = true) {\r

  \    this.cy.panningEnabled(isOn);\r

  \    this.cy.userPanningEnabled(isOn);\r

  \    if (!isOn && reset) { this.pan0(); this.center(); }\r

  \  }\r

  \  zoom(isOn, minZoom = .25, maxZoom = 1, reset = true) {\r

  \    this.cy.zoomingEnabled(isOn);\r

  \    this.cy.userZoomingEnabled(isOn);\r

  \    if (!isOn && reset) { this.zoom1(); this.center(); }\r

  \    else if (isOn) { this.cy.minZoom(minZoom); this.cy.maxZoom(maxZoom);
  }\r

  \  }\r

  \  closeLayoutControls() { if (isdef(this.sb)) hide(this.sb); }\r

  \  addLayoutControls(sb, buttonlist) {\r

  \    let buttons = {\r

  \      BFS: mButton('BFS', () => this.breadthfirst(), sb, {}, ['tbb']),\r

  \      circle: mButton('circle', () => this.circle(), sb, {}, ['tbb']),\r

  \      CC: mButton('CC', () => this.concentric(), sb, {}, ['tbb']),\r

  \      cola: mButton('cola', () => this.comcola(), sb, {}, ['tbb']),\r

  \      cose: mButton('cose', () => this.cose(), sb, {}, ['tbb']),\r

  \      euler: mButton('euler', () => this.euler(), sb, {}, ['tbb']),\r

  \      fcose: mButton('fcose', () => this.fcose(), sb, {}, ['tbb']),\r

  \      grid: mButton('grid', () => this.gridLayout(), sb, {}, ['tbb']),\r

  \      klay: mButton('klay', () => this.klay(), sb, {}, ['tbb']),\r

  \      prest: mButton('prest', () => this.presetLayout(), sb, {},
  ['tbb']),\r

  \      rand: mButton('rand', () => this.randomLayout(), sb, {}, ['tbb']),\r

  \      reset: mButton('reset', () => this.reset(), sb, {}, ['tbb']),\r

  \      fit: mButton('fit', () => this.fit(), sb, {}, ['tbb']),\r

  \      show: mButton('show', () => this.showGraph(), sb, {}, ['tbb']),\r

  \      hide: mButton('hide', () => this.hideGraph(), sb, {}, ['tbb']),\r

  \      store: mButton('store', () => this.storeCurrentPositions(), sb, {},
  ['tbb']),\r

  \    };\r

  \    for (const b in buttons) {\r

  \      if (isdef(buttonlist) && !buttonlist.includes(b)) hide(buttons[b]);\r

  \    }\r

  \    return buttons;\r

  \  }\r

  \  addVisual(dParent, styles = {}) {\r

  \    if (this.hasVisual) return;\r

  \    this.hasVisual = true;\r

  \    this.id = nundef(dParent.id) ? getUID() : dParent.id;\r

  \    let styleDict = {\r

  \      node: { 'width': 25, 'height': 25, 'background-color': 'red',
  \"color\": \"#fff\", 'label': 'data(id)', \"text-valign\": \"center\",
  \"text-halign\": \"center\", },\r

  \      edge: { 'width': 2, 'line-color': 'silver', 'curve-style':
  'haystack', },\r

  \      'node.highlight': { 'background-color': 'yellow' },\r

  \      'node.trans': { 'opacity': '0.5' },\r

  \    }\r

  \    for (const ks of ['node', 'edge', 'node.highlight', 'node.trans']) {\r

  \      if (isdef(styles[ks])) {\r

  \        for (const k in styles[ks]) {\r

  \          let [prop, val] = translateToCssStyle(k, styles[ks][k], false);\r

  \          styleDict[ks][prop] = val;\r

  \        }\r

  \      }\r

  \    }\r

  \    let cyStyle = [];\r

  \    for (const k in styleDict) { cyStyle.push({ selector: k, style:
  styleDict[k] }); }\r

  \    let size = getSize(dParent);\r

  \    let d1 = mDiv(dParent, { position: 'relative', bg: 'green', w: size.w,
  left: 0, top: 0, h: size.h, align: 'left' });\r

  \    this.cy.mount(d1);\r

  \    this.cy.style(cyStyle);\r

  \    this.enablePanZoom();\r

  \    iAdd(this, { div: dParent, dCy: d1 });\r

  \  }\r

  \  //#endregion\r

  }"
ACards: "class ACards {\r

  \  constructor(assets) {\r

  \    this.assets = assets;\r

  \    this.hands = {};\r

  \    this.player = null;\r

  \    for (const f of ['Axis', 'West', 'USSR']) {\r

  \      let hand = new AHand(this.assets, 'handG_' + f, 'hand_area', f);\r

  \      this.hands[f] = hand;\r

  \    }\r

  \    this.hands['openCards'] = new AHand(this.assets, 'openCardG',
  'cards2_area', 'open');\r

  \    this.visibleHand = null;\r

  \  }\r

  \  createCard(id, o) {\r

  \    let hand = this.findCardHand(o);\r

  \    if (hand) {\r

  \      let ms = hand.addNew(id, o);\r

  \    }\r

  \  }\r

  \  findCardHand(o) {\r

  \    let vis = getVisibleSet(o);\r

  \    if (!vis || (!('owner' in o) && vis.length < 3)) return null;\r

  \    if (vis.length < 3) {\r

  \      return this.hands[o.owner];\r

  \    } else {\r

  \      return this.hands['openCards'];\r

  \    }\r

  \  }\r

  \  getCardMs(id) {\r

  \    if (this.inVisibleHand(id)) {\r

  \      return this.visibleHand.cards[id].ms;\r

  \    } else return null;\r

  \  }\r

  \  inVisibleHand(id) {\r

  \    return this.visibleHand == null ? false : id in
  this.visibleHand.cards;\r

  \  }\r

  \  updateHandView(player) {\r

  \    for (const pl of ['Axis', 'USSR', 'West']) {\r

  \      let hand = this.hands[pl];\r

  \      if (pl == player) {\r

  \        hand.show();\r

  \      } else hand.hide();\r

  \    }\r

  \  }\r

  \  update(player, data, G) {\r

  \    if (player != this.player) {\r

  \      this.updateHandView(player);\r

  \      this.player = player;\r

  \      this.visibleHand = this.hands[player];\r

  \    }\r

  \    if (!('created' in data)) {\r

  \      unitTestCards('cards update: no created in data: nothing to create or
  update!');\r

  \      return;\r

  \    }\r

  \    for (const id in data.created) {\r

  \      const o_new = data.created[id];\r

  \      if (!isCardType(o_new)) {\r

  \        unitTestCards('o_new not cardType:', o_new.obj_type);\r

  \        continue;\r

  \      }\r

  \      if (!(id in G)) {\r

  \        if (!isVisibleToPlayer(o_new, player) && !('owner' in o_new)) {\r

  \          unitTestCards('not visible and no owner', o_new);\r

  \          continue;\r

  \        }\r

  \        let hand = this.findCardHand(o_new);\r

  \        hand.addNew(id, o_new);\r

  \        G[id] = o_new;\r

  \        unitTestCards('created card', id, 'for hand', hand.id, o_new);\r

  \      } else {\r

  \        let o_old = G[id];\r

  \        let d = propDiff(o_old, o_new);\r

  \        if (!d.hasChanged) continue;\r

  \        unitTestCards('card change', id, d.summary.toString());\r

  \        if (d.summary.includes('visible')) {\r

  \          let hand_new = this.findCardHand(o_new);\r

  \          let hand_old = this.findCardHand(o_old);\r

  \          let ms = hand_old.remove(id);\r

  \          let title = ms.getTag('title');\r

  \          unitTestCards('removed card', id, title, 'from hand',
  hand_old.id);\r

  \          if (hand_new) {\r

  \            hand_new.addExisting(id, o_new, ms);\r

  \            G[id] = o_new;\r

  \            unitTestCards('added card', id, title, 'to hand',
  hand_new.id);\r

  \          } else {\r

  \            delete G[id];\r

  \            unitTestCards('DELETED card', id, title);\r

  \          }\r

  \        } else {\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  }"
ACombat: "class ACombat {\r

  \  constructor(page, assets, data, repDivName) {\r

  \    this.page = page;\r

  \    this.assets = assets;\r

  \    this.c = data;\r

  \    this.dArea = repDivName;\r

  \    this.pal = set_palette(199, 1);\r

  \    this.battles = null;\r

  \    if (Object.keys(data.battles).length > 0) {\r

  \      this.initBattles(data)\r

  \    }\r

  \  }\r

  \  initBattles(cData) {\r

  \    let c = this.c = cData;\r

  \    this.page.battleView();\r

  \    this.locations = Object.keys(cData.battles);\r

  \    this.battleCounter = 0;\r

  \    this.battles = {};\r

  \    this.battle = null;\r

  \    for (const loc of this.locations) {\r

  \      this.battles[loc] = new ABattle(this.assets, loc,
  this.c.battles[loc], this.c.stage);\r

  \    }\r

  \    let sizes = this.locations.map(loc => this.battles[loc].size);\r

  \    this.containerSize = { w: getItemWithMax(sizes, 'w')[2], h:
  getItemWithMax(sizes, 'h')[2] + 12 };\r

  \    let dCombatArea = document.getElementById(this.dArea);\r

  \    clearElement(dCombatArea);\r

  \    let dCombat = addDivFullClass(dCombatArea, 'dCombat',
  'combatContainer');\r

  \    let dCombatTitles = addDivClass(dCombat, 'dCombatTitles',
  'combatTitles');\r

  \    let dCombatTitle = addDivClass(dCombatTitles, 'dCombatTitle',
  'combatTitle');\r

  \    let title = 'COMBAT!!! Battle' + (this.locations.length > 1 ? 's' : '')
  + ' in ' + this.locations.join(', ');\r

  \    dCombatTitle.innerHTML = title;\r

  \    this.dCombatSubtitle = addDivClass(dCombatTitles, 'dCombatSubtitle',
  'combatSubtitle');\r

  \    let dBattleGrid = addDivClass(dCombat, 'dBattleOverview',
  'battleGrid');\r

  \    let ipal = 0,\r

  \      bg,\r

  \      fg,\r

  \      d;\r

  \    for (const loc of this.locations) {\r

  \      [bg, fg, d] = this.makeDBattleOuter(dBattleGrid, ipal);\r

  \      ipal += 1;\r

  \      this.battles[loc].populate(d, 'g' + loc, bg, fg);\r

  \    }\r

  \  }\r

  \  clear_area() {\r

  \    let d = document.getElementById(this.dArea);\r

  \    clearElement(d);\r

  \  }\r

  \  makeDBattleOuter(dBattleGrid, ipal) {\r

  \    let dBattleOuter = addDivClass(dBattleGrid, 'dBattleOuter',
  'battleOuterOverview');\r

  \    let wSides = 80;\r

  \    let bg = getpal(ipal, 0, 'b');\r

  \    let fg = getpal(ipal, 0, 'f');\r

  \    dBattleOuter.style.backgroundColor = bg;\r

  \    dBattleOuter.style.color = fg;\r

  \    ipal += 1;\r

  \    dBattleOuter.style.width = 2 * wSides + this.containerSize.w + 'px';\r

  \    dBattleOuter.style.height = this.containerSize.h + 'px';\r

  \    dBattleOuter.style.border = '1px solid ' + getpal(6);\r

  \    dBattleOuter.style.margin = '10px';\r

  \    dBattleOuter.style.textAlign = 'center';\r

  \    return [bg, fg, dBattleOuter];\r

  \  }\r

  \  update(data, H) {\r

  \    let c = data.temp.combat;\r

  \    unitTestCombat('_______________combat update');\r

  \    unitTestCombatStage('Combat stage=' + c.stage, c, this.battles);\r

  \    if (c.stage == 'opt') {\r

  \      return;\r

  \    } else if (!this.battles && c.stage == 'battle') {\r

  \      this.initBattles(c);\r

  \    }\r

  \    let message = '';\r

  \    if (c.stage == 'opt') {\r

  \      return;\r

  \    } else if (c.stage == 'next') {\r

  \      message = 'SELECT NEXT BATTLE!';\r

  \    } else if (c.stage == 'battle') {\r

  \      if (c.battle.stage == 'battle_start_ack') {\r

  \        if (this.battle) {\r

  \          this.battle.unselectBattle();\r

  \        }\r

  \        this.battle = this.battles[c.battle.tilename];\r

  \      }\r

  \      message = this.battle.update(data, H);\r

  \    } else if (c.stage == 'ack_combat_end') {\r

  \      message = 'COMBAT ENDS!!!'\r

  \    }\r

  \    this.dCombatSubtitle.innerHTML = message;\r

  \    unitTestCombat('_____________________');\r

  \  }\r

  }"
Activator: "class Activator {\r

  \  static maxZIndex = 0;\r

  \  constructor(n, ui, R) {\r

  \    this.n = n;\r

  \    this.ui = isdef(n.uiActive) ? n.uiActive : ui;\r

  \    this.uid = n.uid;\r

  \    this.R = R;\r

  \    this.hoverActive = false;\r

  \    this.clickActive = false;\r

  \  }\r

  \  activate(fEnter, fLeave, fClick) {\r

  \    this.activateHover(fEnter, fLeave); this.activateClick(fClick);\r

  \  }\r

  \  activateHover(fEnter, fLeave) {\r

  \    if (this.hoverActive) return;\r

  \    this.hoverActive = true;\r

  \    this.ui.onmouseenter = (ev) => { ev.stopPropagation(); fEnter(this.uid,
  this.R); }\r

  \    this.ui.onmouseleave = (ev) => { ev.stopPropagation(); fLeave(this.uid,
  this.R); }\r

  \  }\r

  \  activateClick(fClick) {\r

  \    if (this.clickActive) return;\r

  \    this.clickActive = true;\r

  \    this.ui.onclick = (ev) => { ev.stopPropagation(); fClick(this.uid,
  this.R); }\r

  \  }\r

  \  deactivate() {\r

  \    if (!this.hoverActive && !this.clickActive) return;\r

  \    this.deactivateHover();\r

  \    this.deactivateClick();\r

  \  }\r

  \  deactivateHover() {\r

  \    if (!this.hoverActive) return;\r

  \    this.hoverActive = false;\r

  \    removeEvents(this.ui, 'mouseenter', 'mouseleave');\r

  \  }\r

  \  deactivateClick() {\r

  \    if (!this.clickActive) return;\r

  \    this.clickActive = false;\r

  \    removeEvents(this.ui, 'click');\r

  \  }\r

  }"
ADecisiongen: "class ADecisiongen {\r

  \  constructor(assets, map, cards, units, sender) {\r

  \    this.assets = assets;\r

  \    this.autoplay = true;\r

  \    this.decisionMode = 'server';\r

  \    this.priorityDecisions = [];\r

  \    this.scenario = null;\r

  \    this.seed = null;\r

  \    this.player = null;\r

  \    this.phase = null;\r

  \    this.callback = null;\r

  \    this.tuple = null;\r

  \    this.tuples = [];\r

  \    this.choiceCompleted = false;\r

  \    this.choiceList = {};\r

  \    this.UI = new ADecisionUI(assets, map, cards, units);\r

  \    this.playerStrategy = {};\r

  \    this.playerStrategy['Axis'] = new AStrategy(this.assets);\r

  \    this.playerStrategy['West'] = new AStrategy(this.assets);\r

  \    this.playerStrategy['USSR'] = new AStrategy(this.assets);\r

  \  }\r

  \  decideAutoplay(G) {\r

  \    unitTestDecision('decideAutoplay', G, this.decisionMode);\r

  \    this.player = G.player;\r

  \    if (!this.choiceCompleted) {\r

  \      this.choiceCompleted = true;\r

  \      if (this.decisionMode == 'scenario' && this.scenario != null) {\r

  \        this.tuple = this.scenario.findMatch(G);\r

  \        if (!this.tuple) {\r

  \          this.tuple = this.tuples[0];\r

  \        }\r

  \      } else if (this.decisionMode == 'priority') {\r

  \        let found = false;\r

  \        for (const keyword of this.priorityDecisions) {\r

  \          let t = firstCond(this.tuples, t => t.includes(keyword));\r

  \          if (t) {\r

  \            this.tuple = t;\r

  \            found = true;\r

  \            break;\r

  \          }\r

  \        }\r

  \        if (!found) this.tuple = this.tuples[0];\r

  \      } else if (this.decisionMode == 'server') {\r

  \        let info = G.serverData.choice;\r

  \        if (info.count != this.tuples.length) {\r

  \          alert('decideAutoplay: wrong tuple count!!!! ' +
  this.tuples.length + ' should be ' + info.count);\r

  \        }\r

  \        let n = info.random;\r

  \        this.tuple = this.tuples[n];\r

  \        if (!sameList(this.tuple, info.tuple)) {\r

  \          alert('decideAutoplay: tuple incorrect!!! ' +
  this.tuple.toString() + ' should be ' + info.tuples.toString());\r

  \        }\r

  \      } else if (this.decisionMode == 'seed') {\r

  \        let n = this.nextRandom(this.tuples.length);\r

  \        this.tuple = this.tuples[n];\r

  \        unitTestChoice('decideAutoplay seed decision:', n, this.tuple);\r

  \      } else {\r

  \        this.tuple = this.playerStrategy[G.player].chooseTuple(G);\r

  \      }\r

  \      this.UI.restoreNoFilterHighlightType(false);\r

  \      this.highlightChosenTuple(this.tuple);\r

  \      setTimeout(() => this.callback(this.tuple), 10);\r

  \    } else {\r

  \      alert('decideAutoplay: already selected!!!');\r

  \    }\r

  \  }\r

  \  genMove(G, callback, autoplay = true) {\r

  \    unitTestDecision('new genMove call!!! phase:', G.phase, 'autoplay:',
  autoplay);\r

  \    this.callback = callback;\r

  \    this.tuples = G.tuples;\r

  \    this.tuple = null;\r

  \    if (this.seed == null) {\r

  \      this.seed = G.start.seed;\r

  \    }\r

  \    if (autoplay != this.autoplay) {\r

  \      this.autoplay = autoplay;\r

  \    }\r

  \    if (G.phase != this.phase) {\r

  \      this.phase = G.phase;\r

  \    }\r

  \    this.UI.clearHoverTuple();\r

  \    let container = this.presentTuples(this.tuples);\r

  \    this.choiceCompleted = false;\r

  \    if (autoplay) {\r

  \      this.UI.hideUI();\r

  \      this.decideAutoplay(G);\r

  \    } else {\r

  \      this.UI.startManualSelection(this.phase, this.tuples, container,
  this.onSelected.bind(this));\r

  \    }\r

  \  }\r

  \  highlightChosenTuple(tuple, msecs = 30) {\r

  \    let index = this.tuples.indexOf(tuple);\r

  \    let i = Object.keys(this.choiceList).length;\r

  \    let s = '' + index + ':' + tuple.toString();\r

  \    unitTestChoicemin('' + i + ': ' + this.player + '(' + index + '/' +
  this.tuples.length + '): ' + this.tuple.toString());\r

  \    this.choiceList[i] = { index: index, tuple: tuple };\r

  \    let d = document.getElementById('divSelect');\r

  \    let els = document.getElementsByTagName('a');\r

  \    let el = els[index];\r

  \    el.classList.add('selected');\r

  \    ensureInView(d, el);\r

  \  }\r

  \  loadScenario(data, G) {\r

  \    this.scenario = new Scenario(this.assets, data, G, this);\r

  \    this.decisionMode = 'scenario';\r

  \  }\r

  \  nextRandom(max) {\r

  \    unitTestRandom('nextRandom max =', max, ', this.seed =', this.seed);\r

  \    var x = Math.sin(this.seed++) * 10000;\r

  \    let res = Math.floor((x - Math.floor(x)) * max);\r

  \    return res;\r

  \  }\r

  \  onClickStep(G) {\r

  \    if (!this.choiceCompleted) {\r

  \      if (!sameList(this.tuples, G.tuples)) {\r

  \        alert('onClickStep: this.tuples not same as G.tuples!');\r

  \      }\r

  \      this.decideAutoplay(G);\r

  \    }\r

  \  }\r

  \  onSelected(ev) {\r

  \    if (!this.choiceCompleted) {\r

  \      this.choiceCompleted = true;\r

  \      let id = evToIdTNT(ev);\r

  \      let idx = firstNumber(id);\r

  \      this.tuple = this.tuples[idx];\r

  \      unitTestHover('select', this.tuple);\r

  \      this.highlightChosenTuple(this.tuple);\r

  \      this.UI.restoreNoFilterHighlightType(false);\r

  \      this.callback(this.tuple);\r

  \    }\r

  \  }\r

  \  presentTuples(tuples) {\r

  \    let d = document.getElementById('divSelect');\r

  \    clearElement(d);\r

  \    d.scrollTop = 0;\r

  \    let i = 0;\r

  \    for (const t of tuples) {\r

  \      let el = document.createElement('a');\r

  \      el.id = 'aaa' + i;\r

  \      i += 1;\r

  \      el.textContent = t;\r

  \      d.appendChild(el);\r

  \    }\r

  \    return d;\r

  \  }\r

  }"
ADecisionUI: "class ADecisionUI {\r

  \  constructor(assets, map, cards, units) {\r

  \    this.map = map;\r

  \    this.cards = cards;\r

  \    this.units = units;\r

  \    this.assets = assets;\r

  \    this.buttons = {};\r

  \    this.types = ['tile', 'unit', 'nation', 'other'];\r

  \    for (const type of this.types) {\r

  \      let b = document.getElementById('b' + type);\r

  \      this.unselectButton(b);\r

  \      this.buttons[type] = b;\r

  \    }\r

  \    this.extraTypes = [];\r

  \    this.highlightType = null;\r

  \    this.phase = null;\r

  \    this.tuples;\r

  \    this.elTuples;\r

  \    this.byS = {};\r

  \    this.byType = {};\r

  \    this.ituplesByS = {};\r

  \    this.ihideByS = {};\r

  \    this.ituplesByType = {};\r

  \    this.sInTuples = [];\r

  \    this.msSelected = null;\r

  \    this.hoverTuple = null;\r

  \  }\r

  \  clearHoverTuple() {\r

  \    unitTestHover('clearHoverTuple');\r

  \    if (this.hoverTuple) {\r

  \      unitTestHover('clearHoverTuple', this.hoverTuple.id);\r

  \      for (const s of this.hoverTuple.tuple) {\r

  \        let ms = this.get(s).ms;\r

  \        if (ms) ms.stopSelGreen();\r

  \      }\r

  \      this.hoverTuple = null;\r

  \    }\r

  \  }\r

  \  filterByS(ev) {\r

  \    let idElem = evToIdTNT(ev);\r

  \    let clickedOnSelected = this.msSelected && this.msSelected.elem.id ==
  idElem;\r

  \    this.restoreNoFilterHighlightType();\r

  \    if (clickedOnSelected) return;\r

  \    let id = idElem in this.assets.uid2id ? this.assets.uid2id[idElem] :
  idElem;\r

  \    let ms = this.byS[id].ms;\r

  \    this.msSelected = ms;\r

  \    unitTestFilter('filterByS', idElem, id);\r

  \    for (let i = 0; i < this.tuples.length; i++) {\r

  \      const t = this.tuples[i];\r

  \      const el = this.elTuples[i];\r

  \      if (!t.includes(id)) {\r

  \        el.style = 'display:none';\r

  \      } else if (this.phase == 'Movement' && t.length > 1 &&
  this.get(id).type == 'tile' && t[1] != id) {\r

  \        el.style = 'display:none';\r

  \      } else {\r

  \        for (const s of t) {\r

  \          if (this.phase == 'Setup' && this.get(s).type == 'nation')
  continue;\r

  \          let ms = this.get(s).ms;\r

  \          if (ms) ms.select();\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  filterByType() {\r

  \    let type = this.highlightType;\r

  \    unitTestFilterByType('filterByType', type, this.tuples.length,
  this.ituplesByType[type].toString());\r

  \    for (let i = 0; i < this.tuples.length; i++) {\r

  \      if (!this.ituplesByType[type].includes(i)) {\r

  \        this.elTuples[i].style = 'display:none';\r

  \      }\r

  \    }\r

  \  }\r

  \  get(s) {\r

  \    if (s in this.byS) {\r

  \      return this.byS[s];\r

  \    }\r

  \    let type = null;\r

  \    let ms = null;\r

  \    if (s in this.units.uis) {\r

  \      ms = this.units.uis[s].ms;\r

  \      type = 'unit';\r

  \    } else if (s in this.map.tiles) {\r

  \      ms = this.map.tiles[s];\r

  \      type = 'tile';\r

  \    } else if (s in this.map.nations) {\r

  \      ms = this.map.nations[s];\r

  \      type = 'nation';\r

  \    } else if (s in this.map.influences) {\r

  \      ms = this.map.influences[s];\r

  \      unitTestFilterNation('ms', ms);\r

  \      type = 'nation';\r

  \    } else if (this.cards.inVisibleHand(s)) {\r

  \      ms = this.cards.getCardMs(s);\r

  \      type = 'card';\r

  \    } else {\r

  \      type = 'other';\r

  \    }\r

  \    this.byS[s] = { ms: ms, type: type };\r

  \    return this.byS[s];\r

  \  }\r

  \  hideUI() {\r

  \    Object.values(this.buttons).map(x => hide(x));\r

  \  }\r

  \  highlightObjects() {\r

  \    let ids = this.byType[this.highlightType];\r

  \    if (this.highlightType == 'other') {\r

  \      this.extraTypes.map(t => this.byType[t].map(s => ids.push(s)));\r

  \    }\r

  \    unitTestFilterByType('highlightType:', this.highlightType, 'ids',
  ids);\r

  \    for (const s of ids) {\r

  \      let ms = this.byS[s].ms;\r

  \      if (ms) {\r

  \        ms.makeSelectable(this.filterByS.bind(this));\r

  \      }\r

  \    }\r

  \    let tilesVisible = this.map.tiles['London'].isVisible;\r

  \    let nationsVisible = this.map.nations['Britain'].isVisible;\r

  \    if (this.highlightType == 'nation') {\r

  \      if (tilesVisible) Object.values(this.map.tiles).map(o => o.hide());\r

  \    } else if (!tilesVisible) {\r

  \      Object.values(this.map.tiles).map(o => o.show());\r

  \    }\r

  \    if (this.highlightType == 'tile') {\r

  \      if (nationsVisible) Object.values(this.map.nations).map(o =>
  o.hide());\r

  \    } else if (!nationsVisible) {\r

  \      Object.values(this.map.nations).map(o => o.show());\r

  \    }\r

  \    unitTestFilterByType('ids.length', ids.length);\r

  \    if (this.tuples.length > 24) {\r

  \      this.filterByType();\r

  \    }\r

  \  }\r

  \  onExitTuple(ev) {\r

  \    if (this.hoverTuple) {\r

  \      unitTestHover('exit', this.hoverTuple.id);\r

  \    } else {\r

  \      unitTestHover('exit null');\r

  \    }\r

  \    this.clearHoverTuple();\r

  \  }\r

  \  onEnterTuple(ev) {\r

  \    let idTuple = evToIdTNT(ev);\r

  \    unitTestHover('enter', idTuple);\r

  \    if (this.hoverTuple != null && this.hoverTuple.id == idTuple) return;\r

  \    let idx = firstNumber(idTuple);\r

  \    let tuple = this.tuples[idx];\r

  \    this.hoverTuple = { id: idTuple, idx: idx, tuple: tuple };\r

  \    for (const s of tuple) {\r

  \      let ms = this.get(s).ms;\r

  \      if (ms) ms.selGreen();\r

  \    }\r

  \  }\r

  \  restoreNoFilterHighlightType(highlight = true) {\r

  \    this.elTuples.map(el => (el.style = ''));\r

  \    this.clearHoverTuple();\r

  \    for (const s of this.sInTuples) {\r

  \      let ms = this.get(s).ms;\r

  \      if (ms) {\r

  \        ms.stopSelGreen();\r

  \        ms.makeUnselectable();\r

  \      }\r

  \    }\r

  \    this.msSelected = null;\r

  \    if (highlight) this.highlightObjects();\r

  \    else {\r

  \      let tilesVisible = this.map.tiles['London'].isVisible;\r

  \      let nationsVisible = this.map.nations['Britain'].isVisible;\r

  \      if (!tilesVisible) {\r

  \        Object.values(this.map.tiles).map(o => o.show());\r

  \      }\r

  \      if (!nationsVisible) {\r

  \        Object.values(this.map.nations).map(o => o.show());\r

  \      }\r

  \    }\r

  \  }\r

  \  startManualSelection(phase, tuples, container, onSelectedHandler) {\r

  \    this.tuples = tuples;\r

  \    this.elTuples = arrChildren(container);\r

  \    for (const el of this.elTuples) {\r

  \      el.addEventListener('click', onSelectedHandler);\r

  \      el.addEventListener('mouseenter', this.onEnterTuple.bind(this));\r

  \      el.addEventListener('mouseleave', this.onExitTuple.bind(this));\r

  \    }\r

  \    this.sInTuples = [];\r

  \    this.byType = {};\r

  \    this.ituplesByType = {};\r

  \    this.ihideByType = {};\r

  \    this.ituplesByS = {};\r

  \    for (const [i, t] of this.tuples.entries()) {\r

  \      for (const s of t) {\r

  \        if (this.assets.nationalityNames.includes(s) ||
  this.assets.unitTypeNames.includes(s)) {\r

  \          if (t.length > 1) continue;\r

  \        }\r

  \        addIf_dep(s, this.sInTuples);\r

  \        let o = this.get(s);\r

  \        if (['Albania', 'Malta', 'Gibraltar'].includes(s)) {\r

  \          if (this.phase == 'Movement') {\r

  \            if (t.length == 1) {\r

  \              o.type = 'nation';\r

  \            } else {\r

  \              o.type = 'tile';\r

  \            }\r

  \          } else if (this.phase == 'Government') {\r

  \            if (any(t, x => startsWith(x, 'action_'))) {\r

  \              o.type = 'nation';\r

  \            } else {\r

  \              o.type = 'tile';\r

  \            }\r

  \          }\r

  \        }\r

  \        addIf_depDict(o.type, s, this.byType);\r

  \        addIf_depDict(o.type, i, this.ituplesByType);\r

  \        addIf_depDict(s, i, this.ituplesByS);\r

  \      }\r

  \    }\r

  \    let types = Object.keys(this.byType);\r

  \    for (const t of this.types) {\r

  \      if (!types.includes(t)) {\r

  \        hide(this.buttons[t]);\r

  \      } else {\r

  \        show(this.buttons[t]);\r

  \      }\r

  \    }\r

  \    this.extraTypes = [];\r

  \    for (const t of types) {\r

  \      if (!this.types.includes(t)) {\r

  \        this.extraTypes.push(t);\r

  \      }\r

  \    }\r

  \    let recommendedHighlightType = this.checkPhaseChange(phase);\r

  \    unitTestFilterByType('270: ', recommendedHighlightType);\r

  \    if (!types.includes(recommendedHighlightType)) {\r

  \      recommendedHighlightType = types[0];\r

  \      unitTestFilterByType('273: ', recommendedHighlightType, types);\r

  \    }\r

  \    this.highlightType = recommendedHighlightType;\r

  \    unitTestFilterByType('nach setting highlightType 277: ',
  recommendedHighlightType, this.highlightType);\r

  \    for (const t in this.buttons) {\r

  \      if (t == this.highlightType) {\r

  \        this.selectButton(this.buttons[t]);\r

  \      } else {\r

  \        this.unselectButton(this.buttons[t]);\r

  \      }\r

  \    }\r

  \    this.highlightObjects();\r

  \  }\r

  \  setHighlightType(button) {\r

  \    if (this.highlightType != null) {\r

  \      this.unselectButton(this.buttons[this.highlightType]);\r

  \    }\r

  \    this.highlightType = button.id.substring(1);\r

  \    unitTestFilterByType('setting new highlightType 292:',
  this.highlightType);\r

  \    this.selectButton(button);\r

  \    this.restoreNoFilterHighlightType();\r

  \  }\r

  \  selectButton(b) {\r

  \    b.style.backgroundColor = '#2196f3';\r

  \    b.style.color = 'white';\r

  \  }\r

  \  unselectButton(b) {\r

  \    b.style.backgroundColor = 'white';\r

  \    b.style.color = '#2196f3';\r

  \  }\r

  \  checkPhaseChange(newPhase) {\r

  \    if (this.phase == newPhase) return this.highlightType;\r

  \    this.phase = newPhase;\r

  \    switch (this.phase) {\r

  \      case 'Government':\r

  \        return 'nation';\r

  \      case 'Movement':\r

  \      case 'Battle':\r

  \      case 'Land_Battle':\r

  \      case 'Sea_Battle':\r

  \        return 'unit';\r

  \      case 'Spring':\r

  \      case 'Summer':\r

  \      case 'Fall':\r

  \        return 'other';\r

  \      case 'Setup':\r

  \      case 'Production':\r

  \      default:\r

  \        return 'tile';\r

  \    }\r

  \  }\r

  }"
AFilterList: "class AFilterList {\r

  \  constructor() {\r

  \  }\r

  }"
Agent: "class Agent {\r

  \  constructor(home, speed, zackig, aussehen, startpos) {\r

  \    this.home = home;\r

  \    this.isMap = is_map(home);\r

  \    console.log('is_map?', this.isMap);\r

  \    this.pos = isdef(startpos) ? startpos : this.isMap ?
  home.options.center : null;\r

  \    this.speed = speed;\r

  \    this.rGen = zackig ? rFloat : rGaussian;\r

  \    this.ui = create_agent(home, aussehen);\r

  \    if (isdef(startpos)) this.moveto(startpos);\r

  \  }\r

  \  moveto(coords) {\r

  \    if (this.isMap) map_moveto(this.ui, coords); else mPos(this.ui,
  coords[0], coords[1]);\r

  \    this.pos = coords;\r

  \  }\r

  \  movefor(secs) {\r

  \    let f = x => x + this.rGen(-this.speed, this.speed);\r

  \    run_for_seconds(secs, () => { map_moveby(this.ui, f, f); })\r

  \  }\r

  \  move() {\r

  \    let f = x => x + rGen(-speed, speed);\r

  \    this.interval = setInterval(() => map_moveby(this.ui, f, f), 50);\r

  \  }\r

  \  stop_moving() { clearInterval(this.interval); }\r

  }"
AGraph: "class AGraph {\r

  \  constructor() {\r

  \    this.init(...arguments);\r

  \    this.posDict = {};\r

  \  }\r

  \  init() {\r

  \    let defOptions = {\r

  \      maxZoom: 1,\r

  \      minZoom: .001,\r

  \      motionBlur: false,\r

  \      zoomingEnabled: false,\r

  \      userZoomingEnabled: false,\r

  \      panningEnabled: false,\r

  \      userPanningEnabled: false,\r

  \      boxSelectionEnabled: false,\r

  \      layout: { name: 'preset' },\r

  \      elements: [],\r

  \    };\r

  \    this.cy = cytoscape(defOptions);\r

  \  }\r

  \  clear() { this.cy.destroy(); }\r

  \  //#region access and algos\r

  \  getComponents() { return this.cy.elements().components(); }\r

  \  getComponentIds() { return this.cy.elements().components().map(x =>
  x.id()); }\r

  \  getCommonEdgeId(nid1, nid2) { return nid1 + '_' + nid2; }\r

  \  getNumComponents() { return this.cy.elements().components().length; }\r

  \  getNode(id) { return this.cy.getElementById(id); }\r

  \  getEdge(id) { return this.cy.getElementById(id); }\r

  \  getNodes() { return this.cy.nodes(); }\r

  \  getNodeIds() { return this.cy.nodes().map(x => x.id()); }\r

  \  getNodeData() { return this.cy.nodes().map(x => x.data()); }\r

  \  getNodePositions() { return this.cy.nodes.map(x => x.position()); }\r

  \  getEdges() { return this.cy.edges(); }\r

  \  getEdgeIds() { return this.cy.edges().map(x => x.id()); }\r

  \  getPosition(id) {\r

  \    let node = this.getNode(id);\r

  \    let pos = node.renderedPosition();\r

  \    return pos;\r

  \  }\r

  \  getSize(id) {\r

  \    let node = this.getNode(id);\r

  \    let pos = node.bb();\r

  \    return pos;\r

  \  }\r

  \  getProp(id, prop) { return this.cy.getElementById(id).data(prop); }\r

  \  getDegree(id) { return this.cy.getElementById(id).degree(); }\r

  \  getNodeWithMaxDegree(idlist) {\r

  \    if (nundef(idlist)) idlist = this.cy.elements().filter('node').map(x =>
  x.data().id);\r

  \    let imax = arrMinMax(idlist, x => this.getDegree(x)).imax;\r

  \    let id = idlist[imax];\r

  \    return id;\r

  \  }\r

  \  getShortestPathsFrom(id) { let res = this.cy.elements().dijkstra('#' +
  id); return res; }\r

  \  getShortestPathFromTo(nid1, nid2) {\r

  \    let funcs = this.dijkstra = this.getShortestPathsFrom(nid1);\r

  \    let path = funcs.pathTo('#' + nid2);\r

  \    return path;\r

  \  }\r

  \  getLengthOfShortestPath(nid1, nid2) {\r

  \    let funcs = this.dijkstra = this.getShortestPathsFrom(nid1);\r

  \    let len = funcs.distanceTo('#' + nid2);\r

  \    return len;\r

  \  }\r

  \  setPositionData(prop = 'center') {\r

  \    let ids = this.getNodeIds();\r

  \    for (const id of ids) {\r

  \      let pos = this.getProp(id, prop);\r

  \      if (isdef(pos)) this.setPosition(id, pos.x, pos.y);\r

  \      else return false;\r

  \    }\r

  \    return true;\r

  \  }\r

  \  sortNodesByDegree(idlist, descending = true) {\r

  \    if (nundef(idlist)) idlist = this.cy.nodes.map(x => x.data().id);\r

  \    let nodes = idlist.map(x => this.getNode(x));\r

  \    for (const n of nodes) {\r

  \      n.degree = this.getDegree(n.id());\r

  \    }\r

  \    if (descending) sortByDescending(nodes, 'degree'); else sortBy(nodes,
  'degree');\r

  \    return nodes;\r

  \  }\r

  \  storeCurrentPositions(prop = 'center') {\r

  \    for (const n of this.getNodes()) {\r

  \      let id = n.id();\r

  \      let pos = this.getPosition(id);\r

  \      this.setProp(id, prop, pos);\r

  \    }\r

  \  }\r

  \  //#endregion\r

  \  //#region add/remove nodes, edges\r

  \  addNode(data, coords) {\r

  \    if (nundef(data)) data = {};\r

  \    if (nundef(data.id)) data.id = getFruid();\r

  \    if (isdef(coords)) {\r

  \      coords.x -= this.cy.pan().x;\r

  \      coords.y -= this.cy.pan().y;\r

  \    } else { coords = { x: 0, y: 0 }; }\r

  \    var ele = this.cy.add({\r

  \      group: 'nodes',\r

  \      data: data,\r

  \      position: coords\r

  \    });\r

  \    return ele.id();\r

  \  }\r

  \  addNodes(n, datalist, coordlist) {\r

  \    let ids = [];\r

  \    if (nundef(datalist)) datalist = new Array(n).map(x => ({ id:
  getFruid() }));\r

  \    if (nundef(coordlist)) coordlist = new Array(n).map(x => ({ coords: {
  x: 0, y: 0 } }));\r

  \    for (let i = 0; i < n; i++) {\r

  \      let id = this.addNode(datalist[i], coordlist[i]);\r

  \      ids.push(id);\r

  \    }\r

  \    return ids;\r

  \  }\r

  \  addEdge(nid1, nid2, data) {\r

  \    if (nundef(data)) data = {};\r

  \    data.id = this.getCommonEdgeId(nid1, nid2);\r

  \    data.source = nid1;\r

  \    data.target = nid2;\r

  \    var ele = this.cy.add({\r

  \      group: 'edges',\r

  \      data: data,\r

  \    });\r

  \    return ele.id();\r

  \  }\r

  \  addEdges(nOrNodePairList) {\r

  \    if (isNumber(nOrNodePairList)) {\r

  \      let nids = this.getNodeIds();\r

  \      let prod = arrPairs(nids);\r

  \      nOrNodePairList = choose(prod, nOrNodePairList);\r

  \    }\r

  \    let res = [];\r

  \    for (const pair of nOrNodePairList) {\r

  \      res.push(this.addEdge(pair[0], pair[1]));\r

  \    }\r

  \    return res;\r

  \  }\r

  \  removeNode(node) { this.removeElement(node); return this.getNodeIds();
  }\r

  \  removeEdge(edge) { this.removeElement(edge); return this.getEdgeIds();
  }\r

  \  removeElement(ne) { if (!isString(ne)) ne = ne.id();
  this.cy.getElementById(ne).remove(); }\r

  \  //#endregion\r

  \  //#region modify nodes, edges (data, position...)\r

  \  setPosition(id, x, y) { this.cy.getElementById(id).position({ x: x, y: y
  }); }\r

  \  setProp(id, prop, val) { this.cy.getElementById(id).data(prop, val); }\r

  \  //#endregion\r

  }"
AHand: "class AHand {\r

  \  constructor(assets, gName, divName, ownerOrOpen) {\r

  \    this.id = ownerOrOpen;\r

  \    this.cards = {};\r

  \    this.cardWidth = assets.SZ.cardWidth;\r

  \    this.cardHeight = assets.SZ.cardHeight;\r

  \    this.gap = assets.SZ.gap;\r

  \    this.startPos = { x: 80 + this.gap + this.cardWidth / 2, y: this.gap +
  this.cardHeight / 2 };\r

  \    this.div = document.getElementById(divName);\r

  \    this.g = document.getElementById(gName);\r

  \    this.wDiv = this.div.offsetWidth;\r

  \    this.hDiv = firstNumber(this.div.style.height);\r

  \    this.xNext = this.startPos.x;\r

  \    this.yNext = this.startPos.y;\r

  \  }\r

  \  addExisting(id, o, ms) {\r

  \    ms.parent = this.g;\r

  \    this.positionAndAdd(id, ms, o);\r

  \    return ms;\r

  \  }\r

  \  addNew(id, o) {\r

  \    let parentName = this.g.id;\r

  \    let ms = new MS(id, parentName);\r

  \    this.setCardContent(ms, o);\r

  \    this.positionAndAdd(id, ms, o);\r

  \    return ms;\r

  \  }\r

  \  getNextPosition() {\r

  \    let x = this.xNext;\r

  \    let y = this.yNext;\r

  \    if (x + this.cardWidth / 2 + this.gap > this.wDiv) {\r

  \      x = this.startPos.x;\r

  \      y += this.cardHeight + this.gap;\r

  \      let sizeNeeded = y + this.cardHeight / 2 + this.gap;\r

  \      if (this.hDiv < sizeNeeded) {\r

  \        this.hDiv = sizeNeeded;\r

  \        this.div.style.height = this.hDiv + \"px\";\r

  \      }\r

  \    }\r

  \    this.xNext = x + this.gap + this.cardWidth;\r

  \    this.yNext = y;\r

  \    let pos = { x: x, y: y };\r

  \    return pos;\r

  \  }\r

  \  hide() {\r

  \    hide(this.g);\r

  \  }\r

  \  getTitle(id) {\r

  \    if (id in this.cards) {\r

  \      return this.cards[id].ms.getTag('title');\r

  \    } else { return 'unknown' }\r

  \  }\r

  \  positionAndAdd(id, ms, o) {\r

  \    let pos = this.getNextPosition();\r

  \    ms.setPos(pos.x, pos.y).draw();\r

  \    this.cards[id] = { ms: ms, o: jsCopy(o) };\r

  \  }\r

  \  relayout() {\r

  \    this.xNext = this.startPos.x;\r

  \    this.yNext = this.startPos.y;\r

  \    for (const id in this.cards) {\r

  \      const ms = this.cards[id].ms;\r

  \      let pos = this.getNextPosition();\r

  \      ms.setPos(pos.x, pos.y).draw();\r

  \    }\r

  \  }\r

  \  relayoutExcept(id) {\r

  \    this.xNext = this.startPos.x;\r

  \    this.yNext = this.startPos.y;\r

  \    for (const id1 in this.cards) {\r

  \      if (id1 == id) continue;\r

  \      const ms = this.cards[id1].ms;\r

  \      let pos = this.getNextPosition();\r

  \      ms.setPos(pos.x, pos.y).draw();\r

  \    }\r

  \  }\r

  \  remove(id) {\r

  \    if (!(id in this.cards)) {\r

  \      return null;\r

  \    }\r

  \    let ms = this.cards[id].ms;\r

  \    ms.removeFromUI();\r

  \    this.relayoutExcept(id);\r

  \    let chLast = this.g.lastChild;\r

  \    if (\"id\" in chLast) {\r

  \      let idLast = chLast.id;\r

  \      if (idLast in this.cards) {\r

  \        let msLast = this.cards[idLast].ms;\r

  \        let posLast = msLast.getPos();\r

  \        let hNeeded = posLast.y + this.cardHeight / 2 + this.gap;\r

  \        let otherHNeeded = msLast.bounds.b + this.gap;\r

  \        if (hNeeded != otherHNeeded) {\r

  \        }\r

  \        if (hNeeded < 200) hNeeded = 200;\r

  \        if (this.hDiv > hNeeded && isVisible(this.g)) {\r

  \          this.hDiv = hNeeded;\r

  \          this.div.style.height = this.hDiv + \"px\";\r

  \        }\r

  \      }\r

  \    }\r

  \    delete this.cards[id];\r

  \    return ms;\r

  \  }\r

  \  setCardContent(ms, o) {\r

  \    let txt = [];\r

  \    let title = \"\";\r

  \    if (\"top\" in o) {\r

  \      if (o.obj_type == \"action_card\") {\r

  \        txt = [o.top, \" \", o.season, o.priority + o.value, \" \",
  o.bottom];\r

  \      } else {\r

  \        txt = [o.top, \" \", \" \", o.value ? o.value.toString() : \" \",
  \" \", \" \", o.bottom];\r

  \      }\r

  \      title = o.top;\r

  \    } else if (\"wildcard\" in o) {\r

  \      txt = [o.wildcard, \" \", o.season, o.priority + o.value, \" \", \"
  \"];\r

  \      title = o.wildcard;\r

  \    } else if (\"intelligence\" in o) {\r

  \      txt = [o.intelligence, \" \", \" \", o.value ? o.value.toString() :
  \" \", \" \", \" \", \" \"];\r

  \      title = o.intelligence;\r

  \    } else if (\"science\" in o) {\r

  \      txt = [o.value + \"   (\" + o.year.toString() + \")\"];\r

  \      o.science.map(x => txt.push(x));\r

  \      title = o.year;\r

  \    }\r

  \    if (txt.length > 0) {\r

  \      txt = txt.map(x => x.replace(/_/g, \" \"));\r

  \    }\r

  \    let cardWidth = this.cardWidth;\r

  \    let cardHeight = this.cardHeight;\r

  \    let testText = ms.id;\r

  \    if (\"owner\" in o) {\r

  \      testText += \" \" + o.owner;\r

  \    }\r

  \    ms.roundedRect({ className: 'ground', w: cardWidth, h: cardHeight,
  fill: \"white\" })\r

  \      .text({ txt: testText, fill: \"red\", y: cardHeight / 2, fz:
  cardWidth / 7 })\r

  \      .textMultiline({ txt: txt, maxWidth: cardWidth, fz: cardWidth / 7
  })\r

  \      .roundedRect({ className: \"overlay\", w: cardWidth, h: cardHeight
  });\r

  \    ms.tag(\"content\", txt);\r

  \    ms.tag(\"type\", o.obj_type);\r

  \    ms.tag(\"title\", title);\r

  \    ms.tag(\"json\", JSON.stringify(o));\r

  \    return ms;\r

  \  }\r

  \  show() {\r

  \    show(this.g);\r

  \    let divHeight = firstNumber(this.div.style.height);\r

  \    if (this.hDiv != divHeight) {\r

  \      this.div.style.height = this.hDiv + \"px\";\r

  \    }\r

  \  }\r

  \  sort(prop) { }\r

  \  update(id, o_new) {\r

  \  }\r

  }"
AIPlayer: "class AIPlayer {\r

  \  constructor(max_depth = -1) {\r

  \    this.id = getUID('AI');\r

  \    this.color = randomColor();\r

  \    this.type = 'ai';\r

  \    this.score = 0;\r

  \  }\r

  \  setData(o) { copyKeys(o, this); }\r

  }"
AMap: "class AMap {\r

  \  constructor(assets) {\r

  \    this.assets = assets;\r

  \    this.tiles = {};\r

  \    this.chips = {};\r

  \    this.influences = {};\r

  \    this.vpts = { Axis: [], West: [], USSR: [] };\r

  \    this.calculateStatsPositions();\r

  \    this.dowPositions = this.calculateDowPositions();\r

  \    this.nations = this.assets.drawNationPositions();\r

  \  }\r

  \  calculateDowPositions() {\r

  \    let dp = {};\r

  \    dp[this.dowKey('West', 'USSR')] = { x: 1244, y: 142 };\r

  \    dp[this.dowKey('West', 'Axis')] = { x: 1178, y: 142 };\r

  \    dp[this.dowKey('Axis', 'West')] = { x: 613, y: 2054 };\r

  \    dp[this.dowKey('Axis', 'USSR')] = { x: 679, y: 2054 };\r

  \    dp[this.dowKey('USSR', 'West')] = { x: 3332, y: 268 };\r

  \    dp[this.dowKey('USSR', 'Axis')] = { x: 3332, y: 334 };\r

  \    return dp;\r

  \  }\r

  \  calculateStatsPositions() {\r

  \    let arr = [];\r

  \    let x = 580;\r

  \    let y = 2120;\r

  \    for (let i = 0; i < 25; i++) {\r

  \      arr.push({ x: x, y: y });\r

  \      x += 66;\r

  \    }\r

  \    this.vpts.Axis = arr;\r

  \    arr = [];\r

  \    x = 1310;\r

  \    y = 76;\r

  \    for (let i = 0; i < 20; i++) {\r

  \      arr.push({ x: x, y: y });\r

  \      x -= 66;\r

  \    }\r

  \    for (let i = 20; i < 25; i++) {\r

  \      arr.push({ x: x, y: y });\r

  \      y += 66;\r

  \    }\r

  \    this.vpts.West = arr;\r

  \    arr = [];\r

  \    x = 2210;\r

  \    y = 76;\r

  \    for (let i = 0; i < 18; i++) {\r

  \      arr.push({ x: x, y: y });\r

  \      x += 66;\r

  \    }\r

  \    for (let i = 18; i < 25; i++) {\r

  \      arr.push({ x: x, y: y });\r

  \      y += 66;\r

  \    }\r

  \    this.vpts.USSR = arr;\r

  \  }\r

  \  createChip(id, { text = '', filename = '', prefix = '', faction = '',
  color = 'beige' } = {}) {\r

  \    let sz = this.assets.SZ.chip;\r

  \    let pts = this.vpts[faction];\r

  \    let pos = pts[0];\r

  \    let ms = new MS(id, 'mapG', assets.getUniqueId(id))\r

  \      .roundedRect({ w: sz, h: sz, fill: color })\r

  \      .text({ txt: text, fill: 'white', weight: 'bold' })\r

  \      .setPos(pos.x + sz / 2, pos.y + sz / 2)\r

  \      .draw();\r

  \    return ms;\r

  \  }\r

  \  createInfluence(id, nation, faction, value) {\r

  \    unitTestMap('createInfluence', id, nation, faction, value);\r

  \    let ms = new MS(id, 'mapG', assets.getUniqueId(id));\r

  \    this.drawInfluence(ms, nation, faction, value);\r

  \    let pos = this.assets.nationPositions[nation];\r

  \    let x = pos.x;\r

  \    let y = pos.y;\r

  \    ms.setPos(x, y).draw();\r

  \    return ms;\r

  \  }\r

  \  createTile(id, o) {\r

  \    let pos = this.assets.tilePositions[id];\r

  \    let sz = this.assets.SZ.tile;\r

  \    let ms = new MS(id, 'mapG', this.assets.getUniqueId(id))\r

  \      .circle({ className: 'ground', fill: 'transparent', sz: sz })\r

  \      .circle({ className: 'overlay region', sz: sz })\r

  \      .setPos(pos.x, pos.y)\r

  \      .draw();\r

  \    if ('owner' in o) {\r

  \      ms.tag('owner', o.owner);\r

  \    }\r

  \    return ms;\r

  \  }\r

  \  dowKey(declarer, other) {\r

  \    return declarer + 'DoW' + other;\r

  \  }\r

  \  drawInfluence(ms, nation, faction, level) {\r

  \    if (faction === undefined) {\r

  \      alert('drawInfluence faction undefined!!!');\r

  \    }\r

  \    let imagePath = '/a/assets/images/' + faction + '.svg';\r

  \    let color = colorArrToString(...this.assets.troopColors[faction]);\r

  \    let darker = pSBC(-0.4, color);\r

  \    let lighter = pSBC(0.4, color);\r

  \    let sz = this.assets.SZ.influence + 10 * level;\r

  \    let szOuter = sz + 10;\r

  \    let szFrame = szOuter + 10;\r

  \    let szImage = sz;\r

  \    let y = szImage / 6;\r

  \    let text = level;\r

  \    let rd = dlColor(0.5, 255, 0, 0);\r

  \    let fontColor = level != 2 ? 'black' : rd;\r

  \    ms.circle({ className: 'ground', fill: darker, alpha: 1, sz: szFrame
  })\r

  \      .circle({ fill: color, alpha: 1, sz: szOuter })\r

  \      .image({ path: imagePath, w: szImage, h: sz })\r

  \      .text({ txt: text, fill: fontColor, fz: szImage - 5, weight: 'bold'
  })\r

  \      .circle({ className: 'overlay', sz: szOuter });\r

  \    ms.tag('nation', nation);\r

  \    ms.tag('faction', faction);\r

  \    ms.tag('level', level);\r

  \    ms.tag('type', 'influence');\r

  \    return ms;\r

  \  }\r

  \  setPopulation(faction, n) {\r

  \    this.setChip('pop', 'P', faction, n, 'sienna');\r

  \  }\r

  \  setIndustry(faction, n) {\r

  \    this.setChip('ind', 'I', faction, n, 'red');\r

  \  }\r

  \  setResource(faction, n) {\r

  \    this.setChip('res', 'R', faction, n, 'green');\r

  \  }\r

  \  setChip(prefix, text, faction, n, color) {\r

  \    n -= 1;\r

  \    let pts = this.vpts[faction];\r

  \    if (n < 0 || (n >= pts.length && !GLOBAL_ALERT)) {\r

  \      alert(text + 'setChip!!!! ' + (n + 1) + ', ' + prefix + ', ' + text +
  ', ' + faction);\r

  \      GLOBAL_ALERT = true;\r

  \      STOP = true;\r

  \    }\r

  \    let id = prefix + faction;\r

  \    if (!(id in this.chips)) {\r

  \      this.chips[id] = this.createChip(id, { text: text, prefix: prefix,
  faction: faction, color: color });\r

  \    }\r

  \    let ms = this.chips[id];\r

  \    if (n >= 0 && n < pts.length) {\r

  \      let pos = pts[n];\r

  \      let offset = 7;\r

  \      let yOffset = text == 'P' ? -offset : text == 'I' ? 0 : offset;\r

  \      let xOffset = text == 'P' ? -offset : text == 'I' ? 0 : offset;\r

  \      pos = { x: pos.x + xOffset, y: pos.y + yOffset };\r

  \      ms.setPos(pos.x, pos.y);\r

  \    } else {\r

  \      ms.hide();\r

  \    }\r

  \  }\r

  \  updateInfluence(id, nation, faction, value) {\r

  \    unitTestMap('updateInfluence', id, nation, faction, value);\r

  \    let ms = this.influences[id];\r

  \    ms.show();\r

  \    ms.removeFromChildIndex(1);\r

  \    this.drawInfluence(ms, nation, faction, value);\r

  \  }\r

  \  update(data, gameObjs) {\r

  \    if ('created' in data) {\r

  \      for (const id in data.created) {\r

  \        let o_new = data.created[id];\r

  \        if (o_new.obj_type == 'tile') {\r

  \          if (id in this.tiles) {\r

  \            let ms = this.tiles[id];\r

  \            let owner_old = ms.getTag('owner');\r

  \            if ('owner' in o_new && owner_old != o_new.owner) {\r

  \              ms.tag('owner', o_new.owner);\r

  \            }\r

  \            let blockaded_old = ms.getTag('blockaded');\r

  \            if ('blockaded' in o_new && o_new.blockaded && !blockaded_old)
  {\r

  \              ms.addBorder('black');\r

  \              ms.tag('blockaded', true);\r

  \            } else if (blockaded_old) {\r

  \              ms.tag('blockaded', false);\r

  \              ms.removeBorder();\r

  \            }\r

  \            let blockaded_afr_old = ms.getTag('blockaded_afr');\r

  \            if ('blockaded_afr' in o_new && o_new.blockaded_afr &&
  !blockaded_afr_old) {\r

  \              ms.addBorder('red');\r

  \              ms.tag('blockaded_afr', true);\r

  \            } else if (blockaded_afr_old) {\r

  \              ms.tag('blockaded_afr', false);\r

  \              ms.removeBorder();\r

  \            }\r

  \            continue;\r

  \          }\r

  \          this.tiles[id] = this.createTile(id, o_new);\r

  \          gameObjs[id] = o_new;\r

  \        } else if (o_new.obj_type == 'influence' && 'nation' in o_new &&
  'faction' in o_new) {\r

  \          unitTestMap('map update', id, this.influences);\r

  \          if (id in this.influences) {\r

  \            unitTestMap(id, 'is in this.influences');\r

  \            let o_old = gameObjs[id];\r

  \            unitTestMap('vor propDiff', o_old, o_new);\r

  \            let d = propDiff(o_old, o_new);\r

  \            if (d.hasChanged) {\r

  \              unitTestMap('influence has changed props:',
  d.summary.toString());\r

  \              this.updateInfluence(id, o_new.nation, o_new.faction,
  o_new.value);\r

  \            }\r

  \          } else {\r

  \            this.influences[id] = this.createInfluence(id, o_new.nation,
  o_new.faction, o_new.value);\r

  \          }\r

  \          gameObjs[id] = o_new;\r

  \        }\r

  \      }\r

  \    }\r

  \    if ('removed' in data) {\r

  \      for (const id in data.removed) {\r

  \        if (id in gameObjs) {\r

  \          let o = gameObjs[id];\r

  \          if (o.obj_type == 'influence') {\r

  \            let ms = this.influences[id];\r

  \            ms.removeFromUI();\r

  \            delete gameObjs[id];\r

  \            delete this.influences[id];\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \    if ('players' in data.info) {\r

  \      for (const faction in data.info.players) {\r

  \        let pl = data.info.players[faction];\r

  \        this.setPopulation(faction, pl.tracks.POP);\r

  \        this.setResource(faction, pl.tracks.RES);\r

  \        this.setIndustry(faction, pl.tracks.IND);\r

  \        for (const other in pl.DoW) {\r

  \          if (pl.DoW[other]) {\r

  \            let dowId = this.dowKey(faction, other);\r

  \            if (!(dowId in this.chips)) {\r

  \              let pos = this.dowPositions[dowId];\r

  \              this.chips[dowId] = new MS(dowId, 'mapG',
  this.assets.getUniqueId(dowId))\r

  \                .circle({ className: 'dowChip', fill: 'transparent', sz: 60
  })\r

  \                .setPos(pos.x, pos.y)\r

  \                .draw();\r

  \            }\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  }"
Anim: "class Anim {\r

  \  constructor(id, gid) {\r

  \    this.timer = null;\r

  \  }\r

  \  start() {\r

  \  }\r

  \  end() {\r

  \  }\r

  }"
AnimationQueue: "class AnimationQueue {\r

  \  constructor() {\r

  \    this.anilist = {};\r

  \  }\r

  \  end() {\r

  \  }\r

  \  enqueue(anim) {\r

  \  }\r

  \  start() {\r

  \  }\r

  }"
ASender: "class ASender {\r

  \  constructor(options) {\r

  \    this.serverData = {};\r

  \    this.akku = {};\r

  \    this.msgCounter = 0;\r

  \    this.stepCounter = 0;\r

  \    this.callback = null;\r

  \    this.options = options;\r

  \    this.backendUrl = 'http://localhost:5001/';\r

  \  }\r

  \  augment(data) {\r

  \    this.stepCounter += 1;\r

  \    this.akku = extend(true, this.akku, data);\r

  \    if (this.options.output == 'fine') {\r

  \      logFormattedData(this.serverData, this.stepCounter);\r

  \    } else if (this.options.output == 'raw') {\r

  \    }\r

  \  }\r

  \  chainSend(msgChain, player, callback) {\r

  \    this.stepCounter = 0;\r

  \    this.akku = { game: { player: player } };\r

  \    this.callback = callback;\r

  \    this.chainSendRec({}, msgChain, callback);\r

  \  }\r

  \  chainSendRec(data, msgChain, callback) {\r

  \    this.augment(data);\r

  \    if (msgChain.length > 0) {\r

  \      this.send(msgChain[0], d => this.chainSendRec(d, msgChain.slice(1),
  callback));\r

  \    } else {\r

  \      testOutput({ 3: ['sender akku:', this.akku] });\r

  \      callback(this.akku);\r

  \    }\r

  \  }\r

  \  send(url, callback) {\r

  \    url = this.backendUrl + url;\r

  \    this.msgCounter += 1;\r

  \    unitTestRequest(this.msgCounter + ': request sent: ' + url);\r

  \    $.ajax({\r

  \      url: url,\r

  \      type: 'GET',\r

  \      success: response => {\r

  \        unitTestResponse('server:', response.substring(0, 200));\r

  \        if (response[0] != '{') {\r

  \          unitTestResponse(response);\r

  \          callback(JSON.parse('{\"response\":\"' + response + '\"}'));\r

  \        } else {\r

  \          this.serverData = JSON.parse(response);\r

  \          unitTestResponse(this.serverData);\r

  \          if ('removed' in this.serverData) {\r

  \            for (const id in this.serverData.removed) {\r

  \              unitTestRemoved(this.serverData.removed.toString());\r

  \              break;\r

  \            }\r

  \          }\r

  \          if ('error' in this.serverData) {\r

  \            error(this.serverData);\r

  \            error(this.serverData.error);\r

  \          } else {\r

  \            callback(this.serverData);\r

  \          }\r

  \        }\r

  \      },\r

  \      error: err => {\r

  \        error(err);\r

  \      }\r

  \    });\r

  \  }\r

  }"
AStrategy: "class AStrategy {\r

  \  constructor(assets, initialStrategy = {}) {\r

  \    this.choiceIndex = 0;\r

  \    this.choiceModulo = 5;\r

  \    this.assets = assets;\r

  \    this.phasePred = initialStrategy;\r

  \    this.deterministic = true;\r

  \  }\r

  \  chooseTuple(G) {\r

  \    let n = -1;\r

  \    if (this.deterministic) {\r

  \      n = this.choiceIndex;\r

  \      this.choiceIndex = (this.choiceIndex + 1) % this.choiceModulo;\r

  \    }\r

  \    unitTestStrategy(\"chooseTuple:\", G.player, G.phase,
  this.phasePred);\r

  \    let tuples = G.tuples;\r

  \    if (G.phase in this.phasePred) {\r

  \      unitTestStrategy(\"found strategy!\", this.phasePred[G.phase]);\r

  \      return chooseDeterministicOrRandom(n, tuples,
  this.phasePred[G.phase]);\r

  \    } else {\r

  \      unitTestStrategy(\"no strategy available!!\");\r

  \      return chooseDeterministicOrRandom(n, tuples, t =>
  !t.includes(\"pass\"));\r

  \    }\r

  \  }\r

  \  chooseFavIfPossible(tuples, fav) {\r

  \    if (tuples.length == 1) return tuples[0];\r

  \    else {\r

  \      let favTuples = tuples.filter(t => t.includes(fav));\r

  \      let tuple = empty(favTuples) ? chooseRandomElement(tuples, t =>
  !t.includes(\"pass\")) : favTuples[0];\r

  \      return tuple;\r

  \    }\r

  \  }\r

  \  getChooser(phase) {\r

  \    switch (phase) {\r

  \      case \"spring\":\r

  \      case \"summer\":\r

  \      case \"fall\":\r

  \      case \"winter\":\r

  \      case \"season\":\r

  \        return this.phase.season.favAction;\r

  \        break;\r

  \      default:\r

  \        return this.phase[phase].favAction;\r

  \        break;\r

  \    }\r

  \  }\r

  \  setFav(phase, cond) {\r

  \    switch (phase) {\r

  \      case \"spring\":\r

  \      case \"summer\":\r

  \      case \"fall\":\r

  \      case \"winter\":\r

  \      case \"season\":\r

  \        this.phase.season.favAction = cond;\r

  \        break;\r

  \      default:\r

  \        this.phase[phase].favAction = cond;\r

  \        break;\r

  \    }\r

  \  }\r

  }"
AUnits: "class AUnits {\r

  \  constructor(assets) {\r

  \    this.assets = assets;\r

  \    this.SZ = this.assets.SZ;\r

  \    this.snailPos = calcSnailPositions(0, 0, this.SZ.cadreDetail, 25);\r

  \    this.units = { Axis: {}, West: {}, USSR: {}, Minor: {} };\r

  \    this.uis = {};\r

  \    this.hiddenUnits = { Axis: {}, West: {}, USSR: {} };\r

  \    this.previousPlayer = null;\r

  \  }\r

  \  addUnit(id, ms, o) {\r

  \    let tile = o.tile;\r

  \    let owner = ms.getTag('owner');\r

  \    let neutral = ms.getTag('neutral');\r

  \    if (!(tile in this.units[owner])) {\r

  \      this.units[owner][tile] = [id];\r

  \    } else {\r

  \      addIf_dep(id, this.units[owner][tile]);\r

  \    }\r

  \    this.uis[id] = { o: jsCopy(o), ms: ms };\r

  \    if (o.type == 'Convoy') {\r

  \      unitTestConvoy('addUnit of type CONVOY!!!', o, ms)\r

  \    }\r

  \    unitTestUnits('added', id, ms, o, owner, tile);\r

  \    unitTestMoving('added', id, ms, o, owner, tile, this.units[owner]);\r

  \  }\r

  \  addHiddenUnit(msHidden) {\r

  \    console.assert(msHidden != null, 'addHiddenUnit ms ==
  NULL!!!!!!!!!!');\r

  \    let idHidden = msHidden.id;\r

  \    if (idHidden in this.uis) {\r

  \      unitTestUnits('addHiddenUnit ERROR!!!!, already have hidden unit',
  idHidden);\r

  \    }\r

  \    let tile = msHidden.getTag('tile');\r

  \    let owner = msHidden.getTag('owner');\r

  \    this.hiddenUnits[owner][tile] = idHidden;\r

  \    let o = { obj_type: 'hidden_unit', owner: owner, tile: tile, count: 1
  };\r

  \    this.uis[idHidden] = { o: o, ms: msHidden };\r

  \    unitTestUnits('addHiddenUnit', idHidden, msHidden, o, owner, tile);\r

  \  }\r

  \  calcStartPos(tile, faction) {\r

  \    let pTile = this.getPosition(tile);\r

  \    if (faction == 'Minor') return { x: pTile.x, y: pTile.y };\r

  \    let pFaction = this.SZ['p' + faction];\r

  \    return { x: pTile.x + pFaction.x, y: pTile.y + pFaction.y };\r

  \  }\r

  \  createHiddenUnit(id, owner, tile) {\r

  \    unitTestUnits('create HIDDEN unit', id, owner, tile, '.........');\r

  \    let color = this.assets.troopColors[owner];\r

  \    let darker = darkerColor(color[0], color[1], color[2]);\r

  \    let sz = this.SZ.sumCadre;\r

  \    let sz80 = sz * 0.86;\r

  \    let szImage = sz / 1.5;\r

  \    let y = szImage / 6;\r

  \    let ms = new MS(id, 'mapG')\r

  \      .roundedRect({ w: sz, h: sz, fill: color, rounding: sz * 0.1 })\r

  \      .roundedRect({ w: sz80, h: sz80, fill: darker, rounding: sz * 0.1
  })\r

  \      .text({ txt: 1, fz: sz / 2, fill: 'white' })\r

  \      .roundedRect({ className: 'unit overlay', w: sz, h: sz, fill: darker,
  rounding: sz * 0.1 });\r

  \    ms.tag('type', 'hidden_unit');\r

  \    ms.tag('count', 1);\r

  \    ms.tag('owner', owner);\r

  \    ms.tag('tile', tile);\r

  \    this.placeHiddenUnit(ms, owner, tile);\r

  \    this.addHiddenUnit(ms);\r

  \    return ms;\r

  \  }\r

  \  createUnit(id, o, player) {\r

  \    let nationality = o.nationality;\r

  \    let owner = getUnitOwner(nationality);\r

  \    let isNeutral = owner == 'Minor';\r

  \    unitTestUnits('__________', id, o, nationality, owner, isNeutral);\r

  \    let type = o.type;\r

  \    if (type === undefined) {\r

  \      unitTestUnits('CANNOT CREATE UNIT BECAUSE TYPE UNKNOWN!!!', player,
  owner);\r

  \      unitTestUnits(';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;');\r

  \    } else {\r

  \      unitTestUnits('create unit', id, o, '...player is', player);\r

  \      if (type == 'Convoy') {\r

  \        type = o.carrying;\r

  \      }\r

  \      let imagePath = '/a/assets/images/' + type + '.svg';\r

  \      let color = isNeutral ? this.assets.troopColors['Minor'] :
  this.assets.troopColors[nationality];\r

  \      let darker = darkerColor(color[0], color[1], color[2]);\r

  \      let sz = this.SZ.cadreDetail;\r

  \      let sz80 = sz * 0.86;\r

  \      let szImage = sz / 1.5;\r

  \      let y = szImage / 6;\r

  \      let ms = new MS(id, 'mapG')\r

  \        .roundedRect({ className: 'ground', w: sz, h: sz, fill: color,
  rounding: sz * 0.1 })\r

  \        .roundedRect({ w: sz80, h: sz80, fill: darker, rounding: sz * 0.1
  })\r

  \        .image({ path: imagePath, y: y, w: szImage, h: szImage })\r

  \        .roundedRect({ className: 'unit overlay', w: sz, h: sz, fill:
  darker, rounding: sz * 0.1 });\r

  \      ms.tag('type', 'unit');\r

  \      ms.tag('owner', owner);\r

  \      ms.tag('nationality', nationality);\r

  \      ms.tag('neutral', isNeutral);\r

  \      unitTestUnits('vor placeUnit call', ms, o.tile);\r

  \      this.placeUnit(ms, o.tile);\r

  \      o.owner = owner;\r

  \      this.addUnit(id, ms, o);\r

  \      if ('cv' in o) {\r

  \        unitTestUnits('vor updateCv call', ms, o.cv);\r

  \        this.updateCv(ms, o.cv);\r

  \      }\r

  \      if (o.type == 'Convoy') {\r

  \        this.markAsConvoy(id, ms, null, o);\r

  \      }\r

  \    }\r

  \    if (isNeutral) return;\r

  \    let idHidden = this.getHiddenId(owner, o.tile);\r

  \    if (!(idHidden in this.uis)) {\r

  \      this.createHiddenUnit(idHidden, owner, o.tile);\r

  \    } else {\r

  \      unitTestUnits('hidden unit already there!!!!!!!!!!!!!', idHidden,
  owner, o.tile);\r

  \      this.updateUnitCounter(owner, o.tile);\r

  \    }\r

  \    this.updateVisibility(id, o, player);\r

  \  }\r

  \  getHiddenId(faction, tile) {\r

  \    return comp_(faction, tile);\r

  \  }\r

  \  getPosition(idTile) {\r

  \    let pos = this.assets.tilePositions[idTile];\r

  \    return pos;\r

  \  }\r

  \  getUnit(id) {\r

  \    return id in this.uis ? this.uis[id] : null;\r

  \  }\r

  \  markAsConvoy(id, ms, o_old, o_new) {\r

  \    if (o_new.type == 'Convoy') {\r

  \      ms.tag('isConvoy', true);\r

  \      this.uis[id].o = jsCopy(o_new);\r

  \      unitTestConvoy('unit', id, 'becomes convoy', o_new)\r

  \      ms.addBorder('blue')\r

  \    } else {\r

  \      ms.tag('isConvoy', false);\r

  \      this.uis[id].o = jsCopy(o_new);\r

  \      unitTestConvoy('going back from convoy: unit', id, 'becomes',
  o_new.type, o_new)\r

  \      ms.removeBorder();\r

  \    }\r

  \  }\r

  \  moveUnit(id, tile_old, o_new) {\r

  \    if (o_new.type == 'Convoy') {\r

  \      unitTestConvoy('move unit', id, 'is a CONVOY!!!!!!!!')\r

  \    }\r

  \    if (!(id in this.uis)) {\r

  \      unitTestUnits('PROBLEM: moveUnit', id, ' NOT in uis!');\r

  \      alert('PROBLEM: moveUnit ' + id + ' NOT in uis!');\r

  \    }\r

  \    let ms = this.uis[id].ms;\r

  \    let owner = ms.getTag('owner');\r

  \    let tile = ms.getTag('tile')\r

  \    this.removeUnitFromUnitsOwnerTile(id, owner, tile);\r

  \    let tile_new = o_new.tile;\r

  \    this.addUnit(id, ms, o_new);\r

  \    this.placeUnit(ms, tile_new);\r

  \    this.updateUnitCounter(owner, tile_old);\r

  \    let idHiddenNew = this.getHiddenId(owner, tile_new);\r

  \    if (!(idHiddenNew in this.uis)) {\r

  \      let msHidden_new = this.createHiddenUnit(idHiddenNew, owner,
  tile_new);\r

  \      this.addHiddenUnit(msHidden_new);\r

  \      unitTestUnits('moveUnit: created hidden unit', idHiddenNew);\r

  \    } else {\r

  \      this.updateUnitCounter(owner, tile_new);\r

  \    }\r

  \  }\r

  \  placeUnit(ms, tile) {\r

  \    let owner = ms.getTag('owner');\r

  \    let isNeutral = ms.getTag('neutral');\r

  \    let pStart = this.calcStartPos(tile, owner);\r

  \    let x = pStart.x;\r

  \    let y = pStart.y;\r

  \    if (!isNeutral) {\r

  \      let iUnit = tile in this.units[owner] ?
  this.units[owner][tile].length : 0;\r

  \      let pSnailOffset = this.snailPos[iUnit];\r

  \      x = pStart.x + pSnailOffset.x;\r

  \      y = pStart.y + pSnailOffset.y;\r

  \      unitTestUnits('index of this unit', iUnit, 'pos', x, y);\r

  \    }\r

  \    ms.setPos(x, y).draw();\r

  \    ms.tag('tile', tile);\r

  \  }\r

  \  placeHiddenUnit(msHidden, faction, tile) {\r

  \    let p = this.calcStartPos(tile, faction);\r

  \    msHidden.setPos(p.x, p.y).draw();\r

  \  }\r

  \  removeUnitFromUnitsOwnerTile(id, owner, tile) {\r

  \    unitTestMoving('vor removeUnit', id, owner, tile, this.units[owner]);\r

  \    unitTestRemove('vor removeUnit', id, owner, tile, this.units[owner]);\r

  \    removeInPlace(this.units[owner][tile], id);\r

  \  }\r

  \  resnail(owner, tile) {\r

  \    unitTestResnail('in resnail:', this.units[owner][tile]);\r

  \    let pStart = this.calcStartPos(tile, owner);\r

  \    let x = pStart.x;\r

  \    let y = pStart.y;\r

  \    let iUnit = 0;\r

  \    for (const id of this.units[owner][tile]) {\r

  \      unitTestResnail('in resnail:', id, owner, tile, x, y);\r

  \      let ms = this.uis[id].ms;\r

  \      ms.setPos(x, y);\r

  \      iUnit += 1;\r

  \      let pSnailOffset = this.snailPos[iUnit];\r

  \      x = pStart.x + pSnailOffset.x;\r

  \      y = pStart.y + pSnailOffset.y;\r

  \      unitTestResnail('in resnail:', id, owner, tile, x, y);\r

  \    }\r

  \  }\r

  \  updateUnitCounter(owner, tile) {\r

  \    unitTestUnits('updateUnitCounter', owner, tile);\r

  \    unitTestRemove('updateUnitCounter', owner, tile);\r

  \    if (!(tile in this.units[owner])) {\r

  \      unitTestRemove('nothing to update because no unit of', owner, 'has
  been created!');\r

  \      return;\r

  \    }\r

  \    let n = this.units[owner][tile].length;\r

  \    unitTestRemove('updateUnitCounter: units[', owner, '][', tile,
  '].length', n);\r

  \    let idHidden = this.getHiddenId(owner, tile);\r

  \    let msHidden = this.uis[idHidden].ms;\r

  \    let oHidden = this.uis[idHidden].o;\r

  \    if (n == 0) {\r

  \      oHidden.count = n;\r

  \      msHidden.tag('count', n);\r

  \      unitTestRemove('!!!!!!!!!!!!!!SUCCESS!!!!!!!!!!!!!!!!');\r

  \    } else {\r

  \      oHidden.count = n;\r

  \      let color = this.assets.troopColors[owner];\r

  \      let darker = darkerColor(color[0], color[1], color[2]);\r

  \      let sz = this.SZ.sumCadre;\r

  \      msHidden.removeFromChildIndex(3);\r

  \      msHidden.text({ txt: n, fz: sz / 2, fill: 'white' }).roundedRect({\r

  \        className: 'unit overlay',\r

  \        w: sz,\r

  \        h: sz,\r

  \        fill: darker,\r

  \        rounding: sz * 0.1\r

  \      });\r

  \      msHidden.tag('count', n);\r

  \      unitTestUnits('updateUnitCounter', owner, tile, 'to', n, oHidden,
  msHidden);\r

  \    }\r

  \  }\r

  \  updateCv(ms, cv) {\r

  \    ms.removeFromChildIndex(5);\r

  \    let sz = this.SZ.cadreDetail;\r

  \    let dx = sz / (cv + 1);\r

  \    let xStart = -sz / 2;\r

  \    let y = -sz / 3.2;\r

  \    let diam = Math.min(dx / 1.5, sz / 5);\r

  \    let x = dx + xStart;\r

  \    for (let i = 0; i < cv; i++) {\r

  \      ms.circle({ sz: diam, x: x, y: y, fill: 'white' });\r

  \      x += dx;\r

  \    }\r

  \    ms.tag('cv', cv);\r

  \    this.uis[ms.id].o.cv = cv;\r

  \    unitTestUnits('updateCv', ms.id, ms.getTag('owner'), ms.getTag('tile'),
  'to', cv);\r

  \  }\r

  \  updateVisibility(id, o, player) {\r

  \    unitTestUnitVisibility('update Visibility', 'id', id, 'o', o, 'player',
  player);\r

  \    let ms = id in this.uis ? this.uis[id].ms : null;\r

  \    unitTestUnitVisibility('update Visibility ms=', ms);\r

  \    let tile = o.tile;\r

  \    let owner = getUnitOwner(o.nationality);\r

  \    unitTestRemove('updating Visibility of', id, owner, tile)\r

  \    let idHidden = this.getHiddenId(owner, tile);\r

  \    let vis = isVisibleToPlayer(o, player);\r

  \    unitTestRemove('-------------vis', vis, 'idHidden', idHidden)\r

  \    if (idHidden in this.uis) {\r

  \      let msHidden = this.uis[idHidden].ms;\r

  \      unitTestRemove('-------------msHidden', msHidden)\r

  \      if (vis) {\r

  \        msHidden.hide();\r

  \      } else {\r

  \        if (msHidden.getTag('count') > 0) msHidden.show(); else
  msHidden.hide();\r

  \      }\r

  \    }\r

  \    if (ms) {\r

  \      if (vis) {\r

  \        ms.show();\r

  \      } else {\r

  \        ms.hide();\r

  \      }\r

  \    }\r

  \  }\r

  \  update(data, gObjects, player) {\r

  \    if ('created' in data) {\r

  \      for (const id in data.created) {\r

  \        let o_new = data.created[id];\r

  \        if (o_new.obj_type != 'unit') continue;\r

  \        if (!(id in gObjects)) {\r

  \          unitTestUnits('about to create unit', id, o_new);\r

  \          this.createUnit(id, o_new, player);\r

  \          if (id in this.uis) {\r

  \            gObjects[id] = o_new;\r

  \          } else {\r

  \            unitTestUnits(':::::::UNIT WAS NOT CREATED!!!');\r

  \          }\r

  \        } else {\r

  \          let o_old = gObjects[id];\r

  \          console.assert(id in this.uis, 'unit in G but not in uis', id,
  o_new);\r

  \          let d = propDiff(o_old, o_new);\r

  \          if (d.hasChanged) {\r

  \            let owner = getUnitOwner(o_old.nationality);\r

  \            if (d.summary.includes('type')) {\r

  \              console.assert(player != owner || o_old.type == 'Convoy' ||
  o_new.type == 'Convoy', 'type change other than convoy!!!!');\r

  \              if ('type' in o_new) {\r

  \                console.assert(o_old.type == 'Convoy' || o_new.type ==
  'Convoy', 'type change other than convoy!!!!');\r

  \                unitTestUnits('!!!!!!! for not this temp type change NOT
  reflected in G!!!!');\r

  \                this.markAsConvoy(id, this.uis[id].ms, o_old, o_new);\r

  \                unitTestUnits('>>>>>MARK AS CONVOY!!!!!!!!!!!!');\r

  \                unitTestUnits(id, 'type was ' + o_old.type + ' new=' +
  o_new.type);\r

  \              }\r

  \            }\r

  \            if (d.summary.includes('cv') && o_new.cv != undefined) {\r

  \              unitTestUnits('cv change!!!!! ' + o_old.cv + ' ' +
  o_new.cv);\r

  \              this.updateCv(this.uis[id].ms, o_new.cv);\r

  \              gObjects[id] = o_new;\r

  \            }\r

  \            if (d.summary.includes('tile')) {\r

  \              let oldTile = o_old.tile;\r

  \              gObjects[id].tile = o_new.tile;\r

  \              this.moveUnit(id, oldTile, gObjects[id]);\r

  \              unitTestResnail('vor resnail: unit', id, o_new.nationality,
  o_new.type, 'moved to', o_new.tile)\r

  \              this.resnail(owner, oldTile);\r

  \              unitTestUnits('unit', id, 'has moved from', oldTile, 'to',
  gObjects[id].tile);\r

  \              unitTestMoving('unit', id, 'has moved from', oldTile, 'to',
  gObjects[id].tile);\r

  \            }\r

  \            if (d.summary.includes('visible')) {\r

  \              gObjects[id].visible = o_new.visible;\r

  \              this.uis[id].o.visible = o_new.visible;\r

  \            }\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \    if ('removed' in data) {\r

  \      for (const id in data.removed) {\r

  \        if (id in gObjects) {\r

  \          let o = gObjects[id];\r

  \          if (o.obj_type == 'unit') {\r

  \            let ms = this.uis[id].ms;\r

  \            let owner = ms.getTag('owner');\r

  \            let tile = ms.getTag('tile');\r

  \            this.removeUnitFromUnitsOwnerTile(id, owner, tile);\r

  \            let neutral = ms.getTag('neutral');\r

  \            unitTestRemove('vor aufruf UpdateUnitCounter', o, id,
  data.removed[id]);\r

  \            if (!neutral) this.updateUnitCounter(owner, tile);\r

  \            ms.removeFromUI();\r

  \            delete this.uis[id];\r

  \            delete gObjects[id];\r

  \            unitTestRemove('nach remove unit', id, gObjects, this.units,
  this.uis)\r

  \            unitTestResnail('vor resnail: unit', id, o.nationality, o.type,
  'removed from', tile)\r

  \            this.resnail(owner, tile);\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \    unitTestUnits('...visibility is updated for all units!');\r

  \    for (const id in this.uis) {\r

  \      const ms = this.uis[id].ms;\r

  \      const owner = ms.getTag('owner');\r

  \      const o = this.uis[id].o;\r

  \      const isHidden = o.obj_type == 'hidden_unit';\r

  \      if (isHidden) {\r

  \        let cnt = ms.getTag('count');\r

  \        if (cnt == 0) ms.hide();\r

  \        unitTestRemove('HIDING HIDDEN UNIT WITH COUNT 0', id)\r

  \      } else {\r

  \        this.updateVisibility(id, o, player);\r

  \      }\r

  \    }\r

  \    unitTestUnits('player', player, 'previousPlayer:',
  this.previousPlayer);\r

  \    this.previousPlayer = player;\r

  \  }\r

  }"
Banner: "class Banner {\r

  \  constructor(pos, dParent) { this.pos = pos; this.dParent = isdef(dParent)
  ? dParent : dBanner; this.init(); }\r

  \  clear() { clearElement(this.dParent); this.dParent.onclick = null;
  hide(this.dParent); }\r

  \  _createDivs() {\r

  \    this.dInstruction = mDiv(this.dContent);\r

  \    this.dMain = mDiv(this.dContent);\r

  \    this.dHint = mDiv(this.dContent); this.dHint.innerHTML = 'hallo';
  this.dHint.style.opacity = 0;\r

  \  }\r

  \  _createScreen() {\r

  \    show(this.dParent);\r

  \    let bg = colorTrans('silver', .25);\r

  \    let d = mScreen(this.dParent, { bg: bg, display: 'flex', layout: 'fvcc'
  });\r

  \    let dContent = mDiv(d, { display: 'flex', layout: 'fvcs', fg:
  'contrast', fz: 24, bg: 'silver', patop: 50, pabottom: 50, matop: -50, w:
  '100vw' });\r

  \    if (isdef(this.pos)) mStyleX(dContent, { matop: this.pos });\r

  \    return [d, dContent];\r

  \  }\r

  \  init() {\r

  \    [this.div, this.dContent] = this._createScreen();\r

  \    this.dParent.onclick = () => this.clear();\r

  \    this._createDivs();\r

  \  }\r

  \  message(arr, callback) {\r

  \    this.dInstruction.innerHTML = arr.join(' ');\r

  \    if (isdef(callback)) this.dParent.onclick = () => { this.clear();
  callback(); };\r

  \  }\r

  }"
Board: "class Board {\r

  \  constructor(rows, cols, handler, cellStyle) {\r

  \    let styles = isdef(cellStyle) ? cellStyle : { margin: 4, w: 150, h:
  150, bg: 'white', fg: 'black' };\r

  \    this.rows = rows;\r

  \    this.cols = cols;\r

  \    let items = this.items = iGrid(this.rows, this.cols, dTable, styles);\r

  \    items.map(x => {\r

  \      let d = iDiv(x);\r

  \      mCenterFlex(d);\r

  \      d.onclick = handler;\r

  \    });\r

  \  }\r

  \  get(ir, c) {\r

  \    if (isdef(c)) {\r

  \      let idx = ir * this.cols + c;\r

  \      return this.items[idx];\r

  \    } else {\r

  \      return this.items[ir];\r

  \    }\r

  \  }\r

  \  getState() {\r

  \    return this.items.map(x => x.label);\r

  \  }\r

  \  setState(arr, colors) {\r

  \    if (isEmpty(arr)) return;\r

  \    if (isList(arr[0])) { arr = arrFlatten(arr); }\r

  \    for (let i = 0; i < arr.length; i++) {\r

  \      let item = this.items[i];\r

  \      let val = arr[i];\r

  \      if (!EmptyFunc(val)) {\r

  \        addLabel(item, val, { fz: 60, fg: colors[val] });\r

  \      } else item.label = val;\r

  \    }\r

  \  }\r

  \  clear() {\r

  \    for (const item of this.items) {\r

  \      let dLabel = iLabel(item);\r

  \      if (isdef(dLabel)) { removeLabel(item); item.label = null; }\r

  \    }\r

  \  }\r

  }"
Board2D: "class Board2D {\r

  \  constructor(rows, cols, dParent, cellStyles, boardStyles, handler) {\r

  \    cellStyles = this.cellStyles = isdef(cellStyles) ? cellStyles : {
  margin: 4, w: 150, h: 150, bg: 'white', fg: 'black' };\r

  \    boardStyles = this.boardStyles = isdef(boardStyles) ? boardStyles : {
  bg: 'silver', fg: 'black' };\r

  \    this.rows = rows;\r

  \    this.cols = cols;\r

  \    this.dParent = dParent;\r

  \    let dBoard = this.dBoard = mDiv(dParent);\r

  \    let items = this.items = this.fill(dBoard, this.rows, this.cols, null,
  cellStyles);\r

  \  }\r

  \  fill(d, rows, cols, items, cellStyles) {\r

  \    if (nundef(items)) items = [];\r

  \    clearElement(d);\r

  \    mStyle(d, { display: 'grid', 'grid-template-columns': cols });\r

  \    for (let i = 0; i < rows * cols; i++) {\r

  \      let item = items[i];\r

  \      if (isdef(item)) {\r

  \        let d1 = iDiv(item);\r

  \        if (isdef(d1)) mAppend(d, iDiv(item));\r

  \        else {\r

  \          d1 = mDiv(d, cellStyles); iAdd(item, { div: d1 }); mAppend(d,
  d1);\r

  \        }\r

  \      } else {\r

  \        let [r, c] = iToRowCol(i);\r

  \        item = { row: r, col: c, index: i };\r

  \        let d1 = mDiv(d, cellStyles); iAdd(item, { div: d1 }); mAppend(d,
  d1);\r

  \      }\r

  \      mStyle(iDiv(item), cellStyles);\r

  \      items.push(item)\r

  \    }\r

  \    return items;\r

  \  }\r

  \  get(ir, c) {\r

  \    if (isdef(c)) {\r

  \      let idx = ir * this.cols + c;\r

  \      return this.items[idx];\r

  \    } else {\r

  \      return this.items[ir];\r

  \    }\r

  \  }\r

  \  getState() {\r

  \    return this.items.map(x => x.label);\r

  \  }\r

  \  setState(arr, colors) {\r

  \    if (isEmpty(arr)) return;\r

  \    if (isList(arr[0])) { arr = arrFlatten(arr); }\r

  \    for (let i = 0; i < arr.length; i++) {\r

  \      let item = this.items[i];\r

  \      let val = arr[i];\r

  \      if (!EmptyFunc(val)) {\r

  \        addLabel(item, val, { fz: 60, fg: colors[val] });\r

  \      } else item.label = val;\r

  \    }\r

  \  }\r

  \  clear() {\r

  \    for (const item of this.items) {\r

  \      let dLabel = iLabel(item);\r

  \      if (isdef(dLabel)) { removeLabel(item); item.label = null; }\r

  \    }\r

  \  }\r

  }"
CacheDict: "class CacheDict {\r

  \  constructor(primKey, { func = null } = {}, useLocal = true) {\r

  \    this.primKey = primKey;\r

  \    this.func = func;\r

  \    this.live = null;\r

  \    this.useLocal = useLocal;\r

  \  }\r

  \  async load() {\r

  \    if (this.live) return this;\r

  \    return this._local() || await this._server();\r

  \  }\r

  \  invalidate() {\r

  \    localStorage.removeItem(this.primKey);\r

  \    this.live = null;\r

  \  }\r

  \  async reload() { this.invalidate(); return await this.load(); }\r

  \  _local() {\r

  \    if (!this.useLocal) return null;\r

  \    let res = localStorage.getItem(this.primKey);\r

  \    if (res) this.live = JSON.parse(res);\r

  \    return res;\r

  \  }\r

  \  async _server() {\r

  \    if (this.func) {\r

  \      this.live = await this.func();\r

  \      if (this.useLocal) localStorage.setItem(this.primKey,
  JSON.stringify(this.live));\r

  \    }\r

  \    return this.func;\r

  \  }\r

  }"
Calculus: "class Calculus {\r

  \  limRightOf(x, func) {\r

  \    if (this.canPlugin(x, func)) {\r

  \      return func(x);\r

  \    }\r

  \    if (Math.abs(x) == Infinity) {\r

  \      return this.toInfinty(x, func);\r

  \    }\r

  \    var right1 = func(x + 0.000000000000001);\r

  \    var right2 = func(x + 0.00000000000001);\r

  \    var right3 = func(x + 0.0000000000001);\r

  \    var rightDif1 = right2 - right1;\r

  \    var rightDif2 = right3 - right2;\r

  \    if (rightDif1 < rightDif2 && rightDif2 < 0) {\r

  \      return Infinity;\r

  \    }\r

  \    if (rightDif1 > rightDif2 && rightDif2 > 0) {\r

  \      return -1 * Infinity;\r

  \    }\r

  \    return this.round(right1);\r

  \  }\r

  \  limLeftOf(x, func) {\r

  \    if (this.canPlugin(x, func)) {\r

  \      return func(x);\r

  \    }\r

  \    if (Math.abs(x) == Infinity) {\r

  \      return this.toInfinty(x, func);\r

  \    }\r

  \    var left1 = func(x - 0.000000000000001);\r

  \    var left2 = func(x - 0.00000000000001);\r

  \    var left3 = func(x - 0.0000000000001);\r

  \    var leftDif1 = left2 - left3;\r

  \    var leftDif2 = left1 - left2;\r

  \    if (leftDif2 > leftDif1 && leftDif2 > 0) {\r

  \      return Infinity;\r

  \    }\r

  \    if (leftDif2 < leftDif1 && leftDif2 < 0) {\r

  \      return -1 * Infinity;\r

  \    }\r

  \    return this.round(left1);\r

  \  }\r

  \  limAt(x, func) {\r

  \    if (this.canPlugin(x, func)) {\r

  \      return func(x);\r

  \    }\r

  \    if (Math.abs(x) == Infinity) {\r

  \      return this.toInfinty(x, func);\r

  \    }\r

  \    var left1 = func(x - 0.000000000000001);\r

  \    var right1 = func(x + 0.000000000000001);\r

  \    if (Math.abs(left1 - right1) < 0.00001) {\r

  \      return this.round((left1 + right1) / 2);\r

  \    }\r

  \    return NaN;\r

  \  }\r

  \  canPlugin(x, func) {\r

  \    var at = func(x);\r

  \    return at === at && Math.abs(at) != Infinity;\r

  \  }\r

  \  toInfinty(x, func) {\r

  \    if (x > 0) {\r

  \      var pos1 = Number.MAX_VALUE * 0.99999;\r

  \      var pos2 = Number.MAX_VALUE;\r

  \      var dif = pos2 - pos1;\r

  \      if (dif > 0) {\r

  \        return Infinity;\r

  \      } else {\r

  \        return -1 * Infinity;\r

  \      }\r

  \    } else {\r

  \      var pos1 = Number.MIN_VALUE;\r

  \      var pos2 = Number.MIN_VALUE * 0.99999;\r

  \      var dif = pos2 - pos1;\r

  \      if (dif < 0) {\r

  \        return Infinity;\r

  \      } else {\r

  \        return -1 * Infinity;\r

  \      }\r

  \    }\r

  \  }\r

  \  deriv(x1, func) {\r

  \    var at = func(x1);\r

  \    if (Math.abs(at) == Infinity || at !== at) {\r

  \      return NaN;\r

  \    }\r

  \    var y1 = func(x1);\r

  \    var x0 = x1 - 0.000000000000001;\r

  \    var y0 = func(x0);\r

  \    var x2 = x1 + 0.000000000000001;\r

  \    var y2 = func(x2);\r

  \    var slope1 = this.slope(x0, y0, x1, y1);\r

  \    var slope2 = this.slope(x1, y1, x2, y2);\r

  \    if (Math.abs(slope1 - slope2) > 0.1) {\r

  \      return NaN;\r

  \    }\r

  \    return (slope1 + slope2) / 2;\r

  \  }\r

  \  nthDeriv(n, x1, func) {\r

  \    var vals = [];\r

  \    var start = -1 * Math.round(n / 2);\r

  \    for (var i = start; i <= n + start + 1; i++) {\r

  \      var newX = x1 + i * 0.000000000000001;\r

  \      var newY = func(newX);\r

  \      vals.push(newY);\r

  \    }\r

  \    for (var i = 0; i < n; i++) {\r

  \      var diffs = [];\r

  \      for (var j = 1; j < vals.length; j++) {\r

  \        diffs.push(vals[j] - vals[j - 1]);\r

  \      }\r

  \      vals = diffs;\r

  \    }\r

  \    var out = (vals[0] + vals[1]) / 0.000000000000002;\r

  \    return out;\r

  \  }\r

  \  integral(min, max, func, num) {\r

  \    var sum = 0;\r

  \    var dx = (max - min) / num;\r

  \    var currentX = min + dx / 2;\r

  \    for (var i = 0; i < num; i++) {\r

  \      var currentY = func(currentX);\r

  \      sum += dx * currentY;\r

  \      currentX += dx;\r

  \    }\r

  \    return sum;\r

  \  }\r

  \  averageValue(min, max, func, num) {\r

  \    return this.integral(min, max, func, num) / (max - min);\r

  \  }\r

  \  distance(x1, y1, x2, y2) {\r

  \    return Math.sqrt((x1 - x2) * (x1 - x2) - (y1 - y2) * (y1 - y2));\r

  \  }\r

  \  slope(x1, y1, x2, y2) {\r

  \    return (y1 - y2) / (x1 - x2);\r

  \  }\r

  \  round(num) {\r

  \    var factor = 100000000000000;\r

  \    return Math.round(num * factor) / factor;\r

  \  }\r

  }"
Card52: "class Card52 {\r

  \  static toString(c) { return c.rank + ' of ' + c.suit; }\r

  \  static _getKey(i) {\r

  \    if (i >= 52) return 'card_J1';\r

  \    let rank = Card52.getRank(i);\r

  \    let suit = Card52.getSuit(i);\r

  \    return 'card_' + rank + suit;\r

  \  }\r

  \  static _fromKey(k) {\r

  \    let ranks = 'A23456789TJQK';\r

  \    let suits = 'SHDC';\r

  \    let ir = ranks.indexOf(k[0]);\r

  \    let is = suits.indexOf(k[1]);\r

  \    return is * 13 + ir;\r

  \  }\r

  \  static getRankValue(i) { if (nundef(i)) return null; let r = i % 13;
  return r == 0 ? 12 : r - 1; }\r

  \  static getRank(i) {\r

  \    let rank = (i % 13);\r

  \    if (rank == 0) rank = 'A';\r

  \    else if (rank >= 9) rank = ['T', 'J', 'Q', 'K'][rank - 9];\r

  \    else rank = rank + 1;\r

  \    return rank;\r

  \  }\r

  \  static getSuit(i) {\r

  \    let s = ['S', 'H', 'D', 'C'][divInt(i, 13)];\r

  \    return s;\r

  \  }\r

  \  static getShortString(c) { return c.suit + c.rank; }\r

  \  static turnFaceDown(c, color) {\r

  \    if (!c.faceUp) return;\r

  \    let svgCode = C52.card_2B;\r

  \    c.div.innerHTML = svgCode;\r

  \    if (isdef(color)) c.div.children[0].children[1].setAttribute('fill',
  color);\r

  \    c.faceUp = false;\r

  \  }\r

  \  static turnFaceUp(c) {\r

  \    if (c.faceUp) return;\r

  \    c.div.innerHTML = C52[c.key];\r

  \    c.faceUp = true;\r

  \  }\r

  \  static fromSR(sr, h) { return Card52.fromShortString(sr, h); }\r

  \  static fromShortString(sr, h) {\r

  \    let key = sr[1].toUpperCase() + sr[0].toUpperCase();\r

  \    let i = Card52._fromKey(key);\r

  \    console.log('card from ', sr, 'is', key, 'i', i)\r

  \    return Card52.getItem(i, h);\r

  \  }\r

  \  static get(sr, h) { return Card52.fromSR(sr, h); }\r

  \  static getItem(i, h = 110, w) {\r

  \    if (nundef(w)) w = h * .7;\r

  \    if (nundef(i)) i = randomNumber(0, 51);\r

  \    if (isString(i) && i.length == 2) { i =
  Card52._fromKey(i[1].toUpperCase() + i[0].toUpperCase()); }\r

  \    let c = Card52._createUi(i, undefined, w, h);\r

  \    c.i = c.val = i;\r

  \    return c;\r

  \  }\r

  \  static _createUi(irankey, suit, w, h) {\r

  \    //#region set rank and suit from inputs\r

  \    let rank = irankey;\r

  \    if (nundef(irankey) && nundef(suit)) {\r

  \      [rank, suit] = Card52.randomRankSuit();\r

  \    } else if (nundef(irankey)) {\r

  \      irankey = '2';\r

  \      suit = 'B';\r

  \    } else if (nundef(suit)) {\r

  \      if (isNumber(irankey)) irankey = Card52._getKey(irankey);\r

  \      rank = irankey[5];\r

  \      suit = irankey[6];\r

  \    }\r

  \    if (rank == '10') rank = 'T';\r

  \    if (rank == '1') rank = 'A';\r

  \    if (nundef(suit)) suit = 'H'; else suit = suit[0].toUpperCase();\r

  \    //#endregion\r

  \    //#region load svg for card_[rank][suit] (eg. card_2H)\r

  \    let cardKey = 'card_' + rank + suit;\r

  \    let svgCode = C52[cardKey];\r

  \    svgCode = '<div>' + svgCode + '</div>';\r

  \    let el = mCreateFrom(svgCode);\r

  \    if (isdef(h) || isdef(w)) { mSize(el, w, h); }\r

  \    //#endregion\r

  \    return { rank: rank, suit: suit, key: cardKey, div: el, w: w, h: h,
  faceUp: true };\r

  \  }\r

  \  static random() { return Card52.getItem(randomNumber(0, 51)); }\r

  \  static randomRankSuit() {\r

  \    let c = Card52.random();\r

  \    return [c.rank, c.suit];\r

  \  }\r

  \  static show(icard, dParent, h = 110, w = undefined) {\r

  \    if (isNumber(icard)) {\r

  \      if (nundef(w)) w = h * .7;\r

  \      icard = Card52.getItem(icard, h, w);\r

  \    }\r

  \    mAppend(dParent, icard.div);\r

  \  }\r

  }"
Cardz: "class Cardz {\r

  \  static toString(c) { return c.rank + ' of ' + c.suit; }\r

  \  static _getKey(i) {\r

  \    if (i >= 52) return 'card_J1';\r

  \    let rank = Card52.getRank(i);\r

  \    let suit = Card52.getSuit(i);\r

  \    return 'card_' + rank + suit;\r

  \  }\r

  \  static _fromKey(k) {\r

  \    let ranks = 'A23456789TJQK';\r

  \    let suits = 'SHDC';\r

  \    let i_rank = ranks.indexOf(k[0]);\r

  \    let i_suit = suits.indexOf(k[1]);\r

  \    return i_suit * ranks.length + i_rank;\r

  \  }\r

  \  static getRankValue(i) { if (nundef(i)) return null; let r = i % 13;
  return r == 0 ? 12 : r - 1; }\r

  \  static getRank(i) {\r

  \    let rank = (i % 13);\r

  \    if (rank == 0) rank = 'A';\r

  \    else if (rank >= 9) rank = ['T', 'J', 'Q', 'K'][rank - 9];\r

  \    else rank = rank + 1;\r

  \    return rank;\r

  \  }\r

  \  static getSuit(i) {\r

  \    let s = ['S', 'H', 'D', 'C'][divInt(i, 13)];\r

  \    return s;\r

  \  }\r

  \  static getShortString(c) { return c.suit + c.rank; }\r

  \  static turnFaceDown(c, color) {\r

  \    if (!c.faceUp) return;\r

  \    let svgCode = C52.card_2B;\r

  \    c.div.innerHTML = svgCode;\r

  \    if (isdef(color)) c.div.children[0].children[1].setAttribute('fill',
  color);\r

  \    c.faceUp = false;\r

  \  }\r

  \  static turnFaceUp(c) {\r

  \    if (c.faceUp) return;\r

  \    c.div.innerHTML = C52[c.key];\r

  \    c.faceUp = true;\r

  \  }\r

  \  static fromSR(sr) { return Card52.fromShortString(sr); }\r

  \  static fromShortString(sr) {\r

  \    let key = sr[1].toUpperCase() + sr[0].toUpperCase();\r

  \    let i = Card52._fromKey(key);\r

  \    console.log(key, 'i', i)\r

  \    return Card52.getItem(i);\r

  \  }\r

  \  static getItem(i, h = 110, w) {\r

  \    if (nundef(w)) w = h * .7;\r

  \    if (nundef(i)) i = randomNumber(0, 51);\r

  \    if (isString(i) && i.length == 2) { i =
  Card52._fromKey(i[1].toUpperCase() + i[0].toUpperCase()); }\r

  \    let c = Card52._createUi(i, undefined, w, h);\r

  \    c.i = c.val = i;\r

  \    return c;\r

  \  }\r

  \  static _createUi(irankey, suit, w, h) {\r

  \    //#region set rank and suit from inputs\r

  \    let rank = irankey;\r

  \    if (nundef(irankey) && nundef(suit)) {\r

  \      [rank, suit] = Card52.randomRankSuit();\r

  \    } else if (nundef(irankey)) {\r

  \      irankey = '2';\r

  \      suit = 'B';\r

  \    } else if (nundef(suit)) {\r

  \      if (isNumber(irankey)) irankey = Card52._getKey(irankey);\r

  \      rank = irankey[5];\r

  \      suit = irankey[6];\r

  \    }\r

  \    if (rank == '10') rank = 'T';\r

  \    if (rank == '1') rank = 'A';\r

  \    if (nundef(suit)) suit = 'H'; else suit = suit[0].toUpperCase();\r

  \    //#endregion\r

  \    //#region load svg for card_[rank][suit] (eg. card_2H)\r

  \    let cardKey = 'card_' + rank + suit;\r

  \    let svgCode = C52[cardKey];\r

  \    svgCode = '<div>' + svgCode + '</div>';\r

  \    let el = mCreateFrom(svgCode);\r

  \    if (isdef(h) || isdef(w)) { mSize(el, w, h); }\r

  \    //#endregion\r

  \    return { rank: rank, suit: suit, key: cardKey, div: el, w: w, h: h,
  faceUp: true };\r

  \  }\r

  \  static random() { return Card52.getItem(randomNumber(0, 51)); }\r

  \  static randomRankSuit() {\r

  \    let c = Card52.random();\r

  \    return [c.rank, c.suit];\r

  \  }\r

  \  static show(icard, dParent, h = 110, w = undefined) {\r

  \    if (isNumber(icard)) {\r

  \      if (nundef(w)) w = h * .7;\r

  \      icard = Card52.getItem(icard, h, w);\r

  \    }\r

  \    mAppend(dParent, icard.div);\r

  \  }\r

  }"
CCanvas: "class CCanvas {\r

  \  constructor(dParent, styles, bstyles, play, pause, origin = 'cc') {\r

  \    let o = mCanvas(dParent, styles, bstyles, play, pause);\r

  \    [this.cv, this.cx, this.play, this.pause] = [o.cv, o.cx, o.play,
  o.pause];\r

  \    let [w, h] = [this.w, this.h] = [this.cv.width, this.cv.height];\r

  \    this.defaultsize = 20;\r

  \    this.origin = this.init_origin(origin);\r

  \    this.cx.translate(this.origin.x, this.origin.y);\r

  \    this.maxx = w - this.origin.x; this.minx = this.maxx - w;\r

  \    this.maxy = h - this.origin.y; this.miny = this.maxy - h;\r

  \    this.items = [];\r

  \  }\r

  \  add(o = {}) {\r

  \    addKeys({ canvas: this, x: 0, y: 0, color: rColor(50), w:
  this.defaultsize, h: this.defaultsize, a: 0, draw: null }, o);\r

  \    this.items.push(o);\r

  \    return o;\r

  \  }\r

  \  clear() { cClear(this.cv, this.cx); }\r

  \  clamp(item) { item.x = clamp(item.x, this.minx + item.w / 2, this.maxx -
  item.x / 2); item.y = clamp(item.y, this.miny + item.h / 2, this.maxy - item.h
  / 2) }\r

  \  cycle(item) { item.x = cycle(item.x, this.minx, this.maxx); item.y =
  cycle(item.y, this.miny, this.maxy) }\r

  \  draw() {\r

  \    this.clear();\r

  \    for (const item of this.items) {\r

  \      this.draw_item(item);\r

  \    }\r

  \  }\r

  \  draw_item(item) {\r

  \    let cx = this.cx;\r

  \    cx.save();\r

  \    cx.translate(item.x, item.y);\r

  \    cx.rotate(toRadian(item.a));\r

  \    if (isdef(item.draw)) { item.draw(this, item); }\r

  \    else cEllipse(0, 0, item.w, item.h, { bg: item.color }, 0, cx);\r

  \    cx.restore();\r

  \  }\r

  \  init_origin(origin) {\r

  \    if (nundef(origin)) origin = 'cc';\r

  \    let pt = origin;\r

  \    if (isString(origin)) {\r

  \      let v = origin[0], h = origin[1];\r

  \      let y = v == 't' ? 0 : v == 'c' ? this.cv.height / 2 :
  this.cv.height;\r

  \      let x = h == 'l' ? 0 : h == 'c' ? this.cv.width / 2 :
  this.cv.width;\r

  \      pt = { x: x, y: y };\r

  \    }\r

  \    return pt;\r

  \  }\r

  \  update() {\r

  \    let n = 0;\r

  \    for (const item of this.items) { if (isdef(item.update)) { n +=
  item.update(this, item) ? 1 : 0; } }\r

  \    return n > 0;\r

  \  }\r

  }"
CItemWalker: "class CItemWalker {\r

  \  constructor(name, options = {}) {\r

  \    options.label = name;\r

  \    addKeys({ x: 0, y: 0, color: rColor(60) }, options);\r

  \    if (isdef(options.sz)) options.w = options.h = options.sz;\r

  \    addKeys(options, this);\r

  \  }\r

  \  update() { move_random(this, this.canvas); }\r

  \  draw() { draw_label(this.canvas, this); }\r

  }"
ControllerSolitaire: "class ControllerSolitaire {\r

  \  constructor(g, user) { this.g = g; this.player = user; }\r

  \  stopGame() { resetState(); }\r

  \  startGame() {\r

  \    resetState();\r

  \    this.g.successFunc = successPictureGoal;\r

  \    this.g.failFunc = failPictureGoal;\r

  \    this.g.correctionFunc = showCorrectWord;\r

  \    this.g.startGame();\r

  \    this.startLevel();\r

  \  }\r

  \  startLevel() {\r

  \    Settings.updateGameValues(this.player, this.g);\r

  \    this.g.start_Level();\r

  \    this.startRound();\r

  \  }\r

  \  startRound() {\r

  \    resetRound();\r

  \    uiActivated = false;\r

  \    this.g.startRound();\r

  \    TOMain = setTimeout(() => this.prompt(), 300);\r

  \  }\r

  \  prompt() {\r

  \    QContextCounter += 1;\r

  \    showStats();\r

  \    this.g.trialNumber = 0;\r

  \    this.g.prompt();\r

  \  }\r

  \  promptNextTrial() {\r

  \    QContextCounter += 1;\r

  \    clearTimeout(TOTrial);\r

  \    uiActivated = false;\r

  \    let delay = this.g.trialPrompt(this.g.trialNumber);\r

  \    TOMain = setTimeout(() => this.activateUi(), delay);\r

  \  }\r

  \  activateUi() {\r

  \    Selected = null;\r

  \    uiActivated = true;\r

  \    this.g.activate();\r

  \  }\r

  \  evaluate() {\r

  \    if (!canAct()) return;\r

  \    uiActivated = false; clearTimeouts();\r

  \    IsAnswerCorrect = this.g.eval(...arguments);\r

  \    if (IsAnswerCorrect === undefined) { this.promptNextTrial(); return;
  }\r

  \    this.g.trialNumber += 1;\r

  \    if (!IsAnswerCorrect && this.g.trialNumber < this.g.trials) {
  this.promptNextTrial(); return; }\r

  \    if (IsAnswerCorrect) { DELAY = isdef(Selected.delay) ? Selected.delay :
  this.g.spokenFeedback ? 1500 : 300; this.g.successFunc(); }\r

  \    else { DELAY = this.g.correctionFunc(); this.g.failFunc(); }\r

  \    let nextLevel = scoring(IsAnswerCorrect);\r

  \    if (DELAY > 2000) showActiveMessage('click to continue...', () =>
  this.gotoNext(nextLevel));\r

  \    TOMain = setTimeout(() => this.gotoNext(nextLevel), DELAY);\r

  \  }\r

  \  gotoNext(nextLevel) {\r

  \    onclick = null;\r

  \    removeMarkers();\r

  \    clearTimeouts();\r

  \    if (Score.gameChange) {\r

  \      setNextGame();\r

  \      if (GameTimer.unitTimeUp()) { gameOver('Great job! Time for a
  break!'); } else { GC.startGame(); }\r

  \    } else if (Score.levelChange && nextLevel <= this.g.maxLevel) {\r

  \      this.g.level = nextLevel;\r

  \      setBadgeLevel(this.g.level);\r

  \      this.startLevel();\r

  \    } else { this.startRound(); }\r

  \  }\r

  }"
ControllerTTT: "class ControllerTTT {\r

  \  constructor(g, user) {\r

  \    this.g = g;\r

  \    this.createPlayers(user);\r

  \    GameCounter = 0;\r

  \  }\r

  \  write() { write('gc', ...arguments); }\r

  \  createPlayers(user) {\r

  \    this.write('create players')\r

  \    let players = this.players = this.g.players = [];\r

  \    let h = this.human = this.g.human = new SoloPlayer(user);\r

  \    let a = this.ai = this.g.ai = new AIPlayer();\r

  \    players.push(this.human);\r

  \    players.push(this.ai);\r

  \    this.ai.color = RED;\r

  \  }\r

  \  startGame() {\r

  \    this.write('start game')\r

  \    GameCounter += 1;\r

  \    resetState();\r

  \    this.g.startGame();\r

  \    this.startRound();\r

  \  }\r

  \  startRound() {\r

  \    this.write('start round')\r

  \    this.deactivateUi();\r

  \    this.g.startRound();\r

  \    showStats();\r

  \    this.prompt();\r

  \  }\r

  \  prompt() {\r

  \    this.write('prompt')\r

  \    this.g.prompt();\r

  \  }\r

  \  uiInteract(ev) { if (canHumanAct()) this.g.interact(ev); }\r

  \  activateUi() {\r

  \    this.write('activate');\r

  \    if (this.g.plTurn == this.g.ai) aiActivated = true; else uiActivated =
  true;\r

  \    this.g.activate();\r

  \  }\r

  \  deactivateUi() { aiActivated = uiActivated = false; }\r

  \  evaluate() {\r

  \    this.write('evaluate')\r

  \    this.deactivateUi();\r

  \    this.g.eval(...arguments);\r

  \    this.write('gameOver', this.g.gameOver)\r

  \    if (this.g.gameOver) {\r

  \      let msg, sp;\r

  \      if (this.g.winner && this.g.winner == this.ai) { msg = 'AI wins!'; sp
  = 'A.I. wins!'; this.ai.score += 1; }\r

  \      else if (this.g.winner) { msg = sp = 'You win!!!'; this.human.score
  += 1; }\r

  \      else { msg = \"It's a tie\"; sp = 'tie: no one wins'; if
  (nundef(this.tie)) this.tie = 1; else this.tie += 1; }\r

  \      if (this.g.info) msg += ' ' + this.g.info;\r

  \      Score.nTotal += 1;\r

  \      Score.nCorrect = Score.nWins = this.human.score;\r

  \      Score.nLoses = this.ai.score;\r

  \      Score.nTied = this.tie;\r

  \      showScore();\r

  \      showInstruction('', msg, dTitle, !this.g.silentMode, sp);\r

  \      TOMain = setTimeout(() => {\r

  \        if (GameCounter <= 3) this.bPlay = mButton('play again', () => {
  resetRound(); this.startGame(); }, dTable, { fz: 28, margin: 20, rounding: 10,
  vpadding: 6, hpadding: 12, border: 8 }, ['buttonClass']);\r

  \        this.bPlay = mButton('next game', () => { setNextGame();
  GC.startGame(); }, dTable, { fz: 28, margin: 20, rounding: 10, vpadding: 6,
  hpadding: 12, border: 8 }, ['buttonClass']);\r

  \      }, 1500);\r

  \    } else {\r

  \      this.g.changePlayer();\r

  \      this.startRound();\r

  \    }\r

  \  }\r

  }"
CountdownTimer: "class CountdownTimer {\r

  \  constructor(ms, elem) {\r

  \    this.timeLeft = ms;\r

  \    this.msStart = Daat.now();\r

  \    this.elem = elem;\r

  \    this.tick();\r

  \  }\r

  \  msElapsed() { return Date.now() - this.msStart; }\r

  \  tick() {\r

  \    this.timeLeft -= this.msElapsed;\r

  \    this.elem.innerHTML = this.timeLeft;\r

  \    if (this.timeLeft > 1000) {\r

  \      setTimeout(this.tick.bind(this), 500);\r

  \    } else this.elem.innerHTML = 'timeover';\r

  \  }\r

  }"
CTimer: "class CTimer {\r

  \  constructor(elem, msTick, onTick, msTotal, onElapsed) {\r

  \    this.elem = elem;\r

  \    this.msTotal = this.msLeft = msTotal;\r

  \    this.onTick = onTick;\r

  \    this.onElapsed = onElapsed;\r

  \    this.interval = msTick;\r

  \    this.running = false;\r

  \    this.paused = false;\r

  \    this.game = G.name;\r

  \    this.button = mButton('click', this.togglePause.bind(this), this.elem,
  { transition: 'all 1s ease', display: 'inline-block', fz: 20, rounding: 12,
  bg: GREEN, w: 260 }, 'mybutton');\r

  \    this.TO = null;\r

  \  }\r

  \  togglePause() { if (this.paused) this.continue(); else this.pause(); }\r

  \  clear() { this.stop(); clearElement(this.elem); }\r

  \  continue() {\r

  \    if (!this.running) this.start();\r

  \    else if (!this.paused) return;\r

  \    else { this.paused = false; this.TO =
  setInterval(this.tickHandler.bind(this), this.interval); }\r

  \  }\r

  \  tickHandler() {\r

  \    this.msLeft -= this.interval;\r

  \    let [ms, unit] = [this.msLeft, this.msTotal / 6];\r

  \    this.msElapsed = this.msTotal - this.msLeft;\r

  \    this.button.innerHTML = timeConversion(Math.max(this.msLeft, 0),
  'sh');\r

  \    let bg = ms > unit * 4 ? GREEN : ms > unit * 2 ? YELLOW : ms > unit ?
  'orange' : RED;\r

  \    this.button.style.background = bg;\r

  \    if (isdef(this.onTick)) this.onTick();\r

  \    if (this.msLeft <= 0) {\r

  \      this.stop();\r

  \      if (isdef(this.onElapsed)) {\r

  \        console.assert(G.name == this.game, 'game not the same!!! ' +
  G.name + ' ' + this.game);\r

  \        this.onElapsed();\r

  \      }\r

  \    }\r

  \  }\r

  \  start() {\r

  \    if (this.running) this.stop();\r

  \    this.started = new Date().now;\r

  \    this.msLeft = this.msTotal;\r

  \    this.msElapsed = 0;\r

  \    this.running = true;\r

  \    this.TO = setInterval(this.tickHandler.bind(this), this.interval);\r

  \  }\r

  \  stop() {\r

  \    if (!this.running) return;\r

  \    clearInterval(this.TO);\r

  \    this.running = false;\r

  \  }\r

  \  pause() {\r

  \    if (this.paused || !this.running) return;\r

  \    clearInterval(this.TO);\r

  \    this.paused = true;\r

  \  }\r

  }"
CTimer_dep: "class CTimer_dep {\r

  \  constructor(elem, msTick, onTick, msTotal, onElapsed) {\r

  \    this.elem = elem;\r

  \    this.msTotal = this.msLeft = msTotal;\r

  \    this.onTick = onTick;\r

  \    this.onElapsed = onElapsed;\r

  \    this.interval = msTick;\r

  \    this.running = false;\r

  \    this.paused = false;\r

  \    this.game = G.name;\r

  \    this.button = mButton('click', this.togglePause.bind(this), this.elem,
  { transition: 'all 1s ease', display: 'inline-block', fz: 20, rounding: 12,
  bg: GREEN, w: 260 }, 'mybutton');\r

  \    this.TO = null;\r

  \  }\r

  \  togglePause() { if (this.paused) this.continue(); else this.pause(); }\r

  \  clear() { this.stop(); clearElement(this.elem); }\r

  \  continue() {\r

  \    if (!this.running) this.start();\r

  \    else if (!this.paused) return;\r

  \    else { this.paused = false; this.TO =
  setInterval(this.tickHandler.bind(this), this.interval); }\r

  \  }\r

  \  tickHandler() {\r

  \    this.msLeft -= this.interval;\r

  \    let [ms, unit] = [this.msLeft, this.msTotal / 6];\r

  \    this.msElapsed = this.msTotal - this.msLeft;\r

  \    this.button.innerHTML = timeConversion(Math.max(this.msLeft, 0),
  'sh');\r

  \    let bg = ms > unit * 4 ? GREEN : ms > unit * 2 ? YELLOW : ms > unit ?
  'orange' : RED;\r

  \    this.button.style.background = bg;\r

  \    if (isdef(this.onTick)) this.onTick();\r

  \    if (this.msLeft <= 0) {\r

  \      this.stop();\r

  \      if (isdef(this.onElapsed)) {\r

  \        console.assert(G.name == this.game, 'game not the same!!! ' +
  G.name + ' ' + this.game);\r

  \        this.onElapsed();\r

  \      }\r

  \    }\r

  \  }\r

  \  start() {\r

  \    if (this.running) this.stop();\r

  \    this.started = new Date / 1e3 | 0;\r

  \    this.msLeft = this.msTotal;\r

  \    this.msElapsed = 0;\r

  \    this.running = true;\r

  \    this.TO = setInterval(this.tickHandler.bind(this), this.interval);\r

  \  }\r

  \  stop() {\r

  \    if (!this.running) return;\r

  \    clearInterval(this.TO);\r

  \    this.running = false;\r

  \  }\r

  \  pause() {\r

  \    if (this.paused || !this.running) return;\r

  \    clearInterval(this.TO);\r

  \    this.paused = true;\r

  \  }\r

  }"
DeckClass: "class DeckClass {\r

  \  constructor(f) { this.data = []; if (isdef(f)) if (isString(f))
  this['init' + f](); else if (isList(f)) this.init(f); }\r

  \  init(arr) { this.data = arr; }\r

  \  initEmpty() { this.data = []; }\r

  \  initNumber(n, shuffled = true) { this.initTest(n, shuffled); }\r

  \  initTest(n, shuffled = true) { this.data = range(0, n - 1); if (shuffled)
  this.shuffle(); }\r

  \  init52(shuffled = true, jokers = 0) { this.data = range(0, 51 + jokers);
  if (shuffled) this.shuffle(); }\r

  \  init52_double(shuffled = true, jokers = 0) { this.data = range(0, 103 +
  jokers); if (shuffled) this.shuffle(); }\r

  \  init52_no_suits(n = 4, shuffled = true, jokers = 0) { this.data =
  range(0, 13 * n + jokers - 1); if (shuffled) this.shuffle(); }\r

  \  initRandomHand52(n) { this.data = choose(range(0, 51), n); }\r

  \  addTop(i) { this.data.push(i); return this; }\r

  \  addBottom(i) { this.data.unshift(i); return this; }\r

  \  bottom() { return this.data[0]; }\r

  \  cards() { return this.data; }\r

  \  count() { return this.data.length; }\r

  \  clear() { this.data = []; }\r

  \  deal(n) { return this.data.splice(0, n); }\r

  \  dealDeck(n) { let d1 = new DeckClass(); d1.init(this.data.splice(0, n));
  return d1; }\r

  \  popTop() { return this.data.pop(); }\r

  \  popBottom() { return this.data.shift(); }\r

  \  remTop() { this.data.pop(); return this; }\r

  \  remBottom() { this.data.shift(); return this; }\r

  \  remove(i) { removeInPlace(this.data, i); return this; }\r

  \  removeAtIndex(i) { return this.data.splice(i, 1)[0]; }\r

  \  removeFromIndex(i, n) { return this.data.splice(i, n); }\r

  \  setData(arr, shuffled = false) { this.data = arr; if (shuffled)
  this.shuffle(); }\r

  \  sort() {\r

  \    this.data.sort((a, b) => Number(a) - Number(b));\r

  \    return this;\r

  \  }\r

  \  shuffle() { shuffle(this.data); return this; }\r

  \  top() { return arrLast(this.data); }\r

  \  toString() { return this.data.toString(); }\r

  }"
DeckMS: "class DeckMS {\r

  \  constructor(oid, o) {\r

  \    this.o = o;\r

  \    this.oid = this.id = oid;\r

  \    this.elem = document.createElement('div');\r

  \    this.elem.id = oid;\r

  \    o.mount(this.elem);\r

  \    registerElement(this);\r

  \  }\r

  \  detach() {\r

  \    if (this.parent) {\r

  \      this.parent.removeChild(this.elem);\r

  \      this.parent = null;\r

  \    }\r

  \  }\r

  \  attachTo(div, { placeInCenter = true } = {}) {\r

  \    this.detach();\r

  \    this.parent = div;\r

  \    div.appendChild(this.elem);\r

  \    if (placeInCenter) this.center();\r

  \  }\r

  \  center() {\r

  \    if (this.parent) {\r

  \      let d = this.elem;\r

  \      let wParent = this.parent.offsetWidth;\r

  \      let wElem = this.o.cards.length > 0 ?
  this.o.cards[0].elem.offsetWidth : 78;\r

  \      let hParent = this.parent.offsetHeight;\r

  \      let hElem = this.o.cards.length > 0 ?
  this.o.cards[0].elem.offsetHeight : 110;\r

  \      d.style.position = 'relative';\r

  \      this.centerX = (wParent - wElem) / 2;\r

  \      this.centerY = (hParent - hElem) / 2;\r

  \      this.w = wElem;\r

  \      this.h = hElem;\r

  \      d.style.left = '' + this.centerX + 'px';\r

  \      d.style.top = '' + this.centerY + 'px';\r

  \    }\r

  \  }\r

  \  setPos(x, y) {\r

  \    this.elem.style.left = '' + (this.centerX + x) + 'px';\r

  \    this.elem.style.top = '' + (this.centerY + y) + 'px';\r

  \  }\r

  }"
Engine: "class Engine {\r

  \  constructor() {\r

  \    this.examples = { a: 5, b: 0 };\r

  \    this.sDataExamples = ['a00', 'b00'];\r

  \    this.urls = [];\r

  \    let serverDataName = null;\r

  \    this.iTest = 0;\r

  \    for (const [k, v] of Object.entries(this.examples)) {\r

  \      let urlServerData = '/EXAMPLES/' + k + '00/serverData.yaml';\r

  \      for (let i = 0; i <= v; i++) {\r

  \        let fdName = k + '0' + i;\r

  \        let testInfo = {\r

  \          urlSpec: '/EXAMPLES/spec/' + fdName + '.yaml',\r

  \          urlServerData: urlServerData,\r

  \        }\r

  \        this.urls.push(testInfo);\r

  \      }\r

  \    }\r

  \    console.log(this.urls);\r

  \  }\r

  \  loadNextExample() {\r

  \  }\r

  }"
FakeServerClass: "class FakeServerClass {\r

  \  constructor(io, perlenDict, settings, state) {\r

  \    this.io = io;\r

  \    this.perlenDict = perlenDict;\r

  \    this.settings = {};\r

  \    this.state = {};\r

  \    this.initState(state, settings);\r

  \    this.players = {};\r

  \  }\r

  \  initState(state, settings) {\r

  \    base.copyKeys(state, this.state);\r

  \    base.copyKeys(settings, this.settings);\r

  \    this.maxPoolIndex = base.initServerPool(this.settings, this.state,
  this.perlenDict);\r

  \  }\r

  \  initStateOld(settings, state) {\r

  \    if (isdef(settings)) copyKeys(settings, this.settings);\r

  \    let byIndex = this.byIndex = {}; this.maxIndex = 0; this.State =
  state;\r

  \    if (nundef(state)) {\r

  \      state = this.State = {};\r

  \      let board = state.board = createServerBoard();\r

  \      state.boardArr = [];\r

  \      state.pool = byIndex;\r

  \      state.poolArr = [];\r

  \      let keys = createServerPoolKeys();\r

  \      keys.map(x => this.addToPool(this.perlenDict[x]));\r

  \    }\r

  \    this.initPlayers();\r

  \  }\r

  \  addPlayer(client, x) {\r

  \    let username = x;\r

  \    let id = client.id;\r

  \    let pl = { id: id, client: client, name: username, username: username,
  arr: [] };\r

  \    this.players[id] = pl;\r

  \    this.initPlayerState(pl.id);\r

  \    return pl;\r

  \  }\r

  \  addToPool(perle) {\r

  \    let index = this.maxIndex;\r

  \    this.maxIndex += 1;\r

  \    let p = this.byIndex[index] = { key: perle.path, index: index };\r

  \    if (isdef(this.State.poolArr)) this.State.poolArr.push(index);\r

  \    return p;\r

  \  }\r

  \  boardLayoutChange(client, x) {\r

  \    let state = this.State;\r

  \    state.boardArr = x.boardArr;\r

  \    state.poolArr = x.poolArr;\r

  \    state.board = { rows: x.rows, cols: x.cols };\r

  \    this.safeEmitState(false, false, false, true);\r

  \  }\r

  \  safeEmitState(emitSettings, emitPool, emitPerlenDict, emitBoardLayout,
  client, moreData) {\r

  \    let o = { state: { boardArr: this.State.boardArr, poolArr:
  this.State.poolArr } };\r

  \    if (emitSettings) o.settings = this.settings;\r

  \    if (emitPool) o.state.pool = this.State.pool;\r

  \    if (emitPerlenDict) o.perlenDict = this.perlenDict;\r

  \    if (emitBoardLayout) o.state.board = this.board;\r

  \    DB.tables.perlen = this.State;\r

  \    utils.toYamlFile({ settings: this.settings, state: this.State },
  './lastState.yaml');\r

  \    if (isdef(moreData)) copyKeys(modeData, o);\r

  \    if (isdef(client)) client.emit('gameState', o); else
  this.io.emit('gameState', o);\r

  \  }\r

  \  getNumActivePlayers() { return this.state.players.length; }\r

  \  getNumPlayers() { return Object.keys(this.players).length; }\r

  \  getPlayerNames() { return this.State.players.map(x => x.name).join(',');
  }\r

  \  getPlayerState(plid) { return firstCond(this.State.players, x => x.id ==
  plid); }\r

  \  getPerleByFilename(filename) {\r

  \    for (const k in this.byIndex) {\r

  \      let p = this.byIndex[k];\r

  \      if (p.path == filename) return p;\r

  \    }\r

  \    return null;\r

  \  }\r

  \  getPerlenName(iPerle) { return this.byIndex[iPerle].text; }\r

  \  getTurn() { return this.state.turn; }\r

  \  initPlayerState(plid) {\r

  \    let pl = this.players[plid];\r

  \    pl.arr = [];\r

  \    pl.isInitialized = false;\r

  \    let plState = { id: pl.id, name: pl.name, username: pl.username, arr:
  pl.arr, isInitialized: pl.isInitializes };\r

  \    if (nundef(this.State.players)) this.State.players = [];\r

  \    this.State.players.push(plState);\r

  \    return pl;\r

  \  }\r

  \  initPlayers() { this.State.players = []; for (const plid in this.players)
  { this.initPlayerState(plid); } }\r

  \  initBoardTraditional(settings) {\r

  \    let [rows, cols] = [valf(settings.rows, 4), valf(settings.cols, 4)];\r

  \    return { rows: rows, cols: cols, nFields: rows * cols };\r

  \  }\r

  \  initBoardImage(settings) {\r

  \    let filename = settings.filename; //'brett02cropped.png'; //
  [valf(settings.rows, 4), valf(settings.cols, 4)];\r

  \    let name = stringBefore(filename, '.');\r

  \    let info = settings.bretter[name];\r

  \    let nums = allNumbers(info);\r

  \    let algo = stringAfter(info, ' ');\r

  \    return { filename: filename, algo: algo, nFields: nums[0] };\r

  \  }\r

  \  initialPoolDone(client, x) {\r

  \    let pl = this.players[client.id];\r

  \    pl.isInitialized = true;\r

  \    this.updatePlayerState(pl);\r

  \  }\r

  \  sendInitialOrState(client) {\r

  \    if (this.settings.individualSelection) {\r

  \      let data = { state: this.State, perlenDict: this.perlenDict,
  instruction: 'pick your set of pearls!' };\r

  \      client.emit('initialPool', data);\r

  \    } else {\r

  \      logSend('gameState');\r

  \      this.safeEmitState(true, true, true, true, client);\r

  \    }\r

  \  }\r

  \  playerJoins(client, x) {\r

  \    let pl = this.addPlayer(client, x);\r

  \    this.sendInitialOrState(client);\r

  \    this.io.emit('userMessage', {\r

  \      username: x,\r

  \      msg: `user ${pl.name} joined! (players:${this.getPlayerNames()})`,\r

  \    });\r

  \  }\r

  \  playerLeft(client, data) {\r

  \    let id = client.id;\r

  \    let players = this.players;\r

  \    delete players[id];\r

  \    let plState = this.getPlayerState(id);\r

  \    if (plState) removeInPlace(this.State.players, plState);\r

  \  }\r

  \  playerMovesPerle(client, x) {\r

  \    let iPerle = x.iPerle;\r

  \    let iFrom = x.iFrom;\r

  \    let iTo = x.iTo;\r

  \    let username = x.username;\r

  \    let perle = this.byIndex[iPerle];\r

  \    let boardArr = this.State.boardArr;\r

  \    boardArr[iFrom] = null;\r

  \    boardArr[iTo] = iPerle;\r

  \    this.State.boardArr = boardArr;\r

  \    if (isdef(x.displaced)) {\r

  \      this.State.poolArr.unshift(x.displaced);\r

  \    }\r

  \    this.safeEmitState(false, false, false, false);\r

  \  }\r

  \  playerPlacesPerle(client, x) {\r

  \    let iPerle = x.iPerle;\r

  \    let iField = x.iField;\r

  \    let username = x.username;\r

  \    let state = this.State;\r

  \    let perle = state.pool[iPerle];\r

  \    removeInPlace(state.poolArr, iPerle);\r

  \    if (isdef(x.displaced)) { state.poolArr.unshift(x.displaced); }\r

  \    state.boardArr[iField] = iPerle;\r

  \    this.safeEmitState(false, false, false, false);\r

  \  }\r

  \  playerRemovesPerle(client, x) {\r

  \    let iPerle = x.iPerle;\r

  \    let iFrom = x.iFrom;\r

  \    let state = this.State;\r

  \    state.boardArr[iFrom] = null;\r

  \    state.poolArr.unshift(iPerle);\r

  \    let pl = this.players[client.id];\r

  \    this.safeEmitState(false, false, false, false);\r

  \  }\r

  \  playerReset(client, x) {\r

  \    this.initState(x.settings);\r

  \    let username = x.username;\r

  \    this.sendInitialOrState(client);\r

  \  }\r

  \  updatePlayerState(pl) {\r

  \    let plState = firstCond(this.State.players, x => x.id == pl.id);\r

  \    plState.isInitialized = pl.isInitialized;\r

  \  }\r

  }"
FakeSocketClass: "class FakeSocketClass {\r

  \  constructor() {\r

  \    if (VerboseSocket) console.log('FAKE SOCKET!!!');\r

  \  }\r

  \  emit() { if (VerboseSocket) console.log('client emits', ...arguments);
  }\r

  }"
FileUploadForm: "class FileUploadForm {\r

  \  constructor(dParent, title, route, onSubmit) {\r

  \    this.dParent = dParent;\r

  \    this.title = title;\r

  \    this.route = route;\r

  \    this.onSubmit = onSubmit;\r

  \    let id = this.id = getUID();\r

  \    this.uploadUrl = SERVERURL + route;\r

  \    this.createHtml(route)\r

  \  }\r

  \  bretter() { this.createHtml('bretter'); }\r

  \  perlen() { this.createHtml('perlen'); }\r

  \  createHtml(route) {\r

  \    let elem = createElementFromHTML(`\r

  \    <div>\r

  \      <form action=\"/${route}\" enctype=\"multipart/form-data\"
  method=\"post\">\r

  \        <input type=\"file\" name=\"${route}\" accept='image/*' multiple>\r

  \        <input type=\"submit\" value=\"Upload\">\r

  \      </form>  \r

  \    </div>\r

  \    `);\r

  \    mAppend(this.dParent, elem);\r

  \  }\r

  }"
FixedWidthWrapGrid: "class FixedWidthWrapGrid {\r

  \  constructor(ms, cols, { wGrid, hGrid, hField, margin = 10, gap = 4 } =
  {}) {\r

  \    this.cont = ms;\r

  \    this.g = ms.elem;\r

  \    setOrigin(this.g, false);\r

  \    this.cols = cols;\r

  \    this.margin = margin;\r

  \    this.gap = gap;\r

  \    if (isdef(wGrid) && isdef(hGrid)) { this.wCont = wGrid; this.hCont =
  hGrid; }\r

  \    else[this.wCont, this.hCont] = ms.getSize();\r

  \    this.iNext = 0;\r

  \    this.bounds = [];\r

  \    this.w = this.wCont - 2 * margin;\r

  \    this.h = this.hCont - 2 * margin;\r

  \    this.origin = { x: margin, y: margin };\r

  \    this.wField = this.w / this.cols;\r

  \    this.hField = isdef(hField) ? hField : this.wField;\r

  \  }\r

  \  nextBounds() {\r

  \    let i = this.iNext;\r

  \    let irow = Math.floor(i / this.cols);\r

  \    let icol = i % this.cols;\r

  \    let x = this.origin.x + this.wField / 2 + icol * this.wField;\r

  \    let y = this.origin.y + this.hField / 2 + irow * this.hField;\r

  \    let w = this.wField - this.gap;\r

  \    let h = this.hField - this.gap;\r

  \    this.iNext += 1;\r

  \    return [x, y, w, h];\r

  \  }\r

  }"
G2Player: "class G2Player {\r

  \  constructor(name, o) {\r

  \    this.name = name;\r

  \    copyKeys(o, this);\r

  \    this.maxLevel = isdef(this.levels) ? Object.keys(this.levels).length -
  1 : 0;\r

  \    this.id = name;\r

  \    this.color = getColorDictColor(this.color);\r

  \    this.moveCounter = 0;\r

  \  }\r

  \  startGame() {\r

  \    this.moveCounter = 0;\r

  \    this.winner = this.gameOver = null;\r

  \    this.setStartPlayer();\r

  \  }\r

  \  clear() { clearTimeout(this.TO); }\r

  \  changePlayer() {\r

  \    let idx = this.iPlayer = (this.iPlayer + 1) % this.players.length;\r

  \    this.setPlayers();\r

  \  }\r

  \  heuristic(state) { return 1; }\r

  \  setPlayers() {\r

  \    this.plTurn = this.playerOrder[this.iPlayer];\r

  \    this.plOpp = this.plTurn == this.ai ? this.human : this.ai;\r

  \  }\r

  \  setStartPlayer() {\r

  \    if (this.startPlayer == 'human') this.playerOrder = [this.human,
  this.ai];\r

  \    else if (this.startPlayer == 'ai') this.playerOrder = [this.ai,
  this.human];\r

  \    else this.playerOrder = chooseRandom([[this.human, this.ai], [this.ai,
  this.human]]);\r

  \    this.iPlayer = 0;\r

  \    this.setPlayers();\r

  \  }\r

  \  startRound() { }\r

  \  prompt() { }\r

  \  eval() { }\r

  \  activate() { }\r

  }"
Game: "class Game {\r

  \  constructor(name, o) {\r

  \    this.name = name;\r

  \    copyKeys(o, this);\r

  \    this.maxLevel = isdef(this.levels) ? Object.keys(this.levels).length -
  1 : 0;\r

  \    this.id = name;\r

  \    this.color = getColorDictColor(this.color);\r

  \  }\r

  \  clear() { clearTimeout(this.TO); clearFleetingMessage(); }\r

  \  startGame() { }\r

  \  start_Level() {\r

  \    this.keys = setKeysG(this, filterWordByLengthG, 25);\r

  \    console.assert(nundef(this.numPics) || this.keys.length >=
  this.numPics, 'WAAAAAAAAAAAS? nMin in setKeys nicht richtig!!!!! ' +
  this.numPics + ' ' + this.keys.length)\r

  \  }\r

  \  startRound() { }\r

  \  prompt() {\r

  \    myShowPics(this.controller.evaluate.bind(this.controller));\r

  \    setGoal();\r

  \    show_instruction(`click <b>${Goal.label.toUpperCase()}</b>`, dTitle,
  `click ${Goal.label}`);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    sayTryAgain();\r

  \    if (this.showHint) shortHintPic();\r

  \    return 10;\r

  \  }\r

  \  activate() { }\r

  \  interact() { }\r

  \  eval(ev) {\r

  \    ev.cancelBubble = true;\r

  \    let item = findItemFromEvent(Pictures, ev);\r

  \    Selected = { pic: item, feedbackUI: iDiv(item), sz:
  getRect(iDiv(item)).h };\r

  \    Selected.reqAnswer = Goal.label;\r

  \    Selected.answer = item.label;\r

  \    if (item.label == Goal.label) { return true; } else { return false; }\r

  \  }\r

  }"
GAristo: class GAristo { }
GKriegBack: "class GKriegBack {\r

  \  load(state) {\r

  \    this.history = [];\r

  \    let deck = this.deck = new Deck('52');\r

  \    let n = 4;\r

  \    this.pl1 = { hand: deck.deal(n), trick: [], index: 0 }; if
  (isdef(state) && isdef(state.pl1)) addKeys(state.pl1, this.pl1);\r

  \    this.pl2 = { hand: deck.deal(n), trick: [], index: 1 }; if
  (isdef(state) && isdef(state.pl2)) addKeys(state.pl2, this.pl2);\r

  \    this.players = [this.pl1, this.pl2];\r

  \    this.iturn = 0;\r

  \    if (nundef(state)) return;\r

  \    if (isdef(state.pl1.hand)) this.pl1.hand = parseHand(state.pl1.hand,
  deck);\r

  \    if (isdef(state.pl2.hand)) this.pl2.hand = parseHand(state.pl2.hand,
  deck);\r

  \    if (isdef(state.pl1.trick)) state.pl1.trick.map(x =>
  this.pl1.trick.push(parseHand(x, deck)));\r

  \    if (isdef(state.pl2.trick)) state.pl2.trick.map(x =>
  this.pl2.trick.push(parseHand(x, deck)));\r

  \    if (isdef(state.deck)) this.deck.setData(parseHand(state.deck));\r

  \    if (!isEmpty(this.pl1.trick)) {\r

  \      let len1 = this.pl1.trick.length;\r

  \      let len2 = this.pl2.trick.length;\r

  \      if (len1 > len2) this.iturn = 1;\r

  \      else {\r

  \        this.resolve();\r

  \        this.iturn = 0;\r

  \      }\r

  \    }\r

  \  }\r

  \  get_state() { return { pl1: this.pl1, pl2: this.pl2, deck: this.deck }
  };\r

  \  turn() { return this.iturn; }\r

  \  top(pl) {\r

  \    return Card52.getRankValue(arrFirstOfLast(pl.trick));\r

  \  }\r

  \  get_moves() {\r

  \    let pl = this.player();\r

  \    let x = pl.trick.length > 0 ? arrTakeFromEnd(pl.hand, 3) :
  [arrLast(pl.hand)];\r

  \    x.reverse();\r

  \    return [x];\r

  \  }\r

  \  make_random_move() {\r

  \    let moves = this.get_moves();\r

  \    let move = chooseRandom(moves);\r

  \    this.make_move(move);\r

  \  }\r

  \  make_move(move) {\r

  \    let pl = this.player();\r

  \    pl.trick.push(move);\r

  \    move.map(x => removeInPlace(pl.hand, x));\r

  \    this.lastMove = move;\r

  \  }\r

  \  resolve() {\r

  \    let result = this._resolve();\r

  \    this.push_history(this.iturn, this.lastMove, result);\r

  \    return result ? result.iWinner : null;\r

  \  }\r

  \  swap_turn() { this.iturn = this.iturn == 0 ? 1 : 0; }\r

  \  make_random_moveX() {\r

  \    let moves = this.get_moves();\r

  \    let move = chooseRandom(moves);\r

  \    this.make_moveX(move);\r

  \  }\r

  \  make_moveX(move) {\r

  \    this.make_move(move);\r

  \    let result = this._resolve();\r

  \    this.push_history(this.iturn, move, result);\r

  \    this.swap_turn();\r

  \  }\r

  \  _resolve() {\r

  \    let pl = this.player(), opp = this.opponent();\r

  \    console.log('...resolve', pl.trick, opp.trick)\r

  \    if (opp.trick.length != pl.trick.length) return null;\r

  \    let t1 = this.top(pl); let t2 = this.top(opp);\r

  \    console.log('resolve: compare t1', t1, 't2', t2);\r

  \    if (isdef(t1) && isdef(t2)) {\r

  \      if (t1 > t2) { return this.add_trick_from_to(opp, pl); }\r

  \      else if (t2 > t1) { return this.add_trick_from_to(pl, opp); }\r

  \      else if (isEmpty(pl.hand)) { return this.add_trick_from_to(pl, opp);
  }\r

  \      else if (isEmpty(opp.hand)) { return this.add_trick_from_to(opp, pl);
  }\r

  \      else return null;\r

  \    }\r

  \    return null;\r

  \  }\r

  \  add_trick_from_to(plFrom, plTo) {\r

  \    let t1 = plFrom.trick;\r

  \    let t2 = plTo.trick;\r

  \    let iLoser = plFrom.index;\r

  \    let iWinner = plTo.index;\r

  \    let cards1 = arrFlatten(plFrom.trick);\r

  \    let cards2 = arrFlatten(plTo.trick);\r

  \    let cards = cards1.concat(cards2);\r

  \    plTo.hand = cards.concat(plTo.hand);\r

  \    plFrom.trick = [];\r

  \    plTo.trick = [];\r

  \    return { iWinner: iWinner, winnerTrick: t2, iLoser: iLoser, loserTrick:
  t1, cards: cards };\r

  \  }\r

  \  undo() {\r

  \    let hist = this.pop_history();\r

  \    if (hist == null) { return null; }\r

  \    let move = hist.move;\r

  \    this.iturn = hist.iturn;\r

  \    let pl = this.player();\r

  \    pl.hand.push(move);\r

  \    move.map(x => removeInPlace(pl.trick, x));\r

  \    if (isdef(hist.result)) {\r

  \      let plWin = this.players[hist.iWinner];\r

  \      let plLose = this.players[hist.iLoser];\r

  \      plWin.trick = hist.winnerTrick;\r

  \      plLose.trick = hist.loserTrick;\r

  \      plWin.hand = arrTake(plWin.hand, plWin.hand.length -
  hist.cards.length);\r

  \    }\r

  \  }\r

  \  print_state(comment = '') {\r

  \    if (nundef(this.history)) this.history = [];\r

  \    let state = jsCopy(this.get_state());\r

  \    console.log('____' + comment + ' #' + this.history.length, 'turn=' +
  this.iturn);\r

  \    console.log('pl1: hand:' + arrString(this.pl1.hand, iToValue), 'trick',
  arrString(this.pl1.trick, iToValue), 'top', this.top(this.pl1));\r

  \    console.log('pl2: hand:' + arrString(this.pl2.hand, iToValue), 'trick',
  arrString(this.pl2.trick, iToValue), 'top', this.top(this.pl2));\r

  \  }\r

  \  player() { return this.players[this.iturn]; }\r

  \  opponent() { return this.players[(this.iturn + 1) % this.players.length];
  }\r

  \  push_history(iturn, move, result) { if (nundef(this.history))
  this.history = []; this.history.push({ iturn: iturn, move: move, result:
  result }); return this.history; }\r

  \  pop_history() { if (nundef(this.history)) this.history = []; return
  this.history.pop(); }\r

  \  is_war() { let pl = this.player(), opp = this.opponent(); return
  pl.trick.length > 0 && pl.trick.length == opp.trick.length && this.top(pl) ==
  this.top(opp); }\r

  \  in_war() { let pl = this.player(), opp = this.opponent(); return
  pl.trick.length != opp.trick.length && pl.trick.length > 1; }\r

  \  in_trick() { let pl = this.player(), opp = this.opponent(); return
  pl.trick.length == 0 && opp.trick.length == 1; }\r

  \  is_out_of_cards() { return this._is_out_of_cards(this.player()) ||
  this._is_out_of_cards(this.opponent()); }\r

  \  player_is_out_of_cards() { return this._is_out_of_cards(this.player());
  }\r

  \  _is_out_of_cards(pl) { return (isEmpty(pl.trick) && isEmpty(pl.hand));
  }\r

  \  winner() { return firstCond(this.players, x => !isEmpty(x.hand) ||
  !isEmpty(x.trick)); }\r

  }"
GKriegFront: "class GKriegFront {\r

  \  constructor(hPlayer, dParent) { this.hPlayer = hPlayer; this.dParent =
  dParent; this.setup(); }\r

  \  write() { write('front', ...arguments); }\r

  \  setup() { this.areas = makeAreasKrieg(this.dParent); }\r

  \  clear() { this.areas.map(x => clearElement(diContent(x))); }\r

  \  clearZones() { for (const k of ['t0', 't1', 'h0', 'h1'])
  this.clearZones(k); }\r

  \  clearZone(k) { clearElement(this.getZoneDiv(k)); }\r

  \  getZoneDiv(k) { return this.hands[k].zone; }\r

  \  getTrickZoneDiv(iPlayer) { return this.getZoneDiv('t' + iPlayer); }\r

  \  getHandZoneDiv(iPlayer) { return this.getZoneDiv('h' + iPlayer); }\r

  \  getPlayerCards(iPlayer) { return this.hands['h' + iPlayer].iHand.items;
  }\r

  \  getTrickCards() {\r

  \    let res = [];\r

  \    let t0 = this.hands.t0;\r

  \    if (isdef(t0.iHand.items)) {\r

  \      res = res.concat(t0.iHand.items);\r

  \    }\r

  \    let t1 = this.hands.t1;\r

  \    if (isdef(t1.iHand.items)) {\r

  \      res = res.concat(t1.iHand.items);\r

  \    }\r

  \    return res;\r

  \  }\r

  \  animatePlayerMove(iPlayer, callback) {\r

  \    let cards = this.getPlayerCards(iPlayer);\r

  \    let c = arrLast(cards);\r

  \    let dSource = this.hands['h' + iPlayer].zone;\r

  \    let key = 't' + iPlayer;\r

  \    let trick = this.hands[key];\r

  \    let pos1 = lookup(this, ['pos1', key]);\r

  \    let dTarget, offset;\r

  \    if (isdef(pos1)) {\r

  \      dTarget = trick.zone;\r

  \      offset = { x: pos1.x - 10, y: pos1.y - 10 };\r

  \    } else {\r

  \      dTarget = trick.zone;\r

  \      let empty = nundef(trick.iHand.items);\r

  \      offset = { x: empty ? 0 : 0, y: 0 };\r

  \    }\r

  \    aMove(iDiv(c), dSource, dTarget, callback, offset, 500, 'EASE', 1);\r

  \  }\r

  \  animateResolve(iWinner, callback) {\r

  \    let cards = this.getTrickCards();\r

  \    let dSource = this.hands.t0.zone;\r

  \    let dTarget = this.hands['h' + iWinner].zone;\r

  \    let offset = { x: 0, y: 0 };\r

  \    let trickCards = this.getTrickCards();\r

  \    let iLast = trickCards.length, i = 0;\r

  \    for (const c of trickCards) {\r

  \      dSource = iDiv(c);\r

  \      i++; let f;\r

  \      if (i == iLast) {\r

  \        f = callback;\r

  \      } else {\r

  \        f = null;\r

  \      }\r

  \      iMoveFromToPure(c, dSource, dTarget, f, offset);\r

  \    }\r

  \  }\r

  \  presentState(state) {\r

  \    this.write('present', jsCopy(state))\r

  \    this.clear();\r

  \    let trick1 = arrFlatten(state.pl1.trick)\r

  \    let trick2 = arrFlatten(state.pl2.trick);\r

  \    let pl1Hand = state.pl1.hand;\r

  \    let pl2Hand = state.pl2.hand;\r

  \    let arrs = [[trick1, trick2], [pl1Hand], [pl2Hand]];\r

  \    let hands = [];\r

  \    for (let i = 0; i < 3; i++) {\r

  \      let area = this.areas[i];\r

  \      let d = diContent(area);\r

  \      iMessage(area, '');\r

  \      for (let j = 0; j < arrs[i].length; j++) {\r

  \        let arr = arrs[i][j];\r

  \        let id = 'a' + i + '_h' + j;\r

  \        let what = iH01(arr, d, {}, id, i == 0 ? 20 : 0);\r

  \        hands.push(what);\r

  \      }\r

  \    }\r

  \    for (let i = 0; i < 2; i++) {\r

  \      let cards = hands[i].iHand.items;\r

  \      if (isEmpty(hands[i].arr)) continue;\r

  \      for (let j = 0; j < cards.length - 1; j++) {\r

  \        Card52.turnFaceDown(cards[j]);\r

  \      }\r

  \    }\r

  \    this.hands = {};\r

  \    let handNames = ['t0', 't1', 'h0', 'h1'];\r

  \    if (nundef(this.pos1)) { this.pos1 = {}; }\r

  \    for (let i = 0; i < 4; i++) {\r

  \      let hi = hands[i];\r

  \      this.hands[handNames[i]] = hi;\r

  \      hi.key = handNames[i];\r

  \      if (!isEmpty(hi.arr)) {\r

  \        let hih = hi.iHand;\r

  \        this.pos1[handNames[i]] = getRect(iDiv(hih), hi.zone);\r

  \      }\r

  \    }\r

  \  }\r

  }"
GMinimalGame: "class GMinimalGame {\r

  \  constructor(name, o) {\r

  \    this.name = name;\r

  \    copyKeys(o, this);\r

  \    this.id = name;\r

  \    this.color = getColorDictColor(this.color);\r

  \  }\r

  \  clear() { clearTimeout(this.TO); clearFleetingMessage(); }\r

  \  startGame() { clearElement(dTable); }\r

  \  clear() { }\r

  \  prompt() { }\r

  \  activate() { }\r

  }"
gridY: "class gridY {\r

  \  constructor({\r

  \    bid = 'gridY',\r

  \    rows = 4,\r

  \    cols = 4,\r

  \    w = 100,\r

  \    h = 100,\r

  \    gName = 'g',\r

  \    x = 0,\r

  \    y = 0,\r

  \    margin = 10,\r

  \    gap = 10,\r

  \    board = { level: 1, ipal: 2, bg: undefined, fg: undefined, shape:
  undefined, border: undefined, thickness: undefined },\r

  \    fields = { level: 6, ipal: 3, bg: undefined, fg: undefined, shape:
  undefined, border: undefined, thickness: undefined },\r

  \    cities = { level: 6, ipal: 2, bg: undefined, fg: undefined, shape:
  'circle', border: undefined, thickness: undefined },\r

  \    streets = { level: 6, ipal: 4, bg: undefined, fg: 'yellow', shape:
  'line', border: 'blue', thickness: 10 }\r

  \  }) {\r

  \    this.prelim(bid, rows, cols, w, h, x, y, margin);\r

  \    this.createBoard(gName, x, y, board);\r

  \    this.createFields(bid, gName, rows, cols, gap, fields);\r

  \    addNodes(this, bid, gName, cities);\r

  \    addEdges(this, bid, gName, streets);\r

  \    drawElems(this.fields);\r

  \    drawElems(this.edges);\r

  \    drawElems(this.nodes);\r

  \  }\r

  \  prelim(id, rows, cols, w, h, x, y, margin) {\r

  \    this.id = id;\r

  \    this.rows = rows;\r

  \    this.cols = cols;\r

  \    this.w = w;\r

  \    this.h = h;\r

  \    this.x = x;\r

  \    this.y = y;\r

  \    let wFieldMax = (w - 2 * margin) / cols;\r

  \    let hFieldMax = (h - 2 * margin) / rows;\r

  \    let szField = Math.min(wFieldMax, hFieldMax);\r

  \    this.wBoard = roundEven(szField * cols);\r

  \    this.hBoard = roundEven(szField * rows);\r

  \    this.wField = this.hField = roundEven(szField);\r

  \  }\r

  \  createBoard(gName, x, y, board) {\r

  \    this.board = makeElemY('board', null, gName, board.level, {\r

  \      w: this.wBoard,\r

  \      h: this.hBoard,\r

  \      x: x,\r

  \      y: y,\r

  \      ipal: board.ipal,\r

  \      bg: board.bg,\r

  \      fg: board.fg,\r

  \      shape: board.shape,\r

  \      border: board.border,\r

  \      thickness: board.thickness\r

  \    });\r

  \  }\r

  \  createFields(bid, gName, rows, cols, gap, fields) {\r

  \    this.fields = [];\r

  \    this.fieldsByRowCol = [];\r

  \    for (let i = 1; i <= rows; i++) {\r

  \      this.fieldsByRowCol[i] = [];\r

  \      for (let j = 1; j <= cols; j++) {\r

  \        let field = makeElemY('field', bid, gName, fields.level, {\r

  \          row: i,\r

  \          col: j,\r

  \          w: this.wField,\r

  \          h: this.hField,\r

  \          gap: gap,\r

  \          x: (j - 1) * this.wField - this.wBoard / 2 + this.wField / 2 +
  this.x,\r

  \          y: (i - 1) * this.hField - this.hBoard / 2 + this.hField / 2 +
  this.y,\r

  \          ipal: fields.ipal,\r

  \          bg: fields.bg,\r

  \          fg: fields.fg,\r

  \          shape: fields.shape,\r

  \          border: fields.border,\r

  \          thickness: fields.thickness\r

  \        });\r

  \        this.fields.push(field.id);\r

  \        this.fieldsByRowCol[i][j] = field.id;\r

  \        field.edges = [];\r

  \        field.fields = [];\r

  \        field.nodes = [];\r

  \        let q = [[-0.5, -0.5], [0.5, -0.5], [0.5, 0.5], [-0.5, 0.5]];\r

  \        field.poly = getPoly(q, field.x, field.y, field.w, field.h);\r

  \      }\r

  \    }\r

  \  }\r

  \  isValid(r, c) {\r

  \    return r in this.fields && c in this.fields[r];\r

  \  }\r

  }"
gText: "class gText {\r

  \  constructor(g) {\r

  \    this.elem = g;\r

  \    this.texts = [];\r

  \    this.textBackground = null;\r

  \  }\r

  \  //#region text\r

  \  computeTextColors(fill, alpha = 1, textBg = null) {\r

  \    fill = fill ? fill : this.fg ? this.fg : textBg ?
  colorIdealText(textBg) : this.bg ? colorIdealText(this.bg) : null;\r

  \    if (!fill) {\r

  \      fill = 'white';\r

  \      textBg = 'gray';\r

  \    }\r

  \    fill = colorFrom(fill, alpha);\r

  \    return { fill: fill, bg: textBg ? textBg : this.bg };\r

  \  }\r

  \  setTextFill(r, fill, alpha = 1, textBg = null) {\r

  \    let textColors = this.computeTextColors(fill, alpha, textBg);\r

  \    r.setAttribute('fill', textColors.fill);\r

  \    r.setAttribute('stroke', 'none');\r

  \    r.setAttribute('stroke-width', 0);\r

  \    return textColors.bg;\r

  \  }\r

  \  setTextBorder(color, thickness = 0) {\r

  \    let c = colorFrom(color);\r

  \    let children = arrChildren(this.elem);\r

  \    unitTestMS('setTextBorder', children);\r

  \    for (const ch of children) {\r

  \      let t = getTypeOf(ch);\r

  \      if (t == 'text' || t == 'line') {\r

  \        ch.setAttribute('stroke-width', thickness);\r

  \        ch.setAttribute('stroke', c);\r

  \      }\r

  \    }\r

  \  }\r

  \  calcTextWidth(txt, fz, family, weight) {\r

  \    let sFont = weight + ' ' + fz + 'px ' + family;\r

  \    sFont = sFont.trim();\r

  \    let wText = getTextWidth(txt, sFont);\r

  \    return wText;\r

  \  }\r

  \  addFrame(color) {\r

  \    if (this.cat == 'd') {\r

  \      this.body.style.boxSizing = 'border-box';\r

  \      this.body.style.border = '5px solid ' + color;\r

  \    }\r

  \  }\r

  \  addFlexTitleBody() {\r

  \    let content = this.elem.innerHTML;\r

  \    clearElement(this.elem);\r

  \    let d = this.elem;\r

  \    d.style.display = 'flex';\r

  \    d.style.flexDirection = 'column';\r

  \    let dTitle = document.createElement('div');\r

  \    this.title = dTitle;\r

  \    this.title.style.padding = '6px';\r

  \    this.title.style.textAlign = 'center';\r

  \    let dBody = document.createElement('div');\r

  \    dBody.style.flexGrow = 1;\r

  \    dBody.style = \"flex-grow:1;overflow:auto;padding:0px 6px\"\r

  \    this.body = dBody;\r

  \    this.body.innerHTML = content;\r

  \    this.elem.appendChild(this.title);\r

  \    this.elem.appendChild(this.body);\r

  \  }\r

  \  setTitle({\r

  \    txt,\r

  \    className = null,\r

  \    isOverlay = false,\r

  \    isMultiText = false,\r

  \    replaceFirst = true,\r

  \    fill = null,\r

  \    textBg = null,\r

  \    alpha = 1,\r

  \    x = 0,\r

  \    y = 0,\r

  \    fz = 20,\r

  \    family = 'Arial, Helvetica, sans-serif',\r

  \    weight = ''\r

  \  } = {}) {\r

  \    if (this.cat == 'd') {\r

  \      if (nundef(this.body) || nundef(this.title)) {\r

  \        this.addFlexTitleBody();\r

  \      }\r

  \      clearElement(this.title);\r

  \      if (isdef(textBg)) this.title.style.backgroundColor = textBg;\r

  \      if (isdef(fill)) this.title.style.color = fill;\r

  \      this.title.innerHTML = txt;\r

  \      return this;\r

  \    }\r

  \    let isFirstChild = this.elem.childNodes.length == 0;\r

  \    let r = document.createElementNS('http://www.w3.org/2000/svg',
  'text');\r

  \    if (isFirstChild) {\r

  \      this.ground = r;\r

  \    }\r

  \    r.setAttribute('font-family', family);\r

  \    r.setAttribute('font-weight', weight);\r

  \    if (isOverlay) {\r

  \      r.classList.add('overlay');\r

  \      this.overlay = r;\r

  \    }\r

  \    r.classList.add('msText');\r

  \    if (className) {\r

  \      r.classList.add(className);\r

  \    }\r

  \    textBg = this.setTextFill(r, fill, alpha, textBg);\r

  \    if (isFirstChild) {\r

  \      this.bgs.ground = textBg;\r

  \      this.fgs.ground = fill;\r

  \    }\r

  \    let wText = this.calcTextWidth(txt, fz, family, weight);\r

  \    if (this.isLine && !isMultiText) {\r

  \      x += this.x;\r

  \      y += this.y;\r

  \      if (this.textBackground) {\r

  \        this.elem.removeChild(this.textBackground);\r

  \      }\r

  \      this.textBackground = this.getRect({ w: wText + 10, h: fz * 1.5,
  fill: textBg });\r

  \      this.textBackground.setAttribute('rx', 6);\r

  \      this.textBackground.setAttribute('ry', 6);\r

  \    }\r

  \    r.setAttribute('font-size', '' + fz + 'px');\r

  \    r.setAttribute('x', x);\r

  \    r.setAttribute('y', y + fz / 2.8);\r

  \    r.setAttribute('text-anchor', 'middle');\r

  \    r.textContent = txt;\r

  \    r.setAttribute('pointer-events', 'none');\r

  \    if (replaceFirst && this.texts.length > 0) {\r

  \      let ch = this.texts[0].el;\r

  \      this.elem.insertBefore(r, ch);\r

  \      if (this.isLine) {\r

  \        this.elem.insertBefore(this.textBackground, r);\r

  \      }\r

  \      this.removeTexts();\r

  \    } else {\r

  \      if (this.isLine && !isMultiText) {\r

  \        this.elem.appendChild(this.textBackground);\r

  \      }\r

  \      this.elem.appendChild(r);\r

  \    }\r

  \    let res = { el: r, w: wText };\r

  \    this.texts.push(res);\r

  \    return res;\r

  \  }\r

  \  text({\r

  \    txt,\r

  \    className = null,\r

  \    isOverlay = false,\r

  \    isMultiText = false,\r

  \    replaceFirst = true,\r

  \    fill = null,\r

  \    bgText = null,\r

  \    alpha = 1,\r

  \    x = 0,\r

  \    y = 0,\r

  \    fz = 20,\r

  \    family = 'Arial, Helvetica, sans-serif',\r

  \    weight = '',\r

  \    font\r

  \  } = {}) {\r

  \    if (isdef(txt) && !isString(txt)) txt = txt.toString();\r

  \    if (isEmpty(txt)) {\r

  \      this.removeTexts(); return this;\r

  \    }\r

  \    let isFirstChild = this.elem.childNodes.length == 0;\r

  \    let r = document.createElementNS('http://www.w3.org/2000/svg',
  'text');\r

  \    if (isFirstChild) { this.ground = r; }\r

  \    if (isdef(font)) { r.style.font = font; }\r

  \    else {\r

  \      r.setAttribute('font-family', family);\r

  \      r.setAttribute('font-weight', weight);\r

  \      r.setAttribute('font-size', '' + fz + 'px');\r

  \    }\r

  \    if (isOverlay) { r.classList.add('overlay'); this.overlay = r; }\r

  \    r.classList.add('msText');\r

  \    if (className) { r.classList.add(className); }\r

  \    bgText = this.setTextFill(r, fill, alpha, bgText);\r

  \    let wText = isdef(font) ? getTextWidth(txt, font) :
  this.calcTextWidth(txt, fz, family, weight);\r

  \    if (this.elem.children[0]) {\r

  \      let bParent = getBounds(this.elem.children[0]);\r

  \      if (!this.textBackground && (wText > bParent.width || isdef(bgText)))
  {\r

  \        if (nundef(bgText)) {\r

  \          bgText =
  this.elem.children[0].getAttribute('background-color');\r

  \        }\r

  \        this.textBackground = agRect(this.elem, wText + 18, fz)\r

  \        gBg(this.textBackground, bgText);\r

  \        gRounding(this.textBackground, 4);\r

  \      }\r

  \    }\r

  \    if (this.isLine && !isMultiText) {\r

  \      x += this.x;\r

  \      y += this.y;\r

  \      if (this.textBackground) {\r

  \        this.elem.removeChild(this.textBackground);\r

  \      }\r

  \      this.textBackground = this.getRect({ w: wText + 10, h: fz * 1.5,
  fill: bgText });\r

  \      this.textBackground.setAttribute('rx', 6);\r

  \      this.textBackground.setAttribute('ry', 6);\r

  \    }\r

  \    r.setAttribute('x', x);\r

  \    if (isdef(font)) fz = firstNumber(font);\r

  \    r.setAttribute('y', y + fz / 2.8);\r

  \    r.setAttribute('text-anchor', 'middle');\r

  \    r.textContent = txt;\r

  \    r.setAttribute('pointer-events', 'none');\r

  \    if (replaceFirst && this.texts.length > 0) {\r

  \      let ch = this.texts[0].el;\r

  \      this.elem.insertBefore(r, ch);\r

  \      if (this.isLine) {\r

  \        this.elem.insertBefore(this.textBackground, r);\r

  \      }\r

  \      this.removeTexts();\r

  \    } else {\r

  \      if (this.isLine && !isMultiText) {\r

  \        this.elem.appendChild(this.textBackground);\r

  \      }\r

  \      this.elem.appendChild(r);\r

  \    }\r

  \    let res = { txt: txt, ui: r, w: wText };\r

  \    this.texts.push(res);\r

  \    return res;\r

  \  }\r

  \  reduceFontSize(el, n) {\r

  \    let fz = el.getAttribute('font-size');\r

  \    fz = firstNumber(fz);\r

  \    if (fz > n) fz -= n;\r

  \    el.setAttribute('font-size', '' + fz + 'px');\r

  \  }\r

  \  clearText() { this.removeTexts(); }\r

  \  removeTexts() {\r

  \    for (const t of this.texts) {\r

  \      this.elem.removeChild(t.el);\r

  \      if (this.textBackground)
  this.elem.removeChild(this.textBackground);\r

  \    }\r

  \    this.texts = [];\r

  \  }\r

  \  multitext({\r

  \    replacePrevious = true,\r

  \    className = '',\r

  \    maxWidth = 1000,\r

  \    txt = ['one', 'two', 'three'],\r

  \    fz = 20,\r

  \    fill = null,\r

  \    textBg = null,\r

  \    padding = 1,\r

  \    alpha = 1,\r

  \    x = 0,\r

  \    y = 0,\r

  \    family = 'Arial, Helvetica, sans-serif',\r

  \    weight = 'lighter'\r

  \  }) {\r

  \    let nChar = 0;\r

  \    for (const s of txt) { nChar = Math.max(nChar, s.length); }\r

  \    let maxFH = Math.round(this.h / txt.length);\r

  \    let maxFW = Math.round((this.w / nChar) * 2);\r

  \    let fzFit = Math.min(maxFH, maxFW) - 2 * padding;\r

  \    if (fzFit < fz) fz = fzFit;\r

  \    if (fzFit > 5 * fz) fz *= 5;\r

  \    if (replacePrevious) this.removeTexts();\r

  \    let h = txt.length * (fz + padding);\r

  \    let textColors = this.computeTextColors(fill, alpha, textBg);\r

  \    if (this.isLine) {\r

  \      x += this.x;\r

  \      y += this.y;\r

  \      let tbg = this.textBackground ? this.textBackground :
  this.getRect();\r

  \      tbg.setAttribute('height', h);\r

  \      tbg.setAttribute('fill', textColors.bg);\r

  \      if (!this.textBackground) {\r

  \        this.textBackground = tbg;\r

  \        this.elem.appendChild(this.textBackground);\r

  \      }\r

  \      this.textBackground.setAttribute('rx', 6);\r

  \      this.textBackground.setAttribute('ry', 6);\r

  \    }\r

  \    let yStart = y - h / 2 + fz / 2;\r

  \    let maxW = 0;\r

  \    let akku = [];\r

  \    for (const t of txt) {\r

  \      let tel = this.text({\r

  \        isMultiText: true,\r

  \        replaceFirst: false,\r

  \        className: className,\r

  \        maxWidth: maxWidth,\r

  \        txt: t,\r

  \        fz: fz,\r

  \        fill: fill,\r

  \        padding: padding,\r

  \        alpha: alpha,\r

  \        x: x,\r

  \        y: yStart,\r

  \        family: family,\r

  \        weight: weight\r

  \      });\r

  \      maxW = Math.max(maxW, tel.w);\r

  \      akku.push(tel);\r

  \      yStart += fz + padding;\r

  \    }\r

  \    let isFirstChild = this.elem.childNodes.length == 0;\r

  \    if (isFirstChild || this.isLine) {\r

  \      this.ground = this.textBackground;\r

  \      this.w = maxW + 2 * padding;\r

  \      this.h = h;\r

  \    }\r

  \    if (this.isLine) {\r

  \      this.textBackground.setAttribute('width', this.w);\r

  \      this.textBackground.setAttribute('x', x - this.w / 2);\r

  \      this.textBackground.setAttribute('y', y - this.h / 2);\r

  \    }\r

  \    if (isFirstChild) { this.bgs.ground = textColors.bg; this.fg.ground =
  fill; }\r

  \    return this;\r

  \  }\r

  }"
hexgridY: "class hexgridY {\r

  \  constructor({\r

  \    bid = 'gridY',\r

  \    rows = 4,\r

  \    cols = 4,\r

  \    w = 100,\r

  \    h = 100,\r

  \    gName = 'g',\r

  \    x = 0,\r

  \    y = 0,\r

  \    margin = 10,\r

  \    gap = 10,\r

  \    board = { level: 1, ipal: 2, bg: undefined, fg: undefined, shape:
  undefined, border: undefined, thickness: undefined },\r

  \    fields = { level: 6, ipal: 3, bg: undefined, fg: undefined, shape:
  'hex', border: undefined, thickness: undefined },\r

  \    cities = { level: 6, ipal: 2, bg: undefined, fg: undefined, shape:
  'circle', border: undefined, thickness: undefined },\r

  \    streets = { level: 6, ipal: 4, bg: undefined, fg: undefined, shape:
  'line', border: 'blue', thickness: 10 }\r

  \  }) {\r

  \    this.prelim(bid, rows, cols, w, h, x, y, margin);\r

  \    this.createBoard(gName, x, y, board);\r

  \    this.createFields(bid, gName, rows, cols, gap, fields);\r

  \    addNodes(this, bid, gName, cities);\r

  \    addEdges(this, bid, gName, streets);\r

  \    drawElems(this.fields);\r

  \    drawElems(this.edges);\r

  \    drawElems(this.nodes);\r

  \  }\r

  \  prelim(bid, rows, cols, w, h, x, y, margin) {\r

  \    this.id = bid;\r

  \    rows = rows % 2 != 0 ? rows : rows + 1;\r

  \    this.topcols = cols;\r

  \    this.colarr = calc_hex_col_array(rows, this.topcols);\r

  \    this.maxcols = Math.max(...this.colarr);\r

  \    this.rows = rows;\r

  \    this.cols = cols;\r

  \    this.w = w;\r

  \    this.h = h;\r

  \    this.x = x;\r

  \    this.y = y;\r

  \    let wFieldMax = (w - 2 * margin) / this.maxcols;\r

  \    let hFieldMax = (h - 2 * margin) / rows;\r

  \    hFieldMax /= 0.75;\r

  \    let hField = (2 * this.wFieldMax) / 1.73;\r

  \    let hBoard = hField * 0.75 * rows;\r

  \    if (hBoard > h - 2 * margin) {\r

  \      this.hField = roundEven(hFieldMax);\r

  \      this.wField = roundEven((1.73 * hField) / 2);\r

  \    } else {\r

  \      this.wField = roundEven(wFieldMax);\r

  \      this.hField = roundEven((2 * this.wField) / 1.73);\r

  \    }\r

  \    this.wBoard = roundEven(this.wField * this.maxcols);\r

  \    this.hBoard = roundEven(this.hField * 0.75 * rows + this.hField / 4);\r

  \  }\r

  \  createBoard(gName, x, y, board) {\r

  \    this.board = makeElemY('board', null, gName, board.level, {\r

  \      w: this.wBoard,\r

  \      h: this.hBoard,\r

  \      x: x,\r

  \      y: y,\r

  \      ipal: board.ipal,\r

  \      bg: board.bg,\r

  \      fg: board.fg,\r

  \      shape: board.shape,\r

  \      border: board.border,\r

  \      thickness: board.thickness\r

  \    });\r

  \  }\r

  \  createFields(bid, gName, rows, cols, gap, fields) {\r

  \    this.fields = [];\r

  \    this.fieldsByRowCol = [];\r

  \    let imiddleRow = (rows - 1) / 2;\r

  \    for (let irow = 0; irow < this.colarr.length; irow++) {\r

  \      this.fieldsByRowCol[irow + 1] = [];\r

  \      let colstart = this.maxcols - this.colarr[irow];\r

  \      let y = this.hField * 0.75 * (irow - imiddleRow);\r

  \      for (let j = 0; j < this.colarr[irow]; j++) {\r

  \        var icol = colstart + 2 * j;\r

  \        let x = (icol * this.wField) / 2 + this.wField / 2 - this.wBoard /
  2;\r

  \        let approx = 12;\r

  \        let field = makeElemY('field', bid, gName, fields.level, {\r

  \          row: irow + 1,\r

  \          col: icol + 1,\r

  \          w: this.wField,\r

  \          h: this.hField,\r

  \          gap: gap,\r

  \          x: x,\r

  \          y: y,\r

  \          ipal: fields.ipal,\r

  \          bg: fields.bg,\r

  \          fg: fields.fg,\r

  \          shape: fields.shape,\r

  \          border: fields.border,\r

  \          thickness: fields.thickness\r

  \        });\r

  \        this.fields.push(field.id);\r

  \        this.fieldsByRowCol[irow + 1][icol + 1] = field.id;\r

  \        field.edges = [];\r

  \        field.fields = [];\r

  \        field.nodes = [];\r

  \        let hex = [[0, -0.5], [0.5, -0.25], [0.5, 0.25], [0, 0.5], [-0.5,
  0.25], [-0.5, -0.25]];\r

  \        field.poly = getPoly(hex, field.x, field.y, field.w, field.h);\r

  \        x += this.wField;\r

  \      }\r

  \    }\r

  \  }\r

  \  isValid(r, c) {\r

  \    return r in this.fields && c in this.fields[r];\r

  \  }\r

  }"
ItemViewerClass: "class ItemViewerClass {\r

  \  constructor(dParent, dButtons, keys) {\r

  \    this.options = {\r

  \      n: 100, dParent: dParent,\r

  \      wper: 100, hper: 100,\r

  \      szPic: { w: 80, h: 80 }, padding: 0, fzPic: 40,\r

  \      showLabels: true, showPic: true, fixTextFont: true,\r

  \      isUniform: true, fillArea: true, isRegular: false, hugeFont: true,\r

  \      handler: _standardHandler(this.handSelectSpecialKeys.bind(this)),\r

  \    };\r

  \    _extendOptions(this.options);\r

  \    this.options.wLongest = 'alabama';\r

  \    let items = this.allItems = genItemsFromKeys(isdef(keys) ? keys :
  SymKeys, this.options);\r

  \    console.log(this.allItems.length);\r

  \    this.iStart = 0;\r

  \    dButtons = mDiv(dButtons, { display: 'flex', 'flex-direction':
  'column', matop: -12 });\r

  \    mButton('download', this.saveSpecialKeys.bind(this), dButtons, {
  outline: 'none' });\r

  \    if (this.allItems.length > 100) mButton('next',
  this.itemViewerNext.bind(this), dButtons, { outline: 'none', mabottom: 6,
  matop: 10 });\r

  \    this.itemViewerNext();\r

  \  }\r

  \  itemViewerNext() {\r

  \    let i = this.iStart;\r

  \    let options = this.options;\r

  \    let items = arrFromTo(this.allItems, i, i + options.n);\r

  \    options.n = options.N = items.length;\r

  \    this.iStart += options.n;\r

  \    clearElement(options.dArea);\r

  \    options.fzText = 20;\r

  \    items.map(x => x.label = x.key);\r

  \    items.map(x => makeItemDiv(x, options));\r

  \    items.map(x => mAppend(options.dArea, iDiv(x)));\r

  \  }\r

  \  handSelectSpecialKeys(item) {\r

  \    if (nundef(this.specialKeys)) this.specialKeys = [];\r

  \    toggleItemSelection(item, this.specialKeys);\r

  \    return this.specialKeys.map(x => x.key);\r

  \  }\r

  \  saveSpecialKeys() {\r

  \    let items = this.specialKeys;\r

  \    let dict = {};\r

  \    for (const item of items) {\r

  \      dict[item.key] = item.info;\r

  \    }\r

  \    downloadAsYaml(dict, 'specialKeys');\r

  \  }\r

  }"
Karte: "class Karte {\r

  \  static random(sym = 'bee', h = 220) {\r

  \    return Karte.get(sym, h);\r

  \    return Card52.random();\r

  \  }\r

  \  static c1(info, n, fg, h, w) {\r

  \    let d = mDiv();\r

  \    let svg = mgTag('svg', d, { class: 'card', face: '2C', height: '100%',
  width: '100%', preserveAspectRatio: 'none', viewBox: \"-120 -168 240 336\"
  });\r

  \    let g = mgTag('g', svg);\r

  \    let rect = mgTag('rect', g, { width: 239, height: 335, x: -120, y: 168,
  rx: 12, ry: 12, fill: \"white\", stroke: \"black\" });\r

  \    let t = mgTag('text', g, { 'text-anchor': \"middle\",
  'dominant-baseline': \"middle\", x: 0, y: 0, fill: fg }, { fz: 1000 },
  'HALLO');\r

  \    if (nundef(w)) w = h * .7;\r

  \    if (isdef(h) || isdef(w)) { mSize(d, w, h); }\r

  \    console.log('d', d)\r

  \    return { key: getUID(), div: d, w: w, h: h, faceUp: true };\r

  \  }\r

  \  static card(info, n, fg, h, w) {\r

  \    let x = `\r

  \    <svg xmlns=\"http://www.w3.org/2000/svg\"
  xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"card\" \r

  \      face=\"2C\" height=\"100%\" preserveAspectRatio=\"none\"
  viewBox=\"-120 -168 240 336\" width=\"100%\">\r

  \      <symbol id=\"${fg}${n}\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \        <text text-anchor=\"middle\" dominant-baseline=\"middle\" x=\"0\"
  y=\"0\" fill=\"${fg}\"
  style=\"font-size:1000px;font-weight:bold;\">${n}</text>        \r

  \      </symbol>\r

  \      <symbol id=\"${info.E}\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \        <text text-anchor=\"middle\" dominant-baseline=\"middle\" x=\"0\"
  y=\"-150\" fill=\"red\"
  style=\"font-size:750px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \      </symbol>\r

  \      <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"black\"></rect>`;\r

  \    let h1 = { xs: 24, s: 27, m: 42, l: 60, xl: 70, xxl: 100 };\r

  \    let left = [0, 50, 100, 120];\r

  \    let upperLeftNumber = `<use xlink:href=\"#${fg}${n}\" height=\"42\"
  x=\"-120\" y=\"-156\"></use>`\r

  \      `<use xlink:href=\"#${info.E}\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \      <use xlink:href=\"#${info.E}\" height=\"70\" x=\"-35\"
  y=\"-135.588\"></use>\r

  \      <g transform=\"rotate(180)\">\r

  \        <use xlink:href=\"#${fg}${n}\" height=\"42\" x=\"-120\"
  y=\"-156\"></use>\r

  \        <use xlink:href=\"#${info.E}\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \        <use xlink:href=\"#${info.E}\" height=\"70\" x=\"-35\"
  y=\"-135.588\"></use>\r

  \      </g>\r

  \    </svg>`;\r

  \    let svgCode = x;\r

  \    svgCode = '<div>' + svgCode + '</div>';\r

  \    let el = mCreateFrom(svgCode);\r

  \    if (nundef(w)) w = h * .7;\r

  \    if (isdef(h) || isdef(w)) { mSize(el, w, h); }\r

  \    return { key: getUID(), div: el, w: w, h: h, faceUp: true };\r

  \  }\r

  \  static get52(suit, rank, fg, bg, h, w, faceUp) {\r

  \    let key = suit.toLowerCase();\r

  \    let di = {\r

  \      h: 'hearts', s: 'spades', p: 'spades', c: 'clubs', t: 'clubs', d:
  'diamonds', k: 'diamonds',\r

  \      j: 'joker', '*': 'joker'\r

  \    };\r

  \    if (isdef(di[key])) key = di[key];\r

  \    let di2 = { spades: 'spade suit', hearts: 'heart suit', diamonds:
  'diamond suit', clubs: 'club suit' };\r

  \    if (isdef(di2[key])) key = di2[key];\r

  \    let info = Syms[key];\r

  \    return Karte.get(key, 300, rank, fg);\r

  \    let fz = info.family == 'emoNoto' ? 750 : 1000;\r

  \  }\r

  \  static get(sym = 'bee', h = 110, n = 2, fg = 'indigo', w) {\r

  \    let info = Syms[sym];\r

  \    n = 2;\r

  \    ensureColorNames();\r

  \    if (nundef(fg)) fg = sym == 'spades' || sym == 'clubs' ? 'black' : sym
  == 'hearts' || sym == 'diamonds' ? 'red' :
  chooseRandom(Object.keys(ColorNames));\r

  \    let cardKey = info.family == 'emoNoto' ? 'card0' : 'card52';\r

  \    let basic = {\r

  \      card0: `\r

  \        <svg xmlns=\"http://www.w3.org/2000/svg\"
  xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"card\" \r

  \        face=\"2C\" height=\"100%\" preserveAspectRatio=\"none\"
  viewBox=\"-120 -168 240 336\" width=\"100%\">\r

  \          <symbol id=\"${fg}${n}\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \            <text text-anchor=\"middle\" dominant-baseline=\"middle\"
  x=\"0\" y=\"0\" fill=\"${fg}\"
  style=\"font-size:1000px;font-weight:bold;\">${n}</text>        \r

  \          </symbol>\r

  \          <symbol id=\"${info.E}\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \            <text text-anchor=\"middle\" dominant-baseline=\"middle\"
  x=\"0\" y=\"-150\" fill=\"red\"
  style=\"font-size:750px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \          </symbol>\r

  \          <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"black\"></rect>\r

  \          <use xlink:href=\"#${fg}${n}\" height=\"42\" x=\"-118\"
  y=\"-156\"></use>\r

  \          <use xlink:href=\"#${info.E}\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \          <use xlink:href=\"#${info.E}\" height=\"70\" x=\"-35\"
  y=\"-135.588\"></use>\r

  \          <g transform=\"rotate(180)\">\r

  \            <use xlink:href=\"#${fg}${n}\" height=\"42\" x=\"-118\"
  y=\"-156\"></use>\r

  \            <use xlink:href=\"#${info.E}\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \            <use xlink:href=\"#${info.E}\" height=\"70\" x=\"-35\"
  y=\"-135.588\"></use>\r

  \          </g>\r

  \        </svg>`,\r

  \      card52: `\r

  \        <svg xmlns=\"http://www.w3.org/2000/svg\"
  xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"card\" \r

  \        face=\"2C\" height=\"100%\" preserveAspectRatio=\"none\"
  viewBox=\"-120 -168 240 336\" width=\"100%\">\r

  \          <symbol id=\"${fg}${n}\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \            <text text-anchor=\"middle\" dominant-baseline=\"middle\"
  x=\"0\" y=\"0\" fill=\"${fg}\"
  style=\"font-size:1000px;font-family:opensans;\">${n}</text>        \r

  \          </symbol>\r

  \          <symbol id=\"${info.E}\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \            <text text-anchor=\"middle\" dominant-baseline=\"middle\"
  x=\"0\" y=\"50\" fill=\"${fg}\"
  style=\"font-size:800px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \          </symbol>\r

  \          <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"black\"></rect>\r

  \          <use xlink:href=\"#${fg}${n}\" height=\"40\" x=\"-116.4\"
  y=\"-156\"></use>\r

  \          <use xlink:href=\"#${info.E}\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \          <use xlink:href=\"#${info.E}\" height=\"70\" x=\"-35\"
  y=\"-135.588\"></use>\r

  \          <g transform=\"rotate(180)\">\r

  \            <use xlink:href=\"#${fg}${n}\" height=\"40\" x=\"-116.4\"
  y=\"-156\"></use>\r

  \            <use xlink:href=\"#${info.E}\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \            <use xlink:href=\"#${info.E}\" height=\"70\" x=\"-35\"
  y=\"-135.588\"></use>\r

  \          </g>\r

  \        </svg>`,\r

  \      card7: `\r

  \        <svg xmlns=\"http://www.w3.org/2000/svg\"
  xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"card\" \r

  \        face=\"2C\" height=\"100%\" preserveAspectRatio=\"none\"
  viewBox=\"-120 -168 240 336\" width=\"100%\">\r

  \          <symbol id=\"VC2\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \            <text text-anchor=\"middle\" dominant-baseline=\"middle\"
  x=\"0\" y=\"0\" fill=\"red\"
  style=\"font-size:750px;font-family:opensans;\">A</text>        \r

  \          </symbol>\r

  \          <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"black\"></rect>\r

  \          <use xlink:href=\"#VC2\" height=\"32\" x=\"-114.4\"
  y=\"-156\"></use>\r

  \          <use xlink:href=\"#VC2\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \          <use xlink:href=\"#VC2\" height=\"70\" x=\"-35\"
  y=\"-135.588\"></use>\r

  \          <g transform=\"rotate(180)\">\r

  \            <use xlink:href=\"#VC2\" height=\"32\" x=\"-114.4\"
  y=\"-156\"></use>\r

  \            <use xlink:href=\"#VC2\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \            <use xlink:href=\"#VC2\" height=\"70\" x=\"-35\"
  y=\"-135.588\"></use>\r

  \          </g>\r

  \        </svg>`,\r

  \      card6: `\r

  \        <svg xmlns=\"http://www.w3.org/2000/svg\"
  xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"card\" \r

  \        face=\"2C\" height=\"100%\" preserveAspectRatio=\"none\"
  viewBox=\"-120 -168 240 336\" width=\"100%\">\r

  \          <symbol id=\"VC2\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \            <text text-anchor=\"middle\" dominant-baseline=\"middle\"
  x=\"0\" y=\"0\" fill=\"red\"
  style=\"font-size:750px;font-family:opensans;\">A</text>        \r

  \          </symbol>\r

  \          <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"black\"></rect>\r

  \          <use xlink:href=\"#VC2\" height=\"32\" x=\"-114.4\"
  y=\"-156\"></use>\r

  \        </svg>`,\r

  \      card5: `\r

  \        <svg xmlns=\"http://www.w3.org/2000/svg\"
  xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"card\" \r

  \        face=\"2C\" height=\"100%\" preserveAspectRatio=\"none\"
  viewBox=\"-120 -168 240 336\" width=\"100%\">\r

  \          <symbol id=\"SC2\" viewBox=\"-600 -600 1200 1200\"
  preserveAspectRatio=\"xMinYMid\">\r

  \            <path d=\"M30 150C35 385 85 400 130 500L-130 500C-85 400 -35
  385 -30 150A10 10 0 0 0 -50 150A210 210 0 1 1 -124 -51A10 10 0 0 0 -110
  -65A230 230 0 1 1 110 -65A10 10 0 0 0 124 -51A210 210 0 1 1 50 150A10 10 0 0 0
  30 150Z\" \r

  \              fill=\"black\">\r

  \            </path>\r

  \          </symbol>\r

  \          <symbol id=\"VC2\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \            <path d=\"M-225 -225C-245 -265 -200 -460 0 -460C 200 -460 225
  -325 225 -225C225 -25 -225 160 -225 460L225 460L225 300\" \r

  \              stroke=\"black\" stroke-width=\"80\"
  stroke-linecap=\"square\" stroke-miterlimit=\"1.5\" fill=\"none\">\r

  \            </path>\r

  \          </symbol>\r

  \          <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"black\"></rect>\r

  \          <use xlink:href=\"#VC2\" height=\"32\" x=\"-114.4\"
  y=\"-156\"></use>\r

  \          <use xlink:href=\"#SC2\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \          <use xlink:href=\"#SC2\" height=\"70\" x=\"-35\"
  y=\"-135.588\"></use>\r

  \          <g transform=\"rotate(180)\">\r

  \            <use xlink:href=\"#VC2\" height=\"32\" x=\"-114.4\"
  y=\"-156\"></use>\r

  \            <use xlink:href=\"#SC2\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \            <use xlink:href=\"#SC2\" height=\"70\" x=\"-35\"
  y=\"-135.588\"></use>\r

  \          </g>\r

  \          <text text-anchor=\"middle\" dominant-baseline=\"middle\" x=\"0\"
  y=\"0\" fill=\"red\" style=\"font-size:16px;font-family:opensans;\">I love
  SVG!</text>        \r

  \          <text text-anchor=\"middle\" dominant-baseline=\"hanging\"
  x=\"0\" y=\"-156\" fill=\"blue\"
  style=\"font-size:16px;font-family:opensans;\">YES</text>        \r

  \          <text text-anchor=\"middle\" dominant-baseline=\"hanging\"
  x=\"0\" y=\"-156\" fill=\"green\" transform=\"rotate(180)\"
  style=\"font-size:16px;font-family:opensans;\">YES</text>        \r

  \        </svg>`,\r

  \      card4: `\r

  \        <svg xmlns=\"http://www.w3.org/2000/svg\"
  xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"card\" \r

  \        face=\"2C\" height=\"100%\" preserveAspectRatio=\"none\"
  viewBox=\"-120 -168 240 336\" width=\"100%\">\r

  \          <symbol id=\"VC2\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \            <text dominant-baseline=\"hanging\" text-anchor=\"middle\"
  x=\"0\" y=\"0\" fill=\"red\"
  style=\"font-size:600px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \          </symbol>\r

  \          <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"black\"></rect>\r

  \          <use xlink:href=\"#VC2\" height=\"32\" x=\"-114.4\" y=\"-156\"
  dominant-baseline=\"hanging\" text-anchor=\"middle\" ></use>\r

  \          <g transform=\"rotate(180)\">\r

  \            <use xlink:href=\"#VC2\" height=\"32\" x=\"-114.4\" y=\"-156\"
  dominant-baseline=\"hanging\" text-anchor=\"middle\" ></use>\r

  \          </g>\r

  \          <text dominant-baseline=\"hanging\" text-anchor=\"middle\"
  x=\"0\" y=\"0\" fill=\"red\"
  style=\"font-size:600px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \          <text text-anchor=\"middle\" dominant-baseline=\"middle\" x=\"0\"
  y=\"0\" fill=\"red\" style=\"font-size:16px;font-family:opensans;\">I love
  SVG!</text>        \r

  \          <text text-anchor=\"middle\" dominant-baseline=\"hanging\"
  x=\"0\" y=\"-156\" fill=\"blue\"
  style=\"font-size:16px;font-family:opensans;\">YES</text>        \r

  \          <text text-anchor=\"middle\" dominant-baseline=\"hanging\"
  x=\"0\" y=\"-156\" fill=\"green\" transform=\"rotate(180)\"
  style=\"font-size:16px;font-family:opensans;\">YES</text>        \r

  \        </svg>`,\r

  \      card3: `\r

  \        <svg xmlns=\"http://www.w3.org/2000/svg\"
  xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"card\" \r

  \        face=\"2C\" height=\"100%\" preserveAspectRatio=\"none\"
  viewBox=\"-120 -168 240 336\" width=\"100%\">\r

  \          <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"black\"></rect>\r

  \          <text dominant-baseline=\"hanging\" x=\"-114\" y=\"-156\"
  fill=\"red\"
  style=\"font-size:30px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \          <text  text-anchor=\"end\" dominant-baseline=\"hanging\"
  x=\"114\" y=\"-156\" fill=\"red\"
  style=\"font-size:30px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \          <text text-anchor=\"middle\" dominant-baseline=\"hanging\"
  x=\"0\" y=\"-156\" fill=\"blue\"
  style=\"font-size:16px;font-family:opensans;\">YES</text>        \r

  \          <text text-anchor=\"middle\" dominant-baseline=\"middle\" x=\"0\"
  y=\"0\" fill=\"red\" style=\"font-size:16px;font-family:opensans;\">I love
  SVG!</text>        \r

  \          <g transform=\"rotate(180)\">\r

  \            <text dominant-baseline=\"hanging\" x=\"-114\" y=\"-156\"
  fill=\"red\"
  style=\"font-size:30px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \            <text  text-anchor=\"end\" dominant-baseline=\"hanging\"
  x=\"114\" y=\"-156\" fill=\"red\"
  style=\"font-size:30px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \            <text text-anchor=\"middle\" dominant-baseline=\"hanging\"
  x=\"0\" y=\"-156\" fill=\"blue\"
  style=\"font-size:16px;font-family:opensans;\">YES</text>        \r

  \          </g>\r

  \        </svg>`,\r

  \      card2: `\r

  \        <svg xmlns=\"http://www.w3.org/2000/svg\"
  xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"card\" \r

  \        face=\"2C\" height=\"100%\" preserveAspectRatio=\"none\"
  viewBox=\"-120 -168 240 336\" width=\"100%\">\r

  \          <symbol id=\"VC2\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \            <text text-anchor=\"middle\" dominant-baseline=\"middle\"
  x=\"0\" y=\"0\" fill=\"red\"
  style=\"font-size:500px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \          </symbol>\r

  \          <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"black\"></rect>\r

  \          <text dominant-baseline=\"hanging\" x=\"-114\" y=\"-156\"
  fill=\"red\"
  style=\"font-size:30px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \          <text  text-anchor=\"end\" dominant-baseline=\"hanging\"
  x=\"114\" y=\"-156\" fill=\"red\"
  style=\"font-size:30px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \          <text text-anchor=\"middle\" dominant-baseline=\"hanging\"
  x=\"0\" y=\"-156\" fill=\"blue\"
  style=\"font-size:16px;font-family:opensans;\">YES</text>        \r

  \          <text text-anchor=\"middle\" dominant-baseline=\"middle\" x=\"0\"
  y=\"0\" fill=\"red\" style=\"font-size:16px;font-family:opensans;\">I love
  SVG!</text>        \r

  \          <g transform=\"rotate(180)\">\r

  \            <text dominant-baseline=\"hanging\" x=\"-114\" y=\"-156\"
  fill=\"red\"
  style=\"font-size:30px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \            <text  text-anchor=\"end\" dominant-baseline=\"hanging\"
  x=\"114\" y=\"-156\" fill=\"red\"
  style=\"font-size:30px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \            <text text-anchor=\"middle\" dominant-baseline=\"hanging\"
  x=\"0\" y=\"-156\" fill=\"blue\"
  style=\"font-size:16px;font-family:opensans;\">YES</text>        \r

  \          </g>\r

  \        </svg>`,\r

  \      card1: `\r

  \        <svg xmlns=\"http://www.w3.org/2000/svg\"
  xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"card\" \r

  \        face=\"2C\" height=\"100%\" preserveAspectRatio=\"none\"
  viewBox=\"-120 -168 240 336\" width=\"100%\">\r

  \          <symbol id=\"VC2\">\r

  \          </symbol>\r

  \          <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"black\"></rect>\r

  \          <use xlink:href=\"#VC2\" height=\"32\" x=\"-114.4\"
  y=\"-156\"></use>\r

  \          <use xlink:href=\"#VC2\" height=\"32\" x=\"0\" y=\"0\"></use>\r

  \          <text text-anchor=\"middle\" dominant-baseline=\"middle\" x=\"0\"
  y=\"0\" fill=\"red\" style=\"font-size:16px;font-family:opensans;\">I love
  SVG!</text>        \r

  \          <g transform=\"rotate(180)\">\r

  \            <text dominant-baseline=\"hanging\" x=\"-114\" y=\"-156\"
  fill=\"red\"
  style=\"font-size:30px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \            <text text-anchor=\"end\" dominant-baseline=\"hanging\"
  x=\"114\" y=\"-156\" fill=\"red\"
  style=\"font-size:30px;font-family:${info.family};\">${info.text}</text>        \
  \r

  \            <text text-anchor=\"middle\" dominant-baseline=\"hanging\"
  x=\"0\" y=\"-156\" fill=\"blue\"
  style=\"font-size:16px;font-family:opensans;\">YES</text>        \r

  \          </g>\r

  \        </svg>`\r

  \    };\r

  \    let svgCode = basic[cardKey];\r

  \    svgCode = '<div>' + svgCode + '</div>';\r

  \    let el = mCreateFrom(svgCode);\r

  \    if (nundef(w)) w = h * .7;\r

  \    if (isdef(h) || isdef(w)) { mSize(el, w, h); }\r

  \    return { key: getUID(), div: el, w: w, h: h, faceUp: true };\r

  \  }\r

  }"
KeySelection: "class KeySelection {\r\n}"
LazyCache: "class LazyCache {\r

  \  constructor(resetStorage = false) {\r

  \    this.caches = {};\r

  \    if (resetStorage) localStorage.clear();\r

  \  }\r

  \  get(key) { return this.caches[key]; }\r

  \  asDict(key) { return this.caches[key].live; }\r

  \  getRandom(key) { let d = this.asDict(key); return
  chooseRandom(Object.values(d)); }\r

  \  getRandomKey(key) { return getRandomKey(this.asDict(key)); }\r

  \  getFirstKey(key, cond) { return firstCondDictKeys(this.asDict(key),
  cond); }\r

  \  invalidate(...keys) { for (const k of keys) if (this.caches[k])
  this.caches[k].invalidate(); }\r

  \  async load(primKey, loaderFunc, reload = false, useLocal = true) {\r

  \    let cd = new CacheDict(primKey, { func: loaderFunc }, useLocal);\r

  \    this.caches[primKey] = cd;\r

  \    if (reload) await cd.reload(); else await cd.load();\r

  \    let handler = {\r

  \      get: function (target, name) { return target.live[name]; },\r

  \      set: function (target, name, val) { target.live[name] = val; return
  true; },\r

  \      has: function (target, name) { return name in target.live; },\r

  \      delete: function (target, name) { return delete target.live[name];
  },\r

  \    };\r

  \    let proxy = new Proxy(cd, handler);\r

  \    return proxy;\r

  \  }\r

  }"
LiveObject: "class LiveObject {\r

  \  static States = { none: 0, gettingReady: 1, ready: 2, running: 3, on: 3,
  off: 4 }\r

  \  constructor(k) {\r

  \    this.key = k;\r

  \    let id = this.id = getUID();\r

  \    Live[id] = this;\r

  \    this.TOList = [];\r

  \    this.UIS = [];\r

  \    this.uiActivated = false;\r

  \    this.uiState = LiveObject.States.none;\r

  \  }\r

  \  //#region hidden API\r

  \  _clearTO() { this.TOList.map(x => clearTimeout(x)); this.TOList = []; }\r

  \  _clearUI() { }\r

  \  //#endregion\r

  \  activate() { this.uiActivated = true; }\r

  \  clear() { this._clearTO(); }\r

  \  deactivate() { this.uiActivated = false; }\r

  \  die() { this._clearTO(); console.assert(isdef(this.div));
  this.div.remove(); Live[this.id] = null; }\r

  \  run() { console.log('object', this.id, 'is running...') }\r

  \  setGettingReady() { this.running = false; this.uiState =
  LiveObject.States.gettingReady; console.log('...getting ready!'); }\r

  \  setRunning() { this.running = true; this.uiState =
  LiveObject.States.running; }\r

  \  setReady() { this.running = false; this.uiState =
  LiveObject.States.ready; console.log('ready!'); }\r

  \  getReady(ms) {\r

  \    if (isdef(ms)) { this.setGettingReady();
  setTimeout(this.setReady.bind(this), ms); }\r

  \    else this.setReady();\r

  \  }\r

  }"
MaxWidthPreserver: "class MaxWidthPreserver {\r

  \  constructor() {\r

  \    this.entries = {};\r

  \    this.resizeObserver = new ResizeObserver(this.handler.bind(this));\r

  \  }\r

  \  handler(entries) {\r

  \    for (let entry of entries) {\r

  \      let domel = entry.target;\r

  \      let cs = window.getComputedStyle(entry.target);\r

  \      let w = firstNumber(cs.width);\r

  \      let id = domel.id;\r

  \      let x = this.entries[id];\r

  \      if (isdef(x)) {\r

  \        if (w < x.minWidth && Math.abs(w - x.minWidth) > 1) {\r

  \          w = x.minWidth;\r

  \          domel.style.minWidth = w + 'px';\r

  \        }\r

  \        x.minWidth = w;\r

  \      }\r

  \    }\r

  \  }\r

  \  add(id) {\r

  \    let entry = this.entries[id] = { elem: mBy(id) };\r

  \    let cs = window.getComputedStyle(entry.elem);\r

  \    this.resizeObserver.observe(mBy(id));\r

  \    entry.minWidth = firstNumber(cs.width);\r

  \  }\r

  \  reset(id) { this.entries[id].elem.styles.minWidth =
  this.entries[id].minWidth = 0; }\r

  }"
MK: class MK { }
MKManager: "class MKManager {\r

  \  clear() { this.clearUIS(); this.clearDONE(); }\r

  \  clearUIS() {\r

  \    UIS = {};\r

  \    IdOwner = {};\r

  \    id2oids = {};\r

  \    oid2ids = {};\r

  \    id2uids = {};\r

  \    UIDCounter = 0;\r

  \  }\r

  \  getDone(oid) { return DONE[oid]; }\r

  \  setDone(oid) { DONE[oid] = true; }\r

  \  clearDONE() { DONE = {}; }\r

  }"
MOBJ: "class MOBJ {\r

  \  constructor() {\r

  \    this.children = [];\r

  \    this.parts = {};\r

  \    this.handlers = { click: {}, mouseenter: {}, mouseleave: {} };\r

  \    this.isAttached = false;\r

  \    this.texts = [];\r

  \    this.refs = {};\r

  \    this.isa = {};\r

  \    this.orig = {};\r

  \    this.bgs = {};\r

  \    this.fgs = {};\r

  \  }\r

  \  //#region picto\r

  \  pictoImage(key, fg, sz) {\r

  \    this._picto(key, 0, 0, sz, sz, fg);\r

  \    this.isPicto = true;\r

  \    this.picto = this.elem.children[1];\r

  \    this.texts = [];\r

  \  }\r

  \  _picto(key, x, y, w, h, fg, bg) {\r

  \    let ch = getTypeOf(iconChars) == 'Object' ? iconChars[key] :
  iconChars.get(key);\r

  \    if (!ch) ch = iconChars.get('crow');\r

  \    return this._pictoFromChar(ch, x, y, w, h, fg, bg);\r

  \  }\r

  \  _pictoFromChar(ch, x, y, w, h, fg, bg) {\r

  \    let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' :
  'pictoGame';\r

  \    let text = String.fromCharCode('0x' + ch);\r

  \    return this._pictoFromHexString(text, family, x, y, w, h, fg, bg);\r

  \  }\r

  \  _pictoFromHexString(text, family, x, y, w, h, fg, bg) {\r

  \    if (this.cat == 'g') {\r

  \      if (isdef(bg)) this.rect({ w: w, h: h, fill: bg, x: x, y: y });\r

  \      this.text({ txt: text, family: family, weight: 900, x: x, y: y, fz:
  h, fill: fg });\r

  \      this.orig.fg = fg;\r

  \      return this;\r

  \    } else {\r

  \    }\r

  \  }\r

  \  //#endregion\r

  \  //#region text\r

  \  computeTextColors(fill, alpha = 1, textBg = null) {\r

  \    fill = fill ? fill : this.fg ? this.fg : textBg ?
  colorIdealText(textBg) : this.bg ? colorIdealText(this.bg) : null;\r

  \    if (!fill) {\r

  \      fill = 'white';\r

  \      textBg = 'gray';\r

  \    }\r

  \    fill = colorFrom(fill, alpha);\r

  \    return { fill: fill, bg: textBg ? textBg : this.bg };\r

  \  }\r

  \  setTextFill(r, fill, alpha = 1, textBg = null) {\r

  \    let textColors = this.computeTextColors(fill, alpha, textBg);\r

  \    r.setAttribute('fill', textColors.fill);\r

  \    r.setAttribute('stroke', 'none');\r

  \    r.setAttribute('stroke-width', 0);\r

  \    return textColors.bg;\r

  \  }\r

  \  setTextBorder(color, thickness = 0) {\r

  \    let c = colorFrom(color);\r

  \    let children = arrChildren(this.elem);\r

  \    unitTestMS('setTextBorder', children);\r

  \    for (const ch of children) {\r

  \      let t = getTypeOf(ch);\r

  \      if (t == 'text' || t == 'line') {\r

  \        ch.setAttribute('stroke-width', thickness);\r

  \        ch.setAttribute('stroke', c);\r

  \      }\r

  \    }\r

  \  }\r

  \  calcTextWidth(txt, fz, family, weight) {\r

  \    let sFont = weight + ' ' + fz + 'px ' + family;\r

  \    sFont = sFont.trim();\r

  \    let wText = getTextWidth(txt, sFont);\r

  \    return wText;\r

  \  }\r

  \  addFrame(color) {\r

  \    if (this.cat == 'd') {\r

  \      this.body.style.boxSizing = 'border-box';\r

  \      this.body.style.border = '5px solid ' + color;\r

  \    }\r

  \  }\r

  \  addFlexTitleBody() {\r

  \    let content = this.elem.innerHTML;\r

  \    clearElement(this.elem);\r

  \    let d = this.elem;\r

  \    d.style.display = 'flex';\r

  \    d.style.flexDirection = 'column';\r

  \    let dTitle = document.createElement('div');\r

  \    this.title = dTitle;\r

  \    this.title.style.padding = '6px';\r

  \    this.title.style.textAlign = 'center';\r

  \    let dBody = document.createElement('div');\r

  \    dBody.style.flexGrow = 1;\r

  \    dBody.style = \"flex-grow:1;overflow:auto;padding:0px 6px\"\r

  \    this.body = dBody;\r

  \    this.body.innerHTML = content;\r

  \    this.elem.appendChild(this.title);\r

  \    this.elem.appendChild(this.body);\r

  \  }\r

  \  setTitle({\r

  \    txt,\r

  \    className = null,\r

  \    isOverlay = false,\r

  \    isMultiText = false,\r

  \    replaceFirst = true,\r

  \    fill = null,\r

  \    textBg = null,\r

  \    alpha = 1,\r

  \    x = 0,\r

  \    y = 0,\r

  \    fz = 20,\r

  \    family = 'Arial, Helvetica, sans-serif',\r

  \    weight = ''\r

  \  } = {}) {\r

  \    if (this.cat == 'd') {\r

  \      if (nundef(this.body) || nundef(this.title)) {\r

  \        this.addFlexTitleBody();\r

  \      }\r

  \      clearElement(this.title);\r

  \      if (isdef(textBg)) this.title.style.backgroundColor = textBg;\r

  \      if (isdef(fill)) this.title.style.color = fill;\r

  \      this.title.innerHTML = txt;\r

  \      return this;\r

  \    }\r

  \    let isFirstChild = this.elem.childNodes.length == 0;\r

  \    let r = document.createElementNS('http://www.w3.org/2000/svg',
  'text');\r

  \    if (isFirstChild) {\r

  \      this.ground = r;\r

  \    }\r

  \    r.setAttribute('font-family', family);\r

  \    r.setAttribute('font-weight', weight);\r

  \    if (isOverlay) {\r

  \      r.classList.add('overlay');\r

  \      this.overlay = r;\r

  \    }\r

  \    r.classList.add('msText');\r

  \    if (className) {\r

  \      r.classList.add(className);\r

  \    }\r

  \    textBg = this.setTextFill(r, fill, alpha, textBg);\r

  \    if (isFirstChild) {\r

  \      this.bgs.ground = textBg;\r

  \      this.fgs.ground = fill;\r

  \    }\r

  \    let wText = this.calcTextWidth(txt, fz, family, weight);\r

  \    if (this.isLine && !isMultiText) {\r

  \      x += this.x;\r

  \      y += this.y;\r

  \      if (this.textBackground) {\r

  \        this.elem.removeChild(this.textBackground);\r

  \      }\r

  \      this.textBackground = this.getRect({ w: wText + 10, h: fz * 1.5,
  fill: textBg });\r

  \      this.textBackground.setAttribute('rx', 6);\r

  \      this.textBackground.setAttribute('ry', 6);\r

  \    }\r

  \    r.setAttribute('font-size', '' + fz + 'px');\r

  \    r.setAttribute('x', x);\r

  \    r.setAttribute('y', y + fz / 2.8);\r

  \    r.setAttribute('text-anchor', 'middle');\r

  \    r.textContent = txt;\r

  \    r.setAttribute('pointer-events', 'none');\r

  \    if (replaceFirst && this.texts.length > 0) {\r

  \      let ch = this.texts[0].el;\r

  \      this.elem.insertBefore(r, ch);\r

  \      if (this.isLine) {\r

  \        this.elem.insertBefore(this.textBackground, r);\r

  \      }\r

  \      this.removeTexts();\r

  \    } else {\r

  \      if (this.isLine && !isMultiText) {\r

  \        this.elem.appendChild(this.textBackground);\r

  \      }\r

  \      this.elem.appendChild(r);\r

  \    }\r

  \    let res = { el: r, w: wText };\r

  \    this.texts.push(res);\r

  \    return res;\r

  \  }\r

  \  text({\r

  \    txt,\r

  \    className = null,\r

  \    isOverlay = false,\r

  \    isMultiText = false,\r

  \    replaceFirst = true,\r

  \    fill = null,\r

  \    textBg = null,\r

  \    alpha = 1,\r

  \    x = 0,\r

  \    y = 0,\r

  \    fz = 20,\r

  \    family = 'Arial, Helvetica, sans-serif',\r

  \    weight = ''\r

  \  } = {}) {\r

  \    if (this.cat == 'd') {\r

  \      if (isEmpty(txt)) {\r

  \        this.elem.innerHTML = ''; return this;\r

  \      }\r

  \      this.elem.style.textAlign = 'center';\r

  \      this.elem.style.color = fill ? fill : this.fg ? this.fg : 'white';\r

  \      let margin = this.h / 2 - fz / 2;\r

  \      this.elem.innerHTML = `<div
  style='margin-top:${margin}px;font-size:${fz}px;'>${txt}</div>`;\r

  \      this.elem.boxSizing = 'border-box';\r

  \      return this;\r

  \    }\r

  \    if (isdef(txt) && !isString(txt)) txt = txt.toString();\r

  \    if (isEmpty(txt)) {\r

  \      this.removeTexts(); return this;\r

  \    }\r

  \    let isFirstChild = this.elem.childNodes.length == 0;\r

  \    let r = document.createElementNS('http://www.w3.org/2000/svg',
  'text');\r

  \    if (isFirstChild) {\r

  \      this.ground = r;\r

  \    }\r

  \    r.setAttribute('font-family', family);\r

  \    r.setAttribute('font-weight', weight);\r

  \    if (isOverlay) {\r

  \      r.classList.add('overlay');\r

  \      this.overlay = r;\r

  \    }\r

  \    r.classList.add('msText');\r

  \    if (className) {\r

  \      r.classList.add(className);\r

  \    }\r

  \    textBg = this.setTextFill(r, fill, alpha, textBg);\r

  \    if (isFirstChild) {\r

  \      this.bgs.ground = textBg;\r

  \      this.fgs.ground = fill;\r

  \    }\r

  \    let wText = this.calcTextWidth(txt, fz, family, weight);\r

  \    if (this.isLine && !isMultiText) {\r

  \      x += this.x;\r

  \      y += this.y;\r

  \      if (this.textBackground) {\r

  \        this.elem.removeChild(this.textBackground);\r

  \      }\r

  \      this.textBackground = this.getRect({ w: wText + 10, h: fz * 1.5,
  fill: textBg });\r

  \      this.textBackground.setAttribute('rx', 6);\r

  \      this.textBackground.setAttribute('ry', 6);\r

  \    }\r

  \    r.setAttribute('font-size', '' + fz + 'px');\r

  \    r.setAttribute('x', x);\r

  \    r.setAttribute('y', y + fz / 2.8);\r

  \    r.setAttribute('text-anchor', 'middle');\r

  \    r.textContent = txt;\r

  \    r.setAttribute('pointer-events', 'none');\r

  \    if (replaceFirst && this.texts.length > 0) {\r

  \      let ch = this.texts[0].el;\r

  \      this.elem.insertBefore(r, ch);\r

  \      if (this.isLine) {\r

  \        this.elem.insertBefore(this.textBackground, r);\r

  \      }\r

  \      this.removeTexts();\r

  \    } else {\r

  \      if (this.isLine && !isMultiText) {\r

  \        this.elem.appendChild(this.textBackground);\r

  \      }\r

  \      this.elem.appendChild(r);\r

  \    }\r

  \    let res = { el: r, w: wText };\r

  \    this.texts.push(res);\r

  \    return res;\r

  \  }\r

  \  reduceFontSize(el, n) {\r

  \    let fz = el.getAttribute('font-size');\r

  \    fz = firstNumber(fz);\r

  \    if (fz > n) fz -= n;\r

  \    el.setAttribute('font-size', '' + fz + 'px');\r

  \  }\r

  \  clearText() { this.removeTexts(); }\r

  \  removeTexts() {\r

  \    for (const t of this.texts) {\r

  \      this.elem.removeChild(t.el);\r

  \    }\r

  \    this.texts = [];\r

  \  }\r

  \  multitext({\r

  \    replacePrevious = true,\r

  \    className = '',\r

  \    maxWidth = 1000,\r

  \    txt = ['one', 'two', 'three'],\r

  \    fz = 20,\r

  \    fill = null,\r

  \    textBg = null,\r

  \    padding = 1,\r

  \    alpha = 1,\r

  \    x = 0,\r

  \    y = 0,\r

  \    family = 'Arial, Helvetica, sans-serif',\r

  \    weight = 'lighter'\r

  \  }) {\r

  \    let nChar = 0;\r

  \    for (const s of txt) { nChar = Math.max(nChar, s.length); }\r

  \    let maxFH = Math.round(this.h / txt.length);\r

  \    let maxFW = Math.round((this.w / nChar) * 2);\r

  \    let fzFit = Math.min(maxFH, maxFW) - 2 * padding;\r

  \    if (fzFit < fz) fz = fzFit;\r

  \    if (fzFit > 5 * fz) fz *= 5;\r

  \    if (replacePrevious) this.removeTexts();\r

  \    let h = txt.length * (fz + padding);\r

  \    let textColors = this.computeTextColors(fill, alpha, textBg);\r

  \    if (this.isLine) {\r

  \      x += this.x;\r

  \      y += this.y;\r

  \      let tbg = this.textBackground ? this.textBackground :
  this.getRect();\r

  \      tbg.setAttribute('height', h);\r

  \      tbg.setAttribute('fill', textColors.bg);\r

  \      if (!this.textBackground) {\r

  \        this.textBackground = tbg;\r

  \        this.elem.appendChild(this.textBackground);\r

  \      }\r

  \      this.textBackground.setAttribute('rx', 6);\r

  \      this.textBackground.setAttribute('ry', 6);\r

  \    }\r

  \    let yStart = y - h / 2 + fz / 2;\r

  \    let maxW = 0;\r

  \    let akku = [];\r

  \    for (const t of txt) {\r

  \      let tel = this.text({\r

  \        isMultiText: true,\r

  \        replaceFirst: false,\r

  \        className: className,\r

  \        maxWidth: maxWidth,\r

  \        txt: t,\r

  \        fz: fz,\r

  \        fill: fill,\r

  \        padding: padding,\r

  \        alpha: alpha,\r

  \        x: x,\r

  \        y: yStart,\r

  \        family: family,\r

  \        weight: weight\r

  \      });\r

  \      maxW = Math.max(maxW, tel.w);\r

  \      akku.push(tel);\r

  \      yStart += fz + padding;\r

  \    }\r

  \    let isFirstChild = this.elem.childNodes.length == 0;\r

  \    if (isFirstChild || this.isLine) {\r

  \      this.ground = this.textBackground;\r

  \      this.w = maxW + 2 * padding;\r

  \      this.h = h;\r

  \    }\r

  \    if (this.isLine) {\r

  \      this.textBackground.setAttribute('width', this.w);\r

  \      this.textBackground.setAttribute('x', x - this.w / 2);\r

  \      this.textBackground.setAttribute('y', y - this.h / 2);\r

  \    }\r

  \    if (isFirstChild) { this.bgs.ground = textColors.bg; this.fg.ground =
  fill; }\r

  \    return this;\r

  \  }\r

  \  //#endregion\r

  \  //#region internal\r

  \  _setFill(el, fill, alpha) {\r

  \    if (fill != null && fill !== undefined) {\r

  \      fill = colorFrom(fill, alpha);\r

  \      el.setAttribute('fill', fill);\r

  \      return fill;\r

  \    }\r

  \    return null;\r

  \  }\r

  \  //#endregion\r

  \  //#region primitive shapes\r

  \  _ellipse() { return
  document.createElementNS('http://www.w3.org/2000/svg', 'ellipse'); }\r

  \  _circle() { return document.createElementNS('http://www.w3.org/2000/svg',
  'ellipse'); }\r

  \  _rect() { return document.createElementNS('http://www.w3.org/2000/svg',
  'rect'); }\r

  \  _square() { return document.createElementNS('http://www.w3.org/2000/svg',
  'rect'); }\r

  \  _quad() { return document.createElementNS('http://www.w3.org/2000/svg',
  'rect'); }\r

  \  _roundedRect() { return
  document.createElementNS('http://www.w3.org/2000/svg', 'rect'); }\r

  \  _hex() { return document.createElementNS('http://www.w3.org/2000/svg',
  'polygon'); }\r

  \  _triangle() { return
  document.createElementNS('http://www.w3.org/2000/svg', 'polygon'); }\r

  \  _triangleDown() { return
  document.createElementNS('http://www.w3.org/2000/svg', 'polygon'); }\r

  \  _star() { return document.createElementNS('http://www.w3.org/2000/svg',
  'polygon'); }\r

  \  _line() { return document.createElementNS('http://www.w3.org/2000/svg',
  'line'); }\r

  \  _image() { return document.createElementNS('http://www.w3.org/2000/svg',
  'image'); }\r

  \  _text() { return document.createElementNS('http://www.w3.org/2000/svg',
  'text'); }\r

  \  //#endregion\r

  \  //#region geo: TODO: update!\r

  \  ellipse({ idx, border, thickness = 0, className = '', w = 50, h = 25,
  fill, alpha = 1, x = 0, y = 0 } = {}) {\r

  \    let r = document.createElementNS('http://www.w3.org/2000/svg',
  'ellipse');\r

  \    if (this.isLine) {\r

  \      x += this.x;\r

  \      y += this.y;\r

  \    }\r

  \    let bg = this._setFill(r, fill, alpha);\r

  \    r.setAttribute('stroke-width', thickness);\r

  \    if (thickness > 0) {\r

  \      border = colorFrom(border, alpha);\r

  \      r.setAttribute('stroke', border);\r

  \    }\r

  \    if (this.elem.childNodes.length == 0 || className.includes('ground'))
  {\r

  \      this.ground = r;\r

  \      this.bgs.ground = bg;\r

  \      this.fgs.ground = r.getAttribute('stroke');\r

  \      this.w = w;\r

  \      this.h = h;\r

  \    }\r

  \    r.setAttribute('rx', w / 2);\r

  \    r.setAttribute('ry', h / 2);\r

  \    r.setAttribute('cx', x);\r

  \    r.setAttribute('cy', y);\r

  \    if (className !== '') {\r

  \      r.setAttribute('class', className);\r

  \      if (className.includes('overlay')) {\r

  \        this.overlay = r;\r

  \      }\r

  \    }\r

  \    if (isdef(idx) && this.elem.childNodes.length > idx) {\r

  \      this.elem.insertBefore(r, this.elem.childNodes[idx]);\r

  \    } else {\r

  \      this.elem.appendChild(r);\r

  \    }\r

  \    return this;\r

  \  }\r

  \  getRect({ border, thickness = 0, className = '', w = 50, h = 25, fill,
  alpha = 1, x = 0, y = 0, rounding } = {}) {\r

  \    let r = document.createElementNS('http://www.w3.org/2000/svg',
  'rect');\r

  \    if (this.isLine) {\r

  \      x += this.x;\r

  \      y += this.y;\r

  \    }\r

  \    r.setAttribute('width', w);\r

  \    r.setAttribute('height', h);\r

  \    r.setAttribute('x', -w / 2 + x);\r

  \    r.setAttribute('y', -h / 2 + y);\r

  \    let bg = this._setFill(r, fill, alpha);\r

  \    if (this.elem.childNodes.length == 0 || className.includes('ground'))
  {\r

  \      this.ground = r;\r

  \      this.bgs.ground = bg; this.fgs.ground = r.getAttribute('stroke');\r

  \      this.w = w;\r

  \      this.h = h;\r

  \    }\r

  \    r.setAttribute('stroke-width', thickness);\r

  \    if (thickness > 0) {\r

  \      border = colorFrom(border, alpha);\r

  \      r.setAttribute('stroke', border);\r

  \    }\r

  \    if (className !== '') {\r

  \      r.setAttribute('class', className);\r

  \      if (className.includes('overlay')) {\r

  \        this.overlay = r;\r

  \      }\r

  \    }\r

  \    return r;\r

  \  }\r

  \  circle({ idx, border, thickness = 0, className = '', sz = 25, fill, alpha
  = 1, x = 0, y = 0 } = {}) {\r

  \    return this.ellipse({\r

  \      idx: idx,\r

  \      className: className,\r

  \      w: sz,\r

  \      h: sz,\r

  \      fill: fill,\r

  \      border: border,\r

  \      thickness: thickness,\r

  \      alpha: alpha,\r

  \      x: x,\r

  \      y: y\r

  \    });\r

  \  }\r

  \  hex({ idx, className = '', x = 0, y = 0, w, h = 0, fill, alpha = 1,
  border = 'white', thickness = 0, flat = false }) {\r

  \    let r = document.createElementNS('http://www.w3.org/2000/svg',
  'polygon');\r

  \    if (h <= 0) { h = (2 * w) / 1.73; }\r

  \    let pts = size2hex(w, h, x, y);\r

  \    r.setAttribute('points', pts);\r

  \    let bg = this._setFill(r, fill, alpha);\r

  \    if (this.elem.childNodes.length == 0 || className.includes('ground'))
  {\r

  \      this.ground = r;\r

  \      this.bgs.ground = bg; this.fgs.ground = r.getAttribute('stroke');\r

  \      this.w = w;\r

  \      this.h = h;\r

  \    }\r

  \    if (thickness > 0) {\r

  \      border = convertToRgba(border, alpha);\r

  \      r.setAttribute('stroke', border);\r

  \      r.setAttribute('stroke-width', thickness);\r

  \    }\r

  \    if (className !== '') {\r

  \      r.setAttribute('class', className);\r

  \      if (className.includes('overlay')) {\r

  \        this.overlay = r;\r

  \      }\r

  \    }\r

  \    this.elem.appendChild(r);\r

  \    if (className.includes('ground')) { this.w = w; this.h = h; this.x = x;
  this.y = y; }\r

  \    return this;\r

  \  }\r

  \  triangle({ idx, className = '', x = 0, y = 0, w, h = 0, fill, alpha = 1,
  border = 'white', thickness = 0 }) {\r

  \    let pts = size2triup(w, h, x, y);\r

  \    if (this.elem.childNodes.length == 0 || className.includes('ground')) {
  this.w = w; this.h = h; this.x = x; this.y = y; }\r

  \    this.poly({ idx: idx, className: className, pts: pts, fill: fill,
  alpha: alpha, border: border, thickness: thickness });\r

  \    return this;\r

  \  }\r

  \  triangleDown({ idx, className = '', x = 0, y = 0, w, h = 0, fill, alpha =
  1, border = 'white', thickness = 0 }) {\r

  \    let pts = size2tridown(w, h, x, y);\r

  \    this.poly({ idx: idx, className: className, pts: pts, fill: fill,
  alpha: alpha, border: border, thickness: thickness });\r

  \    if (this.elem.childNodes.length == 1 || className.includes('ground')) {
  this.w = w; this.h = h; this.x = x; this.y = y; }\r

  \    return this;\r

  \  }\r

  \  star({ idx, className = '', n = 6, w, h = 0, x = 0, y = 0, fill, alpha =
  1, border = 'white', thickness = 0 }) {\r

  \    h = h == 0 ? w : h;\r

  \    let rad = w / 2;\r

  \    let pOuter = getCirclePoints(rad, n);\r

  \    let pInner = getCirclePoints(rad / 2, n, 180 / n);\r

  \    let pts = [];\r

  \    for (let i = 0; i < n; i++) {\r

  \      pts.push(pOuter[i]);\r

  \      pts.push(pInner[i]);\r

  \    }\r

  \    for (let i = 0; i < pts.length; i++) {\r

  \      pts[i].X = (pts[i].X + w / 2) / w;\r

  \      pts[i].Y = (pts[i].Y + h / 2) / h;\r

  \    }\r

  \    let sPoints = polyPointsFrom(w, h, x, y, pts);\r

  \    this.poly({ idx: idx, className: className, pts: sPoints, fill: fill,
  alpha: alpha, border: border, thickness: thickness });\r

  \    if (this.elem.childNodes.length == 1 || className.includes('ground')) {
  this.w = w; this.h = h; this.x = x; this.y = y; }\r

  \    return this;\r

  \  }\r

  \  image({ idx, className = '', path = '', w = 50, h = 50, x = 0, y = 0 } =
  {}) {\r

  \    let r = document.createElementNS('http://www.w3.org/2000/svg',
  'image');\r

  \    r.setAttribute('href', path);\r

  \    r.setAttribute('width', w);\r

  \    r.setAttribute('height', h);\r

  \    r.setAttribute('x', -w / 2 + x);\r

  \    r.setAttribute('y', -h / 2 + y);\r

  \    if (className !== '') {\r

  \      r.setAttribute('class', className);\r

  \      if (className.includes('overlay')) {\r

  \        this.overlay = r;\r

  \      }\r

  \    }\r

  \    if (this.elem.childNodes.length == 0) {\r

  \      this.w = w;\r

  \      this.h = h;\r

  \    }\r

  \    this.elem.appendChild(r);\r

  \    return this;\r

  \  }\r

  \  getEndPointsOfLineSegmentOfLength(d) {\r

  \    if (!this.isLine) return null;\r

  \    let x1 = this.x1;\r

  \    let y1 = this.y1;\r

  \    let x2 = this.x2;\r

  \    let y2 = this.y2;\r

  \    let dx = x2 - x1;\r

  \    let dy = y2 - y1;\r

  \    let mx = dx / 2;\r

  \    let my = dy / 2;\r

  \    let sx = x1;\r

  \    let sy = y1;\r

  \    let factor = d / this.distance;\r

  \    let ex = x1 + factor * dx;\r

  \    let ey = y1 + factor * dy;\r

  \    let addx = (1 - factor) * dx / 2;\r

  \    let addy = (1 - factor) * dy / 2;\r

  \    return [sx + addx, sy + addy, ex + addx, ey + addy];\r

  \  }\r

  \  line({ idx, cap, className = '', x1 = 0, y1 = 0, x2 = 100, y2 = 100,
  fill, alpha = 1, length, thickness = 2 } = {}) {\r

  \    let r = document.createElementNS('http://www.w3.org/2000/svg',
  'line');\r

  \    r.setAttribute('x1', x1);\r

  \    r.setAttribute('y1', y1);\r

  \    r.setAttribute('x2', x2);\r

  \    r.setAttribute('y2', y2);\r

  \    if (isdef(cap)) r.setAttribute('stroke-linecap', cap);\r

  \    let isFirstChild = this.elem.childNodes.length == 0;\r

  \    let stroke = colorFrom(fill, alpha);\r

  \    if (thickness > 0) {\r

  \      r.setAttribute('stroke', stroke);\r

  \      r.setAttribute('stroke-width', thickness);\r

  \    }\r

  \    if (className !== '') {\r

  \      r.setAttribute('class', className);\r

  \    }\r

  \    if (className.includes('overlay')) {\r

  \      r.setAttribute('class', 'overlay_line');\r

  \      this.overlay = r;\r

  \    }\r

  \    if (isFirstChild || className.includes('ground')) {\r

  \      this.ground = r;\r

  \      this.bgs.ground = stroke; this.fgs.ground = stroke;\r

  \      this.isLine = true;\r

  \      this.x = Math.round((x1 + x2) / 2);\r

  \      this.y = Math.round((y1 + y2) / 2);\r

  \      this.x1 = x1;\r

  \      this.y1 = y1;\r

  \      this.x2 = x2;\r

  \      this.y2 = y2;\r

  \      this.center = { x: (x1 + x2) / 2, y: (y1 + y2) / 2 };\r

  \      this.distance = distance(x1, y1, x2, y2);\r

  \      if (length) {\r

  \        this.length = this.h = length;\r

  \      } else {\r

  \        this.length = this.h = this.distance;\r

  \      }\r

  \      this.thickness = thickness;\r

  \      this.w = thickness;\r

  \    }\r

  \    this.elem.appendChild(r);\r

  \    return this;\r

  \  }\r

  \  poly({ idx, className = '', pts = '0,0 100,0 50,80', fill, alpha = 1,
  border = 'white', thickness = 0 }) {\r

  \    let r = document.createElementNS('http://www.w3.org/2000/svg',
  'polygon');\r

  \    r.setAttribute('points', pts);\r

  \    let isFirstChild = this.elem.childNodes.length == 0;\r

  \    let bg = this._setFill(r, fill, alpha);\r

  \    if (isFirstChild || className.includes('ground')) {\r

  \      this.ground = r;\r

  \      this.bgs.ground = bg; this.fgs.ground = r.getAttribute('stroke');\r

  \    }\r

  \    if (thickness > 0) {\r

  \      border = colorFrom(border, alpha);\r

  \      r.setAttribute('stroke', border);\r

  \      r.setAttribute('stroke-width', thickness);\r

  \    }\r

  \    if (className !== '') {\r

  \      r.setAttribute('class', className);\r

  \      if (className.includes('overlay')) {\r

  \        this.overlay = r;\r

  \      }\r

  \    }\r

  \    this.elem.appendChild(r);\r

  \    return this;\r

  \  }\r

  \  rect({ idx, border, thickness = 0, className = '', w = 50, h = 25, fill,
  alpha = 1, x = 0, y = 0, rounding } = {}) {\r

  \    let r = this.getRect({ border: border, thickness: thickness, className:
  className, w: w, h: h, fill: fill, alpha: alpha, x: x, y: y, rounding:
  rounding });\r

  \    if (isdef(idx) && this.elem.childNodes.length > idx) {\r

  \      this.elem.insertBefore(r, this.elem.childNodes[idx]);\r

  \    } else {\r

  \      this.elem.appendChild(r);\r

  \    }\r

  \    return this;\r

  \  }\r

  \  roundedRect({ idx, border, thickness = 0, className = '', w = 150, h =
  125, fill = 'darkviolet', rounding = 10, alpha = 1, x = 0, y = 0 } = {}) {\r

  \    return this.rect({ idx: idx, border: border, thickness: thickness,
  className: className, w: w, h: h, fill: fill, alpha: alpha, x: x, y: y,
  rounding: rounding })\r

  \  }\r

  \  square({ idx, className = '', sz = 50, fill = 'yellow', alpha = 1, x = 0,
  y = 0, border, thickness = 0, rounding } = {}) {\r

  \    return this.rect({\r

  \      idx: idx,\r

  \      className: className,\r

  \      w: sz,\r

  \      h: sz,\r

  \      fill: fill,\r

  \      alpha: alpha,\r

  \      x: x,\r

  \      y: y,\r

  \      border: border,\r

  \      thickness: thickness,\r

  \      rounding: rounding\r

  \    });\r

  \  }\r

  \  //#endregion\r

  \  //#region css classes\r

  \  addClass(el, clName) {\r

  \    if (nundef(el)) el = this.overlay ? this.overlay : this.ground;\r

  \    if (!el) return;\r

  \    el.classList.add(clName);\r

  \  }\r

  \  getClass() {\r

  \    if (this.overlay) {\r

  \      return getClass(this.overlay);\r

  \    } else if (this.ground) {\r

  \      return this.getClass(this.ground);\r

  \    }\r

  \    return null;\r

  \  }\r

  \  removeClass(el, clName) {\r

  \    if (nundef(el)) el = this.overlay ? this.overlay : this.ground;\r

  \    if (!el) return;\r

  \    el.classList.remove(clName);\r

  \  }\r

  \  //#endregion\r

  \  //#region tooltips\r

  \  calcCenterPos(ev) {\r

  \    let x, y;\r

  \    if (isdef(this.w)) {\r

  \      let rect = ev.target.getBoundingClientRect();\r

  \      let dx = ev.clientX - rect.left;\r

  \      let dy = ev.clientY - rect.top;\r

  \      x = ev.clientX - dx + this.w / 2;\r

  \      y = ev.clientY - dy + this.h / 2;\r

  \    } else {\r

  \      x = ev.pageX;\r

  \      y = ev.pageY;\r

  \    }\r

  \    return { x: x, y: y };\r

  \  }\r

  \  showTT(ev) {\r

  \    let d = document.getElementById('tooltip');\r

  \    clearElement(d);\r

  \    let oid = getOidForMainId(this.id);\r

  \    let oUpdated = oid in G.table ? G.table[oid] :
  G.playersAugmented[oid];\r

  \    let titleDomel = document.createElement('div');\r

  \    titleDomel.style.width = '100%';\r

  \    titleDomel.style.textAlign = 'center';\r

  \    titleDomel.innerHTML = ('obj_type' in oUpdated ? oUpdated.obj_type :
  'player') + ('name' in oUpdated ? ':' + oUpdated.name : 'id' in oUpdated ? ':'
  + oUpdated.id : ' ' + oid);\r

  \    d.appendChild(titleDomel);\r

  \    let t = tableElemX(oUpdated);\r

  \    d.appendChild(t.table);\r

  \    let pos = this.calcCenterPos(ev);\r

  \    $('div#tooltip').css({\r

  \      display: 'inline-block',\r

  \      left: pos.x,\r

  \      top: pos.y,\r

  \    });\r

  \  }\r

  \  ttHandling(ev, eventName) {\r

  \    if (!this.o) return;\r

  \    let oid = getOidForMainId(this.id);\r

  \    if (!oid) return;\r

  \    if (eventName == 'mouseenter') {\r

  \      this.TTTT = setTimeout(() => this.showTT(ev), 500);\r

  \    }\r

  \    else if (eventName == 'mouseleave') {\r

  \      clearTimeout(this.TTTT); hideTooltip();\r

  \    }\r

  \  }\r

  \  //#endregion\r

  \  //#region events\r

  \  _handler(ev) {\r

  \    ev.stopPropagation();\r

  \    let eventName = ev.handleObj.origType;\r

  \    if (S.settings.tooltips) this.ttHandling(ev, eventName);\r

  \    if (!this.isEnabled) return;\r

  \    let part = $(ev.currentTarget);\r

  \    let partName;\r

  \    if (this.isa.deck && this.parts.topmost) partName = 'topmost';\r

  \    else if (part.id == this.elem.id) partName = 'elem';\r

  \    else { let props = $(part).attrs(); let name = props.name; if
  (nundef(name)) name = 'elem'; partName = name; }\r

  \    let handler = this.handlers[eventName][partName];\r

  \    if (isdef(handler)) { handler(ev, this, partName); }\r

  \  }\r

  \  addHandler(evName, partName = 'elem', handler = null, autoEnable = true)
  {\r

  \    let part = this._getPart(partName);\r

  \    if (nundef(part) || part == this.elem) { part = this.elem; partName =
  'elem'; }\r

  \    else if (this.isa.deck) partName = 'topmost';\r

  \    if (isdef(handler)) {\r

  \      this.handlers[evName][partName] = handler;\r

  \    }\r

  \    $(part).off(evName).on(evName, this._handler.bind(this));\r

  \    if (autoEnable) this.enable();\r

  \  }\r

  \  addClickHandler(partName = 'elem', handler = null, autoEnable = true) {
  this.addHandler('click', partName, handler, autoEnable); }\r

  \  addMouseEnterHandler(partName = 'elem', handler = null, autoEnable =
  true) { this.addHandler('mouseenter', partName, handler, autoEnable); }\r

  \  addMouseLeaveHandler(partName = 'elem', handler = null, autoEnable =
  true) { this.addHandler('mouseleave', partName, handler, autoEnable); }\r

  \  removeClickHandler() { for (const partName in this.parts) {
  $(this.parts[partName]).off('click'); } this.handlers.click = {} }\r

  \  removeHoverHandlers() { for (const partName in this.parts) {
  $(this.parts[partName]).off('mouseenter mouseleave'); }
  this.handlers.mouseenter = {}; this.handlers.mouseleave = {} }\r

  \  removeHandlers() { this.removeEvents(); }\r

  \  removeEvents() {\r

  \    for (const partName in this.parts) { $(this.parts[partName]).off(); }\r

  \    this.handlers = { click: {}, mouseenter: {}, mouseleave: {} };\r

  \  }\r

  \  enable() { this.isEnabled = true; }\r

  \  disable() { this.isEnabled = false; }\r

  \  //#endregion\r

  \  //#region high\r

  \  getTopCardElemOfDeck() {\r

  \    return this.topmost;\r

  \  }\r

  \  _getPart(partName, elemIfMissing = true) {\r

  \    let part = this.parts[partName];\r

  \    if (this.isa.deck) {\r

  \      let tm = this.getTopCardElemOfDeck();\r

  \      return this.getTopCardElemOfDeck();\r

  \    } else {\r

  \      return isdef(part) ? part : elemIfMissing ? this.elem : null;\r

  \    }\r

  \  }\r

  \  highC(c, pname = 'elem', elIfMiss = true) {\r

  \    let part = this._getPart(pname, elIfMiss);\r

  \    if (!part) return;\r

  \    if (this.cat == 'g') {\r

  \      if (this.isPicto) {\r

  \        this.setTextFill(this.picto, '#ccff00', 1);\r

  \      } else {\r

  \        this.ground.setAttribute('fill', c);\r

  \        this.ground.setAttribute('stroke', c);\r

  \      }\r

  \    } else { part.style.backgroundColor = c; part.style.color =
  colorIdealText(c); }\r

  \  }\r

  \  unhighC(pname = 'elem', elIfMiss = true) {\r

  \    let part = this._getPart(pname, elIfMiss);\r

  \    if (!part) return;\r

  \    if (this.cat == 'g') {\r

  \      if (nundef(this.ground)) return;\r

  \      this.ground.setAttribute('fill', this.bgs.ground);\r

  \      if (this.fgs.ground) this.ground.setAttribute('stroke',
  this.fgs.ground);\r

  \    }\r

  \    else { let bg = part.bg; if (nundef(bg)) bg = null;
  part.style.backgroundColor = bg; if (isdef(bg)) part.style.color =
  colorIdealText(bg); }\r

  \  }\r

  \  high(pname = 'elem', elIfMiss = true) {\r

  \    let part = this._getPart(pname, elIfMiss);\r

  \    if (!part) return;\r

  \    if (this.cat == 'g') {\r

  \      if (this.isPicto) {\r

  \        this.setTextFill(this.picto, '#ccff00', 1);\r

  \      } else addClass(this.overlay, 'high');\r

  \    } else part.style.backgroundColor = '#ccff00';\r

  \  }\r

  \  unhigh(pname = 'elem', elIfMiss = true) {\r

  \    let part = this._getPart(pname, elIfMiss);\r

  \    if (!part) return;\r

  \    if (this.cat == 'g') {\r

  \      if (this.isPicto) {\r

  \        this.setTextFill(this.picto, this.orig.fg, 1);\r

  \      } else {\r

  \        removeClass(this.overlay, 'high');\r

  \      }\r

  \    } else { let bg = part.bg; if (nundef(bg)) bg = null;
  part.style.backgroundColor = bg; }\r

  \  }\r

  \  highFrame(pname = 'elem', elIfMiss = true) {\r

  \    let part = this._getPart(pname, elIfMiss);\r

  \    if (!part) return;\r

  \    if (this.isLine) this.addClass(this.overlay, 'lineHighFrame');\r

  \    else if (this.isPicto) {\r

  \      this.addClass(this.ground, 'high');\r

  \    } else if (this.isa.field) {\r

  \      this.addClass(this.overlay, 'fieldHighFrame');\r

  \    }\r

  \    else addClass(this.cat == 'g' ? this.overlay : this.parts['title'],
  'highFrame')\r

  \  }\r

  \  unhighFrame(pname = 'elem', elIfMiss = true) {\r

  \    let part = this._getPart(pname, elIfMiss);\r

  \    if (!part) return;\r

  \    if (this.isLine) this.removeClass(this.overlay, 'lineHighFrame');\r

  \    else if (this.isPicto) {\r

  \      this.removeClass(this.ground, 'high');\r

  \    } else if (this.isa.field) {\r

  \      this.removeClass(this.overlay, 'fieldHighFrame');\r

  \    } else removeClass(this.cat == 'g' ? this.overlay :
  this.parts['title'], 'highFrame')\r

  \  }\r

  \  unhighAll() { for (const k in this.parts) { this.unhigh(k);
  this.unhighFrame(k); this.unhighC(k); } }\r

  \  sel() { }\r

  \  unsel() { }\r

  \  frame() { }\r

  \  unframe() { }\r

  \  hide(pname = 'elem', elIfMiss = false) { let part = this._getPart(pname,
  elIfMiss); if (part) hide(part); }\r

  \  show(pname = 'elem', elIfMiss = false) { let part = this._getPart(pname,
  elIfMiss); if (part) show(part); }\r

  \  minimize() {\r

  \    if ('title' in this.parts) {\r

  \      for (const k in this.parts) {\r

  \        if (k == 'elem' || k == 'title') continue;\r

  \        this.hide(k)\r

  \      }\r

  \      this.isMinimized = true;\r

  \    }\r

  \  }\r

  \  maximize() {\r

  \    if (this.isMinimized) {\r

  \      for (const k in this.parts) {\r

  \        if (k == 'elem' || k == 'title') continue;\r

  \        this.show(k)\r

  \      }\r

  \    }\r

  \  }\r

  \  //#endregion\r

  \  //#region basic properties x,y,w,h,bg,fg\r

  \  resetBg() {\r

  \    if (this.orig.bg) {\r

  \      this.setBg(this.orig.bg);\r

  \    }\r

  \  }\r

  \  resetShape() {\r

  \    this.setShape(this.orig.shape);\r

  \  }\r

  \  resetSize() {\r

  \    this.setSize(this.originalSize.w, this.originalSize.h);\r

  \  }\r

  \  setBg(c, { updateFg = false, partName = 'elem' } = {}) {\r

  \    if (this.isLine) {\r

  \      this.bg = c;\r

  \      let el = this.elem;\r

  \      el.setAttribute('fill', c)\r

  \      el.setAttribute('stroke', c)\r

  \      el.style.stroke = c;\r

  \      for (const e of el.children) {\r

  \        e.setAttribute('stroke', c)\r

  \        e.setAttribute('fill', c);\r

  \        e.style.stroke = c;\r

  \        return this;\r

  \      }\r

  \    }\r

  \    let part = this.parts[partName];\r

  \    if (partName == 'elem') { this.bg = c; }\r

  \    part.bg = c;\r

  \    if (this.cat == 'g') {\r

  \      if (this.type == 'text') {\r

  \        if (!this.textBackground) {\r

  \        }\r

  \      } else {\r

  \        this.elem.setAttribute('fill', c);\r

  \      }\r

  \    } else {\r

  \      part.style.backgroundColor = c;\r

  \    }\r

  \    if (updateFg) {\r

  \      this.setFg(colorIdealText(c), { partName: partName });\r

  \    }\r

  \    return this;\r

  \  }\r

  \  setFg(c, { updateBg = false, partName = 'elem' } = {}) {\r

  \    let part = this.parts[partName];\r

  \    if (partName == 'elem') { this.fg = c; }\r

  \    part.fg = c;\r

  \    if (this.cat == 'g') {\r

  \      if (this.type == 'text') {\r

  \        this.elem.setAttribute('fill', c);\r

  \      } else {\r

  \        this.elem.setAttribute('stroke', c);\r

  \      }\r

  \    } else {\r

  \      part.style.color = c;\r

  \    }\r

  \    return this;\r

  \  }\r

  \  setFullSize() {\r

  \    let parent = UIS[this.idParent]; if (nundef(parent)) return;\r

  \    this.setSize(parent.w, parent.h);\r

  \    this.setPos(0, 0);\r

  \  }\r

  \  setBounds(x, y, w, h, unit = '%') {\r

  \    let el = this.elem;\r

  \    this.setSize(w, h);\r

  \    this.setPos(x, y);\r

  \  }\r

  \  setColor(c) {\r

  \    this.setBg(c);\r

  \  }\r

  \  setHeight(h) {\r

  \    this.elem.style.height = h + 'px'; this.h = h;\r

  \  }\r

  \  setSize(w, h) {\r

  \    this.w = w; this.h = h;\r

  \    if (this.cat == 'g') {\r

  \      if (this.ground) {\r

  \        this.ground.setAttribute('width', w);\r

  \        this.ground.setAttribute('height', h);\r

  \      } else {\r

  \        this.elem.setAttribute('width', w);\r

  \        this.elem.setAttribute('height', h);\r

  \      }\r

  \      if (this.overlay) {\r

  \        this.overlay.setAttribute('width', w);\r

  \        this.overlay.setAttribute('height', h);\r

  \      }\r

  \    } else {\r

  \      this.elem.style.width = w + 'px';\r

  \      this.elem.style.height = h + 'px';\r

  \    }\r

  \    return this;\r

  \  }\r

  \  centerInDiv() {\r

  \    this.parent = UIS[this.idParent];\r

  \    if (isdef(this.parent)) {\r

  \      let d = this.elem;\r

  \      let divParent = this.parent.elem;\r

  \      let wParent = divParent.offsetWidth;\r

  \      let cards = this.deck.cards;\r

  \      let wElem = cards.length > 0 ? cards[0].elem.offsetWidth : 78;\r

  \      let hParent = divParent.offsetHeight;\r

  \      let hElem = cards.length > 0 ? cards[0].elem.offsetHeight : 110;\r

  \      d.style.position = 'relative';\r

  \      this.centerX = (wParent - wElem) / 2;\r

  \      this.centerY = (hParent - hElem) / 2;\r

  \      this.w = wElem;\r

  \      this.h = hElem;\r

  \      d.style.left = '' + this.centerX + 'px';\r

  \      d.style.top = '' + this.centerY + 'px';\r

  \    }\r

  \  }\r

  \  setPos(x, y) {\r

  \    this.x = x;\r

  \    this.y = y;\r

  \    if (this.cat == 'g') {\r

  \      this.elem.setAttribute('transform', `translate(${x},${y})`);\r

  \    } else {\r

  \      if (isdef(this.centerX)) {\r

  \        this.elem.style.left = '' + (this.centerX + x) + 'px';\r

  \        this.elem.style.top = '' + (this.centerY + y) + 'px';\r

  \      } else {\r

  \        this.elem.style.position = 'absolute';\r

  \        this.elem.style.left = x + 'px';\r

  \        this.elem.style.top = y + 'px';\r

  \      }\r

  \    }\r

  \    return this;\r

  \  }\r

  \  _modTransformBy(el, { x, y, scaleX, scaleY, rotDeg } = {}) {\r

  \    let info = getTransformInfo(el);\r

  \    console.log(info)\r

  \    let xNew, yNew, scaleXNew, scaleYNew, rotNew;\r

  \    if (isdef(x)) xNew = info.translateX + x; else xNew =
  info.translateX;\r

  \    if (isdef(y)) yNew = info.translateY + y; else yNew =
  info.translateY;\r

  \    if (isdef(scaleX)) scaleXNew = info.scaleX + scaleX; else scaleXNew =
  info.scaleX;\r

  \    if (isdef(scaleY)) scaleYNew = info.scaleY + scaleY; else scaleYNew =
  info.scaleY;\r

  \    if (isdef(rotDeg)) rotNew = info.rotation + rotDeg; else rotNew =
  info.rotation;\r

  \    let sTrans = ''; let sScale = ''; let sRot = '';\r

  \    if (xNew != 0 || yNew != 0) sTrans = `translate(${xNew},${yNew})`;\r

  \    if (scaleXNew != 1 || scaleYNew != 1) sScale =
  `scale(${scaleXNew},${scaleYNew})`;\r

  \    if (rotNew != 0) sRot = `rotation(${rotNew}deg)`;\r

  \    let s = (sTrans + ' ' + sScale + ' ' + sRot).trim();\r

  \    el.setAttribute(\"transform\", s);\r

  \  }\r

  \  _setTransform(el, { x, y, scaleX, scaleY, rotDeg } = {}) {\r

  \    let info = getTransformInfo(el);\r

  \    let xNew, yNew, scaleXNew, scaleYNew, rotNew;\r

  \    if (isdef(x)) xNew = x; else xNew = info.translateX;\r

  \    if (isdef(y)) yNew = y; else yNew = info.translateY;\r

  \    if (isdef(scaleX)) scaleXNew = scaleX; else scaleXNew = info.scaleX;\r

  \    if (isdef(scaleY)) scaleYNew = scaleY; else scaleYNew = info.scaleY;\r

  \    if (isdef(rotDeg)) rotNew = rotDeg; else rotNew = info.rotation;\r

  \    let sTrans = ''; let sScale = ''; let sRot = '';\r

  \    if (xNew != 0 || yNew != 0) sTrans = `translate(${xNew} ${yNew})`;\r

  \    if (scaleXNew != 1 || scaleYNew != 1) sScale = `scale(${scaleXNew}
  ${scaleYNew})`;\r

  \    if (rotNew != 0) sRot = `rotate(${rotNew})`;\r

  \    let s = (sTrans + ' ' + sScale + ' ' + sRot).trim();\r

  \    el.setAttribute(\"transform\", s);\r

  \  }\r

  \  setScale(scale, partName = 'elem') {\r

  \    let el = this.parts[partName];\r

  \    if (!el) return;\r

  \    if (this.cat == 'd') el.style.transform = `scale(${scale})`;\r

  \    else this._setTransform(el, { x: this.x, y: this.y, scaleX: scale,
  scaleY: scale });\r

  \  }\r

  \  setShape(shape) {\r

  \    if (nundef(this.ground)) {\r

  \      console.log('cannot replace shape because no this.ground');\r

  \      return;\r

  \    }\r

  \    let curShape = getTypeOf(this.ground);\r

  \    if (shape == 'circle') shape = 'ellipse';\r

  \    if (shape == 'square') shape = 'rect';\r

  \    if (curShape != shape) {\r

  \      let childNodes = [...this.elem.children];\r

  \      let iGround = childNodes.indexOf(this.ground);\r

  \      let iOverlay = childNodes.indexOf(this.overlay);\r

  \      let fill = this.ground.getAttribute('fill');\r

  \      this.overlay = null;\r

  \      this.ground = null;\r

  \      this[shape]({ className: 'ground', w: this.w, h: this.h, fill: fill
  });\r

  \      let newGround = this.elem.children[this.len() - 1];\r

  \      this[shape]({ className: 'overlay', w: this.w, h: this.h });\r

  \      let newOverlay = this.elem.children[this.len() - 1];\r

  \      this.replaceChild(this.elem.childNodes[iGround], newGround);\r

  \      this.ground = newGround;\r

  \      this.replaceChild(this.elem.childNodes[iOverlay], newOverlay);\r

  \    }\r

  \  }\r

  \  //#endregion\r

  \  //#region parts\r

  \  body(key = 'body', color) {\r

  \    if (this.parts[key]) return;\r

  \    let t = document.createElement('div');\r

  \    t.style.padding = '4px 8px';\r

  \    let bg = color;\r

  \    this.elem.appendChild(t);\r

  \    this.parts[key] = t;\r

  \    $(t).attrs({ name: key });\r

  \    if (isdef(bg)) this.setBg(bg, { updateFg: (color != 'dimgray'),
  partName: key });\r

  \    return this;\r

  \  }\r

  \  title(s, key = 'title', color = 'dimgray') {\r

  \    if (this.parts[key]) {\r

  \      this.parts[key].style.backgroundColor = randomColor();\r

  \      return;\r

  \    }\r

  \    let t = document.createElement('div');\r

  \    t.style.borderRadius = '6px';\r

  \    t.style.padding = '4px 8px';\r

  \    let bg = color;\r

  \    t.classList.add('tttitle');\r

  \    t.innerHTML = s;\r

  \    this.elem.appendChild(t);\r

  \    this.parts[key] = t;\r

  \    $(t).attrs({ name: key });\r

  \    this.setBg(bg, { updateFg: (color != 'dimgray'), partName: key });\r

  \    return this;\r

  \  }\r

  \  table(o, keys, key = 'table') {\r

  \    if (this.parts[key]) {\r

  \      let oldTable = this.parts[key];\r

  \      let t = tableElem(o, keys);\r

  \      let t2 = t.innerHTML;\r

  \      oldTable.innerHTML = t2;\r

  \    } else {\r

  \      let t = tableElem(o, keys);\r

  \      this.elem.appendChild(t);\r

  \      this.attach();\r

  \      this.parts[key] = t;\r

  \      t.name = key;\r

  \    }\r

  \    return this;\r

  \  }\r

  \  tableX(o, keys, key = 'table') {\r

  \    let replace = isdef(this.parts[key]);\r

  \    let res = tableElemX(o, keys);\r

  \    let tNew = res.table;\r

  \    let rNew = res.refs.map(x => x.id);\r

  \    tNew.name = key;\r

  \    if (replace) {\r

  \      let oldTable = this.parts[key];\r

  \      let oldRefs = this.refs[key];\r

  \      if (isdef(oldRefs)) {\r

  \        oldRefs.map(x => {\r

  \          deleteRSG(x);\r

  \        });\r

  \        delete this.refs[key];\r

  \      }\r

  \      oldTable.innerHTML = tNew.innerHTML;\r

  \    } else {\r

  \      this.elem.appendChild(tNew);\r

  \      this.attach();\r

  \      this.parts[key] = tNew;\r

  \    }\r

  \    if (!isEmpty(res)) {\r

  \      makeRefs(this.id, res.refs);\r

  \      this.refs[key] = rNew;\r

  \    }\r

  \    return this;\r

  \  }\r

  \  tableY(o, keys, key = 'table') {\r

  \    let replace = isdef(this.parts[key]);\r

  \    let res = tableElemY(o, keys);\r

  \    let tNew = res.table;\r

  \    let rNew = res.refs.map(x => x.id);\r

  \    tNew.name = key;\r

  \    if (replace) {\r

  \      let oldTable = this.parts[key];\r

  \      let oldRefs = this.refs[key];\r

  \      if (isdef(oldRefs)) { oldRefs.map(x => deleteRSG(x)); delete
  this.refs[key]; }\r

  \      oldTable.innerHTML = tNew.innerHTML;\r

  \    } else {\r

  \      this.elem.appendChild(tNew);\r

  \      this.attach();\r

  \      this.parts[key] = tNew;\r

  \    }\r

  \    if (!isEmpty(res)) {\r

  \      makeRefs(this.id, res.refs);\r

  \      this.refs[key] = rNew;\r

  \    }\r

  \    return this;\r

  \  }\r

  \  //#endregion\r

  \  //#region admin/general\r

  \  attach(partName) {\r

  \    if (!this.isAttached) {\r

  \      this.isAttached = true;\r

  \      let parentMS = UIS[this.idParent];\r

  \      let parentElem = isdef(partName) && isdef(parentMS.parts[partName]) ?
  parentMS.parts[partName] : parentMS.elem;\r

  \      parentElem.appendChild(this.elem);\r

  \    }\r

  \    return this;\r

  \  }\r

  \  detach(partName) {\r

  \    if (this.isAttached) {\r

  \      this.isAttached = false;\r

  \      let parentMS = UIS[this.idParent];\r

  \      let parentElem = isdef(partName) && isdef(parentMS.parts[partName]) ?
  parentMS.parts[partName] : parentMS.elem;\r

  \      parentElem.removeChild(this.elem);\r

  \    }\r

  \    return this;\r

  \  }\r

  \  clear(startProps = {}) {\r

  \    let ids = this.children.map(x => x);\r

  \    for (const id of ids) {\r

  \      deleteRSG(id);\r

  \    }\r

  \    clearElement(this.elem);\r

  \    for (const k in startProps) {\r

  \      this.elem[k] = startProps[k];\r

  \    }\r

  \    this.children = [];\r

  \  }\r

  \  destroy() {\r

  \    this.clear();\r

  \    $(this.elem).remove();\r

  \    this.elem = null;\r

  \    this.isAttached = false;\r

  \    let parent = UIS[this.idParent];\r

  \    removeInPlace(parent.children, this.id);\r

  \  }\r

  \  len() { return this.elem.children.length; }\r

  \  replaceChild(oldChild, newChild) {\r

  \    this.elem.insertBefore(newChild, oldChild);\r

  \    this.elem.removeChild(oldChild);\r

  \  }\r

  \  toString() { return 'id: ' + this.id + ', ' + this.domType + ', ' +
  this.x + ', ' + this.y + ', ' + this.w + ', ' + this.h + ', ' + this.bg + ', '
  + this.fg + ', ' + this.children; }\r

  \  //#endregion\r

  }"
MS: "class MS {\r

  \  constructor({ parent, id, type = 'g', domel = null, isa = {} } = {}) {\r

  \    if (domel) {\r

  \      if (domel.id == 'R_d_root') {\r

  \        this.handlers = { click: {}, mouseenter: {}, mouseleave: {} };
  this.parent = null; this.id = 'R_d_root'; this.type = 'div'; this.cat = 'd';
  this.elem = domel; this.parts = { _: this.elem }; this.children = [];
  return;\r

  \      }\r

  \      this.id = domel.id;\r

  \      this.type = getTypeOf(domel);\r

  \      this.parent = UIS[domel.parentNode.id];\r

  \    } else {\r

  \      this.id = nundef(id) ? getUID() : id;\r

  \      this.type = type;\r

  \      this.parent = parent;\r

  \    }\r

  \    UIS[this.id] = this;\r

  \    this.cat = MSCATS[this.type]; //'d' for dom els and 'g' for svg els\r

  \    this.elem = domel ? domel\r

  \      : this.cat == 'g' || this.type == 'svg' ?
  document.createElementNS('http://www.w3.org/2000/svg', this.type)\r

  \        : document.createElement(this.type);\r

  \    this.elem.ms = this;\r

  \    this.elem.id = this.id;\r

  \    if (nundef(this.parent)) this.parent = ROOT;\r

  \    this.children = [];\r

  \    this.posRef = this.parent;\r

  \    if (this.cat == 'd' && this.parent.cat == 'g') {\r

  \      let ancestor = closestParent(parent.elem, 'div');\r

  \      console.log('FOUND domParent:', ancestor);\r

  \      this.posRef = this.parent;\r

  \      this.parent = ancestor.ms;\r

  \    } else if (this.parent.cat == 'd' && this.parent.type != 'svg' &&
  this.cat == 'g') {\r

  \      let msSvg = new MMS({ parent: this.parent, type: 'svg'
  }).setDefaults().attach();\r

  \      this.parent = msSvg;\r

  \      this.posRef = msSvg;\r

  \    }\r

  \    if (domel) { addIf(this.parent.children, this); }\r

  \    this.x = 0; this.y = 0; this.w = 0; this.h = 0;\r

  \    for (const d in isa) {\r

  \      if (d == 'id') { continue; }\r

  \      this[d] = isa[d];\r

  \    }\r

  \    this.isa = Object.keys(isa);\r

  \    this.parts = { _: this.elem };\r

  \    this.uis = [];\r

  \    this.handlers = { click: {}, mouseenter: {}, mouseleave: {} };\r

  \  }\r

  \  //#region events\r

  \  _handler(ev) {\r

  \    ev.stopPropagation();\r

  \    if (!this.isEnabled) return;\r

  \    let part = ev.currentTarget;\r

  \    let partName = isdef(part.name) ? part.name : '_';\r

  \    let eventName = ev.handleObj.origType;\r

  \    let handler = this.handlers[eventName][partName];\r

  \    if (isdef(handler)) { counters[eventName] += 1; counters.events += 1;
  handler(this, part); }\r

  \  }\r

  \  addHandler(evName, partName = '_', handler = null, autoEnable = true) {\r

  \    let part = this.parts[partName];\r

  \    if (nundef(part)) { part = this.elem; partName = '_'; }\r

  \    if (isdef(handler)) { this.handlers[evName][partName] = handler; }\r

  \    $(part).off(evName).on(evName, this._handler.bind(this));\r

  \    if (autoEnable) this.enable();\r

  \  }\r

  \  addClickHandler(partName = '_', handler = null, autoEnable = true) {
  this.addHandler('click', partName, handler, autoEnable); }\r

  \  addMouseEnterHandler(partName = '_', handler = null, autoEnable = true) {
  this.addHandler('mouseenter', partName, handler, autoEnable); }\r

  \  addMouseLeaveHandler(partName = '_', handler = null, autoEnable = true) {
  this.addHandler('mouseleave', partName, handler, autoEnable); }\r

  \  removeEvents() {\r

  \    $(this.elem).off();\r

  \    if (S_showEvents) this.showEvents(this.elem);\r

  \    for (const partName in this.parts) {\r

  \      $(this.parts[partName]).off();\r

  \      if (S_showEvents) this.showEvents(this.parts[partName]);\r

  \    }\r

  \  }\r

  \  //#endregion\r

  \  //#region done\r

  \  clear(startProps = {}) {\r

  \    let ids = this.children.map(x => x.id);\r

  \    for (const id of ids) UIS[id].destroy();\r

  \    for (const k in startProps) {\r

  \      this.elem[k] = startProps[k];\r

  \    }\r

  \    console.log('children after clear', this.children);\r

  \  }\r

  \  destroy() {\r

  \    $(this.elem).remove();\r

  \    this.elem = null;\r

  \    removeInPlace(this.parent.children, this);\r

  \    delete UIS[this.id];\r

  \  }\r

  \  //#endregion\r

  \  //#region work\r

  \  title(s, key = 'title') {\r

  \    if (this.parts[key]) {\r

  \      this.parts[key].style.backgroundColor = randomColor();\r

  \      return;\r

  \    }\r

  \    let t = document.createElement('div');\r

  \    t.style.backgroundColor = 'dimgray';\r

  \    this.titleColor = t.style.backgroundColor;\r

  \    t.classList.add('tttitle');\r

  \    t.innerHTML = s;\r

  \    this.elem.appendChild(t);\r

  \    this.parts[key] = t;\r

  \    t.name = key;\r

  \    this.attach();\r

  \    return this;\r

  \  }\r

  \  table(o, keys, key = 'table') {\r

  \    if (this.parts[key]) {\r

  \      let oldTable = this.parts[key];\r

  \      let t = tableElem(o, keys);\r

  \      let t2 = t.innerHTML;\r

  \      oldTable.innerHTML = t2;\r

  \    } else {\r

  \      let t = tableElem(o, keys);\r

  \      this.elem.appendChild(t);\r

  \      this.attach();\r

  \      this.parts[key] = t;\r

  \      t.name = key;\r

  \    }\r

  \    return this;\r

  \  }\r

  \  //#endregion\r

  \  //#region TODO\r

  \  attach() { if (!this.isAttached) { addIf(this.parent.children, this);
  this.parent.elem.appendChild(this.elem); } return this; }\r

  \  detach() { if (this.isAttached) { removeIf(this.parent.children, this);
  this.parent.elem.removeChild(this.elem); } return this; }\r

  \  _onMouseEnter(ev) {\r

  \    if (!this.isEnabled) return;\r

  \    let partName = evToId(ev);\r

  \    if (S_showEvents) {\r

  \      counters.events += 1;\r

  \    }\r

  \    if (typeof this.mouseEnterHandler == 'function') {\r

  \      if (S_showEvents)\r

  \        this.mouseEnterHandler(ev);\r

  \    }\r

  \  }\r

  \  _onMouseLeave(ev) {\r

  \    if (!this.isEnabled) return;\r

  \    let partName = evToId(ev);\r

  \    if (S_showEvents) {\r

  \      counters.events += 1;\r

  \    }\r

  \    if (typeof this.mouseLeaveHandler == 'function') {\r

  \      if (S_showEvents)\r

  \        this.mouseLeaveHandler(ev);\r

  \    }\r

  \  }\r

  \  _getRect(x = 0, y = 0, w = 50, h = 25, bg, fg) {\r

  \    let r = document.createElementNS('http://www.w3.org/2000/svg',
  'rect');\r

  \    r.setAttribute('width', w);\r

  \    r.setAttribute('height', h);\r

  \    r.setAttribute('x', x);\r

  \    r.setAttribute('y', y);\r

  \    if (isdef(bg)) r.setAttribute('fill', bg);\r

  \    if (isdef(fg)) r.setAttribute('stroke', bg);\r

  \    return r;\r

  \  }\r

  \  _getDiv(x, y, w, h, bg, fg) {\r

  \    let r = document.createElement('div');\r

  \    if (this.w < w || this.h < h) { this.setSize(w, h); }\r

  \    if (isdef(x)) {\r

  \      r.style.position = 'absolute';\r

  \      r.style.left = x + 'px';\r

  \      r.style.top = y + 'px';\r

  \    }\r

  \    if (isdef(w)) {\r

  \      r.style.width = w + 'px';\r

  \      r.style.height = h + 'px';\r

  \    }\r

  \    if (isdef(bg)) r.style.backgroundColor = bg;\r

  \    if (isdef(fg)) r.style.color = fg;\r

  \    return r;\r

  \  }\r

  \  addInteractivity(partName, hover = true, click = true) {\r

  \    let part = this.parts[partName];\r

  \    if (nundef(part)) { part = this.elem; }\r

  \    if (this.part.isInteractive) return;\r

  \    this.part.isInteractive = true;\r

  \    if (click) this.part.clickHandler = null;\r

  \    if (hover) { this.part.mouseEnterHandler = null;
  this.part.mouseLeaveHandler = null; }\r

  \    this.isEnabled = false;\r

  \    this.enable = () => this.isEnabled = true;\r

  \    this.disable = () => this.isEnabled = false;\r

  \    this.elem.addEventListener('click', this._onClick.bind(this));\r

  \    this.elem.addEventListener('mouseenter',
  this._onMouseEnter.bind(this));\r

  \    this.elem.addEventListener('mouseleave',
  this._onMouseLeave.bind(this));\r

  \    return this;\r

  \  }\r

  \  enable() {\r

  \    this.isEnabled = true;\r

  \  }\r

  \  disable() {\r

  \    this.isEnabled = false;\r

  \  }\r

  \  high() {\r

  \    if (isdef(this.parts) && isdef(this.parts.title))
  this.parts['title'].style.backgroundColor = '#ccff00';\r

  \    else {\r

  \      this.elem.classList.add('selected');\r

  \      this.elem.backgroundColor = '#ccff00';\r

  \    }\r

  \  }\r

  \  unhigh() {\r

  \    if (isdef(this.parts) && isdef(this.parts.title))
  this.parts['title'].style.backgroundColor = this.titleColor;\r

  \    else {\r

  \      this.elem.classList.remove('selected');\r

  \      this.elem.backgroundColor = this.titleColor;\r

  \    }\r

  \  }\r

  \  sel() { }\r

  \  unsel() { }\r

  \  frame() { }\r

  \  unframe() { }\r

  \  setDefaults({ x, y, w, h, bg, fg } = {}) {\r

  \    if (this.parent.type == 'svg' && isdef(bg) && nundef(w) && nundef(h) &&
  this.domType == 'g') {\r

  \      this.parent.setBg(bg);\r

  \    } else {\r

  \      if (isdef(bg) || this.cat == 'd') {\r

  \        bg = nundef(bg) ? 'transparent' : bg;\r

  \        this.setBg(bg);\r

  \        fg = nundef(fg) ? bg == 'transparent' ? this.parent.fg :
  colorIdealText(bg) : fg;\r

  \        this.setFg(fg);\r

  \      }\r

  \    }\r

  \    if (this.cat == 'd' && (nundef(this.x) || nundef(this.w))) return
  this;\r

  \    w = nundef(w) ? this.posRef.w : w;\r

  \    h = nundef(h) ? this.posRef.h : h;\r

  \    this.setSize(w, h);\r

  \    x = nundef(x) ? 0 : this.posRef.x + x;\r

  \    y = nundef(y) ? 0 : this.posRef.y + y;\r

  \    if (this.parent.cat == 'd') { this.parent.elem.style.position =
  'absolute'; }\r

  \    this.setPos(x, y);\r

  \    return this;\r

  \  }\r

  \  setBg(c, updateFg = false) {\r

  \    this.bg = c;\r

  \    if (this.cat == 'g') {\r

  \      if (this.domType == 'text') {\r

  \        if (!this.textBackground) {\r

  \        }\r

  \      } else {\r

  \        this.elem.setAttribute('fill', c);\r

  \      }\r

  \    } else {\r

  \      this.elem.style.backgroundColor = c;\r

  \    }\r

  \    if (updateFg) {\r

  \      this.setFg(colorIdealText(c), true);\r

  \    }\r

  \    return this;\r

  \  }\r

  \  setFg(c) {\r

  \    this.fg = c;\r

  \    if (this.cat == 'g') {\r

  \      if (this.domType == 'text') {\r

  \        this.elem.setAttribute('fill', c);\r

  \      } else {\r

  \        this.elem.setAttribute('stroke', c);\r

  \      }\r

  \    } else {\r

  \      this.elem.style.color = c;\r

  \    }\r

  \    return this;\r

  \  }\r

  \  setFullSize() {\r

  \    this.setSize(this.posRef.w, this.posRef.h);\r

  \    this.setPos(0, 0);\r

  \  }\r

  \  setSize(w, h) {\r

  \    this.w = w; this.h = h;\r

  \    if (this.cat == 'g') {\r

  \      if (this.ground) {\r

  \        this.ground.setAttribute('width', w);\r

  \        this.ground.setAttribute('height', h);\r

  \      } else {\r

  \        this.elem.setAttribute('width', w);\r

  \        this.elem.setAttribute('height', h);\r

  \      }\r

  \      if (this.overlay) {\r

  \        this.overlay.setAttribute('width', w);\r

  \        this.overlay.setAttribute('height', h);\r

  \      }\r

  \    } else {\r

  \      this.elem.style.position = 'absolute';\r

  \      this.elem.style.width = w + 'px';\r

  \      this.elem.style.height = h + 'px';\r

  \    }\r

  \    return this;\r

  \  }\r

  \  setPos(x, y) {\r

  \    this.x = x;\r

  \    this.y = y;\r

  \    if (this.cat == 'g') {\r

  \      this.elem.setAttribute('transform', `translate(${x},${y})`);\r

  \    } else {\r

  \      this.elem.style.position = 'absolute'\r

  \      this.elem.style.left = x + 'px';\r

  \      this.elem.style.top = y + 'px';\r

  \    }\r

  \    return this;\r

  \  }\r

  \  center() {\r

  \    this.setPos(-this.w / 2, -this.h / 2)\r

  \  }\r

  \  centerOrigin() {\r

  \    this.setPos(this.w / 2, this.h / 2);\r

  \  }\r

  \  rect({ x = 0, y = 0, w = 50, h = 25, bg, fg } = {}) {\r

  \    let pa = this.domType == 'g' ? this._getRect(x, y, w, h, bg, fg) :
  this._getDiv(x, y, w, h, bg, fg);\r

  \    this.elem.appendChild(pa);\r

  \    this.attach();\r

  \    return this;\r

  \  }\r

  \  addBorder(c) {\r

  \    if (this.cat == 'd') {\r

  \      this.elem.style.border = '1px solid ' + c;\r

  \    }\r

  \  }\r

  \  removeBorder() {\r

  \    if (this.cat == 'd') {\r

  \      this.elem.style.border = null;\r

  \    }\r

  \  }\r

  \  selBlack() {\r

  \    if (this.isSelBlack) return;\r

  \    this.elem.classList.add('selBlack');\r

  \    this.isSelBlack = true;\r

  \  }\r

  \  unselBlack() {\r

  \    if (!this.isSelBlack) return;\r

  \    this.elem.classList.remove('selBlack');\r

  \    this.isSelBlack = false;\r

  \  }\r

  \  selRed() { }\r

  \  unselAll() { this.removeBorder(); }\r

  \  //#endregion\r

  }"
MS_dep: "class MS_dep {\r

  \  constructor({ rsgType, parent, id, oid, o, domType = 'g', domel = null }
  = {}) {\r

  \    this.rsgType = rsgType;\r

  \    if (rsgType == 'b') {\r

  \      this.oid = oid;\r

  \      _setIsa(this, o);\r

  \      this.id = 'b@' + o.iTuple;\r

  \      if (isdef(domel)) { this.parent = UIS[domel.id]; this.domType =
  getTypeOf(domel); this.cat = MSCAT(this.domType); this.elem = domel;
  this.elem.id = this.id; }\r

  \      else { this.parent = parent; this.domType = domType; this.cat =
  MSCAT(this.domType); this.elem = _createDom(this.cat, domType); this.elem.id =
  this.id; }\r

  \    }\r

  \    if (domel) {\r

  \      if (domel.id == 'R_d_root') {\r

  \        this.handlers = { click: {}, mouseenter: {}, mouseleave: {} };
  this.parent = null; this.id = 'R_d_root'; this.domType = 'div'; this.cat =
  'd'; this.elem = domel; this.parts = { _: this.elem }; this.children = [];
  return;\r

  \      }\r

  \      this.id = domel.id;\r

  \      this.domType = getTypeOf(domel);\r

  \      this.parent = UIS[domel.parentNode.id];\r

  \    } else {\r

  \      this.id = nundef(id) ? getUID() : id;\r

  \      this.domType = domType;\r

  \      this.parent = parent;\r

  \    }\r

  \    UIS[this.id] = this;\r

  \    this.cat = MSCATS[this.domType]; //'d' for dom els and 'g' for svg
  els\r

  \    this.elem = domel ? domel\r

  \      : this.cat == 'g' || this.domType == 'svg' ?
  document.createElementNS('http://www.w3.org/2000/svg', this.domType)\r

  \        : document.createElement(this.domType);\r

  \    this.elem.ms = this;\r

  \    this.elem.id = this.id;\r

  \    if (nundef(this.parent)) this.parent = ROOT;\r

  \    this.children = [];\r

  \    this.posRef = this.parent;\r

  \    if (this.cat == 'd' && this.parent.cat == 'g') {\r

  \      let ancestor = closestParent(parent.elem, 'div');\r

  \      this.posRef = this.parent;\r

  \      this.parent = ancestor.ms;\r

  \    } else if (this.parent.cat == 'd' && this.parent.type != 'svg' &&
  this.cat == 'g') {\r

  \      let msSvg = new MMS({ parent: this.parent, type: 'svg'
  }).setDefaults().attach();\r

  \      this.parent = msSvg;\r

  \      this.posRef = msSvg;\r

  \    }\r

  \    if (domel) { addIf(this.parent.children, this); this.isAttached = true;
  }\r

  \    this.x = 0; this.y = 0; this.w = 0; this.h = 0;\r

  \    this.parts = { _: this.elem };\r

  \    this.uis = [];\r

  \    this.handlers = { click: {}, mouseenter: {}, mouseleave: {} };\r

  \  }\r

  \  //#region events\r

  \  _handler(ev) {\r

  \    ev.stopPropagation();\r

  \    if (!this.isEnabled) return;\r

  \    let part = ev.currentTarget;\r

  \    let partName = isdef(part.name) ? part.name : '_';\r

  \    let eventName = ev.handleObj.origType;\r

  \    let handler = this.handlers[eventName][partName];\r

  \    if (isdef(handler)) { counters[eventName] += 1; counters.events += 1;
  handler(this, part); }\r

  \  }\r

  \  addHandler(evName, partName = '_', handler = null, autoEnable = true) {\r

  \    let part = this.parts[partName];\r

  \    if (nundef(part)) { part = this.elem; partName = '_'; }\r

  \    if (isdef(handler)) { this.handlers[evName][partName] = handler; }\r

  \    $(part).off(evName).on(evName, this._handler.bind(this));\r

  \    if (autoEnable) this.enable();\r

  \  }\r

  \  addClickHandler(partName = '_', handler = null, autoEnable = true) {
  this.addHandler('click', partName, handler, autoEnable); }\r

  \  addMouseEnterHandler(partName = '_', handler = null, autoEnable = true) {
  this.addHandler('mouseenter', partName, handler, autoEnable); }\r

  \  addMouseLeaveHandler(partName = '_', handler = null, autoEnable = true) {
  this.addHandler('mouseleave', partName, handler, autoEnable); }\r

  \  removeEvents() {\r

  \    $(this.elem).off();\r

  \    if (S_showEvents) this.showEvents(this.elem);\r

  \    for (const partName in this.parts) {\r

  \      $(this.parts[partName]).off();\r

  \      if (S_showEvents) this.showEvents(this.parts[partName]);\r

  \    }\r

  \  }\r

  \  //#endregion\r

  \  //#region done\r

  \  clear(startProps = {}) {\r

  \    let ids = this.children.map(x => x.id);\r

  \    for (const id of ids) UIS[id].destroy();\r

  \    for (const k in startProps) {\r

  \      this.elem[k] = startProps[k];\r

  \    }\r

  \    console.log('children after clear', this.children);\r

  \  }\r

  \  destroy() {\r

  \    $(this.elem).remove();\r

  \    this.elem = null;\r

  \    removeInPlace(this.parent.children, this);\r

  \    delete UIS[this.id];\r

  \  }\r

  \  //#endregion\r

  \  //#region work\r

  \  title(s, key = 'title') {\r

  \    if (this.parts[key]) {\r

  \      this.parts[key].style.backgroundColor = randomColor();\r

  \      return;\r

  \    }\r

  \    let t = document.createElement('div');\r

  \    t.style.backgroundColor = 'dimgray';\r

  \    this.titleColor = t.style.backgroundColor;\r

  \    t.classList.add('tttitle');\r

  \    t.innerHTML = s;\r

  \    this.elem.appendChild(t);\r

  \    this.parts[key] = t;\r

  \    t.name = key;\r

  \    this.attach();\r

  \    return this;\r

  \  }\r

  \  table(o, keys, key = 'table') {\r

  \    if (this.parts[key]) {\r

  \      let oldTable = this.parts[key];\r

  \      let t = tableElem(o, keys);\r

  \      let t2 = t.innerHTML;\r

  \      oldTable.innerHTML = t2;\r

  \    } else {\r

  \      let t = tableElem(o, keys);\r

  \      this.elem.appendChild(t);\r

  \      this.attach();\r

  \      this.parts[key] = t;\r

  \      t.name = key;\r

  \    }\r

  \    return this;\r

  \  }\r

  \  //#endregion\r

  \  //#region TODO\r

  \  attach() { if (!this.isAttached) { addIf(this.parent.children, this);
  this.parent.elem.appendChild(this.elem); } return this; }\r

  \  detach() { if (this.isAttached) { removeIf(this.parent.children, this);
  this.parent.elem.removeChild(this.elem); } return this; }\r

  \  _onMouseEnter(ev) {\r

  \    if (!this.isEnabled) return;\r

  \    let partName = evToId(ev);\r

  \    if (S_showEvents) {\r

  \      counters.events += 1;\r

  \    }\r

  \    if (typeof this.mouseEnterHandler == 'function') {\r

  \      if (S_showEvents)\r

  \        this.mouseEnterHandler(ev);\r

  \    }\r

  \  }\r

  \  _onMouseLeave(ev) {\r

  \    if (!this.isEnabled) return;\r

  \    let partName = evToId(ev);\r

  \    if (S_showEvents) {\r

  \      counters.events += 1;\r

  \    }\r

  \    if (typeof this.mouseLeaveHandler == 'function') {\r

  \      if (S_showEvents)\r

  \        this.mouseLeaveHandler(ev);\r

  \    }\r

  \  }\r

  \  _getRect(x = 0, y = 0, w = 50, h = 25, bg, fg) {\r

  \    let r = document.createElementNS('http://www.w3.org/2000/svg',
  'rect');\r

  \    r.setAttribute('width', w);\r

  \    r.setAttribute('height', h);\r

  \    r.setAttribute('x', x);\r

  \    r.setAttribute('y', y);\r

  \    if (isdef(bg)) r.setAttribute('fill', bg);\r

  \    if (isdef(fg)) r.setAttribute('stroke', bg);\r

  \    return r;\r

  \  }\r

  \  _getDiv(x, y, w, h, bg, fg) {\r

  \    let r = document.createElement('div');\r

  \    if (this.w < w || this.h < h) { this.setSize(w, h); }\r

  \    if (isdef(x)) {\r

  \      r.style.position = 'absolute';\r

  \      r.style.left = x + 'px';\r

  \      r.style.top = y + 'px';\r

  \    }\r

  \    if (isdef(w)) {\r

  \      r.style.width = w + 'px';\r

  \      r.style.height = h + 'px';\r

  \    }\r

  \    if (isdef(bg)) r.style.backgroundColor = bg;\r

  \    if (isdef(fg)) r.style.color = fg;\r

  \    return r;\r

  \  }\r

  \  addInteractivity(partName, hover = true, click = true) {\r

  \    let part = this.parts[partName];\r

  \    if (nundef(part)) { part = this.elem; }\r

  \    if (this.part.isInteractive) return;\r

  \    this.part.isInteractive = true;\r

  \    if (click) this.part.clickHandler = null;\r

  \    if (hover) { this.part.mouseEnterHandler = null;
  this.part.mouseLeaveHandler = null; }\r

  \    this.isEnabled = false;\r

  \    this.enable = () => this.isEnabled = true;\r

  \    this.disable = () => this.isEnabled = false;\r

  \    this.elem.addEventListener('click', this._onClick.bind(this));\r

  \    this.elem.addEventListener('mouseenter',
  this._onMouseEnter.bind(this));\r

  \    this.elem.addEventListener('mouseleave',
  this._onMouseLeave.bind(this));\r

  \    return this;\r

  \  }\r

  \  enable() {\r

  \    this.isEnabled = true;\r

  \  }\r

  \  disable() {\r

  \    this.isEnabled = false;\r

  \  }\r

  \  high() {\r

  \    if (isdef(this.parts) && isdef(this.parts.title))
  this.parts['title'].style.backgroundColor = '#ccff00';\r

  \    else {\r

  \      this.elem.classList.add('selected');\r

  \      this.elem.backgroundColor = '#ccff00';\r

  \    }\r

  \  }\r

  \  unhigh() {\r

  \    if (isdef(this.parts) && isdef(this.parts.title))
  this.parts['title'].style.backgroundColor = this.titleColor;\r

  \    else {\r

  \      this.elem.classList.remove('selected');\r

  \      this.elem.backgroundColor = this.titleColor;\r

  \    }\r

  \  }\r

  \  sel() { }\r

  \  unsel() { }\r

  \  frame() { }\r

  \  unframe() { }\r

  \  setDefaults({ x, y, w, h, bg, fg } = {}) {\r

  \    if (this.parent.type == 'svg' && isdef(bg) && nundef(w) && nundef(h) &&
  this.domType == 'g') {\r

  \      this.parent.setBg(bg);\r

  \    } else {\r

  \      if (isdef(bg) || this.cat == 'd') {\r

  \        bg = nundef(bg) ? 'transparent' : bg;\r

  \        this.setBg(bg);\r

  \        fg = nundef(fg) ? bg == 'transparent' ? this.parent.fg :
  colorIdealText(bg) : fg;\r

  \        this.setFg(fg);\r

  \      }\r

  \    }\r

  \    if (this.cat == 'd' && (nundef(this.x) || nundef(this.w))) return
  this;\r

  \    w = nundef(w) ? this.posRef.w : w;\r

  \    h = nundef(h) ? this.posRef.h : h;\r

  \    this.setSize(w, h);\r

  \    x = nundef(x) ? 0 : this.posRef.x + x;\r

  \    y = nundef(y) ? 0 : this.posRef.y + y;\r

  \    if (this.parent.cat == 'd') { this.parent.elem.style.position =
  'absolute'; }\r

  \    this.setPos(x, y);\r

  \    return this;\r

  \  }\r

  \  setBg(c, updateFg = false) {\r

  \    this.bg = c;\r

  \    if (this.cat == 'g') {\r

  \      if (this.domType == 'text') {\r

  \        if (!this.textBackground) {\r

  \        }\r

  \      } else {\r

  \        this.elem.setAttribute('fill', c);\r

  \      }\r

  \    } else {\r

  \      this.elem.style.backgroundColor = c;\r

  \    }\r

  \    if (updateFg) {\r

  \      this.setFg(colorIdealText(c), true);\r

  \    }\r

  \    return this;\r

  \  }\r

  \  setFg(c) {\r

  \    this.fg = c;\r

  \    if (this.cat == 'g') {\r

  \      if (this.domType == 'text') {\r

  \        this.elem.setAttribute('fill', c);\r

  \      } else {\r

  \        this.elem.setAttribute('stroke', c);\r

  \      }\r

  \    } else {\r

  \      this.elem.style.color = c;\r

  \    }\r

  \    return this;\r

  \  }\r

  \  setFullSize() {\r

  \    this.setSize(this.posRef.w, this.posRef.h);\r

  \    this.setPos(0, 0);\r

  \  }\r

  \  setSize(w, h) {\r

  \    this.w = w; this.h = h;\r

  \    if (this.cat == 'g') {\r

  \      if (this.ground) {\r

  \        this.ground.setAttribute('width', w);\r

  \        this.ground.setAttribute('height', h);\r

  \      } else {\r

  \        this.elem.setAttribute('width', w);\r

  \        this.elem.setAttribute('height', h);\r

  \      }\r

  \      if (this.overlay) {\r

  \        this.overlay.setAttribute('width', w);\r

  \        this.overlay.setAttribute('height', h);\r

  \      }\r

  \    } else {\r

  \      this.elem.style.position = 'absolute';\r

  \      this.elem.style.width = w + 'px';\r

  \      this.elem.style.height = h + 'px';\r

  \    }\r

  \    return this;\r

  \  }\r

  \  setPos(x, y) {\r

  \    this.x = x;\r

  \    this.y = y;\r

  \    if (this.cat == 'g') {\r

  \      this.elem.setAttribute('transform', `translate(${x},${y})`);\r

  \    } else {\r

  \      this.elem.style.position = 'absolute'\r

  \      this.elem.style.left = x + 'px';\r

  \      this.elem.style.top = y + 'px';\r

  \    }\r

  \    return this;\r

  \  }\r

  \  center() {\r

  \    this.setPos(-this.w / 2, -this.h / 2)\r

  \  }\r

  \  centerOrigin() {\r

  \    this.setPos(this.w / 2, this.h / 2);\r

  \  }\r

  \  rect({ x = 0, y = 0, w = 50, h = 25, bg, fg } = {}) {\r

  \    let pa = this.domType == 'g' ? this._getRect(x, y, w, h, bg, fg) :
  this._getDiv(x, y, w, h, bg, fg);\r

  \    this.elem.appendChild(pa);\r

  \    this.attach();\r

  \    return this;\r

  \  }\r

  \  addBorder(c) {\r

  \    if (this.cat == 'd') {\r

  \      this.elem.style.border = '1px solid ' + c;\r

  \    }\r

  \  }\r

  \  removeBorder() {\r

  \    if (this.cat == 'd') {\r

  \      this.elem.style.border = null;\r

  \    }\r

  \  }\r

  \  selBlack() {\r

  \    if (this.isSelBlack) return;\r

  \    this.elem.classList.add('selBlack');\r

  \    this.isSelBlack = true;\r

  \  }\r

  \  unselBlack() {\r

  \    if (!this.isSelBlack) return;\r

  \    this.elem.classList.remove('selBlack');\r

  \    this.isSelBlack = false;\r

  \  }\r

  \  selRed() { }\r

  \  unselAll() { this.removeBorder(); }\r

  \  //#endregion\r

  }"
NAssets: "class NAssets {\r

  \  constructor() {\r

  \    this.tilePositions = {};\r

  \    this.tileNames;\r

  \    this.trackPositions = {};\r

  \    this.nationPositions = {};\r

  \    this.nationNames;\r

  \    this.unitCountInfo;\r

  \    this.nationalityNames;\r

  \    this.unitTypeNames;\r

  \    this.factionSetup;\r

  \    this.factionNames;\r

  \    this.uniqueIdCounter = 0;\r

  \    let neutralColor = [230, 230, 120];\r

  \    this.troopColors = {\r

  \      Germany: [174, 174, 176],\r

  \      Britain: [86, 182, 222],\r

  \      France: [121, 200, 205],\r

  \      USSR: [233, 138, 134],\r

  \      USA: [145, 186, 130],\r

  \      Italy: [174, 172, 131],\r

  \      Neutral: neutralColor,\r

  \      Minor: neutralColor,\r

  \      Major: neutralColor,\r

  \      Axis: [174, 174, 176],\r

  \      West: [86, 182, 222]\r

  \    };\r

  \    this.SZ = {\r

  \      tile: 180,\r

  \      pAxis: { x: 0, y: 50 },\r

  \      pWest: { x: -50, y: -30 },\r

  \      pUSSR: { x: +50, y: -30 },\r

  \      cadrePrototype: 60,\r

  \      sumCadre: 60,\r

  \      cadreDetail: 44,\r

  \      cardWidth: 100,\r

  \      cardHeight: 150,\r

  \      gap: 10,\r

  \      chip: 40,\r

  \      nation: 130,\r

  \      influence: 40\r

  \    };\r

  \    this.uid2id = {};\r

  \    this.id2uid = {};\r

  \    this.phaseNames = [\r

  \      \"Setup\",\r

  \      \"New_Year\",\r

  \      \"Production\",\r

  \      \"Government\",\r

  \      \"Spring\",\r

  \      \"Summer\",\r

  \      \"Blockade\",\r

  \      \"Fall\",\r

  \      \"Winter\",\r

  \      \"Satellite\",\r

  \      \"Movement\",\r

  \      \"Combat\",\r

  \      \"Supply\",\r

  \      \"Retreat\",\r

  \      \"Land_Battle\",\r

  \      \"Sea_Battle\",\r

  \      \"Scoring\"\r

  \    ];\r

  \  }\r

  \  distanceBetweenTiles(tilename1, tilename2) {\r

  \    let pos1 = this.tilePositions[tilename1];\r

  \    let pos2 = this.tilePositions[tilename2];\r

  \    return dSquare(pos1, pos2);\r

  \  }\r

  \  initAssets(map, callback) {\r

  \    this.calculateTrackPositions();\r

  \    loadYML(\"/a/assets/config/map_pos.yml\", data => {\r

  \      this.tilePositions = {};\r

  \      for (const idTile in data) {\r

  \        let id = replaceAll(idTile, \" \", \"_\");\r

  \        this.tilePositions[id] = data[idTile];\r

  \      }\r

  \      this.tileNames = Object.keys(this.tilePositions);\r

  \      loadYML(\"/a/assets/config/nations.yml\", data => {\r

  \        this.nationPositions = {};\r

  \        for (const idNation in data) {\r

  \          let id = replaceAll(idNation, \" \", \"_\");\r

  \          this.nationPositions[id] = data[idNation];\r

  \        }\r

  \        this.nationNames = Object.keys(this.nationPositions);\r

  \        loadYML(\"/a/assets/config/unit_count.yml\", data => {\r

  \          this.unitCountInfo = data;\r

  \          this.nationalityNames = Object.keys(data);\r

  \          this.unitTypeNames = Object.keys(data[\"Germany\"]);\r

  \          loadYML(\"/a/assets/config/faction_setup.yml\", data => {\r

  \            this.factionSetup = data;\r

  \            this.factionNames = Object.keys(data);\r

  \            callback();\r

  \          });\r

  \        });\r

  \      });\r

  \    });\r

  \  }\r

  \  calculateTrackPositions() {\r

  \    let arr = [];\r

  \    let x = 580;\r

  \    let y = 2120;\r

  \    for (let i = 0; i < 25; i++) {\r

  \      arr.push({ x: x, y: y });\r

  \      x += 66;\r

  \    }\r

  \    this.trackPositions.Axis = arr;\r

  \    arr = [];\r

  \    x = 1310;\r

  \    y = 76;\r

  \    for (let i = 0; i < 20; i++) {\r

  \      arr.push({ x: x, y: y });\r

  \      x -= 66;\r

  \    }\r

  \    for (let i = 20; i < 25; i++) {\r

  \      arr.push({ x: x, y: y });\r

  \      y += 66;\r

  \    }\r

  \    this.trackPositions.West = arr;\r

  \    arr = [];\r

  \    x = 2210;\r

  \    y = 76;\r

  \    for (let i = 0; i < 18; i++) {\r

  \      arr.push({ x: x, y: y });\r

  \      x += 66;\r

  \    }\r

  \    for (let i = 18; i < 25; i++) {\r

  \      arr.push({ x: x, y: y });\r

  \      y += 66;\r

  \    }\r

  \    this.trackPositions.USSR = arr;\r

  \  }\r

  \  clear() {\r

  \    this.uid2id = {};\r

  \    this.id2uid = {};\r

  \    this.uniqueIdCounter = 0;\r

  \  }\r

  \  drawNationPositions() {\r

  \    unitTestFilterNation('drawNationPositions starting');\r

  \    let nationDict = {};\r

  \    for (const id in this.nationPositions) {\r

  \      let pos = this.nationPositions[id];\r

  \      let sz = this.SZ.nation;\r

  \      let ms = new MS(id, \"mapG\", this.getUniqueId(id))\r

  \        .circle({ className: \"overlay nation\", sz: sz })\r

  \        .setPos(pos.x, pos.y)\r

  \        .draw();\r

  \      nationDict[id] = ms;\r

  \    }\r

  \    unitTestFilterNation(nationDict);\r

  \    return nationDict;\r

  \  }\r

  \  getUniqueId(id) {\r

  \    let uid = this.uniqueIdCounter + \"_\" + id;\r

  \    this.uniqueIdCounter += 1;\r

  \    this.uid2id[uid] = id;\r

  \    this.id2uid[id] = uid;\r

  \    return uid;\r

  \  }\r

  }"
NDataProcessor: "class NDataProcessor {\r

  \  constructor(backendUrl) {\r

  \    this.callback = null;\r

  \    this.serverData = null;\r

  \    this.player = \"\";\r

  \    this.tuplesInAction = [];\r

  \    this.gameObjects = {};\r

  \    this.backendUrl = backendUrl;\r

  \    this.msgCounter = 0;\r

  \    this.sender = new NBackendCommunicator(\"http://localhost:5000/\");\r

  \  }\r

  \  action(player, tuple, callback) {\r

  \    this.player = player;\r

  \    this.callback = callback;\r

  \    this.sender.send(\"action/\" + this.player + \"/\" + tuple.join(\"+\"),
  this.actionStep1.bind(this));\r

  \  }\r

  \  actionStep1(data) {\r

  \    this.serverData = data;\r

  \    this.sender.send(\"info/\" + this.player,
  this.actionStep2.bind(this));\r

  \  }\r

  \  actionStep2(data) {\r

  \    this.augmentServerData(data, 2);\r

  \    if (\"waiting_for\" in this.serverData) {\r

  \      let plNext = this.serverData.waiting_for.set[0];\r

  \      this.serverData.game.playerChangedTo = plNext;\r

  \      this.sender.send(\"status/\" + plNext,
  this.actionStep3.bind(this));\r

  \    } else {\r

  \      this.processServerData();\r

  \    }\r

  \  }\r

  \  actionStep3(data) {\r

  \    this.augmentServerData(data, 3);\r

  \    this.processServerData();\r

  \  }\r

  \  augmentServerData(data, step) {\r

  \    jQuery.extend(true, this.serverData, data);\r

  \  }\r

  \  initGame(player, callback) {\r

  \    this.callback = callback;\r

  \    this.player = player;\r

  \    this.sender.send(\"init/hotseat/\" + player,
  this.actionStep1.bind(this));\r

  \  }\r

  \  loadGame(player, filename, callback) {\r

  \    this.callback = callback;\r

  \    this.filename = filename;\r

  \    this.player = player;\r

  \    this.sender.send(\"myload/\" + this.filename + '.json',
  this.loadStep3.bind(this), this.player);\r

  \  }\r

  \  loadStep1(data) {\r

  \    this.serverData = data;\r

  \    this.sender.send(\"myload/\" + this.filename + '.json',
  this.loadStep2.bind(this), this.player);\r

  \  }\r

  \  loadStep2(data) {\r

  \    if (!this.serverData) this.serverData = {}\r

  \    this.serverData.created = data;\r

  \    this.sender.send(\"info/\" + this.player,
  this.actionStep2.bind(this));\r

  \  }\r

  \  loadStep3(data) {\r

  \    if (!this.serverData) this.serverData = {}\r

  \    this.serverData.created = data;\r

  \    this.sender.send(\"info/\" + this.player, this.loadStep4.bind(this));\r

  \  }\r

  \  loadStep4(data) {\r

  \    this.augmentServerData(data, 3);\r

  \    this.sender.send(\"status/\" + this.player,
  this.loadStep5.bind(this));\r

  \  }\r

  \  loadStep5(data) {\r

  \    this.augmentServerData(data, 3);\r

  \  }\r

  \  processActions() {\r

  \    let data = this.serverData;\r

  \    if (!\"actions\" in data) {\r

  \      this.tuplesInAction = [];\r

  \    } else {\r

  \      let tuples = expand(data.actions);\r

  \      if (!empty(tuples) && tuples.length == 1 &&
  !Array.isArray(tuples[0])) {\r

  \        tuples = [tuples];\r

  \      }\r

  \      this.tuplesInAction = tuples;\r

  \    }\r

  \  }\r

  \  processLog() {\r

  \    if (\"log\" in this.serverData) {\r

  \      this.serverData.log = toHTMLString(this.serverData.log);\r

  \    }\r

  \  }\r

  \  processGameObjects() {\r

  \    let data = this.serverData;\r

  \    let g = {};\r

  \    if (\"created\" in data) {\r

  \      for (const id in data.created) {\r

  \        let sid = id.toString();\r

  \        g[sid] = data.created[id];\r

  \      }\r

  \    }\r

  \    if (\"updated\" in data) {\r

  \      for (const id in data.updated) {\r

  \        let sid = id.toString();\r

  \        g[sid] = data.updated[id];\r

  \      }\r

  \    }\r

  \    this.gameObjects = g;\r

  \    return;\r

  \  }\r

  \  processMessage(jsonData, callback = null) {\r

  \    this.serverData = jsonData;\r

  \    processLog();\r

  \    if (callback) callback(this.serverData);\r

  \  }\r

  \  processServerData() {\r

  \    this.processLog();\r

  \    this.processGameObjects();\r

  \    this.serverData.game.player = this.player;\r

  \    this.processActions();\r

  \    this.callback(this.tuplesInAction, this.gameObjects,
  this.serverData.game, this.serverData);\r

  \  }\r

  }"
nn1: "class nn1 {\r

  \  constructor() {\r

  \    this.l1Size = 2;\r

  \    this.l2Size = 3;\r

  \    this.l3Size = 1;\r

  \  }\r

  }"
NPage: "class NPage {\r

  \  constructor() {\r

  \    this.view = null;\r

  \  }\r

  \  clearAllObjects() {\r

  \    clearElementFromChildIndex(document.getElementById(\"mapG\"), 1);\r

  \    clearElementFromChildIndex(document.getElementById(\"handG_West\"),
  1);\r

  \    clearElementFromChildIndex(document.getElementById(\"handG_Axis\"),
  1);\r

  \    clearElementFromChildIndex(document.getElementById(\"handG_USSR\"),
  1);\r

  \    clearElementFromChildIndex(document.getElementById(\"openCardG\"),
  1);\r

  \    clearElement(document.getElementById(\"divSelect\"));\r

  \    clearElement(this.battle_area);\r

  \  }\r

  \  selectView() {\r

  \    if (this.view == 'select') return;\r

  \    this.view = 'select';\r

  \    hide(this.battle_area);\r

  \    show(this.status_area);\r

  \    show(this.edit_area);\r

  \    show(this.command_area);\r

  \    show(this.command2_area);\r

  \    show(this.map_area);\r

  \    show(this.log_area);\r

  \    show(this.hand_area);\r

  \    show(this.cards2_area);\r

  \    hideSvg(this.actionDeckG);\r

  \    showSvg(this.openCardG);\r

  \    hide(this.cards3_area);\r

  \    hideSvg(this.investmentDeckG);\r

  \    showSvg(this.discardedG);\r

  \    this.mainDiv.className = \"grid_game_may\";\r

  \    return this;\r

  \  }\r

  \  battleView() {\r

  \    if (this.view == 'battle') return;\r

  \    this.view = 'battle';\r

  \    show(this.battle_area);\r

  \    show(this.status_area);\r

  \    show(this.edit_area);\r

  \    show(this.command_area);\r

  \    show(this.command2_area);\r

  \    show(this.map_area);\r

  \    show(this.log_area);\r

  \    show(this.hand_area);\r

  \    hide(this.cards2_area);\r

  \    hideSvg(this.actionDeckG);\r

  \    hideSvg(this.openCardG);\r

  \    hide(this.cards3_area);\r

  \    hideSvg(this.investmentDeckG);\r

  \    hideSvg(this.discardedG);\r

  \    this.mainDiv.className = \"grid_game_battle\";\r

  \    return this;\r

  \  }\r

  \  initView() {\r

  \    this.mainDiv = document.getElementById(\"mainDiv\");\r

  \    this.status_area = document.getElementById(\"status_area\");\r

  \    this.edit_area = document.getElementById(\"edit_area\");\r

  \    this.map_area = document.getElementById(\"map_area\");\r

  \    this.log_area = document.getElementById(\"log_area\");\r

  \    this.command_area = document.getElementById(\"command_area\");\r

  \    this.command2_area = document.getElementById(\"command2_area\");\r

  \    this.hand_area = document.getElementById(\"hand_area\");\r

  \    this.battle_area = document.getElementById(\"battle_area\");\r

  \    this.cards2_area = document.getElementById(\"cards2_area\");\r

  \    this.cards3_area = document.getElementById(\"cards3_area\");\r

  \    this.openCardG = document.getElementById(\"openCardG\");\r

  \    this.actionDeckG = document.getElementById(\"actionDeckG\");\r

  \    this.discardedG = document.getElementById(\"discardedG\");\r

  \    this.investmentDeckG = document.getElementById(\"investmentDeckG\");\r

  \    return this;\r

  \  }\r

  }"
NSettings: "class NSettings {\r

  \  constructor() {\r

  \  }\r

  }"
Peep: "class Peep {\r

  \  constructor({\r

  \    image,\r

  \    rect,\r

  \  }) {\r

  \    this.image = image\r

  \    this.setRect(rect)\r

  \    this.x = 0\r

  \    this.y = 0\r

  \    this.anchorY = 0\r

  \    this.scaleX = 1\r

  \    this.walk = null\r

  \  }\r

  \  setRect(rect) {\r

  \    this.rect = rect\r

  \    this.width = rect[2]\r

  \    this.height = rect[3]\r

  \    this.drawArgs = [\r

  \      this.image,\r

  \      ...rect,\r

  \      0, 0, this.width, this.height\r

  \    ]\r

  \  }\r

  \  render(ctx) {\r

  \    ctx.save()\r

  \    ctx.translate(this.x, this.y)\r

  \    ctx.scale(this.scaleX, 1)\r

  \    ctx.drawImage(...this.drawArgs)\r

  \    ctx.restore()\r

  \  }\r

  }"
Player: "class Player {\r

  \  constructor(id, color) {\r

  \    this.id = id;\r

  \    this.color = getColorDictColor(color);\r

  \  }\r

  }"
Recorder: "class Recorder {\r

  \  constructor(lang) {\r

  \    let rec = this.rec = new webkitSpeechRecognition();\r

  \    rec.continuous = true;\r

  \    rec.interimResults = true;\r

  \    rec.maxAlternatives = 5;\r

  \    this.setLanguage(lang);\r

  \    this.isRunning = false;\r

  \    this.isCancelled = false;\r

  \    this.result = null;\r

  \    this.isFinal = null;\r

  \    this.confidence = null;\r

  \    this.callback = null;\r

  \    let genHandler = (ev, name) => {\r

  \      console.log('genHandler', name)\r

  \      if (RecogOutput) console.log('recorder', name, 'isCancelled',
  this.isCancelled, 'isRunning', this.isRunning);\r

  \    }\r

  \    rec.onerror = ev => {\r

  \      genHandler(ev, 'error');\r

  \      if (ev.error == 'network') {\r

  \        alert('no internet connection: speech recognition is not available!
  (error:' + ev.error + ')');\r

  \        RecognitionAvailable = false;\r

  \      }\r

  \      if (RecogOutputError) console.error(ev);\r

  \      this.stop();\r

  \    };\r

  \    rec.onstart = ev => {\r

  \      genHandler(ev, 'started');\r

  \      if (!this.isCancelled) this.isRunning = true;\r

  \    };\r

  \    rec.onresult = ev => {\r

  \      genHandler(ev, 'result!');\r

  \      if (!this.isCancelled) this.processResult(ev);\r

  \    };\r

  \    rec.onend = ev => {\r

  \      genHandler(ev, 'ended');\r

  \      if (!this.isCancelled && this.callback) {\r

  \        this.callback(this.isFinal, this.result, this.confidence,
  SessionId);\r

  \      }\r

  \      this.isCancelled = this.isRunning = false;\r

  \      this.callback = null;\r

  \    };\r

  \  }\r

  \  processResult(ev) {\r

  \    let res = ev.results[0];\r

  \    this.isFinal = res.isFinal;\r

  \    this.result = res[0].transcript;\r

  \    this.confidence = res[0].confidence;\r

  \    if (this.isFinal) console.log('....result', this.result, 'FINAL?',
  this.isFinal)\r

  \    if (this.isFinal) {\r

  \      this.stop();\r

  \    }\r

  \  }\r

  \  setLanguage(lang) { this.rec.lang = (lang == 'E' ? 'en-US' : 'de-DE');
  }\r

  \  start() {\r

  \    MicrophoneShow();\r

  \    setTimeout(() => this.rec.start(), 10);\r

  \  }\r

  \  stop() {\r

  \    MicrophoneHide();\r

  \    setTimeout(() => this.rec.stop(), 10);\r

  \  }\r

  \  getLastResult() {\r

  \    return { isFinal: this.isFinal, result: this.result, confidence:
  this.confidence };\r

  \  }\r

  }"
RSG: "class RSG {\r

  \  constructor() {\r

  \    this.nodes = {};\r

  \    this.uiNodes = {};\r

  \    this.isUiActive = false;\r

  \    this.uid2oids = {};\r

  \    this.oid2uids = {};\r

  \    this.path2oid = {};\r

  \  }\r

  \  add_node(n, oid) {\r

  \    this.nodes[oid] = n;\r

  \    if (isEmpty(n.path)) this.root = n;\r

  \    if (isList(n.content) && n.content.length == 0) {\r

  \      n.type = 'empty_list';\r

  \    }\r

  \    this.path2oid[n.path] = n.oid;\r

  \    console.assert(nundef(Items[n.path]), 'duplicate path in Items!!! ' +
  n.path);\r

  \    console.assert(nundef(Items[oid]), 'duplicate oid in Items!!! ' +
  oid);\r

  \    Items[n.oid] = Items[n.path] = n;\r

  \  }\r

  \  add_ui_node(ui, uid, oid) {\r

  \    this.uiNodes[uid] = ui;\r

  \    lookupAddIfToList(this.uid2oids, [uid], oid);\r

  \    lookupAddIfToList(this.oid2uids, [oid], uid);\r

  \    if (Items[oid].type != 'card') console.assert(nundef(Items[uid]),
  'duplicate uid in Items!!! ' + uid);\r

  \    Items[uid] = ui;\r

  \    let o = Items[oid];\r

  \    ui.setAttribute('oid', oid);\r

  \    iAdd(o, { div: ui });\r

  \  }\r

  \  getUI(uid) { return this.uiNodes[uid]; }\r

  \  get_item_from_path(path) { return Items[path]; }\r

  \  get_item(id) {\r

  \    if (id[0] == '_') {\r

  \      let oid = Items[id].getAttribute('oid');\r

  \      return Items[oid];\r

  \    } else return Items[id];\r

  \  }\r

  }"
Scenario: "class Scenario {\r

  \  constructor(assets, data, G, decider) {\r

  \    this.decider = decider;\r

  \    this.data = data;\r

  \    this.assets = assets;\r

  \    this.done = false;\r

  \    this.player = null;\r

  \    this.phase = null;\r

  \    this.items = {};\r

  \    this.openRequest = {};\r

  \    this.lockedIds = {};\r

  \    this.missingUnitItems = {};\r

  \    this.wrongLocationItems = {};\r

  \    this.cvTooLowItems = {};\r

  \    this.perfectItems = {};\r

  \    this.initUnitItems(G);\r

  \    this.conflictItems = [];\r

  \    this.newConflict = null;\r

  \    this.openDeclaration = null;\r

  \    this.atWar = false;\r

  \    this.initConflictItems(G);\r

  \    this.diplItems = {};\r

  \    this.diplItemsTodo = {};\r

  \    this.openDiplRequest = {};\r

  \    this.satellites = {};\r

  \    this.diplDone = false;\r

  \    this.updateDiplomacy(G);\r

  \    unitTestConflict('conflicts:', this.conflictItems);\r

  \  }\r

  \  initConflictItems(G) {\r

  \    if ('conflicts' in this.data) {\r

  \      for (const tile in this.data.conflicts) {\r

  \        let aggressor = this.data.conflicts[tile][0];\r

  \        let defender = this.data.conflicts[tile][1];\r

  \        let cItem = {};\r

  \        cItem.tile = tile;\r

  \        cItem.aggressor = aggressor;\r

  \        cItem.defender = defender;\r

  \        cItem.stage = null;\r

  \        this.conflictItems.push(cItem);\r

  \      }\r

  \    }\r

  \  }\r

  \  initDiplItems_dep(G) {\r

  \    for (const pl in this.data) {\r

  \      if (!lookup(this.data, [pl, 'diplomacy'])) {\r

  \        continue;\r

  \      }\r

  \      for (const nation in this.data[pl].diplomacy) {\r

  \        addIf_depKeys(this.diplItemsTodo, [pl, nation], 0);\r

  \      }\r

  \    }\r

  \    for (const id in G.objects) {\r

  \      let o = G.objects[id];\r

  \      if (o.obj_type != 'influence') continue;\r

  \    }\r

  \  }\r

  \  initUnitItems(G) {\r

  \    for (const pl in this.data) {\r

  \      if (!lookup(this.data, [pl, 'units'])) {\r

  \        continue;\r

  \      }\r

  \      for (const tile in this.data[pl].units) {\r

  \        for (const type in this.data[pl].units[tile]) {\r

  \          for (const cv of this.data[pl].units[tile][type]) {\r

  \            let items = addIf_depKeys(this.items, [pl], []);\r

  \            items.push({\r

  \              owner: pl,\r

  \              goalTile: tile,\r

  \              type: type,\r

  \              goalCv: cv,\r

  \              tile: null,\r

  \              id: null,\r

  \              unit: null\r

  \            });\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \    unitTestMatch('items:', this.items);\r

  \    let availableUnits = matchUnits(G.objects, 'all');\r

  \    for (const pl in this.items) {\r

  \      let playerUnits = matchUnits(availableUnits, 'all', pl);\r

  \      unitTestMatch('player units', playerUnits);\r

  \      for (const item of this.items[pl]) {\r

  \        let m = this.findBestMatchingUnit(playerUnits, item);\r

  \        if (m) {\r

  \          item.id = m.id;\r

  \          item.unit = m;\r

  \          item.cv = m.cv;\r

  \          item.tile = m.tile;\r

  \          this.lockedIds[m.id] = item;\r

  \          removeInPlace(playerUnits, m);\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  activateConflict(G) {\r

  \    if (this.newConflict) {\r

  \      unitTestScenarioWar('conflict already activated',
  this.newConflict);\r

  \      return;\r

  \    }\r

  \    let cNext = firstCond(this.conflictItems, x => !x.stage && x.aggressor
  == G.player);\r

  \    if (cNext) {\r

  \      unitTestScenarioWar('activateConflict!!!!!!!!!!!!!! found conflict in
  stage null');\r

  \      cNext.stage = 'tbd';\r

  \      this.newConflict = cNext;\r

  \      unitTestConflict('activateConflict: found', cNext);\r

  \    } else {\r

  \      unitTestConflict('activateConflict: no new conflict found for',
  G.player);\r

  \    }\r

  \  }\r

  \  updateDiplomacy(G) {\r

  \    this.diplItems = {};\r

  \    this.diplItemsTodo = {};\r

  \    for (const pl in this.data) {\r

  \      if (!lookup(this.data, [pl, 'diplomacy'])) {\r

  \        continue;\r

  \      }\r

  \      for (const nation in this.data[pl].diplomacy) {\r

  \        let sat = lookup(this.satellites, [nation]);\r

  \        if (sat == pl) continue;\r

  \        addIf_depKeys(this.diplItemsTodo, [pl, nation],
  this.data[pl].diplomacy[nation]);\r

  \      }\r

  \    }\r

  \    unitTestDiplomacy('vor G check:', this.diplItemsTodo);\r

  \    let created = lookup(G.serverData, ['created']);\r

  \    let removed = lookup(G.serverData, ['removed']);\r

  \    let newCreated = !empty(created);\r

  \    let newRemoved = !empty(removed);\r

  \    for (const id in G.objects) {\r

  \      let o = G.objects[id];\r

  \      if (o.obj_type == 'influence') {\r

  \        addIf_depKeys(this.diplItems, [o.faction, o.nation], o.value);\r

  \        let req = lookup(this.data, [o.faction, 'diplomacy', o.nation]);\r

  \        unitTestDiplomacy('req for', o.nation, 'is', req, ' o.value is',
  o.value);\r

  \        if (req && req > o.value) {\r

  \          let lst = addIf_depKeys(this.diplItemsTodo, [o.faction], {});\r

  \          lst[o.nation] = req;\r

  \        } else if (req && req <= o.value) {\r

  \          delete this.diplItemsTodo[o.faction][o.nation];\r

  \          if (empty(this.diplItemsTodo[o.faction])) {\r

  \            delete this.diplItemsTodo[o.faction];\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \    this.diplDone = empty(this.diplItemsTodo);\r

  \    unitTestDiplomacy('checkDiplomacy:');\r

  \    unitTestDiplomacy('G', G);\r

  \    unitTestDiplomacy(this.diplItems, this.diplItemsTodo, this.diplDone);\r

  \    return;\r

  \    if (newRemoved && newCreated) {\r

  \      let lCreated = dict2list(created, 'id');\r

  \      for (const id in removed) {\r

  \        if (removed[id].obj_type != 'influence') continue;\r

  \        let v = removed[id].value;\r

  \        if (v >= 3) {\r

  \          let o = removed[id];\r

  \          let nation = o.nation;\r

  \          let faction = o.faction;\r

  \          let matchingTile = firstCond(lCreated, x => x.obj_type == 'tile'
  && x.alligence == nation);\r

  \          if (matchingTile) {\r

  \            if (matchingTile.owner != faction) {\r

  \              unitTestDiplomacy('RIESEN PROBLEM!!!! INCONSISTENT
  SATELLITE!!!!');\r

  \            }\r

  \            this.satellites[nation] = faction;\r

  \            let todoItem = lookup(this.diplItemsTodo, [faction, nation]);\r

  \            if (todoItem) {\r

  \              delete this.diplItemsTodo[faction][nation];\r

  \              if (empty(this.diplItemsTodo[faction])) {\r

  \                delete this.diplItemsTodo[faction];\r

  \              }\r

  \            }\r

  \            unitTestDiplomacy(nation, 'became satellite!');\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \    this.diplDone = empty(this.diplItemsTodo);\r

  \    unitTestDiplomacy('checkDiplomacy:');\r

  \    unitTestDiplomacy('G', G);\r

  \    unitTestDiplomacy(this.diplItems, this.diplItemsTodo, this.diplDone);\r

  \  }\r

  \  checkOpenItems() {\r

  \    let done = true;\r

  \    this.missingUnitItems = {};\r

  \    this.wrongLocationItems = {};\r

  \    this.cvTooLowItems = {};\r

  \    this.perfectItems = {};\r

  \    for (const pl in this.items) {\r

  \      for (const item of this.items[pl]) {\r

  \        if (!item.unit) {\r

  \          done = false;\r

  \          let l = addIf_depKeys(this.missingUnitItems, [pl], []);\r

  \          l.push(item);\r

  \        } else if (item.unit.cv < item.goalCv) {\r

  \          done = false;\r

  \          let l = addIf_depKeys(this.cvTooLowItems, [pl], []);\r

  \          l.push(item);\r

  \        } else if (item.goalTile != item.tile) {\r

  \          done = false;\r

  \          let l = addIf_depKeys(this.wrongLocationItems, [pl], []);\r

  \          l.push(item);\r

  \        } else {\r

  \          let l = addIf_depKeys(this.perfectItems, [pl], []);\r

  \          l.push(item);\r

  \        }\r

  \      }\r

  \    }\r

  \    if (this.data.options.done == 'diplomacy') {\r

  \      done = done && this.diplDone;\r

  \    }\r

  \    return done;\r

  \  }\r

  \  checkOpenUnitRequest(G, pl, created, removed) {\r

  \    let openReq = lookup(this.openRequest, [pl]);\r

  \    if (!openReq) return;\r

  \    removeInPlaceKeys(created, Object.keys(this.lockedIds));\r

  \    let id = openReq.id;\r

  \    let u = id ? G.objects[id] : matchUnits(created, 'first', pl,
  openReq.tile, openReq.type);\r

  \    if (u) {\r

  \      openReq.id = id ? id : u.id;\r

  \      openReq.unit = u;\r

  \      openReq.tile = u.tile;\r

  \      delete this.openRequest[pl];\r

  \      unitTestMatch('checkOpenRequest: ITEM UPDATED!');\r

  \    }\r

  \  }\r

  \  checkOpenDiplomacyRequest(G, pl, created, removed) {\r

  \    let newCreated = !empty(created);\r

  \    if (!newCreated) return;\r

  \    let newRemoved = !empty(removed);\r

  \    let openDiplReq = lookup(this.openDiplRequest, [pl]);\r

  \    if (!openDiplReq) return;\r

  \    unitTestDiplomacy('check if influences have changed:\\ncreated:',
  created);\r

  \    let influencesChanged = false;\r

  \    for (const id in created) {\r

  \      let o = created[id];\r

  \      if (o.obj_type == 'influence') {\r

  \        influencesChanged = true;\r

  \        break;\r

  \      }\r

  \    }\r

  \    if (!influencesChanged && newRemoved) {\r

  \      for (const id in removed) {\r

  \        let o = removed[id];\r

  \        if (o.obj_type == 'influence') {\r

  \          influencesChanged = true;\r

  \          break;\r

  \        }\r

  \      }\r

  \    }\r

  \    if (influencesChanged) {\r

  \      unitTestDiplomacy('YES!');\r

  \      this.updateDiplomacy(G);\r

  \      delete this.openDiplRequest[pl];\r

  \    }\r

  \  }\r

  \  checkOpenDeclarationRequest(G, pl) {\r

  \    let openDecl = this.openDeclaration;\r

  \    unitTestScenarioWar('checkOpenDeclarationRequest openDecl',
  openDecl);\r

  \    if (!openDecl) return;\r

  \    alert('OPEN WAR DECLARATION!!!')\r

  \    let item = firstCond(this.conflictItems, x => x.tile ==
  this.openDeclaration.tile);\r

  \    unitTestScenarioWar('SETTING DECLARED: vorher:', jsCopy(item));\r

  \    openDecl.stage = 'declared';\r

  \    unitTestScenarioWar('nachher:', jsCopy(item));\r

  \    this.atWar = true;\r

  \    this.openDeclaration = null;\r

  \    unitTestScenarioWar('end of checkOpenDeclarationRequest',
  this.openDeclaration);\r

  \  }\r

  \  checkOpenRequest(G) {\r

  \    let pl = G.player;\r

  \    let created = lookup(G.serverData, ['created']);\r

  \    let removed = lookup(G.serverData, ['removed']);\r

  \    if (empty(created)) {\r

  \      unitTestMatch('checkOpenRequest: NO CHANGES IN DATA (no
  created!)!');\r

  \    } else {\r

  \      this.checkOpenUnitRequest(G, pl, jsCopy(created), removed);\r

  \      this.checkOpenDiplomacyRequest(G, pl, created, removed);\r

  \    }\r

  \    this.checkOpenDeclarationRequest(G, pl);\r

  \  }\r

  \  defaultSetup(G) {\r

  \    let tuple = null;\r

  \    let fav_types = lookup(this.data.options, ['unit_types']);\r

  \    let type = fav_types ? chooseRandom(fav_types) :
  chooseRandom(this.assets.unitTypeNames);\r

  \    tuple = firstCond(G.tuples, x => x.includes(type));\r

  \    return tuple;\r

  \  }\r

  \  defaultSatellite(G) {\r

  \    let tuple = null;\r

  \    let fav_unit_type = lookup(this.data.options, ['garrison_type']);\r

  \    if (!fav_unit_type) fav_unit_type = 'Infantry';\r

  \    tuple = firstCond(G.tuples, x => x.includes(fav_unit_type));\r

  \    if (!tuple) {\r

  \      tuple = firstCond(G.tuples, x => x.includes('Tank'));\r

  \    }\r

  \    return tuple;\r

  \  }\r

  \  defaultProduction(G) {\r

  \    let tuple = null;\r

  \    if (this.data.options.priority == 'movement' ||
  this.data.options.priority == 'diplomacy') {\r

  \      tuple = firstCond(G.tuples, x => x.includes('action_card'));\r

  \    }\r

  \    return tuple;\r

  \  }\r

  \  defaultGovernment(G) {\r

  \    let tuple = null;\r

  \    if (this.data.options.priority == 'movement') {\r

  \      tuple = firstCond(G.tuples, x => x.includes('pass'));\r

  \      if (!tuple) {\r

  \        tuple = firstCond(G.tuples, x => x.includes('accept'));\r

  \        if (!tuple) {\r

  \          tuple = firstCond(G.tuples, x => x.length == 1 &&
  startsWith(x[0], 'action'));\r

  \        }\r

  \      }\r

  \    }\r

  \    return tuple;\r

  \  }\r

  \  defaultMovement(G) {\r

  \    let tuple = null;\r

  \    if (this.data.options.priority == 'movement') {\r

  \      tuple = firstCond(G.tuples, x => x.includes('pass'));\r

  \    }\r

  \    return tuple;\r

  \  }\r

  \  findBestMatchingUnit(playerUnits, item) {\r

  \    let m = matchUnits(playerUnits, 'first', null, item.goalTile,
  item.type, item.cv);\r

  \    if (!m) {\r

  \      m = matchUnits(playerUnits, 'first', null, item.goalTile,
  item.type);\r

  \      if (!m) {\r

  \        let mEveryWhere = matchUnits(playerUnits, 'all', null, null,
  item.type);\r

  \        if (mEveryWhere.length > 0) {\r

  \          unitTestMatch('partial matches:', mEveryWhere, 'for item',
  item);\r

  \          m = findClosestUnit((a, b) => this.assets.distanceBetweenTiles(a,
  b), item.goalTile, mEveryWhere);\r

  \        } else {\r

  \          unitTestMatch('NO MATCH for item', item);\r

  \        }\r

  \      } else {\r

  \        unitTestMatch('correctly located match:', m, 'for item', item);\r

  \      }\r

  \    } else {\r

  \      unitTestMatch('exact match:', m, 'for item', item);\r

  \    }\r

  \    return m;\r

  \  }\r

  \  tryBuildUnit(G) {\r

  \    let items = lookup(this.missingUnitItems, [G.player]);\r

  \    if (!items) return null;\r

  \    for (const item of items) {\r

  \      let m = firstCond(G.tuples, t => t.includes(item.type) &&
  t.includes(item.goalTile));\r

  \      if (m) {\r

  \        this.openRequest[G.player] = item;\r

  \        return m;\r

  \      }\r

  \    }\r

  \    for (const item of items) {\r

  \      if (item.id) continue;\r

  \      let mTuples = G.tuples.filter(t => t.includes(item.type));\r

  \      if (mTuples.length > 0) {\r

  \        let tilenames = filterStringFromTuples(this.assets.tileNames,
  mTuples);\r

  \        let m = findClosestTile((a, b) =>
  this.assets.distanceBetweenTiles(a, b), item.goalTile, tilenames);\r

  \        if (m) {\r

  \          this.openRequest[G.player] = item;\r

  \          return firstCond(mTuples, t => t.includes(m));\r

  \        }\r

  \      }\r

  \    }\r

  \    return null;\r

  \  }\r

  \  tryDeclaration(G) {\r

  \    unitTestScenarioWar('tryDeclaration newConflict:', this.newConflict);\r

  \    if (this.newConflict) {\r

  \      let c = this.newConflict;\r

  \      let t = firstCond(G.tuples, x => x.length == 1 && x[0] ==
  c.defender);\r

  \      if (t) {\r

  \        if (this.assets.factionNames.includes(c.defender)) {\r

  \          unitTestScenarioMin(G.player, 'is declaring war on',
  c.defender);\r

  \        } else {\r

  \          unitTestScenarioMin(G.player, 'is violating neutrality of',
  c.defender);\r

  \        }\r

  \        this.openDeclaration = c;\r

  \        this.newConflict = null;\r

  \        return t;\r

  \      }\r

  \    }\r

  \    return null;\r

  \  }\r

  \  tryWarMovement(G) {\r

  \    unitTestScenarioWar('tryWarMovement');\r

  \    let goal = firstCond(this.conflictItems, x => x.stage == 'declared');\r

  \    if (!goal) {\r

  \      return this.tryMoveUnit(G);\r

  \    }\r

  \    let tile = goal.tile;\r

  \    let t = firstCond(G.tuples, x => x.length >= 2 && x[1] == tile);\r

  \    if (!t) {\r

  \      unitTestScenarioWar('cannot move more units to', tile, '!');\r

  \      return this.tryMoveUnit(G);\r

  \    }\r

  \    let id = t[0];\r

  \    if (id in this.lockedIds) {\r

  \      let item = this.lockedIds[id];\r

  \      this.openRequest[G.player] = item;\r

  \      unitTestScenarioWar('locked unit', item, 'moved to', tile)\r

  \    } else {\r

  \      unitTestScenarioWar('free unit:', id, 'moved to', tile);\r

  \    }\r

  \    return t;\r

  \  }\r

  \  tryDiplomacy(G) {\r

  \    let diplReqs = lookup(this.diplItemsTodo, [G.player]);\r

  \    if (diplReqs) {\r

  \      let t = firstCond(G.tuples, x => x.length == 2 && startsWith(x[0],
  'action_') && x[1] in diplReqs);\r

  \      unitTestDiplomacy('tuple found:', t);\r

  \      if (t) {\r

  \        let lst = addIf_depKeys(this.openDiplRequest, [G.player], []);\r

  \        lst.push(t[1]);\r

  \      }\r

  \      return t;\r

  \    }\r

  \    return null;\r

  \  }\r

  \  tryMoveUnit(G) {\r

  \    let items = lookup(this.wrongLocationItems, [G.player]);\r

  \    if (!items) return null;\r

  \    for (const item of items) {\r

  \      let tuple = firstCond(G.tuples, t => t.length > 1 && t[0] == item.id
  && t[1] == item.goalTile);\r

  \      if (!tuple) tuple = findClosestTupleForItem(G.tuples, item,
  this.assets);\r

  \      if (!tuple) continue;\r

  \      this.openRequest[G.player] = item;\r

  \      return tuple;\r

  \    }\r

  \    return null;\r

  \  }\r

  \  trySeasonCard(G) {\r

  \    let tuple = null;\r

  \    let actionTuples = G.tuples.filter(x => startsWith(x[0], 'action'));\r

  \    if (empty(actionTuples)) return null;\r

  \    let actionCards = actionTuples.map(x => x[0]);\r

  \    let cards = actionCards.map(x => [x, G.objects[x]]);\r

  \    let seasonCards = cards.filter(x => 'season' in x[1] && x[1].season ==
  G.phase);\r

  \    if (empty(seasonCards)) {\r

  \      tuple = actionTuples[0];\r

  \      unitTestMatch(G.player, 'playing emergency card!!!');\r

  \    } else {\r

  \      tuple = firstCond(actionTuples, x =>
  x.includes(seasonCards[0][0]));\r

  \    }\r

  \    return tuple;\r

  \  }\r

  \  tryUpgradeUnit(G) {\r

  \    let items = lookup(this.cvTooLowItems, [G.player]);\r

  \    if (!items) return null;\r

  \    for (const item of items) {\r

  \      let m = firstCond(G.tuples, t => t.length == 1 &&
  t.includes(item.id));\r

  \      if (m) {\r

  \        this.openRequest[G.player] = item;\r

  \        return m;\r

  \      }\r

  \    }\r

  \    return null;\r

  \  }\r

  \  findMatch(G) {\r

  \    unitTestScenario('______________________findMatch');\r

  \    let isNewRound = this.player != G.player || this.phase != G.phase;\r

  \    if (isNewRound) {\r

  \      for (const ci of this.conflictItems) {\r

  \        if (ci.stage == 'declared') {\r

  \          ci.stage = 'active';\r

  \        }\r

  \      }\r

  \      if (this.done && 'after_wars_mode' in this.data.options) {\r

  \        if (!any(this.conflictItems, x => x.stage != 'active')) {\r

  \          this.decider.decisionMode = this.data.options.after_wars_mode;\r

  \        }\r

  \      }\r

  \      this.atWar = false;\r

  \    }\r

  \    this.player = G.player;\r

  \    this.phase = G.phase;\r

  \    this.checkOpenRequest(G);\r

  \    this.done = this.checkOpenItems(G);\r

  \    if (this.done) {\r

  \      unitTestScenario('Scenario is complete!!!');\r

  \      if (isNewRound && this.phase == 'Movement') {\r

  \        this.activateConflict(G);\r

  \      }\r

  \    }\r

  \    let tuple = null;\r

  \    if (G.phase == 'Setup') {\r

  \      if (!tuple) tuple = this.tryBuildUnit(G);\r

  \      if (!tuple) tuple = this.defaultSetup(G);\r

  \    }\r

  \    if (G.phase == 'Production') {\r

  \      if (!tuple) tuple = this.tryUpgradeUnit(G);\r

  \      if (!tuple) tuple = this.tryBuildUnit(G);\r

  \      if (!tuple) tuple = this.defaultProduction(G);\r

  \    }\r

  \    if (G.phase == 'Government') {\r

  \      if (!tuple) tuple = this.tryDiplomacy(G);\r

  \      if (!tuple) tuple = this.defaultGovernment(G);\r

  \    }\r

  \    if (G.phase == 'Satellite') {\r

  \      if (!tuple) tuple = this.defaultSatellite(G);\r

  \    }\r

  \    if (['Spring', 'Summer', 'Fall', 'Winter'].includes(G.phase)) {\r

  \      if (!tuple) tuple = this.trySeasonCard(G);\r

  \    }\r

  \    if (G.phase == 'Movement') {\r

  \      if (!tuple) tuple = this.tryDeclaration(G);\r

  \      if (!tuple) tuple = this.atWar ? this.tryWarMovement(G) :
  this.tryMoveUnit(G);\r

  \      if (!tuple) tuple = this.defaultMovement(G);\r

  \    }\r

  \    if (G.phase.includes('Battle')) {\r

  \      tuple = firstCond(G.tuples, t => t[0].length == 1);\r

  \    }\r

  \    unitTestScenario('\\t>>>', G.phase, G.player, tuple);\r

  \    unitTestScenarioMin('findmatch:', G.phase, G.player, tuple, this.done ?
  '(completed!)' : '...');\r

  \    return tuple;\r

  \  }\r

  }"
ScriptLoader: "class ScriptLoader {\r

  \  constructor(options) {\r

  \    this.protocol = document.location.protocol;\r

  \    this.global = 'Segment';\r

  \    this.isLoaded = false;\r

  \  }\r

  \  loadScript() {\r

  \    return new Promise((resolve, reject) => {\r

  \      const script = document.createElement('script');\r

  \      script.type = 'text/javascript';\r

  \      script.async = true;\r

  \      script.src = `${this.protocol}/` + `/${this.src}`;\r

  \      const el = document.getElementsByTagName('script')[0];\r

  \      el.parentNode.insertBefore(script, el);\r

  \      script.addEventListener('load', () => {\r

  \        this.isLoaded = true;\r

  \        resolve(script);\r

  \      })\r

  \      script.addEventListener('error', () => {\r

  \        reject(new Error(`${this.src} failed to load.`));\r

  \      })\r

  \    })\r

  \  }\r

  \  load(src) {\r

  \    if (startsWith(src, 'http')) src = stringAfter(src, '://');\r

  \    this.src = src;\r

  \    return new Promise(async (resolve, reject) => {\r

  \      if (!this.isLoaded) {\r

  \        try {\r

  \          await this.loadScript();\r

  \          resolve(window[this.global]);\r

  \        } catch (e) {\r

  \          reject(e);\r

  \        }\r

  \      } else {\r

  \        resolve(window[this.global]);\r

  \      }\r

  \    })\r

  \  }\r

  }"
SettingsClass: "class SettingsClass {\r

  \  constructor(settingsObject, userObject, dParent) {\r

  \    this.o = settingsObject;\r

  \    this.u = userObject;\r

  \    this.dParent = dParent;\r

  \  }\r

  \  //#region settings ui\r

  \  createSettingsUi(dParent) {\r

  \    dParent = valf(dParent, this.dParent);\r

  \    clearElement(dParent);\r

  \    this.list = [];\r

  \    let ttag = 'h2';\r

  \    mAppend(dParent, createElementFromHTML(`<${ttag}>Settings for
  ${this.u.id}:</${ttag}>`));\r

  \    let nGroupNumCommonAllGames = this.mInputGroup(dParent);\r

  \    this.setzeEineZahl(nGroupNumCommonAllGames, 'samples', 25,
  ['samplesPerGame']);\r

  \    this.setzeEineZahl(nGroupNumCommonAllGames, 'minutes', 1,
  ['minutesPerUnit']);\r

  \    this.setzeEineZahl(nGroupNumCommonAllGames, 'correct streak', 5,
  ['incrementLevelOnPositiveStreak']);\r

  \    this.setzeEineZahl(nGroupNumCommonAllGames, 'fail streak', 2,
  ['decrementLevelOnNegativeStreak']);\r

  \    this.setzeEinOptions(nGroupNumCommonAllGames, 'show labels', ['toggle',
  'always', 'never'], ['toggle', 'always', 'never'], 'toggle',
  ['pictureLabels']);\r

  \    this.setzeEinOptions(nGroupNumCommonAllGames, 'language', ['E', 'D',
  'S', 'F', 'C'], ['English', 'German', 'Spanish', 'French', 'Chinese'], 'E',
  ['language']);\r

  \    this.setzeEinOptions(nGroupNumCommonAllGames, 'vocabulary',
  Object.keys(KeySets), Object.keys(KeySets), 'best25', ['vocab']);\r

  \    this.setzeEineCheckbox(nGroupNumCommonAllGames, 'show time', false,
  ['showTime']);\r

  \    this.setzeEineCheckbox(nGroupNumCommonAllGames, 'spoken feedback',
  true, ['spokenFeedback']);\r

  \    this.setzeEineCheckbox(nGroupNumCommonAllGames, 'silent', false,
  ['silentMode']);\r

  \    this.setzeEineCheckbox(nGroupNumCommonAllGames, 'switch game after
  level', false, ['switchGame']);\r

  \    this.setzeEineZahl(nGroupNumCommonAllGames, 'trials', 3, ['trials']);\r

  \    this.setzeEineCheckbox(nGroupNumCommonAllGames, 'show hint', true,
  ['showHint']);\r

  \  }\r

  \  setSettingsKeys(elem) {\r

  \    let val = elem.type == 'number' ? Number(elem.value) : elem.type ==
  'checkbox' ? elem.checked : elem.value;\r

  \    lookupSetOverride(this.o, elem.keyList, val);\r

  \    this.hasChanged = true;\r

  \  }\r

  \  setSettingsKeysSelect(elem) {\r

  \    let val;\r

  \    for (const opt of elem.children) {\r

  \      if (opt.selected) val = opt.value;\r

  \    }\r

  \    this.hasChanged = true;\r

  \    lookupSetOverride(this.o, elem.keyList, val);\r

  \  }\r

  \  setzeEineZahl(dParent, label, init, skeys) {\r

  \    let d = mDiv(dParent);\r

  \    let val = lookup(this.o, skeys);\r

  \    if (nundef(val)) val = init;\r

  \    let inp = createElementFromHTML(\r

  \      `<input type=\"number\" class=\"input\" value=\"${val}\"
  onfocusout=\"Settings.setSettingsKeys(this)\" />`);\r

  \    let labelui = createElementFromHTML(`<label>${label}</label>`);\r

  \    mAppend(d, labelui);\r

  \    mAppend(labelui, inp);\r

  \    mStyleX(inp, { maleft: 12, mabottom: 4 });\r

  \    mClass(inp, 'input');\r

  \    inp.keyList = skeys;\r

  \    this.addSetting(skeys[0]);\r

  \  }\r

  \  setzeEineCheckbox(dParent, label, init, skeys) {\r

  \    let d = mDiv(dParent);\r

  \    let val = lookup(this.o, skeys);\r

  \    if (nundef(val)) val = init;\r

  \    let inp = createElementFromHTML(\r

  \      `<input type=\"checkbox\" class=\"checkbox\" ` + (val === true ?
  'checked=true' : '') + ` onfocusout=\"Settings.setSettingsKeys(this)\" >`\r

  \    );\r

  \    let labelui = createElementFromHTML(`<label>${label}</label>`);\r

  \    mAppend(d, labelui);\r

  \    mAppend(labelui, inp);\r

  \    mStyleX(inp, { maleft: 12, mabottom: 4 });\r

  \    mClass(inp, 'input');\r

  \    inp.keyList = skeys;\r

  \    this.addSetting(skeys[0]);\r

  \  }\r

  \  setzeEinOptions(dParent, label, optionList, friendlyList, init, skeys)
  {\r

  \    let d = mDiv(dParent);\r

  \    let val = lookup(this.o, skeys);\r

  \    if (nundef(val)) val = init;\r

  \    let inp = createElementFromHTML(`<select class=\"options\"
  onfocusout=\"Settings.setSettingsKeysSelect(this)\"></select>`);\r

  \    for (let i = 0; i < optionList.length; i++) {\r

  \      let opt = optionList[i];\r

  \      let friendly = friendlyList[i];\r

  \      let optElem = createElementFromHTML(`<option
  value=\"${opt}\">${friendly}</option>`);\r

  \      mAppend(inp, optElem);\r

  \      if (opt == val) optElem.selected = true;\r

  \    }\r

  \    let labelui = createElementFromHTML(`<label>${label}</label>`);\r

  \    mAppend(d, labelui);\r

  \    mAppend(labelui, inp);\r

  \    mStyleX(inp, { maleft: 12, mabottom: 4 });\r

  \    inp.keyList = skeys;\r

  \    this.addSetting(skeys[0]);\r

  \  }\r

  \  //#endregion\r

  \  //#region helpers \r

  \  mInputGroup(dParent, styles) {\r

  \    let baseStyles = { display: 'inline-block', align: 'right', bg:
  '#00000080', rounding: 10, padding: 20, margin: 12 };\r

  \    if (isdef(styles)) styles = mergeOverride(baseStyles, styles); else
  styles = baseStyles;\r

  \    return mDiv(dParent, styles);\r

  \  }\r

  \  addSetting(keylist) { if (nundef(this.list)) this.list = [];
  this.list.push(keylist); }\r

  \  updateSettings() {\r

  \    this.updateLabelSettings();\r

  \    this.updateTimeSettings();\r

  \    this.updateSpeakmodeSettings();\r

  \    let scope = 'user';//'game' 'level','temp','all'\r

  \    if (scope == 'temp' || nundef(this.list)) return;\r

  \    for (const k of this.list) {\r

  \      if (scope == 'user') lookupSetOverride(U, ['settings', k],
  this.o[k]);\r

  \      else if (scope == 'game') lookupSetOverride(U, ['games', this.o.id,
  k], this.o[k]);\r

  \      else if (scope == 'level') lookupSetOverride(U, ['games', this.o.id,
  'levels', this.o.level, k], this.o[k]);\r

  \      else if (scope == 'all') lookupSetOverride(DB, ['settings', k],
  this.o[k]);\r

  \    }\r

  \  }\r

  \  updateSpeakmodeSettings() { if (this.o.silentMode &&
  this.o.spokenFeedback) this.o.spokenFeedback = false; }\r

  \  updateTimeSettings() { checkTimer(this.o); }\r

  \  updateLabelSettings() {\r

  \    if (this.o.pictureLabels == 'toggle') this.o.showLabels = true;\r

  \    else this.o.showLabels = (this.o.pictureLabels == 'always');\r

  \  }\r

  \  updateGameValues(U) {\r

  \    let game = this.o.id;\r

  \    let level = this.o.level;\r

  \    let settings = { numColors: 1, numRepeat: 1, numPics: 1, numSteps: 1,
  colors: ColorList };\r

  \    settings = mergeOverride(settings, DB.settings);\r

  \    if (isdef(U.settings)) settings = mergeOverride(settings,
  U.settings);\r

  \    if (isdef(DB.games[game])) settings = mergeOverride(settings,
  DB.games[game]);\r

  \    let next = lookup(DB.games, [game, 'levels', level]); if (next)
  settings = mergeOverride(settings, next);\r

  \    next = lookup(U, ['games', game]); if (next) settings =
  mergeOverride(settings, next);\r

  \    next = lookup(U, ['games', game, 'levels', level]); if (next) settings
  = mergeOverride(settings, next);\r

  \    delete settings.levels;\r

  \    delete settings.colors;\r

  \    Speech.setLanguage(settings.language);\r

  \    copyKeys(settings, this.o);\r

  \    this.updateSettings();\r

  \  }\r

  }"
SimpleClass7: "class SimpleClass7 {\r

  \  constructor() {\r

  \    this.dParent = dTable;\r

  \    this.initialPoolSelected = false;\r

  \    this.settings = {};\r

  \    this.randomIndices = [];\r

  \    openToolbar();\r

  \  }\r

  \  presentGameState(data) {\r

  \    console.log('_________________________gs', StepCounter); StepCounter +=
  1;\r

  \    mStyleX(dTable, { h: window.innerHeight });\r

  \    let [settings, state] = this.processData(data);\r

  \    console.assert(state.poolArr.map(x => !isList(x)),
  'BUGBUGBUGBUGBUGBUGBUG!!!')\r

  \    let needToLoadBoard = nundef(this.clientBoard) ||
  this.clientBoard.boardFilename != settings.boardFilename;\r

  \    if (needToLoadBoard) {\r

  \      clearElement(this.dParent);\r

  \      this.dPool = null;\r

  \      this.clientBoard = applyStandard(this.dParent, this.settings);\r

  \      if (!this.inSyncWithServer()) return;\r

  \    }\r

  \    else if (isdef(data.settings)) { this.clientBoard =
  applySettings(this.clientBoard, this.settings); }\r

  \    if (nundef(this.dPool)) {\r

  \      mLinebreak(this.dParent, 30);\r

  \      let dPool = this.dPool = mDiv(this.dParent);\r

  \    } else {\r

  \      this.clearBoardUI();\r

  \      this.clearPoolUI();\r

  \    }\r

  \    this.presentPerlen();\r

  \    this.activateDD();\r

  \  }\r

  \  clearBoardUI() {\r

  \    let b = this.clientBoard;\r

  \    let [perlen, fields] = [[], []];\r

  \    for (const f of b.fields) {\r

  \      let p = f.item;\r

  \      if (isList(p)) {\r

  \        continue;\r

  \      }\r

  \      if (isdef(p)) {\r

  \        if (isdef(p.dxy)) { this.resetCenter(f); }\r

  \        iDiv(p).remove();\r

  \        f.item = null;\r

  \        perlen.push(p);\r

  \        fields.push(f);\r

  \      }\r

  \    }\r

  \    return [perlen, fields];\r

  \  }\r

  \  clearPoolUI() { clearElement(this.dPool); }\r

  \  presentPerlen() {\r

  \    let [b, s, perlenByIndex, boardArr, poolArr] = [this.clientBoard,
  this.settings, this.poolEnriched, this.state.boardArr, this.state.poolArr];\r

  \    let dParent = this.dPool;\r

  \    for (let i = 0; i < poolArr.length; i++) {\r

  \      let iPerle = poolArr[i];\r

  \      console.assert(!isList(iPerle), 'BUGBUGBUGBUGBUG!!!!!!')\r

  \      let perle = perlenByIndex[iPerle];\r

  \      if (nundef(perle)) {\r

  \        console.log('BUG!', perlenByIndex, perlenByIndex, 'perlenDict',
  this.perlenDict, '\\nboardArr', boardArr, '\\npoolArr', poolArr)\r

  \      }\r

  \      perle.field = null;\r

  \      let ui = createPerle(perle, dParent, 64, 1.3, .4);\r

  \    }\r

  \    for (let i = 0; i < boardArr.length; i++) {\r

  \      let pin = boardArr[i];\r

  \      let iPerle = isList(pin) ? pin[0] : pin;\r

  \      if (iPerle == null) continue;\r

  \      let perle = perlenByIndex[iPerle];\r

  \      let field = b.fields[i];\r

  \      perle.field = field;\r

  \      field.item = perle;\r

  \      let ui = createPerle(perle, iDiv(field), 64, 1.3, .4);\r

  \      if (isList(pin)) {\r

  \        this.moveCenter(field, perle, pin[1], pin[2]);\r

  \      }\r

  \      if (isFarbPerle(perle)) {\r

  \        let bg = GermanToEnglish[perle.key];\r

  \        if (nundef(bg)) bg = perle.key;\r

  \        let d = perle.live.dImg;\r

  \        d.style.boxShadow = `0px 0px 200px 200px ${bg}`;\r

  \        ui.style.zIndex = 10;\r

  \      } else {\r

  \        ui.style.zIndex = 11;\r

  \      }\r

  \    }\r

  \  }\r

  \  activateDD() {\r

  \    let fields = this.clientBoard.fields;\r

  \    enableDD(this.perlenListeImSpiel, fields.map(x => x),
  this.onDropPerleSimplest.bind(this), false, false,
  dragStartPreventionOnSidebarOpen);\r

  \    addDDTarget({ item: this.state.poolArr, div: this.dParent }, false,
  false);\r

  \  }\r

  \  onDropOrig(source, target) {\r

  \    if (target.item == this.state.poolArr) {\r

  \      let f = source.field;\r

  \      if (isdef(f)) sendRemovePerle(source, f);\r

  \    } else {\r

  \      let displaced = null;\r

  \      if (isdef(target.item)) {\r

  \        let p = target.item;\r

  \        if (p == source) return;\r

  \        displaced = p;\r

  \      }\r

  \      if (isdef(source.field)) {\r

  \        let f = source.field;\r

  \        sendMovePerle(source, f, target, displaced);\r

  \      } else {\r

  \        sendPlacePerle(source, target, displaced);\r

  \      }\r

  \    }\r

  \  }\r

  \  onDropPerleSimplest(source, target, isCopy, clearTarget, dx, dy, ev,
  clone) {\r

  \    if (!this.settings.freeForm) {\r

  \      this.onDropOrig(source, target);\r

  \    } else if (target.item == this.state.poolArr) {\r

  \      let f = source.field;\r

  \      if (isdef(f)) sendRemovePerle(source, f);\r

  \    } else {\r

  \      this.onDropFreeForm(source, target, ev, clone);\r

  \    }\r

  \  }\r

  \  onDropFreeForm(source, target, ev, clone) {\r

  \    let perle = source;\r

  \    let dField = iDiv(target);\r

  \    let dPerle = iDiv(source);\r

  \    let rField = getRect(dField);\r

  \    let rPerle = getRect(dPerle);\r

  \    let d = iDiv(perle);\r

  \    let drop = { x: ev.clientX, y: ev.clientY };\r

  \    let [dx, dy] = [DDInfo.dragOffset.offsetX,
  DDInfo.dragOffset.offsetY];\r

  \    let [x, y, w, h] = [drop.x, drop.y, rField.w, rField.h];\r

  \    let dw = Math.abs(rPerle.w - rField.w);\r

  \    let dh = Math.abs(rPerle.h - rField.h);\r

  \    dw /= 2, dh /= 2;\r

  \    let [xFinal, yFinal] = [x - dx - dw, y - dy - dh];\r

  \    let dFieldParent = dField.parentNode;\r

  \    let rParent = getRect(dFieldParent);\r

  \    let xField = xFinal - rParent.x;\r

  \    let yField = yFinal - rParent.y;\r

  \    let [cxFinal, cyFinal] = [xField + w / 2, yField + h / 2];\r

  \    let dxy = { x: cxFinal - target.center.x, y: cyFinal - target.center.y
  };\r

  \    mStyleX(dField, { left: xField, top: yField });\r

  \    target.dxy = source.dxy = dxy;\r

  \    let displaced = null;\r

  \    if (target.item == source) sendMoveField(target);\r

  \    else if (isdef(target.item)) displaced = target.item;\r

  \    if (isdef(source.field)) {\r

  \      let f = source.field;\r

  \      sendMovePerle(source, f, target, displaced);\r

  \    } else {\r

  \      sendPlacePerle(source, target, displaced);\r

  \    }\r

  \    return;\r

  \  }\r

  \  moveCenter(target, source, dx, dy) {\r

  \    let dTarget = iDiv(target);\r

  \    let center = target.center;\r

  \    let newCenter = { x: center.x + dx, y: center.y + dy };\r

  \    target.dxy = { x: dx, y: dy };\r

  \    let rect = getRect(dTarget);\r

  \    mStyleX(dTarget, { left: newCenter.x - rect.w / 2, top: newCenter.y -
  rect.h / 2 });\r

  \    source.dxy = { x: dx, y: dy };\r

  \  }\r

  \  resetCenter(target) {\r

  \    let dTarget = iDiv(target);\r

  \    let center = target.center;\r

  \    let rect = getRect(dTarget);\r

  \    mStyleX(dTarget, { left: center.x - rect.w / 2, top: center.y - rect.h
  / 2 });\r

  \    delete target.dxy;\r

  \    if (isdef(target.item)) delete target.item.dxy;\r

  \  }\r

  \  processData(data) {\r

  \    console.assert(isdef(data), 'NO DATA IN PROCESSDATA!!!!!');\r

  \    if (nundef(this.state)) this.state = {};\r

  \    copyKeys(data.state, this.state);\r

  \    if (isdef(data.settings)) {\r

  \      console.assert(isdef(this.settings), 'processData G.settings is NOT
  defined after constructor!!!!!')\r

  \      copyKeys(data.settings, this.settings);\r

  \    }\r

  \    if (isdef(data.perlenDict)) { PerlenDict = this.perlenDict =
  data.perlenDict; }\r

  \    if (isdef(data.state.pool)) {\r

  \      this.perlenListeImSpiel = Object.values(this.state.pool);\r

  \      this.randomIndices = data.randomIndices;\r

  \      this.poolEnriched = this.state.pool;\r

  \      for (const idx in this.state.pool) {\r

  \        let p = this.state.pool[idx];\r

  \        let key = p.key;\r

  \        copyKeys(this.perlenDict[key], p);\r

  \        p.path = mPath(p);\r

  \      }\r

  \    }\r

  \    return [this.settings, this.state];\r

  \  }\r

  \  setInitialPoolSelected() { this.initialPoolSelected = true;
  setTitle('Glasperlenspiel'); }\r

  \  inSyncWithServer() {\r

  \    let [b, s, st] = [this.clientBoard, this.settings, this.state];\r

  \    let corr = {};\r

  \    if (st.boardArr.length != b.nFields) { corr.nFields = s.nFields =
  b.nFields; }\r

  \    if (s.rows != b.rows || s.cols != b.cols) { corr.rows = s.rows =
  b.rows; corr.cols = s.cols = b.cols; }\r

  \    if (!isEmpty(Object.keys(corr))) {\r

  \      console.log('sending syncBoardLayout!!! corr', corr)\r

  \      Socket.emit('settings', { settings: this.settings });\r

  \      return false;\r

  \    }\r

  \    else { return true; }\r

  \  }\r

  }"
SimpleGrid: "class SimpleGrid {\r

  \  constructor(id, { mapData, shape = 'hex', rows = 3, cols = 2, idPrefix,
  hasNodes = false, hasEdges = false, randomizeIds = false } = {}) {\r

  \    this.randomizeIds = randomizeIds;\r

  \    this.mapData = mapData;\r

  \    this.dhelp = {};\r

  \    this.idCounters = { field: 0, corner: 0, edge: 0, other: 0 };\r

  \    this.shape = shape;\r

  \    this.sides = shape == 'hex' ? 6 : shape == 'quad' ? 4 : 3;\r

  \    this.degree = shape == 'hex' ? 3 : shape == 'quad' ? 4 : 6;\r

  \    this.idPrefix = idPrefix;\r

  \    this.objects = {};\r

  \    this.obj_type = shape + 'grid';\r

  \    this.id = id;\r

  \    if (rows == undefined) return;\r

  \    if (shape == 'hex') {\r

  \      rows = rows % 2 != 0 ? rows : rows + 1;\r

  \      this.topcols = cols;\r

  \      this.colarr = this._calc_hex_col_array(rows, this.topcols);\r

  \    } else if (shape == 'quad') {\r

  \      this.topcols = cols;\r

  \      this.colarr = new Array(rows).fill(cols);\r

  \    }\r

  \    this.maxcols = arrMax(this.colarr);\r

  \    this.rows = rows;\r

  \    this.cols = cols;\r

  \    this.fields = [];\r

  \    this.corners = [];\r

  \    this.edges = [];\r

  \    if (this.shape == 'hex') {\r

  \      this._hexFromScratch();\r

  \    } else if (this.shape == 'quad') {\r

  \      this._quadFromScratch();\r

  \    }\r

  \    this._calcMetrics();\r

  \    this._verifyMetrics();\r

  \    this.hasNodes = hasNodes;\r

  \    this.hasEdges = hasEdges;\r

  \    this._addPositions();\r

  \    if (!this.hasNodes) {\r

  \      for (const id of this.fields) {\r

  \        delete this.objects[id].corners;\r

  \      }\r

  \      for (const id of this.edges) {\r

  \        delete this.objects[id].corners;\r

  \      }\r

  \      for (const id of this.corners) {\r

  \        delete this.objects[id];\r

  \      }\r

  \      delete this.corners;\r

  \    }\r

  \    if (!this.hasEdges) {\r

  \      for (const id of this.fields) {\r

  \        delete this.objects[id].edges;\r

  \      }\r

  \      if (isdef(this.corners)) {\r

  \        for (const id of this.corners) {\r

  \          delete this.objects[id].edges;\r

  \        }\r

  \      }\r

  \      for (const id of this.edges) {\r

  \        delete this.objects[id];\r

  \      }\r

  \      delete this.edges;\r

  \    }\r

  \  }\r

  \  scaleToFit(w, h) {\r

  \    let f2nRatio = this.hasNodes ? 4 : 10000;\r

  \    let maintainRatio = false;\r

  \    let ew1 = 10;\r

  \    let gName = null;\r

  \    let margin = 10;\r

  \    let [fw, fh, nw, nh, ew] = this._bestFitScaleFactors(this.wBoard,
  this.wdef, this.hBoard, this.hdef, f2nRatio, ew1, {\r

  \      gName: gName,\r

  \      w: w,\r

  \      h: h,\r

  \      margin: margin,\r

  \      maintainRatio: maintainRatio\r

  \    });\r

  \    let gap = 4;\r

  \    for (const id of this.fields) {\r

  \      let o = this.objects[id];\r

  \      o.bounds = [o.x * fw, o.y * fh, o.w * fw - gap, o.h * fh - gap];\r

  \    }\r

  \    return Object.values(this.objects).map(x => x.bounds);\r

  \  }\r

  \  //#region internal\r

  \  _addPositions({ wdef = null, hdef = null } = {}) {\r

  \    this.wdef = 4;\r

  \    this.hdef = 4;\r

  \    let fields = Object.values(this.objects).filter(x => x.obj_type ==
  'field');\r

  \    this._recurseFields(this.fields[0]);\r

  \    let left = indexOfMin(fields, 'x').val;\r

  \    let right = indexOfMax(fields, 'x').val;\r

  \    let top = indexOfMin(fields, 'y').val;\r

  \    let bottom = indexOfMax(fields, 'y').val;\r

  \    this.wBoard = right - left + this.wdef;\r

  \    this.hBoard = bottom - top + this.hdef;\r

  \    let dx = (left + right) / 2;\r

  \    let dy = (top + bottom) / 2;\r

  \    for (const f of fields) {\r

  \      f.x -= dx;\r

  \      f.y -= dy;\r

  \    }\r

  \    let q = [[0.5, -0.5], [0.5, 0.5], [-0.5, 0.5], [-0.5, -0.5]];\r

  \    let hex = [[0, -0.5], [0.5, -0.25], [0.5, 0.25], [0, 0.5], [-0.5,
  0.25], [-0.5, -0.25]];\r

  \    let triup = [[0, -0.5], [0.5, 0.5], [-0.5, 0.5]];\r

  \    let tridown = [[-0.5, 0.5], [0.5, 0.5], [-0.5, 0.5]];\r

  \    let pts = this.shape == 'hex' ? hex : this.shape == 'quad' ? q :
  this.shape == 'triup' ? triup : tridown;\r

  \    for (const f of fields) {\r

  \      f.poly = getPoly(pts, f.x, f.y, this.wdef, this.hdef);\r

  \    }\r

  \    this.vertices = correctPolys(this.fields.map(fid =>
  this.objects[fid].poly), 1, 1);\r

  \    if (!this.hasNodes) return;\r

  \    for (const f of fields) {\r

  \      for (let i = 0; i < f.poly.length; i++) {\r

  \        let nid = f.corners[i];\r

  \        if (!nid) continue;\r

  \        let el = this.objects[nid];\r

  \        let pt = f.poly[i];\r

  \        el.h = 1;\r

  \        el.w = 1;\r

  \        el.x = pt.x;\r

  \        el.y = pt.y;\r

  \      }\r

  \    }\r

  \    if (!this.hasEdges) return;\r

  \    for (const f of fields) {\r

  \      for (let i = 0; i < f.edges.length; i++) {\r

  \        let eid = f.edges[i];\r

  \        if (!eid) continue;\r

  \        let el = this.objects[eid];\r

  \        let n1 = this.objects[el.corners[0]];\r

  \        let n2 = this.objects[el.corners[1]];\r

  \        el.x1 = n1.x;\r

  \        el.y1 = n1.y;\r

  \        el.x2 = n2.x;\r

  \        el.y2 = n2.y;\r

  \        el.x = (n1.x + n2.x) / 2;\r

  \        el.y = (n1.y + n2.y) / 2;\r

  \        el.thickness = 1;\r

  \      }\r

  \    }\r

  \  }\r

  \  _bestFitScaleFactors(wBoard, wField, hBoard, hField, f2nRatio = 4,
  edgeWidth = 10, { gName, w, h, margin = 4, maintainRatio = false } = {}) {\r

  \    if (w == undefined) {\r

  \      let g = document.getElementById(gName);\r

  \      let transinfo = getTransformInfo(g);\r

  \      w = transinfo.translateX * 2;\r

  \      h = transinfo.translateY * 2;\r

  \    }\r

  \    let fw = Math.floor((w - margin) / (wBoard + wField / 2));\r

  \    let fh = Math.floor((h - margin) / (hBoard + hField / 2));\r

  \    if (maintainRatio) {\r

  \      let ff = Math.min(fw, fh);\r

  \      fw = ff;\r

  \      fh = ff;\r

  \    }\r

  \    return [fw, fh, Math.floor(fw / f2nRatio), Math.floor(fh / f2nRatio),
  edgeWidth];\r

  \  }\r

  \  _hexFromScratch() {\r

  \    this.dhelp = {};\r

  \    this.idCounters = { field: 0, corner: 0, edge: 0, other: 0 };\r

  \    this.imiddleRow = (this.rows - 1) / 2;\r

  \    let offsetsHex = [[0, -0.5], [0.5, -0.25], [0.5, 0.25], [0, 0.5],
  [-0.5, 0.25], [-0.5, -0.25]];\r

  \    let offsetsQuad = [[-0.5, -0.5], [0.5, -0.5], [0.5, 0.5], [-0.5,
  0.5]];\r

  \    this.offsets = this.shape == 'quad' ? offsetsQuad : offsetsHex;\r

  \    let idxQuadRow = [-1, 0, 0, -1];\r

  \    let idxQuadCol = [0, 0, -1, -1];\r

  \    let idxHexRow = [-1, -1, 0, 0, 0, -1];\r

  \    let idxHexCol = [0, 1, 1, 0, -1, -1];\r

  \    this.indexRow = this.shape == 'quad' ? idxQuadRow : idxHexRow;\r

  \    this.indexCol = this.shape == 'quad' ? idxQuadCol : idxHexCol;\r

  \    this.fieldsByRowCol = {};\r

  \    for (let irow = 0; irow < this.colarr.length; irow++) {\r

  \      this.fieldsByRowCol[irow] = {};\r

  \      let colstart = this.maxcols - this.colarr[irow];\r

  \      for (let j = 0; j < this.colarr[irow]; j++) {\r

  \        var icol = colstart + 2 * j;\r

  \        let field = {};\r

  \        field.obj_type = 'field';\r

  \        field.id = this._getId(field);\r

  \        field.row = irow;\r

  \        field.col = icol;\r

  \        field.edges = arrCreate(6, () => null);\r

  \        field.neighbors = arrCreate(6, () => null);\r

  \        field.corners = arrCreate(6, () => null);\r

  \        this.objects[field.id] = field;\r

  \        this.fields.push(field.id);\r

  \        this.fieldsByRowCol[irow][icol] = field.id;\r

  \      }\r

  \    }\r

  \    for (const fid of this.fields) {\r

  \      let field = this.objects[fid];\r

  \      for (let inode = 0; inode < this.sides; inode++) {\r

  \        let nrow = field.row + this.indexRow[inode];\r

  \        let ncol = field.col + this.indexCol[inode];\r

  \        let irc = 'n' + '-' + nrow + '_' + ncol;\r

  \        let node = null;\r

  \        if (irc in this.dhelp) {\r

  \          node = this.dhelp[irc];\r

  \        } else {\r

  \          node = {};\r

  \          node.obj_type = 'corner';\r

  \          node.id = this._getId(node);\r

  \          node.row = nrow;\r

  \          node.col = ncol;\r

  \          node.edges = arrCreate(3, () => null);\r

  \          node.fields = arrCreate(3, () => null);\r

  \          this.corners.push(node.id);\r

  \          this.dhelp[irc] = node;\r

  \          this.objects[node.id] = node;\r

  \        }\r

  \        if (inode == 0) {\r

  \          node.fields[1] = field.id;\r

  \        } else if (inode == 1) {\r

  \          node.fields[2] = field.id;\r

  \        } else if (inode == 2) {\r

  \          node.fields[2] = field.id;\r

  \        } else if (inode == 3) {\r

  \          node.fields[0] = field.id;\r

  \        } else if (inode == 4) {\r

  \          node.fields[0] = field.id;\r

  \        } else if (inode == 5) {\r

  \          node.fields[1] = field.id;\r

  \        }\r

  \        field.corners[inode] = node.id;\r

  \      }\r

  \    }\r

  \    for (const fid of this.fields) {\r

  \      let field = this.objects[fid];\r

  \      for (let inode = 0; inode < this.sides; inode++) {\r

  \        let in1 = inode;\r

  \        let in2 = (inode + 1) % 6;\r

  \        let n1 = this.objects[field.corners[in1]];\r

  \        let n2 = this.objects[field.corners[in2]];\r

  \        let startNode = n1;\r

  \        if (n1.row > n2.row) {\r

  \          startNode = n2;\r

  \        }\r

  \        if (n1.row == n2.row && n1.col > n2.col) {\r

  \          startNode = n2;\r

  \        }\r

  \        let endNode = startNode == n1 ? n2 : n1;\r

  \        let irc = 'e' + startNode.id + '_' + endNode.id;\r

  \        let edge = null;\r

  \        if (irc in this.dhelp) {\r

  \          edge = this.dhelp[irc];\r

  \        } else {\r

  \          edge = {};\r

  \          edge.obj_type = 'edge';\r

  \          edge.id = this._getId(edge);\r

  \          edge.row = startNode.row;\r

  \          edge.col = startNode.col;\r

  \          edge.fields = [null, null];\r

  \          edge.leftField = null;\r

  \          edge.rightField = null;\r

  \          edge.corners = [startNode.id, endNode.id];\r

  \          edge.startNode = startNode.id;\r

  \          edge.endNode = endNode.id;\r

  \          if (inode == 0) {\r

  \            n1.edges[1] = edge.id;\r

  \            n2.edges[2] = edge.id;\r

  \          } else if (inode == 1) {\r

  \            n1.edges[1] = edge.id;\r

  \            n2.edges[0] = edge.id;\r

  \          } else if (inode == 2) {\r

  \            n1.edges[2] = edge.id;\r

  \            n2.edges[0] = edge.id;\r

  \          } else if (inode == 3) {\r

  \            n1.edges[2] = edge.id;\r

  \            n2.edges[1] = edge.id;\r

  \          } else if (inode == 4) {\r

  \            n1.edges[0] = edge.id;\r

  \            n2.edges[1] = edge.id;\r

  \          } else if (inode == 5) {\r

  \            n1.edges[0] = edge.id;\r

  \            n2.edges[2] = edge.id;\r

  \          }\r

  \          this.edges.push(edge.id);\r

  \          this.dhelp[irc] = edge;\r

  \          this.objects[edge.id] = edge;\r

  \        }\r

  \        if (inode < 3) {\r

  \          edge.fields[1] = field.id;\r

  \          edge.leftField = field.id;\r

  \        } else {\r

  \          edge.fields[0] = field.id;\r

  \          edge.rightField = field.id;\r

  \        }\r

  \        field.edges[inode] = edge.id;\r

  \      }\r

  \    }\r

  \    for (const fid of this.fields) {\r

  \      let f = this.objects[fid];\r

  \      for (let i = 0; i < 6; i++) {\r

  \        let e = this.objects[f.edges[i]];\r

  \        for (const f1 of e.fields) {\r

  \          if (f1 && f1 != fid) {\r

  \            f.neighbors[i] = f1;\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  _quadFromScratch() {\r

  \    this.dhelp = {};\r

  \    this.idCounters = { field: 0, corner: 0, edge: 0, other: 0 };\r

  \    let offsetsHex = [[0, -0.5], [0.5, -0.25], [0.5, 0.25], [0, 0.5],
  [-0.5, 0.25], [-0.5, -0.25]];\r

  \    let offsetsQuad = [[0.5, -0.5], [0.5, 0.5], [-0.5, 0.5], [-0.5,
  -0.5]];\r

  \    this.offsets = this.shape == 'quad' ? offsetsQuad : offsetsHex;\r

  \    let idxQuadRow = [-1, 0, 0, -1];\r

  \    let idxQuadCol = [0, 0, -1, -1];\r

  \    let idxHexRow = [-1, -1, 0, 0, 0, -1];\r

  \    let idxHexCol = [0, 1, 1, 0, -1, -1];\r

  \    this.indexRow = this.shape == 'quad' ? idxQuadRow : idxHexRow;\r

  \    this.indexCol = this.shape == 'quad' ? idxQuadCol : idxHexCol;\r

  \    this.fieldsByRowCol = {};\r

  \    for (let irow = 0; irow < this.colarr.length; irow++) {\r

  \      this.fieldsByRowCol[irow] = {};\r

  \      for (let icol = 0; icol < this.colarr[irow]; icol++) {\r

  \        let field = {};\r

  \        field.obj_type = 'field';\r

  \        field.id = this._getId(field);\r

  \        field.row = irow;\r

  \        field.col = icol;\r

  \        field.edges = arrCreate(4, () => null);\r

  \        field.neighbors = arrCreate(4, () => null);\r

  \        field.corners = arrCreate(4, () => null);\r

  \        this.objects[field.id] = field;\r

  \        this.fields.push(field.id);\r

  \        this.fieldsByRowCol[irow][icol] = field.id;\r

  \      }\r

  \    }\r

  \    for (const fid of this.fields) {\r

  \      let field = this.objects[fid];\r

  \      for (let inode = 0; inode < this.sides; inode++) {\r

  \        let nrow = field.row + this.indexRow[inode];\r

  \        let ncol = field.col + this.indexCol[inode];\r

  \        let irc = 'n' + '-' + nrow + '_' + ncol;\r

  \        let node = null;\r

  \        if (irc in this.dhelp) {\r

  \          node = this.dhelp[irc];\r

  \        } else {\r

  \          node = {};\r

  \          node.obj_type = 'corner';\r

  \          node.id = this._getId(node);\r

  \          node.row = nrow;\r

  \          node.col = ncol;\r

  \          node.edges = arrCreate(4, () => null);\r

  \          node.fields = arrCreate(4, () => null);\r

  \          this.corners.push(node.id);\r

  \          this.dhelp[irc] = node;\r

  \          this.objects[node.id] = node;\r

  \        }\r

  \        if (inode == 0) {\r

  \          node.fields[2] = field.id;\r

  \        } else if (inode == 1) {\r

  \          node.fields[3] = field.id;\r

  \        } else if (inode == 2) {\r

  \          node.fields[0] = field.id;\r

  \        } else if (inode == 3) {\r

  \          node.fields[1] = field.id;\r

  \        }\r

  \        field.corners[inode] = node.id;\r

  \      }\r

  \    }\r

  \    for (const fid of this.fields) {\r

  \      let field = this.objects[fid];\r

  \      for (let i = 3; i < 7; i++) {\r

  \        let inode = i % 4;\r

  \        let in1 = inode;\r

  \        let in2 = (inode + 1) % this.sides;\r

  \        let n1 = this.objects[field.corners[in1]];\r

  \        let n2 = this.objects[field.corners[in2]];\r

  \        let startNode = n1;\r

  \        if (n1.row > n2.row) {\r

  \          startNode = n2;\r

  \        }\r

  \        if (n1.row == n2.row && n1.col > n2.col) {\r

  \          startNode = n2;\r

  \        }\r

  \        let endNode = startNode == n1 ? n2 : n1;\r

  \        let irc = 'e' + startNode.id + '_' + endNode.id;\r

  \        let edge = null;\r

  \        if (irc in this.dhelp) {\r

  \          edge = this.dhelp[irc];\r

  \        } else {\r

  \          edge = {};\r

  \          edge.obj_type = 'edge';\r

  \          edge.id = this._getId(edge);\r

  \          edge.row = startNode.row;\r

  \          edge.col = startNode.col;\r

  \          edge.fields = [null, null];\r

  \          edge.leftField = null;\r

  \          edge.rightField = null;\r

  \          edge.topField = null;\r

  \          edge.bottomField = null;\r

  \          edge.crossField = null;\r

  \          edge.corners = [startNode.id, endNode.id];\r

  \          edge.startNode = startNode.id;\r

  \          edge.endNode = endNode.id;\r

  \          if (inode == 0) {\r

  \            n1.edges[2] = edge.id;\r

  \            n2.edges[0] = edge.id;\r

  \          } else if (inode == 1) {\r

  \            n1.edges[3] = edge.id;\r

  \            n2.edges[1] = edge.id;\r

  \          } else if (inode == 2) {\r

  \            n1.edges[0] = edge.id;\r

  \            n2.edges[2] = edge.id;\r

  \          } else if (inode == 3) {\r

  \            n1.edges[1] = edge.id;\r

  \            n2.edges[3] = edge.id;\r

  \          }\r

  \          this.edges.push(edge.id);\r

  \          this.dhelp[irc] = edge;\r

  \          this.objects[edge.id] = edge;\r

  \        }\r

  \        if (inode == 0) {\r

  \          edge.fields[1] = field.id;\r

  \          edge.leftField = field.id;\r

  \        } else if (inode == 1) {\r

  \          edge.fields[0] = field.id;\r

  \          edge.topField = field.id;\r

  \        } else if (inode == 2) {\r

  \          edge.fields[0] = field.id;\r

  \          edge.rightField = field.id;\r

  \        } else if (inode == 3) {\r

  \          edge.fields[1] = field.id;\r

  \          edge.bottomField = field.id;\r

  \        }\r

  \        field.edges[(inode + 1) % 4] = edge.id;\r

  \      }\r

  \    }\r

  \    for (const fid of this.fields) {\r

  \      let f = this.objects[fid];\r

  \      for (let i = 0; i < 4; i++) {\r

  \        if (!f.edges[i]) continue;\r

  \        let e = this.objects[f.edges[i]];\r

  \        for (const f1 of e.fields) {\r

  \          if (f1 && f1 != fid) {\r

  \            f.neighbors[i] = f1;\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \    this._verifyMetrics();\r

  \  }\r

  \  _getId(o) {\r

  \    if (this.randomizeIds) return getUID();\r

  \    if ('obj_type' in o && o.obj_type in this.idCounters) {\r

  \      this.idCounters[o.obj_type] += 1;\r

  \      let prefix = o.obj_type[0];\r

  \      if (!isEmpty(this.idPrefix)) {\r

  \        prefix = this.idPrefix + prefix;\r

  \      }\r

  \      return prefix + this.idCounters[o.obj_type];\r

  \    } else {\r

  \      let prefix = 'o';\r

  \      if (!empty(this.idPrefix)) {\r

  \        prefix = this.idPrefix + prefix;\r

  \      }\r

  \      this.idCounters['other'] += 1;\r

  \      return prefix + this.idCounters['other'];\r

  \    }\r

  \  }\r

  \  _recurseFields(fid, { x = 0, y = 0 } = {}) {\r

  \    if (!fid) return;\r

  \    let f = this.objects[fid];\r

  \    if ('done' in f) return;\r

  \    f.done = true;\r

  \    f.h = this.hdef;\r

  \    f.w = this.wdef;\r

  \    f.x = x;\r

  \    f.y = y;\r

  \    for (let i = 0; i < this.sides; i++) {\r

  \      let sid_nei = f.neighbors[i];\r

  \      if (sid_nei != null) {\r

  \        let dx = 0;\r

  \        let dy = 0;\r

  \        if (this.shape == 'hex') {\r

  \          if (i == 0) {\r

  \            dx += this.wdef / 2;\r

  \            dy -= (3 * this.hdef) / 4;\r

  \          } else if (i == 1) {\r

  \            dx += this.wdef;\r

  \          } else if (i == 2) {\r

  \            dx += this.wdef / 2;\r

  \            dy += (3 * this.hdef) / 4;\r

  \          } else if (i == 3) {\r

  \            dx -= this.wdef / 2;\r

  \            dy += (3 * this.hdef) / 4;\r

  \          } else if (i == 4) {\r

  \            dx -= this.wdef;\r

  \          } else if (i == 5) {\r

  \            dx -= this.wdef / 2;\r

  \            dy -= (3 * this.hdef) / 4;\r

  \          }\r

  \        } else if (this.shape == 'quad') {\r

  \          if (i == 0) {\r

  \            dy -= this.hdef;\r

  \          } else if (i == 1) {\r

  \            dx += this.wdef;\r

  \          } else if (i == 2) {\r

  \            dy += this.hdef;\r

  \          } else if (i == 3) {\r

  \            dx -= this.wdef;\r

  \          }\r

  \        }\r

  \        this._recurseFields(sid_nei, { x: x + dx, y: y + dy });\r

  \      }\r

  \    }\r

  \  }\r

  \  _calc_hex_col_array(rows, cols) {\r

  \    let colarr = [];\r

  \    for (let i = 0; i < rows; i++) {\r

  \      colarr[i] = cols;\r

  \      if (i < (rows - 1) / 2) cols += 1;\r

  \      else cols -= 1;\r

  \    }\r

  \    return colarr;\r

  \  }\r

  \  _calcMetrics() {\r

  \    this.nNodes = 0;\r

  \    this.nEdges = 0;\r

  \    this.nFields = 0;\r

  \    if (this.shape == 'hex') {\r

  \      for (let i = 0; i < (this.rows - 1) / 2 + 1; i++) {\r

  \        let n = this.colarr[i];\r

  \        this.nFields += n == this.maxcols ? n : 2 * n;\r

  \        this.nNodes += 2 * (2 * n + 1);\r

  \        this.nEdges += n * 2 * 2 + (n == this.maxcols ? n + 1 : 2 * (n +
  1));\r

  \      }\r

  \    } else if (this.shape == 'quad') {\r

  \      this.nNodes = (this.cols + 1) * (this.rows + 1);\r

  \      this.nFields = this.cols * this.rows;\r

  \      this.nEdges = this.cols * (this.rows + 1) + this.rows * (this.cols +
  1);\r

  \    }\r

  \  }\r

  \  _verifyMetrics(verbose = false) {\r

  \    if (verbose) {\r

  \    }\r

  \    if (this.corners.length != this.nNodes || this.edges.length !=
  this.nEdges || this.fields.length != this.nFields) {\r

  \    } else if (verbose) {\r

  \    }\r

  \  }\r

  }"
SimpleTimer: "class SimpleTimer {\r

  \  constructor(elem, msTick, onTick, msTotal, onElapsed) {\r

  \    this.elem = elem;\r

  \    this.msTotal = this.msLeft = msTotal;\r

  \    this.onTick = onTick;\r

  \    this.onElapsed = onElapsed;\r

  \    this.interval = msTick;\r

  \    this.running = false;\r

  \    this.paused = false;\r

  \    this.TO = null;\r

  \  }\r

  \  togglePause() { if (this.paused) this.continue(); else this.pause(); }\r

  \  clear() { let elapsed = this.stop(); clearElement(this.elem); return
  elapsed; }\r

  \  continue() {\r

  \    if (!this.running) this.start();\r

  \    else if (!this.paused) return;\r

  \    else { this.paused = false; this.TO =
  setInterval(this.tickHandler.bind(this), this.interval); }\r

  \  }\r

  \  tickHandler() {\r

  \    this.msLeft -= this.interval;\r

  \    this.msElapsed = this.msTotal - this.msLeft;\r

  \    this.output();\r

  \    if (isdef(this.onTick)) this.onTick();\r

  \    if (this.msLeft <= 0) {\r

  \      this.stop();\r

  \      this.msLeft = 0;\r

  \      if (isdef(this.onElapsed)) {\r

  \        this.onElapsed(0);\r

  \      }\r

  \    }\r

  \  }\r

  \  start() {\r

  \    if (this.running) this.stop();\r

  \    this.started = new Date().now;\r

  \    this.msLeft = this.msTotal;\r

  \    this.msElapsed = 0;\r

  \    this.running = true;\r

  \    this.output();\r

  \    this.TO = setInterval(this.tickHandler.bind(this), this.interval);\r

  \  }\r

  \  output() {\r

  \    this.elem.innerHTML = timeConversion(Math.max(this.msLeft, 0),
  'msh');\r

  \  }\r

  \  stop() {\r

  \    if (!this.running) return;\r

  \    clearInterval(this.TO);\r

  \    this.TO = null;\r

  \    this.running = false;\r

  \    return this.msLeft;\r

  \  }\r

  \  pause() {\r

  \    if (this.paused || !this.running) return;\r

  \    clearInterval(this.TO);\r

  \    this.paused = true;\r

  \  }\r

  }"
SoloPlayer: "class SoloPlayer {\r

  \  constructor(user) {\r

  \    this.color = getColorDictColor(user.settings.userColor);\r

  \    this.id = user.id;\r

  \    this.score = 0;\r

  \  }\r

  }"
Speaker: "class Speaker {\r

  \  static get VOICES() {\r

  \    return {\r

  \      david: 'Microsoft David - English (United States)', //'Microsoft
  David Desktop - English',\r

  \      mark: 'Microsoft Mark - English (United States)',\r

  \      austria: 'Microsoft Michael - German (Austria)',\r

  \      zira: 'Microsoft Zira Desktop - English',\r

  \      us: 'Google US English',\r

  \      ukFemale: 'Google UK English Female',\r

  \      ukMale: 'Google UK English Male',\r

  \      deutsch: 'Google Deutsch',\r

  \      spanish: 'Google español',\r

  \      D: 'Google Deutsch',\r

  \      S: 'Google español',\r

  \      F: 'Google français',\r

  \      french: 'Google français',\r

  \      C: 'Google 日本語',\r

  \      E: 'Google US English',\r

  \      apple: 'Susan',\r

  \    };\r

  \  }\r

  \  constructor(lang) {\r

  \    this.lang = lang;\r

  \    this.q = [];\r

  \    this.isRunning = false;\r

  \    let awaitVoices = new Promise(resolve =>\r

  \      speechSynthesis.onvoiceschanged = resolve)\r

  \      .then(this.initVoices.bind(this));\r

  \  }\r

  \  initVoices() {\r

  \    this.voices = speechSynthesis.getVoices().sort(function (a, b) {\r

  \      const aname = a.name.toUpperCase(), bname = b.name.toUpperCase();\r

  \      if (aname < bname) return -1;\r

  \      else if (aname == bname) return 0;\r

  \      else return +1;\r

  \    });\r

  \    if (isdef(mBy('output'))) mBy('output').innerHTML = this.voices.map(x
  => x.name);\r

  \  }\r

  \  setLanguage(lang) { this.lang = lang; }\r

  \  enq(args) { this.q.push(args); }\r

  \  deq() {\r

  \    if (nundef(this.voices)) {\r

  \      setTimeout(this.deq.bind(this), 500);\r

  \    }\r

  \    else if (!isEmpty(this.q)) {\r

  \      let args = this.q.pop();\r

  \      this.utter(...args);\r

  \    } else {\r

  \      this.isRunning = false;\r

  \    }\r

  \  }\r

  \  clearq() {\r

  \    this.q = [];\r

  \  }\r

  \  output(text) { let d = mBy('output'); if (isdef(d)) d.innerHTML +=
  `<br>${text}`; else console.log('DONE', text); }\r

  \  say(text, r = .5, p = .8, v = MASTERVOLUME, voicekey, callback, lang) {\r

  \    if (isdef(lang)) this.speaker.setLanguage(lang);\r

  \    this.enq([text, r, p, v, valf(voicekey, 'apple'), valf(callback, () =>
  this.output(text))]);\r

  \    this.deq();\r

  \  }\r

  \  say_simple(text, vkey) {\r

  \    this.utter(text, .5, .8, 1, valf(vkey, 'apple'), () =>
  this.output(text));\r

  \  }\r

  \  sayQ(text, vkey) {\r

  \    if (isdef(lang)) this.setLanguage(lang);\r

  \    this.enq([text, .5, .8, 1, valf(vkey, 'apple'), () =>
  mBy('output').innerHTML = text]);\r

  \    this.deq();\r

  \  }\r

  \  utter(text, r = .5, p = .8, v = MASTERVOLUME, voicekey, callback = null)
  {\r

  \    speechSynthesis.cancel();\r

  \    var u = new SpeechSynthesisUtterance();\r

  \    let [vkey, voice] = this.findSuitableVoice(text, voicekey);\r

  \    u.text = text;\r

  \    u.rate = r;\r

  \    u.pitch = p;\r

  \    u.volume = v;\r

  \    u.voice = voice;\r

  \    u.onend = ev => {\r

  \      if (isdef(callback)) callback();\r

  \      this.deq();\r

  \    };\r

  \    this.isRunning = true;\r

  \    speechSynthesis.speak(u);\r

  \  }\r

  \  findSuitableVoice(text, k) {\r

  \    let voicenames = Speaker.VOICES;\r

  \    this.output('voices: ' + this.voices.map(x => x.name).join(','));\r

  \    k = this.lang;\r

  \    let voiceName = voicenames[k];\r

  \    let voice = firstCond(this.voices, x => startsWith(x.name,
  voiceName));\r

  \    this.output(`voice ${k} named ${voiceName} exists?${isdef(voice)}`);\r

  \    return [k, voice];\r

  \  }\r

  \  findSuitableVoice_orig(text, voicekey) {\r

  \    let voicenames = Speaker.VOICES;\r

  \    let vkey = 'zira';\r

  \    if (this.lang == 'D') {\r

  \      vkey = 'deutsch';\r

  \    } else if (text.includes('bad')) {\r

  \      vkey = 'zira';\r

  \    } else if (voicekey == 'random') {\r

  \      vkey = chooseRandom(['david', 'zira', 'us', 'ukFemale', 'ukMale']);\r

  \    } else if (isdef(voicenames[voicekey])) {\r

  \      vkey = voicekey;\r

  \    } else if (isdef(voicekey)) {\r

  \      let tryVoiceKey = firstCondDict(voicenames, x => startsWith(x,
  voicekey));\r

  \      if (tryVoiceKey) vkey = tryVoiceKey;\r

  \    }\r

  \    //vkey=this.lang;//'david';//'mark'\r

  \    let voiceName = voicenames[vkey];\r

  \    let voice = firstCond(this.voices, x => startsWith(x.name,
  voiceName));\r

  \    return [vkey, voice];\r

  \  }\r

  }"
SpeechAPI: "class SpeechAPI {\r

  \  constructor(lang) {\r

  \    this.recorder = new Recorder(lang);\r

  \    this.speaker = new Speaker(lang);\r

  \    SessionId = Date.now();\r

  \  }\r

  \  testRecorder() {\r

  \    this.recorder.start();\r

  \  }\r

  \  train() {\r

  \  }\r

  \  setLanguage(lang) {\r

  \    this.speaker.setLanguage(lang);\r

  \    this.recorder.setLanguage(lang);\r

  \  }\r

  \  isSpeakerRunning() { return this.speaker.isRunning; }\r

  \  startRecording(lang, callback) {\r

  \    this.recorder.isCancelled = false;\r

  \    this.recorder.callback = callback;\r

  \    this.recorder.setLanguage(lang);\r

  \    this.recorder.start();\r

  \  }\r

  \  stopRecording() {\r

  \    this.recorder.isCancelled = true;\r

  \    this.recorder.stop();\r

  \  }\r

  \  say(text, r = .5, p = .8, v = MASTERVOLUME, voicekey, callback, lang) {\r

  \    if (isdef(lang)) this.speaker.setLanguage(lang);\r

  \    this.speaker.enq(arguments);\r

  \    this.speaker.deq();\r

  \  }\r

  \  stopSpeaking() {\r

  \    this.speaker.clearq();\r

  \  }\r

  }"
TestEngine: "class TestEngine {\r

  \  constructor() {\r

  \    this.Dict = {};\r

  \    this.specs = null;\r

  \    this.solutions = null;\r

  \    this.series = null;\r

  \    this.index = 0;\r

  \    this.autosave = false;\r

  \    this.defs = null;\r

  \    this.spec = null;\r

  \    this.sdata = null;\r

  \  }\r

  \  async init(defs, sdata, series, index, ifrom, ito) {\r

  \    this.defs = defs;\r

  \    this.sdata = sdata;\r

  \    series = isdef(series) ? series : localStorage.getItem('testSeries');\r

  \    if (nundef(series)) series = TEST_SERIES;\r

  \    index = isdef(index) ? index : localStorage.getItem('testIndex');\r

  \    if (nundef(index)) index = '0';\r

  \    ifrom = isdef(ifrom) ? ifrom : localStorage.getItem('iTestCaseFrom');\r

  \    if (nundef(ifrom)) ifrom = '0'; mBy('iTestCaseFrom').value = ifrom;\r

  \    ito = isdef(ito) ? ito : localStorage.getItem('iTestCaseTo');\r

  \    if (nundef(ito)) ito = '2'; mBy('iTestCaseTo').value = ito;\r

  \    index = Number(index);\r

  \    await this.loadTestCase(series, index);\r

  \    updateTestInput(index);\r

  \  }\r

  \  async loadSeries(series) {\r

  \    let path = '/assetsTEST/' + series + '/';\r

  \    this.series = series;\r

  \    this.Dict[series] = {\r

  \      specs: await loadYamlDict(path + '_spec.yaml'),\r

  \      sdata: await loadServerDataForTestSeries(series),\r

  \      solutions: await loadSolutions(series),\r

  \    };\r

  \    if (nundef(this.Dict[series].solutions)) this.Dict[series].solutions =
  {};\r

  \    this.sdata = this.Dict[series].sdata;\r

  \    this.specs = this.Dict[series].specs;\r

  \    this.solutions = this.Dict[series].solutions;\r

  \    let numCases = Object.keys(this.specs).length;\r

  \    return numCases;\r

  \  }\r

  \  async loadNextTestCase() { await this.loadTestCase(this.series,
  this.index + 1); }\r

  \  async loadPrevTestCase() { await this.loadTestCase(this.series,
  this.index - 1); }\r

  \  async repeatTestCase() { await this.loadTestCase(this.series,
  this.index); }\r

  \  async loadTestCase(series, index) {\r

  \    if (CLEAR_BETWEEN_TESTS) await onClickClearTable();\r

  \    let di = this.Dict[series];\r

  \    if (nundef(di)) { await this.loadSeries(series); di =
  this.Dict[series]; }\r

  \    let numCases = Object.keys(di.specs).length;\r

  \    if (index < 0) index = numCases - 1;\r

  \    else if (index >= numCases) index = 0;\r

  \    let spec = di.specs[index];\r

  \    if (nundef(spec)) { index = 0; spec = di.specs[0]; }\r

  \    this.series = series;\r

  \    this.index = index;\r

  \    localStorage.setItem('testSeries', this.series);\r

  \    localStorage.setItem('testIndex', this.index);\r

  \    mBy('message').innerHTML = '(main) ' + series + ' case: ' + index;\r

  \    this.spec = spec;\r

  \    this.sdata = di.sdata;\r

  \    return numCases;\r

  \  }\r

  \  saveSolutions() { saveSolutions(this.series, this.solutions); }\r

  \  loadSolution() {\r

  \    let rTree = this.solutions[this.index];\r

  \    this.solution = { rTree: rTree };\r

  \    return this.solution;\r

  \  }\r

  \  saveSolution(R, download = false) {\r

  \    let r1 = normalizeRTree(R);\r

  \    this.solutions[this.index] = r1;\r

  \    if (download) this.saveSolutions();\r

  \  }\r

  \  invalidate() { delete this.solutions[this.index]; }\r

  \  verify(R) {\r

  \    let rTreeNow = normalizeRTree(R);\r

  \    let solution = this.loadSolution();\r

  \    if (!solution.rTree) {\r

  \      if (this.autosave) this.saveSolution(R);\r

  \      return;\r

  \    }\r

  \    let rTreeSolution = this.solution.rTree;\r

  \    let changes = propDiffSimple(rTreeNow, rTreeSolution);\r

  \    if (changes.hasChanged) {\r

  \      console.log('verifying test case', this.series, this.index,
  'FAIL!!!!!!!');\r

  \      console.log('changes:', changes)\r

  \    } else {\r

  \      console.log('verifying test case', this.series, this.index,
  'correct!');\r

  \    }\r

  \  }\r

  }"
TimeIt: "class TimeIt {\r

  \  constructor(msg, showOutput = true) {\r

  \    this.showOutput = showOutput;\r

  \    this.init(msg);\r

  \  }\r

  \  getTotalTimeElapsed() {\r

  \    let tNew = new Date();\r

  \    let tDiffStart = tNew.getTime() -
  this.namedTimestamps.start.getTime();\r

  \    return tDiffStart;\r

  \  }\r

  \  tacit() { this.showOutput = false; }\r

  \  timeStamp(name) {\r

  \    let tNew = new Date();\r

  \    let tDiff = tNew.getTime() - this.namedTimestamps.start.getTime();\r

  \    if (this.showOutput) console.log('___', tDiff, 'msecs * to', name);\r

  \    this.t = tNew;\r

  \    this.namedTimestamps[name] = tNew;\r

  \  }\r

  \  reset() { this.init('timing start') }\r

  \  init(msg) {\r

  \    this.t = new Date();\r

  \    if (this.showOutput) console.log('___', msg);\r

  \    this.namedTimestamps = { start: this.t };\r

  \  }\r

  \  showSince(name, msg = 'now') {\r

  \    let tNew = new Date();\r

  \    let tNamed = this.namedTimestamps[name];\r

  \    if (this.showOutput) if (!tNamed) { console.log(name, 'is not a
  timestamp!'); return; }\r

  \    let tDiff = tNew.getTime() - tNamed.getTime();\r

  \    if (this.showOutput) console.log('___', tDiff, 'msecs', name, 'to',
  msg);\r

  \    this.t = tNew;\r

  \  }\r

  \  format(t) { return '___' + t.getSeconds() + ':' + t.getMilliseconds();
  }\r

  \  show(msg) { this.showTime(msg); }\r

  \  showTime(msg) {\r

  \    let tNew = new Date();\r

  \    let tDiff = tNew.getTime() - this.t.getTime();\r

  \    let tDiffStart = tNew.getTime() -
  this.namedTimestamps.start.getTime();\r

  \    if (this.showOutput) console.log('___ ', tDiff, 'msecs to', msg, '(' +
  tDiffStart, 'total)');\r

  \    this.t = tNew;\r

  \  }\r

  \  start_of_cycle(msg) {\r

  \    this.init(msg);\r

  \  }\r

  \  end_of_cycle(msg) {\r

  \    let tNew = new Date();\r

  \    let tDiff = tNew.getTime() - this.t.getTime();\r

  \    let tDiffStart = tNew.getTime() -
  this.namedTimestamps.start.getTime();\r

  \    if (this.showOutput) console.log('___ ' + tDiff + ' msecs', msg, 'to
  EOC (total: ' + tDiffStart + ')');\r

  \  }\r

  }"
TimeoutManager: "class TimeoutManager {\r

  \  constructor() {\r

  \    this.TO = {};\r

  \  }\r

  \  clear(key) {\r

  \    if (nundef(key)) key = Object.keys(this.TO);\r

  \    else if (isString(key)) key = [key];\r

  \    for (const k of key) {\r

  \      clearTimeout(this.TO[k]);\r

  \      delete this.TO[k];\r

  \    }\r

  \  }\r

  \  set(ms, callback, key) {\r

  \    if (nundef(key)) key = getUID();\r

  \    this.TO[key] = setTimeout(ms, callback);\r

  \  }\r

  }"
TimerClass: "class TimerClass {\r

  \  constructor(g, elem) {\r

  \    this.started, this.elapsed, this.onTimeOver = null, this.elem,
  this.timeLeft, this.settings = g;\r

  \    if (isdef(elem)) this.setElem(elem);\r

  \  }\r

  \  setElem(elem) {\r

  \    if (nundef(elem) && isdef(this.elem)) { elem = this.elem; }\r

  \    else if (nundef(elem)) { let d = mBy('time'); if (isdef(d)) this.elem =
  d; }\r

  \    else if (isString(elem)) { elem = mBy(elem); this.elem = elem; }\r

  \  }\r

  \  check(g) { this.settings = g; if (g.showTime) { show(this.elem);
  this.start(); } else { hide(this.elem); } return g.showTime; }\r

  \  clear() { clearTimeout(this.TO); }\r

  \  restart(g, elem, onTimeOver = null) {\r

  \    this.clear();\r

  \    this.setElem(elem);\r

  \    let active = this.check(g);\r

  \    this.started = msNow();\r

  \    this.elapsed = 0;\r

  \    if (isdef(onTimeOver)) this.onTimeOver = onTimeOver;\r

  \    if (active) this.start();\r

  \  }\r

  \  start() {\r

  \    if (nundef(this.settings.showTime) || !this.settings.showTime)
  return;\r

  \    if (nundef(this.settings.minutesPerUnit)) this.settings.minutesPerUnit
  = 10;\r

  \    if (nundef(this.started)) { this.started = msNow(); this.elapsed = 0;
  }\r

  \    var timeLeft = this.timeLeft = this.settings.minutesPerUnit * 60000 -
  this.getTimeElapsed();\r

  \    if (timeLeft > 0) {\r

  \      let t = msToTime(timeLeft);\r

  \      let s = format2Digits(t.h) + \":\" + format2Digits(t.m) + \":\" +
  format2Digits(t.s);\r

  \      this.elem.innerHTML = s;\r

  \      this.TO = setTimeout(() => this.start(), 500);\r

  \    } else {\r

  \      this.elem.innerHTML = '00:00:00';\r

  \      if (this.onTimeOver) this.onTimeOver();\r

  \    }\r

  \  }\r

  \  unitTimeUp() {\r

  \    return (this.settings.minutesPerUnit * 60000 - this.getTimeElapsed())
  <= 0;\r

  \  }\r

  \  startClock(elem) {\r

  \    if (nundef(this.settings.showTime) || !this.settings.showTime)
  return;\r

  \    var today = new Date(),\r

  \      h = format2Digits(today.getHours()),\r

  \      m = format2Digits(today.getMinutes()),\r

  \      s = format2Digits(today.getSeconds());\r

  \    if (isString(elem)) elem = mBy(elem); elem.innerHTML = h + \":\" + m +
  \":\" + s;\r

  \    this.TO = setTimeout(() => this.startClock(elem), 500);\r

  \  }\r

  \  getTimeElapsed() { return this.elapsed + msElapsedSince(this.started);
  }\r

  }"
ToolbarClass: "class ToolbarClass {\r

  \  constructor(dParent) {\r

  \    this.dParent = dParent;\r

  \    clearElement(dParent);\r

  \    this.buttons = {};\r

  \    this.populate();\r

  \  }\r

  \  addButton(key, handler, caption) {\r

  \    if (nundef(caption)) caption = key;\r

  \    let styles = { w: 100 };\r

  \    let b = this.buttons[key] = mButton(caption, handler, this.dParent,
  styles, null, 'b_' + key);\r

  \  }\r

  \  removeButton() { }\r

  \  showButton() { }\r

  \  hideButton() { }\r

  \  populate() {\r

  \    this.addButton('uploadBoard', onClickUploadBoard, 'upload board');\r

  \    this.addButton('uploadPerlen', onClickUploadPerlen, 'upload perlen');\r

  \    mLinebreak(this.dParent)\r

  \    this.addButton('chooseBoard', onClickChooseBoard, 'choose board');\r

  \    this.addButton('prefabGallery', onClickPrefabGallery, 'prefab
  gallery');\r

  \    this.addButton('modifyLayout', onClickModifyLayout, 'modify layout');\r

  \    this.addButton('saveAsPrefab', onClickSaveAsPrefab, 'save as
  prefab');\r

  \    mLinebreak(this.dParent);\r

  \    let oldCode = false;\r

  \    if (oldCode) {\r

  \      this.addButton('clearBoard', onClickClearBoard, 'clear board');\r

  \      this.addButton('clearPerlenpool', onClickClearPerlenpool, 'clear
  perlenpool');\r

  \      this.addButton('remove5Random', onClickRemove5Random, 'remove 5
  random');\r

  \      mLinebreak(this.dParent);\r

  \      this.addButton('addToPool', onClickAddToPool, 'add to pool');\r

  \      this.addButton('add5Random', onClickAdd5Random, 'add 5 random');\r

  \    } else {\r

  \      this.addButton('perlenPool', onClickPerlenPool, 'perlen pool');\r

  \    }\r

  \    mLinebreak(this.dParent);\r

  \    this.addButton('recovery', onClickRecovery, 'recovery!!!');\r

  \    this.addButton('recpoint', onClickRecpoint, 'recpoint!');\r

  \    mLinebreak(this.dParent);\r

  \    mLinebreak(this.dParent)\r

  \    this.addButton('saveSettings', onClickSaveSettings, 'save settings');\r

  \    this.addButton('retrieveSettings', onClickRetrieveSettings, 'retrieve
  settings');\r

  \    mLinebreak(this.dParent);\r

  \    this.addButton('saveState', onClickSaveState, 'save gamestate');\r

  \    this.addButton('retrieveState', onClickRetrieveState, 'retrieve
  gamestate');\r

  \  }\r

  }"
UniqueIdEngine: "class UniqueIdEngine {\r

  \  constructor() {\r

  \    this.next = -1;\r

  \  }\r

  \  get() {\r

  \    this.next += 1;\r

  \    return 'a###' + this.next;\r

  \    this.next += 1;\r

  \  }\r

  }"
UserManager: class UserManager { }
VidCache_dep: "class VidCache_dep {\r

  \  constructor(resetStorage = false) {\r

  \    this.live = {};\r

  \    if (resetStorage) this.resetAll();\r

  \  }\r

  \  load(key) {\r

  \    let keys = null; let sKey = key;\r

  \    if (isList(key)) { skey = key.shift(); keys = key; }\r

  \    let res = this.live[sKey];\r

  \    if (res && keys) res = lookup(res, keys);\r

  \    if (res) return res;\r

  \    let sData = localStorage.getItem(sKey);\r

  \    if (sData) {\r

  \      let data = sData[0] == '{' || sData[0] == '[' ? JSON.parse(sData) :
  isNumber(sData) ? Number(sData) : sData;\r

  \      if (keys) { this.live[sKey] = data; return lookup(data, keys); }\r

  \      return data;\r

  \    } else {\r

  \      return null;\r

  \    }\r

  \  }\r

  \  reset() { this.live = {}; }\r

  \  resetAll() { localStorage.clear(); this.reset(); }\r

  \  saveComplexObject(keys, o) {\r

  \  }\r

  \  save(key, data) {\r

  \    this.live[key] = data;\r

  \    localStorage.setItem(key, JSON.stringify(data));\r

  \  }\r

  }"
WeightedSampler: "class WeightedSampler {\r

  \  constructor(elements, weights) {\r

  \    this.total = 0;\r

  \    this.elements = Array.from(elements);\r

  \    this.cweights = weights.map(weight => this.total += weight);\r

  \  }\r

  \  get() {\r

  \    let random = Math.random() * this.total;\r

  \    return this.elements.find((element, index) => random <
  this.cweights[index]);\r

  \  }\r

  }"
Layout1: "class Layout1 extends Array {\r

  \  constructor(id, shape = 'grid', rows = 3, cols = 3, options = {}) {\r

  \    console.log(';;;;;;;;;', id, shape, rows, cols, options)\r

  \    var fields = Array(rows)\r

  \      .fill()\r

  \      .map(() => Array(cols).fill(0));\r

  \    super(...fields);\r

  \    this.options = options;\r

  \    this.msBase = null;\r

  \    this.id = id;\r

  \    this.rows = rows;\r

  \    this.cols = cols;\r

  \    this.shape = shape;\r

  \  }\r

  \  addRow(...values) {\r

  \    this.push(values);\r

  \  }\r

  \  addCol() {\r

  \    let i = 0; let val = arguments;\r

  \    for (const row of this) {\r

  \      row.push(val[i]);\r

  \    }\r

  \    for (let index = this.length; index < val.length; index++) {\r

  \      this.push([val[index]]);\r

  \    }\r

  \  }\r

  \  getPos(r, c) { return this.msBase.getPos; }\r

  \  setCols(c) { }\r

  \  setRows(r) { }\r

  \  setShape(shape) { }\r

  \  isValidIndex(r, c) { return this[r][c]; }\r

  \  render() { this.renderBase }\r

  \  renderField(r, c) { }\r

  \  setOption(key, value) { }\r

  }"
PerlenSettingsClass: "class PerlenSettingsClass extends SettingsClass {\r

  \  setOtherSettings(elem) {\r

  \    console.log('____________elem', elem);\r

  \    let val = elem.value;\r

  \    let key = elem.keyList[0];\r

  \    console.log('val', val, 'key', key, 'elem.value', elem.value)\r

  \    switch (key) {\r

  \      case 'boardStandard':\r

  \        let data = DB.standardSettings[val];\r

  \        if (nundef(data)) { console.log('NO! key', key); return; }\r

  \        for (const k in data) {\r

  \          console.log('k', k)\r

  \          this.o[k] = data[k];\r

  \        }\r

  \        this.o.boardStandard = val;\r

  \        console.log('settings sollen so geaendert werden:', data);\r

  \        this.createSettingsUi();\r

  \        break;\r

  \    }\r

  \  }\r

  \  setzeEinActiveOptions(dParent, label, optionList, friendlyList, init,
  skeys) {\r

  \    let d = mDiv(dParent);\r

  \    let val = init;\r

  \    let inp = createElementFromHTML(`<select class=\"options\"
  onchange=\"Settings.setOtherSettings(this)\"></select>`);\r

  \    for (let i = 0; i < optionList.length; i++) {\r

  \      let opt = optionList[i];\r

  \      let friendly = friendlyList[i];\r

  \      let optElem = createElementFromHTML(`<option
  value=\"${opt}\">${friendly}</option>`);\r

  \      mAppend(inp, optElem);\r

  \      if (opt == val) optElem.selected = true;\r

  \    }\r

  \    inp.value = val;\r

  \    let labelui = createElementFromHTML(`<label>${label}</label>`);\r

  \    mAppend(d, labelui);\r

  \    mAppend(labelui, inp);\r

  \    mStyleX(inp, { maleft: 12, mabottom: 4 });\r

  \    inp.keyList = skeys;\r

  \  }\r

  \  setzeEinBrowseFile(dParent, label, init, skeys) {\r

  \    let d = mDiv(dParent);\r

  \    let val = lookup(this.o, skeys);\r

  \    if (nundef(val)) val = init;\r

  \    let inp = createElementFromHTML(\r

  \      `<input type=\"text\" class=\"input\" value=\"${val}\"  />`);\r

  \    let labelui = createElementFromHTML(`<label>${label}</label>`);\r

  \    mAppend(d, labelui);\r

  \    mAppend(labelui, inp);\r

  \    var fakeInput = document.createElement(\"input\");\r

  \    fakeInput.type = \"file\";\r

  \    fakeInput.accept = \"image/*\";\r

  \    fakeInput.multiple = false;\r

  \    inp.onclick = () => { fakeInput.click(); };\r

  \    fakeInput.onchange = () => {\r

  \      let imgFile = fakeInput.files[0];\r

  \      previewBrowsedFile(dTable, imgFile);\r

  \      let val = inp.value = getFilename(imgFile.name);\r

  \      this.hasChanged = true;\r

  \      this.haveChanged.push(skeys);\r

  \      this.o[skeys[0]] = val;\r

  \      this.imgFile = imgFile;\r

  \    };\r

  \    mStyleX(inp, { maleft: 12, mabottom: 4, cursor: 'pointer' });\r

  \    mClass(inp, 'input');\r

  \    inp.keyList = skeys;\r

  \    this.addSetting(skeys[0]);\r

  \  }\r

  \  createSettingsUi() {\r

  \    let dParent = mBy('dSettingsContent');\r

  \    mCenterFlex(dParent);\r

  \    clearElement(dParent);\r

  \    this.list = [];\r

  \    let fertigSets = DB.standardSettings;\r

  \    let fsNames = Object.keys(fertigSets); fsNames.unshift('none');\r

  \    let nGroupBoardSettings = this.mInputGroup(dParent);\r

  \    this.setzeEinOptions(nGroupBoardSettings, 'base on standard', fsNames,
  fsNames, 'shapeShifters', ['boardStandard']);\r

  \    this.setzeEinOptions(nGroupBoardSettings, 'board layout', ['hex1',
  'hex', 'quad', 'circle'], ['hex1', 'hex', 'quad', 'circle'], 'hex1',
  ['boardLayout']);\r

  \    this.setzeEinBrowseFile(nGroupBoardSettings, 'board filename',
  'shapeShifters', ['boardFilename']);\r

  \    this.setzeEineZahl(nGroupBoardSettings, 'board rotation', 0,
  ['boardRotation']);\r

  \    this.setzeEineZahl(nGroupBoardSettings, 'top margin', 10,
  ['boardMarginTop']);\r

  \    this.setzeEineZahl(nGroupBoardSettings, 'left margin', 20,
  ['boardMarginLeft']);\r

  \    this.setzeEinenString(nGroupBoardSettings, 'field color',
  'transparent', ['fieldColor']);\r

  \    this.setzeEineZahl(nGroupBoardSettings, 'field width', 100,
  ['dxCenter']);\r

  \    this.setzeEineZahl(nGroupBoardSettings, 'field height', 120,
  ['dyCenter']);\r

  \    this.setzeEineZahl(nGroupBoardSettings, 'horizontal gap', 10,
  ['wGap']);\r

  \    this.setzeEineZahl(nGroupBoardSettings, 'vertical gap', 20,
  ['hGap']);\r

  \    this.setzeEineZahl(nGroupBoardSettings, 'rows', 7, ['rows']);\r

  \    this.setzeEineZahl(nGroupBoardSettings, 'columns', 6, ['cols']);\r

  \    this.setzeEineZahl(nGroupBoardSettings, 'max width', 800,
  ['wFieldArea']);\r

  \    this.setzeEineZahl(nGroupBoardSettings, 'max height', 800,
  ['hFieldArea']);\r

  \    let nGroupPerlenSettings = this.mInputGroup(dParent);\r

  \    this.setzeEinOptions(nGroupPerlenSettings, 'pool selection', ['random',
  'mixed', 'player'], ['random', 'mixed', 'never'], 'random',
  ['poolSelection']);\r

  \    this.setzeEineZahl(nGroupPerlenSettings, 'random pool size', 25,
  ['numPool']);\r

  \  }\r

  }"
UIGraph: "class UIGraph extends AGraph {\r

  \  init(dParent, styles = {}) {\r

  \    let defOptions = {\r

  \      maxZoom: 1,\r

  \      minZoom: .001,\r

  \      motionBlur: false,\r

  \      wheelSensitivity: 0.05,\r

  \      zoomingEnabled: true,\r

  \      userZoomingEnabled: true,\r

  \      panningEnabled: true,\r

  \      userPanningEnabled: true,\r

  \      boxSelectionEnabled: false,\r

  \      elements: [],\r

  \    };\r

  \    this.id = getUID();\r

  \    let dOuter = mDiv(dParent, styles.outer, this.id);\r

  \    let gStyles = valf(styles.inner, { w: 640, h: 420 });\r

  \    let dContainer = mDiv(dOuter, { position: 'relative', w: gStyles.w, h:
  gStyles.h, align: 'left' });\r

  \    let styleDict = {\r

  \      node: { 'label': 'data(label)', width: 25, height: 25,
  'background-color': 'red', color: \"#fff\", \"text-valign\": \"center\",
  \"text-halign\": \"center\" },\r

  \      edge: { width: 2, 'line-color': 'silver', 'curve-style': 'haystack',
  },\r

  \      'node.high': { 'background-color': 'yellow' },\r

  \      'node.trans': { opacity: '0.5' },\r

  \    }\r

  \    for (const ks of ['node', 'edge', 'node.high', 'node.trans']) {\r

  \      if (isdef(styles[ks])) {\r

  \        let mStyles = styles[ks];\r

  \        let cyStyles = translateStylesToCy(mStyles, ks);\r

  \        copyKeys(cyStyles, styleDict[ks]);\r

  \      }\r

  \    }\r

  \    let cyStyle = [];\r

  \    for (const k in styleDict) { cyStyle.push({ selector: k, style:
  styleDict[k] }); }\r

  \    let options = { container: dContainer, style: cyStyle };\r

  \    copyKeys(options, defOptions);\r

  \    this.cy = cytoscape(defOptions);\r

  \    iAdd(this, { div: dOuter, dCy: dContainer });\r

  \  }\r

  \  //#region layouts\r

  \  hex(rows, cols, wCell, hCell) {\r

  \    let centers = this.hexPositions = getCentersFromRowsCols('hex', rows,
  cols, wCell, hCell)[0];\r

  \    this.storePositions('hex', centers);\r

  \    this.storePositions('preset', centers);\r

  \    this.retrievePositions('hex');\r

  \    this.cy.layout({ name: 'preset' }).run();\r

  \    this.center();\r

  \  }\r

  \  hex1(rows, cols, wCell, hCell) {\r

  \    let centers = this.hexPositions = getCentersFromRowsCols('hex1', rows,
  cols, wCell, hCell)[0];\r

  \    this.storePositions('hex1', centers);\r

  \    this.storePositions('preset', centers);\r

  \    let nodes = this.getNodes();\r

  \    for (let i = 0; i < nodes.length; i++) {\r

  \      let node = nodes[i];\r

  \      let center = centers[i];\r

  \      node.data('center', center);\r

  \    }\r

  \    this.retrievePositions('hex1');\r

  \    this.cy.layout({ name: 'preset' }).run();\r

  \    this.center();\r

  \  }\r

  \  breadthfirst() { this.cy.layout({ name: 'breadthfirst', animate: true
  }).run(); }\r

  \  circle() { this.cy.layout({ name: 'circle', animate: 'end' }).run(); }\r

  \  concentric() { this.cy.layout({ name: 'concentric', animate: true
  }).run(); }\r

  \  comcola() {\r

  \    let defaults = {\r

  \      name: 'cola',\r

  \      animate: true,\r

  \      refresh: 1,\r

  \      maxSimulationTime: 4000,\r

  \      ungrabifyWhileSimulating: false,\r

  \      fit: true,\r

  \      padding: 30,\r

  \      boundingBox: undefined,\r

  \      nodeDimensionsIncludeLabels: false,\r

  \      ready: function () { },\r

  \      stop: function () { },\r

  \      randomize: false,\r

  \      avoidOverlap: true,\r

  \      handleDisconnected: true,\r

  \      convergenceThreshold: 0.01,\r

  \      nodeSpacing: function (node) { return 10; },\r

  \      flow: undefined,\r

  \      alignment: undefined,\r

  \      gapInequalities: undefined,\r

  \      edgeLength: undefined,\r

  \      edgeSymDiffLength: undefined,\r

  \      edgeJaccardLength: undefined,\r

  \      unconstrIter: undefined,\r

  \      userConstIter: undefined,\r

  \      allConstIter: undefined,\r

  \      infinite: false\r

  \    };\r

  \    let options = {\r

  \      name: 'cola',\r

  \      convergenceThreshold: 100,\r

  \      boundingBox: { x1: 20, y1: 20, w: 200, h: 200 },\r

  \    };\r

  \    copyKeys(options, defaults);\r

  \    console.log(defaults.boundingBox)\r

  \    this.cy.layout(defaults).run();\r

  \  }\r

  \  cola() { this.cy.layout({ name: 'cola' }).run(); }\r

  \  cose() { this.cy.layout({ name: 'cose', animate: 'end' }).run(); }\r

  \  euler() { this.cy.layout({ name: 'euler', fit: true, padding: 25,
  animate: 'end' }).run(); }\r

  \  fcose() {\r

  \    var defaultOptions = {\r

  \      quality: \"default\",\r

  \      randomize: true,\r

  \      animate: true,\r

  \      animationDuration: 500,\r

  \      animationEasing: undefined,\r

  \      fit: true,\r

  \      padding: 30,\r

  \      nodeDimensionsIncludeLabels: false,\r

  \      uniformNodeDimensions: false,\r

  \      packComponents: true,\r

  \      step: \"all\",\r

  \      samplingType: true,\r

  \      sampleSize: 25,\r

  \      nodeSeparation: 75,\r

  \      piTol: 0.0000001,\r

  \      nodeRepulsion: node => 4500,\r

  \      idealEdgeLength: edge => 50,\r

  \      edgeElasticity: edge => 0.45,\r

  \      nestingFactor: 0.1,\r

  \      numIter: 2500,\r

  \      tile: true,\r

  \      tilingPaddingVertical: 10,\r

  \      tilingPaddingHorizontal: 10,\r

  \      gravity: 0.25,\r

  \      gravityRangeCompound: 1.5,\r

  \      gravityCompound: 1.0,\r

  \      gravityRange: 3.8,\r

  \      initialEnergyOnIncremental: 0.3,\r

  \      fixedNodeConstraint: undefined,\r

  \      alignmentConstraint: undefined,\r

  \      relativePlacementConstraint: undefined,\r

  \      ready: () => { },\r

  \      stop: () => { },\r

  \      name: 'fcose',\r

  \    };\r

  \    this.cy.layout(defaultOptions).run();\r

  \  }\r

  \  gridLayout() { this.cy.layout({ name: 'grid', animate: true }).run(); }\r

  \  presetLayout_dep() {\r

  \    let hasCenterProp = this.setPositionData();\r

  \    if (!hasCenterProp) {\r

  \      console.log('no positions are preset: store first!');\r

  \    } else {\r

  \      let options = {\r

  \        name: 'preset',\r

  \        positions: undefined,\r

  \        zoom: undefined,\r

  \        pan: undefined,\r

  \        fit: true,\r

  \        padding: 30,\r

  \        animate: true,\r

  \        animationDuration: 500,\r

  \        animationEasing: undefined,\r

  \        animateFilter: function (node, i) { return true; },\r

  \        ready: undefined,\r

  \        stop: undefined,\r

  \        transform: function (node, position) { return position; }\r

  \      };\r

  \      this.cy.layout(options);\r

  \      this.reset();\r

  \    }\r

  \  }\r

  \  presetLayout() {\r

  \    this.retrievePositions('prest');\r

  \    this.cy.layout({ name: 'preset' }).run();\r

  \    this.center();\r

  \  }\r

  \  randomLayout() { this.cy.layout({ name: 'random', animate: 'true'
  }).run(); }\r

  \  klay() {\r

  \    let klayDefaults = {\r

  \      // Following descriptions taken from
  http://layout.rtsys.informatik.uni-kiel.de:9444/Providedlayout.html?algorithm\
  =de.cau.cs.kieler.klay.layered\r

  \      addUnnecessaryBendpoints: false,\r

  \      aspectRatio: 1.6,\r

  \      borderSpacing: 20,\r

  \      compactComponents: false,\r

  \      crossingMinimization: 'LAYER_SWEEP',\r

  \      cycleBreaking: 'GREEDY',\r

  \      direction: 'UNDEFINED',\r

  \      edgeRouting: 'ORTHOGONAL',\r

  \      edgeSpacingFactor: 0.5,\r

  \      feedbackEdges: false,\r

  \      fixedAlignment: 'NONE',\r

  \      inLayerSpacingFactor: 1.0,\r

  \      layoutHierarchy: false,\r

  \      linearSegmentsDeflectionDampening: 0.3,\r

  \      mergeEdges: false,\r

  \      mergeHierarchyCrossingEdges: true,\r

  \      nodeLayering: 'NETWORK_SIMPLEX',\r

  \      nodePlacement: 'BRANDES_KOEPF',\r

  \      randomizationSeed: 1,\r

  \      routeSelfLoopInside: false,\r

  \      separateConnectedComponents: true,\r

  \      spacing: 20,\r

  \      thoroughness: 7\r

  \    };\r

  \    var options = {\r

  \      nodeDimensionsIncludeLabels: false,\r

  \      fit: true,\r

  \      padding: 20,\r

  \      animate: true,\r

  \      animateFilter: function (node, i) { return true; },\r

  \      animationDuration: 500,\r

  \      animationEasing: undefined,\r

  \      transform: function (node, pos) { return pos; },\r

  \      ready: this.reset.bind(this),\r

  \      stop: undefined,\r

  \      klay: {\r

  \        addUnnecessaryBendpoints: false,\r

  \        aspectRatio: 1.6,\r

  \        borderSpacing: 20,\r

  \        compactComponents: false,\r

  \        crossingMinimization: 'LAYER_SWEEP',\r

  \        cycleBreaking: 'GREEDY',\r

  \        direction: 'UNDEFINED',\r

  \        edgeRouting: 'ORTHOGONAL',\r

  \        edgeSpacingFactor: 0.5,\r

  \        feedbackEdges: false,\r

  \        fixedAlignment: 'NONE',\r

  \        inLayerSpacingFactor: 1.0,\r

  \        layoutHierarchy: false,\r

  \        linearSegmentsDeflectionDampening: 0.3,\r

  \        mergeEdges: false,\r

  \        mergeHierarchyCrossingEdges: true,\r

  \        nodeLayering: 'NETWORK_SIMPLEX',\r

  \        nodePlacement: 'INTERACTIVE',\r

  \        randomizationSeed: 1,\r

  \        routeSelfLoopInside: false,\r

  \        separateConnectedComponents: true,\r

  \        spacing: 20,\r

  \        thoroughness: 3\r

  \      },\r

  \      name: 'klay',\r

  \      priority: function (edge) { return null; },\r

  \    };\r

  \    this.cy.layout(options).run();\r

  \  }\r

  \  retrievePositions(key) {\r

  \    if (nundef(key)) key = 'prest';\r

  \    let di = this.posDict[key];\r

  \    for (const n of this.getNodes()) {\r

  \      let id = n.id();\r

  \      let pos = di[id];\r

  \      if (isdef(pos)) this.setPosition(id, pos.x, pos.y);\r

  \    }\r

  \  }\r

  \  storePositions(key, poslist = []) {\r

  \    if (nundef(key)) key = 'prest';\r

  \    this.posDict[key] = {};\r

  \    let i = 0;\r

  \    for (const n of this.getNodes()) {\r

  \      let id = n.id();\r

  \      let pos = valf(poslist[i], this.getPosition(id));\r

  \      i += 1;\r

  \      this.posDict[key][id] = pos;\r

  \    }\r

  \  }\r

  \  storeSizes(key, poslist = []) {\r

  \    if (nundef(key)) key = 'size';\r

  \    this.posDict[key] = {};\r

  \    let i = 0;\r

  \    for (const n of this.getNodes()) {\r

  \      let id = n.id();\r

  \      let pos = valf(poslist[i], this.getSize(id));\r

  \      i += 1;\r

  \      this.posDict[key][id] = pos;\r

  \    }\r

  \  }\r

  \  //#endregion\r

  \  //#region zoom pan fit center\r

  \  fit() { this.cy.fit(); }\r

  \  center() { this.cy.center(); }\r

  \  reset() { this.pan0(); this.zoom1(); this.center(); this.fit(); }\r

  \  pan0() { this.cy.pan({ x: 0, y: 0 }); }\r

  \  zoom1() { this.cy.zoom(1); }\r

  \  isPan() { return this.cy.panningEnabled(); }\r

  \  isZoom() { return this.cy.zoomingEnabled(); }\r

  \  enablePanZoom() { this.pan(true); this.zoom(true); }\r

  \  pan(isOn, reset = true) {\r

  \    this.cy.panningEnabled(isOn);\r

  \    this.cy.userPanningEnabled(isOn);\r

  \    if (!isOn && reset) { this.pan0(); this.center(); }\r

  \  }\r

  \  zoom(isOn, minZoom = .25, maxZoom = 1, reset = true) {\r

  \    this.cy.zoomingEnabled(isOn);\r

  \    this.cy.userZoomingEnabled(isOn);\r

  \    if (!isOn && reset) { this.zoom1(); this.center(); }\r

  \    else if (isOn) { this.cy.minZoom(minZoom); this.cy.maxZoom(maxZoom);
  }\r

  \  }\r

  \  //#endregion\r

  \  setSizeToContent() {\r

  \    this.cy.zoomingEnabled(false);\r

  \    this.updateBounds();\r

  \  }\r

  \  updateBounds() {\r

  \    var bounds = this.cy.elements().boundingBox();\r

  \    let dContainer = this.live.dCy;\r

  \    dContainer.css('height', bounds.h + 100);\r

  \    dContainer.css('width', bounds.w + 100);\r

  \    this.cy.center();\r

  \    this.cy.resize();\r

  \    dContainer.cytoscapeEdgehandles('resize');\r

  \  }\r

  \  //#region ui functions\r

  \  enableDD() { this.enableDragging(); }\r

  \  disableDD() { this.disableDragging(); }\r

  \  enableDragging() { this.cy.nodes().grabify(); }\r

  \  disableDragging() { this.cy.nodes().ungrabify(); }\r

  \  showGraph() { }\r

  \  showControls(dWhere, lWhich) {\r

  \    if (!this.hasControls) this.addLayoutControls(dWhere, lWhich);\r

  \    if (nundef(dWhere)) dWhere = iDiv(this);\r

  \  }\r

  \  showExtent() { let bb = this.cy.elements().bb(); console.log('graph
  size:', bb.w, bb.h); }\r

  \  showSize() { this.showExtent(); }\r

  \  hideGraph() { }\r

  \  hideControls() { }\r

  \  mount() { }\r

  \  unmount() { }\r

  \  closeLayoutControls() { if (isdef(this.sb)) hide(this.sb); }\r

  \  addLayoutControls(dParent, buttonlist) {\r

  \    if (nundef(dParent)) dParent = iDiv(this);\r

  \    let buttons = {\r

  \      BFS: mButton('BFS', () => this.breadthfirst(), dParent, {},
  ['tbb']),\r

  \      circle: mButton('circle', () => this.circle(), dParent, {},
  ['tbb']),\r

  \      CC: mButton('CC', () => this.concentric(), dParent, {}, ['tbb']),\r

  \      cola: mButton('cola', () => this.comcola(), dParent, {}, ['tbb']),\r

  \      cose: mButton('cose', () => this.cose(), dParent, {}, ['tbb']),\r

  \      euler: mButton('euler', () => this.euler(), dParent, {}, ['tbb']),\r

  \      fcose: mButton('fcose', () => this.fcose(), dParent, {}, ['tbb']),\r

  \      grid: mButton('grid', () => this.gridLayout(), dParent, {},
  ['tbb']),\r

  \      klay: mButton('klay', () => this.klay(), dParent, {}, ['tbb']),\r

  \      prest: mButton('prest', () => this.presetLayout(), dParent, {},
  ['tbb']),\r

  \      rand: mButton('rand', () => this.randomLayout(), dParent, {},
  ['tbb']),\r

  \      center: mButton('center', () => this.center(), dParent, {},
  ['tbb']),\r

  \      fit: mButton('fit', () => this.fit(), dParent, {}, ['tbb']),\r

  \      reset: mButton('reset', () => this.reset(), dParent, {}, ['tbb']),\r

  \      show: mButton('show', () => this.showGraph(), dParent, {},
  ['tbb']),\r

  \      hide: mButton('hide', () => this.hideGraph(), dParent, {},
  ['tbb']),\r

  \      store: mButton('store', () => this.storeCurrentPositions(), dParent,
  {}, ['tbb']),\r

  \    };\r

  \    for (const b in buttons) {\r

  \      if (isdef(buttonlist) && !buttonlist.includes(b)) hide(buttons[b]);\r

  \    }\r

  \    return buttons;\r

  \  }\r

  \  addVisual(dParent, styles = {}) {\r

  \    if (this.hasVisual) return;\r

  \    this.hasVisual = true;\r

  \    this.id = nundef(dParent.id) ? getUID() : dParent.id;\r

  \    let styleDict = {\r

  \      node: { 'width': 25, 'height': 25, 'background-color': 'red',
  \"color\": \"#fff\", 'label': 'data(id)', \"text-valign\": \"center\",
  \"text-halign\": \"center\", },\r

  \      edge: { 'width': 2, 'line-color': 'silver', 'curve-style':
  'haystack', },\r

  \      'node.highlight': { 'background-color': 'yellow' },\r

  \      'node.trans': { 'opacity': '0.5' },\r

  \    }\r

  \    for (const ks of ['node', 'edge', 'node.highlight', 'node.trans']) {\r

  \      if (isdef(styles[ks])) {\r

  \        for (const k in styles[ks]) {\r

  \          let [prop, val] = translateToCssStyle(k, styles[ks][k], false);\r

  \          styleDict[ks][prop] = val;\r

  \        }\r

  \      }\r

  \    }\r

  \    let cyStyle = [];\r

  \    for (const k in styleDict) { cyStyle.push({ selector: k, style:
  styleDict[k] }); }\r

  \    let size = getSize(dParent);\r

  \    let d1 = mDiv(dParent, { position: 'relative', bg: 'green', w: size.w,
  left: 0, top: 0, h: size.h, align: 'left' });\r

  \    this.cy.mount(d1);\r

  \    this.cy.style(cyStyle);\r

  \    this.enablePanZoom();\r

  \    iAdd(this, { div: dParent, dCy: d1 });\r

  \  }\r

  \  //#endregion\r

  \  //#region events\r

  \  nodeEvent(evname, handler) { this.cy.on(evname, 'node', ev =>
  handler(ev.target)); }\r

  \  mStyle(elid, styles, group = 'node') {\r

  \    if (isString(elid)) elid = this.cy.getElementById(elid);\r

  \    let di = translateStylesToCy(styles, group);\r

  \    for (const k in di) {\r

  \      elid.style(k, di[k]);\r

  \    }\r

  \  }\r

  \  setLabel(id, label, styles) {\r

  \    let ele = this.cy.getElementById(id);\r

  \    ele.data('label', label);\r

  \    this.mStyle(id, styles, isdef(this.getNode(id)) ? 'node' : 'edge');\r

  \  }\r

  \  setStyle(elid, prop, val) {\r

  \    if (isString(elid)) elid = this.cy.getElementById(elid);\r

  \    elid.style(prop, val);\r

  \  }\r

  \  setClass(elid, className) {\r

  \    if (isString(elid)) elid = this.cy.getElementById(elid);\r

  \    elid.class(className);\r

  \  }\r

  \  //#endregion\r

  }"
ControllerSolitaireMinimal: "class ControllerSolitaireMinimal extends
  ControllerSolitaire {\r

  \  clear() { if (isdef(this.timer)) this.timer.clear(); }\r

  \  startLevel() {\r

  \    Settings.updateGameValues(this.player, this.g);\r

  \    this.g.start_Level();\r

  \    this.startRound();\r

  \  }\r

  \  prompt() {\r

  \    QContextCounter += 1;\r

  \    showStats(false);\r

  \    this.g.trialNumber = 0;\r

  \    this.g.prompt();\r

  \  }\r

  \  activateUi() {\r

  \    Selected = null;\r

  \    uiActivated = true;\r

  \    if (isdef(this.timer)) this.timer.start();\r

  \    this.g.activate();\r

  \  }\r

  \  gotoNext(nextLevel) {\r

  \    onclick = null;\r

  \    removeMarkers();\r

  \    clearTimeouts();\r

  \    if (isdef(this.timer)) this.timer.clear();\r

  \    if (Score.levelChange && nextLevel <= this.g.maxLevel) {\r

  \      this.g.level = nextLevel;\r

  \      setBadgeLevel(this.g.level);\r

  \      this.startLevel();\r

  \    } else {\r

  \      this.startRound();\r

  \    }\r

  \  }\r

  }"
MazeGraph: "class MazeGraph extends AGraph {\r

  \  constructor(dParent, rows, cols, sz, gap = 4) {\r

  \    super();\r

  \    [this.cols, this.rows, this.sz, this.gap] = [cols, rows, sz, gap];\r

  \    let m = this.m = this.createMaze(cols, rows, sz, gap);\r

  \    let dMaze = this.dMaze = this.createDiv(dParent, cols, rows, sz,
  gap);\r

  \    let szMaze = getSize(dMaze);\r

  \    let dGraph = this.dGraph = mDiv(dParent, { align: 'left', w: szMaze.w,
  h: szMaze.h, bg: 'pink', maleft: 20 }, 'd_graph');\r

  \    this.mazeId = dGraph.id = getUID();\r

  \    let sb = this.sb = mDiv(dParent, { w: 40 });
  mCenterCenterFlex(this.sb);\r

  \    hide(dGraph); hide(sb);\r

  \    this.items = this.createCellItems();\r

  \  }\r

  \  clear() { super.clear(); }\r

  \  getTopLeftCell() { return this.getCell(0, 0); }\r

  \  getTopRightCell() { return this.getCell(0, this.cols - 1); }\r

  \  getBottomLeftCell() { return this.getCell(this.rows - 1, 0); }\r

  \  getBottomRightCell() { return this.getCell(this.rows - 1, this.cols - 1);
  }\r

  \  getCell(row, col) { return this.matrix[row][col]; }\r

  \  getCommonId(row, col) { return '' + row + \"-\" + col; }\r

  \  getCommonIdTable(row, col) { return 'td_' + this.getCommonId(row, col);
  }\r

  \  getRCI(edgeId) {\r

  \    let [r1, c1, r2, c2] = allNumbers(edgeId).map(x => Math.abs(x));\r

  \    let i1, i2;\r

  \    i1 = r1 < r2 ? 2 : r1 > r2 ? 0 : c1 < c2 ? 1 : 3;\r

  \    i2 = i1 == 0 ? 2 : i1 == 1 ? 3 : i1 == 2 ? 0 : 1;\r

  \    return [r1, c1, i1, r2, c2, i2];\r

  \  }\r

  \  getRelativeDirections(item1, item2) {\r

  \    let [r1, c1, r2, c2] = [item1.row, item1.col, item2.row, item2.col];\r

  \    let i1, i2;\r

  \    i1 = r1 < r2 ? 2 : r1 > r2 ? 0 : c1 < c2 ? 1 : 3;\r

  \    i2 = i1 == 0 ? 2 : i1 == 1 ? 3 : i1 == 2 ? 0 : 1;\r

  \    return [i1, i2];\r

  \  }\r

  \  createCellItems() {\r

  \    let items = [];\r

  \    this.matrix = [];\r

  \    for (let r = 0; r < this.rows; r++) {\r

  \      this.matrix[r] = [];\r

  \      for (let c = 0; c < this.cols; c++) {\r

  \        let id = this.getCommonId(r, c);\r

  \        let item = { id: id, nid: id, nodeId: id, cellId:
  this.getCommonIdTable(r, c), row: r, col: c, sz: this.sz, marr: this.m[r, c]
  };\r

  \        delete Items[id];\r

  \        iAdd(item, { div: mBy(this.getCommonIdTable(r, c)) });\r

  \        items.push(item);\r

  \        this.matrix[r][c] = item;\r

  \      }\r

  \    }\r

  \    return items;\r

  \  }\r

  \  createDiv(dParent, cols, rows, sz, gap = 1) {\r

  \    let [wCell, hCell] = [sz, sz];\r

  \    let [wTotal, hTotal] = [cols * (wCell + gap) + gap, rows * (hCell +
  gap) + gap];\r

  \    let dGridOuter = this.dMaze = mDiv(dParent, { wmin: wTotal, hmin:
  hTotal, position: 'relative' });\r

  \    let m = this.m;\r

  \    let [x, y] = [0, 0];\r

  \    let sBorder = `${gap}px solid black`;\r

  \    let noBorder = `${gap}px solid transparent`;\r

  \    this.dCells = [];\r

  \    for (var r = 0; r < m.length; r++) {\r

  \      x = 0;\r

  \      this.dCells[r] = [];\r

  \      for (var c = 0; c < m[r].length; c++) {\r

  \        let info = m[r][c];\r

  \        let dCell = mDiv(dGridOuter, { w: wCell, h: hCell, position:
  'absolute', top: y, left: x, bg: 'gray' });\r

  \        dCell.id = this.getCommonIdTable(r, c);\r

  \        dCell.style.borderTop = info[0] == 0 ? sBorder : noBorder;\r

  \        dCell.style.borderRight = info[1] == 0 ? sBorder : noBorder;\r

  \        dCell.style.borderBottom = info[2] == 0 ? sBorder : noBorder;\r

  \        dCell.style.borderLeft = info[3] == 0 ? sBorder : noBorder;\r

  \        x += wCell + gap;\r

  \        this.dCells[r].push(dCell);\r

  \      }\r

  \      y += hCell + gap;\r

  \    }\r

  \    return dGridOuter;\r

  \  }\r

  \  createDiv_orig(dParent, cols, rows, sz, gap) {\r

  \    let [wCell, hCell] = [sz, sz];\r

  \    let [wTotal, hTotal] = [cols * (wCell + gap), rows * (hCell + gap)];\r

  \    let dGridOuter = this.dMaze = mDiv(dParent, { wmin: wTotal, hmin:
  hTotal });\r

  \    let m = this.m;\r

  \    let id = 'tMaze';\r

  \    setCSSVariable('--wCell', `${wCell}px`);\r

  \    setCSSVariable('--hCell', `${hCell}px`);\r

  \    let tMaze = createElementFromHtml(`\r

  \      <table id=\"${id}\">\r

  \      <tbody></tbody>\r

  \      </table>\r

  \    `);\r

  \    mAppend(dGridOuter, tMaze);\r

  \    let sBorder = `${1}px solid black`;\r

  \    for (var i = 0; i < m.length; i++) {\r

  \      $('#tMaze > tbody').append(\"<tr>\");\r

  \      for (var j = 0; j < m[i].length; j++) {\r

  \        var selector = this.getCommonIdTable(i, j);\r

  \        $('#tMaze > tbody').append(\"<td id='\" + selector +
  \"'>&nbsp;</td>\");\r

  \        if (m[i][j][0] == 0) { $('#' + selector).css('border-top',
  sBorder); }\r

  \        if (m[i][j][1] == 0) { $('#' + selector).css('border-right',
  sBorder); }\r

  \        if (m[i][j][2] == 0) { $('#' + selector).css('border-bottom',
  sBorder); }\r

  \        if (m[i][j][3] == 0) { $('#' + selector).css('border-left',
  sBorder); }\r

  \      }\r

  \      $('tMmaze > tbody').append(\"</tr>\");\r

  \    }\r

  \    return dGridOuter;\r

  \  }\r

  \  createMaze(cols, rows, sz, gap) {\r

  \    var dxy = sz + 2 * gap;\r

  \    var offs = dxy / 2 + gap;\r

  \    var totalCells = cols * rows;\r

  \    var cells = new Array();\r

  \    var unvis = new Array();\r

  \    for (var i = 0; i < rows; i++) {\r

  \      cells[i] = new Array();\r

  \      unvis[i] = new Array();\r

  \      for (var j = 0; j < cols; j++) {\r

  \        cells[i][j] = [0, 0, 0, 0];\r

  \        let pos = { x: offs + dxy * j, y: offs + dxy * i };\r

  \        this.addNode({ id: this.getCommonId(i, j), row: i, col: j, center:
  pos }, pos);\r

  \        unvis[i][j] = true;\r

  \      }\r

  \    }\r

  \    var currentCell = [Math.floor(Math.random() * rows),
  Math.floor(Math.random() * cols)];\r

  \    var path = [currentCell];\r

  \    unvis[currentCell[0]][currentCell[1]] = false;\r

  \    var visited = 1;\r

  \    while (visited < totalCells) {\r

  \      var pot = [[currentCell[0] - 1, currentCell[1], 0, 2],\r

  \      [currentCell[0], currentCell[1] + 1, 1, 3],\r

  \      [currentCell[0] + 1, currentCell[1], 2, 0],\r

  \      [currentCell[0], currentCell[1] - 1, 3, 1]];\r

  \      var neighbors = new Array();\r

  \      for (var l = 0; l < 4; l++) {\r

  \        if (pot[l][0] > -1 && pot[l][0] < rows && pot[l][1] > -1 &&
  pot[l][1] < cols && unvis[pot[l][0]][pot[l][1]]) { neighbors.push(pot[l]); }\r

  \      }\r

  \      if (neighbors.length) {\r

  \        let next = neighbors[Math.floor(Math.random() *
  neighbors.length)];\r

  \        cells[currentCell[0]][currentCell[1]][next[2]] = 1;\r

  \        cells[next[0]][next[1]][next[3]] = 1;\r

  \        let row = currentCell[0];\r

  \        let col = currentCell[1];\r

  \        let row2 = next[0];\r

  \        let col2 = next[1];\r

  \        this.addEdge(this.getCommonId(row, col), this.getCommonId(row2,
  col2), {});\r

  \        unvis[next[0]][next[1]] = false;\r

  \        visited++;\r

  \        currentCell = [next[0], next[1]];\r

  \        path.push(currentCell);\r

  \      }\r

  \      else {\r

  \        currentCell = path.pop();\r

  \      }\r

  \    }\r

  \    return cells;\r

  \  }\r

  \  setItemBorder(item, dir) {\r

  \    let prop = getBorderPropertyForDirection(dir);\r

  \    iDiv(item).style[prop] = `${this.gap}px solid black`;\r

  \  }\r

  \  setItemColor(item, color) { mStyle(iDiv(item), { bg: color }); }\r

  \  setItemContent(item, text) { iDiv(item).innerHTML = text; }\r

  \  removeItemContent(item) { iDiv(item).innerHTML = ''; }\r

  \  disconnectCells(nid1, nid2) {\r

  \    this.removeEdge(this.getCommonEdgeId(nid1, nid2));\r

  \    let [item1, item2] = [Items[nid1], Items[nid2]];\r

  \    let [dir1, dir2] = this.getRelativeDirections(item1, item2);\r

  \    this.setItemBorder(item1, dir1);\r

  \    this.setItemBorder(item2, dir2);\r

  \  }\r

  \  cutPath(path, min, max) {\r

  \    let edges = path.edges();\r

  \    let len = edges.length;\r

  \    let [imin, imax] = [Math.floor(len * min), Math.floor(len * max)];\r

  \    let i = randomNumber(imin, imax);\r

  \    let edge = edges[i];\r

  \    let [nid1, nid2] = edge.connectedNodes().map(x => x.id());\r

  \    this.disconnectCells(nid1, nid2);\r

  \  }\r

  \  breadCrumbs(path, color = 'sienna', sz = 10) {\r

  \    for (const cell of path.nodes().map(x => Items[x.id()])) {\r

  \      mCellContent(iDiv(cell), { w: sz, h: sz, bg: color, fg: 'white',
  rounding: '50%' });\r

  \    }\r

  \  }\r

  \  colorComponents() {\r

  \    let comps = this.getComponents();\r

  \    let wheel = getColorWheel('red', comps.length);\r

  \    let i = 0;\r

  \    for (const comp of comps) {\r

  \      this.breadCrumbs(comp, wheel[i]); i += 1;\r

  \    }\r

  \  }\r

  \  showGraph() {\r

  \    this.dGraph.style.opacity = 1;\r

  \    if (this.hasVisual) { show(this.dGraph); return; }\r

  \    this.addVisual(this.dGraph);\r

  \    this.storeCurrentPositions();\r

  \    this.addLayoutControls(this.sb, ['show', 'hide', 'prest', 'grid',
  'klay', 'rand', 'euler', 'reset', 'store']);\r

  \  }\r

  \  hideGraph() {\r

  \    if (isdef(this.dGraph) && this.hasVisual) {\r

  \      this.dGraph.style.display = 'none';\r

  \    }\r

  \  }\r

  }"
Deck1: "class Deck1 extends Array {\r

  \  initTest(n, shuffled = true) { range(0, n).map(x =>
  this.push(Card52.getItem(x))); if (shuffled) this.shuffle(); }\r

  \  initEmpty() { }\r

  \  init52(shuffled = true, jokers = 0) {\r

  \    range(0, 51 + jokers).map(x => this.push(Card52.getItem(x)));\r

  \    if (shuffled) this.shuffle();\r

  \  }\r

  \  add(otherDeck) { while (otherDeck.length > 0) {
  this.unshift(otherDeck.pop()); } return this; }\r

  \  count() { return this.length; }\r

  \  static transferTopFromToBottom(d1, d2) { let c = d1.pop();
  d2.putUnderPile(c); return c; }\r

  \  deal(n) { return this.splice(0, n); }\r

  \  getIndices() { return this.map(x => x.i); }\r

  \  log() { console.log(this); }\r

  \  putUnderPile(x) { this.push(x); }\r

  \  putOnTop(x) { this.unshift(x); }\r

  \  showDeck(dParent, splay, ovPercent = 0, faceUp = undefined, contStyles =
  {}) {\r

  \    if (isdef(faceUp)) { if (faceUp == true) this.turnFaceUp(); else
  this.turnFaceDown(); }\r

  \    splayout(this, dParent, contStyles, ovPercent, splay);\r

  \  }\r

  \  shuffle() { shuffle(this); }\r

  \  topCard() { return this[this.length - 1]; }\r

  \  turnFaceUp() {\r

  \    if (isEmpty(this) || this[0].faceUp) return;\r

  \    this.map(x => Card52.turnFaceUp(x));\r

  \  }\r

  \  turnFaceDown() {\r

  \    if (isEmpty(this) || !this[0].faceUp) return;\r

  \    this.map(x => Card52.turnFaceDown(x));\r

  \  }\r

  }"
SimpleGraph: "class SimpleGraph extends AbsGraph1 {\r

  \  constructor(dParent, styles = {}) {\r

  \    super();\r

  \    upgradeToSimpleGraph(this, dParent, styles);\r

  \  }\r

  }"
GAbacus: "class GAbacus extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  startGame() { this.successFunc = successThumbsUp; this.failFunc =
  failThumbsDown; this.correctionFunc = this.showCorrectSequence.bind(this); }\r

  \  showCorrectSequence() { let t = correctBlanks(); if (this.level <= 1 &&
  (this.step <= 3 || this.op != 'mult')) showSayHint(3); return t + 1000; }\r

  \  start_Level() { if (!isList(this.steps)) this.steps = [this.steps];
  this.numPics = 2; }\r

  \  prompt() {\r

  \    mLinebreak(dTable, 2);\r

  \    showHiddenThumbsUpDown(110);\r

  \    mLinebreak(dTable);\r

  \    this.seq = makeExpSequence();\r

  \    let panel = mDiv(dTable, { bg: '#00000080', padding: 20, rounding: 10
  });\r

  \    [this.words, this.letters] = showEquation(this.seq, panel);\r

  \    setNumberSequenceGoal();\r

  \    mLinebreak(dTable, 30);\r

  \    let wr = (this.language == 'E' ? 'calculate' : \"rechne\");\r

  \    let spOp = this.oop.sp; if (this.language == 'D') spOp = DD[spOp];\r

  \    let sp = this.operand + ' ' + spOp + ' ' + this.step + ' ?';\r

  \    show_instruction(wr, dTitle, sp);\r

  \    if (this.level <= 1 && this.showHint && (this.step <= 3 || this.op !=
  'mult'))\r

  \      hintEngineStart(getOperationHintString, [0, 1], 5000 + this.level *
  1000);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    if (this.level <= 1 && this.showHint && (this.step <= 3 || this.op !=
  'mult')) hintEngineStart(getOperationHintString, [0, 1], 5000 + this.level *
  1000);\r

  \    TOMain = setTimeout(() => getWrongChars().map(x => unfillChar(x)),
  500);\r

  \    return 600;\r

  \  }\r

  \  activate() { addKeyup('G', this.interact.bind(this)); }\r

  \  interact(ev) {\r

  \    if (!isNumber(ev.key) && ev.key != '-') return;\r

  \    clearFleetingMessage();\r

  \    if (!canAct()) return;\r

  \    let sel = Selected = onKeyWordInput(ev);\r

  \    if (nundef(sel)) return;\r

  \    let lastInputCharFilled = sel.target;\r

  \    console.assert(sel.isMatch == (lastInputCharFilled.letter == sel.ch),
  lastInputCharFilled, sel.ch);\r

  \    if (sel.isMatch && sel.isVeryLast) {\r

  \      deactivateFocusGroup();\r

  \      this.controller.evaluate.bind(this.controller)(true);\r

  \    } else if (sel.isMatch && sel.isLastOfGroup) {\r

  \      sel.target.isBlank = false;\r

  \      sel.target.group.hasBlanks = false;\r

  \      removeInPlace(Goal.blankWords, sel.target.group);\r

  \      removeInPlace(Goal.blankChars, sel.target);\r

  \      deactivateFocusGroup();\r

  \      console.log('haaaaaaaaaaaalo', Goal.isFocus)\r

  \    } else if (sel.isMatch) {\r

  \      removeInPlace(Goal.blankChars, sel.target);\r

  \      sel.target.isBlank = false;\r

  \    } else if (sel.isVeryLast) {\r

  \      Selected.words = getInputWords();\r

  \      Selected.answer = getInputWordString();\r

  \      Selected.req = getCorrectWordString();\r

  \      deactivateFocusGroup();\r

  \      this.controller.evaluate.bind(this.controller)(false);\r

  \    } else if (sel.isLastOfGroup) {\r

  \      Selected.words = getInputWords();\r

  \      Selected.answer = getInputWordString();\r

  \      Selected.req = getCorrectWordString();\r

  \      deactivateFocusGroup();\r

  \      this.controller.evaluate.bind(this.controller)(false);\r

  \    } else {\r

  \      if (!this.silent) { writeSound(); playSound('incorrect1'); }\r

  \      deactivateFocusGroup();\r

  \      showFleetingMessage('does NOT fit: ' + Selected.ch, 0, { fz: 24 });\r

  \      setTimeout(() => unfillCharInput(Selected.target), 500);\r

  \    }\r

  \  }\r

  \  eval(isCorrect) { return isCorrect; }\r

  }"
GAnagram: "class GAnagram extends Game {\r

  \  constructor(name, o) {\r

  \    super(name, o);\r

  \    if (this.language == 'C') {\r

  \      this.realLanguage = this.language;\r

  \      this.language = chooseRandom('E', 'S', 'F', 'D');\r

  \    }\r

  \  }\r

  \  clear() { super.clear(); if (isdef(this.language)) this.language =
  this.language; }\r

  \  start_Level() {\r

  \    this.keys = setKeysG(this, filterWordByLengthG, 10);\r

  \    if (this.keys.length < 10) { this.keys = setKeysG(this,
  filterWordByLengthG, 10, 'all'); }\r

  \  }\r

  \  prompt() {\r

  \    myShowPics(null, {}, {});\r

  \    if (this.hidden) {\r

  \      let d = iDiv(Pictures[0]);\r

  \      animate(d, 'aniAppearMinute', 100000);\r

  \    }\r

  \    setGoal();\r

  \    let w = this.showWord ? Goal.label : '';\r

  \    let wr = `drag letters to form ${w}`;\r

  \    let sp = `form ${w}`;\r

  \    show_instruction(wr, dTitle, sp);\r

  \    mLinebreak(dTable, 22);\r

  \    let word = Goal.label.toUpperCase();\r

  \    let wlen = word.length;\r

  \    let wTable = getRect(mBy('table')).w;\r

  \    let wmax = wTable / wlen;\r

  \    let gap = 4;\r

  \    let fzMax = wTable / wlen - 3 * gap;\r

  \    let fz = Math.min(70, fzMax);\r

  \    let dpEmpty = createLetterInputsX(word, dTable, { pabottom: 5, bg:
  'grey', display: 'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: gap });\r

  \    let inputs = blankInputs(dpEmpty, range(0, wlen - 1), false);\r

  \    for (let i = 0; i < inputs.length; i++) {\r

  \      let l = iDiv(inputs[i]);\r

  \      ipadd(l);\r

  \      mClass(l, 'dropzone');\r

  \      l.id = 'input' + i;\r

  \    }\r

  \    this.inputs = inputs;\r

  \    let x = mLinebreak(dTable, 35);\r

  \    fz = Math.min(60, fzMax);\r

  \    let dp = createLetterInputsX(word, dTable, { bg: 'silver', display:
  'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: 4 });\r

  \    scrambleInputs(dp);\r

  \    let letters = Array.from(dp.children);\r

  \    for (let i = 0; i < letters.length; i++) {\r

  \      let l = letters[i];\r

  \      l.setAttribute('draggable', true);\r

  \      ipadd(l);\r

  \      l.id = 'letter' + i;\r

  \    }\r

  \    this.letters = letters;\r

  \    mLinebreak(dTable, 35);\r

  \    this.bDone = mButton('Done!',
  this.controller.evaluate.bind(this.controller), dTable, { fz: 28, matop: 10,
  rounding: 10, padding: 16, border: 8 }, ['buttonClass']);\r

  \    if (this.hidden) showFleetingMessage('category: ' +
  Pictures[0].info.subgroup, 5000);\r

  \    else if (!this.showWord) { showLabelPercentHintAfter(50, 6000); }\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    sayTryAgain();\r

  \    setTimeout(() => {\r

  \      this.inputs.map(x => iDiv(x).innerHTML = '_')\r

  \    }, 1500);\r

  \    return 10;\r

  \  }\r

  \  eval() {\r

  \    let s = this.inputs.map(x => iDiv(x).innerHTML);\r

  \    let w = s = s.join('');\r

  \    let word = Goal.label.toUpperCase();\r

  \    Selected = { answer: w, reqAnswer: word, feedbackUI: iDiv(Goal) };\r

  \    return w == word;\r

  \  }\r

  \  onTimeup() { this.controller.evaluate(); }\r

  }"
GColoku: "class GColoku extends Game {\r

  \  startGame() {\r

  \    this.correctionFunc = () => {\r

  \      if (this.qName == 'isThisSudokuCorrect') {\r

  \        mStyle(Goal.buttonCorrect, { bg: 'green' });\r

  \        animate(Goal.buttonCorrect, 'komisch', 1000);\r

  \        if (!Goal.correct) {\r

  \          animateColorScale(Goal.correctionFeedbackUI, Goal.item.color,
  1.5, 1500);\r

  \          this.dComment.innerHTML = 'rule broken! duplicate in ' +
  Goal.err.type;\r

  \        } else {\r

  \          this.dComment.innerHTML = 'this coloku is correct!';\r

  \        }\r

  \      } else {\r

  \        this.dWordArea.remove();\r

  \        this.bDone.remove();\r

  \        if (Goal.err) {\r

  \          this.dComment.innerHTML = 'rule broken! duplicate in ' +
  Goal.err.type;\r

  \          animateColorScale(Goal.correctionFeedbackUI, Goal.item.color,
  1.5, 1500);\r

  \        } else {\r

  \          this.dComment.innerHTML = 'Coloku is incomplete!!!!';\r

  \        }\r

  \      }\r

  \      return 20000;\r

  \    };\r

  \    this.failFunc = () => {\r

  \      if (this.qName == 'isThisSudokuCorrect') {\r

  \        if (Goal.choice == Goal.correctChoice) { mStyle(Goal.buttonClicked,
  { bg: 'green' }); mCheckit(Goal.feedbackUI, 100); }\r

  \        else { mXit(Goal.buttonClicked, 100); }\r

  \      } else {\r

  \        mXit(this.dGrid, 200);\r

  \      }\r

  \    }\r

  \    this.successFunc = () => {\r

  \      if (this.qName == 'isThisSudokuCorrect') {\r

  \        if (Goal.choice == Goal.correctChoice) { mStyle(Goal.buttonClicked,
  { bg: 'green' }); mCheckit(Goal.feedbackUI, 100); }\r

  \        else { mXit(Goal.buttonClicked, 100); }\r

  \      } else {\r

  \        mCheckit(this.dGrid, 200);\r

  \      }\r

  \    }\r

  \  }\r

  \  prompt() {\r

  \    this.trials = 1;\r

  \    let [rows, cols] = [this.rows, this.cols];\r

  \    this.dGrid = mGrid(rows, cols, dTable, { position: 'relative', w: 400,
  h: 400, gap: 8, bg: 'white' });\r

  \    let o = getSudokuPatternFromDB(rows, cols);\r

  \    let [pattern, minPuzzle] = [this.pattern, this.minPuzzle] = [o.pattern,
  o.puzzle];\r

  \    mLinebreak(dTable, 20);\r

  \    this.dChoices = mDiv(dTable);\r

  \    mLinebreak(dTable);\r

  \    this.dComment = mDiv(dTable);\r

  \    mLinebreak(dTable);\r

  \    let qName = this.qName = this.level == 0 && coin() && PROJECTNAME ==
  'belinda' ? 'isThisSudokuCorrect' : 'solve';\r

  \    this[qName]();\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  fillGrid(pattern) {\r

  \    let items = this.items = [];\r

  \    let [rows, cols, dGrid] = [this.rows, this.cols, this.dGrid];\r

  \    let colors = this.colors = rows == 4 ? [RED, YELLOW, BLUE, GREEN]\r

  \      : rows == 6 ? [RED, YELLOW, BLUE, GREEN, PURPLE, ORANGE]\r

  \        : [BLUEGREEN, PURPLE, ORANGE, RED, YELLOW, BLUE, GREEN, LIGHTBLUE,
  OLIVE];\r

  \    shuffle(colors);\r

  \    for (let r = 0; r < rows; r++) {\r

  \      let arr = [];\r

  \      for (let c = 0; c < cols; c++) {\r

  \        let nch = pattern[r][c];\r

  \        let color = isNumber(nch) ? colors[pattern[r][c]] : null;\r

  \        let d = mDiv(dGrid, { bg: color }, getUID());\r

  \        let item = { row: r, col: c, id: d.id, color: color, val: nch };\r

  \        iAdd(item, { div: d });\r

  \        arr.push(item);\r

  \      }\r

  \      items.push(arr);\r

  \    }\r

  \    return items;\r

  \  }\r

  \  makeLines() {\r

  \    let [wline, dGrid, sz] = [2, this.dGrid, this.rows];\r

  \    let gSize = getSize(dGrid);\r

  \    let rh = sz != 9 ? makeRect((gSize.w - wline) / 2, 0, wline, gSize.h) :
  makeRect((gSize.w - wline) / 3, 0, wline, gSize.h);\r

  \    let rv = sz == 4 ? makeRect(0, (gSize.h - wline) / 2, gSize.w, wline) :
  makeRect(0, (gSize.h - wline) / 3, gSize.w, wline);\r

  \    let vLine = mDiv(dGrid, { bg: this.color, position: 'absolute', left:
  rh.l, top: rh.t, w: rh.w, h: rh.h });\r

  \    if (sz == 9) vLine = mDiv(dGrid, { bg: this.color, position:
  'absolute', left: rh.l * 2, top: rh.t, w: rh.w, h: rh.h });\r

  \    let hLine = mDiv(dGrid, { bg: this.color, position: 'absolute', left:
  rv.l, top: rv.t, w: rv.w, h: rv.h });\r

  \    if (sz != 4) vLine = mDiv(dGrid, { bg: this.color, position:
  'absolute', left: rv.l, top: 2 * rv.t, w: rv.w, h: rv.h });\r

  \  }\r

  \  setGoal(pattern) {\r

  \    let err = checkSudokuRule(pattern);\r

  \    let incomplete = false;\r

  \    for (const el of arrFlatten(pattern)) {\r

  \      if (!isNumber(el)) { incomplete = true; break; }\r

  \    }\r

  \    let answer = (err == null) && !incomplete;\r

  \    Goal = { correct: answer, err: err, incomplete: incomplete };\r

  \  }\r

  \  isThisSudokuCorrect() {\r

  \    this.trials = 1;\r

  \    let [pattern, rows, cols, dGrid] = [this.pattern, this.rows, this.cols,
  this.dGrid];\r

  \    destroySudokuRule(pattern, rows, cols);\r

  \    this.setGoal(pattern);\r

  \    let items = this.fillGrid(pattern);\r

  \    this.makeLines();\r

  \    let wsp = {\r

  \      D: 'ist dieses coloku korrekt?',\r

  \      E: 'is this coloku correct?',\r

  \      S: 'es este coloku correcto?',\r

  \      F: 'est ce que ce coloku est exacte?',\r

  \    };\r

  \    let sp = wsp[this.language];\r

  \    show_instruction(sp, dTitle, sp);\r

  \    showFleetingMessage('rule: each color must be unique in every row,
  column and quadrant!', 15000);\r

  \    let correct, incorrect;\r

  \    if (Goal.correct) { correct = { num: 1, text: 'yes' }; incorrect = [{
  num: 0, text: 'no' }]; }\r

  \    else { correct = { num: 0, text: 'no' }; incorrect = [{ num: 1, text:
  'yes' }]; }\r

  \    let feedbackUI = Goal.correctionFeedbackUI = Goal.correct ? this.dGrid
  : iDiv(this.items[Goal.err.row][Goal.err.col]);\r

  \    createMultipleChoiceElements(correct, incorrect, this.dChoices,
  feedbackUI, {});\r

  \    Goal.item = Goal.correct ? this.items[0] :
  this.items[Goal.err.row][Goal.err.col];\r

  \  }\r

  \  solve() {\r

  \    let [rrand, crand] = [randomNumber(0, this.rows - 1), randomNumber(0,
  this.cols - 1)];\r

  \    let puzzle = this.puzzle = jsCopy(this.pattern);\r

  \    let [min, rows, cols] = [this.minPuzzle, this.rows, this.cols];\r

  \    let combis = [];\r

  \    for (let r = 0; r < rows; r++) {\r

  \      for (let c = 0; c < cols; c++) {\r

  \        if (min[r][c] === ' ') combis.push({ row: r, col: c });\r

  \      }\r

  \    }\r

  \    let combisToRemove = choose(combis, this.numMissing);\r

  \    for (const o of combisToRemove) {\r

  \      puzzle[o.row][o.col] = ' ';\r

  \    }\r

  \    this.fillGrid(puzzle);\r

  \    this.makeLines();\r

  \    let sp = 'solve this coloku!'\r

  \    show_instruction(sp, dTitle, sp);\r

  \    let itemlist = this.itemlist = arrFlatten(this.items);\r

  \    let containers = this.containers = itemlist.filter(x => x.val === '
  ');\r

  \    let dWordArea = this.dWordArea = mDiv(dTable, { h: 70, display: 'flex',
  'flex-wrap': 'wrap', layout: 'fhcc' });\r

  \    let colorItems = this.colorItems = [];\r

  \    for (const color of this.colors) {\r

  \      let colorItem = { id: getUID(), color: color };\r

  \      let d = mDiv(dWordArea, { w: 40, h: 40, bg: color, margin: 10,
  cursor: 'pointer' }, colorItem.id);\r

  \      iAdd(colorItem, { div: d });\r

  \      colorItems.push(colorItem);\r

  \    }\r

  \    enableDD(colorItems, containers, this.dropHandler.bind(this), true);\r

  \    mLinebreak(dTable, 50);\r

  \    this.bDone = mButton('Done!',
  this.controller.evaluate.bind(this.controller), dTable, { fz: 28, matop: 10,
  rounding: 10, padding: 16, border: 8 }, ['buttonClass']);\r

  \  }\r

  \  dropHandler(source, target, isCopy = true) {\r

  \    let dSource = iDiv(source);\r

  \    let dTarget = iDiv(target);\r

  \    mStyle(dTarget, { bg: source.color });\r

  \    target.color = source.color;\r

  \    target.val = this.colors.indexOf(source.color);\r

  \  }\r

  \  evalIsCorrect() {\r

  \    Selected = { feedbackUI: Goal.buttonClicked };\r

  \    return Goal.buttonClicked == Goal.buttonCorrect;\r

  \  }\r

  \  evalSolve() {\r

  \    let [items, pattern, rows, cols] = [this.items, this.pattern,
  this.rows, this.cols];\r

  \    let pat = items.map(x => x.map(y => y.val));\r

  \    this.setGoal(pat);\r

  \    if (Goal.err) {\r

  \      Goal.correctionFeedbackUI =
  iDiv(this.items[Goal.err.row][Goal.err.col]);\r

  \      Goal.item = this.items[Goal.err.row][Goal.err.col];\r

  \    }\r

  \    Selected = { feedbackUI: this.dGrid };\r

  \    return Goal.correct;\r

  \  }\r

  \  eval() {\r

  \    clearFleetingMessage();\r

  \    return this.qName == 'solve' ? this.evalSolve() :
  this.evalIsCorrect();\r

  \  }\r

  \  onTimeup() { this.controller.evaluate(); }\r

  }"
GCats: "class GCats extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  startGame() { this.correctionFunc = showCorrectPictureLabels;
  this.failFunc = failSomePictures; }\r

  \  dropHandler(source, target, isCopy = true) {\r

  \    let dSource = iDiv(source);\r

  \    let dTarget = iDiv(target);\r

  \    if (!isCopy) {\r

  \      mAppend(dTarget, dSource);\r

  \    } else {\r

  \      let dNew = mText(dSource.innerHTML, dTarget, { wmin: 100, fz: 20,
  padding: 4, margin: 4, display: 'inline-block' });\r

  \      addDDSource(dNew, false);\r

  \    }\r

  \    if (isOverflown(dTarget)) {\r

  \      let d = dTarget.parentNode;\r

  \      let r = getRect(d);\r

  \      let w = r.w + 100;\r

  \      mSize(d, w, r.h);\r

  \      console.log('overflow!!!!', r.w, '=>', w)\r

  \    }\r

  \  }\r

  \  prompt() {\r

  \    let items;\r

  \    let data = this.keysByCat = genCats(this.numCats);\r

  \    this.keylists = [], this.catsByKey = {};\r

  \    for (const cat in data) {\r

  \      this.keylists.push({ keys: data[cat], cat: cat });\r

  \      for (const k of data[cat]) {\r

  \        this.catsByKey[k] = cat;\r

  \      }\r

  \    }\r

  \    this.cats = Object.keys(this.keysByCat);\r

  \    this.allKeys = Object.keys(this.catsByKey);\r

  \    this.options = {}; _extendOptions(this.options);\r

  \    if (this.pickRandom == false) {\r

  \      items = Pictures = getNItemsPerKeylist(this.numPics, this.keylists,
  this.options);\r

  \    } else {\r

  \      let keys = choose(this.allKeys, this.numPics * this.numCats);\r

  \      items = Pictures = genItemsFromKeys(keys, this.options);\r

  \      items.map(x => x.cat = this.catsByKey[x.key]);\r

  \    }\r

  \    shuffle(items);\r

  \    let wr = this.language == 'E' ? 'drag pictures to categories' : \"ordne
  die bilder in kategorien\";\r

  \    show_instruction(wr, dTitle, wr);\r

  \    mLinebreak(dTable);\r

  \    let dArea = mDiv(dTable, { display: 'flex', 'flex-wrap': 'wrap' });\r

  \    let containers, dWordArea;\r

  \    containers = this.containers = createContainers(this.cats, dArea, { w:
  'auto', wmin: 150, wmax: 300, hmin: 250, fz: 24, fg: 'contrast' });\r

  \    mLinebreak(dTable);\r

  \    dWordArea = this.dWordArea = mDiv(dTable, { h: 70, display: 'flex',
  'flex-wrap': 'wrap', layout: 'fhcc' });\r

  \    for (const item of items) { let d = miPic(item, dWordArea); iAdd(item,
  { div: d }); }\r

  \    enableDD(items, containers, this.dropHandler.bind(this), false);\r

  \    mLinebreak(dTable, 50);\r

  \    mButton('Done!', this.controller.evaluate.bind(this.controller),
  dTable, { fz: 28, matop: 10, rounding: 10, padding: 16, border: 8 },
  ['buttonClass']);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    sayTryAgain();\r

  \    TOMain = setTimeout(() => {\r

  \      for (const p of Pictures) {\r

  \        if (!p.isCorrect) {\r

  \          mAppend(this.dWordArea, iDiv(p));\r

  \          if (this.trialNumber == 1) miAddLabel(p, { bg: '#00000080',
  margin: 4, fz: 20 });\r

  \        }\r

  \      }\r

  \    }, 1000);\r

  \    return 1200;\r

  \  }\r

  \  eval() {\r

  \    this.piclist = Pictures;\r

  \    Selected = { piclist: this.piclist, feedbackUI: this.piclist.map(x =>
  iDiv(x)), sz: getRect(iDiv(this.piclist[0])).h };\r

  \    let isCorrect = true;\r

  \    for (const p of Pictures) {\r

  \      let label = p.label;\r

  \      let d = iDiv(p);\r

  \      let cont = d.parentNode;\r

  \      for (const c of this.containers) {\r

  \        if (iDiv(c) == cont) {\r

  \          p.classified = true;\r

  \          if (p.cat == c.label) p.isCorrect = true;\r

  \          else { p.isCorrect = isCorrect = false; }\r

  \          break;\r

  \        }\r

  \      }\r

  \      if (!p.classified) p.isCorrect = isCorrect = false;\r

  \    }\r

  \    return isCorrect;\r

  \  }\r

  }"
GElim: "class GElim extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  startGame() {\r

  \    this.correctionFunc = () => { writeSound(); playSound('incorrect1');
  return this.spokenFeedback ? 1800 : 300; };\r

  \    this.successFunc = () => { Goal.pics.map(x => iDiv(x).style.opacity =
  .3); successPictureGoal(); }\r

  \  }\r

  \  start_Level() {\r

  \    super.start_Level();\r

  \    this.keys = this.keys.filter(x => containsColorWord(x));\r

  \  }\r

  \  prompt() {\r

  \    this.piclist = [];\r

  \    let colorKeys = this.numColors > 1 ? choose(this.colors,
  this.numColors) : null;\r

  \    let showRepeat = this.numRepeat > 1;\r

  \    let rows = this.numColors > 1 ? this.numColors : undefined;\r

  \    myShowPics(this.interact.bind(this), { bg: 'white' },\r

  \      {\r

  \        showRepeat: showRepeat, colorKeys: colorKeys, numRepeat:
  this.numRepeat,\r

  \        contrast: this.contrast, rows: rows\r

  \      });\r

  \    let [sSpoken, sWritten, piclist] = logicMulti(Pictures);\r

  \    this.piclist = piclist;\r

  \    Goal = { pics: this.piclist, sammler: [] };\r

  \    show_instruction(sWritten, dTitle, sSpoken, { fz: 22, voice: 'zira'
  });\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    sayTryAgain();\r

  \    let msg = this.language == 'D' ? 'noch einmal!' : 'try again!'\r

  \    showFleetingMessage(msg, 0, { margin: -8, fz: 22 }, true);\r

  \    return 1000;\r

  \  }\r

  \  activate() {\r

  \    for (const p of this.piclist) { if (p.isSelected)
  toggleSelectionOfPicture(p); }\r

  \    this.piclist = [];\r

  \  }\r

  \  interact(ev) {\r

  \    ev.cancelBubble = true;\r

  \    if (!canAct()) return;\r

  \    let pic = findItemFromEvent(Pictures, ev);\r

  \    writeSound(); playSound('hit');\r

  \    if (Goal.pics.includes(pic)) {\r

  \      removePicture(pic);\r

  \      Goal.sammler.push(pic);\r

  \    }\r

  \    if (Goal.pics.length == Goal.sammler.length)
  this.controller.evaluate.bind(this.controller)(true);\r

  \    else if (!Goal.pics.includes(pic)) { this.lastPic = pic;
  this.controller.evaluate.bind(this.controller)(false); }\r

  \  }\r

  \  eval(isCorrect) {\r

  \    Selected = { piclist: this.piclist, feedbackUI: isCorrect ?
  Goal.pics.map(x => iDiv(x)) : iDiv(this.lastPic) };\r

  \    return isCorrect;\r

  \  }\r

  }"
GHouse: "class GHouse extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  startGame() {\r

  \    this.correctionFunc = () => {\r

  \      mStyle(Goal.buttonCorrect, { bg: 'green' });\r

  \      animate(Goal.buttonCorrect, 'komisch', 1000);\r

  \      mStyle(this.dGraph, { opacity: 1 });\r

  \      return 20000;\r

  \    };\r

  \    this.failFunc = () => {\r

  \      if (Goal.choice == Goal.correctChoice) { mStyle(Goal.buttonClicked, {
  bg: 'green' }); mCheckit(Goal.feedbackUI, 100); }\r

  \      else { mXit(Goal.buttonClicked, 100); }\r

  \      mStyle(this.dGraph, { opacity: 1 });\r

  \    }\r

  \    this.successFunc = () => {\r

  \      if (Goal.choice == Goal.correctChoice) { mStyle(Goal.buttonClicked, {
  bg: 'green' }); mCheckit(Goal.feedbackUI, 100); }\r

  \      else { mXit(Goal.buttonClicked, 100); }\r

  \      mStyle(this.dGraph, { opacity: 1 });\r

  \    }\r

  \  }\r

  \  prompt() {\r

  \    if (isdef(this.graph)) this.graph.clear();\r

  \    this.trials = 1;\r

  \    let n = randomNumber(this.minRooms, this.maxRooms);\r

  \    //#region selectQuestion\r

  \    let qFuncs = [this.areRoomsConnected.bind(this)];\r

  \    if (n > 5) qFuncs.push(this.isThereAPath.bind(this));\r

  \    let q = this.q = this.level > 1 ? arrLast(qFuncs) :
  chooseRandom(qFuncs);\r

  \    //#endregion\r

  \    //#region make house\r

  \    let s = n;\r

  \    let wTotal = n < 4 || n > 12 ? 700 : n > 10 ? 600 : 500;\r

  \    let dGridOuter = mDiv(dTable, { wmin: wTotal, hmin: 400 });\r

  \    let house = this.house = iHouse(dGridOuter, s, { w: wTotal, h: 400
  });\r

  \    let rooms = this.rooms = house.rooms.map(x => Items[x]);\r

  \    this.addLabelsToRooms();\r

  \    //#endregion\r

  \    //#region add doors\r

  \    let dirs = coin() ? ['n', 'w'] : ['s', 'e'];\r

  \    let doors = this.doors = [];\r

  \    for (const r of rooms) {\r

  \      let dir = coin() ? dirs[0] : dirs[1];\r

  \      let door = iDoor(r.id, dir);\r

  \      doors.push(door);\r

  \    }\r

  \    if (q.name.includes('Path')) hideOuterDoors(house);\r

  \    //#endregion\r

  \    //#region prep container for multiple choices\r

  \    mLinebreak(dTable, 20);\r

  \    this.dChoices = mDiv(dTable);\r

  \    mLinebreak(dTable);\r

  \    //#endregion\r

  \    //#region make graph container\r

  \    let r = getRect(dGridOuter);\r

  \    mStyle(dGridOuter, { position: 'relative' });\r

  \    let dGraph = this.dGraph = mDiv(dGridOuter, { box: true, align: 'left',
  position: 'absolute', bg: '#ffffff80', top: 0, left: 0, w: r.w, h: r.h });\r

  \    //#endregion\r

  \    let innerStyles = { box: true, align: 'left', position: 'absolute', bg:
  '#ffffff80', top: 0, left: 0, w: r.w, h: r.h };\r

  \    let g1 = this.graph = new UIGraph(dGraph, { edge: { bg: 'blue' },
  outer: { align: 'left', w: wTotal, h: 400 }, inner: innerStyles });\r

  \    convertToGraphElements(g1, house);\r

  \    g1.presetLayout();\r

  \    g1.reset();\r

  \    mStyle(dGraph, { opacity: 0 });\r

  \    q();\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  //#region qFuncs\r

  \  isThereAPath() {\r

  \    let house = this.house;\r

  \    let corners = getCornerRoomsDict(house);\r

  \    let clist = Object.values(corners);\r

  \    let g = this.graph;\r

  \    let id = g.getNodeWithMaxDegree(clist);\r

  \    let cornerRoomIds = g.sortNodesByDegree(clist).map(x => x.id());\r

  \    let [r1, r2] = [Items[cornerRoomIds[0]], Items[cornerRoomIds[1]]];\r

  \    if (r1 == r2 || areNeighbors(r1, r2) && cornerRoomIds.length > 2) r2 =
  Items[cornerRoomIds[2]];\r

  \    if (!r1.isW && (r2.isW || !r1.N)) [r1, r2] = [r2, r1];\r

  \    let roomFrom = r1.id;\r

  \    let funcs = this.dijkstra = g.getShortestPathsFrom(roomFrom);\r

  \    let roomTo = r2.id;\r

  \    for (const k in corners) {\r

  \      if (k != 'NW') {\r

  \        let dist = funcs.distanceTo('#' + corners[k]);\r

  \        if (dist != Infinity && dist >= 3) {\r

  \          roomTo = corners[k];\r

  \          break;\r

  \        }\r

  \      }\r

  \    }\r

  \    if (!roomTo) { roomTo = corners.SE; }\r

  \    //#region spoken and written instruction\r

  \    this.roomFrom = roomFrom;\r

  \    this.roomTo = roomTo;\r

  \    let sp1 = {\r

  \      D: ['gibt es einen weeg von', 'gibt es einen weg von'],\r

  \      E: ['is there a path from', 'is there a path from'],\r

  \      S: ['hay un camino de', 'hay un camino de'],\r

  \      F: [\"y a 'til un chemin de\", \"y a 'til un chemin de\"],\r

  \    };\r

  \    let sp2 = {\r

  \      D: ['zu', 'zu'],\r

  \      E: ['to', 'to'],\r

  \      S: ['a', 'a'],\r

  \      F: ['!. a! ', 'à'],\r

  \    };\r

  \    let fill1 = [`. \"${Items[roomFrom].id.toUpperCase()}\"! `, `
  ${Items[roomFrom].id} `];\r

  \    let fill2 = [`. \"${Items[roomTo].id.toUpperCase()}\"`, `
  ${Items[roomTo].id}`];\r

  \    let l = 'E';\r

  \    let sp = sp1[l][0] + fill1[0] + sp2[l][0] + fill2[0] + '?';\r

  \    let wr = sp1[l][1] + fill1[1] + sp2[l][1] + fill2[1] + '?';\r

  \    let voice = this.language == 'E' ? coin() ? 'ukMale' : 'zira' :
  this.language;\r

  \    //#endregion\r

  \    show_instruction(wr, dTitle, sp, { voice: voice });\r

  \    let answer = funcs.distanceTo('#' + roomTo) != Infinity;\r

  \    let correct, incorrect;\r

  \    if (answer) { correct = { num: 1, text: 'yes' }; incorrect = [{ num: 0,
  text: 'no' }]; }\r

  \    else { correct = { num: 0, text: 'no' }; incorrect = [{ num: 1, text:
  'yes' }]; }\r

  \    createMultipleChoiceElements(correct, incorrect, this.dChoices,
  iDiv(this.house), {});\r

  \  }\r

  \  howMany() {\r

  \    let wr = this.language == 'E' ? 'how many units are there in this
  house?' : \"wieviele wohneinheiten hat dieses haus?\";\r

  \    show_instruction(wr, dTitle, wr);\r

  \    let numUnits = this.graph.getNumComponents();\r

  \    let otherChoices = [\r

  \      numUnits * 2,\r

  \      Math.round(numUnits / 2),\r

  \      numUnits + randomNumber(1, 10)\r

  \    ];\r

  \    let di = {};\r

  \    for (let i = 0; i < otherChoices.length; i++) {\r

  \      let n = otherChoices[i];\r

  \      while (n == numUnits || isdef(di[n])) { n += 1; }\r

  \      di[n] = true;\r

  \      otherChoices[i] = n;\r

  \    }\r

  \    createMultipleChoiceElements({ num: numUnits, text: numUnits },\r

  \      otherChoices.map(x => ({ num: x, text: x })), this.dChoices,
  iDiv(this.house), {});\r

  \  }\r

  \  areRoomsConnected() {\r

  \    let wr = this.language == 'E' ? 'are all rooms connected?' : \"sind
  alle zimmer verbunden?\";\r

  \    showInstruction(wr, dTitle, wr);\r

  \    let numUnits = this.graph.getNumComponents();\r

  \    let correct, incorrect;\r

  \    if (numUnits == 1) { correct = { num: 1, text: 'yes' }; incorrect = [{
  num: 0, text: 'no' }]; }\r

  \    else { correct = { num: 0, text: 'no' }; incorrect = [{ num: 1, text:
  'yes' }]; }\r

  \    createMultipleChoiceElements(correct, incorrect, this.dChoices,
  iDiv(this.house), {});\r

  \  }\r

  \  //#region helpers\r

  \  showPath() {\r

  \    mStyle(this.dGraph, { opacity: 1 });\r

  \  }\r

  \  //#region add stuff to house\r

  \  addLabelsToRooms() {\r

  \    let roomlist = ['bedroom', 'livingroom', 'bathroom', 'kitchen'];\r

  \    sortByFunc(this.rooms, x => x.rect.w * x.rect.h);\r

  \    this.rooms.map(x => addLabel(x, x.ch, {}));\r

  \  }\r

  \  addOneDoorPerRoom(directions) {\r

  \    for (const r of this.rooms) {\r

  \      let door = makeRandomDoor(r, this.house, directions);
  this.doors.push(door);\r

  \    }\r

  \  }\r

  \  addWallFinderByMouseClick() {\r

  \    dTable.onclick = ev => {\r

  \      console.log(ev.clientX, ev.clientY);\r

  \      let w = findWall(ev.clientX, ev.clientY, this.walls);\r

  \      console.log('found wall', w)\r

  \    }\r

  \  }\r

  \  addFurnitureItems() {\r

  \    let keys = ['bed', 'bathtub', 'chair', 'couch and lamp', 'toilet',
  'door', 'table'];\r

  \    let items = Pictures = genItemsFromKeys(keys);\r

  \    console.assert(arrLast(items).key == 'table', 'NOOOOOOO');\r

  \    let itable = arrLast(items);\r

  \    shuffle(items);\r

  \    let dWordArea = this.dWordArea = mDiv(dTable, { h: 70, display: 'flex',
  'flex-wrap': 'wrap', layout: 'fhcc' });\r

  \    for (const item of items) { let d = miPic(item, dWordArea); iAdd(item,
  { div: d }); }\r

  \    mStyle(iDiv(itable), { fg: BROWN });\r

  \    enableDD(items, rooms, this.dropHandler.bind(this), false);\r

  \  }\r

  \  //#endregion\r

  \  eval() {\r

  \    clearFleetingMessage();\r

  \    Selected = { reqAnswer: G.correctAnswer, answer: Goal.choice.text,
  feedbackUI: Goal.buttonClicked };\r

  \    return (Goal.buttonClicked == Goal.buttonCorrect);\r

  \  }\r

  }"
GMaze: "class GMaze extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  clear() { super.clear(); if (isdef(this.cy)) { this.cy.destroy(); } }\r

  \  startGame() {\r

  \    this.correctionFunc = () => {\r

  \      mStyle(Goal.buttonCorrect, { bg: 'green' });\r

  \      animate(Goal.buttonCorrect, 'komisch', 1000);\r

  \      if (Goal.correctChoice.text == 'yes')
  this.maze.breadCrumbs(this.path); else this.maze.colorComponents();\r

  \      return 20000;\r

  \    };\r

  \    this.failFunc = () => {\r

  \      if (Goal.choice == Goal.correctChoice) { mStyle(Goal.buttonClicked, {
  bg: 'green' }); mCheckit(Goal.feedbackUI, 100); }\r

  \      else { mXit(Goal.buttonClicked, 100); }\r

  \    }\r

  \    this.successFunc = () => {\r

  \      if (Goal.choice == Goal.correctChoice) { mStyle(Goal.buttonClicked, {
  bg: 'green' }); mCheckit(Goal.feedbackUI, 100); }\r

  \      else { mXit(Goal.buttonClicked, 100); }\r

  \    }\r

  \  }\r

  \  startRound() { if (isdef(this.cy)) this.cy.destroy();
  clearElement(dTable); }\r

  \  prompt() {\r

  \    this.trials = 1;\r

  \    let maze = this.maze = new MazeGraph(dTable, this.rows, this.cols,
  this.sz, this.gap);\r

  \    this.cy = maze.cy;\r

  \    mLinebreak(dTable, 20);\r

  \    this.dChoices = mDiv(dTable);\r

  \    mLinebreak(dTable);\r

  \    this.isThereAPath(maze);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  isThereAPath(maze) {\r

  \    let cellStart = maze.getTopLeftCell();\r

  \    mCellContent(iDiv(cellStart), { w: '50%', h: '50%', fz: '60%', bg:
  'green', fg: 'white', rounding: '50%' }, 'A');\r

  \    let cellGoal = maze.getBottomRightCell();\r

  \    mCellContent(iDiv(cellGoal), { w: '50%', h: '50%', fz: '60%', bg:
  'red', fg: 'white', rounding: '50%' }, 'B');\r

  \    [this.roomFrom, this.roomTo] = [cellStart.nodeId, cellGoal.nodeId];\r

  \    //#region spoken and written instruction\r

  \    let sp1 = {\r

  \      D: ['gibt es einen weeg von', 'gibt es einen weg von'],\r

  \      E: ['is there a path from', 'is there a path from'],\r

  \      S: ['hay un camino de', 'hay un camino de'],\r

  \      F: [\"y a 'til un chemin de\", \"y a 'til un chemin de\"],\r

  \    };\r

  \    let sp2 = {\r

  \      D: ['zu', 'zu'],\r

  \      E: ['to', 'to'],\r

  \      S: ['a', 'a'],\r

  \      F: ['!. a! ', 'à'],\r

  \    };\r

  \    let fill1 = [`. \"A\"! `, ` A `];\r

  \    let fill2 = [`. \"B\"`, ` B`];\r

  \    let l = this.language;\r

  \    let sp = sp1[l][0] + fill1[0] + sp2[l][0] + fill2[0] + '?';\r

  \    let wr = sp1[l][1] + fill1[1] + sp2[l][1] + fill2[1] + '?';\r

  \    let voice = this.language == 'E' ? coin() ? 'ukMale' : 'zira' :
  this.language;\r

  \    show_instruction(wr, dTitle, sp, { voice: voice });\r

  \    //#endregion\r

  \    let path = this.path = maze.getShortestPathFromTo(this.roomFrom,
  this.roomTo);\r

  \    console.assert(path.length < Infinity, 'WAAAAAAAAAAAAAAS?');\r

  \    if (coin(this.level > 2 ? 50 : 40)) maze.cutPath(this.path, .5, .75);\r

  \    let len = maze.getLengthOfShortestPath(this.roomFrom, this.roomTo);\r

  \    let answer = len != Infinity;\r

  \    let correct, incorrect;\r

  \    if (answer) { correct = { num: 1, text: 'yes' }; incorrect = [{ num: 0,
  text: 'no' }]; }\r

  \    else { correct = { num: 0, text: 'no' }; incorrect = [{ num: 1, text:
  'yes' }]; }\r

  \    createMultipleChoiceElements(correct, incorrect, this.dChoices,
  maze.dMaze, {});\r

  \  }\r

  \  eval() {\r

  \    clearFleetingMessage();\r

  \    Selected = { reqAnswer: G.correctAnswer, answer: Goal.choice.text,
  feedbackUI: Goal.buttonClicked };\r

  \    return (Goal.buttonClicked == Goal.buttonCorrect);\r

  \  }\r

  }"
GMem: "class GMem extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  clear() { clearTimeout(this.TO); showMouse(); }\r

  \  prompt() {\r

  \    this.trials = 1;\r

  \    myShowPics(this.interact.bind(this),\r

  \      { border: '3px solid #ffffff80' },\r

  \      {});\r

  \    setGoal();\r

  \    let wr = (this.language == 'E' ? 'remember ' : 'merke dir ') +
  (this.level > 2 ? (this.language == 'E' ? 'all' : 'alle') : Goal.label);\r

  \    show_instruction(wr, dTitle, wr);\r

  \    let secs = calcMemorizingTime(this.numPics, this.level > 2);\r

  \    hideMouse();\r

  \    TOMain = setTimeout(() => turnCardsAfter(secs), 300, this.level >=
  5);\r

  \  }\r

  \  interact(ev) {\r

  \    ev.cancelBubble = true;\r

  \    if (!canAct()) return;\r

  \    let pic = findItemFromEvent(Pictures, ev);\r

  \    turnFaceUpSimple(pic);\r

  \    if (this.trialNumber == this.trials - 1) turnFaceUpSimple(Goal);\r

  \    TOMain = setTimeout(() =>
  this.controller.evaluate.bind(this.controller)(ev), 300);\r

  \  }\r

  }"
GMissingLetter: "class GMissingLetter extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  start_Level() {\r

  \    super.start_Level();\r

  \    this.maxPosMissing = this.posMissing == 'start' ? this.numMissing - 1 :
  100;\r

  \  }\r

  \  prompt() {\r

  \    myShowPics(() => fleetingMessage('just enter the missing letter!'));\r

  \    setGoal();\r

  \    if (this.instruction == 'all') {\r

  \      let wr = (this.language == 'E' ? 'complete ' : \"ergänze \") +
  `<b>${Goal.label.toUpperCase()}</b>`;\r

  \      let sp = (this.language == 'E' ? 'complete ' : \"ergänze \") +
  `${Goal.label}`;\r

  \      show_instruction(wr, dTitle, sp);\r

  \    } else if (this.instruction == 'spokenGoal') {\r

  \      let wr = this.language == 'E' ? 'complete the word' : \"ergänze das
  wort\";\r

  \      let sp = (this.language == 'E' ? 'complete' : \"ergänze\") + ' ' +
  Goal.label;\r

  \      show_instruction(wr, dTitle, sp);\r

  \    } else {\r

  \      let wr = this.language == 'E' ? 'complete the word' : \"ergänze das
  wort\";\r

  \      show_instruction(wr, dTitle, wr);\r

  \    }\r

  \    mLinebreak(dTable, 20);\r

  \    let style = { margin: 6, fg: 'white', display: 'inline', bg:
  'transparent', align: 'center', border: 'transparent', outline: 'none',
  family: 'Consolas', fz: 80 };\r

  \    let d = createLetterInputs(Goal.label.toUpperCase(), dTable, style);\r

  \    let indices = getIndicesCondi(Goal.label, (x, i) => isAlphaNum(x) && i
  <= this.maxPosMissing);\r

  \    this.nMissing = Math.min(indices.length, this.numMissing);\r

  \    let ilist = choose(indices, this.nMissing); sortNumbers(ilist);\r

  \    this.inputs = [];\r

  \    for (const idx of ilist) {\r

  \      let inp = d.children[idx];\r

  \      inp.innerHTML = '_';\r

  \      mClass(inp, 'blink');\r

  \      this.inputs.push({ letter: Goal.label[idx].toUpperCase(), div: inp,
  index: idx });\r

  \    }\r

  \    mLinebreak(dTable);\r

  \    let msg = this.composeFleetingMessage();\r

  \    let ms = this.instruction == 'all' ? 3000 : this.instruction ==
  'spokenGoal' ? 9000 : 15000;\r

  \    showFleetingMessage(msg, ms);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    let selinp = Selected.inp;\r

  \    sayTryAgain();\r

  \    TOMain = setTimeout(() => {\r

  \      let d = selinp.div;\r

  \      d.innerHTML = '_';\r

  \      mClass(d, 'blink');\r

  \    }, 1200);\r

  \    showFleetingMessage(this.composeFleetingMessage(), 3000);\r

  \    return 1500;\r

  \  }\r

  \  activate() {\r

  \    addKeyup('G', ev => {\r

  \      if (!isLetter(ev.key)) return;\r

  \      clearFleetingMessage();\r

  \      if (!canAct()) return;\r

  \      let charEntered = ev.key.toString();\r

  \      if (!isAlphaNum(charEntered)) return;\r

  \      Selected = { lastLetterEntered: charEntered.toUpperCase() };\r

  \      if (this.nMissing == 1) {\r

  \        let d = Selected.feedbackUI = this.inputs[0].div;\r

  \        Selected.positiveFeedbackUI = iDiv(Goal);\r

  \        Selected.lastIndexEntered = this.inputs[0].index;\r

  \        Selected.inp = this.inputs[0];\r

  \        d.innerHTML = Selected.lastLetterEntered;\r

  \        mRemoveClass(d, 'blink');\r

  \        let result = buildWordFromLetters(mParent(d));\r

  \        this.controller.evaluate.bind(this.controller)(result);\r

  \      } else {\r

  \        let ch = charEntered.toUpperCase();\r

  \        for (const inp of this.inputs) {\r

  \          if (inp.letter == ch) {\r

  \            Selected.lastIndexEntered = inp.index;\r

  \            Selected.inp = inp;\r

  \            let d = Selected.feedbackUI = inp.div;\r

  \            d.innerHTML = ch;\r

  \            mRemoveClass(d, 'blink');\r

  \            removeInPlace(this.inputs, inp);\r

  \            this.nMissing -= 1;\r

  \            break;\r

  \          }\r

  \        }\r

  \        if (nundef(Selected.lastIndexEntered)) {\r

  \          showFleetingMessage('you entered ' +
  Selected.lastLetterEntered);\r

  \          sayRandomVoice('try a different letter!', 'anderer Buchstabe!')\r

  \        }\r

  \        showFleetingMessage(this.composeFleetingMessage(), 3000);\r

  \      }\r

  \    })\r

  \  }\r

  \  eval(word) {\r

  \    let answer = normalize(word, this.language);\r

  \    let reqAnswer = normalize(Goal.label, this.language);\r

  \    Selected.reqAnswer = reqAnswer;\r

  \    Selected.answer = answer;\r

  \    if (answer == reqAnswer) return true;\r

  \    else if (this.language == 'D' && fromUmlaut(answer) ==
  fromUmlaut(reqAnswer)) {\r

  \      return true;\r

  \    } else {\r

  \      return false;\r

  \    }\r

  \  }\r

  \  composeFleetingMessage() {\r

  \    let lst = this.inputs;\r

  \    let msg = lst.map(x => x.letter).join(',');\r

  \    let edecl = lst.length > 1 ? 's ' : ' ';\r

  \    let ddecl = lst.length > 1 ? 'die' : 'den';\r

  \    let s = (this.language == 'E' ? 'Type the letter' + edecl : 'Tippe ' +
  ddecl + ' Buchstaben ');\r

  \    return s + msg;\r

  \  }\r

  }"
GNamit: "class GNamit extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  startGame() { this.correctionFunc = showCorrectPictureLabels;
  this.failFunc = failSomePictures; }\r

  \  prompt() {\r

  \    this.showLabels = false;\r

  \    myShowPics(null, {}, { rows: 1 });\r

  \    Pictures.map(x => x.correctLabel = x.label);\r

  \    Goal = { pics: Pictures };\r

  \    let wr = this.language == 'E' ? 'drag labels to pictures' : \"ordne die
  texte den bildern zu\";\r

  \    show_instruction(wr, dTitle, wr);\r

  \    mLinebreak(dTable);\r

  \    mLinebreak(dTable, 50);\r

  \    let keys = Pictures.map(x => x.key);\r

  \    shuffle(keys);\r

  \    G.showLabels = true;\r

  \    let titems = this.letters = myShowLabels(null, undefined, { rows: 1,
  showLabels: true }, keys);\r

  \    titems.map(x => iDiv(x).style.cursor = 'pointer');\r

  \    mLinebreak(dTable, 50);\r

  \    enableDD(this.letters, Pictures, this.dropHandler.bind(this), true,
  false, null);\r

  \    mButton('Done!', this.controller.evaluate.bind(this.controller),
  dTable, { fz: 32, matop: 10, rounding: 10, padding: 16, border: 8 },
  ['buttonClass']);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  dropHandler(source, target, isCopy = true) {\r

  \    let dSource = iDiv(source);\r

  \    let dTarget = iDiv(target);\r

  \    console.log('dropped', source, 'onto', target);\r

  \    let label = iLabel(target);\r

  \    console.log('label', label);\r

  \    let div = iDiv(target);\r

  \    console.log('div', div);\r

  \    addLabel(target, source.label, {});\r

  \  }\r

  \  trialPrompt() {\r

  \    this.failFunc();\r

  \    sayTryAgain();\r

  \    TOMain = setTimeout(() => { removeMarkers(); Pictures.map(x =>
  removeLabel(x)) }, 1200);\r

  \    return 1500;\r

  \  }\r

  \  eval() {\r

  \    console.log('eval in Namit!!!!!')\r

  \    this.piclist = Pictures;\r

  \    Selected = { piclist: this.piclist, feedbackUI: this.piclist.map(x =>
  iDiv(x)), sz: getRect(iDiv(this.piclist[0])).h };\r

  \    let isCorrect = true;\r

  \    for (const p of Pictures) {\r

  \      let correctLabel = p.correctLabel;\r

  \      console.log('correctLabel', correctLabel, p.label);\r

  \      let dLabel = iLabel(p);\r

  \      console.log('dLabel', dLabel);\r

  \      if (nundef(dLabel) || p.label != correctLabel) p.isCorrect =
  isCorrect = false;\r

  \      else p.isCorrect = true;\r

  \    }\r

  \    return isCorrect;\r

  \  }\r

  }"
GPremem: "class GPremem extends Game {\r

  \  constructor(name, o) { super(name, o); this.piclist = []; }\r

  \  prompt() {\r

  \    this.piclist = [];\r

  \    this.showLabels = false;\r

  \    myShowPics(this.interact.bind(this), { border: '3px solid #ffffff80' },
  {});\r

  \    let wr = this.language == 'E' ? 'click any picture' : 'click irgendein
  Bild';\r

  \    show_instruction(wr, dTitle, wr);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    for (const p of this.piclist) { toggleSelectionOfPicture(p); }\r

  \    this.piclist = [];\r

  \    show_instruction('try again: click any picture', dTitle, 'try again:
  click any picture');\r

  \    return 10;\r

  \  }\r

  \  interact(ev) {\r

  \    ev.cancelBubble = true;\r

  \    if (!canAct()) return;\r

  \    let pic = findItemFromEvent(Pictures, ev);\r

  \    if (!isEmpty(this.piclist) && this.piclist.length < this.numRepeat - 1
  && this.piclist[0].label != pic.label) return;\r

  \    toggleSelectionOfPicture(pic, this.piclist);\r

  \    if (isEmpty(this.piclist)) {\r

  \      let wr = this.language == 'E' ? 'click any picture' : 'click
  irgendein Bild';\r

  \      show_instruction(wr, dTitle, wr);\r

  \    } else if (this.piclist.length < this.numRepeat - 1) {\r

  \      let wr = (this.language == 'E' ? 'click another ' : 'click ein andres
  Bild mit ');\r

  \      show_instruction(wr + `<b>${pic.label.toUpperCase()}</b>`, dTitle, wr
  + pic.label);\r

  \    } else if (this.piclist.length == this.numRepeat - 1) {\r

  \      let picGoal = firstCond(Pictures, x => x.label == pic.label &&
  !x.isSelected);\r

  \      setGoal(picGoal.index);\r

  \      let wr = (this.language == 'E' ? 'click the ' + (this.numRepeat == 2
  ? 'other ' : 'last ')\r

  \        : 'click das ' + (this.numRepeat == 2 ? 'andere ' : 'letzte ') + '
  Bild mit')\r

  \      show_instruction(wr + `<b>${picGoal.label.toUpperCase()}</b>`,
  dTitle, wr + picGoal.label);\r

  \    } else {\r

  \      this.controller.evaluate.bind(this.controller)(this.piclist);\r

  \    }\r

  \  }\r

  \  eval(piclist) {\r

  \    Selected = { piclist: piclist, feedbackUI: piclist.map(x => iDiv(x)),
  sz: getRect(iDiv(piclist[0])).h };\r

  \    let req = Selected.reqAnswer = piclist[0].label;\r

  \    Selected.answer = piclist[piclist.length - 1].label;\r

  \    if (Selected.answer == req) { return true; } else { return false; }\r

  \  }\r

  }"
GRiddle: "class GRiddle extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  startGame() {\r

  \    this.successFunc = successThumbsUp; this.failFunc = failThumbsDown;\r

  \    this.correctionFunc = () => {\r

  \      mStyle(Goal.buttonCorrect, { bg: 'green' });\r

  \      animate(Goal.buttonCorrect, 'komisch', 1000);\r

  \      return 20000;\r

  \    };\r

  \  }\r

  \  prompt() {\r

  \    this.trials = 1;\r

  \    show_instruction('Solve the Riddle:', dTitle, 'Solve the Riddle:');\r

  \    let wp = this.wp = getRandomWP(this.minIndex, this.maxIndex);\r

  \    let haveResult = wp.isTextResult = instantiateNames(wp);\r

  \    if (!haveResult) instantiateNumbers(wp);\r

  \    mLinebreak(dTable, 2);\r

  \    showHiddenThumbsUpDown(90);\r

  \    mLinebreak(dTable);\r

  \    let dArea = this.textArea = mDiv(dTable, { w: '70%' });\r

  \    let d = mText(wp.text, dArea, { fz: 28 });\r

  \    mLinebreak(dTable, 20);\r

  \    let dResult = this.dResult = mDiv(dTable);\r

  \    Goal = { label: wp.result.text };\r

  \    this.createMultipleChoiceElements();\r

  \    mLinebreak(dTable);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  createMultipleChoiceElements() {\r

  \    let wp = this.wp;\r

  \    let choices = [], nums = [], texts = [];\r

  \    if (wp.isTextResult == true) {\r

  \      texts = Object.values(wp.diNames);\r

  \      for (let i = 0; i < texts.length; i++) { choices.push({ number: 0,
  text: texts[i] }); }\r

  \      Goal.correctChoice = firstCond(choices, x => x.text == Goal.label);\r

  \    } else if (wp.isFractionResult == true) {\r

  \      let res = wp.result.number;\r

  \      if (res.n / res.d > 2) {\r

  \        wp.result.isMixed = true;\r

  \        wp.result.mixed = getMixedNumber(res.n, res.d);\r

  \      }\r

  \      nums = get3FractionVariants(res);\r

  \      texts = nums.map(x => getTextForFractionX(x.n, x.d));\r

  \      wp.result.text = texts[0];\r

  \      for (let i = 0; i < texts.length; i++) { choices.push({ number:
  nums[i], text: texts[i] }); }\r

  \      Goal.correctChoice = firstCond(choices, x => x.text ==
  wp.result.text);\r

  \    } else {\r

  \      let res = wp.result.number;\r

  \      nums = [res, res + randomNumber(1, 25), res / randomNumber(2, 5), res
  * randomNumber(2, 5)];\r

  \      texts = nums.map(x => (Math.round(x * 100) / 100));\r

  \      for (let i = 0; i < texts.length; i++) { choices.push({ number:
  nums[i], text: texts[i] }); }\r

  \      Goal.correctChoice = choices[0];\r

  \    }\r

  \    shuffle(choices);\r

  \    if (coin()) shuffle(choices);\r

  \    Goal.choices = choices;\r

  \    let dParent = this.dResult;\r

  \    let idx = 0;\r

  \    for (const ch of choices) {\r

  \      ////'&frac57;', //'&frac12;', \r

  \      let dButton = mButton(ch.text, this.onClickChoice.bind(this),
  dParent, { wmin: 100, fz: 36, margin: 20, rounding: 4, vpadding: 4, hpadding:
  10 }, ['toggleButtonClass']);\r

  \      dButton.id = 'bChoice_' + idx; idx += 1;\r

  \      if (ch.text == wp.result.text) {\r

  \        Goal.choice = ch.toString();\r

  \        Goal.buttonCorrect = dButton;\r

  \      }\r

  \    }\r

  \  }\r

  \  onClickChoice(ev) {\r

  \    let id = evToClosestId(ev);\r

  \    let b = mBy(id);\r

  \    let index = Number(stringAfter(id, '_'));\r

  \    Goal.choice = Goal.choices[index];\r

  \    Goal.buttonClicked = b;\r

  \    if (Goal.choice == Goal.correctChoice) { mStyle(b, { bg: 'green' });
  mCheckit(this.textArea, 100); }\r

  \    else { mXit(b, 100); }\r

  \    this.controller.evaluate.bind(this.controller)();\r

  \  }\r

  \  eval() {\r

  \    clearFleetingMessage();\r

  \    Selected = { delay: 5000, reqAnswer: this.wp.result.number, answer:
  Goal.choice.number, feedbackUI: Goal.buttonClicked };\r

  \    if (this.wp.isTextResult) { Selected.reqAnswer = this.wp.result.text;
  Selected.answer = Goal.choice.text; }\r

  \    return (Goal.buttonClicked == Goal.buttonCorrect);\r

  \  }\r

  \  createInputElements() {\r

  \    this.inputBox = addNthInputElement(this.dResult, 0);\r

  \    this.defaultFocusElement = this.inputBox.id;\r

  \    onclick = () => mBy(this.defaultFocusElement).focus();\r

  \    mBy(this.defaultFocusElement).focus();\r

  \  }\r

  \  activate() { }\r

  \  eval_dep(ev) {\r

  \    console.log('#', this.trialNumber, 'of', this.trials);\r

  \    clearFleetingMessage();\r

  \    Selected = {};\r

  \    let answer = normalize(this.inputBox.value, 'E');\r

  \    let reqAnswer = normalize(this.wp.result.text, 'E');\r

  \    console.log('answer', answer, 'req', reqAnswer);\r

  \    let isCorrect = answer == reqAnswer;\r

  \    Selected = { reqAnswer: reqAnswer, answer: answer, feedbackUI:
  isCorrect ? Goal.buttonClicked : Goal.buttonCorrect };\r

  \    return (answer == reqAnswer);\r

  \  }\r

  \  trialPrompt_dep() {\r

  \    sayTryAgain();\r

  \    let n = this.trialNumber;\r

  \    showFleetingMessage('try again!', 0, {}, true);\r

  \    this.inputBox = addNthInputElement(this.dResult, this.trialNumber);\r

  \    this.defaultFocusElement = this.inputBox.id;\r

  \    mLinebreak(dTable);\r

  \    return 10;\r

  \  }\r

  \  activate_input() {\r

  \    this.inputBox.onkeyup = ev => {\r

  \      if (!canAct()) return;\r

  \      if (ev.key === \"Enter\") {\r

  \        ev.cancelBubble = true;\r

  \        this.controller.evaluate.bind(this.controller)(ev);\r

  \      }\r

  \    };\r

  \    this.inputBox.focus();\r

  \  }\r

  }"
GSentence: "class GSentence extends Game {\r

  \  constructor(name, o) {\r

  \    super(name, o);\r

  \    this.prevLanguage = this.language;\r

  \    this.language = 'E';\r

  \  }\r

  \  startGame() {\r

  \    this.correctionFunc = () => {\r

  \      let sent = this.sentenceList[0].join(' ');\r

  \      this.dWordArea.innerHTML = `<h1>${sent}</h1>`;\r

  \      if (this.spokenFeedback) sayRandomVoice(sent);\r

  \      return 3000;\r

  \    }\r

  \    this.successFunc = () => { mCheckit(this.dWordArea, 120); };\r

  \  }\r

  \  clear() { super.clear(); this.language = this.prevLanguage; }\r

  \  start_Level() {\r

  \    this.sentences = [];\r

  \    for (const s of EnglishSentences) {\r

  \      let slist = isList(s) ? s : [s];\r

  \      slist = slist.map(x => x.split(' '));\r

  \      if (slist[0].length <= this.maxWords && slist[0].length >=
  this.minWords) this.sentences.push(slist);\r

  \    }\r

  \  }\r

  \  dropHandler(source, target, isCopy = false, clearTarget = false) {\r

  \    let prevTarget = source.target;\r

  \    source.target = target;\r

  \    let dSource = iDiv(source);\r

  \    let dTarget = iDiv(target);\r

  \    if (clearTarget) {\r

  \      let ch = dTarget.children[0];\r

  \      let chSource = firstCond(Pictures, x => iDiv(x) == ch);\r

  \      if (chSource) {\r

  \        if (isdef(prevTarget)) {\r

  \          mAppend(iDiv(prevTarget), ch);\r

  \          chSource.target = prevTarget;\r

  \        } else {\r

  \          mAppend(this.dWordArea, ch);\r

  \          delete chSource.target;\r

  \        }\r

  \      }\r

  \      clearElement(dTarget);\r

  \    }\r

  \    if (isCopy) {\r

  \      let dNew = mText(dSource.innerHTML, dTarget, { wmin: 100, fz: 20,
  padding: 4, margin: 4, display: 'inline-block' });\r

  \      addDDSource(dNew, isCopy, clearTarget);\r

  \    } else {\r

  \      mAppend(dTarget, dSource);\r

  \    }\r

  \  }\r

  \  prompt() {\r

  \    show_instruction('form a correct sentence', dTitle, 'form a correct
  sentence');\r

  \    mLinebreak(dTable);\r

  \    let sl = this.sentenceList = chooseRandom(this.sentences);\r

  \    let words = this.sentenceList[0];\r

  \    let fz = 32;\r

  \    let h = fz * 1.25, wmin = fz * 1.25;\r

  \    let items = Pictures = [];\r

  \    let containers = this.containers = [];\r

  \    let options = _simpleOptions({ fz: fz, bg: 'transparent', fg: 'white',
  showPic: false, showLabels: true }, { wmin: wmin });\r

  \    let dArea = mDiv(dTable, { h: 150, display: 'flex', 'flex-wrap':
  'wrap', layout: 'fhcc' });\r

  \    mLinebreak(dTable);\r

  \    let dWordArea = this.dWordArea = mDiv(dTable, { h: 70, wmin: 20,
  display: 'flex', 'flex-wrap': 'wrap', layout: 'fhcc' });\r

  \    let i = 0;\r

  \    for (const word of words) {\r

  \      let item = { label: word, index: i };\r

  \      let container = { label: word, index: i };\r

  \      i += 1;\r

  \      let d = makeItemDiv(item, options);\r

  \      let dCont = mDiv(dArea, { wmin: wmin + 12, hmin: h + 10, bg:
  colorTrans('beige', .25), fg: 'black', margin: 12 });\r

  \      container.div = dCont;\r

  \      items.push(item);\r

  \      containers.push(container);\r

  \    }\r

  \    shuffle(items);\r

  \    items.map(x => { mAppend(dWordArea, iDiv(x)); mStyle(iDiv(x), { h: h,
  w: 'auto' }); });\r

  \    enableDD(items, containers, this.dropHandler.bind(this), false,
  true);\r

  \    mLinebreak(dTable, 50);\r

  \    mButton('Done!', this.controller.evaluate.bind(this.controller),
  dTable, { fz: 28, matop: 10, rounding: 10, padding: 16, border: 8 },
  ['buttonClass']);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    sayTryAgain();\r

  \    showFleetingMessage('Try again!', 0, { fg: 'white' });\r

  \    TOMain = setTimeout(() => { Pictures.map(x => mAppend(this.dWordArea,
  iDiv(x))); }, 1200);\r

  \    return 1500;\r

  \  }\r

  \  eval() {\r

  \    let words = [];\r

  \    for (const cont of this.containers) {\r

  \      let d = iDiv(cont);\r

  \      let ch = d.firstChild;\r

  \      if (ch && isdef(ch.firstChild)) {\r

  \        words.push(ch.firstChild.innerHTML);\r

  \      } else break;\r

  \    }\r

  \    let answer = words.join(' ');\r

  \    let isCorrect = false;\r

  \    for (const sent of this.sentenceList) {\r

  \      let variant = sent.join(' ');\r

  \      if (answer == variant) isCorrect = true;\r

  \    }\r

  \    Selected = { piclist: Pictures, feedbackUI: Pictures.map(x => iDiv(x)),
  sz: getRect(iDiv(Pictures[0])).h + 10 };\r

  \    return isCorrect;\r

  \  }\r

  }"
GSteps: "class GSteps extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  startGame() { this.correctionFunc = showCorrectWords; }\r

  \  start_Level() {\r

  \    super.start_Level();\r

  \    this.keys = this.keys.filter(x => containsColorWord(x));\r

  \  }\r

  \  prompt() {\r

  \    this.piclist = [];\r

  \    let colorKeys = this.numColors > 1 ? choose(this.colors,
  this.numColors) : null;\r

  \    let bg = this.numColors > 1 || this.numRepeat > 1 ? 'white' :
  'random';\r

  \    let rows = this.numColors > 1 ? this.numColors : undefined;\r

  \    let showRepeat = this.numRepeat > 1;\r

  \    myShowPics(this.interact.bind(this), { bg: bg },\r

  \      { rows: rows, showRepeat: showRepeat, colorKeys: colorKeys,
  numRepeat: this.numRepeat, contrast: this.contrast });\r

  \    setMultiGoal(this.numSteps);\r

  \    let cmd = 'click';\r

  \    let spoken = [], written = [], corr = [];\r

  \    for (let i = 0; i < this.numSteps; i++) {\r

  \      let goal = Goal.pics[i];\r

  \      let sOrdinal = getOrdinal(goal.iRepeat);\r

  \      [written[i], spoken[i], corr[i]] =
  getOrdinalColorLabelInstruction(cmd, sOrdinal, goal.color, goal.label);\r

  \      goal.correctionPhrase = corr[i];\r

  \      cmd = 'then';\r

  \    }\r

  \    let sWritten = this.showVisualInstruction ? written.join('; ') :
  'listen to instruction!';\r

  \    show_instruction(sWritten, dTitle, spoken.join('. '), { fz: 20 });\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    sayTryAgain();\r

  \    showFleetingMessage(this.message, 0);\r

  \    return 1000;\r

  \  }\r

  \  activate() {\r

  \    for (const p of this.piclist) { toggleSelectionOfPicture(p); }\r

  \    this.piclist = [];\r

  \  }\r

  \  interact(ev) {\r

  \    ev.cancelBubble = true;\r

  \    if (!canAct()) { console.log('no act'); return; }\r

  \    let pic = findItemFromEvent(Pictures, ev);\r

  \    toggleSelectionOfPicture(pic, this.piclist);\r

  \    if (this.piclist.length == Goal.pics.length) {\r

  \      clearFleetingMessage();\r

  \      Selected = { piclist: this.piclist };
  this.controller.evaluate.bind(this.controller)();\r

  \    }\r

  \  }\r

  \  eval() {\r

  \    Selected = { piclist: this.piclist, feedbackUI: this.piclist.map(x =>
  iDiv(x)), sz: getRect(iDiv(this.piclist[0])).h };\r

  \    let isCorrect = true;\r

  \    this.message = this.language == 'D' ? 'beachte die REIHENFOLGE!' :
  'mind the ORDER!';\r

  \    for (let i = 0; i < this.piclist.length; i++) {\r

  \      let p = this.piclist[i];\r

  \      if (!Goal.pics.includes(p)) this.message = this.language == 'D' ?
  'noch einmal!' : 'try again!';\r

  \      if (this.piclist[i] != Goal.pics[i]) isCorrect = false;\r

  \    }\r

  \    return isCorrect;\r

  \  }\r

  }"
GSwap: "class GSwap extends Game {\r

  \  constructor(name, o) {\r

  \    super(name, o);\r

  \    if (this.language == 'C') { this.prevLanguage = this.language;
  this.language = chooseRandom('E', 'D'); }\r

  \    ensureDictionary();\r

  \  }\r

  \  startGame() { this.correctionFunc = showCorrectLabelSwapping; }\r

  \  clear() { super.clear(); if (isdef(this.prevLanguage)) this.language =
  this.prevLanguage; }\r

  \  start_Level() {\r

  \    this.keys = setKeysG(this, filterWordByLengthG, 25);\r

  \    if (this.keys.length < 25) { this.keys = setKeysG(this,
  filterWordByLengthG, 25, 'all'); }\r

  \    this.trials = 2;\r

  \  }\r

  \  dropHandler(source, target, isCopy = false, clearTarget = false) {\r

  \    let prevTarget = source.target;\r

  \    source.target = target;\r

  \    let dSource = iDiv(source);\r

  \    let dTarget = iDiv(target);\r

  \    if (clearTarget) {\r

  \      let ch = dTarget.children[0];\r

  \      let chSource = firstCond(Pictures, x => iDiv(x) == ch);\r

  \      if (chSource) {\r

  \        if (isdef(prevTarget)) {\r

  \          mAppend(iDiv(prevTarget), ch);\r

  \          chSource.target = prevTarget;\r

  \        } else {\r

  \          mAppend(this.dWordArea, ch);\r

  \          delete chSource.target;\r

  \        }\r

  \      }\r

  \      clearElement(dTarget);\r

  \    }\r

  \    if (isCopy) {\r

  \      let dNew = mText(dSource.innerHTML, dTarget, { wmin: 100, fz: 20,
  padding: 4, margin: 4, display: 'inline-block' });\r

  \      addDDSource(dNew, isCopy, clearTarget);\r

  \    } else {\r

  \      mAppend(dTarget, dSource);\r

  \    }\r

  \  }\r

  \  prompt() {\r

  \    show_instruction('swap letter to form words', dTitle, 'swap letter to
  form words');\r

  \    mLinebreak(dTable);\r

  \    let fz = 32;\r

  \    let options = _simpleOptions({ language: this.language, w: 200, h: 200,
  keySet: this.keys, luc: 'u', fz: fz, bg: 'random', fg: 'white', showLabels:
  true });\r

  \    let n = 2;\r

  \    let items = gatherItems(n, options);\r

  \    let style = { margin: 3, cursor: 'pointer', fg: 'white', display:
  'inline', bg: '#00000020', align: 'center', border: 'transparent', outline:
  'none', family: 'Consolas', fz: 80 };\r

  \    for (const item of items) {\r

  \      let d1 = item.container = mDiv(dTable, { hmin: 250 });\r

  \      let d = iLetters(item.label, d1, style);\r

  \      iAdd(item, { div: d });\r

  \      let letters = item.letters = [];\r

  \      for (let i = 0; i < arrChildren(d).length; i++) {\r

  \        let ch = d.children[i];\r

  \        let l = {\r

  \          itemId: item.id, div: ch, i: i, letter: ch.innerHTML,\r

  \          swapInfo: item.swaps[i],\r

  \          state: 'swapped',\r

  \          isBlinking: false, fg: 'white', bg: 'transparent'\r

  \        };\r

  \        letters.push(l);\r

  \        ch.onclick = () => { startBlinking(l, item.letters, true) };\r

  \      }\r

  \      mStyle(d, { margin: 35 });\r

  \      delete item.swaps;\r

  \    }\r

  \    showPictureHints(Pictures, 'container');\r

  \    mLinebreak(dTable, 50);\r

  \    this.buttonDone = mButton('Done!', () => {\r

  \      if (!canAct()) return;\r

  \      for (let i = 0; i < Pictures.length; i++) {\r

  \        let p = Pictures[i];\r

  \        let blinking = getBlinkingLetter(p);\r

  \        if (!blinking) {\r

  \          let msg = 'You need to pick 1 letter to swap in EACH word!!!';\r

  \          Speech.say(msg);\r

  \          sayRandomVoice(msg);\r

  \          showFleetingMessage('You need to pick 1 letter to swap in EACH
  word!!!', 0, { fz: 30 });\r

  \          return;\r

  \        }\r

  \      }\r

  \      this.controller.evaluate.bind(this.controller)();\r

  \    }, dTable, { fz: 28, matop: 10, rounding: 10, padding: 16, border: 8 },
  ['buttonClass']);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    if (this.trialNumber % 2 == 0) showPictureHints(Pictures, 'container');
  else showTextHints(Pictures, 'container', 'origLabel');\r

  \    TOMain = setTimeout(() => {\r

  \      for (const p of Pictures) {\r

  \        for (const l of p.letters) {\r

  \          l.state = 'swapped';\r

  \          if (isdef(l.swapInfo)) {\r

  \            iDiv(l).innerHTML = p.label[l.i];\r

  \          }\r

  \        }\r

  \      }\r

  \    }, 1500);\r

  \    return 1800;\r

  \  }\r

  \  activate() {\r

  \    if (this.trialNumber >= 1) { sayTryAgain(); showFleetingMessage('Try
  again!'); }\r

  \    else { showFleetingMessage('click one letter in each word!'); }\r

  \  }\r

  \  eval() {\r

  \    let n = Pictures.length;\r

  \    let blinkInfo = this.blinkInfo = [];\r

  \    clearFleetingMessage();\r

  \    for (let i = 0; i < n; i++) {\r

  \      let p = Pictures[i];\r

  \      let blinking = getBlinkingLetter(p);\r

  \      blinkInfo.push({ i: i, blinking: blinking });\r

  \    }\r

  \    for (let i = 0; i < n; i++) { let l = blinkInfo[i].blinking; if (!l)
  continue; stopBlinking(l); }\r

  \    for (const blinki of blinkInfo) { if (!blinki.blinking) { return false;
  } }\r

  \    let isCorrect = true;\r

  \    for (let i = 0; i < n; i++) {\r

  \      let b1 = blinkInfo[i].blinking;\r

  \      let b2 = blinkInfo[(i + 1) % blinkInfo.length].blinking;\r

  \      let item = Items[b1.itemId];\r

  \      let item2 = Items[b2.itemId];\r

  \      let l = item.letters[b1.i];\r

  \      let sw = l.swapInfo;\r

  \      if (nundef(sw)) { sw = l.swapInfo = { correct: { itemId: item.id,
  index: b1.i, l: b1.letter } }; }\r

  \      sw.temp = { itemId: item2.id, index: b2.i, l: b2.letter };\r

  \      item.testLabel = replaceAtString(item.label, b1.i, b2.letter);\r

  \      iDiv(l).innerHTML = b2.letter;\r

  \      l.state = 'temp';\r

  \    }\r

  \    for (const p of Pictures) { if (p.testLabel != p.origLabel) { isCorrect
  = false; } }\r

  \    let feedbackList = [];\r

  \    for (let i = 0; i < n; i++) {\r

  \      let item = Pictures[i];\r

  \      let d;\r

  \      if (isCorrect) d = iDiv(item.letters[item.iLetter]);\r

  \      else {\r

  \        let iLetter = blinkInfo[i].blinking.i;\r

  \        if (item.iLetter != iLetter) d = iDiv(item.letters[iLetter]);\r

  \      }\r

  \      if (isdef(d)) feedbackList.push(d);\r

  \    }\r

  \    Selected = { piclist: Pictures, feedbackUI: feedbackList, sz:
  getRect(iDiv(Pictures[0])).h, delay: 800 };\r

  \    return isCorrect;\r

  \  }\r

  }"
GTouchColors: "class GTouchColors extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  start_Level() {\r

  \    super.start_Level();\r

  \    this.keys = this.keys.filter(x => containsColorWord(x));\r

  \  }\r

  \  prompt() {\r

  \    let colorKeys = choose(this.colors, this.numColors);\r

  \    let rows = this.numColors;\r

  \    let showLabels = this.lang == 'C' || this.showLabels;\r

  \    console.log('showLabels', showLabels);\r

  \    myShowPics(this.controller.evaluate.bind(this.controller), { bg:
  'white' }, { showLabels: showLabels, colorKeys: colorKeys, rows: rows });\r

  \    if (this.shuffle == true) {\r

  \      let dParent = iDiv(Pictures[0]).parentNode;\r

  \      shuffleChildren(dParent);\r

  \    }\r

  \    setGoal(randomNumber(0, Pictures.length - 1));\r

  \    let [written, spoken] = getOrdinalColorLabelInstruction('click');\r

  \    show_instruction(written, dTitle, spoken);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  eval(ev) {\r

  \    ev.cancelBubble = true;\r

  \    let item = findItemFromEvent(Pictures, ev);\r

  \    Selected = { answer: item.label, reqAnswer: Goal.label, pic: item,
  feedbackUI: iDiv(item) };\r

  \    if (item == Goal) { return true; } else { return false; }\r

  \  }\r

  }"
GTouchPic: "class GTouchPic extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  prompt() {\r

  \    myShowPics(this.controller.evaluate.bind(this.controller), {}, {
  showLabels: (this.lang == 'C' || this.showLabels) });\r

  \    setGoal();\r

  \    let wr = 'click ';\r

  \    show_instruction(wr + `<b>${Goal.label.toUpperCase()}</b>`, dTitle,
  Goal.label);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  }"
GWritePic: "class GWritePic extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  startGame() {\r

  \    this.correctionFunc = showCorrectWordInTitle;\r

  \    onkeydown = ev => {\r

  \      if (!canAct()) return;\r

  \      if (isdef(this.inputBox)) { this.inputBox.focus(); }\r

  \    }\r

  \  }\r

  \  start_Level() {\r

  \    this.keys = setKeysG(this, filterWordByLengthG, 25);\r

  \    if (this.keys.length < 25) { this.keys = setKeysG(this,
  filterWordByLengthG, 25, 'all'); }\r

  \  }\r

  \  prompt() {\r

  \    let showLabels = this.showLabels == true && this.labels == true;\r

  \    myShowPics(() => mBy(this.defaultFocusElement).focus(), {}, {
  showLabels: showLabels });\r

  \    setGoal();\r

  \    if (this.instruction == 'all') {\r

  \      let wr = (this.language == 'E' ? 'type ' : \"schreib' \");\r

  \      show_instruction(wr + `<b>${Goal.label.toUpperCase()}</b>`, dTitle,
  wr + Goal.label);\r

  \    } else if (this.instruction == 'spokenGoal') {\r

  \      let wr = this.language == 'E' ? 'type the correct word' : \"schreib'
  das passende wort\";\r

  \      let sp = (this.language == 'E' ? 'type' : \"schreib'\") + ' ' +
  Goal.label;\r

  \      show_instruction(wr, dTitle, sp);\r

  \    } else {\r

  \      let wr = this.language == 'E' ? 'type the correct word' : \"schreib'
  das passende wort\";\r

  \      show_instruction(wr, dTitle, wr);\r

  \    }\r

  \    mLinebreak(dTable, 20);\r

  \    this.inputBox = addNthInputElement(dTable, this.trialNumber);\r

  \    this.defaultFocusElement = this.inputBox.id;\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    sayTryAgain();\r

  \    let n = this.trialNumber == 1 ? 1 : (this.trialNumber +
  Math.floor((Goal.label.length - this.trialNumber) / 2));\r

  \    showFleetingMessage(Goal.label.substring(0, n));\r

  \    mLinebreak(dTable);\r

  \    this.inputBox = addNthInputElement(dTable, this.trialNumber);\r

  \    this.defaultFocusElement = this.inputBox.id;\r

  \    return 10;\r

  \  }\r

  \  activate() {\r

  \    this.inputBox.onkeyup = ev => {\r

  \      if (!canAct()) return;\r

  \      if (ev.key === \"Enter\") {\r

  \        ev.cancelBubble = true;\r

  \        this.controller.evaluate.bind(this.controller)(ev);\r

  \      }\r

  \    };\r

  \    this.inputBox.focus();\r

  \  }\r

  \  eval(ev) {\r

  \    let answer = normalize(this.inputBox.value, this.language);\r

  \    let reqAnswer = normalize(Goal.label, this.language);\r

  \    let correctPrefix = this.correctPrefix = getCorrectPrefix(Goal.label,
  this.inputBox.value);\r

  \    Selected = { reqAnswer: reqAnswer, answer: answer, feedbackUI:
  iDiv(Goal) };\r

  \    if (answer == reqAnswer) { showFleetingMessage(Goal.label); return
  true; }\r

  \    else { return false; }\r

  \  }\r

  }"
GMissingNumber: "class GMissingNumber extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  startGame() {\r

  \    this.successFunc = successThumbsUp;\r

  \    this.failFunc = failThumbsDown;\r

  \    this.correctionFunc = this.showCorrectSequence.bind(this);\r

  \  }\r

  \  showCorrectSequence() { return
  numberSequenceCorrectionAnimation(getNumSeqHint); }\r

  \  start_Level() {\r

  \    if (!isList(this.steps)) this.steps = [this.steps];\r

  \    this.numPics = 2;\r

  \    this.labels = false;\r

  \  }\r

  \  prompt() {\r

  \    mLinebreak(dTable, 12);\r

  \    showHiddenThumbsUpDown(110);\r

  \    mLinebreak(dTable);\r

  \    this.step = chooseRandom(this.steps);\r

  \    this.op = chooseRandom(this.ops);\r

  \    this.oop = OPS[this.op];\r

  \    this.seq = createNumberSequence(this.seqLen, this.minNum, this.maxNum,
  this.step, this.op);\r

  \    [this.words, this.letters] = showNumberSequence(this.seq, dTable);\r

  \    setNumberSequenceGoal();\r

  \    mLinebreak(dTable);\r

  \    let instr1 = (this.language == 'E' ? 'complete the sequence' :
  \"ergänze die reihe\");\r

  \    show_instruction(instr1, dTitle, instr1);\r

  \    if (this.showHint) {\r

  \      hintEngineStart(getNumSeqHintString, [0, 1, 2, 3, 4], 5000 +
  this.level * 1000);\r

  \    }\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    let hintlist = this.trialNumber >= 4 ? [this.trialNumber] :
  range(this.trialNumber, 4);\r

  \    if (this.showHint) hintEngineStart(getNumSeqHintString, hintlist, 3000
  + this.level * 1000);\r

  \    TOMain = setTimeout(() => getWrongChars().map(x => unfillChar(x)),
  500);\r

  \    return 600;\r

  \  }\r

  \  activate() { addKeyup('G', this.interact.bind(this)); }\r

  \  interact(ev) {\r

  \    if (!isNumber(ev.key) && ev.key != '-') return;\r

  \    clearFleetingMessage();\r

  \    if (!canAct()) return;\r

  \    let sel = Selected = onKeyWordInput(ev);\r

  \    if (nundef(sel)) return;\r

  \    let lastInputCharFilled = sel.target;\r

  \    console.assert(sel.isMatch == (lastInputCharFilled.letter == sel.ch),
  lastInputCharFilled, sel.ch);\r

  \    if (sel.isMatch && sel.isVeryLast) {\r

  \      deactivateFocusGroup();\r

  \      this.controller.evaluate.bind(this.controller)(true);\r

  \    } else if (sel.isMatch && sel.isLastOfGroup) {\r

  \      sel.target.isBlank = false;\r

  \      sel.target.group.hasBlanks = false;\r

  \      removeInPlace(Goal.blankWords, sel.target.group);\r

  \      removeInPlace(Goal.blankChars, sel.target);\r

  \      deactivateFocusGroup();\r

  \      console.log('haaaaaaaaaaaalo', Goal.isFocus)\r

  \    } else if (sel.isMatch) {\r

  \      removeInPlace(Goal.blankChars, sel.target);\r

  \      sel.target.isBlank = false;\r

  \    } else if (sel.isVeryLast) {\r

  \      Selected.words = getInputWords();\r

  \      Selected.answer = getInputWordString();\r

  \      Selected.req = getCorrectWordString();\r

  \      deactivateFocusGroup();\r

  \      this.controller.evaluate.bind(this.controller)(false);\r

  \    } else if (sel.isLastOfGroup) {\r

  \      Selected.words = getInputWords();\r

  \      Selected.answer = getInputWordString();\r

  \      Selected.req = getCorrectWordString();\r

  \      deactivateFocusGroup();\r

  \      this.controller.evaluate.bind(this.controller)(false);\r

  \    } else {\r

  \      if (!this.silent) { writeSound(); playSound('incorrect1'); }\r

  \      deactivateFocusGroup();\r

  \      showFleetingMessage('does NOT fit: ' + Selected.ch, 0, { fz: 24 });\r

  \      setTimeout(() => unfillCharInput(Selected.target), 500);\r

  \    }\r

  \  }\r

  \  eval(isCorrect) { return isCorrect; }\r

  }"
GameTimed: "class GameTimed extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  clear() { clearInterval(this.TOI); super.clear(); this.timer = null; }\r

  \  makeTimer() {\r

  \    this.timer = true;\r

  \    if (nundef(this.msTotal)) this.msTotal = 5000;\r

  \    if (nundef(this.msInterval)) this.msInterval = 100;\r

  \    let w = this.wTimerOuter = 200;\r

  \    this.dTimeOuter = mDiv(dTable, { w: w, h: 25, border: 'white',
  rounding: 10, position: 'relative' });\r

  \    [this.wTimer, this.r, this.g] = [0, 0, 255];\r

  \    this.dTimeInner = mDiv(this.dTimeOuter, { h: 25, w: this.wTimer,
  rounding: 10, bg: `rgb(${this.r},${this.g},0)`, position: 'absolute', left: 0,
  top: 0 });\r

  \    this.dTimeDisplay = mDiv(this.dTimeOuter, { patop: 2, align: 'center',
  h: 25, w: w, position: 'absolute', left: 0, top: 0 });\r

  \    mLinebreak(dTable);\r

  \    this.dPause = mDiv(dTable, { cursor: 'pointer', fz: 12, hpadding: 30,
  vpadding: 10 }, null, 'click to pause');\r

  \    this.dPause.onclick = () => this.pause();\r

  \  }\r

  \  pause() {\r

  \    if (nundef(this.timer)) return;\r

  \    clearInterval(this.TOI);\r

  \    this.dPause.innerHTML = 'click to resume...';\r

  \    this.dPause.onclick = () => this.resume();\r

  \  }\r

  \  resume() {\r

  \    if (nundef(this.timer)) return;\r

  \    this.dPause.innerHTML = 'click to pause...';\r

  \    this.dPause.onclick = () => this.pause();\r

  \    this.TOI = setInterval(this.onTick.bind(this), this.msInterval);\r

  \  }\r

  \  activate() {\r

  \    if (nundef(this.timer)) return;\r

  \    this.msLeft = valf(this.msTotal, 10000);\r

  \    this.dTimeDisplay.innerHTML = timeConversion(this.msLeft, 'sh');\r

  \    this.TOI = setInterval(this.onTick.bind(this), this.msInterval);\r

  \  }\r

  \  onTick() {\r

  \    this.msLeft -= this.msInterval;\r

  \    this.wTimer += this.wTimerOuter * this.msInterval / this.msTotal;\r

  \    let inc_color = 255 * this.msInterval / this.msTotal;\r

  \    this.r += inc_color; this.g -= inc_color;\r

  \    mStyle(this.dTimeInner, { w: this.wTimer, bg:
  `rgb(${this.r},${this.g},0)` });\r

  \    this.dTimeDisplay.innerHTML = timeConversion(this.msLeft, 'sh');\r

  \    if (this.msLeft < 100) {\r

  \      clearInterval(this.TOI);\r

  \      this.dPause.style.opacity = 0;\r

  \      this.onTimeup();\r

  \    }\r

  \  }\r

  }"
GSpotit: "class GSpotit extends GameTimed {\r

  \  constructor(name, o) { super(name, o); }\r

  \  startGame() { this.correctionFunc = showCorrectUis; }\r

  \  start_Level() {\r

  \    super.start_Level();\r

  \    this.colarr = _calc_hex_col_array(this.rows, this.cols);\r

  \    let perCard = arrSum(this.colarr);\r

  \    this.nShared = (this.numCards * (this.numCards - 1)) / 2;\r

  \    this.nUnique = perCard - this.numCards + 1;\r

  \    this.numKeysNeeded = this.nShared + this.numCards * this.nUnique;\r

  \    this.keys = setKeysG(this, (_, x) => !x.includes(' '),
  this.numKeysNeeded + 1);\r

  \  }\r

  \  deal() {\r

  \    let keys = choose(this.keys, this.numKeysNeeded);\r

  \    let dupls = keys.slice(0, this.nShared);\r

  \    let uniqs = keys.slice(this.nShared);\r

  \    let infos = [];\r

  \    for (let i = 0; i < this.numCards; i++) {\r

  \      let keylist = uniqs.slice(i * this.nUnique, (i + 1) *
  this.nUnique);\r

  \      let info = { id: getUID(), shares: {}, keys: keylist, rows:
  this.rows, cols: this.cols, colarr: this.colarr };\r

  \      infos.push(info);\r

  \    }\r

  \    let iShared = 0;\r

  \    for (let i = 0; i < this.numCards; i++) {\r

  \      for (let j = i + 1; j < this.numCards; j++) {\r

  \        let c1 = infos[i];\r

  \        let c2 = infos[j];\r

  \        let dupl = dupls[iShared++];\r

  \        c1.keys.push(dupl);\r

  \        c1.shares[c2.id] = dupl;\r

  \        c2.shares[c1.id] = dupl;\r

  \        c2.keys.push(dupl);\r

  \      }\r

  \    }\r

  \    for (const info of infos) { shuffle(info.keys); }\r

  \    return infos;\r

  \  }\r

  \  interact(ev) {\r

  \    ev.cancelBubble = true;\r

  \    if (!canAct()) { console.log('no act'); return; }\r

  \    let keyClicked = evToProp(ev, 'key');\r

  \    let id = evToId(ev);\r

  \    if (isdef(keyClicked) && isdef(Items[id])) {\r

  \      this.pause();\r

  \      let item = Items[id];\r

  \      if (Object.values(item.shares).includes(keyClicked)) {\r

  \        let otherCard = spotitFindCardSharingSymbol(item, keyClicked);\r

  \        let cardSymbol = ev.target;\r

  \        let otherSymbol = spotitFindSymbol(otherCard, keyClicked);\r

  \        Selected = { isCorrect: true, feedbackUI: [cardSymbol, otherSymbol]
  };\r

  \      } else {\r

  \        let cardSymbol = ev.target;\r

  \        Selected = { isCorrect: false, feedbackUI: [cardSymbol],
  correctUis: this.getSharedSymbols(), correctionDelay: this.items.length * 1500
  };\r

  \      }\r

  \      this.controller.evaluate.bind(this.controller)();\r

  \    }\r

  \  }\r

  \  getSharedSymbols() {\r

  \    let result = [];\r

  \    for (const item of this.items) {\r

  \      for (const id in item.shares) {\r

  \        let k = item.shares[id];\r

  \        let ui = iGetl(item, k);\r

  \        result.push(ui);\r

  \      }\r

  \    }\r

  \    return result;\r

  \  }\r

  \  eval() { return Selected.isCorrect; }\r

  \  prompt() {\r

  \    this.trials = 1;\r

  \    show_instruction('find common symbol', dTitle);\r

  \    mLinebreak(dTable, 25);\r

  \    let infos = this.deal();\r

  \    let items = this.items = [];\r

  \    for (const info of infos) {\r

  \      let item = spotitCard(info, dTable, { margin: 10 },
  this.interact.bind(this));\r

  \      items.push(item);\r

  \    }\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  activate() { }\r

  \  onTimeup() {\r

  \    Selected = { isCorrect: false, correctUis: this.getSharedSymbols(),
  correctionDelay: this.items.length * 2000 };\r

  \    this.controller.evaluate.bind(this.controller)();\r

  \  }\r

  }"
GSpotitMulti: "class GSpotitMulti extends GSpotit {\r

  \  constructor(name, o) { super(name, o); }\r

  \  make_players(table) {\r

  \    let players = this.players = {};\r

  \    for (const plname of table.players) {\r

  \      players[plname] = { name: plname, color:
  getColorDictColor(DB.users[plname].color), imgPath:
  `../base/assets/images/${plname}.jpg`, score: 0 };\r

  \    }\r

  \    this.player = Session.cur_user;\r

  \    this.me = players[this.player];\r

  \    this.others = Object.values(players).filter(x => x.name !=
  this.player);\r

  \  }\r

  \  startGame() {\r

  \    resetState();\r

  \    this.successFunc = successPictureGoal;\r

  \    this.failFunc = failPictureGoal;\r

  \    this.correctionFunc = showCorrectUis;\r

  \    this.numCards = 2;\r

  \    this.colarr = _calc_hex_col_array(this.rows, this.cols);\r

  \    let perCard = arrSum(this.colarr);\r

  \    this.nShared = (this.numCards * (this.numCards - 1)) / 2;\r

  \    this.nUnique = perCard - this.numCards + 1;\r

  \    this.numKeysNeeded = this.nShared + this.numCards * this.nUnique;\r

  \    this.keys = setKeysG(this, (_, x) => !x.includes(' '),
  this.numKeysNeeded + 1);\r

  \    resetRound();\r

  \    uiActivated = false;\r

  \    QContextCounter += 1;\r

  \    showStats(false);\r

  \    this.update_status();\r

  \    show_title(Session.table.friendly);\r

  \    this.trialNumber = 0;\r

  \    hide('sidebar');\r

  \    this.trials = 1;\r

  \    this.startTime = get_timestamp();\r

  \    mLinebreak(dTable, 25);\r

  \    let infos = this.deal();\r

  \    let items = this.items = [];\r

  \    for (const info of infos) {\r

  \      let item = spotitCard(info, dTable, { margin: 10 },
  this.interact.bind(this));\r

  \      items.push(item);\r

  \    }\r

  \    Selected = null;\r

  \    uiActivated = true;\r

  \  }\r

  \  update_status() {\r

  \    let d = dTitle;\r

  \    clearElement(d);\r

  \    let d1 = mDiv(d, { display: 'flex', 'justify-content': 'center' });\r

  \    for (const plname in this.players) {\r

  \      let pl = this.players[plname];\r

  \      let d2 = mDiv(d1, { vmargin: 10, hmargin: 20, align: 'center' },
  null, `<img src='${pl.imgPath}' style=\"display:block\" class='img_person'
  width=50 height=50>${pl.score}`);\r

  \    }\r

  \  }\r

  \  evaluate() {\r

  \    if (!canAct()) return;\r

  \    uiActivated = false; clearTimeouts();\r

  \    IsAnswerCorrect = Selected.isCorrect;\r

  \    this.me.score += IsAnswerCorrect ? 1 : 0;\r

  \    user_game_status();\r

  \  }\r

  \  //#region spotit\r

  \  interact(ev) {\r

  \    ev.cancelBubble = true;\r

  \    if (!canAct()) { console.log('no act'); return; }\r

  \    let keyClicked = evToProp(ev, 'key');\r

  \    let id = evToId(ev);\r

  \    if (isdef(keyClicked) && isdef(Items[id])) {\r

  \      this.pause();\r

  \      let item = Items[id];\r

  \      if (Object.values(item.shares).includes(keyClicked)) {\r

  \        let otherCard = spotitFindCardSharingSymbol(item, keyClicked);\r

  \        let cardSymbol = ev.target;\r

  \        let otherSymbol = spotitFindSymbol(otherCard, keyClicked);\r

  \        Selected = { isCorrect: true, feedbackUI: [cardSymbol, otherSymbol]
  };\r

  \      } else {\r

  \        let cardSymbol = ev.target;\r

  \        Selected = { isCorrect: false, feedbackUI: [cardSymbol],
  correctUis: this.getSharedSymbols(), correctionDelay: this.items.length * 1500
  };\r

  \      }\r

  \      this.evaluate.bind(this)();\r

  \    }\r

  \  }\r

  \  deal() {\r

  \    let keys = choose(this.keys, this.numKeysNeeded);\r

  \    let dupls = keys.slice(0, this.nShared);\r

  \    let uniqs = keys.slice(this.nShared);\r

  \    let infos = [];\r

  \    for (let i = 0; i < this.numCards; i++) {\r

  \      let keylist = uniqs.slice(i * this.nUnique, (i + 1) *
  this.nUnique);\r

  \      let info = { id: getUID(), shares: {}, keys: keylist, rows:
  this.rows, cols: this.cols, colarr: this.colarr };\r

  \      infos.push(info);\r

  \    }\r

  \    let iShared = 0;\r

  \    for (let i = 0; i < this.numCards; i++) {\r

  \      for (let j = i + 1; j < this.numCards; j++) {\r

  \        let c1 = infos[i];\r

  \        let c2 = infos[j];\r

  \        let dupl = dupls[iShared++];\r

  \        c1.keys.push(dupl);\r

  \        c1.shares[c2.id] = dupl;\r

  \        c2.shares[c1.id] = dupl;\r

  \        c2.keys.push(dupl);\r

  \      }\r

  \    }\r

  \    for (const info of infos) { shuffle(info.keys); }\r

  \    return infos;\r

  \  }\r

  \  getSharedSymbols() {\r

  \    let result = [];\r

  \    for (const item of this.items) {\r

  \      for (const id in item.shares) {\r

  \        let k = item.shares[id];\r

  \        let ui = iGetl(item, k);\r

  \        result.push(ui);\r

  \      }\r

  \    }\r

  \    return result;\r

  \  }\r

  \  //#endregion\r

  }"
GSpotitMulti_mess: "class GSpotitMulti_mess extends GSpotit {\r

  \  constructor(name, o) { super(name, o); }\r

  \  static start_fen(players) { let fen = {}; for (const pl of players) {
  fen[pl] = 0; } return fen; }\r

  \  fen_to_state(fen) {\r

  \    console.log('fen', fen);\r

  \    this.playerscores = isDict(fen) ? fen : JSON.parse(fen);\r

  \    for (const plname in this.players) { let pl = this.players[plname];
  pl.score = this.playerscores[plname]; }\r

  \    console.log('players', this.players);\r

  \  }\r

  \  make_players(table) {\r

  \    let players = this.players = {};\r

  \    for (const plname of table.players) {\r

  \      players[plname] = { name: plname, color:
  getColorDictColor(DB.users[plname].color), imgPath:
  `../base/assets/images/${plname}.jpg`, score: 0 };\r

  \    }\r

  \    this.player = Session.cur_user;\r

  \    this.me = players[this.player];\r

  \    this.others = Object.values(players).filter(x => x.name !=
  this.player);\r

  \  }\r

  \  make_fen_vor_move(table, moves = []) { return table.fen; }\r

  \  make_fen_after_move() {\r

  \    this.me.score += IsAnswerCorrect ? 1 : 0;\r

  \    let fen = {};\r

  \    for (const plname in this.players) {\r

  \      let pl = this.players[plname];\r

  \      fen[plname] = pl.score;\r

  \    }\r

  \    return fen;\r

  \  }\r

  \  startGame(fen) {\r

  \    resetState();\r

  \    this.successFunc = successPictureGoal;\r

  \    this.failFunc = failPictureGoal;\r

  \    this.correctionFunc = showCorrectUis;\r

  \    console.log(this.player);\r

  \    Settings.updateGameValues(this.player, this);\r

  \    super.start_level();\r

  \    this.numCards = 2;\r

  \    this.colarr = _calc_hex_col_array(this.rows, this.cols);\r

  \    let perCard = arrSum(this.colarr);\r

  \    this.nShared = (this.numCards * (this.numCards - 1)) / 2;\r

  \    this.nUnique = perCard - this.numCards + 1;\r

  \    this.numKeysNeeded = this.nShared + this.numCards * this.nUnique;\r

  \    this.keys = setKeysG(this, (_, x) => !x.includes(' '),
  this.numKeysNeeded + 1);\r

  \    this.fen_to_state(fen);\r

  \    resetRound();\r

  \    uiActivated = false;\r

  \    TOMain = setTimeout(() => this.prompt(), 300);\r

  \  }\r

  \  update_status() {\r

  \    let d = dTitle;\r

  \    clearElement(d);\r

  \    let d1 = mDiv(d, { display: 'flex', 'justify-content': 'center' });\r

  \    for (const plname in this.players) {\r

  \      let pl = this.players[plname];\r

  \      let d2 = mDiv(d1, { vmargin: 10, hmargin: 20, align: 'center' },
  null, `<img src='${pl.imgPath}' style=\"display:block\" class='img_person'
  width=50 height=50>${pl.score}`);\r

  \    }\r

  \  }\r

  \  prompt() {\r

  \    QContextCounter += 1;\r

  \    showStats(false);\r

  \    this.update_status();\r

  \    show_title(Session.table.friendly);\r

  \    this.trialNumber = 0;\r

  \    hide('sidebar');\r

  \    this.trials = 1;\r

  \    this.startTime = get_timestamp();\r

  \    mLinebreak(dTable, 25);\r

  \    let infos = this.deal();\r

  \    let items = this.items = [];\r

  \    for (const info of infos) {\r

  \      let item = spotitCard(info, dTable, { margin: 10 },
  this.interact.bind(this));\r

  \      items.push(item);\r

  \    }\r

  \    this.activateUi.bind(this)();\r

  \  }\r

  \  activateUi() {\r

  \    Selected = null;\r

  \    uiActivated = true;\r

  \    this.activate();\r

  \  }\r

  \  deal() {\r

  \    let keys = choose(this.keys, this.numKeysNeeded);\r

  \    let dupls = keys.slice(0, this.nShared);\r

  \    let uniqs = keys.slice(this.nShared);\r

  \    let infos = [];\r

  \    for (let i = 0; i < this.numCards; i++) {\r

  \      let keylist = uniqs.slice(i * this.nUnique, (i + 1) *
  this.nUnique);\r

  \      let info = { id: getUID(), shares: {}, keys: keylist, rows:
  this.rows, cols: this.cols, colarr: this.colarr };\r

  \      infos.push(info);\r

  \    }\r

  \    let iShared = 0;\r

  \    for (let i = 0; i < this.numCards; i++) {\r

  \      for (let j = i + 1; j < this.numCards; j++) {\r

  \        let c1 = infos[i];\r

  \        let c2 = infos[j];\r

  \        let dupl = dupls[iShared++];\r

  \        c1.keys.push(dupl);\r

  \        c1.shares[c2.id] = dupl;\r

  \        c2.shares[c1.id] = dupl;\r

  \        c2.keys.push(dupl);\r

  \      }\r

  \    }\r

  \    for (const info of infos) { shuffle(info.keys); }\r

  \    return infos;\r

  \  }\r

  \  interact(ev) {\r

  \    ev.cancelBubble = true;\r

  \    if (!canAct()) { console.log('no act'); return; }\r

  \    let keyClicked = evToProp(ev, 'key');\r

  \    let id = evToId(ev);\r

  \    if (isdef(keyClicked) && isdef(Items[id])) {\r

  \      this.pause();\r

  \      let item = Items[id];\r

  \      if (Object.values(item.shares).includes(keyClicked)) {\r

  \        let otherCard = spotitFindCardSharingSymbol(item, keyClicked);\r

  \        let cardSymbol = ev.target;\r

  \        let otherSymbol = spotitFindSymbol(otherCard, keyClicked);\r

  \        Selected = { isCorrect: true, feedbackUI: [cardSymbol, otherSymbol]
  };\r

  \      } else {\r

  \        let cardSymbol = ev.target;\r

  \        Selected = { isCorrect: false, feedbackUI: [cardSymbol],
  correctUis: this.getSharedSymbols(), correctionDelay: this.items.length * 1500
  };\r

  \      }\r

  \      this.evaluate.bind(this)();\r

  \    }\r

  \  }\r

  \  evaluate() {\r

  \    if (!canAct()) return;\r

  \    uiActivated = false; clearTimeouts();\r

  \    IsAnswerCorrect = Selected.isCorrect;\r

  \    this.me.score += IsAnswerCorrect ? 1 : 0;\r

  \    user_game_status();\r

  \  }\r

  \  getSharedSymbols() {\r

  \    let result = [];\r

  \    for (const item of this.items) {\r

  \      for (const id in item.shares) {\r

  \        let k = item.shares[id];\r

  \        let ui = iGetl(item, k);\r

  \        result.push(ui);\r

  \      }\r

  \    }\r

  \    return result;\r

  \  }\r

  \  to_move(is_correct, ms_total) { return '' + (is_correct ? 1 : 0) + ' ' +
  ms_total; }\r

  \  from_move(data) { return { is_correct: (data[0] == '1' ? true : false),
  ms_total: stringAfter(data, ' ') }; }\r

  \  onTimeup() {\r

  \    Selected = { isCorrect: false, correctUis: this.getSharedSymbols(),
  correctionDelay: this.items.length * 2000 };\r

  \    this.evaluate.bind(this)();\r

  \  }\r

  }"
GProg: "class GProg extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  prompt() {\r

  \    let c = this.card = cRound(dTable);\r

  \    let d = c.visual = iDiv(c);\r

  \    visualPropertySetter(this.card);\r

  \    visualAttributeSetter(this.card);\r

  \    d.innerHTML = 'HALLO';\r

  \    mStyle(d, { fg: 'blue' });\r

  \    mLinebreak(dTable, 25);\r

  \    this.ta = this.createTextArea();\r

  \    this.ta.value = `mCenterCenterFlex(card.visual);`;\r

  \    mLinebreak(dTable, 25);\r

  \    mButton('run', this.runCode.bind(this), dTable, { bg: 'skyblue', fg:
  'black', fz: 32 }, 'mybutton');\r

  \  }\r

  \  runCode() {\r

  \    let code = this.ta.value;\r

  \    let prelim = '';\r

  \    prelim = 'let card = this.card;';\r

  \    code = prelim + code;\r

  \    eval(code);\r

  \  }\r

  \  createTextArea() {\r

  \    let dCode = mDiv(dTable, {});\r

  \    let ta = this.ta = mCreate('textarea');\r

  \    mAppend(dCode, ta);\r

  \    ta.setAttribute('rows', 10);\r

  \    ta.setAttribute('cols', 60);\r

  \    mStyle(ta, { family: 'courier', padding: 10 });\r

  \    return ta;\r

  \  }\r

  }"
GKrieg: "class GKrieg extends G2Player {\r

  \  write() { write('game', ...arguments); }\r

  \  startGame() {\r

  \    this.write('start game')\r

  \    super.startGame();\r

  \    let back = this.back = new GKriegBack();\r

  \    this.setStartPosition();\r

  \    this.front = new GKriegFront(130, dTable);\r

  \    this.front.presentState(this.back.get_state());\r

  \    mLinebreak(dTable, 50);\r

  \    this.moveButton = mButton('Move!', this.interact.bind(this), dTable, {
  fz: 28, matop: 10, rounding: 10, padding: 16, border: 8 }, ['buttonClass']);\r

  \  }\r

  \  setStartPosition() {\r

  \    this.back.load(null);\r

  \  }\r

  \  prompt() {\r

  \    this.write('prompt')\r

  \    let msg = this.plTurn == this.ai ? 'Ai thinking...' : 'Deterministic:
  click Move!';\r

  \    showInstruction('', msg, dTitle, false);\r

  \    this.controller.activateUi();\r

  \  }\r

  \  activate() {\r

  \    let pl = this.plTurn;\r

  \    let autoplay = false;\r

  \    let manual = true;\r

  \    if (!manual && (autoplay || pl == this.ai)) {\r

  \      if (this.ai == pl) uiActivated = false;\r

  \      setTimeout(this.interact.bind(this), 500);\r

  \    } else {\r

  \      this.moveButton.style.opacity = 1;\r

  \    }\r

  \  }\r

  \  interact() {\r

  \    if (!canAct()) { console.log('NOPE!!!!', 'ai', aiActivated, 'ui',
  uiActivated); return; }\r

  \    this.controller.deactivateUi();\r

  \    this.write('interact');\r

  \    let back = this.back;\r

  \    back.make_random_move();\r

  \    this.front.animatePlayerMove(back.turn(),
  this.onPlayerMoveCompleted.bind(this));\r

  \  }\r

  \  onPlayerMoveCompleted() {\r

  \    let back = this.back;\r

  \    this.front.presentState(this.back.get_state());\r

  \    let x = this.back.resolve();\r

  \    if (isdef(x)) {\r

  \      this.moveButton.style.opacity = .3;\r

  \      this.TO = setTimeout(() => { this.front.animateResolve(x, () => {
  GC.evaluate(x) }) },\r

  \        1000\r

  \      );\r

  \    } else this.controller.evaluate(x);\r

  \  }\r

  \  changePlayer() {\r

  \    this.write('change player')\r

  \    this.back.swap_turn();\r

  \    this.plTurn = this.players[this.back.player().index];\r

  \    this.opp = this.players[this.back.opponent().index];\r

  \  }\r

  \  eval(x) {\r

  \    let back = this.back;\r

  \    this.write('eval', x)\r

  \    if (isdef(x)) this.front.presentState(this.back.get_state());\r

  \    if (back.is_out_of_cards()) {\r

  \      this.moveButton.remove();\r

  \      this.gameOver = true;\r

  \      let w = back.winner();\r

  \      if (isdef(w)) this.winner = this.players[w.index];\r

  \      this.bannerPos = -480;\r

  \    }\r

  \  }\r

  }"
GTTT: "class GTTT extends G2Player {\r

  \  startGame() {\r

  \    super.startGame();\r

  \    this.createBoard();\r

  \    this.human.sym = 'O';\r

  \    this.ai.sym = 'X';\r

  \    this.setStartPosition();\r

  \  }\r

  \  createBoard() {\r

  \    this.rows = this.cols = this.boardSize;\r

  \    this.board = new Board(this.rows, this.cols,
  this.controller.uiInteract.bind(this.controller));\r

  \  }\r

  \  setStartPosition() {\r

  \    return;\r

  \    let positions = [\r

  \      new Array(9).fill(null),\r

  \      ['X', 'X', null, 'O', null, null, 'O', null, null],\r

  \      [null, 'X', null, 'X', null, 'O', null, 'O', null],\r

  \      [null, null, null, null, 'X', 'O', null, 'O', null],\r

  \    ];\r

  \    if (isdef(this.iPosition)) {\r

  \      let idx = this.iPosition + 1; idx = idx % positions.length;
  this.iPosition = idx;\r

  \    } else this.iPosition = 0;\r

  \    let state = nundef(this.startPosition) || this.startPosition == 'empty'
  ? positions[0]\r

  \      : this.startPosition == 'random' ? chooseRandom(positions)\r

  \        : positions[this.iPosition];\r

  \    this.board.setState(state, { X: this.ai.color, O: this.human.color
  });\r

  \  }\r

  \  prompt() {\r

  \    let msg = this.plTurn == this.ai ? 'Ai thinking...' : 'click an empty
  field!';\r

  \    showInstruction('', msg, dTitle, false);\r

  \    this.controller.activateUi();\r

  \  }\r

  \  activate() {\r

  \    let pl = this.plTurn;\r

  \    let autoplay = false;\r

  \    if (autoplay || pl == this.ai) {\r

  \      if (this.ai == pl) uiActivated = false;\r

  \      setTimeout(() => AIMinimax(this, this.afterComputerMove.bind(this)),
  200);\r

  \    }\r

  \  }\r

  \  interact(ev) {\r

  \    let tile = evToItemC(ev);\r

  \    if (isdef(tile.label)) return;\r

  \    let pl = this.plTurn;\r

  \    addLabel(tile, pl.sym, { fz: 60, fg: pl.color });\r

  \    this.controller.evaluate(tile);\r

  \  }\r

  \  afterComputerMove(iMove) {\r

  \    let tile = this.board.items[iMove];\r

  \    this.interact({ target: iDiv(tile) });\r

  \  }\r

  \  eval() {\r

  \    let done = this.checkFinal();\r

  \    this.gameOver = done > 0;\r

  \    if (this.gameOver) { this.winner = done > 1 ? this.plTurn : null;
  this.tie = done == 1; }\r

  \  }\r

  \  checkFinal(state) {\r

  \    if (nundef(state)) state = this.getState();\r

  \    let isTie = false;\r

  \    let isWin = checkWinnerTTT(state);\r

  \    if (!isWin) { isTie = checkBoardFull(state) ||
  !checkPotentialTTT(state); }\r

  \    return isWin ? 2 : isTie ? 1 : 0;\r

  \  }\r

  \  getState() { return this.board.getState(); }\r

  \  applyMove(state, move, player) { arrReplaceAtInPlace(state, move,
  player.sym); }\r

  \  undoMove(state, move, player) { arrReplaceAtInPlace(state, move, ' ');
  }\r

  \  getAvailableMoves(state) {\r

  \    let moves = [];\r

  \    for (let i = 0; i < state.length; i++) {\r

  \      if (EmptyFunc(state[i])) moves.push(i);\r

  \    }\r

  \    shuffle(moves);\r

  \    return moves;\r

  \  }\r

  \  heuristic1(node, depth) { }\r

  \  evalState(node, depth) {\r

  \    let x = checkWinnerTTT(node);\r

  \    if (checkBoardFull(node) || x) {\r

  \      return { reached: true, val: (!x ? 0 : (10 - depth) * (x ==
  MAXIMIZER.sym ? 1 : -1)) };\r

  \    }\r

  \    return { reached: false };\r

  \  }\r

  \  evalStateL(node, depth) {\r

  \    let key = node.join('');\r

  \    let val = DMM[key];\r

  \    let x = isdef(val) ? val : checkWinnerTTT(node);\r

  \    DMM[key] = x;\r

  \    if (checkBoardFull(node) || x) {\r

  \      return { reached: true, val: (!x ? 0 : (10 - depth) * (x ==
  MAXIMIZER.sym ? 1 : -1)) };\r

  \    }\r

  \    return { reached: false };\r

  \  }\r

  \  evalStateL2(node, depth) {\r

  \    let full = checkBoardFull(node);\r

  \    if (full) {\r

  \      let key = JSON.stringify(node);\r

  \      let x = DMM[key];\r

  \      if (nundef(x)) DMM[key] = x = checkWinnerTTT(node);\r

  \      return { reached: true, val: (!x ? 0 : (10 - depth) * (x ==
  MAXIMIZER.sym ? 1 : -1)) };\r

  \    } else {\r

  \      let x = checkWinnerTTT(node);\r

  \      if (x) return { reached: true, val: (!x ? 0 : (10 - depth) * (x ==
  MAXIMIZER.sym ? 1 : -1)) };\r

  \      return { reached: false };\r

  \    }\r

  \  }\r

  }"
GC4: "class GC4 extends GTTT {\r

  \  startGame() {\r

  \    super.startGame();\r

  \  }\r

  \  createBoard() {\r

  \    this.board = new Board(this.rows, this.cols,
  this.controller.uiInteract.bind(this.controller), { margin: 6, w: 60, h: 60,
  bg: 'white', fg: 'black', rounding: '50%' });\r

  \  }\r

  \  setStartPosition() {\r

  \    let positions = [\r

  \      [[0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0]],\r

  \      [[0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      ['O', 'X', 0, 0, 0, 0, 0],\r

  \      ['O', 'X', 0, 0, 0, 0, 0]],\r

  \      [[0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      ['O', 'X', 0, 0, 0, 0, 0],\r

  \      ['O', 'X', 0, 0, 0, 0, 0],\r

  \      ['O', 'X', 0, 0, 0, 0, 0]],\r

  \      [[0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 'O', 0, 0, 0],\r

  \      ['O', 'X', 0, 'O', 0, 0, 0],\r

  \      ['O', 'X', 0, 'O', 0, 0, 0]],\r

  \      [[0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, \"X\", 0, 0, 0],\r

  \      [\"X\", 0, 0, \"O\", 0, 0, 0],\r

  \      [\"O\", \"X\", 0, \"O\", 0, 0, 0],\r

  \      [\"O\", \"X\", \"O\", \"O\", 0, 0, 0]],\r

  \      [[0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0, 0],\r

  \      [\"X\", 0, 0, 0, 0, 0, 0],\r

  \      [\"X\", 0, 0, 0, \"O\", \"O\", 0]],\r

  \    ];\r

  \    this.iPosition = 4;\r

  \    if (isdef(this.iPosition)) {\r

  \      let idx = this.iPosition + 1; idx = idx % positions.length;
  this.iPosition = idx;\r

  \    } else this.iPosition = 0;\r

  \    let state = nundef(this.startPosition) || this.startPosition == 'empty'
  ? positions[0]\r

  \      : this.startPosition == 'random' ? chooseRandom(positions)\r

  \        : positions[this.iPosition];\r

  \    this.board.setState(state, { X: this.ai.color, O: this.human.color
  });\r

  \  }\r

  \  checkFinal(state) {\r

  \    if (nundef(state)) state = this.getState();\r

  \    let isTie = false;\r

  \    let isWin = checkWinnerC4(state, this.rows, this.cols, this.stride);\r

  \    if (!isWin) { isTie = checkBoardFull(state); }\r

  \    return isWin ? 2 : isTie ? 1 : 0;\r

  \  }\r

  \  checkLegal(tile) {\r

  \    let col = tile.col;\r

  \    let topmost = this.board.items[col];\r

  \    if (EmptyFunc(topmost.label)) return true; else return false;\r

  \  }\r

  \  findBottomEmptyTileInColumn(col) {\r

  \    let x = lastCond(this.board.items, x => x.col == col &&
  EmptyFunc(x.label));\r

  \    return x;\r

  \  }\r

  \  interact(ev) {\r

  \    let tile = evToItemC(ev);\r

  \    let legal = this.checkLegal(tile);\r

  \    if (!legal) { console.log('illegal move!'); return; }\r

  \    let pl = this.plTurn;\r

  \    let bottomMost = this.findBottomEmptyTileInColumn(tile.col);\r

  \    addLabel(bottomMost, pl.sym, { fz: 60, fg: pl.color });\r

  \    this.controller.evaluate(tile);\r

  \  }\r

  \  getAvailableMoves(state) {\r

  \    let moves = [];\r

  \    for (let c = 0; c < G.cols; c++) {\r

  \      for (let r = G.rows - 1; r >= 0; r--) {\r

  \        let i = r * G.cols + c;\r

  \        if (EmptyFunc(state[i])) { moves.push(i); break; }\r

  \      }\r

  \    }\r

  \    shuffle(moves)\r

  \    return moves;\r

  \  }\r

  \  evalState(node, depth) {\r

  \    let x = checkWinnerC4(node);\r

  \    if (checkBoardFull(node) || x) {\r

  \      let res = { reached: true, val: (!x ? 0 : (10 - depth) * (x ==
  MAXIMIZER.sym ? 1 : -1)) };\r

  \      return res;\r

  \    }\r

  \    return { reached: false };\r

  \  }\r

  }"
GReversi: "class GReversi extends GTTT {\r

  \  createBoard() {\r

  \    this.board = new Board(this.rows, this.cols,
  this.controller.uiInteract.bind(this.controller), { margin: 6, w: 60, h: 60,
  bg: 'white', fg: 'black', rounding: '50%' });\r

  \  }\r

  \  setStartPosition() {\r

  \    let positions = [\r

  \      [[0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 'O', 'X', 0, 0],\r

  \      [0, 0, 'X', 'O', 0, 0],\r

  \      [0, 0, 0, 0, 0, 0],\r

  \      [0, 0, 0, 0, 0, 0]],\r

  \    ];\r

  \    if (isdef(this.iPosition)) {\r

  \      let idx = this.iPosition + 1; idx = idx % positions.length;
  this.iPosition = idx;\r

  \    } else this.iPosition = 0;\r

  \    if (this.startPosition == 'empty' || this.rows != 6 || this.cols != 6)
  {\r

  \      let pos = bCreateEmpty(this.rows, this.cols);\r

  \      let r1 = this.rows / 2 - 1, r2 = this.rows / 2, c1 = this.cols / 2 -
  1, c2 = this.cols / 2;\r

  \      pos[r1 * this.cols + c1] = pos[r2 * this.cols + c2] = 'O';\r

  \      pos[r1 * this.cols + c2] = pos[r2 * this.cols + c1] = 'X';\r

  \      positions[0] = pos;\r

  \    }\r

  \    let state = nundef(this.startPosition) || this.startPosition == 'empty'
  ? positions[0]\r

  \      : this.startPosition == 'random' ? chooseRandom(positions)\r

  \        : positions[this.iPosition];\r

  \    this.board.setState(state, { X: this.ai.color, O: this.human.color
  });\r

  \  }\r

  \  startGame() {\r

  \    super.startGame();\r

  \    this.setStartPosition();\r

  \  }\r

  \  checkLegal(tile) {\r

  \    let state = this.getState();\r

  \    if (!EmptyFunc(tile.label)) return false;\r

  \    let nei = bNei(state, tile.index, this.rows, this.cols, true);\r

  \    for (const n of nei) {\r

  \      if (!n) continue;\r

  \      let t = state[n];\r

  \      if (!EmptyFunc(t)) return true;\r

  \    }\r

  \    console.log('ILLEGAL MOVE! tile', tile.index, 'does not have
  neighbor!')\r

  \    return false;\r

  \  }\r

  \  interact(ev) {\r

  \    let tile = evToItemC(ev);\r

  \    if (!this.checkLegal(tile)) return;\r

  \    let pl = this.plTurn;\r

  \    addLabel(tile, pl.sym, { fz: 60, fg: pl.color });\r

  \    let state = this.getState();\r

  \    let iCapt = bCapturedPieces(pl.sym, state, tile.index, this.rows,
  this.cols);\r

  \    for (const i of iCapt) {\r

  \      let item = this.board.get(i);\r

  \      modLabel(item, this.plTurn.sym, { fg: this.plTurn.color });\r

  \    }\r

  \    this.controller.evaluate(tile);\r

  \  }\r

  \  activate() {\r

  \    let pl = this.plTurn;\r

  \    let autoplay = false;\r

  \    if (autoplay || pl == this.ai) {\r

  \      if (this.ai == pl) uiActivated = false;\r

  \      setTimeout(() => AIMinimax(this, this.afterComputerMove.bind(this)),
  200);\r

  \    }\r

  \  }\r

  \  checkFinal(state, pl1, pl2) {\r

  \    if (nundef(state)) state = this.getState();\r

  \    if (nundef(pl1)) pl1 = this.plTurn;\r

  \    if (nundef(pl2)) pl2 = this.plOpp;\r

  \    return GReversi.checkEnd(state, pl1, pl2);\r

  \  }\r

  \  static checkEnd(state, pl1, pl2) {\r

  \    let hasPl1 = false, hasPl2 = false, s1 = pl1.sym, s2 = pl2.sym,
  hasEmpty = false;\r

  \    for (const s of state) {\r

  \      if (!hasPl1 && s == s1) hasPl1 = true;\r

  \      else if (!hasPl2 && s == s2) hasPl2 = true;\r

  \      else if (!hasEmpty && EmptyFunc(s)) hasEmpty = true;\r

  \      if (hasPl1 && hasPl2 && hasEmpty) return false;\r

  \    }\r

  \    let winner = !hasPl2 ? pl1 : !hasPl1 ? pl2 : 0;\r

  \    let full = !hasEmpty;\r

  \    if (full) {\r

  \      let n1 = arrCount(state, x => x == s1);\r

  \      let n2 = arrCount(state, x => x == s2);\r

  \      if (!winner && n1 != n2) {\r

  \        if (n1 > n2) winner = pl1; else winner = pl2;\r

  \      }\r

  \    }\r

  \    return winner ? { reached: true, winner: winner } : full ? { reached:
  true, winner: null } : { reached: false };\r

  \  }\r

  \  heuristic(state, plMax, plMin) {\r

  \    let vmax = 0, vmin = 0;\r

  \    vmax = vmax + arrCount(state, x => x == plMax.sym);\r

  \    vmin = vmin + arrCount(state, x => x == plMin.sym);\r

  \    return vmax - vmin;\r

  \  }\r

  \  heureval(state) {\r

  \    let heurinfo = GReversi.heuristic(state, MAXIMIZER, MINIMIZER);\r

  \    let val = heurinfo.val;\r

  \    return val;\r

  \  }\r

  \  eval() {\r

  \    this.moveCounter += 1;\r

  \    let info = this.checkFinal();\r

  \    this.gameOver = info.reached;\r

  \    if (this.gameOver) {\r

  \      this.winner = info.winner;\r

  \      this.tie = !info.winner;\r

  \      if (this.winner) {\r

  \        this.loser = this.winner == this.ai ? this.human : this.ai;\r

  \        let state = this.getState();\r

  \        let nWinner = arrCount(state, x => x == this.winner.sym);\r

  \        let nLoser = arrCount(state, x => x == this.loser.sym);\r

  \        this.info = '(' + nWinner + ':' + nLoser + ')';\r

  \      }\r

  \    }\r

  \  }\r

  \  getAvailableMoves(state) {\r

  \    let moves = [];\r

  \    for (let i = 0; i < state.length; i++) {\r

  \      if (EmptyFunc(state[i])) {\r

  \        let nei = bNei(state, i, G.rows, G.cols, true);\r

  \        let iFull = firstCond(nei, x => !EmptyFunc(state[x]));\r

  \        if (iFull != null) moves.push(i);\r

  \      }\r

  \    }\r

  \    return moves;\r

  \  }\r

  \  evalState(state, depth) {\r

  \    let info = GReversi.checkEnd(state, MAXIMIZER, MINIMIZER);\r

  \    let val = info.reached && info.winner ? (100 - depth) * (info.winner ==
  MAXIMIZER ? 1 : -1) : 0;\r

  \    return { reached: info.reached, val: val };\r

  \  }\r

  \  applyMove(state, move, player) {\r

  \    arrReplaceAtInPlace(state, move, player.sym);\r

  \    let iCapt = bCapturedPieces(player.sym, state, move, G.rows, G.cols);\r

  \    for (const i of iCapt) { state[i] = player.sym; }\r

  \  }\r

  }"
GChess: "class GChess extends G2Player {\r

  \  clear() { super.clear(); if (isdef(this.game)) { this.game.reset(); } }\r

  \  startGame() {\r

  \    super.startGame();\r

  \    this.createBoard();\r

  \    this.game = new Chess();\r

  \    this.setStartPosition();\r

  \    let c = this.game.turn();\r

  \    if (c == 'b') { this.plTurn.color = 'black'; this.plOpp.color =
  'white'; } else { this.plTurn.color = 'white'; this.plOpp.color = 'black'; }\r

  \    showFleetingMessage(`You play ${this.human.color}`)\r

  \  }\r

  \  createBoard() {\r

  \    let d = mDiv(dTable, { h: 500, w: 500 }, 'dChessBoard');\r

  \    let config = {\r

  \      pieceTheme:
  '../alibs/chessBoard/img/chesspieces/wikipedia/{piece}.png',\r

  \      draggable: true,\r

  \      onDragStart: this.onDragStart.bind(this),\r

  \      onDrop: this.onDrop.bind(this),\r

  \      onSnapEnd: this.onSnapEnd.bind(this),\r

  \    }\r

  \    this.board = ChessBoard('dChessBoard', config);\r

  \    mLinebreak(dTable);\r

  \  }\r

  \  setStartPosition() {\r

  \    let positions = [\r

  \      'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',\r

  \      // //'8/8/8/8/8/8/8/8 b KQkq - 0 1', //black starts\r

  \    ];\r

  \    if (nundef(this.iPosition)) this.iPosition = 0;\r

  \    let state = nundef(this.startPosition) || this.startPosition == 'empty'
  ? positions[0] : this.startPosition == 'random' ? chooseRandom(positions) :
  positions[this.iPosition];\r

  \    if (!isString(state)) state = arrToFen(state.arr, state.plStart);\r

  \    this.game.load(state);
  //'r1bqkbnr/pppp1ppp/2n5/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R b KQkq - 0 1');\r

  \    this.board.position(this.game.fen());\r

  \    let idx = this.iPosition + 1; idx = idx % positions.length;
  this.iPosition = idx;\r

  \  }\r

  \  prompt() {\r

  \    let msg = this.plTurn == this.ai && !this.manual ? `Ai
  (${this.ai.color.toUpperCase()}) thinking...`\r

  \      : `player: ${this.plTurn.color.toUpperCase()}`;\r

  \    showInstruction(this.game.in_check() ? '- CHECK!!!' : '', msg, dTitle,
  false);\r

  \    this.controller.activateUi();\r

  \  }\r

  \  activate() {\r

  \    let pl = this.plTurn;\r

  \    let autoplay = false;\r

  \    if (autoplay || pl == this.ai) {\r

  \      if (this.ai == pl) { uiActivated = false; aiActivated = true; }\r

  \      this.TO = setTimeout(() => {\r

  \        let color = this.game.turn();\r

  \        if (color === 'b') { var move = getBestMove(this.game, color,
  globalSum)[0]; }\r

  \        else { var move = getBestMove(this.game, color, -globalSum)[0]; }\r

  \        globalSum = evaluateBoard(move, globalSum, 'b');\r

  \        this.game.move(move);\r

  \        this.board.position(this.game.fen());\r

  \        this.controller.evaluate();\r

  \      }, 100);\r

  \    } else { aiActivated = false; uiActivated = true; }\r

  \  }\r

  \  getTurnColor() { return this.getPlayer(this.game.turn() == 'b' ? 'black'
  : 'white'); }\r

  \  getOppColor() { return this.getPlayer(this.game.turn() == 'b' ? 'white' :
  'black'); }\r

  \  getPlayer(color) { return firstCond(this.players, x => x.color == color);
  }\r

  \  changePlayer() { this.plTurn = this.game.turn() == 'b' ?
  this.getPlayer('black') : this.getPlayer('white'); }\r

  \  onDragStart(source, piece, position, orientation) {\r

  \    if (this.game.game_over() || !uiActivated) return false;\r

  \    if ((this.game.turn() === 'w' && piece.search(/^b/) !== -1) ||\r

  \      (this.game.turn() === 'b' && piece.search(/^w/) !== -1)) {\r

  \      return false\r

  \    }\r

  \  }\r

  \  onDrop(source, target) {\r

  \    var move = this.game.move({\r

  \      from: source,\r

  \      to: target,\r

  \      promotion: 'q'\r

  \    });\r

  \    if (move === null) return 'snapback';\r

  \    this.controller.evaluate();\r

  \  }\r

  \  onSnapEnd() { this.board.position(this.game.fen()) }\r

  \  eval() {\r

  \    this.info = null;\r

  \    let over = this.gameOver = this.game.game_over();\r

  \    if (this.game.in_draw()) { this.tie = true; console.log('in_draw');
  this.info = '(draw)'; }\r

  \    if (this.game.in_stalemate()) { this.tie = true;
  console.log('in_stalemate'); this.info = '(stalemate)'; }\r

  \    if (this.game.in_threefold_repetition()) { this.tie = true;
  console.log('in_threefold_repetition'); this.info = '(threefold repetition)';
  }\r

  \    if (this.game.in_checkmate()) {\r

  \      this.tie = false;\r

  \      this.winner = this.getOppColor();\r

  \      console.log('in_checkmate');\r

  \      this.info = `(${this.winner.color.toUpperCase()})`;\r

  \    }\r

  \  }\r

  }"
GSayPic: "class GSayPic extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  clear() { Speech.stopRecording(); }\r

  \  prompt() {\r

  \    myShowPics();\r

  \    setGoal();\r

  \    let wr = (this.language == 'E' ? 'say: ' : \"sage: \");\r

  \    show_instruction(wr + `<b>${Goal.label.toUpperCase()}</b>`, dTitle);\r

  \    animate(dInstruction, 'pulse800' + bestContrastingColor(this.color,
  ['yellow', 'red']), 900);\r

  \    mLinebreak(dTable, 25);\r

  \    MicrophoneUi = mMicrophone(dTable, this.color);\r

  \    MicrophoneHide();\r

  \    TOMain = setTimeout(this.controller.activateUi.bind(this.controller),
  200);\r

  \  }\r

  \  trialPrompt(nTrial) {\r

  \    sayRandomVoice(nTrial < 2 ? 'speak UP!!!' : 'Louder!!!',
  'LAUTER!!!');\r

  \    animate(dInstruction, 'pulse800' + bestContrastingColor(this.color,
  ['yellow', 'red']), 500);\r

  \    return 600;\r

  \  }\r

  \  activate() {\r

  \    if (Speech.isSpeakerRunning()) {\r

  \      TOMain = setTimeout(this.activate.bind(this), 200);\r

  \    } else {\r

  \      TOMain = setTimeout(() => Speech.startRecording(this.language,
  this.controller.evaluate.bind(this.controller)), 100);\r

  \    }\r

  \  }\r

  \  eval(isfinal, speechResult, confidence, sessionId) {\r

  \    if (sessionId != SessionId) {\r

  \      alert('NOT THIS BROWSER!!!!!!'); return undefined;\r

  \    }\r

  \    let answer = Goal.answer = normalize(speechResult, this.language);\r

  \    let reqAnswer = Goal.reqAnswer = normalize(Goal.label,
  this.language);\r

  \    Selected = { reqAnswer: reqAnswer, answer: answer, feedbackUI:
  iDiv(Goal) };\r

  \    if (isEmpty(answer)) return false;\r

  \    else return isSimilar(answer, reqAnswer) || isList(Goal.info.valid) &&
  firstCond(Goal.info.valid, x => x.toUpperCase() == answer.toUpperCase());\r

  \  }\r

  }"
GProg0: "class GProg0 extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  startGame(fen) {\r

  \  }\r

  \  prompt() {\r

  \    let c = this.card0 = cLandscape(dTable);\r

  \    this.card1 = iDiv(c).style;\r

  \    this.card2 = iDiv(c);\r

  \    this.card3 = iDiv(c);\r

  \    show_instruction('write code what rank and suit this card should have',
  dTitle);\r

  \    mLinebreak(dTable, 25);\r

  \    let dCode = mDiv(dTable, {});\r

  \    let ta = this.ta = mCreate('textarea');\r

  \    mAppend(dCode, ta);\r

  \    ta.setAttribute('rows', 10);\r

  \    ta.setAttribute('cols', 60);\r

  \    mStyle(ta, { family: 'courier', padding: 10 });\r

  \    ta.value = `mStyle(iDiv(G.card0),{bg:'pink'})`;\r

  \    ta.value = `this.card1.background = 'yellow'`;\r

  \    ta.value = `this.card2.style.background = 'yellow'`;\r

  \    ta.value = `this.set('background','red');`;\r

  \    ta.value = `this.set(this.card1,'background','red');`;\r

  \    ta.value = `set(card1,'background','red');`;\r

  \    ta.value = `card.background = 'red';`;\r

  \    ta.value = `card.color = 'red';`;\r

  \    ta.value = `card.color = 'red';`;\r

  \    mLinebreak(dTable, 25);\r

  \    mButton('run', this.runCode.bind(this), dTable, { bg: 'skyblue', fg:
  'black', fz: 32 }, 'mybutton');\r

  \    console.log('type of style', typeof this.card1);\r

  \  }\r

  \  set(o, prop, val) {\r

  \    o[prop] = val;\r

  \  }\r

  \  runCode() {\r

  \    let code = this.ta.value;\r

  \    let prelim = '';\r

  \    prelim = 'let card = this.card1; ';\r

  \    prelim = `\r

  \    var card = new ProgObject(this.card0);\r

  \    console.log('card',card);\r

  \    `;\r

  \    prelim = `\r

  \    var obj = {};\r

  \    Object.defineProperty(obj, prop, {\r

  \        get: function() {return this.card1; },\r

  \        set: function(val) { this.card1.val = val; }\r

  \    });\r

  \    `\r

  \    code = prelim + code;\r

  \    console.log('code', code);\r

  \    eval(code);\r

  \  }\r

  }"
GProg1: "class GProg1 extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  prompt() {\r

  \    let c = this.card = cLandscape(dTable);\r

  \    let d = this.visual = iDiv(c);\r

  \    this.style = d.style;\r

  \    let propertyGiver1 = (o, prop, setter) => {\r

  \      Object.defineProperty(o, prop, {\r

  \        get: function () { return this.val; },\r

  \        set: function (val) { this.val = val; setter(val); }\r

  \      });\r

  \    };\r

  \    let visualPropertySetter1 = (o) => {\r

  \      propertyGiver1(o, 'bg', x => { mStyle(G.visual, { 'bg': x }); });\r

  \    }\r

  \    visualPropertySetter1(this.card);\r

  \    d.innerHTML = 'HALLO';\r

  \    mStyle(d, { fg: 'blue' });\r

  \    mLinebreak(dTable, 25);\r

  \    let dCode = mDiv(dTable, {});\r

  \    let ta = this.ta = mCreate('textarea');\r

  \    mAppend(dCode, ta);\r

  \    ta.setAttribute('rows', 10);\r

  \    ta.setAttribute('cols', 60);\r

  \    mStyle(ta, { family: 'courier', padding: 10 });\r

  \    ta.value = `card.bg = 'red'; console.log(card.bg);`;\r

  \    mLinebreak(dTable, 25);\r

  \    mButton('run', this.runCode.bind(this), dTable, { bg: 'skyblue', fg:
  'black', fz: 32 }, 'mybutton');\r

  \    console.log('type of style', typeof this.card1);\r

  \  }\r

  \  runCode() {\r

  \    let code = this.ta.value;\r

  \    let prelim = '';\r

  \    prelim = 'let [card,visual,style] = [this.card,this.visual,this.style];
  ';\r

  \    code = prelim + code;\r

  \    console.log('code', code);\r

  \    eval(code);\r

  \  }\r

  }"
IClass: "class IClass extends LiveObject {\r

  \  constructor(k, U, G, T) {\r

  \    super(k);\r

  \    this.player = {};\r

  \    copyKeys(U, this.player);\r

  \    copyKeys(G, this);\r

  \    copyKeys(T, this);\r

  \    this.running = false;\r

  \    this.uiState = this.immediateStart ? LiveObject.States.ready :
  LiveObject.States.none;\r

  \    this.startTime = Date.now();\r

  \    this.div = null;\r

  \  }\r

  \  loop() {\r

  \    this.update();\r

  \    this.present();\r

  \    this.activate();\r

  \  }\r

  \  getState() {\r

  \    return { players: this.players, table: this.table, options:
  this.options, turn: this.turn };\r

  \  }\r

  \  setState(s) {\r

  \    this.players = s.players;\r

  \    this.table = s.table;\r

  \    this.options = s.options;\r

  \    this.turn = s.turn;\r

  \  }\r

  \  present() {\r

  \    console.log('state', this.getState());\r

  \  }\r

  \  update() {\r

  \    for (const pl of this.players) this.updatePlayer(pl);\r

  \    this.updateTable();\r

  \    this.updateTurn();\r

  \    this.updateOptions(this.player);\r

  \  }\r

  \  updateOptions() { this.options = {}; }\r

  \  updatePlayer() { }\r

  \  updateTable() { this.table = {}; }\r

  \  updateTurn() { this.turn = chooseRandom(this.players).id; }\r

  }"
GGuess: "class GGuess extends IClass {\r

  \  setup() {\r

  \  }\r

  \  updatePlayer(pl) {\r

  \  }\r

  \  updateOptions(pl) {\r

  \    this.options = Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\r

  \    console.log(this.options);\r

  \  }\r

  }"
AddonClass: "class AddonClass extends LiveObject {\r

  \  constructor(k, dbInfo, userInfo) {\r

  \    super(k);\r

  \    copyKeys(dbInfo, this);\r

  \    copyKeys(userInfo, this);\r

  \    this.running = false;\r

  \    this.uiState = this.immediateStart ? LiveObject.States.ready :
  LiveObject.States.none;\r

  \    this.startTime = Date.now();\r

  \    this.callback = this.div = this.dContent = null;\r

  \  }\r

  \  //#region internal\r

  \  _createDivs() {\r

  \    this.dInstruction = mDiv(this.dContent);\r

  \    this.dMain = mDiv(this.dContent);\r

  \    this.dHint = mDiv(this.dContent); this.dHint.innerHTML = 'hallo';
  this.dHint.style.opacity = 0;\r

  \  }\r

  \  _createScreen() {\r

  \    show(mBy('dAddons'));\r

  \    let bg = colorTrans('silver', .25);\r

  \    let d = mScreen(mBy('dAddons'), { bg: bg, display: 'flex', layout:
  'fvcc' });\r

  \    let dContent = mDiv(d, { display: 'flex', layout: 'fvcs', fg:
  'contrast', fz: 24, bg: 'silver', patop: 50, pabottom: 50, matop: -50, w:
  '100vw' });\r

  \    return [d, dContent];\r

  \  }\r

  \  //#endregion\r

  \  checkEndCondition() {\r

  \    let c = this.endsWhen;\r

  \    let res = false;\r

  \    if (isdef(c) && this[c.prop] == c.value) res = true;\r

  \    console.log('condition:', res, 'tNext', this.tNext)\r

  \    return res;\r

  \  }\r

  \  exit() {\r

  \    hide('dAddons');\r

  \    this.tNext *= this.tFactor;\r

  \    this.startTime = Date.now();\r

  \    this.clear();\r

  \    this.callback();\r

  \  }\r

  \  init() {\r

  \    [this.div, this.dContent] = this._createScreen();\r

  \    this._createDivs();\r

  \    this.setRunning();\r

  \    let caption = this.presentInit();\r

  \    mButton(isdef(caption) ? caption : 'Got it!', this.prompt.bind(this),
  this.dContent, { fz: 32, matop: 10 });\r

  \  }\r

  \  isTimeForAddon() {\r

  \    switch (this.uiState) {\r

  \      case LiveObject.States.none: this.getReady(this.tNext); return
  false;\r

  \      case LiveObject.States.gettingReady: return false;\r

  \      case LiveObject.States.ready: return true;\r

  \      case LiveObject.States.running: return Date.now() - this.startTime >=
  this.tNext;\r

  \    }\r

  \  }\r

  \  presentInit() { console.log('presenting initial information'); }\r

  \  presentPrompt() { console.log('prompting user to do something') }\r

  \  prompt() {\r

  \    clearElement(this.dContent);\r

  \    this.trialsNeeded = 0;\r

  \    this._createDivs();\r

  \    this.presentPrompt();\r

  \    this.activate();\r

  \  }\r

  \  processInput() {\r

  \    if (!this.uiActivated) return;\r

  \    this.uiActivated = false;\r

  \    let isCorrect = this.eval(...arguments);\r

  \    if (isCorrect) {\r

  \      this.positive();\r

  \      this.exit();\r

  \    } else {\r

  \      this.negative();\r

  \      this.trialPrompt();\r

  \    }\r

  \  }\r

  \  positive() {\r

  \    this.trialNumber = null;\r

  \    delete this.dHint;\r

  \  }\r

  \  negative() {\r

  \    if (nundef(this.trialNumber)) this.trialNumber = 1; else
  this.trialNumber += 1;\r

  \  }\r

  \  run() {\r

  \    show('dAddons');\r

  \    if (this.running) { this.prompt(); } else this.init();\r

  \  }\r

  \  trialPrompt() {\r

  \    this.trialsNeeded += 1;\r

  \    let [wr, sp] = this.getHint();\r

  \    this.hintLength = wr.length;\r

  \    if (isdef(sp)) sayRandomVoice(sp);\r

  \    this.dHint.innerHTML = 'Hint: ' + wr; this.dHint.style.opacity = 1;\r

  \    this.activate();\r

  \  }\r

  }"
APasscode: "class APasscode extends AddonClass {\r

  \  constructor(k, dbInfo, userInfo) {\r

  \    super(k, dbInfo, userInfo);\r

  \    this.needNewPasscode = true;\r

  \  }\r

  \  presentInit() {\r

  \    let keys = getRandomKeysFromGKeys(1);\r

  \    let options = { rows: 1 };\r

  \    this.pictures = getPics(null, {}, options, keys);\r

  \    this.goal = this.pictures[0];\r

  \    this.passcode = this.goal.label;\r

  \    let dParent = this.dContent;\r

  \    let d_title = mDiv(dParent);\r

  \    showInstruction(this.goal.label, Settings.language == 'E' ? 'the
  passcode is' : 'das Codewort ist', d_title, true);\r

  \    let d_pics = mDiv(dParent);\r

  \    presentItems(this.pictures, d_pics, options.rows);\r

  \    this.TOList.push(setTimeout(anim1, 300, this.goal, 500));\r

  \  }\r

  \  presentPrompt() {\r

  \    let keys = getRandomKeysIncluding(this.numPics, this.goal.key,
  'all');\r

  \    let iGoal = keys.indexOf(this.goal.key);\r

  \    let options = { rows: 2, showLabels: true };\r

  \    this.pictures = getPics(this.processInput.bind(this), undefined, {
  rows: 2, showLabels: true }, keys);\r

  \    this.goal = this.pictures[iGoal];\r

  \    showInstruction('', 'click ' + (Settings.language == 'E' ? 'the
  passcode' : 'das Codewort'), this.dInstruction, true);\r

  \    presentItems(this.pictures, this.dMain, options.rows);\r

  \  }\r

  \  eval(ev) {\r

  \    ev.cancelBubble = true;\r

  \    let item = findItemFromEvent(this.pictures, ev);\r

  \    Selected = { pic: item, feedbackUI: item.div, sz:
  getBounds(item.div).height };\r

  \    Selected.reqAnswer = this.goal.label;\r

  \    Selected.answer = item.label;\r

  \    if (item.label == this.goal.label) { return true; } else { return
  false; }\r

  \  }\r

  \  getHint() {\r

  \    let hintLength, spoken;\r

  \    if (this.trialNumber > this.passcode.length * 2) {\r

  \      hintLength = this.passcode.length;\r

  \      spoken = 'click ' + this.passcode.toUpperCase() + '!!!';\r

  \    } else if (this.trialNumber > this.passcode.length * 2 - 1) {\r

  \      hintLength = this.passcode.length;\r

  \      spoken = (Settings.language == 'E' ? 'REMEMBER ' : 'MERKE DIR ') +
  this.passcode.toUpperCase() + '!!!';\r

  \    } else if (this.trialNumber > this.passcode.length) {\r

  \      hintLength = (this.trialNumber - this.passcode.length);\r

  \      let letters = this.passcode.substring(0, hintLength);\r

  \      let letters1 = letters.split();\r

  \      spoken = (Settings.language == 'E' ? 'the passcode starts with' :
  'das Codewort beginnt mit') + ' ' + letters1.join(', ');\r

  \    } else {\r

  \      hintLength = this.trialNumber;\r

  \      spoken = null;\r

  \    }\r

  \    return [this.passcode.substring(0, hintLength), spoken];\r

  \  }\r

  }"
AAddress: "class AAddress extends APasscode {\r

  \  constructor(k, dbInfo, userInfo) {\r

  \    super(k, dbInfo, userInfo);\r

  \  }\r

  \  clear() { super.clear(); Speech.setLanguage(Settings.language);
  window.onclick = null; }\r

  \  presentInit() {\r

  \    this.msgPrompt = 'enter your address';\r

  \    this.lastHintPrompt = 'please complete entering address!';\r

  \    this.goal = { label: '17448 NE 98th Way Redmond 98052' };\r

  \    Speech.setLanguage('E')\r

  \    let wr = 'your address is:';\r

  \    let sp = 'your address is 1 7 4 4 8 - North-East 98th Way - Redmond, 9
  8 0 5 2';\r

  \    showInstruction(this.goal.label, wr, this.dInstruction, true, sp,
  12);\r

  \    this.goal.div = mText(this.goal.label, this.dMain, { fz: 40 });\r

  \    this.TOList.push(setTimeout(anim1, 300, this.goal, 500));\r

  \  }\r

  \  presentPrompt() {\r

  \    Speech.setLanguage('E');\r

  \    stdInstruction(this.msgPrompt, this.dInstruction, this.msgPrompt, {
  voice: 'zira' });\r

  \    this.input = stdInput(this.dMain, { w: 600, fz: 24 });\r

  \    this.input.id = this.defaultFocusElement = 'inputAddon';\r

  \    this.nCorrect = 0;\r

  \  }\r

  \  activate() {\r

  \    window.onclick = () => mBy(this.defaultFocusElement).focus();\r

  \    this.input.onkeyup = ev => {\r

  \      if (ev.key === \"Enter\") {\r

  \        ev.cancelBubble = true;\r

  \        this.processInput(ev);\r

  \      }\r

  \    };\r

  \    this.input.focus();\r

  \    super.activate();\r

  \  }\r

  \  eval() {\r

  \    let correctPrefix = this.correctPrefix =
  getCorrectPrefix(this.goal.label, this.input.value);\r

  \    return correctPrefix == this.goal.label;\r

  \  }\r

  \  getHint() {\r

  \    let oldHintLength = isdef(this.hintLength) ? this.hintLength : 0;\r

  \    if (nundef(this.hintLength)) this.hintLength = 0;\r

  \    this.input.value = this.correctPrefix;\r

  \    let progress = this.correctPrefix.length > this.nCorrect;\r

  \    if (this.correctPrefix.length > this.nCorrect) {\r

  \      this.hintLength = 1;\r

  \      this.nCorrect = this.correctPrefix.length;\r

  \    } else if (this.hintLength < this.goal.label.length - this.nCorrect)
  this.hintLength += 1;\r

  \    if (this.hintLength == 0) this.hintLength = 1;\r

  \    let wr = substringOfMinLength(this.goal.label,
  this.correctPrefix.length, this.hintLength);\r

  \    let sp = oldHintLength == this.hintLength && !progress ?
  this.lastHintPrompt : null;\r

  \    return [wr, sp];\r

  \  }\r

  }"
APassword: "class APassword extends AAddress {\r

  \  presentInit() {\r

  \    this.goal = null;\r

  \    Speech.setLanguage('E');\r

  \    let msg = 'create a new password!';\r

  \    this.msgPrompt = 'enter your password';\r

  \    this.lastHintPrompt = 'please complete entering password!';\r

  \    stdInstruction(msg, this.dInstruction, msg, { voice: 'zira' });\r

  \    this.input = stdInputVal(this.dMain, { w: 600, fz: 24 }, 'hallo');\r

  \    this.input.id = this.defaultFocusElement = 'inputAddon';\r

  \    window.onclick = () => mBy(this.defaultFocusElement).focus();\r

  \    return 'set password';\r

  \  }\r

  \  presentPrompt() {\r

  \    if (nundef(this.goal)) this.goal = { label: this.input.value.trim()
  };\r

  \    super.presentPrompt();\r

  \  }\r

  }"
GPasscode: "class GPasscode extends Game {\r

  \  constructor(name, o) { super(name, o); this.needNewPasscode = true; }\r

  \  clear() { clearTimeout(this.TO); clearTimeCD(); }\r

  \  startGame() {\r

  \    this.incrementLevelOnPositiveStreak = this.samplesPerGame;\r

  \    this.decrementLevelOnNegativeStreak = this.samplesPerGame;\r

  \  }\r

  \  start_Level() { this.needNewPasscode = true; }\r

  \  prompt() {\r

  \    this.trials = 1;\r

  \    if (this.needNewPasscode) {\r

  \      this.timeout = 1000;\r

  \      this.needNewPasscode = false;\r

  \      let keys = getRandomKeysFromGKeys(this.passcodeLength);\r

  \      myShowPics(null,\r

  \        { border: '3px solid #ffffff80' },\r

  \        { numRepeat: this.numRepeat, sameBackground: true }, keys);\r

  \      Goal = Pictures[0];\r

  \      this.wort = (this.language == 'E' ? 'the passcode' : 'das
  Codewort');\r

  \      showInstruction(Goal.label, this.wort + (this.language == 'E' ? ' is'
  : ' ist'), dTitle, true);\r

  \      TOMain = setTimeout(anim1, 300, Goal, 500, showGotItButton);\r

  \    } else {\r

  \      this.timeout *= 2;\r

  \      doOtherStuff();\r

  \    }\r

  \  }\r

  \  eval(x) {\r

  \    CountdownTimer.cancel();\r

  \    let isCorrect = super.eval(x);\r

  \    if (!isCorrect) this.needNewPasscode = true;\r

  \    return isCorrect;\r

  \  }\r

  }"
GStory: "class GStory extends Game {\r

  \  constructor(name) { super(name); }\r

  \  prompt() {\r

  \    let showLabels = G.showLabels == true && Settings.labels == true;\r

  \    myShowPics(evaluate, {}, { showLabels: showLabels });\r

  \    setGoal();\r

  \    showInstruction(Goal.label, 'click', dTitle, true);\r

  \    activateUi();\r

  \  }\r

  }"
GSentence1: "class GSentence1 extends Game {\r

  \  constructor(name, o) {\r

  \    super(name, o);\r

  \    this.prevLanguage = this.language;\r

  \    this.language = 'E';\r

  \  }\r

  \  startGame() {\r

  \    this.correctionFunc = showCorrectPictureLabels;\r

  \    this.failFunc = failSomePictures;\r

  \    this.successFunc = () => { mCheckit(this.dWordArea, 120); };\r

  \  }\r

  \  clear() { super.clear(); this.language = this.prevLanguage; }\r

  \  start_Level() {\r

  \    this.sentences = EnglishSentences.map(x => x.split(' ')).filter(x =>
  x.length <= this.maxWords);\r

  \  }\r

  \  dropHandler(source, target, isCopy = false, clearTarget = false) {\r

  \    let prevTarget = source.target;\r

  \    source.target = target;\r

  \    let dSource = iDiv(source);\r

  \    let dTarget = iDiv(target);\r

  \    if (clearTarget) {\r

  \      let ch = dTarget.children[0];\r

  \      let chSource = firstCond(Pictures, x => iDiv(x) == ch);\r

  \      if (chSource) {\r

  \        if (isdef(prevTarget)) {\r

  \          mAppend(iDiv(prevTarget), ch);\r

  \          chSource.target = prevTarget;\r

  \        } else {\r

  \          mAppend(this.dWordArea, ch);\r

  \          delete chSource.target;\r

  \        }\r

  \      }\r

  \      clearElement(dTarget);\r

  \    }\r

  \    if (isCopy) {\r

  \      let dNew = mText(dSource.innerHTML, dTarget, { wmin: 100, fz: 20,
  padding: 4, margin: 4, display: 'inline-block' });\r

  \      addDDSource(dNew, isCopy, clearTarget);\r

  \    } else {\r

  \      mAppend(dTarget, dSource);\r

  \    }\r

  \  }\r

  \  prompt() {\r

  \    let words = this.sentence = chooseRandom(this.sentences);\r

  \    showInstruction('', 'drag words into blanks', dTitle, true);\r

  \    mLinebreak(dTable);\r

  \    let fz = 32;\r

  \    let h = fz * 1.25, wmin = fz * 1.25;\r

  \    let items = Pictures = [];\r

  \    let containers = [];\r

  \    let options = _simpleOptions({ fz: fz, bg: 'transparent', fg: 'white',
  showPic: false, showLabels: true }, { wmin: wmin });\r

  \    let dArea = mDiv(dTable, { h: 150, display: 'flex', 'flex-wrap':
  'wrap', layout: 'fhcc' });\r

  \    mLinebreak(dTable);\r

  \    let dWordArea = this.dWordArea = mDiv(dTable, { h: 70, wmin: 20,
  display: 'flex', 'flex-wrap': 'wrap', layout: 'fhcc' });\r

  \    let i = 0;\r

  \    for (const word of words) {\r

  \      let item = { label: word, index: i };\r

  \      let container = { label: word, index: i };\r

  \      i += 1;\r

  \      let d = makeItemDiv(item, options);\r

  \      let dCont = mDiv(dArea, { wmin: wmin + 12, hmin: h + 10, bg:
  colorTrans('beige', .25), fg: 'black', margin: 12 });\r

  \      container.div = dCont;\r

  \      items.push(item);\r

  \      containers.push(container);\r

  \    }\r

  \    shuffle(items);\r

  \    items.map(x => { mAppend(dWordArea, iDiv(x)); mStyleX(iDiv(x), { h: h,
  w: 'auto' }); });\r

  \    enableDD(items, containers, this.dropHandler.bind(this), false,
  true);\r

  \    mLinebreak(dTable, 50);\r

  \    mButton('Done!', this.controller.evaluate.bind(this.controller),
  dTable, { fz: 28, matop: 10, rounding: 10, padding: 16, border: 8 },
  ['buttonClass']);\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    sayTryAgain();\r

  \    showFleetingMessage('Try again!', 0, { fg: 'white' });\r

  \    TOMain = setTimeout(() => { Pictures.map(x => mAppend(this.dWordArea,
  iDiv(x))); }, 1200);\r

  \    return 1500;\r

  \  }\r

  \  eval() {\r

  \    let i = 0;\r

  \    let isCorrect = true;\r

  \    for (const p of Pictures) {\r

  \      let cont = p.target;\r

  \      if (nundef(cont)) p.isCorrect = isCorrect = false;\r

  \      else if (p.index != cont.index) p.isCorrect = isCorrect = false;\r

  \      else p.isCorrect = true;\r

  \    }\r

  \    Selected = { piclist: Pictures, feedbackUI: Pictures.map(x => iDiv(x)),
  sz: getRect(iDiv(Pictures[0])).h + 10 };\r

  \    return isCorrect;\r

  \  }\r

  }"
CCanvasNoClear: "class CCanvasNoClear extends CCanvas {\r

  \  clear() { }\r

  }"
CCanvasPlot: "class CCanvasPlot extends CCanvas {\r

  \  clear() {\r

  \    cClear(this.cv, this.cx);\r

  \    this.draw_axes();\r

  \  }\r

  \  draw_axes() {\r

  \    let ctx = this.cx;\r

  \    ctx.beginPath();\r

  \    ctx.strokeStyle = \"rgb(128,128,128)\";\r

  \    ctx.moveTo(this.minx, 0); ctx.lineTo(this.maxx, 0);\r

  \    ctx.moveTo(0, this.miny); ctx.lineTo(0, this.maxy);\r

  \    ctx.stroke();\r

  \  }\r

  \  draw() {\r

  \    this.clear();\r

  \    for (const item of this.items) {\r

  \      if (isdef(item.func)) this.plot(item.func, item.color,
  item.thickness);\r

  \      else {\r

  \        super.draw_item(item);\r

  \      }\r

  \    }\r

  \  }\r

  \  pp(x, y, label = 'hallo', styles = {}) {\r

  \    addKeys({ fg: 'silver', bg: 'silver', w: 3, h: 3 }, styles)\r

  \    cEllipse(x, y, styles.w, styles.h, { bg: styles.bg }, 0, this.cx);\r

  \    addKeys({ x: x, y: y, offy: 'below 4', offx: 'center', family: 'arial
  narrow', fz: 20 }, styles);\r

  \    draw_text(this, label, styles);\r

  \  }\r

  \  plot(func, color, thick, filled = false) {\r

  \    let cx = this.cx;\r

  \    var xx, yy, dx = 4, x0 = 0, y0 = 0, scale = this.scale = 40;\r

  \    var imax = Math.round(this.maxx / dx);\r

  \    var imin = Math.round(this.minx / dx);\r

  \    cx.beginPath();\r

  \    cx.lineWidth = thick;\r

  \    cx.strokeStyle = cx.fillStyle = color;\r

  \    for (var i = imin; i <= imax; i++) {\r

  \      xx = dx * i; yy = scale * func(xx / scale);\r

  \      if (i == imin) cx.moveTo(x0 + xx, y0 - yy);\r

  \      else cx.lineTo(x0 + xx, y0 - yy);\r

  \    }\r

  \    cx.stroke(); if (filled) cx.fill();\r

  \  }\r

  }"
GAnagramBROKEN: "class GAnagramBROKEN extends Game {\r

  \  constructor(name, o) {\r

  \    super(name, o);\r

  \    if (this.language == 'C') {\r

  \      this.realLanguage = this.language;\r

  \      this.language = chooseRandom('E', 'S', 'F', 'D');\r

  \    }\r

  \  }\r

  \  clear() { super.clear(); if (isdef(this.language)) this.language =
  this.language; }\r

  \  start_Level() {\r

  \    this.keys = setKeysG(this, filterWordByLengthG, 10);\r

  \    if (this.keys.length < 10) { this.keys = setKeysG(this,
  filterWordByLengthG, 10, 'all'); }\r

  \  }\r

  \  prompt() {\r

  \    myShowPics(null, {}, {});\r

  \    if (this.hidden) {\r

  \      let d = iDiv(Pictures[0]);\r

  \      animate(d, 'aniAppearMinute', 100000);\r

  \    }\r

  \    setGoal();\r

  \    let w = this.showWord ? Goal.label : '';\r

  \    let wr = `drag letters to form ${w}`;\r

  \    let sp = `forme ${w}`;\r

  \    show_instruction(wr, dTitle, sp);\r

  \    mLinebreak(dTable, 22);\r

  \    let word = Goal.label.toUpperCase();\r

  \    let wlen = word.length;\r

  \    let wTable = getRect(mBy('table')).w;\r

  \    let wmax = wTable / wlen;\r

  \    let gap = 4;\r

  \    let fzMax = wTable / wlen - 3 * gap;\r

  \    let fz = Math.min(70, fzMax);\r

  \    let dpEmpty = createLetterInputsX(word, dTable, { pabottom: 5, bg:
  'grey', display: 'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: gap });\r

  \    let inputs = blankInputs(dpEmpty, range(0, wlen - 1), false);\r

  \    for (let i = 0; i < inputs.length; i++) {\r

  \      let l = iDiv(inputs[i]);\r

  \      ipadd(l);\r

  \      mClass(l, 'dropzone');\r

  \      l.id = 'input' + i;\r

  \    }\r

  \    this.inputs = inputs;\r

  \    let x = mLinebreak(dTable, 35);\r

  \    fz = Math.min(60, fzMax);\r

  \    let dp = createLetterInputsX(word, dTable, { bg: 'silver', display:
  'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: 4 });\r

  \    scrambleInputs(dp);\r

  \    let letters = Array.from(dp.children);\r

  \    for (let i = 0; i < letters.length; i++) {\r

  \      let l = letters[i];\r

  \      l.setAttribute('draggable', true);\r

  \      ipadd(l);\r

  \      l.id = 'letter' + i;\r

  \    }\r

  \    this.letters = letters;\r

  \    mLinebreak(dTable, 35);\r

  \    this.bDone = mButton('Done!',
  this.controller.evaluate.bind(this.controller), dTable, { fz: 28, matop: 10,
  rounding: 10, padding: 16, border: 8 }, ['buttonClass']);\r

  \    if (this.hidden) showFleetingMessage('category: ' +
  Pictures[0].info.subgroup, 5000);\r

  \    else if (!this.showWord) { showLabelPercentHintAfter(50, 6000); }\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    sayTryAgain();\r

  \    setTimeout(() => {\r

  \      this.inputs.map(x => iDiv(x).innerHTML = '_')\r

  \    }, 1500);\r

  \    return 10;\r

  \  }\r

  \  eval() {\r

  \    let s = this.inputs.map(x => iDiv(x).innerHTML);\r

  \    let w = s = s.join('');\r

  \    let word = Goal.label.toUpperCase();\r

  \    Selected = { answer: w, reqAnswer: word, feedbackUI: iDiv(Goal) };\r

  \    return w == word;\r

  \  }\r

  \  onTimeup() { this.controller.evaluate(); }\r

  }"
GameTimed1: "class GameTimed1 extends Game {\r

  \  constructor(name, o) { super(name, o); }\r

  \  clear() { clearInterval(this.TOI); super.clear(); }\r

  \  makeTimer() {\r

  \    if (nundef(this.msTotal)) this.msTotal = 5000;\r

  \    if (nundef(this.msInterval)) this.msInterval = 100;\r

  \    let w = this.wTimerOuter = 200;\r

  \    this.dTimeOuter = mDiv(dTable, { w: w, h: 25, border: 'white',
  rounding: 10, position: 'relative' });\r

  \    [this.wTimer, this.r, this.g] = [0, 0, 255];\r

  \    this.dTimeInner = mDiv(this.dTimeOuter, { h: 25, w: this.wTimer,
  rounding: 10, bg: `rgb(${this.r},${this.g},0)`, position: 'absolute', left: 0,
  top: 0 });\r

  \    this.dTimeDisplay = mDiv(this.dTimeOuter, { patop: 2, align: 'center',
  h: 25, w: w, position: 'absolute', left: 0, top: 0 });\r

  \    mLinebreak(dTable);\r

  \    this.dPause = mDiv(dTable, { cursor: 'pointer', fz: 12, hpadding: 30,
  vpadding: 10 }, null, 'click to pause');\r

  \    this.dPause.onclick = () => this.pause();\r

  \  }\r

  \  pause() {\r

  \    clearInterval(this.TOI);\r

  \    this.dPause.innerHTML = 'click to resume...';\r

  \    this.dPause.onclick = () => this.resume();\r

  \  }\r

  \  resume() {\r

  \    this.dPause.innerHTML = 'click to pause...';\r

  \    this.dPause.onclick = () => this.pause();\r

  \    this.TOI = setInterval(this.onTick.bind(this), this.msInterval);\r

  \  }\r

  \  activate() {\r

  \    this.msLeft = valf(this.msTotal, 10000);\r

  \    this.dTimeDisplay.innerHTML = timeConversion(this.msLeft, 'sh');\r

  \    this.TOI = setInterval(this.onTick.bind(this), this.msInterval);\r

  \  }\r

  \  onTick() {\r

  \    this.msLeft -= this.msInterval;\r

  \    this.wTimer += this.wTimerOuter * this.msInterval / this.msTotal;\r

  \    let inc_color = 255 * this.msInterval / this.msTotal;\r

  \    this.r += inc_color; this.g -= inc_color;\r

  \    mStyle(this.dTimeInner, { w: this.wTimer, bg:
  `rgb(${this.r},${this.g},0)` });\r

  \    this.dTimeDisplay.innerHTML = timeConversion(this.msLeft, 'sh');\r

  \    if (this.msLeft < 100) {\r

  \      clearInterval(this.TOI);\r

  \      this.dPause.style.opacity = 0;\r

  \      this.onTimeup();\r

  \    }\r

  \  }\r

  }"
GSpotit1: "class GSpotit1 extends GameTimed1 {\r

  \  constructor(name, o) { super(name, o); }\r

  \  startGame() { this.correctionFunc = showCorrectUis; }\r

  \  start_Level() {\r

  \    this.colarr = _calc_hex_col_array(this.rows, this.cols);\r

  \    let perCard = arrSum(this.colarr);\r

  \    this.nShared = (this.numCards * (this.numCards - 1)) / 2;\r

  \    this.nUnique = perCard - this.numCards + 1;\r

  \    this.numKeysNeeded = this.nShared + this.numCards * this.nUnique;\r

  \    this.keys = setKeysG(this, (_, x) => !x.includes(' '),
  this.numKeysNeeded + 1);\r

  \  }\r

  \  deal() {\r

  \    let keys = choose(this.keys, this.numKeysNeeded);\r

  \    let dupls = keys.slice(0, this.nShared);\r

  \    let uniqs = keys.slice(this.nShared);\r

  \    let infos = [];\r

  \    for (let i = 0; i < this.numCards; i++) {\r

  \      let keylist = uniqs.slice(i * this.nUnique, (i + 1) *
  this.nUnique);\r

  \      let info = { id: getUID(), shares: {}, keys: keylist, rows:
  this.rows, cols: this.cols, colarr: this.colarr };\r

  \      infos.push(info);\r

  \    }\r

  \    let iShared = 0;\r

  \    for (let i = 0; i < this.numCards; i++) {\r

  \      for (let j = i + 1; j < this.numCards; j++) {\r

  \        let c1 = infos[i];\r

  \        let c2 = infos[j];\r

  \        let dupl = dupls[iShared++];\r

  \        c1.keys.push(dupl);\r

  \        c1.shares[c2.id] = dupl;\r

  \        c2.shares[c1.id] = dupl;\r

  \        c2.keys.push(dupl);\r

  \      }\r

  \    }\r

  \    for (const info of infos) { shuffle(info.keys); }\r

  \    return infos;\r

  \  }\r

  \  interact(ev) {\r

  \    ev.cancelBubble = true;\r

  \    if (!canAct()) { console.log('no act'); return; }\r

  \    let keyClicked = evToProp(ev, 'key');\r

  \    let id = evToId(ev);\r

  \    if (isdef(keyClicked) && isdef(Items[id])) {\r

  \      this.pause();\r

  \      let item = Items[id];\r

  \      if (Object.values(item.shares).includes(keyClicked)) {\r

  \        let otherCard = spotitFindCardSharingSymbol(item, keyClicked);\r

  \        let cardSymbol = ev.target;\r

  \        let otherSymbol = spotitFindSymbol(otherCard, keyClicked);\r

  \        Selected = { isCorrect: true, feedbackUI: [cardSymbol, otherSymbol]
  };\r

  \      } else {\r

  \        let cardSymbol = ev.target;\r

  \        Selected = { isCorrect: false, feedbackUI: [cardSymbol],
  correctUis: this.getSharedSymbols(), correctionDelay: this.items.length * 1500
  };\r

  \      }\r

  \      this.controller.evaluate.bind(this.controller)();\r

  \    }\r

  \  }\r

  \  getSharedSymbols() {\r

  \    let result = [];\r

  \    for (const item of this.items) {\r

  \      for (const id in item.shares) {\r

  \        let k = item.shares[id];\r

  \        let ui = iGetl(item, k);\r

  \        result.push(ui);\r

  \      }\r

  \    }\r

  \    return result;\r

  \  }\r

  \  eval() { return Selected.isCorrect; }\r

  \  prompt() {\r

  \    this.trials = 1;\r

  \    show_instruction('find common symbol', dTitle);\r

  \    this.makeTimer();\r

  \    mLinebreak(dTable, 25);\r

  \    let infos = this.deal();\r

  \    let items = this.items = [];\r

  \    for (const info of infos) {\r

  \      let item = spotitCard(info, dTable, { margin: 10 },
  this.interact.bind(this));\r

  \      items.push(item);\r

  \    }\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  onTimeup() {\r

  \    Selected = { isCorrect: false, correctUis: this.getSharedSymbols(),
  correctionDelay: this.items.length * 2000 };\r

  \    this.controller.evaluate.bind(this.controller)();\r

  \  }\r

  }"
GAnagram_orig: "class GAnagram_orig extends Game {\r

  \  constructor(name, o) {\r

  \    super(name, o);\r

  \    if (this.language == 'C') {\r

  \      this.realLanguage = this.language;\r

  \      this.language = chooseRandom('E', 'S', 'F', 'D');\r

  \    }\r

  \  }\r

  \  clear() { super.clear(); if (isdef(this.language)) this.language =
  this.language; }\r

  \  start_Level() {\r

  \    this.keys = setKeysG(this, filterWordByLengthG, 10);\r

  \    if (this.keys.length < 10) { this.keys = setKeysG(this,
  filterWordByLengthG, 10, 'all'); }\r

  \  }\r

  \  prompt() {\r

  \    myShowPics(null, {}, {});\r

  \    if (this.hidden) {\r

  \      let d = iDiv(Pictures[0]);\r

  \      animate(d, 'aniAppearMinute', 100000);\r

  \    }\r

  \    setGoal();\r

  \    showInstruction(this.showWord ? Goal.label : '', this.language == 'E' ?
  'drag letters to form' : \"forme\", dTitle, true);\r

  \    mLinebreak(dTable, 25);\r

  \    this.inputs = createDropInputs();\r

  \    let x = mLinebreak(dTable, 50);\r

  \    this.letters = createDragLetters();\r

  \    if (this.hidden) showFleetingMessage('category: ' +
  Pictures[0].info.subgroup, 5000);\r

  \    else if (!this.showWord) { showLabelPercentHintAfter(50, 6000); }\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    sayTryAgain();\r

  \    setTimeout(() => {\r

  \      this.inputs.map(x => iDiv(x).innerHTML = '_')\r

  \    }, 1500);\r

  \    return 10;\r

  \  }\r

  \  eval(w, word) {\r

  \    Selected = { answer: w, reqAnswer: word, feedbackUI: iDiv(Goal) };\r

  \    return w == word;\r

  \  }\r

  }"
GAnagram_MESSY: "class GAnagram_MESSY extends Game {\r

  \  constructor(name, o) {\r

  \    super(name, o);\r

  \    if (this.language == 'C') {\r

  \      this.realLanguage = this.language;\r

  \      this.language = chooseRandom('E', 'S', 'F', 'D');\r

  \    }\r

  \  }\r

  \  clear() { super.clear(); if (isdef(this.language)) this.language =
  this.language; }\r

  \  start_Level() {\r

  \    this.keys = setKeysG(this, filterWordByLengthG, 10);\r

  \    if (this.keys.length < 10) { this.keys = setKeysG(this,
  filterWordByLengthG, 10, 'all'); }\r

  \  }\r

  \  prompt() {\r

  \    myShowPics(null, {}, {});\r

  \    if (this.hidden) {\r

  \      let d = iDiv(Pictures[0]);\r

  \      animate(d, 'aniAppearMinute', 100000);\r

  \    }\r

  \    setGoal();\r

  \    showInstruction(this.showWord ? Goal.label : '', this.language == 'E' ?
  'drag letters to form' : \"forme\", dTitle, true);\r

  \    mLinebreak(dTable, 25);\r

  \    let fz = 120; let word = Goal.label.toUpperCase(); let wlen =
  word.length;\r

  \    let dpEmpty = createLetterInputsX(word, dTable, { pabottom: 5, bg:
  'grey', display: 'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: 4 });\r

  \    let inputs = blankInputs(dpEmpty, range(0, wlen - 1), false);\r

  \    for (let i = 0; i < inputs.length; i++) {\r

  \      let l = iDiv(inputs[i]);\r

  \      l.ondragover = ev => ev.preventDefault();\r

  \      l.ondrop = event => {\r

  \        event.preventDefault();\r

  \        var data = event.dataTransfer.getData(\"Text\");\r

  \        event.target.innerHTML = data;\r

  \      }\r

  \      makeDraggableInner(l);\r

  \      mClass(l, 'dropzone');\r

  \      l.id = 'input' + i;\r

  \    }\r

  \    this.inputs = inputs;\r

  \    let x = mLinebreak(dTable, 50);\r

  \    fz = 60; word = Goal.label.toUpperCase();\r

  \    let dp = createLetterInputsX(word, dTable, { bg: 'silver', display:
  'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: 4 });\r

  \    scrambleInputs(dp);\r

  \    let letters = Array.from(dp.children);\r

  \    for (let i = 0; i < letters.length; i++) {\r

  \      let l = letters[i];\r

  \      l.setAttribute('draggable', true);\r

  \      makeDraggableInner(l);\r

  \      l.id = 'letter' + i;\r

  \    }\r

  \    this.letters = letters;\r

  \    if (this.hidden) showFleetingMessage('category: ' +
  Pictures[0].info.subgroup, 5000);\r

  \    else if (!this.showWord) { showLabelPercentHintAfter(50, 6000); }\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    sayTryAgain();\r

  \    setTimeout(() => {\r

  \      this.inputs.map(x => iDiv(x).innerHTML = '_')\r

  \    }, 1500);\r

  \    return 10;\r

  \  }\r

  \  eval(w, word) {\r

  \    Selected = { answer: w, reqAnswer: word, feedbackUI: iDiv(Goal) };\r

  \    return w == word;\r

  \  }\r

  }"
GAnagram_PCOnly: "class GAnagram_PCOnly extends Game {\r

  \  constructor(name, o) {\r

  \    super(name, o);\r

  \    if (this.language == 'C') {\r

  \      this.realLanguage = this.language;\r

  \      this.language = chooseRandom('E', 'S', 'F', 'D');\r

  \    }\r

  \  }\r

  \  clear() { super.clear(); if (isdef(this.language)) this.language =
  this.language; }\r

  \  start_Level() {\r

  \    this.keys = setKeysG(this, filterWordByLengthG, 10);\r

  \    if (this.keys.length < 10) { this.keys = setKeysG(this,
  filterWordByLengthG, 10, 'all'); }\r

  \  }\r

  \  prompt() {\r

  \    myShowPics(null, {}, {});\r

  \    if (this.hidden) {\r

  \      let d = iDiv(Pictures[0]);\r

  \      animate(d, 'aniAppearMinute', 100000);\r

  \    }\r

  \    setGoal();\r

  \    showInstruction(this.showWord ? Goal.label : '', this.language == 'E' ?
  'drag letters to form' : \"forme\", dTitle, true);\r

  \    mLinebreak(dTable, 25);\r

  \    let fz = 120; let word = Goal.label.toUpperCase(); let wlen =
  word.length;\r

  \    let dpEmpty = createLetterInputsX(word, dTable, { pabottom: 5, bg:
  'grey', display: 'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: 4 });\r

  \    let inputs = blankInputs(dpEmpty, range(0, wlen - 1), false);\r

  \    for (let i = 0; i < inputs.length; i++) {\r

  \      let l = iDiv(inputs[i]);\r

  \      l.ondragover = ev => ev.preventDefault();\r

  \      l.ondrop = event => { event.preventDefault(); var data =
  event.dataTransfer.getData(\"Text\"); event.target.innerHTML = data; }\r

  \      makeDraggableInner(l);\r

  \      mClass(l, 'dropzone');\r

  \      l.id = 'input' + i;\r

  \    }\r

  \    this.inputs = inputs;\r

  \    let x = mLinebreak(dTable, 50);\r

  \    fz = 60; word = Goal.label.toUpperCase();\r

  \    let dp = createLetterInputsX(word, dTable, { bg: 'silver', display:
  'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: 4 });\r

  \    scrambleInputs(dp);\r

  \    let letters = Array.from(dp.children);\r

  \    for (let i = 0; i < letters.length; i++) {\r

  \      let l = letters[i];\r

  \      l.setAttribute('draggable', true);\r

  \      makeDraggableInner(l);\r

  \      l.id = 'letter' + i;\r

  \    }\r

  \    this.letters = letters;\r

  \    mLinebreak(dTable, 50);\r

  \    this.bDone = mButton('Done!',
  this.controller.evaluate.bind(this.controller), dTable, { fz: 28, matop: 10,
  rounding: 10, padding: 16, border: 8 }, ['buttonClass']);\r

  \    if (this.hidden) showFleetingMessage('category: ' +
  Pictures[0].info.subgroup, 5000);\r

  \    else if (!this.showWord) { showLabelPercentHintAfter(50, 6000); }\r

  \    this.controller.activateUi.bind(this.controller)();\r

  \  }\r

  \  trialPrompt() {\r

  \    sayTryAgain();\r

  \    setTimeout(() => {\r

  \      this.inputs.map(x => iDiv(x).innerHTML = '_')\r

  \    }, 1500);\r

  \    return 10;\r

  \  }\r

  \  eval() {\r

  \    let s = this.inputs.map(x => iDiv(x).innerHTML);\r

  \    let w = s = s.join('');\r

  \    let word = Goal.label.toUpperCase();\r

  \    Selected = { answer: w, reqAnswer: word, feedbackUI: iDiv(Goal) };\r

  \    return w == word;\r

  \  }\r

  }"
CounterClass: "class CounterClass extends Map {\r

  \  constructor(iter, key = null) {\r

  \    super();\r

  \    this.key = key || (x => x);\r

  \    for (let x of iter) {\r

  \      this.add(x);\r

  \    }\r

  \  }\r

  \  add(x) {\r

  \    x = this.key(x);\r

  \    this.set(x, (this.get(x) || 0) + 1);\r

  \  }\r

  }"
__pictoG: "function __pictoG(key, x, y, w, h, fg, bg) {\r

  \  let ch = iconChars[key];\r

  \  let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';\r

  \  let text = String.fromCharCode('0x' + ch);\r

  }"
__start: "async function __start() {\r

  \  set_run_state_no_server();\r

  \  onpagedeactivated(() => { fiddleSave(); dbSave(); });\r

  \  await load_syms();\r

  \  await load_db();\r

  \  let dicode = CODE.di = await
  route_path_yaml_dict('../basejs/z_all.yaml');\r

  \  let dijustcode = CODE.justcode = await
  route_path_yaml_dict('../basejs/z_allcode.yaml');\r

  \  dTable = mSection({ h: window.innerHeight - 68 }, 'dTable');\r

  \  computeClosure();\r

  }"
_addFilterHighlight: function _addFilterHighlight(mobj) { mobj.highC('green'); }
_addOnelineVars: "function _addOnelineVars(superdi, o) {\r

  \  let [code, type] = [o.code, o.type];\r

  \  let crn = (code.match(/\\r\\n/g) || []).length;\r

  \  let oneliner = crn == 1;\r

  \  //let specialword = 'Counter'; //'PORT';\r

  \  if (oneliner && type == 'var' && code.includes(',') &&
  !code.includes('[') && !code.includes('{ ')) {\r

  \    let othervars = stringAfter(code, 'var').trim().split(',');\r

  \    othervars = othervars.map(x => firstWord(x, true));\r

  \    othervars.shift();\r

  \    for (const v of othervars) {\r

  \      let o1 = jsCopy(o);\r

  \      o1.lead = o.key;\r

  \      o1.key = v;\r

  \      o1.code = '';\r

  \      o1.sig = `var ${v};`;\r

  \      if (isNumber(v)) { continue; }\r

  \      lookupSetOverride(superdi, [type, v], o1);\r

  \    }\r

  \  }\r

  }"
_addPicto: "function _addPicto(dParent, key) {\r

  \  let pic = picto(key, 0, 0, 50, 50, 'red', 'black');\r

  \  dParent.appendChild(pic);\r

  \  return pic;\r

  }"
_addRelatives: "function _addRelatives(id, oid) {\r

  \  if (isdef(oid2ids[oid])) {\r

  \    for (const idOther of oid2ids[oid]) {\r

  \      if (idOther == id) {\r

  \        console.log('object', id, 'already exists in oid2ids[', oid,
  ']');\r

  \        continue;\r

  \      }\r

  \      listKey(id2uids, id, idOther);\r

  \      listKey(id2uids, idOther, id);\r

  \    }\r

  \  }\r

  }"
_addShape: "function _addShape(mobj, w, h, color, shape, { dx = 0, dy = 0, x1,
  y1, x2, y2, border, thickness, alpha, n = 6, path, idx, rounding } = {}) {\r

  \  let r = mobj['_' + shape]();\r

  \  mobj.shape = shape;\r

  \  if (alpha) color = colorFrom(color, alpha);\r

  \  mobj.elem.setAttribute('fill', color);\r

  \  if (this.isLine) {\r

  \    dx = isdef(dx) ? dx + this.x : this.x;\r

  \    dy = isdef(dy) ? dy + this.y : this.y;\r

  \  }\r

  \  let t = getTypeOf(r);\r

  \  if (t == 'rect') { _setRectDims(r, w, h, dx, dy); }\r

  \  else if (t == 'ellipse') { _setEllipseDims(r, w, h, dx, dy); }\r

  \  else if (t == 'polygon') {\r

  \    let pts;\r

  \    if (shape == 'hex') { if (h <= 0) { h = (2 * w) / 1.73; } pts =
  size2hex(w, h, dx, dy); }\r

  \    else if (shape == 'triangle') { pts = size2triup(w, h, dx, dy); }\r

  \    else if (shape == 'triangleDown') { pts = size2tridown(w, h, dx, dy);
  }\r

  \    else if (shape == 'star') {\r

  \      h = h == 0 ? w : h;\r

  \      let rad = w / 2;\r

  \      let pOuter = getCirclePoints(rad, n);\r

  \      let pInner = getCirclePoints(rad / 2, n, 180 / n);\r

  \      let points = [];\r

  \      for (let i = 0; i < n; i++) {\r

  \        points.push(pOuter[i]);\r

  \        points.push(pInner[i]);\r

  \      }\r

  \      for (let i = 0; i < points.length; i++) {\r

  \        points[i].X = (points[i].X + w / 2) / w;\r

  \        points[i].Y = (points[i].Y + h / 2) / h;\r

  \      }\r

  \      pts = polyPointsFrom(w, h, dx, dy, points);\r

  \    }\r

  \    r.setAttribute('points', pts);\r

  \  } else if (t == 'image') { _setRectDims(r, w, h, dx, dy);
  r.setAttribute('href', path); }\r

  \  else if (t == 'line') { _setLineDims(r, x1, y1, x2, y2) }\r

  \  if (thickness) {\r

  \    r.setAttribute('stroke-width', thickness);\r

  \    r.setAttribute('stroke', border ? border : mobj.fg);\r

  \  }\r

  \  if (rounding) {\r

  \    r.setAttribute('rx', rounding);\r

  \    r.setAttribute('ry', rounding);\r

  \  }\r

  \  if (isdef(idx) && mobj.elem.childNodes.length > idx) {\r

  \    mobj.elem.insertBefore(r, mobj.elem.childNodes[idx]);\r

  \  } else {\r

  \    mobj.elem.appendChild(r);\r

  \  }\r

  \  return r;\r

  }"
_addStandardInteraction: "function _addStandardInteraction(id) {\r

  \  let mobj = UIS[id];\r

  \  switch (id[2]) {\r

  \    case 'a':\r

  \      mobj.addClickHandler('elem', onClickSelectTuple);\r

  \      mobj.addMouseEnterHandler('title', highlightMsAndRelatives);\r

  \      mobj.addMouseLeaveHandler('title', unhighlightMsAndRelatives);\r

  \      break;\r

  \    case 'l':\r

  \    case 'r':\r

  \      mobj.addMouseEnterHandler('title', highlightMsAndRelatives);\r

  \      mobj.addMouseLeaveHandler('title', unhighlightMsAndRelatives);\r

  \      break;\r

  \    case 't':\r

  \      if (id[0] == 'm') {\r

  \        mobj.addClickHandler('elem', onClickFilterOrInfobox);\r

  \        if (mobj.isa.card) {\r

  \          mobj.addMouseEnterHandler('title', _highlightAndMagnify);\r

  \          mobj.addMouseLeaveHandler('title', _unhighlightAndMinify);\r

  \        } else {\r

  \          mobj.addMouseEnterHandler('title', highlightMsAndRelatives);\r

  \          mobj.addMouseLeaveHandler('title', unhighlightMsAndRelatives);\r

  \        }\r

  \      } else {\r

  \        mobj.addClickHandler('elem', onClickFilterTuples);\r

  \        mobj.addMouseEnterHandler('title', highlightMsAndRelatives);\r

  \        mobj.addMouseLeaveHandler('title', unhighlightMsAndRelatives);\r

  \      }\r

  \      break;\r

  \    default:\r

  \      mobj.addClickHandler('elem', onClickFilterTuples);\r

  \      mobj.addMouseEnterHandler('title', highlightMsAndRelatives);\r

  \      mobj.addMouseLeaveHandler('title', unhighlightMsAndRelatives);\r

  \      break;\r

  \  }\r

  }"
_bestRowsColsFill: "function _bestRowsColsFill(items, options) {\r

  \  let combis = _getSLCombis(items.length, options.isRegular);\r

  \  let wa = options.area.w, ha = options.area.h, wp = options.szPic.w, hp =
  options.szPic.h;\r

  \  let rows, cols;\r

  \  cols = wa / wp;\r

  \  rows = ha / hp;\r

  \  let aRatio = cols < rows ? cols / rows : rows / cols;\r

  \  options.or = cols < rows ? 'P' : 'L';\r

  \  let rmin = 20000, best;\r

  \  for (const r of combis) {\r

  \    let rnew = Math.abs(aRatio - r.s / r.l);\r

  \    if (rnew < rmin) { rmin = rnew; best = r; }\r

  \  }\r

  \  if (options.or == 'P') { rows = best.l; cols = best.s; } else { rows =
  best.s; cols = best.l; }\r

  \  let [w, h] = [options.szPic.w, options.szPic.h] = [wa / cols, ha /
  rows];\r

  \  return [rows, cols, w, h, options.or];\r

  }"
_bestRowsColsSize: "function _bestRowsColsSize(items, options) {\r

  \  let combis = _getSLCombis(items.length, options.isRegular, true);\r

  \  options.szPicTest = { w: options.szPic.w, h: options.szPic.h };\r

  \  let bestCombi = safeLoop(_findBestCombiOrShrink, [items, options,
  combis]);\r

  \  let [rows, cols, w, h] = [bestCombi.rows, bestCombi.cols,
  options.szPicTest.w, options.szPicTest.h]\r

  \  delete options.szPicTest;\r

  \  return [rows, cols, w, h, rows < cols ? 'L' : 'P'];\r

  }"
_bestRowsColsSizeWH: "function _bestRowsColsSizeWH(items, wTotal, hTotal,
  options) {\r

  \  let combis = _getSLCombis(items.length, options.isRegular, true);\r

  \  options.szPicTest = { w: options.szPic.w, h: options.szPic.h };\r

  \  let bestCombi = safeLoop(_findBestCombiOrShrinkWH, [items, wTotal,
  hTotal, options, combis]);\r

  \  let [rows, cols, w, h] = [bestCombi.rows, bestCombi.cols,
  options.szPicTest.w, options.szPicTest.h]\r

  \  delete options.szPicTest;\r

  \  return [rows, cols, w, h, rows < cols ? 'L' : 'P'];\r

  }"
_bringCardToFront: function _bringCardToFront(id) { let elem =
  document.getElementById(id); maxZIndex += 1; elem.style.zIndex = maxZIndex; }
_calc_hex_col_array: "function _calc_hex_col_array(rows, cols) {\r

  \  let colarr = [];\r

  \  let even = rows % 2 == 0;\r

  \  for (let i = 0; i < rows; i++) {\r

  \    colarr[i] = cols;\r

  \    if (even && i < (rows / 2) - 1) cols += 1;\r

  \    else if (even && i > rows / 2) cols -= 1;\r

  \    else if (!even && i < (rows - 1) / 2) cols += 1;\r

  \    else if (!even || i >= (rows - 1) / 2) cols -= 1;\r

  \  }\r

  \  return colarr;\r

  }"
_calc_hex_col_array_old: "function _calc_hex_col_array_old(rows, cols) {\r

  \  let colarr = [];\r

  \  for (let i = 0; i < rows; i++) {\r

  \    colarr[i] = cols;\r

  \    if (i < (rows - 1) / 2) cols += 1;\r

  \    else cols -= 1;\r

  \  }\r

  \  return colarr;\r

  }"
_calcFontPicFromText: "function _calcFontPicFromText(options, overrideExisting =
  true) {\r

  \  if (nundef(options.fzPic) || overrideExisting) options.fzPic =
  Math.floor(options.fzText * 4 * (options.luc == 'u' ? .7 : .6));\r

  \  return options.fzPic;\r

  }"
_calcPadGap: "function _calcPadGap(p, w, h) {\r

  \  if (isString(p)) {\r

  \    let pad = Math.min(w, h) * firstNumber(p) / 100;\r

  \    console.log('pad', padding);\r

  \    return pad;\r

  \  } else if (p > 0 && p < 1) return Math.min(w, h) * p;\r

  \  else return p;\r

  }"
_centerGridVerticallyWithinArea: "function
  _centerGridVerticallyWithinArea(items, options) {\r

  \  let dGrid = mBy(options.idGrid);\r

  \  let dArea = mBy(options.idArea);\r

  \  let gRect = getRect(dGrid);\r

  \  let aRect = getRect(dArea);\r

  \  let itemRect = getRect(lDiv(items[0]));\r

  \  let [gsz, asz, itemsz] = [rectToSize(gRect), rectToSize(aRect),
  rectToSize(itemRect)]\r

  \  let extra = options.area.h - gRect.h;\r

  \  let pv = valf(options.percentVertical, 50);\r

  \  let matop = extra * pv / 100;\r

  \  mStyleX(dGrid, { matop: matop });\r

  \  mReveal(dMain);\r

  }"
_chainExRec: "function _chainExRec(akku, taskChain, onComplete) {\r

  \  if (CancelChain) {\r

  \    clearTimeout(ChainTimeout);\r

  \    BlockChain = false;\r

  \    console.log('chain canceled!');\r

  \    return akku;\r

  \  } else if (isEmpty(taskChain)) {\r

  \    BlockChain = false;\r

  \    if (onComplete) onComplete(akku);\r

  \    else console.log('akku', akku, '\\nBlockChain', BlockChain,
  '\\nCancelChain', CancelChain)\r

  \  } else {\r

  \    let task = taskChain[0], f = task.f, parr = isdef(task.parr) ?
  task.parr : [], t = task.msecs, waitCond = task.waitCond, tWait =
  task.tWait;\r

  \    if (isdef(waitCond) && !waitCond()) {\r

  \      if (nundef(tWait)) tWait = 300;\r

  \      ChainTimeout = setTimeout(() => _chainExRec(akku, taskChain,
  onComplete), tWait);\r

  \    } else {\r

  \      for (let i = 0; i < parr.length; i++) {\r

  \        let para = parr[i];\r

  \        if (para == '_last') parr[i] = arrLast(akku);\r

  \        else if (para == '_all' || para == '_list') parr[i] = akku;\r

  \        else if (para == '_first') parr[i] = akku[0];\r

  \      }\r

  \      let result = f(...parr);\r

  \      if (isdef(result)) akku.push(result);\r

  \      if (isdef(t)) {\r

  \        ChainTimeout = setTimeout(() => _chainExRec(akku,
  taskChain.slice(1), onComplete), t);\r

  \      } else {\r

  \        _chainExRec(akku, taskChain.slice(1), onComplete);\r

  \      }\r

  \    }\r

  \  }\r

  }"
_checkOverflow: "function _checkOverflow(items, options, dGrid) {\r

  \  console.log('exec...')\r

  \  if (isOverflown(dGrid)) { _sizeByFactor(items, options, dGrid, .99); }\r

  }"
_checkOverflowPixel: "function _checkOverflowPixel(items, options, dGrid) {\r

  \  console.log('exec...')\r

  \  if (isOverflown(dGrid)) { _sizeByPixel(items, options, dGrid, -1); }\r

  }"
_clearHand: "function _clearHand(idHand, subArea) {\r

  \  let hand = UIS[idHand];\r

  \  if (hand.cards) {\r

  \    while (!isEmpty(hand.cards)) {\r

  \      removeCardFromHand(hand.cards[0], hand, subArea);\r

  \    }\r

  \  }\r

  }"
_cloneIfNecessary: "function _cloneIfNecessary(value, optionsArgument) {\r

  \  var clone = optionsArgument && optionsArgument.clone === true\r

  \  return (clone && _isMergeableObject(value)) ?
  deepmerge(_emptyTarget(value), value, optionsArgument) : value\r

  }"
_closeInfoboxesForBoatOids: "function _closeInfoboxesForBoatOids(boat) {\r

  \  let oids = boat.o.oids;\r

  \  for (const oid of oids) hideInfobox(oid);\r

  }"
_computeClosure: "function _computeClosure(symlist) {\r

  \  let keys = {};\r

  \  for (const k in CODE.di) { for (const k1 in CODE.di[k]) keys[k1] =
  CODE.di[k][k1]; }\r

  \  CODE.all = keys;\r

  \  CODE.keylist = Object.keys(keys)\r

  \  let inter = intersection(Object.keys(keys), Object.keys(window));\r

  \  let done = {};\r

  \  let tbd = valf(symlist, ['_start']);\r

  \  let MAX = 1007, i = 0;\r

  \  let alltext = '';\r

  \  while (!isEmpty(tbd)) {\r

  \    if (++i > MAX) break;\r

  \    let sym = tbd[0];\r

  \    let o = CODE.all[sym];\r

  \    if (nundef(o)) o = getObjectFromWindow(sym);\r

  \    if (o.type != 'func' && o.type != 'cla') { tbd.shift(); lookupSet(done,
  [o.type, sym], o); continue; }\r

  \    let olive = window[sym];\r

  \    if (nundef(olive)) { tbd.shift(); lookupSet(done, [o.type, sym], o);
  continue; }\r

  \    let text = olive.toString();\r

  \    if (!isEmpty(text)) alltext += text + '\\r\\n';\r

  \    let words = toWords(text, true);\r

  \    for (const w of words) {\r

  \      if (nundef(done[w]) && w != sym && isdef(CODE.all[w])) addIf(tbd,
  w);\r

  \    }\r

  \    tbd.shift();\r

  \    lookupSet(done, [o.type, sym], o);\r

  \  }\r

  \  let tres = '';\r

  \  for (const k of ['const', 'var', 'cla', 'func']) {\r

  \    console.log('done', k, done[k])\r

  \    let o = done[k]; if (nundef(o)) continue;\r

  \    let klist = get_keys(o);\r

  \    if (k == 'func') klist = sortCaseInsensitive(klist);\r

  \    else if (k == 'cla') klist = sortClassKeys(done);\r

  \    else if (k == 'const') klist = sortConstKeys(done).map(x => x.key);\r

  \    for (const k1 of klist) {\r

  \      let code = CODE.justcode[k1];\r

  \      if (!isEmptyOrWhiteSpace(code)) tres += code + '\\r\\n';\r

  \    }\r

  \  }\r

  \  return done;\r

  }"
_createDeck: "function _createDeck({ hasJokers = false } = {}) {\r

  \  let deck = null;\r

  \  if (hasJokers) { deck = DeckA(true); }\r

  \  else { deck = DeckA(); }\r

  \  deck.isFaceDown = true;\r

  \  return deck;\r

  }"
_createDivs: "function _createDivs(items, ifs, options) {\r

  \  if (nundef(options.textPos)) options.textPos = 'none';\r

  \  let w = isdef(options.w) ? options.w : options.sz;\r

  \  let h = isdef(options.h) ? options.h : options.sz;\r

  \  let padding = (isdef(ifs.padding) ? ifs.padding : 1);\r

  \  let bo = ifs.border;\r

  \  bo = isdef(bo) ? isString(bo) ? firstNumber(bo) : bo : 0;\r

  \  let wNet = w - 2 * padding - 2 * bo;\r

  \  let hNet = h - 2 * padding - 2 * bo;\r

  \  let pictureSize = wNet;\r

  \  options.center = true;\r

  \  let picStyles = { w: wNet, h: isdef(options.center) ? hNet : hNet +
  padding };\r

  \  let textStyles, hText;\r

  \  if (options.showLabels) {\r

  \    let longestLabel = findLongestLabel(items);\r

  \    let oneWord = longestLabel.label.replace(' ', '_');\r

  \    let maxTextHeight = options.showPics ? hNet / 2 : hNet;\r

  \    textStyles = idealFontsize(oneWord, hNet, maxTextHeight, 22, 8);\r

  \    hText = textStyles.h;\r

  \    pictureSize = hNet - hText;\r

  \    picStyles = { w: pictureSize, h: pictureSize };\r

  \    delete textStyles.h;\r

  \    delete textStyles.w;\r

  \  }\r

  \  let outerStyles = { rounding: 10, margin: w / 12, display:
  'inline-block', w: w, h: h, padding: padding, bg: 'white', align: 'center',
  'box-sizing': 'border-box' };\r

  \  if (options.showLabels == true && options.textPos == 'none' &&
  nundef(options.h)) delete outerStyles.h;\r

  \  outerStyles = deepmergeOverride(outerStyles, ifs);\r

  \  let pic, text;\r

  \  for (let i = 0; i < items.length; i++) {\r

  \    let item = items[i];\r

  \    let k = item.key;\r

  \    let d = mDiv();\r

  \    if (isdef(item.textShadowColor)) {\r

  \      let sShade = '0 0 0 ' + item.textShadowColor;\r

  \      if (options.showPics) {\r

  \        picStyles['text-shadow'] = sShade;\r

  \        picStyles.fg = colorFrom('black', item.contrast); //'#00000080'
  '#00000030' \r

  \      } else {\r

  \        textStyles['text-shadow'] = sShade;\r

  \        textStyles.fg = colorFrom('black', item.contrast); //'#00000080'
  '#00000030' \r

  \      }\r

  \    }\r

  \    if (options.showPics) {\r

  \      pic = zPic(k, null, picStyles, true, false);\r

  \      delete pic.info;\r

  \      mAppend(d, pic.div);\r

  \    }\r

  \    if (options.showLabels) {\r

  \      textStyles.fg = item.fg;\r

  \      text = zText1Line(item.label, null, textStyles, hText);\r

  \      mAppend(d, text.div);\r

  \    }\r

  \    outerStyles.bg = item.bg;\r

  \    outerStyles.fg = item.fg;\r

  \    mStyleX(d, outerStyles);\r

  \    d.id = getUID();\r

  \    d.onclick = options.onclick;\r

  \    item.id = d.id;\r

  \    item.row = Math.floor(item.index / options.cols);\r

  \    item.col = item.index % options.cols;\r

  \    item.div = d;\r

  \    if (isdef(pic)) { item.pic = pic; item.fzPic = pic.innerDims.fz; }\r

  \    if (isdef(text)) item.text = text;\r

  \    item.isSelected = false;\r

  \    item.isLabelVisible = options.showLabels;\r

  \    item.dims = parseDims(w, w, d.style.padding);\r

  \    if (options.showRepeat) addRepeatInfo(d, item.iRepeat, w);\r

  \  }\r

  }"
_createDivsS: "function _createDivsS(items, ifs, options) {\r

  \  if (nundef(options.textPos)) options.textPos = 'none';\r

  \  let w = isdef(options.w) ? options.w : options.sz;\r

  \  let h = isdef(options.h) ? options.h : options.sz;\r

  \  let padding = (isdef(ifs.padding) ? ifs.padding : 1);\r

  \  let bo = ifs.border;\r

  \  bo = isdef(bo) ? isString(bo) ? firstNumber(bo) : bo : 0;\r

  \  let wNet = w - 2 * padding - 2 * bo;\r

  \  let hNet = h - 2 * padding - 2 * bo;\r

  \  let pictureSize = wNet;\r

  \  options.center = true;\r

  \  let picStyles = { w: wNet, h: isdef(options.center) ? hNet : hNet +
  padding };\r

  \  let textStyles, hText;\r

  \  if (options.showLabels) {\r

  \    let longestLabel = findLongestLabel(items);\r

  \    let oneWord = longestLabel.label.replace(' ', '_');\r

  \    let maxTextHeight = options.showPics ? hNet / 2 : hNet;\r

  \    textStyles = idealFontsize(oneWord, hNet, maxTextHeight, 22, 8);\r

  \    hText = textStyles.h;\r

  \    pictureSize = hNet - hText;\r

  \    picStyles = { w: pictureSize, h: pictureSize };\r

  \    delete textStyles.h;\r

  \    delete textStyles.w;\r

  \  }\r

  \  let outerStyles = { rounding: 10, margin: w / 12, display:
  'inline-block', w: w, h: h, padding: padding, bg: 'white', align: 'center',
  'box-sizing': 'border-box' };\r

  \  if (options.showLabels == true && options.textPos == 'none' &&
  nundef(options.h)) delete outerStyles.h;\r

  \  outerStyles = deepmergeOverride(outerStyles, ifs);\r

  \  let pic, text;\r

  \  for (let i = 0; i < items.length; i++) {\r

  \    let item = items[i];\r

  \    let k = item.key;\r

  \    let d = mDiv();\r

  \    if (isdef(item.textShadowColor)) {\r

  \      let sShade = '0 0 0 ' + item.textShadowColor;\r

  \      if (options.showPics) {\r

  \        picStyles['text-shadow'] = sShade;\r

  \        picStyles.fg = colorFrom('black', item.contrast); //'#00000080'
  '#00000030' \r

  \      } else {\r

  \        textStyles['text-shadow'] = sShade;\r

  \        textStyles.fg = colorFrom('black', item.contrast); //'#00000080'
  '#00000030' \r

  \      }\r

  \    }\r

  \    if (options.showPics) {\r

  \      pic = zPicS(item, null, picStyles, true, false);\r

  \      delete pic.info;\r

  \      mAppend(d, pic.div);\r

  \    }\r

  \    if (options.showLabels) {\r

  \      textStyles.fg = item.fg;\r

  \      text = zText1Line(item.label, null, textStyles, hText);\r

  \      mAppend(d, text.div);\r

  \    }\r

  \    outerStyles.bg = item.bg;\r

  \    outerStyles.fg = item.fg;\r

  \    mStyleX(d, outerStyles);\r

  \    d.id = getUID();\r

  \    d.onclick = options.onclick;\r

  \    item.id = d.id;\r

  \    item.row = Math.floor(item.index / options.cols);\r

  \    item.col = item.index % options.cols;\r

  \    item.div = d;\r

  \    if (isdef(pic)) { item.pic = pic; item.fzPic = pic.innerDims.fz; }\r

  \    if (isdef(text)) item.text = text;\r

  \    item.isSelected = false;\r

  \    item.isLabelVisible = options.showLabels;\r

  \    item.dims = parseDims(w, w, d.style.padding);\r

  \    if (options.showRepeat) addRepeatInfo(d, item.iRepeat, w);\r

  \  }\r

  }"
_createDom: "function _createDom(domType) {\r\n}"
_dbInitX: "async function _dbInitX(dir = '../DATA/') {\r

  \  let users = await route_path_yaml_dict(dir + 'users.yaml');\r

  \  let settings = await route_path_yaml_dict(dir + 'settings.yaml');\r

  \  let addons = await route_path_yaml_dict(dir + 'addons.yaml');\r

  \  let games = await route_path_yaml_dict(dir + 'games.yaml');\r

  \  let tables = await route_path_yaml_dict(dir + 'tables.yaml');\r

  \  DB = {\r

  \    id: 'boardGames',\r

  \    users: users,\r

  \    settings: settings,\r

  \    games: games,\r

  \    tables: tables,\r

  \    addons: addons,\r

  \  };\r

  \  dbSaveX();\r

  }"
_dbLoadX: "async function _dbLoadX(callback) {\r

  \  let path = './DB.yaml';\r

  \  DB = await route_path_yaml_dict(path);\r

  \  if (isdef(callback)) callback();\r

  }"
_deepMerge: "function _deepMerge(target, source, optionsArgument) {\r

  \  var array = Array.isArray(source);\r

  \  var options = optionsArgument || { arrayMerge: _defaultArrayMerge }\r

  \  var arrayMerge = options.arrayMerge || _defaultArrayMerge\r

  \  if (array) {\r

  \    return Array.isArray(target) ? arrayMerge(target, source,
  optionsArgument) : _cloneIfNecessary(source, optionsArgument)\r

  \  } else {\r

  \    return _mergeObject(target, source, optionsArgument)\r

  \  }\r

  }"
_defaultArrayMerge: "function _defaultArrayMerge(target, source,
  optionsArgument) {\r

  \  var destination = target.slice()\r

  \  source.forEach(function (e, i) {\r

  \    if (typeof destination[i] === 'undefined') {\r

  \      destination[i] = _cloneIfNecessary(e, optionsArgument)\r

  \    } else if (_isMergeableObject(e)) {\r

  \      destination[i] = deepmerge(target[i], e, optionsArgument)\r

  \    } else if (target.indexOf(e) === -1) {\r

  \      destination.push(_cloneIfNecessary(e, optionsArgument))\r

  \    }\r

  \  })\r

  \  return destination\r

  }"
_deleteFromOwnerList: function _deleteFromOwnerList(id) { let owner =
  IdOwner[id[2]]; if (isdef(owner)) removeInPlace(owner, id); }
_deqSound: "function _deqSound() {\r

  \  let key = _qSound.shift();\r

  \  let url = _audioSources[key];\r

  \  _sndPlayer = new Audio(url);\r

  \  _sndPlayer.onended = _whenSoundPaused;\r

  \  _sndPlayer.onloadeddata = () => { _loaded = true; _sndPlayer.play(); };\r

  \  _sndPlayer.load();\r

  }"
_emptyTarget: "function _emptyTarget(val) {\r

  \  return Array.isArray(val) ? [] : {}\r

  }"
_enqSound: function _enqSound(key) { if (nundef(_qSound)) _qSound = [];
  _qSound.push(key); }
_evToClass: "function _evToClass(ev, className) {\r

  \  let elem = findParentWithClass(ev.target, className);\r

  \  return elem;\r

  }"
_experimental: "async function _experimental() {\r

  \  t01_fractions();\r

  }"
_extendItemsAndOptions: "function _extendItemsAndOptions(items, options) {\r

  \  options.longestLabel = findLongestWord(items.map(x => x.label));\r

  \  options.wLongest = extendWidth(options.longestLabel);\r

  \  let ifs = options.ifs;\r

  \  for (let i = 0; i < items.length; i++) {\r

  \    let item = items[i];\r

  \    item.index = i;\r

  \    let val;\r

  \    for (const propName in ifs) {\r

  \      let prop = ifs[propName];\r

  \      if (isLiteral(prop)) val = prop;\r

  \      else if (isList(prop)) val = prop[i % prop.length];\r

  \      else if (typeof (prop) == 'function') val = prop(i, item, options,
  items);\r

  \      else val = null;\r

  \      if (isdef(val)) item[propName] = val;\r

  \    }\r

  \  }\r

  \  if (options.numRepeat > 1) { items = zRepeatEachItem(items,
  options.numRepeat, options.shufflePositions); }\r

  \  if (isdef(options.colorKeys)) items = zRepeatInColorEachItem(items,
  options.colorKeys);\r

  \  options.N = items.length;\r

  \  return items;\r

  }"
_extendOptions: "function _extendOptions(options, defOptions, createArea = true)
  {\r

  \  defOptions = {\r

  \    wper: 96, hper: 96, dParent: dTable,\r

  \    showPic: true, szPic: { w: 120, h: 120 }, bg: 'random', fg: 'white',
  margin: 4, rounding: 6,\r

  \    showLabels: true, luc: 'l', labelPos: 'bottom', lang: 'E', keySet:
  'all',\r

  \    fzText: 20, fzPic: 60,\r

  \    padding: .025, gap: .1, isUniform: true, isRegular: false, fillArea:
  true,\r

  \    shufflePositions: false, sameBackground: true, showRepeat: false,
  repeat: 1,\r

  \    contrast: .32,\r

  \    ifs: {},\r

  \    handler: _standardHandler,\r

  \  };\r

  \  addKeys(defOptions, options);\r

  \  if (createArea && nundef(options.dArea)) {\r

  \    if (isdef(options.wArea) && isdef(options.hArea)) {\r

  \      options.dArea = getMainArea(options.dParent, { w: options.wArea, h:
  options.hArea });\r

  \    } else if (isdef(options.areaPadding)) {\r

  \      options.dArea = getMainAreaPadding(options.dParent, padding =
  options.areaPadding);\r

  \    } else options.dArea = getMainAreaPercent(options.dParent, null,
  options.wper, options.hper, getUID());\r

  \    options.area = getRect(options.dArea);\r

  \    options.idArea = options.dArea.id;\r

  \    options.aRatio = options.area.w / options.area.h;\r

  \    options.containerShape = options.area.w > options.area.h ? 'L' : 'P';\r

  \  }\r

  \  if (options.repeat > 1 && nundef(options.ifs.bg)) {\r

  \    let bg = isdef(options.colorKeys) ? 'white' : (i) =>
  options.sameBackground ? computeColor('random') : 'random';\r

  \    let fg = isdef(options.colorKeys) ? 'black' : 'white';\r

  \    options.ifs.bg = bg;\r

  \    options.ifs.fg = fg;\r

  \  }\r

  \  _calcFontPicFromText(options, false);\r

  \  if (nundef(options.labelStyles)) options.labelStyles = {};\r

  \  if (options.showLabels) {\r

  \    if (options.labelPos == 'bottom') options.labelBottom = true; else
  options.labelTop = true;\r

  \    options.labelStyles.fz = options.fzText;\r

  \  }\r

  \  options.picStyles = { fz: options.fzPic };\r

  \  let [w, h] = [options.szPic.w, options.szPic.h];\r

  \  options.outerStyles = {\r

  \    w: w, h: h, bg: options.bg, fg: options.fg,\r

  \    display: 'inline-flex', 'flex-direction': 'column',\r

  \    'justify-content': 'center', 'align-items': 'center', 'vertical-align':
  'top',\r

  \    //'place-content': 'center',\r

  \    padding: 0, box: true, margin: options.margin, rounding:
  options.rounding,\r

  \  };\r

  \  return options;\r

  }"
_extendOptions_0: "function _extendOptions_0(dArea, options, defOptions) {\r

  \  defOptions = {\r

  \    szPic: { w: 100, h: 100 },\r

  \    showLabels: true, maxlen: 25, luc: 'c', labelPos: 'bottom', lang:
  'D',\r

  \    fzText: 20, fzPic: 60,\r

  \    padding: .025, gap: .1, isUniform: true, isRegular: true, fillArea:
  false,\r

  \    shufflePositions: false, sameBackground: true, showRepeat: false,
  repeat: 1,\r

  \    contrast: .32,\r

  \    ifs: {},\r

  \    handler: _standardHandler,\r

  \  };\r

  \  addKeys(defOptions, options);\r

  \  if (options.repeat > 1 && nundef(options.ifs.bg)) {\r

  \    let bg = isdef(options.colorKeys) ? 'white' : (i) =>
  options.sameBackground ? computeColor('random') : 'random';\r

  \    options.ifs.bg = bg;\r

  \  }\r

  \  _calcFontPicFromText(options, false);\r

  \  options.area = getRect(dArea);\r

  \  options.idArea = dArea.id;\r

  \  options.aRatio = options.area.w / options.area.h;\r

  \  options.containerShape = options.area.w > options.area.h ? 'L' : 'P';\r

  \  if (nundef(options.labelStyles)) options.labelStyles = {};\r

  \  if (options.showLabels) {\r

  \    if (options.labelPos == 'bottom') options.labelBottom = true; else
  options.labelTop = true;\r

  \    options.labelStyles.fz = options.fzText;\r

  \  }\r

  \  options.picStyles = { fz: options.fzPic };\r

  \  options.outerStyles = {\r

  \    bg: 'blue', fg: 'contrast',\r

  \    display: 'inline-flex', 'flex-direction': 'column', 'place-content':
  'center',\r

  \    padding: 0, box: true, rounding: 6,\r

  \  };\r

  \  return options;\r

  }"
_extendOptionsFillArea: "function _extendOptionsFillArea(dArea, options) {\r

  \  defOptions = {\r

  \    szPic: { w: 100, h: 100 },\r

  \    showLabels: true, maxlen: 25, padding: .025, gap: .1,\r

  \    isUniform: true, fillArea: true,\r

  \    fzText: 8, luc: 'c', labelPos: 'bottom', lang: 'E',\r

  \  };\r

  \  if (nundef(options.fzPic)) options.fzPic = Math.floor(options.fzText * 4
  * (options.luc == 'u' ? .7 : .6));\r

  \  _extendOptions_0(dArea, options, defOptions);\r

  }"
_findBestCombiOrShrink: "function _findBestCombiOrShrink(items, options, combis)
  {\r

  \  bestCombi = firstCond(combis, x => options.area.w / x.cols >
  options.szPicTest.w && options.area.h / x.rows > options.szPicTest.h);\r

  \  if (isdef(bestCombi)) return bestCombi;\r

  \  options.szPicTest = { w: .9 * options.szPicTest.w, h: .9 *
  options.szPicTest.h };\r

  \  return null;\r

  }"
_findBestCombiOrShrinkWH: "function _findBestCombiOrShrinkWH(items, wTotal,
  hTotal, options, combis) {\r

  \  bestCombi = firstCond(combis, x => wTotal / x.cols > options.szPicTest.w
  && hTotal / x.rows > options.szPicTest.h);\r

  \  if (isdef(bestCombi)) return bestCombi;\r

  \  options.szPicTest = { w: .9 * options.szPicTest.w, h: .9 *
  options.szPicTest.h };\r

  \  return null;\r

  }"
_findCollections: "function _findCollections(key, o) {\r

  \  let sets = [];\r

  \  _recFindCollections(key, o, sets);\r

  \  return sets;\r

  }"
_gCreate: function _gCreate(tag) { return document.createElementNS('http:/' +
  '/www.w3.org/2000/svg', tag); }
_genOptions: "function _genOptions(opt = {}) {\r

  \  let defOptions = {\r

  \    szPic: { w: 100, h: 100 }, wper: 80, hper: 80, n: 20,\r

  \    showLabels: true, maxlen: 25, luc: 'c', labelPos: 'bottom', lang:
  'D',\r

  \    fzText: 20, fzPic: 60,\r

  \    padding: .025, gap: .1, isUniform: true, isRegular: true, fillArea:
  false,\r

  \  };\r

  \  addKeys(defOptions, opt);\r

  \  if (nundef(opt.dArea)) opt.dArea = getMainAreaPercent(dTable, YELLOW,
  opt.wper, opt.hper, 'dArea');\r

  \  if (nundef(opt.items)) opt.items = genItems(opt.n, opt);\r

  \  _calcFontPicFromText(opt, false);\r

  \  opt.area = getRect(opt.dArea);\r

  \  opt.aRatio = opt.area.w / opt.area.h;\r

  \  opt.containerShape = opt.area.w > opt.area.h ? 'L' : 'P';\r

  \  if (nundef(opt.labelStyles)) opt.labelStyles = {};\r

  \  if (opt.showLabels) {\r

  \    if (opt.labelPos == 'bottom') opt.labelBottom = true; else opt.labelTop
  = true;\r

  \    opt.labelStyles.fz = opt.fzText;\r

  \  }\r

  \  opt.picStyles = { fz: opt.fzPic };\r

  \  opt.outerStyles = {\r

  \    bg: 'random', display: 'inline-flex', 'flex-direction': 'column',
  'place-content': 'center',\r

  \    padding: 0, box: true, rounding: 6,\r

  \  };\r

  \  return opt;\r

  }"
_get_layer: "function _get_layer(key, options) {\r

  \  let o = Geo.layerInfo[key];\r

  \  if (nundef(o)) o = Geo.layerInfo.empty;\r

  \  copyKeys(options, o.options);\r

  \  return L.tileLayer(o.url, o.options);\r

  }"
_getChildrenOf: function _getChildrenOf(id) { let ui = UIS[id]; return ui.children; }
_getCollectionType: "function _getCollectionType(o) {\r

  \  if (nundef(o)) return false;\r

  \  if (nundef(o._set) && !isList(o)) return false;\r

  \  let arr;\r

  \  if (isdef(o._set)) arr = o._set; else arr = o;\r

  \  if (!isList(arr) || isEmpty(arr)) return false;\r

  \  let type = null;\r

  \  let generic_type = null;\r

  \  for (const el of arr) {\r

  \    if (nundef(el)) return false;\r

  \    if (isdef(el._obj)) {\r

  \      if (type && type != '_obj') return false;\r

  \      type = '_obj';\r

  \      let oEl = G.table[el._obj];\r

  \      if (nundef(oEl)) return false;\r

  \      if (isdef(oEl.generic_type)) {\r

  \        if (!generic_type) generic_type = oEl.generic_type;\r

  \        if (generic_type != oEl.generic_type) return false;\r

  \      }\r

  \    } else {\r

  \      if (type == '_obj') return false;\r

  \      if (!type) type = generic_type = 'string';\r

  \    }\r

  \  }\r

  \  return { type: type, generic_type: generic_type };\r

  }"
_getKeysCond: "function _getKeysCond(n, cond, keySet = 'all') {\r

  \  if (isString(keySet)) keySet = KeySets[keySet];\r

  \  let keys = isdef(cond) ? isString(cond) ?\r

  \    isdef(KeySets[cond]) ? KeySets[cond] : keySet.filter(x =>
  x.includes(cond))\r

  \    : keySet.filter(x => cond(Syms[x])) : keySet;\r

  \  keys = n >= keys.length ? keys : choose(keys, n);\r

  \  return keys;\r

  }"
_getRandomRegularN: "function _getRandomRegularN(from = 2, to = 100) {\r

  \  const arr = [2, 3, 4, 6, 8, 9, 12, 15, 16, 20, 24, 30, 36, 40, 42, 44,
  48, 56, 64, 72, 84, 96, 100];\r

  \  return chooseRandom(arr.filter(x => x >= from && x <= to));\r

  }"
_getRegularN: "function _getRegularN(from = 2, to = 100) {\r

  \  const arr = [2, 3, 4, 6, 8, 9, 12, 15, 16, 20, 24, 30, 36, 40, 42, 44,
  48, 56, 64, 72, 84, 96, 100];\r

  \  return arr.filter(x => x >= from && x <= to);\r

  }"
_getSLCombis: "function _getSLCombis(n, onlyRegular = false, addColsRows_cr =
  false) {\r

  \  let sq = Math.ceil(Math.sqrt(n));\r

  \  let res = [];\r

  \  for (let i = 1; i <= sq; i++) {\r

  \    let s = i;\r

  \    let l = Math.ceil(n / s);\r

  \    if (s <= l && s * l >= n) res.push({ s: s, l: l });\r

  \  }\r

  \  if (onlyRegular) res = res.filter(x => x.s * x.l == n);\r

  \  if (addColsRows_cr) {\r

  \    let resX = [];\r

  \    for (const res1 of res) {\r

  \      resX.push({ rows: res1.s, cols: res1.l, s: res1.s, l: res1.l, sum:
  res1.s + res1.l });\r

  \      if (res1.s != res1.l) resX.push({ rows: res1.l, cols: res1.s, s:
  res1.s, l: res1.l, sum: res1.s + res1.l });\r

  \    }\r

  \    sortBy(resX, 'rows');\r

  \    sortBy(resX, 'sum');\r

  \    return resX;\r

  \  }\r

  \  return res;\r

  }"
_getSymbolKey: function _getSymbolKey(name) { return name.replace(new RegExp('
  ', 'g'), '_').toLowerCase(); }
_getTestPathForPlayerNum: "function _getTestPathForPlayerNum() { return GAME +
  (USE_MAX_PLAYER_NUM ? '_max' : ''); }"
_getTransformInfoDOM: "function _getTransformInfoDOM(d) {\r

  \  let t = d.style.transform;\r

  \  console.log(t)\r

  \  getTranslateX(d);\r

  }"
_gSizeToContent: "function _gSizeToContent(svg) {\r

  \  var bbox = svg.getBBox();\r

  \  svg.setAttribute(\"width\", bbox.x + bbox.width + bbox.x);\r

  \  svg.setAttribute(\"height\", bbox.y + bbox.height + bbox.y);\r

  }"
_handChanged: "function _handChanged(oids, area) {\r

  \  let idHand = area;\r

  \  let hand = UIS[idHand];\r

  \  if (nundef(hand)) return false;\r

  \  let cards = hand.cards;\r

  \  if (nundef(cards) && isEmpty(oids)) return false;\r

  \  if (isdef(hand) && isdef(hand.cards)) return !sameList(oids,
  hand.cards);\r

  \  else return true;\r

  }"
_handleEvent: function _handleEvent(ev) { ev.cancelBubble = true; return evToItem(ev); }
_handleTextTooSmall: "function _handleTextTooSmall(fz, fzPic, wn, hn, options)
  {\r

  \  console.log('???????fzText too small!!!', fz, 'fzPic', fzPic, 'N=',
  options.N, !options.isUniform);\r

  \  fz = Math.ceil(fz + 2);\r

  \  fzPic = Math.floor(Math.min(hn - fz * 1.5, fz * 3));\r

  \  options.fzPic = options.picStyles.fz = fzPic;\r

  \  options.fzText = options.labelStyles.fz = fz;\r

  }"
_hexGrid: "function _hexGrid(loc, idBoard, sBoard, soDict) {\r

  \  let board = createGrid(loc, idBoard, sBoard, soDict, 'hex');\r

  \  addVisuals(board);\r

  \  return board;\r

  }"
_hideBoat: function _hideBoat(id) { let mobj = UIS[id]; mobj.hide(); mobj.o.weg = true; }
_highlightAndMagnify: "function _highlightAndMagnify(ev, mobj, partName) {\r

  \  magnifyFront(mobj.id);\r

  \  highlightMsAndRelatives(ev, mobj, partName);\r

  }"
_highlightBoat: "function _highlightBoat(id) {\r

  \  if (id === null) return;\r

  \  if (boatHighlighted) {\r

  \    if (boatHighlighted.id == id) return;\r

  \    else _unhighlightBoat();\r

  \  }\r

  \  boatHighlighted = UIS[id];\r

  \  boatHighlighted.elem.scrollIntoView(false);\r

  \  highlightMsAndRelatives(null, boatHighlighted);\r

  \  _openInfoboxesForBoatOids(boatHighlighted);\r

  }"
_highlightNextBoat: "function _highlightNextBoat() {\r

  \  if (!boatHighlighted) _highlightBoat(getFirstBoatId());\r

  \  else {\r

  \    let idx = boatHighlighted.o.iTuple + 1;\r

  \    _highlightBoat(getBoatIdByIdx(boatHighlighted.o.iTuple + 1));\r

  \  }\r

  }"
_highlightPrevBoat: "function _highlightPrevBoat() {\r

  \  if (!boatHighlighted) _highlightBoat(getLastBoatId()); else
  _highlightBoat(getBoatIdByIdx(boatHighlighted.o.iTuple - 1));\r

  }"
_initAutoplayToActionButtons: "function _initAutoplayToActionButtons() {\r

  \  let d = document.getElementById('a_d_autoplay_buttons');\r

  \  let buttons = [...d.children];\r

  \  let defaultIds = ['c_b_NextPlayer', 'c_b_NextTurn', 'c_b_NextPhase'];\r

  \  let kws = lookup(S.settings, ['dev', 'run_to_buttons']);\r

  \  if (!kws) kws = {};\r

  \  let kwKeys = getKeys(kws);\r

  \  let requiredButtonIds = kwKeys.map(x => 'c_b_RTA_' +
  x).concat(defaultIds);\r

  \  let actualButtons = buttons.filter(x => x.id).map(x => x.id);\r

  \  for (const id of arrMinus(actualButtons, requiredButtonIds)) $('#' +
  id).remove();\r

  \  for (const id of arrMinus(requiredButtonIds, actualButtons)) {\r

  \    let b = document.createElement('button');\r

  \    let key = id.substring(8);\r

  \    b.innerHTML = kws[key];\r

  \    b.id = id;\r

  \    b.onclick = () => onClickRunToAction(key);\r

  \    d.appendChild(b);\r

  \  }\r

  }"
_initCheatButtons: "function _initCheatButtons() {\r

  \  let areaName = 'a_d_cheat_buttons';\r

  \  let kws = lookup(S.settings, ['dev', 'cheat_buttons']);\r

  \  if (!kws) { hide(areaName); return; }\r

  \  show(areaName);\r

  \  let d = document.getElementById(areaName);\r

  \  let buttons = [...d.children];\r

  \  let kwKeys = getKeys(kws);\r

  \  let requiredButtonIds = kwKeys.map(x => 'c_b_CHT_' + x);\r

  \  let actualButtons = buttons.filter(x => x.id).map(x => x.id);\r

  \  for (const id of arrMinus(actualButtons, requiredButtonIds)) $('#' +
  id).remove();\r

  \  for (const id of arrMinus(requiredButtonIds, actualButtons)) {\r

  \    let b = document.createElement('button');\r

  \    let key = id.substring(8);\r

  \    b.innerHTML = kws[key];\r

  \    b.id = id;\r

  \    b.onclick = () => onClickCheat(key);\r

  \    d.appendChild(b);\r

  \  }\r

  }"
_initGameGlobals: "function _initGameGlobals() {\r

  \  S.user = {};\r

  \  G = { table: {}, players: {} };\r

  \  UIS = {};\r

  \  IdOwner = {};\r

  \  id2oids = {};\r

  \  oid2ids = {};\r

  \  id2uids = {};\r

  }"
_initPlayers: "function _initPlayers() {\r

  \  S.players = {};\r

  \  G.players = {};\r

  \  let ckeys = Object.keys(playerColors);\r

  \  let i = 0;\r

  \  for (const id in G.serverData.players) {\r

  \    let pl = G.serverData.players[id];\r

  \    let colorName = isdef(pl.color) ? pl.color : ckeys[i];\r

  \    colorName = colorName.toLowerCase();\r

  \    let altName = capitalize(colorName);\r

  \    let color = isdef(playerColors[colorName]) ? playerColors[colorName] :
  colorName;\r

  \    let plInfo = firstCond(S.gameConfig.players, x => x.id == id);\r

  \    S.players[id] = { username: plInfo.username, playerType:
  plInfo.playerType, agentType: plInfo.agentType, id: id, color: color, altName:
  altName, index: plInfo.index };\r

  \    i += 1;\r

  \  }\r

  }"
_initScenarioButtons: "function _initScenarioButtons() {\r

  \  let areaName = 'a_d_scenario_buttons';\r

  \  let kws = lookup(S.settings, ['dev', 'scenario_buttons']);\r

  \  if (!kws) { hide(areaName); return; }\r

  \  show(areaName);\r

  \  let d = document.getElementById(areaName);\r

  \  let buttons = [...d.children];\r

  \  let kwKeys = getKeys(kws);\r

  \  let requiredButtonIds = kwKeys.map(x => 'c_b_SCE_' + x);\r

  \  let actualButtons = buttons.filter(x => x.id).map(x => x.id);\r

  \  for (const id of arrMinus(actualButtons, requiredButtonIds)) $('#' +
  id).remove();\r

  \  for (const id of arrMinus(requiredButtonIds, actualButtons)) {\r

  \    let b = document.createElement('button');\r

  \    let key = id.substring(8);\r

  \    let caption = kws[key];\r

  \    b.innerHTML = caption;\r

  \    b.id = id;\r

  \    b.onclick = () => onClickPushScenario(stringBefore(caption, ' '),
  stringAfter(caption, ' '));\r

  \    d.appendChild(b);\r

  \  }\r

  }"
_initServer: "function _initServer(callbacks = []) {\r

  \  S = { path: {}, user: {}, settings: {}, vars: {} };\r

  \  counters = { msg: 0, click: 0, mouseenter: 0, mouseleave: 0, events: 0
  };\r

  \  setDefaultSettings();\r

  \  if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));\r

  }"
_isInHand: "function _isInHand(oidCard, idHand) {\r

  \  let hand = UIS[idHand];\r

  \  let cards = hand.cards;\r

  \  return isdef(cards) && cards.includes(oidCard);\r

  }"
_isMergeableObject: "function _isMergeableObject(val) {\r

  \  var nonNullObject = val && typeof val === 'object'\r

  \  return nonNullObject\r

  \    && Object.prototype.toString.call(val) !== '[object RegExp]'\r

  \    && Object.prototype.toString.call(val) !== '[object Date]'\r

  }"
_loader: "async function _loader() {\r

  \  Daat = {};\r

  \  if (CLEAR_LOCAL_STORAGE) localStorage.clear();\r

  \  C52 = await localOrRoute('C52', '../assets/c52.yaml');\r

  \  symbolDict = Syms = await localOrRoute('syms',
  '../assets/allSyms.yaml');\r

  \  SymKeys = Object.keys(Syms);\r

  \  ByGroupSubgroup = await localOrRoute('gsg', '../assets/symGSG.yaml');\r

  \  WordP = await route_path_yaml_dict('../assets/math/allWP.yaml');\r

  \  DB = await route_path_yaml_dict('./DB.yaml');\r

  \  console.assert(isdef(DB));\r

  \  DA = {}; Items = {};\r

  \  Speech = new SpeechAPI('E');\r

  \  KeySets = getKeySets();\r

  \  TOMan = new TimeoutManager();\r

  \  _start();\r

  }"
_loader_dep: "async function _loader_dep() {\r

  \  Daat = {};\r

  \  if (CLEAR_LOCAL_STORAGE) localStorage.clear();\r

  \  C52 = await localOrRoute('C52', '../assets/c52.yaml');\r

  \  symbolDict = Syms = await localOrRoute('syms',
  '../assets/allSyms.yaml');\r

  \  SymKeys = Object.keys(Syms);\r

  \  ByGroupSubgroup = await localOrRoute('gsg', '../assets/symGSG.yaml');\r

  \  WordP = await route_path_yaml_dict('../assets/math/allWP.yaml');\r

  \  if (BROADCAST_SETTINGS) {\r

  \    await _dbInitX();\r

  \    _start0();\r

  \  } else { dbLoadX(_start0); }\r

  }"
_makeCardDivAristocracy: "function _makeCardDivAristocracy(oid, o) {\r

  \  let elem = document.createElement('div');\r

  \  let faceElem = document.createElement('div');\r

  \  let backElem = document.createElement('div');\r

  \  faceElem.classList.add('face');\r

  \  backElem.classList.add('back');\r

  \  let cardName = isdef(o.name) ? o.name : 'King';\r

  \  let rank = cards52GetRankFromName(cardName);\r

  \  let suit = 0;\r

  \  elem.faceElem = faceElem;\r

  \  elem.backElem = backElem;\r

  \  elem.isCard = true;\r

  \  elem.suit = suit;\r

  \  elem.rank = rank;\r

  \  setSide(elem, 'front');\r

  \  return elem;\r

  }"
_makeCardDivCatan: "function _makeCardDivCatan(oid, o) {\r

  \  let symbolKeyPropName = 'name';\r

  \  let key = _getSymbolKey(o[symbolKeyPropName]);\r

  \  let symbol = symbols[key];\r

  \  let color = symbolColors[key];\r

  \  let d = document.createElement('div');\r

  \  $(d).on(\"mouseenter\", function () { magnifyFront(this.id); });\r

  \  $(d).on(\"mouseleave\", function () { minifyBack(this.id); });\r

  \  d.innerHTML = 'hallo';\r

  \  d.style.position = 'absolute';\r

  \  let dx = 0;\r

  \  d.style.left = '' + dx + 'px';\r

  \  d.style.top = '0px';\r

  \  let ch = iconChars[symbol];\r

  \  let text = String.fromCharCode('0x' + ch);\r

  \  let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';\r

  \  d.innerHTML = `\r

  \    <div class=\"cardCatan\">\r

  \      <p style='font-size:22px;'>${o.name}</p>\r

  \      <div class=\"cardCenter\">\r

  \        <div class=\"circular\" style='background:${color}'><span
  style='color:white;font-size:70px;font-weight:900;font-family:${family}'>${te\
  xt}</span></div>\r

  \      </div>\r

  \      <hr>\r

  \      <p style='font-size:20px;'>${o.desc}</p>\r

  \      <div
  style='color:${color};position:absolute;left:8px;top:8px;width:35px;height:35\
  px'>\r

  \        <span style='font-family:${family}'>${text}</span>\r

  \      </div>\r

  \    </div>\r

  \  `;\r

  \  return d;\r

  }"
_makeCardDivDefault: "function _makeCardDivDefault(oid, o) {\r

  \  let symbolKeyPropName = 'name';\r

  \  let key = _getSymbolKey(o[symbolKeyPropName]);\r

  \  let symbol = symbols[key];\r

  \  let color = symbolColors[key];\r

  \  let d = document.createElement('div');\r

  \  $(d).on(\"mouseenter\", function () { magnifyFront(this.id); });\r

  \  $(d).on(\"mouseleave\", function () { minifyBack(this.id); });\r

  \  d.innerHTML = 'hallo';\r

  \  d.style.position = 'absolute';\r

  \  let dx = 0;\r

  \  d.style.left = '' + dx + 'px';\r

  \  d.style.top = '0px';\r

  \  let ch = iconChars[symbol];\r

  \  let text = String.fromCharCode('0x' + ch);\r

  \  let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';\r

  \  d.innerHTML = `\r

  \    <div class=\"cardCatan\">\r

  \      <p style='font-size:22px;'>${o.name}</p>\r

  \      <div class=\"cardCenter\">\r

  \        <div class=\"circular\" style='background:${color}'><span
  style='color:white;font-size:70px;font-weight:900;font-family:${family}'>${te\
  xt}</span></div>\r

  \      </div>\r

  \      <hr>\r

  \      <p style='font-size:20px;'>${o.desc}</p>\r

  \      <div
  style='color:${color};position:absolute;left:8px;top:8px;width:35px;height:35\
  px'>\r

  \        <span style='font-family:${family}'>${text}</span>\r

  \      </div>\r

  \    </div>\r

  \  `;\r

  \  return d;\r

  }"
_makeDefault: "function _makeDefault(id, oid, o, areaName, title) {\r

  \  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
  return; }\r

  \  let mobj = new MOBJ();\r

  \  mobj.id = id;\r

  \  let domel = document.createElement('div');\r

  \  domel.style.cursor = 'default';\r

  \  mobj.elem = domel;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(domel);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  let idParent = areaName;\r

  \  mobj.idParent = idParent;\r

  \  let parent = UIS[idParent];\r

  \  parent.children.push(id);\r

  \  let sTitle = title;\r

  \  mobj.title(sTitle);\r

  \  mobj.o = o;\r

  \  mobj.isa[o.obj_type] = true;\r

  \  linkObjects(id, oid);\r

  \  listKey(IdOwner, id[2], id);\r

  \  UIS[id] = mobj;\r

  \  mobj.attach();\r

  \  return mobj;\r

  }"
_makeGameplayerArea: "function _makeGameplayerArea(plAreaName, areaName) {\r

  \  let deckArea = getMainArea(defaultDeckAreaName);\r

  \  let parentArea = UIS[areaName];\r

  \  if (isdef(deckArea)) {\r

  \    let x = deckArea.w;\r

  \    let h = parentArea.h / 2;\r

  \    let y = h;\r

  \    let w = parentArea.w - deckArea.w;\r

  \    let mobj = makeArea(plAreaName, areaName);\r

  \    mobj.setBg('seagreen');\r

  \    mobj.setBounds(x, y, w, h, 'px');\r

  \    mobj.nextCoords = { x: 0, y: 0 };\r

  \    mobj.elem.classList.add('flexWrap');\r

  \    return mobj;\r

  \  }\r

  }"
_makeGridGrid: "function _makeGridGrid(items, options, dGrid, showBorder =
  false) {\r

  \  let wcol = options.isUniform ? '1fr' : 'auto';\r

  \  let display = options.fillArea ? 'grid' : 'inline-grid';\r

  \  mStyleX(dGrid, {\r

  \    display: display,\r

  \    'grid-template-columns': `repeat(${options.cols}, ${wcol})`,\r

  \    gap: options.gap,\r

  \    box: true\r

  \  });\r

  \  if (showBorder) mStyleX(dGrid, { border: '5px solid yellow' });\r

  }"
_makeGroundShape: "function _makeGroundShape(mobj, x, y, w, h, color, shape, {
  dx = 0, dy = 0, x1, y1, x2, y2, overlay, scale, scaleX, scaleY, rot, color2,
  setFg, border, thickness, alpha, idx, rounding } = {}) {\r

  \  let r = _addShape(mobj, w, h, color, shape, { dx: dx, dy: dy, x1: x1, y1:
  y1, x2: x2, y2: y2, border: border, thickness: thickness, alpha: alpha, idx:
  idx, rounding: rounding })\r

  \  mobj.orig.shape = shape;\r

  \  let ov = overlay ? mobj['_' + shape]() : null;\r

  \  if (ov) ov.setAttribute('class', 'overlay');\r

  \  let t = getTypeOf(r);\r

  \  if (ov) {\r

  \    if (t == 'rect' || t == 'image') { _setRectDims(ov, w, h, dx, dy); }\r

  \    else if (t == 'ellipse') { _setEllipseDims(ov, w, h, dx, dy); }\r

  \    else if (t == 'polygon') { let pts = r.getAttribute('points');
  ov.setAttribute('points', pts); }\r

  \    else if (t == 'line') { _setLineDims(r, x1, y1, x2, y2) }\r

  \    if (rounding) {\r

  \      ov.setAttribute('rx', rounding);\r

  \      ov.setAttribute('ry', rounding);\r

  \    }\r

  \    mobj.elem.appendChild(ov);\r

  \    mobj.overlay = ov;\r

  \  }\r

  \  mobj.bg = mobj.orig.bg = color;\r

  \  if (setFg || color2) mobj.fg = mobj.orig.fg = color2 ? color2 :
  colorIdealText(color);\r

  \  mobj.orig.w = mobj.w = w;\r

  \  mobj.orig.h = mobj.h = h;\r

  \  mobj.orig.x = mobj.x = x;\r

  \  mobj.orig.y = mobj.y = y;\r

  \  if (isdef(scale)) { scaleX = scaleY = scale; }\r

  \  mobj.orig.scaleX = mobj.scaleX = scaleX ? scaleX : 1;\r

  \  mobj.orig.scaleY = mobj.scaleY = scaleY ? scaleY : 1;\r

  \  mobj.orig.scale = mobj.scale = scale ? scale : 1;\r

  \  mobj.orig.rot = mobj.rot = rot ? rot : 0;\r

  \  if (isdef(scaleX) || isdef(scaleX) || isdef(rot))
  mobj._setTransform(mobj.elem, { x: x, y: y, scaleX: scaleX, scaleY: scaleY,
  rotDeg: rot });\r

  \  else mobj.setPos(x, y);\r

  \  mobj.ground = r;\r

  \  return mobj;\r

  }"
_makeHandArea: "function _makeHandArea(key, handAreaName, parentAreaId) {\r

  \  let parentArea = UIS[parentAreaId];\r

  \  if (isdef(parentArea)) {\r

  \    let mobj = makeArea(handAreaName, parentAreaId);\r

  \    mobj.setBg(randomColor());\r

  \    mobj.title(stringAfter(key, '.'));\r

  \    let bTitle = getBounds(mobj.parts.title);\r

  \    mobj.parts['title'].fontSize = '12px';\r

  \    mobj.elem.style.minWidth = bTitle.width + 'px'; //'90px';\r

  \    mobj.elem.style.minHeight = '160px';\r

  \    mobj.body('hand');\r

  \    let div = mobj.parts['hand'];\r

  \    div.style.position = 'relative';\r

  \    div.style.left = '10px';\r

  \    div.style.top = '10px';\r

  \    div.style.width = 'auto';\r

  \    div.style.height = 'auto';\r

  \    return mobj;\r

  \  }\r

  }"
_makeNoneGrid: "function _makeNoneGrid(items, options, dGrid) {\r

  \  options.szPic = { w: options.area.w / options.cols, h: options.area.h /
  options.rows };\r

  \  _setRowsColsSize(options);\r

  \  for (const item of items) {\r

  \    let live = item.live;\r

  \    if (options.isUniform) {\r

  \      mStyleX(live.div, { w: options.szPic.w, h: options.szPic.h, margin:
  options.gap / 2, padding: options.padding / 2 });\r

  \    } else {\r

  \      mStyleX(live.div, { margin: options.gap / 2, padding: options.padding
  });\r

  \    }\r

  \    mStyleX(live.dLabel, { fz: options.fzText });\r

  \    mStyleX(live.dPic, { fz: options.fzPic });\r

  \  }\r

  \  mStyleX(dGrid, { padding: 0, border: '5px solid blue', box: true })\r

  \  let ov = getVerticalOverflow(dGrid);\r

  \  if (Math.floor(ov) == 0 && !options.isUniform) {\r

  \    _tryGrow(items, options);\r

  \  }\r

  \  if (ov > 0) {\r

  \    options.fzPic = options.picStyles.fz = options.fzPic * .9;\r

  \    for (const it of items) { mStyleX(lGet(it).dPic, { fz: options.fzPic
  }); }\r

  \    ov = getVerticalOverflow(dGrid);\r

  \    let newGap = Math.ceil(options.gap / 2);\r

  \    while (ov > 0) {\r

  \      for (const it of items) { mStyleX(lDiv(it), { fz: 4, margin: newGap,
  padding: newGap / 2, rounding: 0 }); }\r

  \      ov = getVerticalOverflow(dGrid);\r

  \      if (ov && newGap == 1) {\r

  \        for (const it of items) { mStyleX(lDiv(it), { margin: 0, padding: 0
  }); }\r

  \        break;\r

  \      }\r

  \      newGap = Math.ceil(newGap / 2);\r

  \    }\r

  \  }\r

  }"
_makeTabletopCardsArea: "function _makeTabletopCardsArea(areaName) {\r

  \  let deckArea = getMainArea(defaultDeckAreaName);\r

  \  let parentArea = UIS[areaName];\r

  \  if (isdef(deckArea)) {\r

  \    let x = deckArea.w;\r

  \    let h = parentArea.h / 2;\r

  \    let y = 0;\r

  \    let w = parentArea.w - deckArea.w;\r

  \    let id = 'tabletopCardsArea';\r

  \    let mobj = makeArea(id, areaName);\r

  \    mobj.setBg('seagreen');\r

  \    mobj.setBounds(x, y, w, h, 'px');\r

  \    mobj.nextCoords = { x: 0, y: 0 };\r

  \    mobj.elem.classList.add('flexWrap');\r

  \    return mobj;\r

  \  }\r

  }"
_mergeObject: "function _mergeObject(target, source, optionsArgument) {\r

  \  var destination = {}\r

  \  if (_isMergeableObject(target)) {\r

  \    Object.keys(target).forEach(function (key) {\r

  \      destination[key] = _cloneIfNecessary(target[key], optionsArgument)\r

  \    })\r

  \  }\r

  \  Object.keys(source).forEach(function (key) {\r

  \    if (!_isMergeableObject(source[key]) || !target[key]) {\r

  \      destination[key] = _cloneIfNecessary(source[key], optionsArgument)\r

  \    } else {\r

  \      destination[key] = _deepMerge(target[key], source[key],
  optionsArgument)\r

  \    }\r

  \  })\r

  \  return destination;\r

  }"
_mergeOptions: "function _mergeOptions() {\r

  \  if (isdef(S.user.spec) && isdef(S.user.spec.SETTINGS)) {\r

  \    for (const k in S.user.spec.SETTINGS) {\r

  \      if (isdef(S.settings[k])) {\r

  \        S.settings[k] = deepmerge(S.settings[k], S.user.spec.SETTINGS[k], {
  arrayMerge: overwriteMerge });\r

  \      } else {\r

  \        S.settings[k] = S.user.spec.SETTINGS[k];\r

  \      }\r

  \    }\r

  \  }\r

  }"
_mPlayPause: "function _mPlayPause(dParent, styles = {}, handler = null) {\r

  \  if (!handler) handler = audio_onclick_pp;\r

  \  let html = `\r

  \    <section id=\"dButtons\">\r

  \      <a id=\"bPlay\" href=\"#\" }\">\r

  \        <i class=\"fa fa-play fa-2x\"></i>\r

  \      </a>\r

  \      <a id=\"bPause\" href=\"#\" style=\"display: none\">\r

  \        <i class=\"fa fa-pause fa-2x\"></i>\r

  \      </a>\r

  \    </section>\r

  \  `;\r

  \  let pp = mCreateFrom(html);\r

  \  mAppend(dParent, pp);\r

  \  mStyle(pp, styles);\r

  \  mBy('bPlay').onclick = () => { hide0('bPlay'); show0('bPause');
  handler(); }\r

  \  mBy('bPause').onclick = () => { hide0('bPause'); show0('bPlay');
  handler(); }\r

  \  return { button: pp, show_play: () => { hide0('bPause'); show0('bPlay');
  }, show_pause: () => { hide0('bPlay'); show0('bPause'); } };\r

  }"
_mStamp: "function _mStamp(d1, text, color, sz) {\r

  \  mStyle(d1, { position: 'relative' });\r

  \  let r = getRect(d1);\r

  \  let [w, h] = [r.w, r.h];\r

  \  color = ['green', 'red', 'blue'].includes(color) ? color : 'black';\r

  \  sz = valf(sz, r.h / 7);\r

  \  console.log('r', r, 'sz', sz);\r

  \  let [padding, border, rounding, angle] = [sz / 10, sz / 6, sz / 8,
  rNumber(-25, 25)];\r

  \  let d2 = mDiv(d1, {\r

  \    fg: color,\r

  \    position: 'absolute', top: 25, left: 5,\r

  \    transform: `rotate(${angle}deg)`,\r

  \    fz: sz,\r

  \    hpadding: 2,\r

  \    vpadding: 0,\r

  \    rounding: rounding,\r

  \    weight: 400,\r

  \    display: 'inline-block',\r

  \    'text-transform': 'uppercase',\r

  \    family: 'fredericka',\r

  \    'mix-blend-mode': 'multiply',\r

  \  }, null, text);\r

  \  mClass(d2, `${color}stamp`);\r

  }"
_mtest: "function _mtest() {\r

  \  MSInit();\r

  }"
_onPlayerChange: "function _onPlayerChange(pid) {\r

  \  if (isPlain()) return;\r

  \  if (!G.playerChanged || pid != G.player) return;\r

  \  let o = G.playersAugmented[pid];\r

  \  _updatePageHeader(pid);\r

  \  if (G.previousPlayer) _updateLogArea(G.previousPlayer, pid);\r

  \  let mobj = getVisual(pid);\r

  \  if (mobj) {\r

  \  }\r

  \  let msDef = getDefVisual(pid);\r

  \  if (msDef) {\r

  \    let msParentId = msDef.parentId;\r

  \    let msParent = UIS[msParentId];\r

  \    var target = msDef.elem;\r

  \    target.parentNode.scrollTop = target.offsetTop;\r

  \  }\r

  }"
_openInfoboxesForBoatOids: "function _openInfoboxesForBoatOids(boat) {\r

  \  let oids = boat.o.oids;\r

  \  let mainIds = oids.map(x => getMainId(x));\r

  \  for (const id of mainIds) {\r

  \    let mobj = UIS[id];\r

  \    openInfobox(null, mobj);\r

  \  }\r

  }"
_paramsQ: "function _paramsQ(parr) {\r

  \  parr = isdef(parr) ? parr : [];\r

  \  for (let i = 0; i < parr.length; i++) {\r

  \    let para = parr[i];\r

  \    if (para == '_last') parr[i] = arrLast(AkQ);\r

  \    else if (para == '_all' || para == '_list') parr[i] = AkQ;\r

  \    else if (para == '_first') parr[i] = AkQ[0];\r

  \  }\r

  \  return parr;\r

  }"
_pickStringForAction: "function _pickStringForAction(x) {\r

  \  if (x.type == 'fixed') return x.val;\r

  \  if (x.type == 'obj') return x.ID;\r

  \  if (x.type == 'player') return x.val;\r

  }"
_playersCreateNew: "function _playersCreateNew() {\r

  \  for (const pid of G.playersCreated) {\r

  \    if (!defaultVisualExists(pid) && S.settings.player.createDefault)\r

  \      makeDefaultPlayer(pid, G.playersAugmented[pid],
  S.settings.player.defaultArea);\r

  \    if (mainVisualExists(pid)) continue;\r

  \    let updatedVisuals;\r

  \    if (S.settings.userBehaviors) {\r

  \      updatedVisuals = runBehaviors(pid, G.playersAugmented,
  PLAYER_CREATE);\r

  \    }\r

  \    if (nundef(updatedVisuals) || !updatedVisuals.includes(pid)) {\r

  \      if (isPlain()) {\r

  \        let mobj = makeMainPlayer(pid, G.playersAugmented[pid],
  S.settings.player.defaultMainArea);\r

  \        if (mobj === null && !defaultVisualExists(pid) &&
  S.settings.table.createDefault != false) {\r

  \          makeDefaultObject(pid, G.playersAugmented[pid],
  S.settings.table.defaultArea);\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  }"
_playersUpdate: "function _playersUpdate() {\r

  \  for (const pid in G.playersUpdated) {\r

  \    let pl = G.playersAugmented[pid];\r

  \    let updatedVisuals = {};\r

  \    if (S.settings.userBehaviors) {\r

  \      updatedVisuals = runBehaviors(pid, G.playersAugmented,
  PLAYER_UPDATE);\r

  \      runBindings(pid, G.playersAugmented)\r

  \    }\r

  \    let mobj = getVisual(pid);\r

  \    if (!updatedVisuals[pid] && isdef(mobj)) {\r

  \      presentMainPlayer(pid, mobj, G.playersAugmented, false);\r

  \    }\r

  \    if (!isPlain() && !updatedVisuals[pid] && S.settings.hasCards) {\r

  \      if (G.player == pid) {\r

  \        if (G.playerChanged) {\r

  \          switchPlayerArea();\r

  \        }\r

  \        updateGameplayerCardCollections(pid, pl);\r

  \      }\r

  \    }\r

  \    if (!S.settings.player.createDefault || mobj &&
  S.settings.player.createDefault != true) continue;\r

  \    let plms = presentDefault(pid, pl, false);\r

  \    _onPlayerChange(pid);\r

  \  }\r

  }"
_poll: "function _poll() {\r

  \  if (nundef(U) || nundef(Z) || nundef(Z.friendly)) { console.log('poll
  without U or Z!!!', U, Z); return; }\r

  \  show_polling_signal();\r

  \  if (nundef(DA.pollCounter)) DA.pollCounter = 0; DA.pollCounter++;
  console.log('polling');\r

  \  if (Z.game == 'feedback' && i_am_host()) {\r

  \    send_or_sim({ friendly: Z.friendly, uname: Z.uplayer, fen: Z.fen,
  write_fen: true, auto: true }, 'table');\r

  \  } else send_or_sim({ friendly: Z.friendly, uname: Z.uplayer, auto: true
  }, 'table');\r

  }"
_preloader: "async function _preloader() {\r

  \  timit = new TimeIt('timit', EXPERIMENTAL);\r

  \  if (FASTSTART) {\r

  \    let syms = localStorage.getItem('syms');\r

  \    if (isdef(syms)) {\r

  \      console.log('from local');\r

  \      Syms = JSON.parse(syms);\r

  \    } else {\r

  \      Syms = await route_path_yaml_dict('../assets/syms.yaml');\r

  \      localStorage.setItem('syms', JSON.stringify(Syms));\r

  \    }\r

  \    SymKeys = Object.keys(Syms);\r

  \    dTable = mBy('table');\r

  \    mText('hallo', dTable, { fz: 100 });\r

  \    timit.show('DONE')\r

  \  } else _loader();\r

  }"
_prepText1_dep: "function _prepText1_dep(items, ifs, options) {\r

  \  //#region phase2: prepare items for container\r

  \  options.showLabels = true;\r

  \  let sz = options.sz;\r

  \  let padding = (isdef(ifs.padding) ? ifs.padding : 1);\r

  \  let bo = ifs.border;\r

  \  bo = isdef(bo) ? isString(bo) ? firstNumber(bo) : bo : 0;\r

  \  let szNet = sz - 2 * padding - 2 * bo;\r

  \  let textStyles, hText;\r

  \  if (options.showLabels) {\r

  \    let longestLabel = findLongestLabel(items);\r

  \    let oneWord = longestLabel.label.replace(' ', '_');\r

  \    textStyles = idealFontsize(oneWord, szNet, szNet, 22, 8);\r

  \    hText = textStyles.h;\r

  \    delete textStyles.h;\r

  \    delete textStyles.w;\r

  \  }\r

  \  let outerStyles = { rounding: 10, margin: sz / 12, display:
  'inline-block', w: sz, padding: padding, bg: 'white', align: 'center',
  'box-sizing': 'border-box' };\r

  \  outerStyles = deepmergeOverride(outerStyles, ifs);\r

  \  let pic, text;\r

  \  for (let i = 0; i < items.length; i++) {\r

  \    let item = items[i];\r

  \    let k = item.key;\r

  \    let d = mDiv();\r

  \    if (isdef(item.textShadowColor)) {\r

  \      let sShade = '0 0 0 ' + item.textShadowColor;\r

  \      textStyles['text-shadow'] = sShade;\r

  \      textStyles.fg = colorFrom('black', item.contrast); //'#00000080'
  '#00000030' \r

  \    }\r

  \    if (options.showLabels) {\r

  \      textStyles.fg = item.fg;\r

  \      text = zText1Line(item.label, null, textStyles, hText);\r

  \      mAppend(d, text.div);\r

  \    }\r

  \    outerStyles.bg = item.bg;\r

  \    outerStyles.fg = item.fg;\r

  \    mStyleX(d, outerStyles);\r

  \    d.id = getUID();\r

  \    d.onclick = options.onclick;\r

  \    item.id = d.id;\r

  \    item.row = Math.floor(item.index / options.cols);\r

  \    item.col = item.index % options.cols;\r

  \    item.div = d;\r

  \    item.pic = null;\r

  \    item.isSelected = false;\r

  \    item.isLabelVisible = options.showLabels;\r

  \    item.dims = parseDims(sz, sz, d.style.padding);\r

  \    if (options.showRepeat) addRepeatInfo(d, item.iRepeat, sz);\r

  \    item.fzPic = 0;\r

  \  }\r

  \  //#endregion\r

  }"
_preselectFirstVisualsForBoats: "function _preselectFirstVisualsForBoats() {\r

  \  let oidlist = [];\r

  \  for (const id of getBoatIds()) {\r

  \    let oids = id2oids[id];\r

  \    if (isdef(oids)) oids.map(x => addIf(oidlist, x))\r

  \  }\r

  \  let vislist = oidlist.map(x => getMainId(x)).filter(x => x !== null);\r

  \  vislist = vislist.concat(oidlist.map(x => getDefId(x)));\r

  \  vislist.map(id => UIS[id].highFrame());\r

  }"
_presentLocationChange: "function _presentLocationChange(oid, mobj) {\r

  \  if (G.table[oid].obj_type == 'robber') {\r

  \    let o = G.table[oid];\r

  \    let changedProps = G.tableUpdated[oid];\r

  \    if (changedProps.summary.includes('loc')) {\r

  \      let oidLoc = o.loc._obj;\r

  \      let visLoc = getVisual(oidLoc);\r

  \      mobj.setPos(visLoc.x, visLoc.y);\r

  \    }\r

  \  }\r

  }"
_quadGrid: "function _quadGrid(loc, idBoard, sBoard, soDict) {\r

  \  let board = createGrid(loc, idBoard, sBoard, soDict, 'quad');\r

  \  addVisuals(board);\r

  \  return board;\r

  }"
_rChoose: "function _rChoose(arr, n = 1, func = null, exceptIndices = null) {\r

  \  let arr1 = jsCopy(arr);\r

  \  if (isdef(exceptIndices)) {\r

  \    for (const i of exceptIndices) removeInPlace(arr1, arr[i]);\r

  \  }\r

  \  if (isdef(func)) arr1 = arr1.filter(func);\r

  \  if (n == 1) {\r

  \    let idx = Math.floor(Math.random() * arr1.length);\r

  \    return arr1[idx];\r

  \  }\r

  \  arrShufflip(arr1);\r

  \  return arr1.slice(0, n);\r

  }"
_recFindCollections: "function _recFindCollections(key, o, sets) {\r

  \  let tt = _getCollectionType(o);\r

  \  if (tt) {\r

  \    sets.push({ name: key, key: key, type: tt.type, generic_type:
  tt.generic_type, hand: o, arr: getSimpleSetElements(o) });\r

  \  } else if (isDict(o)) {\r

  \    for (const k in o) {\r

  \      let newSets = [];\r

  \      _recFindCollections(key + '.' + k, o[k], newSets);\r

  \      for (const s of newSets) {\r

  \        sets.push(s);\r

  \      }\r

  \    }\r

  \  } else if (isList(o)) {\r

  \    let i = 0;\r

  \    for (const cand of o) {\r

  \      let k = key + '_' + i;\r

  \      i += 1;\r

  \      let newSets = [];\r

  \      _recFindCollections(k, cand, newSets);\r

  \      for (const s of newSets) {\r

  \        sets.push(s);\r

  \      }\r

  \    }\r

  \  }\r

  }"
_reduceFontsBy: "function _reduceFontsBy(tx, px, items, options) {\r

  \  fz = options.fzText - tx;\r

  \  fzPic = options.fzPic - px;\r

  \  options.fzPic = options.picStyles.fz = fzPic;\r

  \  options.fzText = options.labelStyles.fz = fz;\r

  \  for (const item of items) {\r

  \    let ui = item.live;\r

  \    if (tx != 0) mStyleX(ui.dLabel, { fz: fz });\r

  \    if (px != 0) mStyleX(ui.dPic, { fz: fzPic });\r

  \  }\r

  }"
_reduceSizeBy: "function _reduceSizeBy(tx, px, items, options) {\r

  \  w = options.szPic.w - tx;\r

  \  h = options.szPic.h - tx;\r

  \  fz = options.fzText - tx;\r

  \  fzPic = options.fzPic - px;\r

  \  options.fzPic = options.picStyles.fz = fzPic;\r

  \  options.fzText = options.labelStyles.fz = fz;\r

  \  options.szPic = { w: w, h: h };\r

  \  for (const item of items) {\r

  \    let ui = item.live;\r

  \    if (tx != 0) {\r

  \      mStyleX(ui.dLabel, { fz: fz }); mStyleX(ui.div, { w: w, h: h });\r

  \    }\r

  \    if (px != 0) mStyleX(ui.dPic, { fz: fzPic });\r

  \  }\r

  \  console.log('fonts set to', fz, fzPic);\r

  }"
_register: "function _register(o, keyword, func) {\r

  \  if (nundef(S.registry[keyword])) S.registry[keyword] = {};\r

  \  S.registry[keyword][o.id] = func;\r

  }"
_removeAllHighlighting: function _removeAllHighlighting(id) { let mobj = UIS[id]; mobj.unhighAll(); }
_removeClickHandler: function _removeClickHandler(id) { let mobj = UIS[id];
  mobj.removeClickHandler(); }
_removeFilterHighlight: function _removeFilterHighlight(mobj) { mobj.unhighC(); }
_removeHoverHandlers: function _removeHoverHandlers(id) { let mobj = UIS[id];
  mobj.removeHoverHandlers(); }
_removeInteraction: function _removeInteraction(id) { let mobj = UIS[id];
  mobj.removeHandlers(); mobj.unhighAll(); }
_repositionCards: "function _repositionCards(msHand) {\r

  \  if (msHand.numCards == 0) return;\r

  \  let dTitle = msHand.parts.title;\r

  \  let dBody = msHand.parts.hand;\r

  \  let dHand = msHand.elem;\r

  \  let bTitle = getBounds(dTitle);\r

  \  let bBody = getBounds(dBody, true);\r

  \  let bHand = getBounds(dHand);\r

  \  let yBody = bTitle.height;\r

  \  let hHand = msHand.hHand;\r

  \  let hAvailable = hHand - yBody;\r

  \  let wHand = bHand.width;\r

  \  let W = wHand;\r

  \  let H = hHand;\r

  \  let w = msHand.wCard;\r

  \  let h = msHand.hCard;\r

  \  let n = msHand.numCards;\r

  \  let x, y, dx, padding;\r

  \  let offset = { x: 0, y: 0 };\r

  \  if (msHand.adjustSize) {\r

  \    W = w + (n) * w / 4;\r

  \    H = h;\r

  \    padding = 0;\r

  \    msHand.setSize(W + 2 * padding + yBody, H);\r

  \    x = padding + offset.x;\r

  \    y = padding + offset.y;\r

  \  } else {\r

  \    padding = x = y = 0;\r

  \  }\r

  \  dx = n > 1 ? (W - w) / (n - 1) : 0;\r

  \  if (dx > w) dx = w;\r

  \  let i = 0;\r

  \  for (const oidCard of msHand.cards) {\r

  \    let id = getMainId(oidCard);\r

  \    let c = UIS[id];\r

  \    c.zIndex = c.elem.style.zIndex = i;\r

  \    i += 1;\r

  \    c.setPos(x, y);\r

  \    x += dx;\r

  \  }\r

  }"
_runQ: "function _runQ() {\r

  \  QCounter += 1; console.log('===>run', QCounter, Q);\r

  \  if (isEmpty(Q)) { console.log('Q empty!', AkQ); return; }\r

  \  let task = Q.shift();\r

  \  let f = task.f;\r

  \  let parr = _paramsQ(task.parr);\r

  \  console.log('task:', f.name, 'params', parr)\r

  \  let result = f(...parr);\r

  \  if (isdef(result)) AkQ.push(result);\r

  \  if (!isEmpty(Q)) runQ();\r

  }"
_runRegistry: "function _runRegistry(keyword) {\r

  \  if (nundef(S.registry[keyword])) return;\r

  \  for (const id in S.registry[keyword]) {\r

  \    S.registry[keyword][id](getVisual(id));\r

  \  }\r

  }"
_saveAll: "function _saveAll() {\r

  \  saveUser();\r

  \  dbSave('boardGames');\r

  }"
_selectText: "function _selectText(el) {\r

  \  var sel, range;\r

  \  if (window.getSelection && document.createRange) {\r

  \    sel = window.getSelection();\r

  \    if (sel.toString() == '') {\r

  \      window.setTimeout(function () {\r

  \        range = document.createRange();\r

  \        range.selectNodeContents(el);\r

  \        sel.removeAllRanges();\r

  \        sel.addRange(range);\r

  \      }, 1);\r

  \    }\r

  \  } else if (document.selection) {\r

  \    sel = document.selection.createRange();\r

  \    if (sel.text == '') {\r

  \      range = document.body.createTextRange();\r

  \      range.moveToElementText(el);\r

  \      range.select();\r

  \    }\r

  \  }\r

  }"
_sendCardToBack: function _sendCardToBack(id) { let c = UIS[id]; let elem =
  document.getElementById(id); elem.style.zIndex = c.zIndex; }
_setEllipseDims: "function _setEllipseDims(r, w, h, dx, dy) {\r

  \  r.setAttribute('rx', w / 2);\r

  \  r.setAttribute('ry', h / 2);\r

  \  r.setAttribute('cx', dx);\r

  \  r.setAttribute('cy', dy);\r

  }"
_setIsa: "function _setIsa(ms, o) {\r

  \  listKey(ms, 'isa', o.obj_type);\r

  \  for (const d in isa) {\r

  \    if (d == 'id') { continue; }\r

  \    ms[d] = isa[d];\r

  \  }\r

  }"
_setLineDims: "function _setLineDims(r, x1, y1, x2, y2) {\r

  \  r.setAttribute('x1', x1);\r

  \  r.setAttribute('y1', y1);\r

  \  r.setAttribute('x2', x2);\r

  \  r.setAttribute('y2', y2);\r

  }"
_setRectDims: "function _setRectDims(r, w, h, dx, dy) {\r

  \  r.setAttribute('width', w);\r

  \  r.setAttribute('height', h);\r

  \  r.setAttribute('x', -w / 2 + dx);\r

  \  r.setAttribute('y', -h / 2 + dy);\r

  }"
_setRowsColsSize: "function _setRowsColsSize(options) {\r

  \  let [rows, cols, wb, hb] = [options.rows, options.cols, options.szPic.w,
  options.szPic.h];\r

  \  options.or = rows < cols ? 'L' : 'P'\r

  \  let gap = options.gap = _calcPadGap(options.gap, wb, hb);\r

  \  let [wOffset, hOffset] = [gap / cols, gap / rows];\r

  \  let offset = Math.max(wOffset, hOffset, gap * .25);\r

  \  let w = wb - gap - offset, h = hb - gap - offset;\r

  \  options.szPic.w = w;\r

  \  options.szPic.h = h;\r

  \  options.padding = _calcPadGap(options.padding, w, h);\r

  \  options.outerStyles.padding = options.padding;\r

  \  let wn = w - options.padding * 2;\r

  \  let hn = h - options.padding * 2;\r

  \  let fz = options.showLabels == true ? (wn / options.longestLabelLen) *
  (options.luc != 'u' ? 1.9 : 1.7) : 0;\r

  \  let fzPic = Math.min(wn / 1.3, (hn - fz * 1.2) / 1.3);\r

  \  if (fzPic < fz * 2) { fz = Math.floor(hn / 4); fzPic = fz * 2; }\r

  \  let fzTest = Math.min(hn / 3, idealFontDims(options.longestLabel, wn, hn
  - fzPic, fz, 4).fz);\r

  \  options.fzPic = options.picStyles.fz = Math.floor(fzPic)\r

  \  options.fzText = options.labelStyles.fz = options.isUniform ?
  Math.min(Math.floor(fz), Math.floor(fzTest)) : Math.floor(fz);\r

  \  if (!options.isUniform && fz < 6 && fz * 4 < fzPic) {
  _handleTextTooSmall(fz, fzPic, wn, hn, options); }\r

  }"
_setTextFont: "function _setTextFont(items, options, fz) {\r

  \  options.fzText = options.labelStyles.fz = fz;\r

  \  console.log('items', items)\r

  \  items.map(x => { let dl = x.live.dLabel; if (isdef(dl)) dl.style.fontSize
  = fz + 'px'; });\r

  }"
_setToList: function _setToList(oval) { if (typeof oval == 'object' && '_set' in
  oval) return oval._set; else return oval; }
_show_history_popup: "function _show_history_popup() {\r

  \  if (isdef(mBy('dHistoryPopup')) || isEmpty(Z.fen.history)) return;\r

  \  let dpop = mPopup('', dTable, { fz: 16, bg: colorLight('#EDC690', .5),
  rounding: 8, fg: 'dimgray', top: 0, right: 0, border: 'white' },
  'dHistoryPopup');\r

  \  mAppend(dpop, UI.dHistory);\r

  \  mInsert(dpop, mCreateFrom(`<div
  style=\"margin-left:10px;text-align:left;width:100%;font-family:Algerian;font\
  -size:22px;\">${Config.games[Z.game].friendly}</div>`));\r

  \  let bclose = mButtonX(dpop, hide_history_popup, 'tr', 25, 'dimgray');\r

  }"
_showBoat: function _showBoat(id) { let mobj = UIS[id]; mobj.show(); mobj.o.weg = false; }
_showHand: "function _showHand(oids, idArea) {\r

  \  let idHand = idArea;\r

  \  let hand = UIS[idArea];\r

  \  let areaName = getAreaName(idArea);\r

  \  for (const oid of oids) {\r

  \    let mobj = getVisual(oid);\r

  \    if (nundef(mobj)) {\r

  \      mobj = makeCard(oid, G.table[oid], idHand);\r

  \    }\r

  \    if (!_isInHand(oid, idHand)) {\r

  \      addCardToHand(oid, idArea);\r

  \    }\r

  \  }\r

  }"
_showPassToNextPlayer: "function _showPassToNextPlayer(plWaitingFor) {\r

  \  unfreezeUI();\r

  \  let d = document.getElementById('passToNextPlayerUI');\r

  \  let color = getPlayerColor(plWaitingFor);\r

  \  d.style.backgroundColor = color;\r

  \  let button = document.getElementById('c_b_passToNextPlayer');\r

  \  button.textContent = 'PASS TO ' + plWaitingFor;\r

  \  show('passToNextPlayerUI');\r

  \  WAITINGFORPLAYER = plWaitingFor;\r

  }"
_simpleOptions: "function _simpleOptions(options = {}, defsOuter = {}) {\r

  \  options.showPic = valf(options.showPic, isdef(options.fzPic));\r

  \  options.showLabels = isdef(options.fz);\r

  \  options.szPic = { w: options.w, h: options.h };\r

  \  options.fzText = options.fz;\r

  \  if (nundef(options.rounding)) options.rounding = 4;\r

  \  if (nundef(options.margin)) options.margin = 4;\r

  \  if (nundef(options.padding)) options.padding = 0;\r

  \  if (nundef(options.labelStyles)) options.labelStyles = {};\r

  \  if (options.showLabels) { if (nundef(options.labelPos))
  options.labelBottom = true; options.labelStyles.fz = options.fzText; }\r

  \  options.picStyles = { fz: options.fzPic };\r

  \  let [w, h] = [options.szPic.w, options.szPic.h];\r

  \  options.outerStyles = {\r

  \    w: w, h: h, bg: options.bg, fg: options.fg,\r

  \    display: 'inline-flex', 'flex-direction': 'column',\r

  \    'justify-content': 'center', 'align-items': 'center', 'vertical-align':
  'top',\r

  \    padding: 0, box: true, margin: options.margin, rounding:
  options.rounding,\r

  \  };\r

  \  if (isdef(defsOuter)) addKeys(defsOuter, options.outerStyles);\r

  \  return options;\r

  }"
_singleThreadedChainExRec: "function _singleThreadedChainExRec(akku, onComplete)
  {\r

  \  if (CancelChain) {\r

  \    clearTimeout(ChainTimeout);\r

  \    BlockChain = false;\r

  \    console.log('chain canceled!', akku);\r

  \  } else if (isEmpty(TaskChain)) {\r

  \    BlockChain = false;\r

  \    onComplete(akku);\r

  \  } else {\r

  \    let task = TaskChain[0], f = task.f, parr = isdef(task.parr) ?
  task.parr : [], t = task.msecs, waitCond = task.waitCond, tWait =
  task.tWait;\r

  \    console.log('task:', f.name, 't', t)\r

  \    if (isdef(waitCond) && !waitCond()) {\r

  \      if (nundef(tWait)) tWait = 300;\r

  \      ChainTimeout = setTimeout(() => _singleThreadedChainExRec(akku,
  onComplete), tWait);\r

  \    } else {\r

  \      for (let i = 0; i < parr.length; i++) {\r

  \        let para = parr[i];\r

  \        if (para == '_last') parr[i] = arrLast(akku);\r

  \        else if (para == '_all' || para == '_list') parr[i] = akku;\r

  \        else if (para == '_first') parr[i] = akku[0];\r

  \      }\r

  \      let result = f(...parr);\r

  \      if (isdef(result)) akku.push(result);\r

  \      TaskChain = TaskChain.slice(1);\r

  \      if (isdef(t)) {\r

  \        ChainTimeout = setTimeout(() => _singleThreadedChainExRec(akku,
  onComplete), t);\r

  \      } else {\r

  \        _chainExRec(akku, onComplete);\r

  \      }\r

  \    }\r

  \  }\r

  }"
_sizeByFactor: "function _sizeByFactor(items, options, dGrid, factor = .9) {\r

  \  console.log('vorher', options.szPic, options.fzText, options.fzPic,
  options.padding, options.gap);\r

  \  w = options.szPic.w * factor;\r

  \  h = options.szPic.h * factor;\r

  \  fz = options.fzText;\r

  \  fzPic = options.fzPic * factor;\r

  \  options.fzPic = options.picStyles.fz = fzPic;\r

  \  options.fzText = options.labelStyles.fz = fz;\r

  \  options.szPic = { w: w, h: h };\r

  \  options.padding *= factor;\r

  \  options.gap *= factor;\r

  \  mStyleX(dGrid, { gap: options.gap / 2 });\r

  \  for (const item of items) { let ui = item.live; mStyleX(ui.dLabel, { fz:
  fz }); mStyleX(ui.div, { padding: options.padding, w: w, h: h });
  mStyleX(ui.dPic, { fz: fzPic }); }\r

  \  console.log('fonts set to', fz, fzPic);\r

  \  console.log('...nachher', options.szPic, options.fzText, options.fzPic,
  options.padding, options.gap);\r

  }"
_sizeByPixel: "function _sizeByPixel(items, options, dGrid, factor = -1) {\r

  \  console.log('vorher', options.szPic, options.fzText, options.fzPic,
  options.padding, options.gap);\r

  \  w = options.szPic.w + factor;\r

  \  h = options.szPic.h + factor;\r

  \  fz = options.fzText + factor;\r

  \  fzPic = options.fzPic + factor;\r

  \  options.fzPic = options.picStyles.fz = fzPic;\r

  \  options.fzText = options.labelStyles.fz = fz;\r

  \  options.szPic = { w: w, h: h };\r

  \  options.padding += factor;\r

  \  options.gap += factor;\r

  \  mStyleX(dGrid, { gap: options.gap / 2 });\r

  \  for (const item of items) { let ui = item.live; mStyleX(ui.dLabel, { fz:
  fz }); mStyleX(ui.div, { padding: options.padding, w: w, h: h });
  mStyleX(ui.dPic, { fz: fzPic }); }\r

  \  console.log('fonts set to', fz, fzPic);\r

  \  console.log('...nachher', options.szPic, options.fzText, options.fzPic,
  options.padding, options.gap);\r

  }"
_spgameStart: "function _spgameStart() {\r

  \  console.assert(isdef(DB));\r

  \  initLive();\r

  \  initTable();\r

  \  initSidebar();\r

  \  initAux();\r

  \  initScore();\r

  \  Speech = new SpeechAPI('E');\r

  \  console.log('Syms', Syms)\r

  \  KeySets = getKeySetsX();\r

  \  Settings = { language: 'E' }\r

  \  test04_textItems();\r

  }"
_standardHandler: "function _standardHandler(handler) {\r

  \  let f = isdef(handler) ?\r

  \    ev => { ev.cancelBubble = true; let res = handler(ev, evToItem(ev));
  }\r

  \    : ev => { ev.cancelBubble = true; console.log('clicked on',
  evToClosestId(ev), evToLive(ev), evToItem(ev)); };\r

  \  return f;\r

  }"
_start: "async function _start() {\r

  \  set_run_state_no_server();\r

  \  onpagedeactivated(() => { saveEnv(); dbSave(); });\r

  \  await load_syms();\r

  \  await load_db();\r

  \  let dicode = CODE.di = await route_path_yaml_dict('../y/z_all.yaml');\r

  \  let kwindow = get_keys(window);\r

  \  test100();\r

  }"
_start_game: "function _start_game(gamename, players, options) {\r

  }"
_start_old: "async function _start_old() {\r

  \  //#region prelim timit set_run_state onpagedeactivated load:syms db
  codebase\r

  \  let timit = new TimeIt('* using timit *');\r

  \  set_run_state_vps();\r

  \  onpagedeactivated(save_all);\r

  \  await load_syms();\r

  \  await load_db();\r

  \  await load_codebase();\r

  \  timit.show();\r

  \  //#endregion\r

  \  //#region db tests\r

  \  function test_random_update() {\r

  \    let n = rNumber();\r

  \    let i = rNumber(0, DB.appdata.howto.length - 1);\r

  \    let rec = { kw: 'k' + n, c: 'hallo' + (n + i) };\r

  \    db_update('howto', i, rec);\r

  \  }\r

  \  //#endregion\r

  \  //#region other tests\r

  \  //#endregion\r

  }"
_start0: "async function _start0() {\r

  \  console.assert(isdef(DB));\r

  \  DA = {}; Items = {};\r

  \  Speech = new SpeechAPI('E');\r

  \  KeySets = getKeySets();\r

  \  TOMan = new TimeoutManager();\r

  \  _start();\r

  }"
_start1: "async function _start1() {\r

  \  set_run_state_no_server();\r

  \  onpagedeactivated(() => { fiddleSave(); dbSave(); });\r

  \  await load_syms();\r

  \  await load_db();\r

  \  let dicode = CODE.di = await
  route_path_yaml_dict('../basejs/z_all.yaml');\r

  \  let dijustcode = CODE.justcode = await
  route_path_yaml_dict('../basejs/z_allcode.yaml');\r

  \  computeClosure(['_start1']);\r

  }"
_startHotseat: "function _startHotseat() {\r

  \  timit.start_of_cycle(getFunctionCallerName());\r

  \  S.vars.switchedGame = true;\r

  \  S.settings.game = GAME;\r

  \  checkCleanup();\r

  \  S.user = {};\r

  \  G = { table: {}, players: {} };\r

  \  UIS = {};\r

  \  IdOwner = {};\r

  \  id2oids = {};\r

  \  oid2ids = {};\r

  \  id2uids = {};\r

  \  if (S.settings.useSpec) loadUserSpec([loadUserCode, sendInitNewGame]);
  else sendInitNewGame();\r

  }"
_startLobby: function _startLobby() { lobbyView(); }
_startLogin: function _startLogin() { loginView(); }
_startMultiplayer: "function _startMultiplayer() {\r

  \  whichGame(onWhichGame);\r

  }"
_startNewGame: "async function _startNewGame(role = 'starter') {\r

  \  gameView();\r

  \  S.settings.game = GAME;\r

  \  flags.specAndDOM = true;\r

  \  checkCleanup_III();\r

  \  S.user = {};\r

  \  G = { table: {}, players: {}, signals: {} };\r

  \  UIS = {};\r

  \  IdOwner = {};\r

  \  id2oids = {};\r

  \  oid2ids = {};\r

  \  id2uids = {};\r

  \  let initFunc = (role == 'starter') ? sendInitNewGame :
  sendStatusNewGame;\r

  \  await loadSpecAndCode();\r

  \  if (TESTING) stubSendInitNewGame(role == 'starter');\r

  \  else initFunc();\r

  }"
_startRestartSame: "function _startRestartSame() {\r

  \  checkCleanup_I();\r

  \  sendRestartGame(USERNAME, SEED, [gameStep]);\r

  }"
_startSession: "async function _startSession() {\r

  \  timit = new TimeIt(getFunctionCallerName(), TIMIT_SHOW);\r

  \  await loadAssets();\r

  \  _initServer([ensureAllGames, () => {\r

  \    console.log('allGames', allGames)\r

  \    timit.showTime('nach loadAllGames_dep+loadIcons')\r

  \    gcsAuto();\r

  \    S.gameConfig = gcs[GAME];\r

  \    _startNewGame('starter');\r

  \    //#region earlier tests and starts:\r

  \    //#endregion\r

  \  }]);\r

  }"
_startShort: "function _startShort() {\r

  \  timit.start_of_cycle(getFunctionCallerName());\r

  \  if (isdef(UIS)) {\r

  \    stopInteraction();\r

  \    clearLog();\r

  \  }\r

  \  _sendRoute('/begin/1', d6 => {\r

  \    let user = isdef(S.gameInfo.userList) ? S.gameInfo.userList[0] :
  USERNAME;\r

  \    timit.showTime('sending status');\r

  \    _sendRoute('/status/' + user, d7 => {\r

  \      let data = JSON.parse(d7);\r

  \      timit.showTime('start processing');\r

  \      processData(data);\r

  \      gameStep();\r

  \    });\r

  \  });\r

  }"
_startTest: "function _startTest() {\r

  \  test03_2Hands();\r

  }"
_startTest01: "function _startTest01() {\r

  \  console.log('HALLOOOOO');\r

  \  atest01();\r

  }"
_syncUsernameOfSender: "function _syncUsernameOfSender(username) {\r

  \  if (nundef(username)) username = Username; else Username = username;\r

  \  plidSentStatus = getPlidForUsername(username);\r

  }"
_SYS_START: "function _SYS_START() {\r

  \  if (nundef(S) || nundef(S.vars)) {\r

  \    addEventListener('keyup', keyUpHandler);\r

  \    addEventListener('keydown', keyDownHandler);\r

  \  } else { checkCleanup(); }\r

  \  timit = new TimeIt(getFunctionCallerName());\r

  \  timit.tacit();\r

  \  S = { path: {}, user: {}, settings: {}, vars: { firstTime: true } };\r

  \  counters = { msg: 0, click: 0, mouseenter: 0, mouseleave: 0, events: 0
  };\r

  \  DELETED_IDS = [];\r

  \  if (S.vars.firstTime) setDefaultSettings();\r

  \  console.log('playMode:', S.settings.playMode, 'PLAYMODE', PLAYMODE,
  'S.playModeChanged', S.playModeChanged)\r

  \  S.vars.switchedGame = true;\r

  \  S.vars.firstTime = false;\r

  \  _initGameGlobals();\r

  \  presentMainMenu();\r

  }"
_tableCreateNew: "function _tableCreateNew() {\r

  \  for (const oid of G.tableCreated) {\r

  \    let o = G.table[oid];\r

  \    if (!defaultVisualExists(oid) && S.settings.table.createDefault ==
  true) {\r

  \      makeDefaultObject(oid, G.table[oid], S.settings.table.defaultArea);\r

  \    }\r

  \    if (S.settings.table.ignoreTypes.includes(o.obj_type)\r

  \      || mainVisualExists(oid)\r

  \      || !S.settings.boardDetection && !S.settings.deckDetection &&
  !S.settings.userStructures) {\r

  \      continue;\r

  \    }\r

  \    let updatedVisuals;\r

  \    let mobj;\r

  \    if (S.settings.userBehaviors) {\r

  \      updatedVisuals = runBehaviors(oid, G.table, TABLE_CREATE);\r

  \    }\r

  \    if (nundef(updatedVisuals) || !updatedVisuals.includes(oid)) {\r

  \      if ('loc' in o && isBoardElement(o.loc._obj)) mobj =
  makeMainBoardElementVisual(oid, G.table[oid]);\r

  \      if (mobj === null && !defaultVisualExists(oid) &&
  S.settings.table.createDefault != false) {\r

  \        makeDefaultObject(oid, G.table[oid],
  S.settings.table.defaultArea);\r

  \      }\r

  \    }\r

  \  }\r

  }"
_tableCreateNewSimple: "function _tableCreateNewSimple() {\r

  \  for (const oid of G.tableCreated) {\r

  \    let o = G.table[oid];\r

  \    if (S.settings.table.ignoreTypes.includes(o.obj_type)) continue;\r

  \    console.assert(!defaultVisualExists(oid), 'DEFAULT VISUAL EXISTS FOR '
  + oid, o);\r

  \    let updatedVisuals = runBehaviors(oid, G.table, TABLE_CREATE);\r

  \    if (!updatedVisuals.includes(oid) && !mainVisualExists(oid)) {\r

  \      makeDefaultObject(oid, G.table[oid], S.settings.table.defaultArea);\r

  \    } else {\r

  \      console.log(updatedVisuals.includes(oid) ? 'created ' + oid :
  'exists:' + oid);\r

  \    }\r

  \  }\r

  }"
_tableRemove: "function _tableRemove() {\r

  \  for (const oid of G.tableRemoved) {\r

  \    deleteOid(oid);\r

  \  }\r

  }"
_tableRemoveSimple: "function _tableRemoveSimple() {\r

  \  for (const oid of G.tableRemoved) {\r

  \    deleteOid(oid);\r

  \  }\r

  }"
_tableUpdate: "function _tableUpdate() {\r

  \  for (const oid in G.tableUpdated) {\r

  \    let o = G.table[oid];\r

  \    if (nundef(o)) {\r

  \      continue;\r

  \    }\r

  \    if (isStructuralElement(oid)) {\r

  \      continue;\r

  \    }\r

  \    let changedProps = G.tableUpdated[oid].summary;\r

  \    let mobj = getVisual(oid);\r

  \    let updatedVisuals;\r

  \    if (!isDeckObject(o) && mobj) {\r

  \      if (S.settings.userBehaviors) {\r

  \        updatedVisuals = runBehaviors(oid, G.table, TABLE_UPDATE);\r

  \      }\r

  \      if (nundef(updatedVisuals) || !updatedVisuals.includes(oid)) {\r

  \        if (changedProps.includes('loc')) _presentLocationChange(oid,
  mobj);\r

  \        presentMain(oid, mobj, G.table);\r

  \      }\r

  \    }\r

  \    if (!S.settings.table.createDefault || mobj &&
  S.settings.table.createDefault == 'miss') continue;\r

  \    presentDefault(oid, G.table[oid]);\r

  \  }\r

  \  if (S.settings.hasCards && !isPlain()) {\r

  \    for (const oid in G.table) {\r

  \      updateTableCardCollections(oid);\r

  \    }\r

  \  }\r

  }"
_tableUpdateSimple: "function _tableUpdateSimple() {\r

  \  for (const oid in G.tableUpdated) {\r

  \    let o = G.table[oid];\r

  \    if (nundef(o)) continue;\r

  \    let mobj = getVisual(oid);\r

  \    let updatedVisuals = runBehaviors(oid, G.table, TABLE_UPDATE);\r

  \    presentDefault(oid, G.table[oid]);\r

  \  }\r

  }"
_test: "function _test() {\r

  \  let o1 = {\r

  \    \"_set\": [\r

  \      {\r

  \        \"_tuple\": [\r

  \          {\r

  \            \"_set\": [\r

  \              { \"ID\": \"91\", \"val\": \"Corner[91]\", \"type\": \"obj\"
  },\r

  \              { \"ID\": \"92\", \"val\": \"Corner[92]\", \"type\": \"obj\"
  },\r

  \              { \"ID\": \"93\", \"val\": \"Corner[93]\", \"type\": \"obj\"
  },\r

  \            ]\r

  \          }\r

  \        ]\r

  \      }\r

  \    ]\r

  \  };\r

  \  let o3 = {\r

  \    \"_set\": [\r

  \      {\r

  \        \"_tuple\": [\r

  \          {\r

  \            \"_set\": [\r

  \              { \"ID\": \"1\", \"val\": \"Corner[1]\", \"type\": \"obj\"
  },\r

  \              { \"ID\": \"2\", \"val\": \"Corner[2]\", \"type\": \"obj\"
  },\r

  \            ]\r

  \          },\r

  \          {\r

  \            \"_set\": [\r

  \              { \"ID\": \"3\", \"val\": \"Corner[3]\", \"type\": \"obj\"
  },\r

  \            ]\r

  \          },\r

  \        ]\r

  \      }\r

  \    ]\r

  \  };\r

  \  let o4 = {\r

  \    \"_tuple\": [\r

  \      {\r

  \        \"_set\": [\r

  \          { \"ID\": \"1\", \"val\": \"Corner[1]\", \"type\": \"obj\" },\r

  \          { \"ID\": \"2\", \"val\": \"Corner[2]\", \"type\": \"obj\" },\r

  \        ]\r

  \      },\r

  \      {\r

  \        \"_set\": [\r

  \          { \"ID\": \"3\", \"val\": \"Corner[3]\", \"type\": \"obj\" },\r

  \        ]\r

  \      },\r

  \      {\r

  \        \"_set\": [\r

  \          { \"ID\": \"4\", \"val\": \"Corner[3]\", \"type\": \"obj\" },\r

  \          { \"ID\": \"5\", \"val\": \"Corner[3]\", \"type\": \"obj\" },\r

  \        ]\r

  \      },\r

  \    ]\r

  \  };\r

  \  let o2 = {\r

  \    \"_set\": [\r

  \      { \"ID\": \"1\", \"val\": \"Corner[1]\", \"type\": \"obj\" },\r

  \      { \"ID\": \"2\", \"val\": \"Corner[2]\", \"type\": \"obj\" },\r

  \      { \"ID\": \"3\", \"val\": \"Corner[2]\", \"type\": \"obj\" },\r

  \    ]\r

  \  };\r

  \  let o5 = {\r

  \    \"_set\": [\r

  \      {\r

  \        \"_tuple\": [\r

  \          {\r

  \            \"_set\": [\r

  \              { \"ID\": \"1\", \"val\": \"Corner[1]\", \"type\": \"obj\"
  },\r

  \              { \"ID\": \"2\", \"val\": \"Corner[2]\", \"type\": \"obj\"
  },\r

  \            ]\r

  \          },\r

  \          {\r

  \            \"_set\": [\r

  \              { \"ID\": \"3\", \"val\": \"Corner[3]\", \"type\": \"obj\"
  },\r

  \            ]\r

  \          },\r

  \        ]\r

  \      },\r

  \      {\r

  \        \"_tuple\": [\r

  \          {\r

  \            \"_set\": [\r

  \              { \"ID\": \"4\", \"val\": \"Corner[1]\", \"type\": \"obj\"
  },\r

  \              { \"ID\": \"5\", \"val\": \"Corner[2]\", \"type\": \"obj\"
  },\r

  \            ]\r

  \          },\r

  \          {\r

  \            \"_set\": [\r

  \              { \"ID\": \"6\", \"val\": \"Corner[3]\", \"type\": \"obj\"
  },\r

  \            ]\r

  \          },\r

  \        ]\r

  \      }\r

  \    ]\r

  \  };\r

  \  let o6 = {\r

  \    \"_tuple\": [\r

  \      {\r

  \        \"_set\": [\r

  \          { \"ID\": \"4\", \"val\": \"Corner[1]\", \"type\": \"obj\" },\r

  \          { \"ID\": \"5\", \"val\": \"Corner[2]\", \"type\": \"obj\" },\r

  \        ]\r

  \      },\r

  \      {\r

  \        \"_set\": [\r

  \          { \"ID\": \"6\", \"val\": \"Corner[3]\", \"type\": \"obj\" },\r

  \        ]\r

  \      },\r

  \    ]\r

  \  };\r

  \  let o7 = {\r

  \    \"_tuple\": [\r

  \      {\r

  \        \"_set\": [\r

  \          { \"ID\": \"1\", \"val\": \"Corner[1]\", \"type\": \"obj\" },\r

  \          { \"ID\": \"2\", \"val\": \"Corner[2]\", \"type\": \"obj\" },\r

  \        ]\r

  \      },\r

  \      {\r

  \        \"_set\": [\r

  \          { \"ID\": \"3\", \"val\": \"Corner[3]\", \"type\": \"obj\" },\r

  \        ]\r

  \      },\r

  \    ]\r

  \  };\r

  \  let o = o5;\r

  \  console.log('output', exp(o) ? tsRec(exp(o)) : 'undefined');\r

  }"
_test01_load_game_info: "function _test01_load_game_info() {\r

  \  timit = new TimeIt('*');\r

  \  timit.showTime('hallo');\r

  \  ensureAllGames([() => timit.showTime('done')]);\r

  }"
_testing: "async function _testing() {\r

  \  Items = {};\r

  \  iTest00();\r

  }"
_testTable: "function _testTable() {\r

  \  initRSGData(); hideLobby(); hideLogin(); showGame(); initDom();\r

  \  let gplayers = {\r

  \    White: {\r

  \      altName: \"White\",\r

  \      buildings: {\r

  \        city: { _set: [] },\r

  \        road: { _set: [{ _obj: \"149\" }] },\r

  \        settlement: { _set: [{ _obj: \"148\" }, { _obj: \"158\" }] },\r

  \      },\r

  \      color: \"white\",\r

  \      devcards: { _set: [] },\r

  \      id: { _player: \"White\" },\r

  \      opps: [{ _player: \"Red\" }, { _player: \"Blue\" }],\r

  \      opps2: { _set: [\"White\", \"Red\", \"Blue\"] },\r

  \      opps3: { _set: [{ _player: \"Red\" }, { _player: \"Blue\" }] },\r

  \      index: 0,\r

  \      name: \"White\",\r

  \      num_res: 3,\r

  \      obj_type: \"GamePlayer\",\r

  \      past_devcards: { _set: [] },\r

  \      reserve: { road: 14, settlement: 3, city: 4 },\r

  \      resources: { wood: 1, brick: 0, sheep: 1, ore: 0, wheat: 1 },\r

  \      username: \"felix\",\r

  \    },\r

  \    Red: {\r

  \      altName: \"Red\",\r

  \      buildings: {\r

  \        city: { _set: [] },\r

  \        road: { _set: [{ _obj: \"149\" }] },\r

  \        settlement: { _set: [{ _obj: \"148\" }, { _obj: \"158\" }] },\r

  \      },\r

  \      color: \"Red\",\r

  \      devcards: { _set: [] },\r

  \      id: \"Red\",\r

  \      index: 0,\r

  \      name: \"Red\",\r

  \      num_res: 3,\r

  \      past_devcards: { _set: [] },\r

  \      reserve: { road: 14, settlement: 3, city: 4 },\r

  \      resources: { wood: 1, brick: 0, sheep: 1, ore: 0, wheat: 1 },\r

  \      username: \"maus\",\r

  \    }\r

  \  };\r

  \  let gtable = {\r

  \    2: {\r

  \      col: 6,\r

  \      corners: [{ _obj: \"101\" }, { _obj: \"102\" }, { _obj: \"103\" }, {
  _obj: \"104\" }, { _obj: \"99\" }, { _obj: \"98\" }],\r

  \      edges: [{ _obj: \"27\" }, { _obj: \"26\" }, { _obj: \"25\" }, { _obj:
  \"24\" }, { _obj: \"23\" }, { _obj: \"22\" }],\r

  \      neighbors: [null, null, { _obj: \"78\" }, { _obj: \"79\" }, { _obj:
  \"70\" }, null],\r

  \      num: 11,\r

  \      obj_type: \"hex\",\r

  \      res: \"ore\",\r

  \      row: 0,\r

  \      visible: { _set: [\"White\", \"Red\", \"Blue\"] }\r

  \    },\r

  \    148: {\r

  \      loc: { _obj: \"131\" },\r

  \      obj_type: \"settlement\",\r

  \      player: {\r

  \        _player: \"White\"\r

  \      },\r

  \      opps: { opp1: { _player: \"Red\" }, opp2: { _player: \"Blue\" } },\r

  \      visible: {\r

  \        _set: [{ _player: \"Red\" }, { _player: \"Blue\" }]\r

  \      },\r

  \    },\r

  \    149: {\r

  \      loc: { _obj: \"138\" },\r

  \      obj_type: \"settlement\",\r

  \      player: {\r

  \        _player: \"White\"\r

  \      },\r

  \      visible: {\r

  \        _set: [\"White\", \"Red\", \"Blue\"]\r

  \      },\r

  \    },\r

  \    158: {\r

  \      loc: { _obj: \"134\" },\r

  \      obj_type: \"road\",\r

  \      player: {\r

  \        _player: \"Red\"\r

  \      },\r

  \      visible: { _set: [\"White\", \"Red\", \"Blue\"] },\r

  \    },\r

  \    145: {\r

  \      cols: 9,\r

  \      corners: { _set: [{ _obj: \"101\" }, { _obj: \"102\" }, { _obj:
  \"103\" },] },\r

  \      edges: { _set: [{ _obj: \"101\" }, { _obj: \"102\" }, { _obj: \"103\"
  },] },\r

  \      fields: { _set: [{ _obj: \"101\" }, { _obj: \"102\" }, { _obj:
  \"103\" },] },\r

  \      map: {\r

  \        _ndarray: [\r

  \          [null, { _obj: \"3\" }, null, { _obj: \"4\" }],\r

  \          [{ _obj: \"5\" }, null, { _obj: \"6\" }, null, { _obj: \"7\"
  }],\r

  \          [null, { _obj: \"8\" }, null],\r

  \        ]\r

  \      },\r

  \      obj_type: \"board\",\r

  \      rows: 5,\r

  \      visible: { _set: [\"White\", \"Red\", \"Blue\"] }\r

  \    }\r

  \  };\r

  \  console.log('gplayers', gplayers);\r

  \  console.log('gtable', gtable);\r

  \  addTableToArea(gtable[145], 'a_d_game');\r

  \  addTableToArea(gtable[148], 'a_d_game');\r

  \  addTableToArea(gplayers.White, 'a_d_objects');\r

  }"
_tryGrow: "function _tryGrow(items, options) {\r

  \  let again = false;\r

  \  let lastItem = items[items.length - 1];\r

  \  let rect = getRect(lDiv(lastItem));\r

  \  let bottom = rect.y + rect.h;\r

  \  let hArea = options.area.h;\r

  \  if (hArea > rect.h + 2 * options.gap) {\r

  \    fz = options.fzText + 1;\r

  \    fzPic = options.fzPic + 2;\r

  \    options.fzPic = options.picStyles.fz = fzPic;\r

  \    options.fzText = options.labelStyles.fz = fz;\r

  \    for (const item of items) {\r

  \      let live = item.live;\r

  \      mStyleX(live.dLabel, { fz: options.fzText });\r

  \      mStyleX(live.dPic, { fz: options.fzPic });\r

  \    }\r

  \    let ov = getVerticalOverflow(mBy(options.idGrid));\r

  \    if (Math.floor(ov) <= 0) again = true; else again = false;\r

  \  }\r

  \  if (again) _tryGrow(items, options);\r

  \  else {\r

  \    fz = options.fzText - 1;\r

  \    fzPic = options.fzPic - 2;\r

  \    options.fzPic = options.picStyles.fz = fzPic;\r

  \    options.fzText = options.labelStyles.fz = fz;\r

  \    for (const item of items) {\r

  \      let live = item.live;\r

  \      mStyleX(live.dLabel, { fz: options.fzText });\r

  \      mStyleX(live.dPic, { fz: options.fzPic });\r

  \    }\r

  \  }\r

  }"
_ui_game_menu_item: "function _ui_game_menu_item(g, g_tables = []) {\r

  \  function runderkreis(color, id) {\r

  \    return `<div id=${id}
  style='width:20px;height:20px;border-radius:50%;background-color:${color};col\
  or:white;position:absolute;left:0px;top:0px;'>` + '' + \"</div>\";\r

  \  }\r

  \  let [sym, bg, color, id] = [Syms[g.logo], g.color, null, getUID()];\r

  \  if (!isEmpty(g_tables)) {\r

  \    let t = g_tables[0];\r

  \    let have_another_move = t.player_status == 'joined';\r

  \    color = have_another_move ? 'green' : 'red';\r

  \    id = `rk_${t.id}`;\r

  \  }\r

  \  return `\r

  \  <div onclick=\"onclick_game_menu_item(event)\" gamename=${g.id}
  style='cursor:pointer;border-radius:10px;margin:10px;padding:5px;padding-top:\
  15px;min-width:120px;height:90px;display:inline-block;background:${bg};positi\
  on:relative;'>\r

  \  ${nundef(color) ? '' : runderkreis(color, id)}\r

  \  <span
  style='font-size:50px;font-family:${sym.family}'>${sym.text}</span><br>${g.fr\
  iendly.toString()}</div>\r

  \  `;\r

  }"
_unfocusOnEnter: function _unfocusOnEnter(ev) { if (ev.key === 'Enter') {
  ev.preventDefault(); mBy('dummy').focus(); } }
_unhighlightAndMinify: "function _unhighlightAndMinify(ev, mobj, partName) {\r

  \  minifyBack(mobj.id);\r

  \  unhighlightMsAndRelatives(ev, mobj, partName);\r

  }"
_unhighlightBoat: "function _unhighlightBoat() {\r

  \  if (boatHighlighted) {\r

  \    unhighlightMsAndRelatives(null, boatHighlighted);\r

  \    _closeInfoboxesForBoatOids(boatHighlighted);\r

  \    boatHighlighted = null;\r

  \  }\r

  }"
_updateCollections: "function _updateCollections(propChanges, pool, propNames)
  {\r

  \  for (const oid in propChanges) {\r

  \    let o = pool[oid];\r

  \    if (!o || isBoardElementObject(o) || isBoardObject(o) ||
  isDeckObject(o)) continue;\r

  \    for (const propName of propChanges[oid].summary) {\r

  \      if (!propNames.includes(propName)) continue;\r

  \      let o = pool[oid][propName];\r

  \      if (isSimple(o) || (isDict(o) && isdef(o.generic_type))) continue;\r

  \      let cLast = getCollections(oid, propName);\r

  \      let cCurrent = _findCollections(oid + '.' + propName, o);\r

  \      if (isEmpty(cCurrent) && isEmpty(cLast)) continue;\r

  \      let currentKeys = cCurrent.map(x => x.name);\r

  \      for (const c of cCurrent) {\r

  \        if (cLast && c.name in cLast) {\r

  \          if (nundef(collections[oid])) collections[oid] = {};\r

  \          if (nundef(collections[oid][propName]))
  collections[oid][propName] = {};\r

  \          collections[oid][propName][c.name] = c;\r

  \          c.tbd = 'update';\r

  \        } else {\r

  \          if (nundef(collections[oid])) collections[oid] = {};\r

  \          if (nundef(collections[oid][propName]))
  collections[oid][propName] = {};\r

  \          collections[oid][propName][c.name] = c;\r

  \          c.tbd = 'add';\r

  \        }\r

  \      }\r

  \      if (!cLast) continue;\r

  \      for (const k in cLast) {\r

  \        if (!(currentKeys.includes(k))) {\r

  \          collections[oid][propName][k].tbd = 'remove';\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  }"
_updateLogArea: "function _updateLogArea(prevPlid, plid) {\r

  \  if (prevPlid) hide('a_d_log_' + prevPlid);\r

  \  let id = 'a_d_log_' + plid;\r

  \  if (UIS[id]) show(id);\r

  }"
_updatePageHeader: "function _updatePageHeader(pid) {\r

  \  let mobj;\r

  \  for (const pl of S.gameConfig.players) {\r

  \    mobj = getPageHeaderDivForPlayer(pl.id);\r

  \    mobj.classList.remove('gamePlayer');\r

  \  }\r

  \  mobj = getPageHeaderDivForPlayer(pid);\r

  \  mobj.classList.add('gamePlayer');\r

  }"
_valf: "function _valf(val, def) { return isdef(val) ? val : def; }"
_visualizeAritOp: "function _visualizeAritOp(op, a, b, dParent, symResult) {\r

  \  op = isString(op) ? OPS[op] : op;\r

  \  let dx = mDiv(dParent); mFlex(dx); mStyleX(dx, { 'align-items': 'center',
  gap: 16 });\r

  \  let d1 = visNumber(a, dx, 'blue');\r

  \  let d2 = visOperator(op.wr, dx);\r

  \  let d3 = visNumber(b, dx, 'green');\r

  \  let d4 = visOperator('=', dx);\r

  \  let result = isdef(symResult) ? symResult : op.f(a, b);\r

  \  let d5 = visNumber(result, dx, 'red');\r

  \  return dx;\r

  }"
_visualizeMult: "function _visualizeMult(a, b, dParent, symResult) {\r

  \  op = OPS.mult;\r

  \  let dx = mDiv(dParent); mFlex(dx); mStyleX(dx, { 'align-items': 'center',
  gap: 16 });\r

  \  visNumber(a, dx, 'blue', 'v');\r

  \  for (let i = 1; i < b; i++) {\r

  \    let d2 = visOperator('+', dx);\r

  \    visNumber(a, dx, 'blue', 'v');\r

  \  }\r

  \  let d4 = visOperator('=', dx);\r

  \  let result = isdef(symResult) ? symResult : op.f(a, b);\r

  \  let d5 = visNumber(result, dx, 'red');\r

  \  return dx;\r

  }"
_visualizeNumber: "function _visualizeNumber(n, dParent, color, or = 'h') {\r

  \  let root = Math.sqrt(n);\r

  \  let rows = Math.floor(root);\r

  \  let cols = Math.ceil(root);\r

  \  if (or == 'v') { let h = rows; rows = cols; cols = h; }\r

  \  let dArea = mDiv(dParent, { display: 'inline-grid',
  'grid-template-columns': `repeat(${cols}, 1fr)`, bg: 'white', fg: color });\r

  \  for (let i = 0; i < n; i++) {\r

  \    let item = getItem('plain-circle');\r

  \    let d = miPic(item, dArea, { fz: 12, margin: 6 });\r

  \    iAdd(item, { div: d });\r

  \    mAppend(dArea, d);\r

  \  }\r

  \  return dArea;\r

  }"
_whenSoundPaused: "function _whenSoundPaused() {\r

  \  _sndPlayer = null;\r

  \  _sndPlayerIdle = true;\r

  \  _loaded = false;\r

  \  if (!isEmpty(_qSound)) { _deqSound(); } else { _idleSound = true; }\r

  }"
_zoomIfNeeded: "function _zoomIfNeeded(arr) {\r

  \  let wTotalNeeded = 0;\r

  \  for (const dName of arr) {\r

  \    let n = isNumber(dName) ? dName * bodyZoom : getBounds(dName).width;\r

  \    wTotalNeeded += n;\r

  \  }\r

  \  let wWindow = window.innerWidth;\r

  \  let newBodyZoom = (wWindow * bodyZoom / wTotalNeeded).toFixed(2);\r

  \  if (newBodyZoom == bodyZoom || newBodyZoom > 1 && bodyZoom == 1.0)
  return;\r

  \  if (Math.abs(newBodyZoom - 1.0) <= .03) {\r

  \    newBodyZoom = 1.0;\r

  \  }\r

  \  bodyZoom = Math.min(1.0, newBodyZoom);\r

  \  document.body.style.transformOrigin = '0% 0%';\r

  \  if (bodyZoom == 1.0) document.body.style.transform = 'none';\r

  \  else document.body.style.transform = 'scale(' + bodyZoom + ')';\r

  }"
_zPicS: "function _zPicS(itemInfoKey, dParent, styles = {}) {\r

  \  let [item, info, key] = detectItemInfoKey(itemInfoKey);\r

  \  let outerStyles = isdef(styles) ? jsCopy(styles) : {};\r

  \  outerStyles.display = 'inline-block';\r

  \  let family = info.family;\r

  \  let wInfo = info.w;\r

  \  let hInfo = info.h; if (info.type == 'icon' && hInfo == 133) hInfo =
  110;\r

  \  info.fz = 100;\r

  \  let innerStyles = { family: family };\r

  \  let [padw, padh] = isdef(styles.padding) ? [styles.padding,
  styles.padding] : [0, 0];\r

  \  let dOuter = isdef(dParent) ? mDiv(dParent) : mDiv();\r

  \  let d = mDiv(dOuter);\r

  \  d.innerHTML = info.text;\r

  \  let wdes, hdes, fzdes, wreal, hreal, fzreal, f;\r

  \  if (isdef(styles.w) && isdef(styles.h) && isdef(styles.fz)) {\r

  \    [wdes, hdes, fzdes] = [styles.w, styles.h, styles.fz];\r

  \    let fw = wdes / wInfo;\r

  \    let fh = hdes / hInfo;\r

  \    let ffz = fzdes / info.fz;\r

  \    f = Math.min(fw, fh, ffz);\r

  \  } else if (isdef(styles.w) && isdef(styles.h)) {\r

  \    [wdes, hdes] = [styles.w, styles.h];\r

  \    let fw = wdes / wInfo;\r

  \    let fh = hdes / hInfo;\r

  \    f = Math.min(fw, fh);\r

  \  } else if (isdef(styles.w) && isdef(styles.fz)) {\r

  \    [wdes, fzdes] = [styles.w, styles.fz];\r

  \    let fw = wdes / wInfo;\r

  \    let ffz = fzdes / info.fz;\r

  \    f = Math.min(fw, ffz);\r

  \  } else if (isdef(styles.h) && isdef(styles.fz)) {\r

  \    [hdes, fzdes] = [styles.h, styles.fz];\r

  \    let fh = hdes / hInfo;\r

  \    let ffz = fzdes / info.fz;\r

  \    f = Math.min(fh, ffz);\r

  \  } else if (isdef(styles.h)) {\r

  \    hdes = styles.h;\r

  \    f = hdes / hInfo;\r

  \  } else if (isdef(styles.w)) {\r

  \    wdes = styles.w;\r

  \    f = wdes / wInfo;\r

  \  } else {\r

  \    mStyleX(d, innerStyles);\r

  \    mStyleX(dOuter, outerStyles);\r

  \    return dOuter;\r

  \  }\r

  \  fzreal = Math.floor(f * info.fz);\r

  \  wreal = Math.round(f * wInfo);\r

  \  hreal = Math.round(f * hInfo);\r

  \  wdes = Math.round(wdes);\r

  \  hdes = Math.round(hdes);\r

  \  padw += isdef(styles.w) ? (wdes - wreal) / 2 : 0;\r

  \  padh += isdef(styles.h) ? (hdes - hreal) / 2 : 0;\r

  \  if (!(padw >= 0 && padh >= 0)) {\r

  \    console.log(info)\r

  \    console.log('\\nstyles.w', styles.w, '\\nstyles.h', styles.h,
  '\\nstyles.fz', styles.fz, '\\nstyles.padding', styles.padding, '\\nwInfo',
  wInfo, '\\nhInfo', hInfo, '\\nfzreal', fzreal, '\\nwreal', wreal, '\\nhreal',
  hreal, '\\npadw', padw, '\\npadh', padh);\r

  \  }\r

  \  innerStyles.fz = fzreal;\r

  \  innerStyles.weight = 900;\r

  \  innerStyles.w = wreal;\r

  \  innerStyles.h = hreal;\r

  \  mStyleX(d, innerStyles);\r

  \  outerStyles.padding = '' + padh + 'px ' + padw + 'px';\r

  \  outerStyles.w = wreal;\r

  \  outerStyles.h = hreal;\r

  \  mStyleX(dOuter, outerStyles);\r

  \  return {\r

  \    info: info, key: info.key, div: dOuter, outerDims: { w: wdes, h: hdes,
  hpadding: padh, wpadding: padw },\r

  \    innerDims: { w: wreal, h: hreal, fz: fzreal }, bg:
  dOuter.style.backgroundColor, fg: dOuter.style.color\r

  \  };\r

  }"
a_game: "function a_game() {\r

  \  function state_info(dParent) { dParent.innerHTML = `turn: ${Z.turn},
  stage:${Z.stage}`; }\r

  \  function setup(players, options) {\r

  \    let fen = { players: {}, plorder: jsCopy(players), history: [] };\r

  \    shuffle(fen.plorder);\r

  \    let starter = fen.starter = fen.plorder[0];\r

  \    let cards_needed = players.length * options.handsize * 1.4;\r

  \    fen.num_decks = Math.ceil(cards_needed / 52);\r

  \    fen.deck = create_fen_deck('n', fen.num_decks, 0);\r

  \    shuffle(fen.deck);\r

  \    let [i, n, diff] = [0, players.length, get_slot_diff(fen)];\r

  \    for (const plname of players) {\r

  \      let pl = fen.players[plname] = {\r

  \        hand: deck_deal(fen.deck, options.handsize),\r

  \        score: 0,\r

  \        name: plname,\r

  \        color: get_user_color(plname),\r

  \        slot: diff * i,\r

  \      };\r

  \      i++;\r

  \    }\r

  \    [fen.phase, fen.stage, fen.step, fen.turn] = ['', 'click', 0,
  [starter]];\r

  \    return fen;\r

  \  }\r

  \  function present() { present_a_game(); }\r

  \  function check_gameover() { return false; }\r

  \  function activate_ui() {\r

  \    activate_a_game();\r

  \  }\r

  \  function post_collect() { agmove_resolve(); }\r

  \  return { post_collect, state_info, setup, present, check_gameover,
  activate_ui };\r

  }"
a0: "function a0(ev) {\r

  \  toggle_select(evToItem(ev), G.selist);\r

  \  toolbar_check();\r

  }"
a0_functions: "function a0_functions() {\r\n}"
a1: function a1(ev) { a0(ev); }
a2_add_selection: "function a2_add_selection(items, label, min = 0, max = 100,
  goto_post = true) {\r

  \  clear_previous_level();\r

  \  A.level++;\r

  \  A.items = items;\r

  \  A.goto_post = goto_post;\r

  \  A.selected = [];\r

  \  let show_submit_button = min > 1 || min != max;\r

  \  let dParent = window[`dActions${A.level}`];\r

  \  for (const item of items) {\r

  \    let a = item.a;\r

  \    let idButton = getUID('b'); item.idButton = idButton; A.di[idButton] =
  item; item.uids = [idButton];\r

  \    let b = mButton(a, show_submit_button ? a2_toggle_selection :
  a2_select, dParent, { fz: 13 }, ['donebutton', 'enabled'], idButton);\r

  \    if (isdef(item.o)) {\r

  \      let go = item.o;\r

  \      let d = iDiv(go);\r

  \      go.id = d.id = getUID();\r

  \      mClass(d, 'hoverScale');\r

  \      d.onclick = show_submit_button ? a2_toggle_selection : a2_select;\r

  \      let idCard = d.id; item.idCard = idCard; A.di[idCard] = item;
  item.uids.push(idCard);\r

  \      set_hover_ui(b, go);\r

  \    }\r

  \  }\r

  \  if (show_submit_button) {\r

  \    if (isdef(mBy('b_submit'))) { let b = mBy('b_submit'); mAppend(dParent,
  b); }\r

  \    else mButton('submit', goto_post ? a2_post_if_uiActivated :
  a2_pre_if_uiActivated, dParent, { fz: 13, bg: 'red', fg: 'silver' },
  ['donebutton', 'enabled'], 'b_submit');\r

  \  }\r

  \  if (isdef(mBy('b_restart_action'))) { let b = mBy('b_restart_action');
  mAppend(dParent, b); }\r

  \  else mButton('restart action', () => turn_send_reload(G.otree.plturn),
  dParent, { fz: 13, bg: 'red', fg: 'silver' }, ['donebutton', 'enabled'],
  'b_restart_action');\r

  \  if (items.length <= min) {\r

  \    uiActivated = false;\r

  \    for (let i = 0; i < items.length; i++) {\r

  \      A.selected.push(i);\r

  \      let a = items[i];\r

  \      mStyle(mBy(a.idButton), { bg: 'yellow' });\r

  \      if (isdef(a.idCard)) mClass(mBy(a.idCard), 'card_selected');\r

  \    }\r

  \    setTimeout(() => { if (goto_post) { ari_post_action(); } else {
  ari_pre_action(); } }, 500);\r

  \  } else if (is_admin()) {\r

  \    let movekey = G.otree.plturn + '_' + ITER;\r

  \    let selection_list = DA.auto_moves[movekey];\r

  \    if (nundef(selection_list)) selection_list = DA.auto_moves[ITER];\r

  \    if (isEmpty(selection_list)) return;\r

  \    uiActivated = false;\r

  \    let selection = selection_list.shift();\r

  \    let numbers = [];\r

  \    for (const el of selection) {\r

  \      if (el == 'last') {\r

  \        numbers.push(A.items.length - 1);\r

  \      } else if (isString(el)) {\r

  \        let commands = A.items.map(x => x.key);\r

  \        let idx = commands.indexOf(el);\r

  \        numbers.push(idx);\r

  \      } else numbers.push(el);\r

  \    }\r

  \    selection = numbers;\r

  \    setTimeout(() => {\r

  \      A.selected = selection;\r

  \      if (selection.length == 1) A.selected_key =
  A.items[A.selected[0]].key;\r

  \      a2_highlight_selected_items();\r

  \      if (A.goto_post) { ari_post_action(); } else { ari_pre_action(); }\r

  \    }, 1000);\r

  \  }\r

  }"
a2_exchange_items: "function a2_exchange_items(otree, o0, o1) {\r

  \  elem_from_to(o0.key, lookup(otree, o0.path.split('.')), lookup(otree,
  o1.path.split('.')));\r

  \  elem_from_to(o1.key, lookup(otree, o1.path.split('.')), lookup(otree,
  o0.path.split('.')));\r

  }"
a2_get_all_hidden_building_items: "function
  a2_get_all_hidden_building_items(uname) {\r

  \  let items = [];\r

  \  for (const gb of G[uname].buildings) {\r

  \    items = items.concat(a2_get_hidden_building_items(gb));\r

  \  }\r

  \  a2_reindex(items);\r

  \  return items;\r

  }"
a2_get_build_items: function a2_get_build_items(uname) { return
  a2_get_hand_and_stall_items(uname); }
a2_get_building_items: "function a2_get_building_items(uname) {\r

  \  let gblist = G[uname].buildings;\r

  \  let items = [], i = 0;\r

  \  for (const o of gblist) {\r

  \    let name = o.type + ' ' + (o.list[0][0] == 'T' ? '10' :
  o.list[0][0]);\r

  \    o.div = o.container;\r

  \    let item = { o: o, a: name, key: o.list[0], friendly: name, path:
  o.path, index: i, ui: o.container };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
a2_get_building_items_of_type: "function a2_get_building_items_of_type(uname,
  types = ['farms', 'estates', 'chateaus']) {\r

  \  let gblist = G[uname].buildings.filter(x => types.includes(x.type));\r

  \  let items = [], i = 0;\r

  \  for (const o of gblist) {\r

  \    let name = o.type + ' ' + (o.list[0][0] == 'T' ? '10' :
  o.list[0][0]);\r

  \    o.div = o.container;\r

  \    let item = { o: o, a: name, key: o.list[0], friendly: name, path:
  o.path, index: i, ui: o.container };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
a2_get_buildings: "function a2_get_buildings(gblist) {\r

  \  let items = [], i = 0;\r

  \  for (const o of gblist) {\r

  \    let name = o.type + ' ' + (o.list[0][0] == 'T' ? '10' :
  o.list[0][0]);\r

  \    o.div = o.container;\r

  \    let item = { o: o, a: name, key: o.list[0], friendly: name, path:
  o.path, index: i, ui: o.container };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
a2_get_coin_amounts: "function a2_get_coin_amounts(plturn) {\r

  \  let items = [];\r

  \  for (let i = 0; i <= G.otree[plturn].coins; i++) {\r

  \    let cmd = '' + i;\r

  \    let item = { o: null, a: cmd, key: cmd, friendly: cmd, path: null,
  index: i };\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
a2_get_commands: "function a2_get_commands(plturn) {\r

  \  let avail = ari_get_actions(G.otree, plturn);\r

  \  let items = [], i = 0;\r

  \  for (const cmd of avail) {\r

  \    let item = { o: null, a: cmd, key: cmd, friendly: cmd, path: null,
  index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
a2_get_endgame: "function a2_get_endgame(plturn) {\r

  \  let items = [], i = 0;\r

  \  for (const cmd of ['end game', 'go on']) {\r

  \    let item = { o: null, a: cmd, key: cmd, friendly: cmd, path: null,
  index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
a2_get_estates_chateaus_items: function a2_get_estates_chateaus_items(uname) {
  return a2_get_building_items_of_type(uname, ['estates', 'chateaus']); }
a2_get_farms_estates_items: function a2_get_farms_estates_items(uname) { return
  a2_get_building_items_of_type(uname, ['farms', 'estates']); }
a2_get_hand_and_stall_items: "function a2_get_hand_and_stall_items(uname) {\r

  \  let items = a2_get_hand_items(uname);\r

  \  items = items.concat(a2_get_stall_items(uname));\r

  \  a2_reindex(items);\r

  \  return items;\r

  }"
a2_get_hand_items: "function a2_get_hand_items(uname) {\r

  \  let items = [], i = 0;\r

  \  for (const o of G[uname].hand.items) {\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  `${uname}.hand`, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
a2_get_harvest_items: "function a2_get_harvest_items(uname) {\r

  \  let items = []; let i = 0;\r

  \  for (const gb of G[uname].buildings) {\r

  \    if (isdef(gb.harvest)) {\r

  \      let d = gb.harvest;\r

  \      mStyle(d, { cursor: 'pointer', opacity: 1 });\r

  \      gb.div = d;\r

  \      let name = 'H' + i + ':' + (gb.list[0][0] == 'T' ? '10' :
  gb.list[0][0]);\r

  \      let item = { o: gb, a: name, key: name, friendly: name, path:
  gb.path, index: i };\r

  \      i++;\r

  \      items.push(item);\r

  \    }\r

  \  }\r

  \  return items;\r

  }"
a2_get_hidden_building_items: "function a2_get_hidden_building_items(b) {\r

  \  let items = [];\r

  \  for (let i = 1; i < b.items.length; i++) {\r

  \    let o = b.items[i];\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  b.path + '.list', index: i - 1 };\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
a2_get_market_items: "function a2_get_market_items() {\r

  \  let items = [], i = 0;\r

  \  for (const o of G.market.items) {\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  `market`, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
a2_get_open_discard_items: "function a2_get_open_discard_items() {\r

  \  let items = [], i = 0;\r

  \  for (const o of G.open_discard.items) {\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  `open_discard`, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
a2_get_other_buildings: "function a2_get_other_buildings(plturn) {\r

  \  let items = [], i = 0;\r

  \  for (const uname of G.otree.plorder) {\r

  \    if (uname == plturn) continue;\r

  \    items = items.concat(a2_get_buildings(G[uname].buildings));\r

  \  }\r

  \  a2_reindex(items);\r

  \  return items;\r

  }"
a2_get_repair_items: "function a2_get_repair_items(uname) {\r

  \  let ihand = a2_get_hand_items(uname);\r

  \  let istall = a2_get_stall_items(uname);\r

  \  let irepair = a2_get_all_hidden_building_items(uname);\r

  \  irepair.map(x => face_up(x.o));\r

  \  let items = ihand.concat(istall).concat(irepair);\r

  \  a2_reindex(items);\r

  \  return items;\r

  }"
a2_get_stall_items: "function a2_get_stall_items(uname) {\r

  \  let items = [], i = 0;\r

  \  for (const o of G[uname].stall.items) {\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  `${uname}.stall`, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
a2_get_trade_items: "function a2_get_trade_items(uname) {\r

  \  let items = a2_get_market_items(uname);\r

  \  items = items.concat(a2_get_stall_items(uname));\r

  \  for (const plname of G.otree.plorder) {\r

  \    if (plname != uname) items =
  items.concat(a2_get_stall_items(plname));\r

  \  }\r

  \  a2_reindex(items);\r

  \  return items;\r

  }"
a2_highlight_selected_items: "function a2_highlight_selected_items() {\r

  \  for (const i of A.selected) {\r

  \    let a = A.items[i];\r

  \    mStyle(mBy(a.idButton), { bg: 'yellow' });\r

  \    if (isdef(a.idCard)) mClass(mBy(a.idCard), 'card_selected');\r

  \  }\r

  }"
a2_pay_with_card: "function a2_pay_with_card(item) {\r

  \  let fen = Z.fen;\r

  \  let source = lookup(fen, item.path.split('.'));\r

  \  elem_from_to_top(item.key, source, fen.deck_discard);\r

  \  ari_reorg_discard(fen);\r

  }"
a2_pay_with_coin: "function a2_pay_with_coin(uplayer) {\r

  \  let fen = Z.fen;\r

  \  fen.players[uplayer].coins -= 1;\r

  }"
a2_post_if_uiActivated: "function a2_post_if_uiActivated() {\r

  \  if (!uiActivated) { console.log('ui is deactivated!!!'); return; }\r

  \  ari_post_action();\r

  }"
a2_pre_if_uiActivated: "function a2_pre_if_uiActivated() {\r

  \  if (!uiActivated) { console.log('ui is deactivated!!!'); return; }\r

  \  ari_pre_action();\r

  }"
a2_reindex: function a2_reindex(items) { let i = 0; items.map(x => { x.index =
  i; i++; }); }
a2_select: "function a2_select(ev) {\r

  \  if (!uiActivated) { console.log('ui is deactivated!!!'); return; }\r

  \  let id = evToId(ev);\r

  \  let a = A.di[id];\r

  \  A.selected = [a.index];\r

  \  A.selected_key = A.items[a.index].key;\r

  \  mStyle(mBy(a.idButton), { bg: 'yellow' });\r

  \  if (isdef(a.idCard)) mClass(mBy(a.idCard), 'card_selected');\r

  \  if (A.goto_post) ari_post_action(); else ari_pre_action();\r

  }"
a2_toggle_selection: "function a2_toggle_selection(ev) {\r

  \  if (!uiActivated) { console.log('ui is deactivated!!!'); return; }\r

  \  let id = evToId(ev);\r

  \  let a = A.di[id];\r

  \  if (A.selected.includes(a.index)) {\r

  \    removeInPlace(A.selected, a.index);\r

  \    mStyle(mBy(a.idButton), { bg: 'grey' });\r

  \    if (isdef(a.idCard)) mClassRemove(mBy(a.idCard), 'card_selected');\r

  \  } else {\r

  \    A.selected.push(a.index);\r

  \    mStyle(mBy(a.idButton), { bg: 'yellow' });\r

  \    if (isdef(a.idCard)) mClass(mBy(a.idCard), 'card_selected');\r

  \  }\r

  }"
Accel: "function Accel() {\r

  \  var ax;\r

  \  var ay;\r

  \  var az;\r

  \  var rotX;\r

  \  var rotY;\r

  \  var rotZ;\r

  \  if (window.DeviceMotionEvent == undefined) {\r

  \    console.log(\"This program requires an accelerometer\");\r

  \  } else {\r

  \    window.ondevicemotion = function (event) {\r

  \      this.ax = event.accelerationIncludingGravity.x;\r

  \      this.ay = event.accelerationIncludingGravity.y;\r

  \      this.az = event.accelerationIncludingGravity.z;\r

  \      rotation = event.rotationRate;\r

  \      if (rotation != null) {\r

  \        this.rotX = Math.round(rotation.alpha);\r

  \        this.rotY = Math.round(rotation.beta);\r

  \        this.rotZ = Math.round(rotation.gamma);\r

  \      }\r

  \    }\r

  \  }\r

  \  this.getAX = function () {\r

  \    if (window.ax == null) {\r

  \      window.ax = 0;\r

  \    }\r

  \    return window.ax;\r

  \  }\r

  \  this.getAY = function () {\r

  \    if (window.ay == null) {\r

  \      window.ay = 0;\r

  \    }\r

  \    return window.ay;\r

  \  }\r

  \  this.getAZ = function () {\r

  \    if (window.az == null) {\r

  \      window.az = 0;\r

  \    }\r

  \    return window.az;\r

  \  }\r

  \  this.getRotX = function () { return rotX; }\r

  \  this.getRotY = function () { return rotY; }\r

  \  this.getRotZ = function () { return rotZ; }\r

  }"
accelerate: "function accelerate(n) {\r

  \  meme.gravity = n;\r

  }"
ack_player: "function ack_player(plname) {\r

  \  let [fen, uplayer, pl] = [Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  assertion(sameList(Z.turn, [plname]), \"ack_player: wrong turn\");\r

  \  if (plname == fen.lastplayer || fen.players[uplayer].buy == true) {\r

  \    let func = window[fen.callbackname_after_ack];\r

  \    if (isdef(func)) func();\r

  \  } else {\r

  \    Z.turn = [get_next_in_list(plname, fen.ack_players)];\r

  \  }\r

  \  turn_send_move_update();\r

  }"
action_close: "function action_close(item) {\r

  \  console.log('HALLO CLOSE!!!!!!!!!!!!!!!')\r

  \  let o = fromLocalStorage('app');\r

  \  let duration = get_now() - o.tStart;\r

  \  let factor = valf(item.val, 3);\r

  \  let secs = Math.round(duration / 1000);\r

  \  let mins = Math.round(secs / 60);\r

  \  let res = mins;\r

  \  let points = Math.round(res * factor / 5); if (points == 0) points = 1;\r

  \  let t = new Date(o.tStart).toTimeString().substring(0, 5);\r

  \  let s = `a:${t},${res},${points}`;\r

  \  console.log('string:', s);\r

  \  setTimeout(() => navigator.clipboard.writeText(s), 100)\r

  }"
action_open: "function action_open(item) {\r

  \  console.log('HALLO OPEN!!!!!!!!!!!!!!!')\r

  \  let o = { tStart: get_now(), app: 'action' };\r

  \  toLocalStorage(o, 'app');\r

  \  let d = iDiv(item);\r

  \  let d1 = mDiv(d, { fz: 15, position: 'absolute', top: 2, right: 4 },
  null, new Date(o.tStart).toTimeString().substring(0, 5));\r

  \  let d2 = mGrid(3, 3, d, { gap: 3, matop: 12 });\r

  \  for (const n of [.5, 1, 2, 3, 5, 8, 12, 20, 50]) {\r

  \    let b = mButton(n, () => item.val = n, d2, { cursor: 'pointer' });\r

  \  }\r

  }"
actionOrWaiting: "function actionOrWaiting(player, dAction, callback) {\r

  \  if ('actions' in dAction) {\r

  \    unitTestSender('found actions for', player);\r

  \    dAction.info.game.player = player;\r

  \    callback(dAction);\r

  \  } else if ('waiting_for' in dAction) {\r

  \    let waiting = getSet(dAction, 'waiting_for');\r

  \    unitTestSender('NEED PLAYER CHANGE!!!!!!!!!!!!', waiting);\r

  \    if (!empty(waiting)) {\r

  \      let newPlayer = waiting[0];\r

  \      sender.send('status_test/' + newPlayer, dNewPlayer => {\r

  \        dAction = extend(true, dAction, dNewPlayer);\r

  \        unitTestSender('action+status data for', newPlayer, dAction);\r

  \        dAction.info.game.player = newPlayer;\r

  \        callback(dAction);\r

  \      });\r

  \    } else {\r

  \      alert('empty waiting_for and no actions!!!');\r

  \    }\r

  \  } else {\r

  \    unitTestSender('NEED TO SEND EMPTY ACTION!!!!!!!!!!!!!', player);\r

  \    alert('sending empty action!!!', player);\r

  \    sendAction(player, ['pass'], dEMpty => {\r

  \      dAction = extend(true, dAction, dEmpty);\r

  \      callback(dAction);\r

  \    });\r

  \  }\r

  }"
actions_off: "function actions_off() {\r

  \  hide('dLeftSide');\r

  \  delete Session.is_actions;\r

  \  Actions = [];\r

  }"
actions_on: "function actions_on() {\r

  \  if (!isdef(mBy('dLeiste'))) initActionPanel();\r

  \  Session.is_actions = true;\r

  \  Actions = [];\r

  }"
activate_a_game: "function activate_a_game() {\r

  \  if (Z.stage == 'click') {\r

  \    show_MMM('back to normal!!!!');\r

  \    mButton('single turn move', agmove_single, dTable, { margin: 20 });\r

  \    mButton('clear players', agmove_clear_all, dTable, { margin: 20 });\r

  \    mButton('clear first', agmove_clear_first, dTable, { margin: 20 });\r

  \  } else if (Z.stage == 'clear') {\r

  \    agmove_startmulti();\r

  \  } else {\r

  \    mButton('indiv move', agmove_indiv, dTable, { margin: 20 });\r

  \  }\r

  }"
activate_actions: "function activate_actions(r, uname) {\r

  \  console.log('actions', r.actions);\r

  \  if (!isEmpty(DA.staged_moves)) {\r

  \    dastaged(r, uname, 500);\r

  \  } else if (r.actions.length == 1) {\r

  \    autoselect_action(r, r.actions[0], uname);\r

  \  } else {\r

  \    for (const a of r.actions) {\r

  \      if (isdef(Items[a])) {\r

  \        let item = R.get_item(a);\r

  \        let d = iDiv(item);\r

  \        mStyle(d, { cursor: 'pointer' });\r

  \        d.onclick = ev => onselect_action(ev, r, a, uname);\r

  \      } else if (a == 'pass') {\r

  \        activate_pass_button(a, uname);\r

  \      } else if (startsWith(a, 'draw')) {\r

  \        let path = stringAfter(a, '.');\r

  \        let item = R.get_item(path);\r

  \        let d = iDiv(item);\r

  \        mStyle(d, { cursor: 'pointer' });\r

  \        d.onclick = ev => onselect_action(ev, r, a, uname);\r

  \        activate_draw_button(r, a, uname);\r

  \      }\r

  \    }\r

  \    highlight_player(uname);\r

  \    uiActivated = true;\r

  \  }\r

  }"
activate_draw_button: "function activate_draw_button(r, action, uname) {\r

  \  mButton('draw', ev => select_action(r, action, uname), dActions, { fz: 13
  }, ['donebutton', 'enabled'], 'd_draw');\r

  }"
activate_pass_button: "function activate_pass_button(r, action, uname) {\r

  \  mButton('pass', ev => select_action(r, action, uname), dActions, { fz: 13
  }, ['donebutton', 'enabled'], 'd_pass');\r

  }"
activate_playerstats: "function activate_playerstats(items) {\r

  \  let fen = Z.fen;\r

  \  for (const plname in fen.players) {\r

  \    let ui = items[plname];\r

  \    let d = iDiv(ui);\r

  \    d.onclick = () => { switch_uname(plname); onclick_reload(); }\r

  \  }\r

  }"
activate_ui: "function activate_ui() {\r

  \  if (uiActivated) { DA.ai_is_moving = false; return; }\r

  \  uiActivated = true; DA.ai_is_moving = false;\r

  }"
activateChat: "function activateChat(username) {\r

  \  if (DA.activeChat == username) { console.log('already active:',
  username); return; }\r

  \  if (isdef(DA.activeChat) && DA.activeChat != username)
  deactivateChat(DA.activeChat);\r

  \  DA.activeChat = username;\r

  \  let active = ActiveChats[username];\r

  \  let othername = username;\r

  \  let mename = Username;\r

  \  let other = active.userdata;\r

  \  let me = Userdata;\r

  \  if (nundef(active.div)) {\r

  \    let dcontactlist = mBy('dChat');\r

  \    other.bg = randomColor();\r

  \    other.fg = colorIdealText(other.bg);\r

  \    let dContact = presentInChatList(other, dcontactlist);\r

  \    active.div = dContact;\r

  \    mStyle(dContact, { bg: other.bg, fg: other.fg });\r

  \    dContact.onclick = () => activateChat(username);\r

  \  } else {\r

  \    console.log('es gibt schon ein entry fuer', username, 'in chat menu',
  iDiv(active), '\\nactive', active)\r

  \  }\r

  \  mClass(active.div, 'activeChat');\r

  \  let d = showChatWindow();\r

  \  clearElement(d);\r

  \  console.log('add title to chatWindow!');\r

  \  for (const msg of active.messages) {\r

  \    let className = msg.sender == othername ? 'message_left' :
  'message_right';\r

  \    let path = getProfileImagePath(msg.sender == othername ? other : me);\r

  \    let d1 = mDiv(d);\r

  \    if (msg.sender == othername) mStyle(d1, { bg: other.bg, fg: other.fg
  });\r

  \    let dImg = mImg(path, d1, { w: 40, h: 40, rounding: '50%' },
  'profile_img');\r

  \    let dtext = mText(msg.message, d1, {});\r

  \    mStyle(d1, { 'box-shadow': '0px 0px 10px #aaa', rounding: 10, padding:
  10, matop: 10, display: 'flex', gap: 10, float: msg.sender == othername ?
  'left' : 'right', w: '60%' });\r

  \  }\r

  }"
ActivateChessWidgets: "function ActivateChessWidgets() {\r

  \  StopThinking();\r

  \  $(\"#SetFen\").click(function () {\r

  \    var fenStr = $(\"#fenIn\").val();\r

  \    ParseFen(fenStr);\r

  \    PrintBoard();\r

  \    SetInitialBoardPieces();\r

  \    GameController.PlayerSide = brd_side;\r

  \    CheckAndSet();\r

  \    EvalPosition();\r

  \    NewGameAjax();\r

  \  });\r

  \  $(\"#UndoButton\").click(function () {\r

  \    console.log('Undo request... brd_hisPly:' + brd_hisPly);\r

  \    if (brd_hisPly > 0) {\r

  \      TakeMove(); if (brd_hisPly > 0) TakeMove();\r

  \      brd_ply = 0;\r

  \      SetInitialBoardPieces();\r

  \      $(\"#currentFenSpan\").text(BoardToFen());\r

  \    }\r

  \  });\r

  \  $(\"#HintButton\").click(function () {\r

  \    FLAG_HINT_ONLY = true;\r

  \    let move = PreSearch();\r

  \  });\r

  \  $(\"#SearchButton\").click(function () {\r

  \    GameController.PlayerSide = brd_side ^ 1;\r

  \    PreSearch();\r

  \  });\r

  \  $(\"#FlipButton\").click(function () {\r

  \    GameController.BoardFlipped ^= 1;\r

  \    console.log(\"Flipped:\" + GameController.BoardFlipped);\r

  \    SetInitialBoardPieces();\r

  \  });\r

  \  $(\"#EndGameButton\").click(function () {\r

  \    let fen = chooseRandom(FenPositionList).FEN;\r

  \    console.log('fen', fen)\r

  \    NewGame(fen);\r

  \    NewGameAjax();\r

  \  });\r

  \  $(\"#NewGameButton\").click(function () {\r

  \    NewGame();\r

  \    NewGameAjax();\r

  \  });\r

  }"
activateFocusGroup: "function activateFocusGroup(iFocus) {\r

  \  if (isdef(iFocus)) Goal.iFocus = iFocus;\r

  \  if (Goal.iFocus === null) {\r

  \    console.log('nothing to activate');\r

  \    return;\r

  \  }\r

  \  let g = Goal.words[Goal.iFocus];\r

  \  g.div.style.backgroundColor = 'black';\r

  }"
activateML: "function activateML() {\r

  \  onkeypress = ev => {\r

  \    clearFleetingMessage();\r

  \    if (uiPaused || ev.ctrlKey || ev.altKey) return;\r

  \    let charEntered = ev.key.toString();\r

  \    if (!isAlphaNum(charEntered)) return;\r

  \    Selected = { lastLetterEntered: charEntered.toUpperCase() };\r

  \    if (nMissing == 1) {\r

  \      let d = Selected.feedbackUI = inputs[0].div;\r

  \      Selected.lastIndexEntered = inputs[0].index;\r

  \      Selected.inp = inputs[0];\r

  \      d.innerHTML = Selected.lastLetterEntered;\r

  \      mRemoveClass(d, 'blink');\r

  \      let result = buildWordFromLetters(mParent(d));\r

  \      evaluate(result);\r

  \    } else {\r

  \      let ch = charEntered.toUpperCase();\r

  \      for (const inp of inputs) {\r

  \        if (inp.letter == ch) {\r

  \          Selected.lastIndexEntered = inp.index;\r

  \          Selected.inp = inp;\r

  \          let d = Selected.feedbackUI = inp.div;\r

  \          d.innerHTML = ch;\r

  \          mRemoveClass(d, 'blink');\r

  \          removeInPlace(inputs, inp);\r

  \          nMissing -= 1;\r

  \          break;\r

  \        }\r

  \      }\r

  \      if (nundef(Selected.lastIndexEntered)) {\r

  \        showFleetingMessage('you entered ' + Selected.lastLetterEntered)\r

  \        say('this letter does NOT belong to the word!')\r

  \      }\r

  \      showFleetingMessage(composeFleetingMessage(), 3000);\r

  \    }\r

  \  }\r

  }"
activateOn: "function activateOn(item, event, handler) {\r

  \  let d = item.div;\r

  \  mStyleX(d, { cursor: 'pointer' });\r

  \  d[event] = ev => { handler(ev); evaluate() };\r

  \  item.isActive = true;\r

  }"
activateSP: "async function activateSP() {\r

  \  if (isSpeakerRunning) {\r

  \    setTimeout(activateSP, 300);\r

  \  } else {\r

  \    setTimeout(() => record(currentLanguage, bestWord), 100);\r

  \  }\r

  }"
activateSPA: "async function activateSPA() {\r

  \  OnMicrophoneReady = setTimeout(() => {\r

  \    say(bestWord, .7, 1, 1, false, 'random');\r

  \  }, DELAY_BETWEEN_MIKE_AND_SPEECH);\r

  \  setTimeout(() => record(currentLanguage, bestWord), 100);\r

  }"
activateTC: "function activateTC() {\r

  \  uiActivatedTC = true;\r

  }"
activateTests: "function activateTests(commaSepString) {\r

  \  addIfComma(commaSepString, activatedTests);\r

  }"
activateTooltips: "function activateTooltips() {\r

  \  for (const oid in G.table) {\r

  \    if (isdef(getFirstVisual(oid))) createTooltip(oid);\r

  \  }\r

  \  for (const oid in G.players) {\r

  \    if (isdef(getFirstVisual(oid))) createTooltip(oid);\r

  \  }\r

  }"
activateTooltips_hallo: "function activateTooltips_hallo() {\r

  \  for (const oid in G.table) {\r

  \    if (isdef(getVisual(oid))) createTooltip(oid);\r

  \  }\r

  \  for (const oid in G.players) {\r

  \    if (isdef(getVisual(oid))) createTooltip(oid);\r

  \  }\r

  }"
activateTP: "function activateTP() {\r

  \  uiActivated = true;\r

  }"
activateUi: "function activateUi() {\r

  \  Selected = null;\r

  \  uiActivated = true;\r

  \  G.instance.activate();\r

  }"
activateUis: "function activateUis(R) {\r

  \  for (const uid in R.uiNodes) {\r

  \    let n = R.uiNodes[uid];\r

  \    if (isdef(n.oid) && isdef(n.ui)) {\r

  \      n.act.activate(highSelfAndRelatives, unhighSelfAndRelatives,
  selectUid);\r

  \    }\r

  \  }\r

  \  R.isUiActive = true;\r

  }"
activateUserSelection: "function activateUserSelection() {\r

  \  hide(document.getElementById('dFrozen'));\r

  \  show(document.getElementById('dActive'));\r

  \  hide(document.getElementById('bNextPlayer'));\r

  \  show(document.getElementById('uiActiveButtons'));\r

  \  show(document.getElementById('ui2Buttons'));\r

  \  show(document.getElementById('uiEditButtons'));\r

  }"
activateWaitingForServer: "function activateWaitingForServer() {\r

  \  show(document.getElementById('dFrozen'));\r

  \  hide(document.getElementById('dActive'));\r

  \  hide(document.getElementById('bNextPlayer'));\r

  \  hide(document.getElementById('uiActiveButtons'));\r

  \  hide(document.getElementById('ui2Buttons'));\r

  \  hide(document.getElementById('uiEditButtons'));\r

  }"
activateWP: "function activateWP() {\r

  \  inputBox.onkeyup = ev => {\r

  \    if (ev.ctrlKey || uiPaused) return;\r

  \    if (ev.key === \"Enter\") {\r

  \      ev.cancelBubble = true;\r

  \      evaluate(ev);\r

  \    }\r

  \  };\r

  \  inputBox.focus();\r

  }"
activationUI: function activationUI() { uiPaused &= ~beforeActivationMask; }
actualCenter: "function actualCenter(elem, relToParent = false, elRelTo) {\r

  \  let b = getBounds(elem, relToParent, elRelTo);\r

  \  return { x: Math.round(b.left + b.width / 2), y: Math.round(b.top +
  b.height / 2) };\r

  }"
actualHeight: function actualHeight(elem) { return Math.round(getBounds(elem).height); }
actualLeft: function actualLeft(elem, relToParent = false, elRelTo) { return
  Math.round(getBounds(elem, relToParent, elRelTo).left); }
actualTop: function actualTop(elem, relToParent = false, elRelTo) { return
  Math.round(getBounds(elem, relToParent, elRelTo).top); }
actualWidth: function actualWidth(elem) { return Math.round(getBounds(elem).width); }
add_a_correct_building_to: "function add_a_correct_building_to(fen, uname, type)
  {\r

  \  let ranks = lookupSet(DA, ['test', 'extra', 'ranks'], 'A23456789TJQK');\r

  \  if (ranks.length <= 0) {\r

  \    console.log('===>ranks empty!', ranks)\r

  \    ranks = lookupSetOverride(DA, ['test', 'extra', 'ranks'],
  'A23456789TJQK');\r

  \  }\r

  \  let r = ranks[0]; lookupSetOverride(DA, ['test', 'extra', 'ranks'],
  ranks.substring(1));\r

  \  let keys = [`${r}Sn`, `${r}Hn`, `${r}Cn`, `${r}Dn`];\r

  \  if (type != 'farm') keys.push(`${r}Cn`); if (type == 'chateau')
  keys.push(`${r}Hn`);\r

  \  fen.players[uname].buildings[type].push({ list: keys, h: null });\r

  }"
add_a_schwein: "function add_a_schwein(fen, uname) {\r

  \  let type = rChoose(['farm', 'estate', 'chateau']);\r

  \  let keys = deck_deal(fen.deck, type[0] == 'f' ? 4 : type[0] == 'e' ? 5 :
  6);\r

  \  fen.players[uname].buildings[type].push({ list: keys, h: null });\r

  }"
add_agent_at: "function add_agent_at(map, p1) {\r

  \  if (M.state != 'a') { console.log('wrong state!', M.state); return; }\r

  \  let a = new Agent(map, .0001, false, null, p1);\r

  \  lookupAddToList(M, ['agents'], a);\r

  \  console.log(\"adding agent at\", p1);\r

  }"
add_auction_history: "function add_auction_history() {\r

  \  let [fen, plorder] = [Z.fen, Z.plorder];\r

  \  for (const plname of fen.plorder) {\r

  \    if (nundef(fen.buy[plname])) continue;\r

  \    ari_history_list([`${plname} buys ${fen.buy[plname].a} for
  ${fen.second_most}`], 'auction');\r

  \  }\r

  }"
add_card_to_group: "function add_card_to_group(card, oldgroup, oldindex,
  targetcard, targetgroup) {\r

  \  card.groupid = targetgroup.id;\r

  \  if (card.source == 'hand') {\r

  \    let hand = UI.players[Z.uplayer].hand;\r

  \    removeInPlace(hand.items, card);\r

  \  }\r

  \  card.source = 'group';\r

  \  mDroppable(iDiv(card), drop_card_fritz, dragover_fritz);\r

  \  if (nundef(targetcard)) {\r

  \    targetgroup.ids.push(card.id);\r

  \    mAppend(iDiv(targetgroup), iDiv(card));\r

  \  } else {\r

  \    let index = targetgroup.ids.indexOf(targetcard.id) + 1;\r

  \    targetgroup.ids.splice(index, 0, card.id);\r

  \    mClear(iDiv(targetgroup));\r

  \    for (let i = 0; i < targetgroup.ids.length; i++) {\r

  \      let c = Items[targetgroup.ids[i]];\r

  \      mAppend(iDiv(targetgroup), iDiv(c));\r

  \    }\r

  \  }\r

  \  resplay_container(targetgroup);\r

  }"
add_click_set_agent: function add_click_set_agent() { M.state = 'a';
  M.map.on('click', e => { add_agent_at(M.map, [e.latlng.lat, e.latlng.lng]) });
  }
add_edit: "function add_edit(x, y, text = '', bg = 'random') {\r

  \  let d = mDiv(dTable, { bg: bg, fg: 'contrast', x: x, y: y, position:
  'absolute', padding: 10, wmin: 10, }, getUID(), text);\r

  \  DA.edits.push(d);\r

  \  add_interaction(d);\r

  }"
add_element: "function add_element(f) {\r

  \  if (tree.length == 0) { addlayer(); return; }\r

  \  let root = firstCond(tree, x => !x.finished);\r

  \  if (!root) {\r

  \    console.log('tree is finished!');\r

  \    return;\r

  \  }\r

  \  if (root) f(root);\r

  }"
add_havecode_content: "function add_havecode_content(dParent) {\r

  \  let d1 = mDiv(dParent);\r

  \  let [dl, dr] = mColFlex(d1, [4, 1]);\r

  \  dr.innerHTML = img_html('verify_right.jpg');\r

  \  let d2 = mDiv(dl, { w: '100%', padding: 12, box: true });\r

  \  let d3 = mDiv(d2, { fz: 22, weight: 900, rounding: 4, hmin: 50, border:
  'none' }, null, 'Enter Authorization Code');\r

  \  let d4 = mDiv(dl, { w: '100%', padding: 12, box: true, fz: 14, family:
  'Verdana' }, null, 'An authorization code was sent to your phone');\r

  \  let d5 = mDiv(dl, { w: '100%', matop: 12, mabottom: 20, hpadding: 12,
  box: true, fz: 14, family: 'Verdana' }, null, 'XXX-XXX-0297');\r

  \  let html = `\r

  \    <div>\r

  \      <form action=\"javascript:onclick_boa_submit_code();\">\r

  \        <div>\r

  \          <label for=\"inpAuthocode\">Authorization code</label><br>\r

  \          <input style=\"border:1px dotted silver;padding:4px\"
  id=\"inpAuthocode\" name=\"authocode\" value=\"XXXXXX\" type=\"text\" />\r

  \          <div class=\"clearboth\"></div>\r

  \        </div>\r

  \        <div style=\"font-size:12px;margin:30px 0px\">The code expires 10
  minutes after you request it.</div>\r

  \        <a style=\"font-size:12px;\">Request another authorization
  code</a>\r

  \        <div style=\"margin-top:30px\"><button
  id='bSubmit'>SUBMIT</button><button id='bCancel'>CANCEL</button></div>\r

  \      </form>\r

  \    </div>\r

  \  `;\r

  \  let d6 = mDiv(dl, { w: '100%', matop: 12, hpadding: 12, box: true, fz:
  14, family: 'Verdana' }, null, html);\r

  \  let bSubmit = document.getElementById('bSubmit');\r

  \  let bStyle = { vpadding: 6, hpadding: 20, fz: 20, rounding: 6, maright:
  25, weight: 'bold' };\r

  \  mStyle(bSubmit, bStyle);\r

  \  mStyle(bCancel, bStyle); mStyle(bCancel, { fg: 'grey', border: 'grey'
  })\r

  \  mClass(bSubmit, 'btn-bofa-blue');\r

  \  bCancel.onclick = onclick_boa_cancel;\r

  }"
add_interaction: "function add_interaction(d) {\r

  \  d.setAttribute('contentEditable', true);\r

  \  d.style.outline = 'none';\r

  \  d.onkeydown = function (e) {\r

  \    DA.tabKeyPressed = e.keyCode == 9;\r

  \    if (DA.tabKeyPressed) {\r

  \      e.preventDefault();\r

  \      return;\r

  \    } else {\r

  \    }\r

  \  };\r

  \  d.onkeyup = function (e) {\r

  \    if (DA.tabKeyPressed) {\r

  \      let idx = DA.edits.indexOf(e.target);\r

  \      let next = (idx + 1) % DA.edits.length;\r

  \      if (next != idx) DA.edits[next].focus();\r

  \      e.preventDefault();\r

  \      return;\r

  \    }\r

  \  };\r

  \  d.onfocus = e => {\r

  \    if (DA.focusElement != e.target && isdef(DA.focusElement)) {\r

  \      let el = DA.focusElement;\r

  \      if (isEmpty(el.innerHTML)) {\r

  \        removeInPlace(DA.edits, el);\r

  \        el.remove();\r

  \      }\r

  \    }\r

  \    DA.focusElement = e.target;\r

  \  };\r

  \  d.focus();\r

  }"
add_make_payments_button: "function add_make_payments_button(ev) {\r

  \  let id = evToClosestId(ev);\r

  \  let inp = mBy(id);\r

  \  if (isdef(DA.prevHidden)) { mClear(DA.prevHidden); }\r

  \  let dHidden =
  inp.parentNode.parentNode.parentNode.parentNode.parentNode.lastChild;\r

  \  mClear(dHidden);\r

  \  let d1 = mCard(dHidden, { w: '90%', padding: 10, box: true });\r

  \  let el = mDiv(d1, { cursor: 'pointer' }, null, `<span class=\"btn-bofa
  btn-bofa-blue btn-bofa-blue-lock\">Make Payments</span>`);\r

  \  el.onclick = () => make_payments_challenge_eval(inp);\r

  \  DA.prevHidden = dHidden;\r

  }"
add_new_user: "function add_new_user(udata, save = true) {\r

  \  console.log('WILL NOT ADD NEW USERS AT THIS TIME!!!', udata); return;\r

  \  console.assert(isDict(udata) && isdef(udata.name) && isString(udata.name)
  && udata.name.length < 50, 'CANNOT ADD THIS WEIRED USER ' + udata.name);\r

  \  DB.users[udata.name] = udata;\r

  \  if (save) db_save();\r

  \  return udata;\r

  }"
add_players: "function add_players() {\r

  \  let res = prompt('enter player names to be added: ');\r

  \  let parts = splitAtAnyOf(res, ' ,');\r

  \  let list = Session.game_options.players.slice(1);\r

  \  for (const p of parts) {\r

  \    let name = p.toLowerCase().trim();\r

  \    if (isdef(DB.users[name])) addIf(list, name);\r

  \  }\r

  \  list.sort(); list.unshift(Session.cur_user);\r

  \  populate_players(list);\r

  }"
add_rumors_to_buildings: "function add_rumors_to_buildings(o) {\r

  \  fen = o.fen;\r

  \  for (const plname of fen.plorder) {\r

  \    let buildings = fen.players[plname].buildings;\r

  \    for (const type in buildings) {\r

  \      for (const b of buildings[type]) {\r

  \        if (type == 'farm') b.h = rCard('n');\r

  \        b.rumors = arrFunc(2, () => rCard('r'));\r

  \      }\r

  \    }\r

  \  }\r

  }"
add_schwein: "function add_schwein(card, fenbuilding, uibuilding) {\r

  \  if (isdef(uibuilding)) add_ui_schwein(card, uibuilding.schweine);\r

  \  let ckey = isString(card) ? card : card.key;\r

  \  let index = isString(card) ? fenbuilding.list.indexOf(ckey) :
  card.index;\r

  \  fenbuilding.schweine.push(index);\r

  \  console.log('fen schweine', fenbuilding.schweine);\r

  }"
add_to_chain: function add_to_chain(list) { DA.chain = DA.chain.concat(list); }
add_transaction: "function add_transaction(cmd) {\r

  \  if (!DA.simulate) start_transaction();\r

  \  DA.transactionlist.push(cmd);\r

  }"
add_ui_schwein: "function add_ui_schwein(item, uischweine) {\r

  \  uischweine.push(item);\r

  \  mStyle(iDiv(item), { position: 'relative' });\r

  \  miPic('pig', iDiv(item), { position: 'absolute', top: 30, left: 0, fz: 30
  });\r

  \  face_up(item);\r

  }"
add_users_to_sql_db: async function add_users_to_sql_db(not_in_sql_db) {
  to_server(not_in_sql_db, 'add_users'); }
add_verify_content: "function add_verify_content(dParent) {\r

  \  let d1 = mDiv(dParent);\r

  \  let [dl, dr] = mColFlex(d1, [4, 1]);\r

  \  dr.innerHTML = img_html('verify_right.jpg');\r

  \  let d2 = mDiv(dl, { w: '100%', padding: 12, box: true });\r

  \  let d3 = mDiv(d2, { fz: 22, weight: 900, rounding: 4, hmin: 50, border:
  '3px solid black' }, null, 'Request Authorization Code');\r

  \  let d4 = mDiv(dl, { w: '100%', padding: 12, box: true, fz: 14, family:
  'Verdana' }, null, 'To verify your identity, we need to send you an
  authorization code');\r

  \  let d5 = mDiv(dl, { w: '100%', matop: 12, hpadding: 12, box: true, fz:
  14, family: 'Verdana' }, null, 'Select a Phone Number');\r

  \  let st1 = `padding:12px;font-size:18px;`;\r

  \  let stradio = `margin:5px 10px;color:black`;\r

  \  let html = `\r

  \    <div id='dPhoneContact' style=\"${st1}\">\r

  \      <fieldset>\r

  \        <div style=\"${stradio}\">\r

  \          <div>\r

  \            <input class=\"multipleContact\" id=\"tlpvt-text1\"
  name=\"phoneContact\" value=\"text_1\" type=\"radio\" />\r

  \            <label for=\"tlpvt-text1\">XXX-XXX-7382</label>\r

  \            <div class=\"clearboth\"></div>\r

  \          </div>\r

  \        </div>\r

  \        <div style=\"${stradio}\">\r

  \          <div class=\"phone-num\">\r

  \            <input class=\"multipleContact\" id=\"tlpvt-text2\"
  name=\"phoneContact\" value=\"text_2\" type=\"radio\" />\r

  \            <label class=\"TL_NPI_L1\"
  for=\"tlpvt-text2\">XXX-XXX-9671</label>\r

  \            <div class=\"clearboth\"></div>\r

  \          </div>\r

  \        </div>\r

  \        <div style=\"${stradio}\">\r

  \          <div class=\"phone-num\">\r

  \            <input class=\"multipleContact\" id=\"tlpvt-text3\"
  name=\"phoneContact\" value=\"text_3\" type=\"radio\" />\r

  \            <label class=\"TL_NPI_L1\"
  for=\"tlpvt-text3\">XXX-XXX-0297</label>\r

  \            <div class=\"clearboth\"></div>\r

  \          </div>\r

  \        </div>\r

  \      </fieldset>\r

  \    </div>\r

  \  `;\r

  \  mAppend(dl, mCreateFrom(html));\r

  \  let d7 = mDiv(dl, { w: '100%', matop: 12, hpadding: 12, box: true, fz:
  14, family: 'Verdana' }, null, 'How would you like to receive it?');\r

  \  html = `\r

  \    <div id='dTextOrPhone' style=\"${st1}\">\r

  \      <fieldset>\r

  \        <div style=\"${stradio}\">\r

  \          <div>\r

  \            <input class=\"multipleContact\" id=\"tph-text1\"
  name=\"textorphone\" value=\"text_1\" type=\"radio\" checked />\r

  \            <label for=\"tph-text1\">Text message</label>\r

  \            <div class=\"clearboth\"></div>\r

  \          </div>\r

  \        </div>\r

  \        <div style=\"${stradio}\">\r

  \          <div class=\"phone-num\">\r

  \            <input class=\"multipleContact\" id=\"tph-text2\"
  name=\"textorphone\" value=\"text_2\" type=\"radio\" />\r

  \            <label class=\"TL_NPI_L1\" for=\"tph-text2\">Phone
  call</label>\r

  \            <div class=\"clearboth\"></div>\r

  \          </div>\r

  \        </div>\r

  \      </fieldset>\r

  \    </div>\r

  \  `;\r

  \  mAppend(dl, mCreateFrom(html));\r

  \  let d9 = mDiv(dl, { w: '100%', matop: 12, hpadding: 12, box: true, fz:
  14, family: 'Verdana' }, null, 'The code expires 10 minutes after you request
  it');\r

  \  let d10 = mDiv(dl, { w: '100%', matop: 12, hpadding: 12, box: true, fz:
  14, family: 'Verdana' }, null, '<a>Having trouble receiving you code by
  phone?</a>');\r

  \  let d11 = mDiv(dl, { w: '100%', matop: 12, hpadding: 12, box: true, fz:
  14, family: 'Verdana' }, null, 'You are consenting to be contacted at the
  phone number selected for the purpose of receiving an authorization code. If
  you selected text message, Wireless and text message fees may apply from you
  carrier.<br>Supported carriers include AT&T, Sprint, T-Mobile, US Cellular,
  Verizon, or any other branded wireless operator.');\r

  \  let d12 = mDiv(dl, { hpadding: 12, matop: 24, gap: 12 }); mFlex(d12);\r

  \  let bstyle = { vpadding: 12, hpadding: 20, fz: 20, fg: 'grey', rounding:
  6, maright: 25, weight: 'bold' };\r

  \  mButton('SEND CODE', onclick_boa_sendcode, d12, bstyle);\r

  \  mButton('CANCEL', onclick_boa_cancel, d12, bstyle);\r

  }"
addAdjacencyFromTo: "function addAdjacencyFromTo(r1, r2, dir, rect) {\r

  \  let house = Items[r1.house];\r

  \  if (!r2) rect = rrto(rect, house.rect);\r

  \  lookupAddToList(r1, ['walls', dir], { rect: rect, dir: dir, room: r2 ?
  r2.id : r2, door: null });\r

  \  let dir2 = r2 ? getOppDir(dir) : dir;\r

  \  lookupAddToList(r2 ? r2 : Items[r1.house], ['walls', dir2], { rect: rect,
  dir: dir2, room: r1.id, door: null });\r

  }"
addAll: "function addAll(akku, other) {\r

  \  for (const el of other) {\r

  \    akku.push(el);\r

  \  }\r

  \  return akku;\r

  }"
addAREA: "function addAREA(id, o) {\r

  \  if (AREAS[id]) {\r

  \    error('AREAS ' + id + ' exists already!!! ');\r

  \    error(o);\r

  \    return;\r

  \  }\r

  \  AREAS[id] = o;\r

  }"
addAsSoundToDatabase: "function addAsSoundToDatabase(info, answer) {\r

  }"
addBadge: "function addBadge(dParent, level, clickHandler, animateRubberband =
  false) {\r

  \  let fg = '#00000080';\r

  \  let textColor = 'white';\r

  \  let isText = true; let isOmoji = false;\r

  \  let i = level - 1;\r

  \  let key = levelKeys[i];\r

  \  let k = replaceAll(key, ' ', '-');\r

  \  let item = getItem(k);\r

  \  let label = item.label = \"level \" + i;\r

  \  let h = window.innerHeight;\r

  \  let sz = h / 14;\r

  \  let options = _simpleOptions({ w: sz, h: sz, fz: sz / 4, fzPic: sz / 2,
  bg: levelColors[i], fg: textColor });\r

  \  options.handler = clickHandler;\r

  \  let d = makeItemDiv(item, options);\r

  \  mAppend(dParent, d);\r

  \  item.index = i;\r

  \  badges.push(item);\r

  \  return arrLast(badges);\r

  }"
AddBlackPawnCaptureMove: "function AddBlackPawnCaptureMove(from, to, cap) {\r

  \  if (RanksBrd[from] == RANKS.RANK_2) {\r

  \    AddCaptureMove(MOVE(from, to, cap, PIECES.bQ, 0));\r

  \    AddCaptureMove(MOVE(from, to, cap, PIECES.bR, 0));\r

  \    AddCaptureMove(MOVE(from, to, cap, PIECES.bB, 0));\r

  \    AddCaptureMove(MOVE(from, to, cap, PIECES.bN, 0));\r

  \  } else {\r

  \    AddCaptureMove(MOVE(from, to, cap, PIECES.EMPTY, 0));\r

  \  }\r

  }"
AddBlackPawnQuietMove: "function AddBlackPawnQuietMove(from, to) {\r

  \  if (RanksBrd[from] == RANKS.RANK_2) {\r

  \    AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.bQ, 0));\r

  \    AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.bR, 0));\r

  \    AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.bB, 0));\r

  \    AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.bN, 0));\r

  \  } else {\r

  \    AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.EMPTY, 0));\r

  \  }\r

  }"
addBoard: function addBoard(R) { R.initRound(); reAddServerObject('board'); }
addBoatInteraction: "function addBoatInteraction(id) {\r

  \  let mobj = UIS[id];\r

  \  mobj.addClickHandler('elem', onClickSelectTuple);\r

  \  mobj.addMouseEnterHandler('title', (x, pName) => x.high(pName));\r

  \  mobj.addMouseLeaveHandler('title', (x, pName) => x.unhigh(pName));\r

  }"
addBorder: "function addBorder(elem, color, thickness) {\r

  \  elem.style.border = color + ' ' + thickness + 'px solid';\r

  \  elem.style.boxSizing = 'border-box';\r

  }"
addByKey: "function addByKey(oNew, oOld, except) {\r

  \  for (const k in oNew) {\r

  \    let val = oNew[k];\r

  \    if (isdef(except) && except.includes(k) || !isNumber(val)) continue;\r

  \    oOld[k] = isdef(oOld[k]) ? oOld[k] + val : val;\r

  \  }\r

  }"
AddCaptureMove: "function AddCaptureMove(move) {\r

  \  brd_moveList[brd_moveListStart[brd_ply + 1]] = move;\r

  \  brd_moveScores[brd_moveListStart[brd_ply + 1]++] =
  MvvLvaScores[CAPTURED(move) * 14 + brd_pieces[FROMSQ(move)]] + 1000000;\r

  }"
addCard: "function addCard(c, deck, top = true) { top ? deck.push(c) :
  deck.unshift(c); }"
addCardsToMainPlayer: "function addCardsToMainPlayer(n = 1) {\r

  \  if (GAME != 'catan') return;\r

  \  for (const plid in serverData.players) {\r

  \    let res = [];\r

  \    for (let i = 0; i < n; i++) {\r

  \      let card = {\r

  \        id: getUID(),\r

  \        short_name: 'K',\r

  \        obj_type: 'card',\r

  \        generic_type: 'card'\r

  \      };\r

  \      res.push({ _obj: card.id });\r

  \      serverData.table[card.id] = card;\r

  \    }\r

  \    let pl = serverData.players[plid];\r

  \    res = GAME == 'catan' ? pl.devcards._set.concat(res) :
  pl.hand._set.concat(res);\r

  \    if (GAME == 'catan') pl.devcards = { _set: res }; else pl.hand = {
  _set: res };\r

  \    break;\r

  \  }\r

  }"
addCardsToPlayers: "function addCardsToPlayers(n = 1) {\r

  \  for (const plid in serverData.players) {\r

  \    let res = [];\r

  \    for (let i = 0; i < n; i++) {\r

  \      let card = {\r

  \        id: getUID(),\r

  \        short_name: 'K',\r

  \        obj_type: 'card',\r

  \        generic_type: 'card'\r

  \      };\r

  \      res.push({ _obj: card.id });\r

  \      serverData.table[card.id] = card;\r

  \    }\r

  \    let pl = serverData.players[plid];\r

  \    res = GAME == 'catan' ? pl.devcards._set.concat(res) :
  pl.hand._set.concat(res);\r

  \    if (GAME == 'catan') pl.devcards = { _set: res }; else pl.hand = {
  _set: res };\r

  \  }\r

  }"
addCardTo: "function addCardTo(d) {\r\n}"
addCardToCollectionArea: "function addCardToCollectionArea(oid,
  collectionAreaName) {\r

  \  let idCollection = getIdArea(collectionAreaName);\r

  \  let isCard = getMainId(oid);\r

  \  let msCard = UIS[isCard];\r

  \  let msCollection = UIS[idCollection];\r

  \  msCard.hand = idCollection;\r

  \  msCard.collectionKey = msCollection.collectionKey;\r

  \  if (nundef(msCollection.numCards)) {\r

  \    msCollection.numCards = 1;\r

  \    msCollection.dx = 0;\r

  \    msCollection.cards = [oid];\r

  \  } else {\r

  \    msCollection.numCards += 1;\r

  \    msCollection.cards.push(oid);\r

  \  }\r

  \  let n = msCollection.numCards;\r

  \  msCard.zIndex = n;\r

  \  msCard.attach('hand');\r

  \  let hCard = msCard.elem.offsetHeight;\r

  \  let bounds = getBounds(msCard.elem);\r

  \  let hCard1 = bounds.height;\r

  \  let hHand = getBounds(msCollection.elem).height;\r

  \  let partHand = msCollection.parts['hand'];\r

  \  if (isdef(partHand)) hHand -= getBounds(partHand, true).y;\r

  \  msCollection.hHand = hHand;\r

  \  let wCard = msCard.elem.offsetWidth;\r

  \  let scale = 1;\r

  \  if (hCard >= hHand) {\r

  \    scale = hHand / hCard;\r

  \    msCard.elem.style.transform = `scale(${scale})`;\r

  \    msCard.elem.style.transformOrigin = '0% 0%';\r

  \  }\r

  \  msCollection.scale = scale;\r

  \  wCard = msCard.elem.offsetWidth;\r

  \  let wReal = wCard * scale;\r

  \  let hReal = hCard * scale;\r

  \  msCollection.wCard = wReal;\r

  \  msCollection.hCard = hReal;\r

  \  repositionCards(msCollection);\r

  }"
addCardToHand: "function addCardToHand(oid, areaName) {\r

  \  let idHandMS = getIdArea(areaName);\r

  \  let idCardMS = getMainId(oid);\r

  \  let mobj = UIS[idCardMS];\r

  \  let msHand = UIS[idHandMS];\r

  \  mobj.hand = idHandMS;\r

  \  if (nundef(msHand.numCards)) {\r

  \    msHand.numCards = 1;\r

  \    msHand.dx = 0;\r

  \    msHand.cards = [oid];\r

  \  } else {\r

  \    msHand.numCards += 1;\r

  \    msHand.cards.push(oid);\r

  \  }\r

  \  let n = msHand.numCards;\r

  \  mobj.zIndex = n;\r

  \  mobj.attach('hand');\r

  \  let hCard = mobj.elem.offsetHeight;\r

  \  let bounds = getBounds(mobj.elem);\r

  \  let hCard1 = bounds.height;\r

  \  let hHand = getBounds(msHand.elem).height;\r

  \  let partHand = msHand.parts['hand'];\r

  \  if (isdef(partHand)) hHand -= getBounds(partHand, true).y;\r

  \  msHand.hHand = hHand;\r

  \  let wCard = mobj.elem.offsetWidth;\r

  \  let scale = 1;\r

  \  if (hCard >= hHand) {\r

  \    scale = hHand / hCard;\r

  \    mobj.elem.style.transform = `scale(${scale})`;\r

  \    mobj.elem.style.transformOrigin = '0% 0%';\r

  \  }\r

  \  msHand.scale = scale;\r

  \  wCard = mobj.elem.offsetWidth;\r

  \  let wReal = wCard * scale;\r

  \  let hReal = hCard * scale;\r

  \  msHand.wCard = wReal;\r

  \  msHand.hCard = hReal;\r

  \  _repositionCards(msHand);\r

  }"
addCatsToKeys: "function addCatsToKeys() {\r

  \  console.log('Syms', Syms);\r

  \  for (const ksk in KeySets) {\r

  \    for (const k of KeySets[ksk]) {\r

  \      let info = Syms[k]\r

  \      lookupAddIfToList(info, ['cats'], ksk);\r

  \    }\r

  \  }\r

  \  downloadAsYaml(Syms, 'symsWithCats');\r

  }"
addChat: function addChat(msg) { addListItem('chatEvent', msg); }
addClass: function addClass(el, clName) { if (!el) return; el.classList.add(clName); }
addClassInfo: "function addClassInfo(ui, n) {\r

  \  if (isdef(ui.firstChild)) {\r

  \    let cl1 = Array.from(ui.firstChild.classList); cl1 = isEmpty(cl1) ? cl1
  : cl1.join(',');\r

  \    let cl = Array.from(ui.classList); cl = isEmpty(cl) ? cl :
  cl.join(',');\r

  \    n.class = { pre: cl1, top: cl };\r

  \  } else {\r

  \    let cl = Array.from(ui.classList); cl = isEmpty(cl) ? cl :
  cl.join(',');\r

  \    n.class = cl;\r

  \  }\r

  }"
addColorPicker: "function addColorPicker(c) {\r

  \  let form = mBy('myform');\r

  \  let img = mBy('imgPreview');\r

  \  let picker = mColorPickerBehavior(colorFrom(c), img, form,\r

  \    (a) => { DA.newColor = a; DA.colorChanged = true; },\r

  \    { w: 322, h: 45, bg: 'green', rounding: 6, margin: 'auto', align:
  'center' });\r

  \  if (is_online()) {\r

  \    img.ondragover = img.ondrop = img.ondragleave = handle_drag_and_drop;\r

  \  }\r

  \  mBy('img_dd_instruction').style.opacity = is_online() ? 1 : 0;\r

  \  img.onload = null;\r

  }"
addColumn: "function addColumn(dParent, o, keys) {\r

  \  console.log('addColumn', dParent)\r

  \  let d = getFloatLeftDiv();\r

  \  console.log('d', d)\r

  \  let t = tableElem(o, keys);\r

  \  d.appendChild(t);\r

  \  dParent.appendChild(d);\r

  \  dParent.style.backgroundColor = 'dimgray';\r

  \  return [d, t];\r

  }"
addComment: function addComment(s, dParent) { return mMultiline(s, 2, dParent); }
addCSSClass: "function addCSSClass(className, text) {\r

  \  sheet.insertRule('.' + className + ' { ' + text + ' }', 0);\r

  }"
addDDSource: "function addDDSource(source, isCopy = true, clearTarget = false)
  {\r

  \  DDInfo.sources.push(source);\r

  \  let d = iDiv(source);\r

  \  d.onmousedown = (ev) => ddStart(ev, source, isCopy, clearTarget);\r

  }"
addDDTarget: "function addDDTarget(target, isCopy = true, clearTarget = false)
  {\r

  \  DDInfo.targets.push(target);\r

  \  target.isCopy = isCopy;\r

  \  target.clearTarget = clearTarget;\r

  }"
addDeckTo: "function addDeckTo(deck, domel, id, flip = false, drag = false) {\r

  \  if (nundef(id)) id = getUID();\r

  \  clearElement(domel);\r

  \  let mobj = new DeckMS(id, deck);\r

  \  mobj.attachTo(domel);\r

  \  if (flip) enableFlipForDeck(mobj.o);\r

  \  if (drag) enableDragForDeck(mobj.o);\r

  \  return mobj;\r

  }"
addDiv: "function addDiv(dParent, { html, w = '100%', h = '100%', bg, fg,
  border, rounding, margin, padding, float, position, x, y, textAlign, fontSize
  }) {\r

  \  return addDivU({ dParent: dParent, html: html, w: w, h: h, bg: bg, fg:
  fg, border: border, rounding: rounding, margin: margin, padding: padding,
  float: float, position: position, x: x, y: y, textAlign: textAlign, fz:
  fontSize });\r

  }"
addDivClass: "function addDivClass(dParent, id, className) { return addDivU({
  dParent: dParent, id: id, className: className }); }"
addDivFill: "function addDivFill(id, dParent) { return addDivU({ dParent:
  dParent, id: id, w: '100%', h: '100%' }); }"
addDivFullClass: "function addDivFullClass(dParent, id, className) { return
  addDivU({ dParent: dParent, id: id, w: '100%', h: '100%', className: className
  }); }"
addDivPos: "function addDivPos(dParent, x, y, w, h, { gap, bg, fg, border,
  rounding, textAlign, fontSize } = {}) {\r

  \  if (gap > 0) {\r

  \    let wCont = dParent.offsetWidth;\r

  \    let isRight = x + w >= wCont;\r

  \    let hCont = dParent.offsetHeight;\r

  \    let isBottom = y + h >= hCont;\r

  \    x += gap;\r

  \    y += gap;\r

  \    w -= (isRight ? 2 : 1) * gap;\r

  \    h -= (isBottom ? 2 : 1) * gap;\r

  \  }\r

  \  return addDiv(dParent, { position: 'absolute', x: x, y: y, w: w, h: h,
  bg, fg, border, rounding, textAlign, fontSize });\r

  }"
addDivPosGap: "function addDivPosGap(dParent, x, y, w, h, { gap, bg, fg, border,
  rounding, textAlign, fontSize, position = 'absolute' } = {}) {\r

  \  return addDivU({ dParent: dParent, x: x, y: y, w: w, h: h, gap: gap, bg:
  bg, fg: fg, border: border, textAlign: textAlign, fz: fontSize, position:
  position });\r

  }"
addDivPosTo: "function addDivPosTo(dParent, x = 0, y = 0, w = 100, h = 100, unit
  = '%', bg = 'blue', position = 'absolute') {\r

  \  return addDivU({ dParent: dParent, x: x, y: y, w: w, h: h, unit: unit,
  position: position, bg: bg });\r

  }"
addDivTo: "function addDivTo(dParent, w = 100, h = 100, unit = '%', bg = 'blue')
  { return addDivU({ dParent: dParent, w: w, h: h, unit: unit, bg: bg }); }"
addDivToBody: "function addDivToBody(w = 100, h = 100, unit = '%', bg = 'blue')
  { return addDivU({ dParent: document.body, w: w, h: h, unit: unit, bg: bg });
  }"
addDivU: "function addDivU({ id, dParent, w, h, unit, fg, bg, position, x, y,
  html, className, styleStr, border, rounding, gap, margin, padding, float,
  textAlign, fz }) {\r

  \  let d1 = document.createElement('div');\r

  \  if (isdef(dParent)) dParent.appendChild(d1); else dParent = null;\r

  \  if (isdef(id)) d1.id = id;\r

  \  if (isdef(fg)) d1.style.setProperty('color', fg);\r

  \  if (isdef(bg)) d1.style.setProperty('background-color', bg);\r

  \  if (isdef(html)) d1.innerHTML = html;\r

  \  if (gap > 0 && (unit == '%' || dParent && isdef(dParent.offsetWidth) &&
  isdef(dParent.offsetHeight))) {\r

  \    let wCont = unit == '%' ? 100 : dParent.offsetWidth;\r

  \    let isRight = x + w >= wCont;\r

  \    let hCont = unit == '%' ? 100 : dParent.offsetHeight;\r

  \    let isBottom = y + h >= hCont;\r

  \    x += gap;\r

  \    y += gap;\r

  \    w -= (isRight ? 2 : 1) * gap;\r

  \    h -= (isBottom ? 2 : 1) * gap;\r

  \  }\r

  \  if (nundef(unit)) unit = '%';\r

  \  if (isdef(w)) d1.style.setProperty('width', makeUnitString(w, unit));\r

  \  if (isdef(h)) d1.style.setProperty('height', makeUnitString(h, unit));\r

  \  if (isdef(x) || isdef(y)) { posXY(d1, dParent, x, y, unit, position); }\r

  \  if (isdef(className)) d1.classList.add(className);\r

  \  if (isdef(styleStr)) d1.style.cssText += styleStr;\r

  \  if (isdef(border)) {\r

  \    d1.style.border = border;\r

  \    if (isdef(rounding)) d1.style.borderRadius = rounding;\r

  \  }\r

  \  if (isdef(margin)) d1.style.setProperty('margin', makeUnitString(margin,
  'px'));\r

  \  if (isdef(padding)) d1.style.setProperty('padding',
  makeUnitString(padding, 'px'));\r

  \  if (float) d1.style.setProperty('float', float);\r

  \  if (textAlign) d1.style.textAlign = textAlign;\r

  \  if (isdef(fz)) d1.style.setProperty('fontSize', makeUnitString(fz,
  'px'));\r

  \  return d1;\r

  }"
addDummy: "function addDummy() {\r

  \  let b = mButton('', null, dTitleRight, { opacity: 0, h: 0, w: 0, padding:
  0, margin: 0, outline: 'none', border: 'none', bg: 'transparent' });\r

  \  b.id = 'dummy';\r

  }"
addEdges: "function addEdges(board, bid, gName, streets) {\r

  \  board.edges = [];\r

  \  board.edgesByStartRowCol = [];\r

  \  for (const fid of board.fields) {\r

  \    let f = EID[fid];\r

  \    let nodelist = Object.values(f.nodes);\r

  \    for (let k = 0; k < nodelist.length; k++) {\r

  \      let n1 = EID[nodelist[k]];\r

  \      let n2 = k == nodelist.length - 1 ? EID[nodelist[0]] : EID[nodelist[k
  + 1]];\r

  \      let smaller = n1;\r

  \      let bigger = n2;\r

  \      if (n1.x > n2.x) {\r

  \        smaller = n2;\r

  \        bigger = n1;\r

  \      } else if (n1.x == n2.x) {\r

  \        if (n1.y > n2.y) {\r

  \          smaller = n2;\r

  \          bigger = n1;\r

  \        }\r

  \      }\r

  \      let xEdge = (smaller.x + bigger.x) / 2;\r

  \      let yEdge = (smaller.y + bigger.y) / 2;\r

  \      let edge = byPos1(xEdge, yEdge);\r

  \      streets.border = 'green';\r

  \      if (!edge) {\r

  \        edge = makeElemY('edge', bid, gName, streets.level, {\r

  \          row: smaller.row,\r

  \          col: smaller.col,\r

  \          x: xEdge,\r

  \          y: yEdge,\r

  \          x1: smaller.x,\r

  \          y1: smaller.y,\r

  \          x2: bigger.x,\r

  \          y2: bigger.y,\r

  \          ipal: streets.ipal,\r

  \          bg: streets.bg,\r

  \          fg: streets.fg,\r

  \          shape: streets.shape,\r

  \          border: streets.border,\r

  \          thickness: streets.thickness\r

  \        });\r

  \        board.edges.push(edge.id);\r

  \        if (!(edge.row in board.edgesByStartRowCol))
  board.edgesByStartRowCol[edge.row] = [];\r

  \        board.edgesByStartRowCol[edge.row][edge.col] = edge.id;\r

  \        edge.source = smaller.id;\r

  \        edge.dest = bigger.id;\r

  \        smaller.edges.push(edge.id);\r

  \        bigger.edges.push(edge.id);\r

  \        edge.nodes = [smaller.id, bigger.id];\r

  \        edge.fields = [];\r

  \      }\r

  \      f.edges.push(edge.id);\r

  \      edge.fields.push(f.id);\r

  \    }\r

  \  }\r

  }"
addEndHandler: "function addEndHandler() {\r

  \  recognition.onend = function () {\r

  \    if (!isGameWithSpeechRecognition()) return;\r

  \    isRunning = false;\r

  \    if (recordCallback) {\r

  \      if (RecogOutput) console.log('* recog.onend: recordCallback
  NON_EMPTY!', recordCallback);\r

  \      recordCallback();\r

  \      return;\r

  \    }\r

  \    MicrophoneHide();\r

  \    if (hasGotResult && !hasGotFinalResult) {\r

  \      if (RecogOutput) console.log('* recog.onend: EVAL interim',
  interim_transcript);\r

  \      setSpeechResult(interim_transcript, interim_confidence,
  interim_confidence2);\r

  \      evaluate(interim_transcript);\r

  \    } else if (!hasGotResult) {\r

  \      if (RecogOutput) console.log('* recog.onend: never got result!!!');\r

  \      if (OnMicrophoneProblem) OnMicrophoneProblem();\r

  \      else evaluate('');\r

  \    } else {\r

  \      if (RecogOutput) console.log('* recog.onend final DONE!',
  final_transcript);\r

  \    }\r

  \  };\r

  }"
AddEnPassantMove: "function AddEnPassantMove(move) {\r

  \  brd_moveList[brd_moveListStart[brd_ply + 1]] = move;\r

  \  brd_moveScores[brd_moveListStart[brd_ply + 1]++] = 105 + 1000000;\r

  }"
addErrorHandler: "function addErrorHandler() {\r

  \  recognition.onerror = function (event) {\r

  \    if (!isGameWithSpeechRecognition()) return;\r

  \    isRunning = false;\r

  \    if (RecogOutput) console.error(event);\r

  \    if (OnMicrophoneProblem) OnMicrophoneProblem();\r

  \    if (recordCallback) recordCallback();\r

  \  };\r

  }"
addFilterHighlight: function addFilterHighlight(ms) { ms.highC('green'); }
addFlexGridDiv: "function addFlexGridDiv(dParent) { return addDivU({ dParent:
  dParent, className: 'flex-grid' }); }"
addfork: "function addfork(root) {\r

  \  for (const a of [PI / 4, -PI / 6]) {\r

  \    let b = root.branch(a);\r

  \    root.children.push(b);\r

  \    tree.push(b);\r

  \  }\r

  \  root.finished = true;\r

  }"
addGameViewHandlers: function addGameViewHandlers() { addEventListener('keyup',
  keyUpHandler); addEventListener('keydown', keyDownHandler); }
addGArea: "function addGArea(gName, areaName = 'a_d_game', x = 0, y = 0,
  clearFirst = true) {\r

  \  let d = document.getElementById(areaName);\r

  \  if (clearFirst) {\r

  \    clearElement(d);\r

  \  }\r

  \  console.log(d, d.childNodes, d.firstChild);\r

  \  let container = d.firstChild ? d.firstChild : addDiv(d, { position:
  'relative' });\r

  \  let w = container.offsetWidth;\r

  \  let h = container.offsetHeight;\r

  \  console.log('w', w, 'h', h);\r

  \  console.log(container);\r

  \  let dNew = addDiv(container, { position: 'absolute', x: x, y: y, w: w, h:
  h, bg: 'slategray', gap: 0 });\r

  \  let g = addSvgg(dNew, gName);\r

  \  g.classList.add('gCentered');\r

  \  return dNew;\r

  }"
addGFill: "function addGFill(id, dParent) {\r

  \  let res = addSvgg(dParent, id, { originInCenter: true });\r

  \  return res;\r

  }"
addGrid9To: "function addGrid9To(d, centerW, centerH, gap = '2px') {\r

  \  return makeGrid9(d, centerW, centerH, gap);\r

  }"
addGridTo: "function addGridTo(d, rows, cols, gap = '2px') {\r

  \  console.log(d, rows, cols, gap);\r

  \  d.classList.add('gridContainer');\r

  \  d.style.setProperty('--grid-rows', rows);\r

  \  d.style.setProperty('--grid-cols', cols);\r

  \  d.style.setProperty('--grid-gap', gap);\r

  \  let cells = [];\r

  \  for (let r = 0; r < rows; r++) {\r

  \    cells[r] = [];\r

  \    for (let c = 0; c < cols; c++) {\r

  \      let cell = document.createElement(\"div\");\r

  \      console.log(cell)\r

  \      cell.innerText = (r + ',' + c);\r

  \      d.appendChild(cell).className = \"grid-item\";\r

  \      cells[r].push(cell);\r

  \    }\r

  \  }\r

  \  return cells;\r

  }"
addGridToBody: "function addGridToBody(rows, cols) {\r

  \  let d = addDivToBody();\r

  \  d.classList.add('gridContainer');\r

  \  makeRows(d, rows, cols);\r

  \  return d;\r

  }"
addGroupInfo: "async function addGroupInfo() {\r

  \  let symbolDict = SymbolDict = await localOrRoute('symbolDict',
  '../assets/symbolDict.yaml');\r

  \  let sInfo = SInfo = await localOrRoute('sInfo',
  '../assets/s_info.yaml');\r

  \  for (const k in Syms) {\r

  \    let old = symbolDict[k];\r

  \    let info = sInfo[k];\r

  \    if (isdef(old) && isdef(old.group)) {\r

  \      Syms[k].group = old.group;\r

  \      Syms[k].subgroup = old.subgroups;\r

  \    } else {\r

  \      Syms[k].subgroup = info.subgroup;\r

  \      Syms[k].group = info.group;\r

  \    }\r

  \  }\r

  \  for (const k in Syms) {\r

  \    if (nundef(Syms[k].group) || nundef(Syms[k].subgroup)) {\r

  \      console.log('IMMER NOCH KEIN GROUP INFO!!!!', k, Syms[k], sInfo[k],
  symbolDict[k]);\r

  \    }\r

  \  }\r

  }"
AddGUIPiece: "function AddGUIPiece(sq, pce) {\r

  \  var rank = RanksBrd[sq];\r

  \  var file = FilesBrd[sq];\r

  \  var rankName = \"rank\" + (rank + 1);\r

  \  var fileName = \"file\" + (file + 1);\r

  \  pieceFileName = \"../base/assets/images/chess/\" +
  SideChar[PieceCol[pce]] + PceChar[pce].toUpperCase() + \".png\";\r

  \  imageString = \"<image src=\\\"\" + pieceFileName + \"\\\"
  class=\\\"Piece clickElement \" + rankName + \" \" + fileName + \"\\\"/>\";\r

  \  $(\"#ChessBoard\").append(imageString);\r

  }"
addHandTo: "function addHandTo(d) {\r\n}"
addIdentityInformation: "function addIdentityInformation() {\r

  \  if (nundef(S.gameConfig)) S.gameConfig = {};\r

  \  let gc = S.gameConfig;\r

  \  gc.username = USERNAME;\r

  \  let myPlayers = [];\r

  \  if (gc.gameConfig.players) {\r

  \    gc.gameStarter = gc.players[0];\r

  \    for (const pl of gc.players) {\r

  \      if (startsWith(pl.username, USERNAME)) myPlayers.push(pl);\r

  \    }\r

  \  }\r

  }"
addIf: function addIf(arr, el) { if (!arr.includes(el)) arr.push(el); }
addIf_dep: "function addIf_dep(el, arr) {\r

  \  if (!arr.includes(el)) arr.push(el);\r

  }"
addIf_depComma: "function addIf_depComma(csv, arr) {\r

  \  let strings = csv.split(',');\r

  \  for (const s of strings) {\r

  \    addIf_dep(s.trim(), arr);\r

  \  }\r

  }"
addIf_depDict: "function addIf_depDict(key, val, dict) {\r

  \  if (!(key in dict)) {\r

  \    dict[key] = [val];\r

  \  } else {\r

  \    addIf_dep(val, dict[key]);\r

  \  }\r

  }"
addIf_depKeys: "function addIf_depKeys(dict, keys, val) {\r

  \  let d = dict;\r

  \  keysCopy = jsCopy(keys);\r

  \  let lastKey = keysCopy.pop();\r

  \  for (const k of keysCopy) {\r

  \    if (!(k in d)) {\r

  \      d[k] = {};\r

  \    }\r

  \    d = d[k];\r

  \  }\r

  \  if (!(lastKey in d)) d[lastKey] = val;\r

  \  return d[lastKey];\r

  }"
addIfComma: "function addIfComma(csv, arr) {\r

  \  let strings = csv.split(',');\r

  \  for (const s of strings) {\r

  \    addIf_dep(s.trim(), arr);\r

  \  }\r

  }"
addIfDict: "function addIfDict(key, val, dict) {\r

  \  if (!(key in dict)) {\r

  \    dict[key] = [val];\r

  \  } else {\r

  \    addIf_dep(val, dict[key]);\r

  \  }\r

  }"
addIfKeys: "function addIfKeys(dict, keys, val) {\r

  \  let d = dict;\r

  \  keysCopy = jsCopy(keys);\r

  \  let lastKey = keysCopy.pop();\r

  \  for (const k of keysCopy) {\r

  \    if (!(k in d)) {\r

  \      d[k] = {};\r

  \    }\r

  \    d = d[k];\r

  \  }\r

  \  if (!(lastKey in d)) d[lastKey] = val;\r

  \  return d[lastKey];\r

  }"
addItem: "function addItem(owner, key, val) {\r

  \  let o = owner[key] = val;\r

  \  Items.push(o);\r

  }"
addKeydown: function addKeydown(k, f) { if (nundef(DA.keydown)) DA.keydown = {};
  DA.keydown[k] = f; }
addKeys: function addKeys(ofrom, oto) { for (const k in ofrom) if
  (nundef(oto[k])) oto[k] = ofrom[k]; return oto; }
addKeyup: "function addKeyup(k, f) {\r

  \  if (nundef(DA.keyup)) DA.keyup = {};\r

  \  DA.keyup[k] = f;\r

  }"
addLabel: "function addLabel(item, label, styles) {\r

  \  item.label = label;\r

  \  let div = iDiv(item);\r

  \  if (isdef(item.live.dLabel)) mRemove(item.live.dLabel);\r

  \  let dLabel = item.live.dLabel = mDiv(div, styles, null, label);\r

  \  mCenterFlex(div, true, true);\r

  \  mStyleX(div, { 'vertical-align': 'top' });\r

  \  return dLabel;\r

  }"
addLabel1: "function addLabel1(item, label, replaceOld = true) {\r

  \  let div = iDiv(item);\r

  \  mStyleX(div, { 'vertical-align': 'top' });\r

  \  if (isdef(item.live.dLabel)) mRemove(item.live.dLabel);\r

  \  let dLabel = item.live.dLabel = mDiv(div, { fz: 20 }, null, label);\r

  \  return div;\r

  }"
addLabels: "function addLabels(items, lang = 'E', luc = 'c') {\r

  \  for (const item of items) {\r

  \    let label = item.info[lang];\r

  \    item.label = luc == 'c' ? toNoun(label) : luc == 'l' ? label :
  label.toUpperCase();\r

  \  }\r

  }"
addlayer: "function addlayer() {\r

  \  if (tree.length == 0) {\r

  \    let a = createVector(width / 2, height);\r

  \    let b = createVector(width / 2, height - 100);\r

  \    let root = tree[0] = new Branch(a, b);\r

  \  } else if (numlayers === 6) {\r

  \    for (let i = tree.length - 1; i >= 0; i--) {\r

  \      if (!tree[i].finished) addleaf(tree[i]);\r

  \    }\r

  \    clearInterval(interval_id);\r

  \  } else {\r

  \    for (let i = tree.length - 1; i >= 0; i--) {\r

  \      if (!tree[i].finished) addfork(tree[i]);\r

  \    }\r

  \    numlayers++;\r

  \  }\r

  }"
addleaf: "function addleaf(root) {\r

  \  let leaf = { current: root.get_healthy_end().copy(), orig:
  root.get_healthy_end().copy() };\r

  \  leaves.push(leaf);\r

  \  root.finished = true;\r

  }"
addListItem: "function addListItem(idParent, text) {\r

  \  const parent = document.getElementById(idParent);\r

  \  const el = document.createElement('li');\r

  \  el.innerHTML = text;\r

  \  parent.appendChild(el);\r

  \  parent.scrollTop = el.offsetTop;\r

  }"
addLobbyViewHandlers: "function addLobbyViewHandlers() {\r

  \  document.getElementById('bLogout').addEventListener('click',
  onClickLogout);\r

  \  if (USE_SOCKETIO)
  document.getElementById('chat_form').addEventListener('submit',
  onChatSubmitted);\r

  \  document.getElementById('bJoinGame').addEventListener('click',
  onClickJoinGameLobby);\r

  \  document.getElementById('bCreateGame').addEventListener('click',
  onClickCreateGameLobby);\r

  \  document.getElementById('bResumeGame').addEventListener('click',
  onClickResumeGameLobby);\r

  }"
addLoginViewHandlers: function addLoginViewHandlers() {
  document.getElementById('login_form').addEventListener('submit',
  onLoginSubmitted); }
addManual00Node: "function addManual00Node(nParent, R, funcContent) {\r

  \  let uidParent = nParent ? nParent.uid : null;\r

  \  let nChild = { uidParent: uidParent, idUiParent: uidParent, uid:
  getUID(), type: 'manual00', content: randomLetter() };\r

  \  nChild.content = isdef(funcContent) ? funcContent(nChild) : nChild.uid;\r

  \  if (nParent) {\r

  \    if (nundef(nParent.children)) nParent.children = [];\r

  \    nParent.children.push(nChild.uid);\r

  \  } else {\r

  \  }\r

  \  R.rNodes[nChild.uid] = nChild;\r

  \  return nChild;\r

  }"
addManualCircle: "function addManualCircle(g) {\r

  \  let circle = new MMS({ parent: g, type: 'ellipse' }).attach();\r

  \  let r = document.createElementNS('http://www.w3.org/2000/svg',
  'ellipse');\r

  \  r.setAttribute('rx', 35);\r

  \  r.setAttribute('ry', 45);\r

  \  r.setAttribute('cx', 0);\r

  \  r.setAttribute('cy', 0);\r

  \  r.setAttribute('fill', 'yellow');\r

  \  g.elem.appendChild(r);\r

  \  return r;\r

  }"
addMessage: "function addMessage(msg) {\r

  \  setMessage(msg);\r

  \  addListItem('events', msg);\r

  }"
addModuleExports: "function addModuleExports(list) {\r

  \  let txt =\r

  \    `if (this && typeof module == \"object\" && module.exports && this ===
  module.exports) {\\r\\n`\r

  \    + `  module.exports = {\\r\\n`;\r

  \  for (const s of list) {\r

  \    txt += `    ${s},\\r\\n`\r

  \  };\r

  \  txt += '  }\\r\\n}';\r

  \  return txt;\r

  }"
addMonthToDate: "function addMonthToDate(date, months) {\r

  \  let d = new Date(date);\r

  \  d.setMonth(d.getMonth() + months);\r

  \  return d;\r

  }"
addMSContainer: "function addMSContainer(dParent, gid, { w = '100%', h = '100%',
  margin = 'auto' }) {\r

  \  let d1 = addDiv(dParent, { w: w, h: h, margin: margin });\r

  \  d1.style.position = 'relative';\r

  \  let g1 = addSvgg(d1, gid);\r

  \  return { div: d1, g: g1 };\r

  }"
addNewlyCreatedServerObjects: "function addNewlyCreatedServerObjects(sdata, R)
  {\r

  \  for (const oid in sdata) { R.addObject(oid, sdata[oid]);
  R.addRForObject(oid); }\r

  \  for (const oid in sdata) {\r

  \    let o = sdata[oid];\r

  \    if (isdef(o.loc)) { continue; }\r

  \    let success = einhaengen(oid, o, R);\r

  \  }\r

  \  sieveLocOids(R);\r

  }"
addNewObjectToSourcesAndPools: "function addNewObjectToSourcesAndPools(o, R) {\r

  \  let sp = R.getSpec();\r

  \  let missing = [];\r

  \  for (const k in sp) {\r

  \    let n = sp[k];\r

  \    if (nundef(n._source)) {\r

  \      n.source = R.defSource;\r

  \      pools[k] = n.pool = makePool(n.cond, n.source, R);\r

  \      n.pool.map(x => R.addR(x, k));\r

  \    } else missing.push(k);\r

  \  }\r

  \  while (missing.length > 0) {\r

  \    let done = null;\r

  \    for (const k of missing) {\r

  \      let n = sp[k];\r

  \      let sourceNode = sp[n._source];\r

  \      if (nundef(sourceNode.pool)) continue;\r

  \      n.source = sourceNode.pool;\r

  \      pools[k] = n.pool = makePool(n.cond, n.source, R);\r

  \      n.pool.map(x => R.addR(x, k));\r

  \      done = k;\r

  \      break;\r

  \    }\r

  \    removeInPlace(missing, done);\r

  \  }\r

  \  return [sp, pools];\r

  }"
addNewServerObjectToRsg: "function addNewServerObjectToRsg(oid, o, R,
  skipEinhaengen = false) {\r

  \  R.addObject(oid, o);\r

  \  addRForObject(oid, R);\r

  \  if (skipEinhaengen) { return; } else { einhaengen(oid, o, R); }\r

  }"
addNodes: "function addNodes(board, bid, gName, cities) {\r

  \  let wNode = board.hField / 8;\r

  \  let hNode = board.hField / 8;\r

  \  board.vertices = correctPolys(board.fields.map(fid => EID[fid].poly),
  wNode, board.hField / 12);\r

  \  board.nodes = [];\r

  \  board.nodesByRowCol = [];\r

  \  for (const fid of board.fields) {\r

  \    let f = EID[fid];\r

  \    let poly = f.poly;\r

  \    for (const pt of poly) {\r

  \      let node = byPos1(pt.x, pt.y, x => x.type == 'node');\r

  \      if (!node) {\r

  \        node = makeElemY('node', bid, gName, cities.level, {\r

  \          row: pt.y < f.y ? f.row - 1 : f.row,\r

  \          col: pt.x < f.x ? f.col - 1 : f.col,\r

  \          w: wNode,\r

  \          h: hNode,\r

  \          x: pt.x,\r

  \          y: pt.y,\r

  \          ipal: cities.ipal,\r

  \          bg: cities.bg,\r

  \          fg: cities.fg,\r

  \          shape: cities.shape,\r

  \          border: cities.border,\r

  \          thickness: cities.thickness\r

  \        });\r

  \        board.nodes.push(node.id);\r

  \        if (!(node.row in board.nodesByRowCol))
  board.nodesByRowCol[node.row] = [];\r

  \        board.nodesByRowCol[node.row][node.col] = node.id;\r

  \        node.edges = [];\r

  \        node.fields = [];\r

  \        node.nodes = [];\r

  \      }\r

  \      node.fields.push(fid);\r

  \      f.nodes.push(node.id);\r

  \    }\r

  \  }\r

  }"
addNthInputElement: "function addNthInputElement(dParent, n) {\r

  \  mLinebreak(dParent, 10);\r

  \  let d = mDiv(dParent);\r

  \  let dInp = mCreate('input');\r

  \  dInp.type = \"text\"; dInp.autocomplete = \"off\";\r

  \  dInp.style.margin = '10px;'\r

  \  dInp.id = 'inputBox' + n;\r

  \  dInp.style.fontSize = '20pt';\r

  \  mAppend(d, dInp);\r

  \  return dInp;\r

  }"
addOidByLocProperty: "function addOidByLocProperty(oid, key, R) {\r

  \  let o = R.getO(oid);\r

  \  let oidParent = o.loc;\r

  \  let parents = R.oid2uids[oidParent];\r

  \  if (isEmpty(parents)) { return []; }\r

  \  let topUids = [];\r

  \  for (const uidParent of parents) {\r

  \    if (parentHasThisChildAlready(uidParent, oid) ||
  !parentHasChannelForThisOid(R.rNodes[uidParent], oid)) continue;\r

  \    let n1 = instantOidKey(oid, key, uidParent, R);\r

  \    topUids.push({ uid: n1.uid, uidParent: uidParent });\r

  \  }\r

  \  return topUids;\r

  }"
addOidByParentKeyLocation: "function addOidByParentKeyLocation(oid, key, R) {\r

  \  let parents = R.Locations[key];\r

  \  if (nundef(parents)) {\r

  \    if (oid == '146') console.log('not added!!!', oid, key)\r

  \    return;\r

  \  }\r

  \  let topUids = [];\r

  \  for (const uidParent of parents) {\r

  \    if (parentHasThisChildAlready(uidParent, oid)) continue;\r

  \    let n1 = instantOidKey(oid, key, uidParent, R);\r

  \    topUids.push({ uid: n1.uid, uidParent: uidParent });\r

  \  }\r

  \  return topUids;\r

  }"
addOnelineVars: "function addOnelineVars(superdi, o) {\r

  \  let [code, type] = [o.code, o.type];\r

  \  let crn = (code.match(/\\r\\n/g) || []).length;\r

  \  let oneliner = crn == 1;\r

  \  //let specialword = 'Counter'; //'PORT';\r

  \  let signal = false;\r

  \  if (oneliner && type == 'var' && code.includes(',') &&
  !code.includes('[') && !code.includes('{ ')) {\r

  \    let othervars = stringAfter(code, 'var').trim().split(',');\r

  \    let varkeys = othervars.map(x => firstWord(x, true));\r

  \    assertion(varkeys[0] == o.name, `WTF?!?! ${varkeys[0]} ###
  ${o.name}?!?!?!?!????????????? addOnelinerVars`);\r

  \    o.code = stringBefore(code, ',') + ';'\r

  \    othervars.shift();\r

  \    if (signal) console.log('othervars', othervars, varkeys)\r

  \    for (const vcode of othervars) {\r

  \      let o1 = jsCopy(o);\r

  \      let code1 = vcode.trim();\r

  \      if (!code1.endsWith(';')) code1 += ';';\r

  \      if (signal) console.log('code1', code1);\r

  \      let k1 = o1.name = firstWord(code1, true);\r

  \      if (signal) console.log('k1', k1);\r

  \      o1.code = 'var ' + code1; // + code1.endsWith(';')?'':';';
  //'\\r\\n':';\\r\\n';\r

  \      o1.sig = `var ${k1};`;\r

  \      if (isNumber(k1)) { continue; }\r

  \      if (signal) console.log('trage ein', k1, o1)\r

  \      lookupSetOverride(superdi, [type, k1], o1);\r

  \    }\r

  \  }\r

  }"
addonFeatureInit: "function addonFeatureInit() {\r

  \  ADS = null;\r

  \  if (USE_ADDONS == true) {\r

  \    ADS = jsCopy(lookup(DB, ['addons']));\r

  \    let di = {\r

  \      aPasscode: APasscode, aAddress: AAddress, aPassword: APassword,\r

  \      aExercise: APasscode, aMeditation: APasscode,\r

  \    };\r

  \    for (const k in ADS) { ADS[k].cl = di[k]; }\r

  \  }\r

  }"
addPanel: "function addPanel(areaName, oid) {\r

  \  let id = getDynId(areaName, oid);\r

  \  let color = randomColor();\r

  \  let parent = mBy(areaName);\r

  \  let ui = mDiv100(parent); ui.id = id; mColor(ui, color);\r

  \  let n = { type: 'panel', id: id, color: color, ui: ui };\r

  \  AREAS[areaName].panels.push(n);\r

  \  addAREA(id, n);\r

  }"
addPara: "function addPara(div, s, margin = '0px', fontSize = '10px', color =
  'green') {\r

  \  let p = getPara(s);\r

  \  div.appendChild(p);\r

  \  return p;\r

  }"
addPara_tnt: "function addPara_tnt(div, s, margin = '0px', fontSize = '10px',
  color = 'green') {\r

  \  let p = document.createElement('p');\r

  \  p.id = uidHelpers();\r

  \  div.appendChild(p);\r

  \  $(p.id).css('background-color', 'violet');\r

  \  p.textContent = s;\r

  \  return p;\r

  }"
addPeepToCrowd: "function addPeepToCrowd() {\r

  \  const peep = removeRandomFromArray(availablePeeps)\r

  \  const walk = getRandomFromArray(walks)({\r

  \    peep,\r

  \    props: resetPeep({\r

  \      peep,\r

  \      stage,\r

  \    })\r

  \  }).eventCallback('onComplete', () => {\r

  \    removePeepFromCrowd(peep)\r

  \    addPeepToCrowd()\r

  \  })\r

  \  peep.walk = walk\r

  \  crowd.push(peep)\r

  \  crowd.sort((a, b) => a.anchorY - b.anchorY)\r

  \  return peep\r

  }"
addPic: "function addPic(item, key) {\r

  \  let div = item.div;\r

  \  let newItem = getPic(key, item.sz, item.bg, item.label);\r

  \  clearElement(div);\r

  \  mAppend(div, newItem.div.children[0]);\r

  \  mAppend(div, newItem.div.children[0]);\r

  \  item.pic = newItem.pic;\r

  \  item.text = newItem.text;\r

  }"
addPicto: "function addPicto(IdBoard, key, sz, x, y) {\r

  \  let mobj = makeDrawingElement(getUID(), 'board');\r

  \  let ch;\r

  \  try {\r

  \    ch = iconChars.get(key);\r

  \    if (!ch) {\r

  \      key = iconChars.getRandomKey();\r

  \      console.log(key)\r

  \      ch = iconChars.get(key);\r

  \    }\r

  \  } catch {\r

  \    ch = iconChars[key];\r

  \  }\r

  \  console.log('in addPicto got key', key, ch);\r

  \  mobj._pictoFromChar(ch, x, y, sz, sz, randomColor());\r

  \  mobj.attach();\r

  }"
addPicto_dep: "function addPicto_dep(IdBoard, key, sz, x, y) {\r

  \  if (!(key in iconChars)) key = 'crow';\r

  \  console.log('found key:', key);\r

  \  let mobj = makeDrawingElement(getUID(), 'board');\r

  \  mobj._picto(key, x, y, sz, sz, randomColor());\r

  \  mobj.attach();\r

  }"
addPictoDiv: "function addPictoDiv(key, area, color = 'blue', w = 50, h = 0) {\r

  \  let d = pictoDiv(key, color, w, h ? h : w);\r

  \  mAppend(area, d);\r

  \  return d;\r

  }"
addPictoFromChar: "function addPictoFromChar(IdBoard, ch, sz, x, y) {\r

  \  let mobj = makeDrawingElement(getUID(), 'board');\r

  \  mobj._pictoFromChar(ch, x, y, sz, sz, randomColor());\r

  \  mobj.attach();\r

  }"
AddPiece: "function AddPiece(sq, pce) {\r

  \  var col = PieceCol[pce];\r

  \  HASH_PCE(pce, sq);\r

  \  brd_pieces[sq] = pce;\r

  \  brd_material[col] += PieceVal[pce];\r

  \  brd_pList[PCEINDEX(pce, brd_pceNum[pce])] = sq;\r

  \  brd_pceNum[pce]++;\r

  }"
addPlayer: "function addPlayer(playerId, callback) {\r

  \  let username = USERNAME;\r

  \  if (nundef(S.plAddedByMe)) S.plAddedByMe = {};\r

  \  else {\r

  \    let up = S.plAddedByMe;\r

  \    let unames = Object.values(up);\r

  \    let plids = Object.keys(up);\r

  \    let i = plids.length;\r

  \    username = i == 0 ? USERNAME : USERNAME + i;\r

  \  }\r

  \  S.plAddedByMe[playerId] = username;\r

  \  pageHeaderAddPlayer(username, playerId,
  inferPlayerColorFromNameOrInit(playerId,
  S.gameInfo.player_names.indexOf(playerId)));\r

  \  let route = '/add/player/' + username + '/' + playerId;
  _sendRouteJS(route, callback);\r

  }"
AddQuietMove: "function AddQuietMove(move) {\r

  \  brd_moveList[brd_moveListStart[brd_ply + 1]] = move;\r

  \  if (brd_searchKillers[brd_ply] == move) {\r

  \    brd_moveScores[brd_moveListStart[brd_ply + 1]] = 900000;\r

  \  } else if (brd_searchKillers[MAXDEPTH + brd_ply] == move) {\r

  \    brd_moveScores[brd_moveListStart[brd_ply + 1]] = 800000;\r

  \  } else {\r

  \    brd_moveScores[brd_moveListStart[brd_ply + 1]] =
  brd_searchHistory[brd_pieces[FROMSQ(move)] * BRD_SQ_NUM + TOSQ(move)];\r

  \  }\r

  \  brd_moveListStart[brd_ply + 1]++;\r

  }"
addRandomChildren: "function addRandomChildren(n, R) {\r

  \  let num = randomNumber(1, 4);\r

  \  for (let i = 0; i < num; i++) {\r

  \    addManual00Node(n, R);\r

  \  }\r

  \  return n;\r

  }"
addRandomContentToSidebarOrTable: "function addRandomContentToSidebarOrTable()
  {\r

  \  console.log('clicked!');\r

  \  let content = randomContent();\r

  \  console.log('content is type', type, '=>', content);\r

  \  let d = chooseRandom([mBy('dLeft'), mBy('dRight'), dTable]);\r

  \  mAddContentAndMeasureW(dTable, content);\r

  }"
addRelatives: "function addRelatives(id, oid) {\r

  \  if (isdef(oid2ids[oid])) {\r

  \    for (const idOther of oid2ids[oid]) {\r

  \      if (idOther == id) {\r

  \        continue;\r

  \      }\r

  \      listKey(id2uids, id, idOther);\r

  \      listKey(id2uids, idOther, id);\r

  \    }\r

  \  }\r

  }"
addRepeatInfo: "function addRepeatInfo(dPic, iRepeat, wpic) {\r

  \  let szi = Math.max(Math.floor(wpic / 8), 8);\r

  \  dPic.style.position = 'relative';\r

  \  let d2 = mText('' + iRepeat, dPic, { fz: szi, weight: 'bold', fg:
  'contrast', position: 'absolute', left: szi / 2, top: szi / 2 - 2 });\r

  \  return d2;\r

  }"
addResizeInfo: "function addResizeInfo(nBoard, nMember, sizeNeeded) {\r

  \  let szNeeded = Math.max(sizeNeeded.w, sizeNeeded.h);\r

  \  if (nMember.info.size < szNeeded) {\r

  \    let memType = nMember.info.memType;\r

  \    let newSize = Math.max(sizeNeeded.w, sizeNeeded.h);\r

  \    newSize = Math.ceil(newSize / 4);\r

  \    newSize *= 4;\r

  \    if (newSize % 4 != 0) newSize += 4;\r

  \    let key = memType + 's';\r

  \    if (memType == 'edge') {\r

  \      newSize *= 2;\r

  \      memType = 'field';\r

  \      key = 'fields';\r

  \    }\r

  \    if (nundef(nBoard.resizeInfo)) nBoard.resizeInfo = {};\r

  \    if (nundef(nBoard.resizeInfo[key]) || nBoard.resizeInfo[key] < newSize)
  {\r

  \      nBoard.resizeInfo[key] = newSize;\r

  \      nMember.sizeNeeded = { w: newSize, h: newSize }\r

  \      if (key == 'corners') {\r

  \        let fSize = isdef(nBoard.resizeInfo.fields);\r

  \        if (nundef(fSize)) {\r

  \          let f0 = R.uiNodes[nBoard.children[0]];\r

  \          fSize = f0.info.size;\r

  \        }\r

  \        if (fSize < newSize * 3) {\r

  \          nBoard.resizeInfo.fields = newSize * 3;\r

  \        }\r

  \      }\r

  \    }\r

  \    nBoard.adirty = nMember.adirty = true;\r

  \  }\r

  }"
addResultHandler: "function addResultHandler() {\r

  \  recognition.onresult = function (event) {\r

  \    if (!isGameWithSpeechRecognition()) {\r

  \      if (RecogOutput) console.log('*event recog.onresult triggered but not
  a game with speech recog!!!')\r

  \      return;\r

  \    }\r

  \    hasGotResult = true;\r

  \    for (var i = event.resultIndex; i < event.results.length; ++i) {\r

  \      if (event.results[i].isFinal) {\r

  \        final_transcript += event.results[i][0].transcript;\r

  \        final_confidence_sum += event.results[i][0].confidence;\r

  \        final_num += 1;\r

  \      } else {\r

  \        interim_transcript += event.results[i][0].transcript;\r

  \        interim_confidence_sum += event.results[i][0].confidence;\r

  \        interim_num += 1;\r

  \      }\r

  \    }\r

  \    if (isdef(final_transcript) && !isEmpty(final_transcript)) {\r

  \      final_confidence = Goal.confidence =
  event.results[0][0].confidence;\r

  \      final_confidence2 = final_confidence_sum / final_num;\r

  \      hasGotFinalResult = true;\r

  \      final_confidence = event.results[0][0].confidence;\r

  \      recognition.stop();\r

  \      setSpeechResult(final_transcript, final_confidence,
  final_confidence2, true);\r

  \      evaluate(final_transcript);\r

  \    } else if (isdef(interim_transcript) && !isEmpty(interim_transcript))
  {\r

  \      interim_confidence = event.results[0][0].confidence;\r

  \      interim_confidence2 = interim_confidence_sum / interim_num;\r

  \    } else {\r

  \      if (RecogOutput) console.log('* got result but final and interim are
  empty!')\r

  \    }\r

  \  };\r

  }"
addRForObject: "function addRForObject(oid, R) {\r

  \  let o = R.getO(oid);\r

  \  let sp = R.getSpec();\r

  \  for (const k in sp) {\r

  \    let n = sp[k];\r

  \    if (nundef(n.cond)) continue;\r

  \    if (n.cond == 'all' || evalConds(o, n.cond)) { R.addR(oid, k); }\r

  \  }\r

  \  if (isEmpty(R.getR(oid))) {\r

  \    for (const k in sp) {\r

  \      let n = sp[k];\r

  \      if (nundef(n.cond)) continue;\r

  \      let keys = Object.keys(n.cond);\r

  \      if (!keys.includes('no_spec')) continue;\r

  \      let condCopy = jsCopy(n.cond);\r

  \      delete condCopy['no_spec'];\r

  \      if (evalConds(o, condCopy)) { R.addR(oid, k); }\r

  \    }\r

  \  }\r

  \  createPrototypesForOid(oid, o, R);\r

  }"
addRobber: function addRobber(R) { R.initRound(); reAddServerObject('robber'); }
addRowColInfo: "function addRowColInfo(dPic, row, col, szPic) {\r

  \  let szi = Math.max(Math.floor(szPic / 12), 8);\r

  \  console.log(szi);\r

  \  dPic.style.position = 'relative';\r

  \  let d2 = mText('row:' + row, dPic, { fz: szi, color: 'black', position:
  'absolute', left: szi, top: szi / 2 })\r

  \  let d3 = mText('col:' + col, dPic, { fz: szi, color: 'black', position:
  'absolute', left: szi, top: (szi / 2 + szi + 2) })\r

  }"
addRowsCols: "function addRowsCols(items) {\r

  \  let byrc = {};\r

  \  let byx = sortBy(items, 'x');\r

  \  let c = 0, x = byx[0].x;\r

  \  for (let i = 0; i < byx.length; i++) {\r

  \    let item = byx[i];\r

  \    if (!isCloseTo(item.x, x, 2)) { c += 1; x = item.x; }\r

  \    item.col = c;\r

  \  }\r

  \  let byy = sortBy(items, 'y');\r

  \  let r = 0, y = byy[0].y;\r

  \  for (let i = 0; i < byy.length; i++) {\r

  \    let item = byy[i];\r

  \    if (!isCloseTo(item.y, y, 2)) { r += 1; y = item.y; }\r

  \    item.row = r;\r

  \    lookupSet(byrc, [item.row, item.col], item);\r

  \  }\r

  \  return byrc;\r

  }"
addScoreToUserSession: "function addScoreToUserSession() {\r

  \  let sc = { nTotal: Score.nTotal, nCorrect: Score.nCorrect, nCorrect1:
  Score.nCorrect1 };\r

  \  let game = G.id;\r

  \  let level = G.level;\r

  \  let session = U.session;\r

  \  if (nundef(session)) {\r

  \    console.log('THERE WAS NO USER SESSION IN
  _addScoreToUserSession!!!!!!!!!!!!!!!!!!!!!')\r

  \    U.session = {};\r

  \  }\r

  \  let sGame = session[game];\r

  \  if (nundef(sGame)) {\r

  \    sGame = session[game] = jsCopy(sc);\r

  \    sGame.byLevel = {};\r

  \    sGame.byLevel[level] = jsCopy(sc);\r

  \  } else {\r

  \    addByKey(sc, sGame);\r

  \    let byLevel = lookupSet(sGame, ['byLevel', level], {});\r

  \    addByKey(sc, byLevel);\r

  \  }\r

  \  sGame.percentage = Math.round(100 * sGame.nCorrect / sGame.nTotal);\r

  \  saveUser();\r

  }"
addServerObject: "function addServerObject(oid, o, R) {\r

  \  if (!serverData.table) serverData.table = {};\r

  \  serverData.table[oid] = o;\r

  \  sData[oid] = jsCopy(o);\r

  \  addSO(oid, o, R);\r

  \  recAdjustDirtyContainers(R.tree.uid, R, true);\r

  \  updateOutput(R);\r

  }"
addSessionToUserGames: "function addSessionToUserGames() {\r

  \  if (!isEmpty(U.session)) {\r

  \    for (const g in U.session) {\r

  \      let recOld = lookup(U, ['games', g]);\r

  \      let recNew = U.session[g];\r

  \      addByKey(recNew, recOld);\r

  \      recOld.percentage = Math.round(100 * recOld.nCorrect /
  recOld.nTotal);\r

  \      if (nundef(recOld.byLevel)) recOld.byLevel = {};\r

  \      for (const l in recNew.byLevel) {\r

  \        if (nundef(recOld.byLevel[l])) recOld.byLevel[l] =
  jsCopy(recNew.byLevel[l]);\r

  \        else addByKey(recNew.byLevel[l], recOld.byLevel[l]);\r

  \      }\r

  \    }\r

  \  }\r

  \  U.session = {};\r

  }"
addSimpleProps: function addSimpleProps(ofrom, oto = {}) { for (const k in
  ofrom) { if (nundef(oto[k]) && isLiteral(k)) oto[k] = ofrom[k]; } return oto;
  }
addSO: function addSO(oid, o, R) { let sd = {}; sd[oid] = o;
  addNewlyCreatedServerObjects(sd, R); }
addSourcesAndPools: "function addSourcesAndPools(R) {\r

  \  let sp = jsCopy(R.getSpec());\r

  \  let pools = {};\r

  \  let missing = [];\r

  \  for (const k in sp) {\r

  \    let n = sp[k];\r

  \    if (nundef(n._source)) {\r

  \      n.source = R.defSource;\r

  \      pools[k] = n.pool = makePool(n.cond, n.source, R);\r

  \      n.pool.map(x => R.addR(x, k));\r

  \    } else missing.push(k);\r

  \  }\r

  \  while (missing.length > 0) {\r

  \    let done = null;\r

  \    for (const k of missing) {\r

  \      let n = sp[k];\r

  \      let sourceNode = sp[n._source];\r

  \      if (nundef(sourceNode.pool)) continue;\r

  \      n.source = sourceNode.pool;\r

  \      pools[k] = n.pool = makePool(n.cond, n.source, R);\r

  \      n.pool.map(x => R.addR(x, k));\r

  \      done = k;\r

  \      break;\r

  \    }\r

  \    removeInPlace(missing, done);\r

  \  }\r

  \  return [sp, pools];\r

  }"
addSpanColor: "function addSpanColor(dParent, id, bg, fg) {\r

  \  let d = document.createElement('span');\r

  \  dParent.appendChild(d);\r

  \  d.id = id;\r

  \  d.style.color = fg;\r

  \  d.style.backgroundColor = bg;\r

  \  return d;\r

  }"
addStandardInteraction: "function addStandardInteraction(id) {\r

  \  let ms = UIS[id];\r

  \  switch (id[2]) {\r

  \    case 'a': ms.addClickHandler('elem', onClickSelectTuple); break;\r

  \    case 'l': break;\r

  \    case 'r': break;\r

  \    case 't':\r

  \      if (id[0] == 'm') {\r

  \        ms.addClickHandler('elem', onClickFilterAndInfobox)\r

  \      } else {\r

  \        ms.addClickHandler('elem', onClickFilterTuples);\r

  \      }\r

  \      break;\r

  \    default: ms.addClickHandler('elem', onClickFilterTuples); break;\r

  \  }\r

  \  ms.addMouseEnterHandler('title', highlightMsAndRelatives);\r

  \  ms.addMouseLeaveHandler('title', unhighlightMsAndRelatives);\r

  }"
addStartHandler: "function addStartHandler() {\r

  \  recognition.onstart = function () {\r

  \    if (RecogOutput) console.log('* recog.onstart')\r

  \    interim_transcript = '';\r

  \    final_transcript = '';\r

  \    final_confidence = final_confidence2 = final_confidence_sum = final_num
  = 0;\r

  \    interim_confidence = interim_confidence2 = interim_confidence_sum =
  interim_num = 0;\r

  \    hasGotResult = hasGotFinalResult = false;\r

  \    recordCallback = null;\r

  \    if (!isGameWithSpeechRecognition()) return;\r

  \    isRunning = true;\r

  \    MicrophoneStart();\r

  \  };\r

  }"
addStateToHistory: "function addStateToHistory(prefix = 'auto') {\r

  \  if (!isEmpty(prefix)) {\r

  \    let pack = packageState();\r

  \    HistoryOfStates[prefix] = pack;\r

  \    localStorage.setItem('history', JSON.stringify(HistoryOfStates));\r

  \    console.log('saved state', prefix, 'freeForm', pack.settings.freeForm,
  'board', pack.settings.boardFilename)\r

  \  }\r

  }"
addStyledDiv: "function addStyledDiv(dParent, id, html, styleString) { return
  addDivU({ dParent: dParent, id: id, html: html, styleStr: styleString }); }"
addSvgg: "function addSvgg(dParent, gid, { w = '100%', h = '100%', bg, fg,
  originInCenter = false } = {}) {\r

  \  let svg1 = document.createElementNS('http://www.w3.org/2000/svg',
  'svg');\r

  \  if (!dParent.style.width || !dParent.style.height) {\r

  \    let pBounds = getBounds(dParent);\r

  \    w = pBounds.width + 'px';\r

  \    h = pBounds.height + 'px';\r

  \    if (pBounds.width == 0) {\r

  \      w = '100%';\r

  \      h = '100%';\r

  \    }\r

  \  }\r

  \  if (!dParent.style.position) dParent.style.position = 'relative';\r

  \  svg1.setAttribute('width', w);\r

  \  svg1.setAttribute('height', h);\r

  \  let style = 'margin:0;padding:0;position:absolute;top:0px;left:0px;';\r

  \  if (bg) style += 'background-color:' + bg;\r

  \  svg1.setAttribute('style', style);\r

  \  dParent.appendChild(svg1);\r

  \  let g1 = document.createElementNS('http://www.w3.org/2000/svg', 'g');\r

  \  if (gid) g1.id = gid;\r

  \  svg1.appendChild(g1);\r

  \  if (originInCenter) { g1.style.transform = \"translate(50%, 50%)\"; }\r

  \  return g1;\r

  }"
addSvggViewbox: "function addSvggViewbox(dParent, gid, { w = '100%', h = '100%',
  bg, fg, originInCenter = false } = {}) {\r

  \  let svg1 = document.createElementNS('http://www.w3.org/2000/svg',
  'svg');\r

  \  if (!dParent.style.width || !dParent.style.height) {\r

  \    let pBounds = getBounds(dParent);\r

  \    w = pBounds.width + 'px';\r

  \    h = pBounds.height + 'px';\r

  \  }\r

  \  if (!dParent.style.position) dParent.style.position = 'relative';\r

  \  svg1.setAttribute('width', w);\r

  \  svg1.setAttribute('height', h);\r

  \  svg1.setAttribute('viewBox', \"0 0 433 375\");\r

  \  let style = 'margin:0;padding:0;position:absolute;top:0px;left:0px;';\r

  \  if (bg) style += 'background-color:' + bg;\r

  \  svg1.setAttribute('style', style);\r

  \  dParent.appendChild(svg1);\r

  \  let g1 = document.createElementNS('http://www.w3.org/2000/svg', 'g');\r

  \  if (gid) g1.id = gid;\r

  \  svg1.appendChild(g1);\r

  \  if (originInCenter) { g1.style.transform = \"translate(50%, 50%)\"; }\r

  \  return g1;\r

  }"
addTableTo: "function addTableTo(table) {\r

  \  let div = document.getElementById('slideInAvailableCadres');\r

  \  div.appendChild(table);\r

  }"
addTableToArea: "function addTableToArea(o, areaName) {\r

  \  let d = UIS[areaName].elem;\r

  \  let t = tableElemX(o);\r

  \  console.log('d', d)\r

  \  console.log('t', t.table)\r

  \  d.appendChild(t.table)\r

  \  d.appendChild(document.createElement('hr'));\r

  }"
addTask: "function addTask(task) {\r

  \  if (!CancelChain) TaskChain.push(task);\r

  }"
addTestInteraction: "function addTestInteraction(id) {\r

  \  let mobj = UIS[id];\r

  \  mobj.addClickHandler('title', onClickGetUIS);\r

  \  mobj.addMouseEnterHandler('title', (x, pName) => x.high(pName));\r

  \  mobj.addMouseLeaveHandler('title', (x, pName) => x.unhigh(pName));\r

  }"
addTestInteraction1: "function addTestInteraction1(id) {\r

  \  let mobj = UIS[id];\r

  \  mobj.addClickHandler('', onClick1);\r

  }"
addTitleLine: "function addTitleLine(dParent, left, center, right) {\r

  \  let dt = document.createElement('div');\r

  \  dt.style.textAlign = 'center';\r

  \  dt.classList.add('ttdiv')\r

  \  let pl = getPara(left, 'left');\r

  \  let pr = getPara(right, 'right');\r

  \  let pCenter = getPara(center);\r

  \  dt.appendChild(pl);\r

  \  dt.appendChild(pr);\r

  \  dt.appendChild(pCenter);\r

  \  dParent.appendChild(dt);\r

  \  return [dt, dt.offsetWidth, dt.offsetHeight, dParent.offsetWidth,
  dParent.offsetHeight];\r

  }"
addTitleToGrid: "function addTitleToGrid(n, d) {\r

  \  if (n.content && n.params.padding) {\r

  \    let d1 = mText(n.content, d);\r

  \    d1.style.display = 'block';\r

  \    d1.style.backgroundColor = 'black';\r

  \    d1.style.position = 'absolute';\r

  \    d1.style.width = '100%';\r

  \  }\r

  }"
addToPool: "function addToPool(pool, poolArr, perle, index) {\r

  \  let p = pool[index] = { key: perle.key, index: index };\r

  \  poolArr.push(index);\r

  \  return p;\r

  }"
addUserAsFirstAvailablePlayer: "function addUserAsFirstAvailablePlayer() {\r

  \  let nextPlayer = S.availablePlayers[0];\r

  \  addPlayer(nextPlayer, onPlayerAdded);\r

  }"
addVisuals: "function addVisuals(board, { f2nRatio = 4, opt = 'fitRatio', gap =
  4, margin = 20, edgeColor, fieldColor, nodeColor, iPalette = 1, nodeShape =
  'circle', factors, w, h } = {}) {\r

  \  let area = UIS[board.idParent];\r

  \  w = area.w;\r

  \  h = area.h;\r

  \  let isPalField, isPalCorner, isPalEdge = [false, false, false];\r

  \  let pal = S.settings.palette;\r

  \  [fieldColor, nodeColor, edgeColor] = [pal[2], pal[3], pal[4]];\r

  \  let [fw, fh, nw, nh, ew] = getBoardScaleFactors(board, { factors:
  factors, opt: opt, f2nRatio: f2nRatio, w: w, h: h, margin: margin });\r

  \  for (const id of board.structInfo.fields) {\r

  \    let o = getVisual(id);\r

  \    makeVisual(o, o.memInfo.x * fw, o.memInfo.y * fh, board.structInfo.wdef
  * fw - gap, board.structInfo.hdef * fh - gap, fieldColor, o.memInfo.shape);\r

  \    o.memInfo.isPal = isPalField;\r

  \    o.attach();\r

  \  }\r

  \  if (isdef(board.structInfo.corners)) {\r

  \    for (const id of board.structInfo.corners) {\r

  \      let mobj = getVisual(id);\r

  \      mobj.memInfo.isPal = isPalCorner;\r

  \      makeVisual(mobj, mobj.memInfo.x * fw, mobj.memInfo.y * fh,
  Math.max(board.structInfo.wdef * nw, ew), Math.max(board.structInfo.hdef * nh,
  ew), nodeColor, nodeShape);\r

  \    }\r

  \  }\r

  \  if (isdef(board.structInfo.edges)) {\r

  \    let nodeSize = getVisual(board.structInfo.corners[0]).w;\r

  \    for (const id of board.structInfo.edges) {\r

  \      let mobj = getVisual(id);\r

  \      mobj.memInfo.isPal = isPalEdge;\r

  \      makeVisual(mobj, mobj.memInfo.x * fw, mobj.memInfo.y * fh,
  mobj.memInfo.thickness * ew, 0, edgeColor, 'line', { x1: mobj.memInfo.x1 * fw,
  y1: mobj.memInfo.y1 * fh, x2: mobj.memInfo.x2 * fw, y2: mobj.memInfo.y2 * fh
  });\r

  \      mobj.length = mobj.h = mobj.distance - nodeSize;\r

  \      mobj.attach();\r

  \    }\r

  \  }\r

  \  if (isdef(board.structInfo.corners)) {\r

  \    for (const id of board.structInfo.corners) getVisual(id).attach();\r

  \  }\r

  }"
addVocabTo2020Syms: "async function addVocabTo2020Syms() {\r

  \  let syms20 = await route_path_yaml_dict('../assets/syms2020.yaml');\r

  \  let etext = await route_path_text('../assets/speech/w2020/w20_E.txt');\r

  \  let ew = etext.split('\\n');\r

  \  let dtext = await route_path_text('../assets/speech/w2020/w20_D.txt');\r

  \  let ftext = await route_path_text('../assets/speech/w2020/w20_F.txt');\r

  \  let stext = await route_path_text('../assets/speech/w2020/w20_S.txt');\r

  \  let ctext = await route_path_text('../assets/speech/w2020/w20_C.txt');\r

  \  let dw = dtext.split('\\n');\r

  \  let fw = ftext.split('\\n');\r

  \  let sw = stext.split('\\n');\r

  \  let cw = ctext.split('\\n');\r

  \  let edict = {};\r

  \  for (let i = 0; i < ew.length; i++) {\r

  \    let ek = ew[i].toLowerCase().trim();\r

  \    if (isEmpty(ek)) continue;\r

  \    edict[ek] = { E: ek, D: dw[i].toLowerCase().trim(), F:
  fw[i].toLowerCase().trim(), S: sw[i].toLowerCase().trim(), C: cw[i].trim()
  };\r

  \  }\r

  \  console.log(edict);\r

  \  let edlist = dict2list(edict, 'key');\r

  \  for (const k in syms20) {\r

  \    console.log('k=' + k, edict[k]);\r

  \    let e = firstCond(edlist, x => k.includes(x.key.toLowerCase()) ||
  k.includes('pinch') && x.key.toLowerCase().includes('pinch'));\r

  \    console.log('entry for', k, 'is', e);\r

  \    if (isdef(e)) {\r

  \      let info = syms20[k];\r

  \      info.E = e.E;\r

  \      info.D = e.D;\r

  \      info.F = e.F;\r

  \      info.S = e.S;\r

  \      info.C = e.C;\r

  \    }\r

  \  }\r

  \  downloadAsYaml(syms20, 'syms20');\r

  }"
addWeekToDate: "function addWeekToDate(date, weeks) {\r

  \  let d = new Date(date);\r

  \  d.setDate(d.getDate() + (weeks * 7));\r

  \  return d;\r

  }"
AddWhitePawnCaptureMove: "function AddWhitePawnCaptureMove(from, to, cap) {\r

  \  if (RanksBrd[from] == RANKS.RANK_7) {\r

  \    AddCaptureMove(MOVE(from, to, cap, PIECES.wQ, 0));\r

  \    AddCaptureMove(MOVE(from, to, cap, PIECES.wR, 0));\r

  \    AddCaptureMove(MOVE(from, to, cap, PIECES.wB, 0));\r

  \    AddCaptureMove(MOVE(from, to, cap, PIECES.wN, 0));\r

  \  } else {\r

  \    AddCaptureMove(MOVE(from, to, cap, PIECES.EMPTY, 0));\r

  \  }\r

  }"
AddWhitePawnQuietMove: "function AddWhitePawnQuietMove(from, to) {\r

  \  if (RanksBrd[from] == RANKS.RANK_7) {\r

  \    AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.wQ, 0));\r

  \    AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.wR, 0));\r

  \    AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.wB, 0));\r

  \    AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.wN, 0));\r

  \  } else {\r

  \    AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.EMPTY, 0));\r

  \  }\r

  }"
adjacency_init: "function adjacency_init(items) {\r

  \  let last = arrLast(items);\r

  \  let [rows, cols] = [last.iy + 1, last.ix + 1];\r

  \  console.log('there are', rows, 'rows', cols, 'cols')\r

  }"
adjustContainerLayout: "function adjustContainerLayout(n, R) {\r

  \  console.log('...........adjustContainer____________', n.uid);\r

  \  n.adirty = false;\r

  \  if (n.type == 'grid') {\r

  \    resizeBoard(n, R);\r

  \    return;\r

  \  }\r

  \  if (n.type == 'hand') { layoutHand(n); return; }\r

  \  if (n.uid && isBoardMember(n.uid, R)) {\r

  \    adjustLayoutForBoardMember(n, R);\r

  \  }\r

  \  let params = n.params;\r

  \  let num = n.children.length;\r

  \  let or = params.orientation ? params.orientation : DEF_ORIENTATION;\r

  \  mFlex(n.ui, or);\r

  \  let split = params.split ? params.split : DEF_SPLIT;\r

  \  if (split == 'min') return;\r

  \  let reverseSplit = false;\r

  \  if (split == 'equal') split = (1 / num);\r

  \  else if (isNumber(split)) reverseSplit = true;\r

  \  for (let i = 0; i < num; i++) {\r

  \    let d = R.uiNodes[n.children[i]].ui;\r

  \    mFlexChildSplit(d, split);\r

  \    if (reverseSplit) { split = 1 - split; }\r

  \  }\r

  }"
adjustLayoutForBoardMember: "function adjustLayoutForBoardMember(n, R) {\r

  \  console.log('adjust layout for', n.uid);\r

  \  let ch = n.children[0];\r

  \  let n1 = R.uiNodes[ch];\r

  \  console.log('id_divParent', n1.idUiParent, 'id_directParent',
  n1.uidParent)\r

  \  let divParent = mBy(n1.idUiParent);\r

  \  let directParent = mBy(n1.uidParent);\r

  \  let ui = n1.ui;\r

  \  let nuiBoard = R.uiNodes[n.uidParent];\r

  \  console.log(nuiBoard)\r

  \  let bmk = getBounds(directParent, false, divParent);\r

  \  let arr;\r

  \  let [wTotal, hTotal, wBoard, hBoard, fw, fh, fSpacing, fSize, gap] =\r

  \    [nuiBoard.wTotal, nuiBoard.hTotal, nuiBoard.wBoard, nuiBoard.hBoard,
  nuiBoard.fw, nuiBoard.fh, nuiBoard.fSpacing, nuiBoard.fSize, nuiBoard.gap];\r

  \  console.log('wTotal', wTotal, 'hTotal', hTotal, 'wBoard', wBoard,\r

  \    'hBoard', hBoard, 'fw', fw, 'fh', fh, 'fSpacing', fSpacing, 'fSize',
  fSize, 'gap', gap)\r

  \  let bdiv = getBounds(divParent);\r

  \  divParent.style.backgroundColor = 'yellow';\r

  \  ui.style.position = 'absolute';\r

  \  ui.style.display = 'inline-block';\r

  \  let bel = getBounds(ui);\r

  \  let x = 0;\r

  \  let y = 0;\r

  \  ui.style.left = x + 'px';\r

  \  ui.style.top = y + 'px';\r

  \  ui.style.margin = '0px';\r

  \  console.log('x', x, '\\nbdiv left', bdiv.left, 'w', bdiv.width, '\\nbmk
  left', bmk.left, 'w', bmk.width, '\\nbel left', bel.left, 'w', bel.width);\r

  \  n.sizeNeeded = { w: Math.max(bmk.width, bel.width), h:
  Math.max(bmk.height, bel.height) };\r

  \  if (bmk.width < bel.width || bmk.height < bel.height) {\r

  \    let nBoard = R.uiNodes[n.uidParent];\r

  \    nBoard.adirty = true;\r

  \    let memType = n.info.memType;\r

  \    let curSize = n.typParams.size;\r

  \    let newSize = Math.max(bel.width, bel.height);\r

  \    newSize = Math.ceil(newSize / 4);\r

  \    newSize *= 4;\r

  \    if (newSize % 4 != 0) newSize += 4;\r

  \    if (nundef(nBoard.resizeInfo)) nBoard.resizeInfo = {};\r

  \    nBoard.resizeInfo[memType + 's'] = newSize;\r

  \  }\r

  \  n.uiType = 'childOfBoardElement';\r

  \  n.potentialOverlap = true;\r

  }"
adjustPlayerAreaWise: "function adjustPlayerAreaWise() {\r

  \  let areaName = S.settings.present.player.defaultArea;\r

  \  let msArea = UIS[areaName];\r

  \  let wArea = msArea.w;\r

  \  let minWidth = S.vars.wDefaultPlayer + 10;\r

  \  if (wArea < minWidth) {\r

  \    let diff = S.vars.wDefaultPlayer + 10 - wArea;\r

  \    setCSSVariable('--wPlayers', minWidth)\r

  \  }\r

  }"
adjustTableSize: "function adjustTableSize(R) {\r

  \  let d = mBy('table');\r

  \  let root = R.root;\r

  \  let b = getBounds(root.ui, true)\r

  \  if (!isdef(root.size)) {\r

  \    setSP(root);\r

  \  } else {\r

  \  }\r

  \  d.style.minWidth = root.size.w + 'px';\r

  \  d.style.minHeight = (root.size.h + 4) + 'px';\r

  }"
ADMinusKeys: "function ADMinusKeys(ad1, ad2) {\r

  \  let arr1 = ad1;\r

  \  let arr2 = ad2;\r

  \  if (!Array.isArray(ad1)) {\r

  \    console.log('ad1 not an array:', typeof ad1, ad1);\r

  \    arr1 = getKeys(ad1);\r

  \  }\r

  \  if (!Array.isArray(ad2)) {\r

  \    console.log('ad2 not an array:', typeof ad2, ad2);\r

  \    arr1 = getKeys(ad2);\r

  \  }\r

  \  return arrMinus(arr1, arr2);\r

  }"
aFlip: "function aFlip(d, ms = 300) {\r

  \  return anime({ targets: d, scaleX: -1, duration: ms, easing:
  'easeInOutSine' });\r

  }"
agCircle: function agCircle(g, sz) { let r = gEllipse(sz, sz); g.appendChild(r);
  return r; }
agColoredShape: "function agColoredShape(g, shape, w, h, color) {\r

  \  SHAPEFUNCS[shape](g, w, h);\r

  \  gBg(g, color);\r

  }"
agEllipse: function agEllipse(g, w, h) { let r = gEllipse(w, h);
  g.appendChild(r); return r; }
agG: function agG(g) { let g1 = gG(); g.appendChild(g1); return g1; }
aggregate_elements: "function aggregate_elements(list_of_object, propname) {\r

  \  let result = [];\r

  \  for (let i = 0; i < list_of_object.length; i++) {\r

  \    let obj = list_of_object[i];\r

  \    let arr = obj[propname];\r

  \    for (let j = 0; j < arr.length; j++) {\r

  \      result.push(arr[j]);\r

  \    }\r

  \  }\r

  \  return result;\r

  }"
aggregate_player: "function aggregate_player(fen, prop) {\r

  \  let res = [];\r

  \  for (const uplayer in fen.players) {\r

  \    let list = fen.players[uplayer][prop];\r

  \    res = res.concat(list);\r

  \  }\r

  \  return res;\r

  }"
aggregate_player_hands_by_rank: "function aggregate_player_hands_by_rank(fen)
  {\r

  \  let di_ranks = {};\r

  \  let akku = [];\r

  \  for (const uname in fen.players) {\r

  \    let pl = fen.players[uname];\r

  \    let hand = pl.hand;\r

  \    for (const c of hand) {\r

  \      akku.push(c);\r

  \      let r = c[0];\r

  \      if (isdef(di_ranks[r])) di_ranks[r] += 1; else di_ranks[r] = 1;\r

  \    }\r

  \  }\r

  \  fen.akku = akku;\r

  \  return di_ranks;\r

  }"
agHex: function agHex(g, w, h) { let pts = size2hex(w, h); return agPoly(g, pts); }
agLine: function agLine(g, x1, y1, x2, y2) { let r = gLine(x1, y1, x2, y2);
  g.appendChild(r); return r; }
agmove_clear_all: function agmove_clear_all() { Z.stage = 'clear'; Z.fen.endcond
  = 'all'; Z.fen.acting_host = Z.uplayer; Z.turn = [Z.uplayer];
  take_turn_clear(); }
agmove_clear_first: function agmove_clear_first() { Z.stage = 'clear';
  Z.fen.endcond = 'first'; Z.fen.acting_host = Z.uplayer; Z.turn = [Z.uplayer];
  take_turn_clear(); }
agmove_clear_turn: function agmove_clear_turn() { Z.stage = 'clear';
  Z.fen.endcond = 'turn'; Z.fen.acting_host = Z.uplayer; Z.turn = [Z.uplayer];
  take_turn_clear(); }
agmove_indiv: "function agmove_indiv(plname, slot) {\r

  \  if (isDict(plname) && Z.uplayer != 'mimi') return;\r

  \  if (isString(plname)) Z.uplayer = plname;\r

  \  console.log('sender:', Z.uplayer);\r

  \  let pl = Z.fen.players[Z.uplayer];\r

  \  Z.state = { val: pl.hand[0] };\r

  \  if (nundef(slot)) slot = busy_wait_until_slot(pl.slot);\r

  \  console.log('time sending:', slot, Date.now());\r

  \  take_turn_collect_open();\r

  \  if (plname != 'felix') agmove_indiv('felix', pl.slot);\r

  }"
agmove_resolve: "function agmove_resolve() {\r

  \  console.log('---------------------- RESOLVE ----------------------');\r

  \  assertion(isdef(Z.playerdata), 'no playerdata');\r

  \  assertion(Z.uplayer == Z.fen.acting_host, 'wrong player resolves!!!!',
  Z.uplayer);\r

  \  let [fen, uplayer, pl, pldata] = [Z.fen, Z.uplayer, Z.pl,
  Z.playerdata];\r

  \  fen.collection = [];\r

  \  for (const data of pldata) {\r

  \    fen.collection.push({ name: data.name, state: data.state });\r

  \  }\r

  \  console.log('players selected the following cards:', fen.collection);\r

  \  [Z.stage, Z.turn] = [Z.fen.stage_after_multi, Z.fen.turn_after_multi];\r

  \  take_turn_resolve('single');\r

  }"
agmove_single: "function agmove_single() {\r

  \  if (Z.pl.hand.length > 2) removeInPlace(Z.pl.hand, Z.pl.hand[0]);\r

  \  Z.turn = [get_next_player(Z, Z.uplayer)];\r

  \  take_turn_fen();\r

  }"
agmove_startmulti: function agmove_startmulti() { Z.stage = 'multi'; Z.turn =
  Z.plorder;[Z.fen.stage_after_multi, Z.fen.turn_after_multi] = ['click',
  [rChoose(Z.plorder)]]; take_turn_fen(); }
agPoly: function agPoly(g, pts) { let r = gPoly(pts); g.appendChild(r); return r; }
agRect: function agRect(g, w, h) { let r = gRect(w, h); g.appendChild(r); return r; }
agShape: "function agShape(g, shape, w, h, color, rounding) {\r

  \  let sh = gShape(shape, w, h, color, rounding);\r

  \  g.appendChild(sh);\r

  \  return sh;\r

  }"
agText: "function agText(g, txt, fg, bg, font) {\r

  \  let res = new gText(g);\r

  \  res.text({ txt: txt, fill: fg, bgText: bg, font: font });\r

  \  return res;\r

  }"
AI: "function AI(playerToControl) {\r

  \  var ctl = playerToControl;\r

  \  var State = {\r

  \    WAITING: 0,\r

  \    FOLLOWING: 1,\r

  \    AIMING: 2\r

  \  }\r

  \  var currentState = State.FOLLOWING;\r

  \  function repeat(cb, cbFinal, interval, count) {\r

  \    var timeout = function () {\r

  \      repeat(cb, cbFinal, interval, count - 1);\r

  \    }\r

  \    if (count <= 0) {\r

  \      cbFinal();\r

  \    } else {\r

  \      cb();\r

  \      setTimeout(function () {\r

  \        repeat(cb, cbFinal, interval, count - 1);\r

  \      }, interval);\r

  \    }\r

  \  }\r

  \  function aimAndFire() {\r

  \    var numRepeats = Math.floor(5 + Math.random() * 5);\r

  \    function randomMove() {\r

  \      if (Math.random() > .5) {\r

  \        ctl.move(-distance);\r

  \      } else {\r

  \        ctl.move(distance);\r

  \      }\r

  \    }\r

  \    function randomAimAndFire() {\r

  \      var d = Math.floor(Math.random() * 3 - 1);\r

  \      opponent.setAim(d);\r

  \      opponent.fire();\r

  \      currentState = State.FOLLOWING;\r

  \    }\r

  \    repeat(randomMove, randomAimAndFire, 250, numRepeats);\r

  \  }\r

  \  function moveTowardsBall() {\r

  \    if (ball.getPosition()[1] >= ctl.getPosition()[1] + ctl.getSize() / 2)
  {\r

  \      ctl.move(distance);\r

  \    } else {\r

  \      ctl.move(-distance);\r

  \    }\r

  \    setTimeout(function () {\r

  \      currentState = State.FOLLOWING;\r

  \    }, 400);\r

  \  }\r

  \  function update() {\r

  \    switch (currentState) {\r

  \      case State.FOLLOWING:\r

  \        if (ball.getOwner() === ctl) {\r

  \          currentState = State.AIMING;\r

  \          aimAndFire();\r

  \        } else {\r

  \          moveTowardsBall();\r

  \          currentState = State.WAITING;\r

  \        }\r

  \      case State.WAITING:\r

  \        break;\r

  \      case State.AIMING:\r

  \        break;\r

  \    }\r

  \  }\r

  \  return {\r

  \    update: update\r

  \  }\r

  }"
ai_move: "function ai_move(ms = 100) {\r

  \  DA.ai_is_moving = true;\r

  \  let [A, fen] = [valf(Z.A, {}), Z.fen];\r

  \  let selitems;\r

  \  if (Z.game == 'ferro') {\r

  \    if (Z.stage == 'card_selection') {\r

  \      let uplayer = Z.uplayer;\r

  \      let i1 = firstCond(A.items, x =>
  x.path.includes(`${uplayer}.hand`));\r

  \      let i2 = firstCond(A.items, x => x.key == 'discard');\r

  \      selitems = [i1, i2];\r

  \    } else if (Z.stage == 'buy_or_pass') {\r

  \      selitems = [A.items[1]];\r

  \    } else selitems = [A.items[0]];\r

  \  } else if (Z.game == 'bluff') {\r

  \    let [newbid, handler] = bluff_ai();\r

  \    if (newbid) { fen.newbid = newbid; UI.dAnzeige.innerHTML =
  bid_to_string(newbid); }\r

  \    else if (handler != handle_gehtHoch) { bluff_generate_random_bid(); }\r

  \    A.callback = handler;\r

  \    selitems = [];\r

  \  } else if (A.command == 'trade') {\r

  \    selitems = ai_pick_legal_trade();\r

  \  } else if (A.command == 'exchange') {\r

  \    selitems = ai_pick_legal_exchange();\r

  \  } else if (A.command == 'upgrade') {\r

  \    selitems = [rChoose(A.items)];\r

  \  } else if (A.command == 'rumor') {\r

  \    selitems = [];\r

  \    let buildings = A.items.filter(x => x.path.includes('building'));\r

  \    let rumors = A.items.filter(x => !x.path.includes('building'));\r

  \    selitems = [rChoose(buildings), rChoose(rumors)];\r

  \  } else if (ARI.stage[Z.stage] == 'rumors_weitergeben') {\r

  \    let players = A.items.filter(x => Z.plorder.includes(x.key))\r

  \    let rumors = A.items.filter(x => !Z.plorder.includes(x.key))\r

  \    selitems = [rChoose(players), rChoose(rumors)];\r

  \  } else if (ARI.stage[Z.stage] == 'journey') {\r

  \    selitems = [];\r

  \  } else {\r

  \    let items = A.items;\r

  \    let nmin = A.minselected;\r

  \    let nmax = Math.min(A.maxselected, items.length);\r

  \    let nselect = rNumber(nmin, nmax);\r

  \    selitems = rChoose(items, nselect); if (!isList(selitems)) selitems =
  [selitems];\r

  \  }\r

  \  for (const item of selitems) {\r

  \    select_last(item, select_toggle);\r

  \    if (isdef(item.submit_on_click)) A.selected.pop();\r

  \  }\r

  \  clearTimeout(TO.ai);\r

  \  loader_on();\r

  \  TO.ai = setTimeout(() => { if (isdef(A.callback)) A.callback();
  loader_off(); }, ms);\r

  }"
ai_pick_legal_exchange: "function ai_pick_legal_exchange() {\r

  \  let [A, fen, uplayer, items] = [Z.A, Z.fen, Z.uplayer, Z.A.items];\r

  \  let firstPick = rChoose(items, 1, x => x.path.includes('building'));\r

  \  let secondPick = rChoose(items, 1, x => !x.path.includes('building'));\r

  \  return [firstPick, secondPick];\r

  }"
ai_pick_legal_trade: "function ai_pick_legal_trade() {\r

  \  let [A, fen, uplayer, items] = [Z.A, Z.fen, Z.uplayer, Z.A.items];\r

  \  let stall = fen.players[uplayer].stall;\r

  \  let firstPick = rChoose(items, 1, x => x.path.includes(uplayer));\r

  \  let secondPick = rChoose(items, 1, x => !x.path.includes(uplayer));\r

  \  return [firstPick, secondPick];\r

  }"
ai_schummler: function ai_schummler() { }
AIMinimax: "function AIMinimax(g, callback) {\r

  \  let state = g.getState();\r

  \  state = boardToNode(state);\r

  \  F_END = g.evalState;\r

  \  F_HEURISTIC = g.heuristic;\r

  \  F_MOVES = g.getAvailableMoves;\r

  \  F_APPLYMOVE = g.applyMove;\r

  \  F_UNDOMOVE = g.undoMove;\r

  \  MAXIMIZER = g.plTurn;\r

  \  MINIMIZER = g.plOpp;\r

  \  SelectedMove = null;\r

  \  let algorithm = g.copyState == true ? minimaxCopy : myMinimax;\r

  \  let val = algorithm(state, 0, -Infinity, Infinity, g.searchDepth,
  true);\r

  \  CCC = 0;\r

  \  callback(SelectedMove);\r

  }"
ajaxPostCors: "async function ajaxPostCors(url, data, type, handle_result) {\r

  \  data.data_type = type;\r

  \  var formData = new FormData();\r

  \  for (const k in data) {\r

  \    formData.append(k, data[k]);\r

  \  }\r

  \  let h = new Headers();\r

  \  h.append('Accept', 'application/text');\r

  \  var resp = await fetch(url, {\r

  \    method: 'POST',\r

  \    mode: 'cors',\r

  \    headers: h,\r

  \    body: formData,\r

  \  });\r

  \  let result = await resp.text();\r

  \  try {\r

  \    let jsonResult = JSON.parse(result);\r

  \    if (isdef(handle_result)) handle_result(jsonResult);\r

  \  } catch {\r

  \    if (isdef(handle_result)) handle_result({ message: result });\r

  \  }\r

  }"
ajaxSimple: "function ajaxSimple(method, url, callback) {\r

  \  var ajax = new XMLHttpRequest();\r

  \  ajax.onload = () => {\r

  \    if (ajax.status == 200 || ajax.readyState == 4) {\r

  \      if (isdef(callback)) callback(ajax);\r

  \    }\r

  \  }\r

  \  ajax.open(method, url, true);\r

  \  ajax.send();\r

  }"
aJumpby: "function aJumpby(elem, h = 40, ms = 1000) {\r

  \  anime({\r

  \    targets: elem,\r

  \    keyframes: [\r

  \      { translateY: 2, scaleX: 1.05, scaleY: .95 },\r

  \      { translateY: 2, scaleX: 1.05, scaleY: .95 },\r

  \      { translateY: -h, scaleX: .9, scaleY: 1.1 },\r

  \      { translateY: -h, scaleX: .9, scaleY: 1.1 },\r

  \      { translateY: 0, scaleX: 1, scaleY: 1 },\r

  \      { translateY: -7, scaleX: 1, scaleY: 1 },\r

  \      { translateY: 0, scaleX: 1, scaleY: 1 },\r

  \      { translateY: 0, scaleX: 1, scaleY: 1 },\r

  \      { translateY: 0, scaleX: 1, scaleY: 1 },\r

  \      { translateY: 0, scaleX: 1, scaleY: 1 },\r

  \    ],\r

  \    duration: 1000,\r

  \    easing: 'easeInOutSine', //'easeOutElastic(1, .8)',\r

  \  });\r

  }"
all2DigitFractions: "function all2DigitFractions() {\r

  \  let fr = {\r

  \    1: [2, 3, 4, 5, 6, 7, 8, 9],\r

  \    2: [3, 5, 7, 9],\r

  \    3: [2, 4, 5, 7, 8],\r

  \    4: [3, 5, 7, 9],\r

  \    5: [2, 3, 4, 6, 7, 8, 9],\r

  \    6: [5, 7],\r

  \    7: [2, 3, 4, 5, 6, 8, 9],\r

  \    8: [3, 5, 7, 9],\r

  \    9: [2, 4, 5, 7, 8],\r

  \  };\r

  \  return fr;\r

  }"
all2DigitFractionsExpanded: "function all2DigitFractionsExpanded() {\r

  \  let f = all2DigitFractions();\r

  \  let res = [];\r

  \  for (const i in f) {\r

  \    for (const j of f[i]) {\r

  \      res.push({ numer: i, denom: j });\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
all2DigitFractionsUnder1: "function all2DigitFractionsUnder1() {\r

  \  let fr = {\r

  \    1: [2, 3, 4, 5, 6, 7, 8, 9],\r

  \    2: [3, 5, 7, 9],\r

  \    3: [4, 5, 7, 8],\r

  \    4: [5, 7, 9],\r

  \    5: [6, 7, 8, 9],\r

  \    6: [7],\r

  \    7: [8, 9],\r

  \    8: [9],\r

  \  };\r

  \  return fr;\r

  }"
all2DigitFractionsUnder1Expanded: "function all2DigitFractionsUnder1Expanded()
  {\r

  \  let f = all2DigitFractionsUnder1();\r

  \  let res = [];\r

  \  for (const i in f) {\r

  \    for (const j of f[i]) {\r

  \      res.push({ numer: i, denom: j });\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
allCond: function allCond(arr, cond) { return forAll(arr, cond); }
allCondDict: "function allCondDict(d, func) {\r

  \  let res = [];\r

  \  for (const k in d) { if (func(d[k])) res.push(k); }\r

  \  return res;\r

  }"
allCondDictKV: "function allCondDictKV(d, func) {\r

  \  let res = [];\r

  \  for (const k in d) { if (func(k, d[k])) res.push(k); }\r

  \  return res;\r

  }"
allCondX: "function allCondX(ad, func) {\r

  \  let res = [];\r

  \  if (nundef(ad)) return res;\r

  \  else if (isDict(ad)) {\r

  \    for (const k in ad) {\r

  \      let v = ad[k];\r

  \      if (func(v)) { if (nundef(v.key)) v.key = k; res.push(v); }\r

  \    }\r

  \  } else {\r

  \    for (const a of ad) { if (func(a)) res.push(a) }\r

  \  }\r

  \  return res;\r

  }"
allElementsFromPoint: "function allElementsFromPoint(x, y) {\r

  \  var element, elements = [];\r

  \  var old_visibility = [];\r

  \  while (true) {\r

  \    element = document.elementFromPoint(x, y);\r

  \    if (!element || element === document.documentElement) {\r

  \      break;\r

  \    }\r

  \    elements.push(element);\r

  \    old_visibility.push(element.style.visibility);\r

  \    element.style.visibility = 'hidden';\r

  \  }\r

  \  for (var k = 0; k < elements.length; k++) {\r

  \    elements[k].style.visibility = old_visibility[k];\r

  \  }\r

  \  elements.reverse();\r

  \  return elements;\r

  }"
allIntegers: "function allIntegers(s) {\r

  \  return s.match(/\\d+\\.\\d+|\\d+\\b|\\d+(?=\\w)/g).map(v => {\r

  \    return +v;\r

  \  });\r

  }"
allLettersContained: "function allLettersContained(sFull, sPart) {\r

  \  for (const ch of sPart) {\r

  \    if (!(sFull.includes(ch))) return false;\r

  \  }\r

  \  return true;\r

  }"
allNumbers: "function allNumbers(s) {\r

  \  let m =
  s.match(/\\-.\\d+|\\-\\d+|\\.\\d+|\\d+\\.\\d+|\\d+\\b|\\d+(?=\\w)/g);\r

  \  if (m) return m.map(v => +v); else return null;\r

  }"
allNumbers_dep: "function allNumbers_dep(s) {\r

  \  return s.match(/\\d+\\.\\d+|\\d+\\b|\\d+(?=\\w)/g).map(v => {\r

  \    return +v;\r

  \  });\r

  }"
allow_polling: function allow_polling() { IS_POLLING_ALLOWED = true; if
  (isdef(DA.poll)) poll(); }
allowDrop: function allowDrop(ev) { ev.preventDefault(); }
allowDropKey: "function allowDropKey(ev) {\r

  \  ev.stopPropagation();\r

  \  let dragged = ev.toElement;\r

  \  let target = ev.target;\r

  \  if (nundef(key) || key == ev.target.dd) {\r

  \    ev.preventDefault();\r

  \    console.log(ev, '\\nkey:', key, dragged.id, dragged.dd, target.dd)\r

  \  }\r

  }"
allWordsAndKeysLowerCase: "function allWordsAndKeysLowerCase() {\r

  \  let newSyms = {};\r

  \  for (const k in Syms) {\r

  \    let info = Syms[k];\r

  \    let inew = jsCopy(info);\r

  \    for (const x of ['E', 'D', 'F', 'S']) {\r

  \      if (isdef(info[x])) {\r

  \        console.log(info[x])\r

  \        inew[x] = info[x].toLowerCase();\r

  \      }\r

  \    }\r

  \    newSyms[k.toLowerCase()] = inew;\r

  \  }\r

  \  downloadAsYaml(newSyms, 'syms1');\r

  }"
allWordsContainedInKeys: "function allWordsContainedInKeys(dict, keywords) {\r

  \  let res = [];\r

  \  for (const k in dict) {\r

  \    let isMatch = true;\r

  \    for (const w of keywords) {\r

  \      if (!k.includes(w)) { isMatch = false; break; }\r

  \    }\r

  \    if (isMatch) res.push(dict[k]);\r

  \  }\r

  \  return res;\r

  }"
allWordsContainedInKeysAsWord: "function allWordsContainedInKeysAsWord(dict,
  keywords) {\r

  \  let res = [];\r

  \  for (const k in dict) {\r

  \    let isMatch = true;\r

  \    let wordsInKey = splitAtWhiteSpace(k);\r

  \    for (const w of keywords) {\r

  \      if (!wordsInKey.includes(w)) { isMatch = false; break; }\r

  \    }\r

  \    if (isMatch) res.push(dict[k]);\r

  \  }\r

  \  return res;\r

  }"
allWordsContainedInProps: "function allWordsContainedInProps(dict, keywords,
  props) {\r

  \  let res = [];\r

  \  for (const k in dict) {\r

  \    let isMatch = true;\r

  \    let propString = '';\r

  \    for (const p of props) {\r

  \      propString += dict[k][p] + ' ';\r

  \    }\r

  \    for (const w of keywords) {\r

  \      if (!propString.includes(w)) { isMatch = false; break; }\r

  \    }\r

  \    if (isMatch) {\r

  \      res.push(dict[k]);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
allWordsContainedInPropsAsWord: "function allWordsContainedInPropsAsWord(dict,
  keywords, props) {\r

  \  let res = [];\r

  \  for (const k in dict) {\r

  \    let isMatch = true;\r

  \    let keywordList = [];\r

  \    for (const p of props) {\r

  \      if (nundef(dict[k][p])) continue;\r

  \      let wordsInKey = splitAtWhiteSpace(dict[k][p]);\r

  \      keywordList = keywordList.concat(wordsInKey);\r

  \    }\r

  \    for (const w of keywords) {\r

  \      if (!keywordList.includes(w)) { isMatch = false; break; }\r

  \    }\r

  \    if (isMatch) res.push(dict[k]);\r

  \  }\r

  \  return res;\r

  }"
AlphaBeta: "function AlphaBeta(alpha, beta, depth, DoNull) {\r

  \  if (depth <= 0) {\r

  \    return Quiescence(alpha, beta);\r

  \  }\r

  \  if ((srch_nodes & 2047) == 0) CheckUp();\r

  \  srch_nodes++;\r

  \  if ((IsRepetition() || brd_fiftyMove >= 100) && brd_ply != 0) {\r

  \    return 0;\r

  \  }\r

  \  if (brd_ply > MAXDEPTH - 1) {\r

  \    return EvalPosition(pos);\r

  \  }\r

  \  var InCheck = SqAttacked(brd_pList[PCEINDEX(Kings[brd_side], 0)],
  brd_side ^ 1);\r

  \  if (InCheck == BOOL.TRUE) {\r

  \    depth++;\r

  \  }\r

  \  var Score = -INFINITE;\r

  \  if (DoNull == BOOL.TRUE && BOOL.FALSE == InCheck &&\r

  \    brd_ply != 0 && (brd_material[brd_side] > 50200) && depth >= 4) {\r

  \    var ePStore = brd_enPas;\r

  \    if (brd_enPas != SQUARES.NO_SQ) HASH_EP();\r

  \    brd_side ^= 1;\r

  \    HASH_SIDE();\r

  \    brd_enPas = SQUARES.NO_SQ;\r

  \    Score = -AlphaBeta(-beta, -beta + 1, depth - 4, BOOL.FALSE);\r

  \    brd_side ^= 1;\r

  \    HASH_SIDE();\r

  \    brd_enPas = ePStore;\r

  \    if (brd_enPas != SQUARES.NO_SQ) HASH_EP();\r

  \    if (srch_stop == BOOL.TRUE) return 0;\r

  \    if (Score >= beta) {\r

  \      return beta;\r

  \    }\r

  \  }\r

  \  GenerateMoves();\r

  \  var MoveNum = 0;\r

  \  var Legal = 0;\r

  \  var OldAlpha = alpha;\r

  \  var BestMove = NOMOVE;\r

  \  Score = -INFINITE;\r

  \  var PvMove = ProbePvTable();\r

  \  if (PvMove != NOMOVE) {\r

  \    for (MoveNum = brd_moveListStart[brd_ply]; MoveNum <
  brd_moveListStart[brd_ply + 1]; ++MoveNum) {\r

  \      if (brd_moveList[MoveNum] == PvMove) {\r

  \        brd_moveScores[MoveNum].score = 2000000;\r

  \        break;\r

  \      }\r

  \    }\r

  \  }\r

  \  for (MoveNum = brd_moveListStart[brd_ply]; MoveNum <
  brd_moveListStart[brd_ply + 1]; ++MoveNum) {\r

  \    PickNextMove(MoveNum);\r

  \    if (MakeMove(brd_moveList[MoveNum]) == BOOL.FALSE) {\r

  \      continue;\r

  \    }\r

  \    Legal++;\r

  \    Score = -AlphaBeta(-beta, -alpha, depth - 1, BOOL.TRUE);\r

  \    TakeMove();\r

  \    if (srch_stop == BOOL.TRUE) return 0;\r

  \    if (Score > alpha) {\r

  \      if (Score >= beta) {\r

  \        if (Legal == 1) {\r

  \          srch_fhf++;\r

  \        }\r

  \        srch_fh++;\r

  \        if ((brd_moveList[MoveNum] & MFLAGCAP) == 0) {\r

  \          brd_searchKillers[MAXDEPTH + brd_ply] =
  brd_searchKillers[brd_ply];\r

  \          brd_searchKillers[brd_ply] = brd_moveList[MoveNum];\r

  \        }\r

  \        return beta;\r

  \      }\r

  \      alpha = Score;\r

  \      BestMove = brd_moveList[MoveNum];\r

  \      if ((BestMove & MFLAGCAP) == 0) {\r

  \        brd_searchHistory[brd_pieces[FROMSQ(BestMove)] * BRD_SQ_NUM +
  TOSQ(BestMove)] += depth;\r

  \      }\r

  \    }\r

  \  }\r

  \  if (Legal == 0) {\r

  \    if (InCheck) {\r

  \      return -MATE + brd_ply;\r

  \    } else {\r

  \      return 0;\r

  \    }\r

  \  }\r

  \  if (alpha != OldAlpha) {\r

  \    StorePvMove(BestMove);\r

  \  }\r

  \  return alpha;\r

  }"
alphaToHex: "function alphaToHex(zero1) {\r

  \  zero1 = Math.round(zero1 * 100) / 100;\r

  \  var alpha = Math.round(zero1 * 255);\r

  \  var hex = (alpha + 0x10000)\r

  \    .toString(16)\r

  \    .slice(-2)\r

  \    .toUpperCase();\r

  \  var perc = Math.round(zero1 * 100);\r

  \  return hex;\r

  }"
aMove: "function aMove(d, dSource, dTarget, callback, offset, ms, easing, fade)
  {\r

  \  let b1 = getRect(dSource);\r

  \  let b2 = getRect(dTarget);\r

  \  if (nundef(offset)) offset = { x: 0, y: 0 };\r

  \  let dist = { x: b2.x - b1.x + offset.x, y: b2.y - b1.y + offset.y };\r

  \  d.style.zIndex = 100;\r

  \  let a = d.animate({ opacity: valf(fade, 1), transform:
  `translate(${dist.x}px,${dist.y}px)` }, { easing: valf(easing, 'EASE'),
  duration: ms });\r

  \  a.onfinish = () => { d.style.zIndex = iZMax(); if (isdef(callback))
  callback(); };\r

  }"
aMoveTo: "function aMoveTo(d, dTarget, x, y, ms) {\r

  \  let bi = iTableBounds(d);\r

  \  let b1 = iTableBounds(d.parentNode);\r

  \  let b2 = iTableBounds(dTarget);\r

  \  d.animate([\r

  \    { position: 'absolute', left: `${bi.x}px`, top: `${bi.y}px` },\r

  \    { position: 'absolute', left: `${x + b2.x}px`, top: `${y + b2.y}px`
  },\r

  \  ], {\r

  \    duration: ms,\r

  \    fill: 'forwards'\r

  \  });\r

  }"
analyse_tables: "function analyse_tables(user_tables) {\r

  \  user_tables.map(x => console.log('table:', x));\r

  \  let bygame = {}, bytid = {};\r

  \  for (const t of user_tables) {\r

  \    lookupAddToList(bygame, [t.game], t);\r

  \    lookupSet(bytid, [t.id], t);\r

  \  }\r

  \  if (!isEmpty(user_tables)) {\r

  \    Session.cur_table = user_tables[0];\r

  \    Session.cur_tid = Session.cur_table.id;\r

  \  } else {\r

  \    Session.cur_table = null;\r

  \    Session.cur_tid = undefined;\r

  \  }\r

  \  lookupSetOverride(DA, [Session.cur_user, 'tables_by_game'], bygame);\r

  \  lookupSetOverride(DA, [Session.cur_user, 'tables_by_tid'], bytid);\r

  \  return bygame;\r

  }"
ani_say: "function ani_say(d, fSpeak) {\r

  \  if (isdef(fSpeak)) fSpeak();\r

  \  mClass(d, 'onPulse');\r

  \  setTimeout(() => mRemoveClass(d, 'onPulse'), 500);\r

  }"
aniFadeIn: "function aniFadeIn(elem, secs) {\r

  \  elem.style.opacity = 0;\r

  \  setTimeout(() => { mRemoveClass(elem, 'transopaOff'); mClass(elem,
  'transopaOn'); }, secs * 1000);\r

  }"
aniFadeInOut: "function aniFadeInOut(elem, secs) {\r

  \  mClass(elem, 'transopaOn');\r

  \  setTimeout(() => { mRemoveClass(elem, 'transopaOn'); mClass(elem,
  'transopaOff'); }, secs * 1000);\r

  }"
aniFadeInOut_new: "function aniFadeInOut_new(elem, msDuration) {\r

  \  elem.animate()\r

  \  mClass(elem, 'transopaOn');\r

  \  return setTimeout(() => { mRemoveClass(elem, 'transopaOn'); mClass(elem,
  'transopaOff'); }, secs * 1000);\r

  }"
aniGameOver: "function aniGameOver(msg, silent = false) {\r

  \  if (!silent && !G.silentMode) { writeSound(); playSound('goodBye'); }\r

  \  interrupt();\r

  \  show('freezer2');\r

  \  let dComment = mBy('dCommentFreezer2');\r

  \  let dMessage = mBy('dMessageFreezer2');\r

  \  let d = mBy('dContentFreezer2');\r

  \  clearElement(d);\r

  \  mStyleX(d, { fz: 20, matop: 40, bg: 'silver', fg: 'indigo', rounding: 20,
  padding: 25 })\r

  \  let style = { matop: 4 };\r

  \  dComment.innerHTML = 'Great Job!';\r

  \  dMessage.innerHTML = isdef(msg) ? msg : 'Time for a Break...';\r

  \  d.style.textAlign = 'center';\r

  \  mText('Unit Score:', d, { fz: 22 });\r

  \  for (const gname in U.session) {\r

  \    let sc = U.session[gname];\r

  \    if (sc.nTotal == 0) continue;\r

  \    if (DB.games[gname].controllerType == 'solitaire')
  mText(`${DB.games[gname].friendly}: ${sc.nCorrect}/${sc.nTotal} correct
  answers (${sc.percentage}%) `, d, style);\r

  \    else if (DB.games[gname].controllerType == 'solo') {\r

  \      mText(`${DB.games[gname].friendly}: Won:${sc.nWins},
  Lost:${sc.nLoses}, Tied:${sc.nTied} `, d, style);\r

  \    }\r

  \  }\r

  \  mClass(mBy('freezer2'), 'aniSlowlyAppear');\r

  }"
aniInstruction: "function aniInstruction(spoken) {\r

  \  if (isdef(spoken)) sayRandomVoice(spoken);\r

  \  mClass(dInstruction, 'onPulse');\r

  \  setTimeout(() => mRemoveClass(dInstruction, 'onPulse'), 500);\r

  }"
anim_face_down: function anim_face_down(item, ms = 300, callback = null) {
  face_up(item); anim_toggle_face(item, callback); }
anim_face_up: function anim_face_up(item, ms = 300, callback = null) {
  face_down(item); anim_toggle_face(item, callback); }
anim_from_deck_to_hand: "function anim_from_deck_to_hand(el, deck, hand) {\r

  \  let topmost = deck.items.shift();\r

  \  console.assert(el == topmost, 'top deck elem is NOT correct!!!!')\r

  \  face_up(topmost);\r

  \  let dfrom = iDiv(topmost);\r

  \  deck.list = deck.items.map(x => x.key);\r

  \  deck.topmost = deck.items[0];\r

  \  let dto = iDiv(arrLast(hand.items));\r

  \  let rfrom = getRect(dfrom, mBy('inner_left_panel'));\r

  \  let rto = getRect(dto, mBy('inner_left_panel'));\r

  \  dfrom.style.xIndex = 100;\r

  \  let [offx, offy] = [OVW, 0]\r

  \  let a = aTranslateByEase(dfrom, offx + rto.l - rfrom.l, offy + rto.t -
  rfrom.t, 500, 'ease');\r

  \  a.onfinish = () => {\r

  \    dfrom.remove();\r

  \    dfrom.style.position = 'static';\r

  \    hand.items.push(topmost);\r

  \    hand.list = hand.items.map(x => x.key);\r

  \    mAppend(hand.container, dfrom);\r

  \    mContainerSplay(hand.container, 2, CWIDTH, CHEIGHT, hand.list.length,
  OVW);\r

  \    mItemSplay(topmost, hand.list, 2, OVW);\r

  \  };\r

  }"
anim_from_deck_to_handX: "function anim_from_deck_to_handX(el, deck, hand) {\r

  \  anim_turn_top_card(el, () => anim_move_top_card(el, deck, hand));\r

  }"
anim_from_deck_to_marketX: "function anim_from_deck_to_marketX(deck, market) {\r

  \  anim_turn_top_cardX(deck, () => anim_move_top_card_marketX(deck,
  market));\r

  }"
anim_from_deck_to_marketX_orig: "function anim_from_deck_to_marketX_orig(el,
  deck, market) {\r

  \  anim_turn_top_card(el, () => anim_move_top_card_market(el, deck,
  market));\r

  }"
anim_move_top_card: "function anim_move_top_card(el, deck, hand) {\r

  \  let topmost = deck.items.shift();\r

  \  console.assert(el == topmost, 'top deck elem is NOT correct!!!!')\r

  \  let dfrom = iDiv(topmost);\r

  \  deck.list = deck.items.map(x => x.key);\r

  \  deck.topmost = deck.items[0];\r

  \  let dto = iDiv(arrLast(hand.items));\r

  \  let rfrom = getRect(dfrom, mBy('inner_left_panel'));\r

  \  let rto = getRect(dto, mBy('inner_left_panel'));\r

  \  dfrom.style.xIndex = 100;\r

  \  let [offx, offy] = [OVW, 0]\r

  \  let a = aTranslateByEase(dfrom, offx + rto.l - rfrom.l, offy + rto.t -
  rfrom.t, 500, 'ease');\r

  \  a.onfinish = () => {\r

  \    dfrom.remove();\r

  \    dfrom.style.position = 'static';\r

  \    hand.items.push(topmost);\r

  \    hand.list = hand.items.map(x => x.key);\r

  \    mAppend(hand.container, dfrom);\r

  \    mContainerSplay(hand.container, 2, CWIDTH, CHEIGHT, hand.list.length,
  OVW);\r

  \    mItemSplay(topmost, hand.list, 2, OVW);\r

  \    qanim();\r

  \  };\r

  }"
anim_move_top_card_market: "function anim_move_top_card_market(deck, market) {\r

  \  let topmost = deck.items.shift();\r

  \  let dfrom = iDiv(topmost);\r

  \  deck.list = deck.items.map(x => x.key);\r

  \  deck.topmost = deck.items[0];\r

  \  let dto = isEmpty(market.items) ? market.container :
  iDiv(arrLast(market.items));\r

  \  let rfrom = getRect(dfrom, mBy('inner_left_panel'));\r

  \  let rto = getRect(dto, mBy('inner_left_panel'));\r

  \  dfrom.style.xIndex = 100;\r

  \  let [offx, offy] = isEmpty(market.items) ? [4, 4] : [topmost.w, 0];\r

  \  let a = aTranslateByEase(dfrom, offx + rto.l - rfrom.l, offy + rto.t -
  rfrom.t, 500, 'ease');\r

  \  a.onfinish = () => {\r

  \    dfrom.remove();\r

  \    dfrom.style.position = 'static';\r

  \    dfrom.style.zIndex = 0;\r

  \    market.items.push(topmost);\r

  \    market.list = market.items.map(x => x.key);\r

  \    mAppend(market.container, dfrom);\r

  \    qanim();\r

  \  };\r

  }"
anim_move_top_card_marketX: "function anim_move_top_card_marketX(deck, market)
  {\r

  \  let topmost = deck.items.shift();\r

  \  let dfrom = iDiv(topmost);\r

  \  deck.list = deck.items.map(x => x.key);\r

  \  deck.topmost = deck.items[0];\r

  \  let dto = isEmpty(market.items) ? market.container :
  iDiv(arrLast(market.items));\r

  \  let rfrom = getRect(dfrom, mBy('inner_left_panel'));\r

  \  let rto = getRect(dto, mBy('inner_left_panel'));\r

  \  dfrom.style.xIndex = 100;\r

  \  let [offx, offy] = isEmpty(market.items) ? [4, 4] : [topmost.w, 0];\r

  \  let a = aTranslateByEase(dfrom, offx + rto.l - rfrom.l, offy + rto.t -
  rfrom.t, 500, 'ease');\r

  \  a.onfinish = () => {\r

  \    dfrom.remove();\r

  \    dfrom.style.position = 'static';\r

  \    dfrom.style.zIndex = 0;\r

  \    market.items.push(topmost);\r

  \    market.list = market.items.map(x => x.key);\r

  \    mAppend(market.container, dfrom);\r

  \    qanim();\r

  \  };\r

  }"
anim_move_top_cardX: "function anim_move_top_cardX(deck, hand) {\r

  \  let topmost = deck.items.shift();\r

  \  let dfrom = iDiv(topmost);\r

  \  deck.list = deck.items.map(x => x.key);\r

  \  deck.topmost = deck.items[0];\r

  \  let dto = iDiv(arrLast(hand.items));\r

  \  let rfrom = getRect(dfrom, mBy('inner_left_panel'));\r

  \  let rto = getRect(dto, mBy('inner_left_panel'));\r

  \  dfrom.style.xIndex = 100;\r

  \  let [offx, offy] = [OVW, 0]\r

  \  let a = aTranslateByEase(dfrom, offx + rto.l - rfrom.l, offy + rto.t -
  rfrom.t, 500, 'ease');\r

  \  a.onfinish = () => {\r

  \    dfrom.remove();\r

  \    dfrom.style.position = 'static';\r

  \    hand.items.push(topmost);\r

  \    hand.list = hand.items.map(x => x.key);\r

  \    mAppend(hand.container, dfrom);\r

  \    mContainerSplay(hand.container, 2, CWIDTH, CHEIGHT, hand.list.length,
  OVW);\r

  \    mItemSplay(topmost, hand.list, 2, OVW);\r

  \    qanim();\r

  \  };\r

  }"
anim_toggle_face: "function anim_toggle_face(item, ms = 300, callback = null)
  {\r

  \  let d = iDiv(item);\r

  \  mClass(d, 'aniflip');\r

  \  TO.anim = setTimeout(() => {\r

  \    if (item.faceUp) face_down(item); else face_up(item); mClassRemove(d,
  'aniflip');\r

  \    if (isdef(callback)) callback();\r

  \  }, ms);\r

  }"
anim_toggle_face_orig: "function anim_toggle_face_orig(item, callback) {\r

  \  let d = iDiv(item);\r

  \  mClass(d, 'aniflip');\r

  \  TO.anim = setTimeout(() => {\r

  \    if (item.faceUp) face_down(item); else face_up(item); mClassRemove(d,
  'aniflip');\r

  \    if (isdef(callback)) callback();\r

  \  }, 300);\r

  }"
anim_turn_top_card: "function anim_turn_top_card(el, callback) {\r

  \  anim_toggle_face(el, callback);\r

  }"
anim_turn_top_cardX: function anim_turn_top_cardX(deck, callback) {
  anim_toggle_face(deck.topmost, callback); }
anim1: "function anim1(elem, prop, from, to, ms) {\r

  \  if (prop == 'left') elem.style.position = 'absolute';\r

  \  if (isNumber(from)) from = '' + from + 'px';\r

  \  if (isNumber(to)) to = '' + to + 'px';\r

  }"
animate: "function animate(elem, aniclass, timeoutms) {\r

  \  mClass(elem, aniclass);\r

  \  TOMan.TO.anim = setTimeout(() => mRemoveClass(elem, aniclass),
  timeoutms);\r

  }"
animate_card_approx: "function animate_card_approx(card, goal, ms, callback) {\r

  \  let d = iDiv(card);\r

  \  let dgoal = iDiv(goal);\r

  \  let r = getRect(d);\r

  \  let rgoal = getRect(dgoal);\r

  \  let c = { x: r.x + r.w / 2, y: r.y + r.h / 2 };\r

  \  let cgoal = { x: rgoal.x + rgoal.w / 2, y: rgoal.y + rgoal.h / 2 };\r

  \  let v = { x: cgoal.x - c.x, y: cgoal.y - c.y };\r

  \  mAnimateList(d, { transform: `translateX(${v.x}px) translateY(${v.y}px)`,
  opacity: 0 }, callback, ms, 'linear');\r

  }"
animate_card_exchange: "function animate_card_exchange(i0, i1, callback) {\r

  \  ari_make_unselectable(i0);\r

  \  ari_make_unselectable(i1);\r

  \  let d0 = iDiv(i0.o);\r

  \  let d1 = iDiv(i1.o);\r

  \  let r0 = getRect(d0);\r

  \  let r1 = getRect(d1);\r

  \  let c0 = { x: r0.x + r0.w / 2, y: r0.y + r0.h / 2 };\r

  \  let c1 = { x: r1.x + r1.w / 2, y: r1.y + r1.h / 2 };\r

  \  let v = { x: c1.x - c0.x, y: c1.y - c0.y };\r

  \  mTranslateBy(d0, v.x, v.y);\r

  \  mTranslateBy(d1, -v.x, -v.y, 700, callback);\r

  }"
animate_card_transfer: "function animate_card_transfer(card, goal, callback) {\r

  \  let d = iDiv(card);\r

  \  let dgoal = iDiv(goal);\r

  \  let r = getRect(d);\r

  \  let rgoal = getRect(dgoal);\r

  \  let c = { x: r.x + r.w / 2, y: r.y + r.h / 2 };\r

  \  let cgoal = { x: rgoal.x + rgoal.w / 2, y: rgoal.y + rgoal.h / 2 };\r

  \  let v = { x: cgoal.x - c.x, y: cgoal.y - c.y };\r

  \  mTranslateBy(d, v.x, v.y, 700, callback);\r

  }"
animate_title: "function animate_title() {\r

  \  var rev = \"fwd\";\r

  \  function titlebar(val) {\r

  \    var msg = \"Hallodi!\";\r

  \    var res = \" \";\r

  \    var speed = 100;\r

  \    var pos = val;\r

  \    msg = \"   |-\" + msg + \"-|\";\r

  \    var le = msg.length;\r

  \    if (rev == \"fwd\") {\r

  \      if (pos < le) {\r

  \        pos = pos + 1;\r

  \        scroll = msg.substr(0, pos);\r

  \        document.title = scroll;\r

  \        timer = window.setTimeout(\"titlebar(\" + pos + \")\", speed);\r

  \      }\r

  \      else {\r

  \        rev = \"bwd\";\r

  \        timer = window.setTimeout(\"titlebar(\" + pos + \")\", speed);\r

  \      }\r

  \    }\r

  \    else {\r

  \      if (pos > 0) {\r

  \        pos = pos - 1;\r

  \        var ale = le - pos;\r

  \        scrol = msg.substr(ale, le);\r

  \        document.title = scrol;\r

  \        timer = window.setTimeout(\"titlebar(\" + pos + \")\", speed);\r

  \      }\r

  \      else {\r

  \        rev = \"fwd\";\r

  \        timer = window.setTimeout(\"titlebar(\" + pos + \")\", speed);\r

  \      }\r

  \    }\r

  \  }\r

  \  titlebar(0);\r

  }"
animateColor: "function animateColor(elem, from, to, classes, ms) {\r

  \  elem.style.backgroundColor = from;\r

  \  setTimeout(() => animate(elem, classes, ms), 10);\r

  }"
animateColorScale: "function animateColorScale(elem, color = 'green', scale =
  1.5, timeoutms = 2000, aniClass = 'scaleInColor') {\r

  \  setCSSVariable('--aniColor', color);\r

  \  setCSSVariable('--aniScale', scale);\r

  \  mClass(elem, aniClass);\r

  \  setTimeout(() => mRemoveClass(elem, aniClass), timeoutms);\r

  }"
animatedTitle: "function animatedTitle(msg = 'DU BIST DRAN!!!!!') {\r

  \  TO.titleInterval = setInterval(() => {\r

  \    let corner = CORNERS[WhichCorner++ % CORNERS.length];\r

  \    document.title = `${corner} ${msg}`; //'⌞&amp;21543;    U+231E
  \\0xE2Fo\\u0027o Bar';\r

  \  }, 1000);\r

  }"
animateProperty: "function animateProperty(elem, prop, start, middle, end,
  msDuration, forwards) {\r

  \  let kflist = [];\r

  \  for (const v of [start, middle, end]) {\r

  \    let o = {};\r

  \    o[prop] = isString(v) || prop == 'opacity' ? v : '' + v + 'px';\r

  \    kflist.push(o);\r

  \  }\r

  \  let opts = { duration: msDuration };\r

  \  if (isdef(forwards)) opts.fill = forwards;\r

  \  elem.animate(kflist, opts);\r

  }"
animatePropertyX: "function animatePropertyX(elem, prop, start_middle_end,
  msDuration, forwards, easing, delay) {\r

  \  let kflist = [];\r

  \  for (const perc in start_middle_end) {\r

  \    let o = {};\r

  \    let val = start_middle_end[perc];\r

  \    o[prop] = isString(val) || prop == 'opacity' ? val : '' + val + 'px';\r

  \    kflist.push(o);\r

  \  }\r

  \  let opts = { duration: msDuration, fill: valf(forwards, 'none'), easing:
  valf(easing, 'ease-it-out'), delay: valf(delay, 0) };\r

  \  elem.animate(kflist, opts);\r

  }"
animateStyles: "function animateStyles(d, styles1, styles2, ms) {\r

  \  d.style.transition = `${ms}ms`;\r

  \  mStyle(d, styles2);\r

  }"
Animation: "function Animation(spriteSheet, imgWidth, imgHeight, cellWidth,
  cellHeight) {\r

  \  this.sheet = spriteSheet;\r

  \  this.imgWidth = imgWidth;\r

  \  this.imgHeight = imgHeight;\r

  \  this.cellWidth = cellWidth;\r

  \  this.cellHeight = cellHeight;\r

  \  this.animationLength = 1000;\r

  \  this.changeLength = false;\r

  \  this.cycles = new Array();\r

  \  this.currentCycleName = \"\";\r

  \  this.currentCycle = null;\r

  \  this.cyclePlaySettings = new Array(PLAY_LOOP, PLAY_LOOP, PLAY_LOOP,
  PLAY_LOOP);\r

  \  this.changeAnimation = false;\r

  \  this.timer = new Timer();\r

  \  this.framesPerRow = 0;\r

  \  this.framesPerColumn = 0;\r

  \  this.totalCycleTime = 0;\r

  \  this.fps = 0;\r

  \  this.isPaused = false;\r

  \  this.setup = function () {\r

  \    this.timer.start();\r

  \    this.framesPerRow = this.imgWidth / this.cellWidth;\r

  \    this.framesPerColumn = this.imgHeight / this.cellHeight;\r

  \  }\r

  \  this.addCycle = function (cycleName, startingCell, frames) {\r

  \    cycle = new Array(cycleName, startingCell, frames);\r

  \    this.cycles.push(cycle);\r

  \  }\r

  \  this.drawFrame = function (ctx) {\r

  \    this.fps += 1;\r

  \    if (!this.isPaused) { this.totalCycleTime +=
  this.timer.getTimeElapsed(); }\r

  \    if (this.changeAnimation == true) {\r

  \      for (i = 0; i < this.cycles.length; i++) {\r

  \        if (this.cycles[i][0] == this.currentCycleName) {\r

  \          this.currentCycle = this.cycles[i];\r

  \        }\r

  \      }\r

  \    }\r

  \    if (this.changeAnimation || this.changeLength) {\r

  \      this.frameDelta = this.animationLength / this.currentCycle[2];\r

  \      this.changeAnimation = false;\r

  \      this.changeLength = false;\r

  \      this.fps = 0;\r

  \    }\r

  \    currentFrame = Math.floor((this.totalCycleTime % this.animationLength)
  / this.frameDelta);\r

  \    document.getElementById(\"FPS\").innerHTML = this.animationLength;\r

  \    row = Math.floor((this.currentCycle[1] + currentFrame) /
  this.framesPerRow);\r

  \    col = (this.currentCycle[1] + currentFrame) - (row *
  Math.floor(this.imgWidth / this.cellWidth));\r

  \    frameY = row * this.cellHeight;\r

  \    frameX = col * this.cellWidth;\r

  \    ctx.drawImage(this.sheet, frameX, frameY, this.cellWidth,
  this.cellHeight, 0 - (this.cellWidth / 2), 0 - (this.cellHeight / 2),
  this.cellWidth, this.cellHeight);\r

  \  }\r

  \  this.setCycle = function (cycleName) {\r

  \    this.currentCycleName = cycleName;\r

  \    this.changeAnimation = true;\r

  \    this.totalCycleTime = 0;\r

  \  }\r

  \  this.renameCycles = function (cycleNames) {\r

  \    for (i = 0; i < cycleNames.length; i++) {\r

  \      number = parseInt(this.cycles[i][0].slice(5));\r

  \      if (this.currentCycleName == this.cycles[i][0]) {
  this.currentCycleName = cycleNames[number - 1]; }\r

  \      this.cycles[i][0] = cycleNames[number - 1];\r

  \    }\r

  \  }\r

  \  this.play = function () {\r

  \    this.isPaused = false;\r

  \    this.timer.reset();\r

  \  }\r

  \  this.pause = function () {\r

  \    this.isPaused = true;\r

  \  }\r

  \  this.reset = function () {\r

  \    this.totalCycleTime = 0;\r

  \    this.timer.reset();\r

  \  }\r

  \  this.setAnimationSpeed = function (animLength) {\r

  \    if (animLength <= 50) { animLength = 50; }\r

  \    this.animationLength = animLength;\r

  \    this.changeLength = true;\r

  \  }\r

  }"
animationCallback: "function animationCallback(secs, callback, removeBg = false)
  {\r

  \  for (const p of Pictures) { slowlyTurnFaceDown(p, secs - 1, removeBg);
  }\r

  \  TOMain = setTimeout(() => {\r

  \    callback();\r

  \  }, secs * 1000);\r

  }"
animbuilding: "function animbuilding(ui_building, ms = 800, callback = null) {\r

  \  let d = ui_building.cardcontainer;\r

  \  let ani = [{ transform: 'scale(1)' }, { transform: 'scale(1.5)' }, {
  transform: 'scale(1)' }];\r

  \  let options = {\r

  \    duration: ms,\r

  \    iterations: 1,\r

  \    easing: 'ease-out',\r

  \  };\r

  \  let a = d.animate(ani, options);\r

  \  a.onfinish = callback;\r

  }"
animcoin: "function animcoin(plname, ms = 800, callback = null) {\r

  \  let d = UI.player_stat_items[plname].dCoin;\r

  \  let ani = [{ transform: 'scale(1)' }, { transform: 'scale(3)' }, {
  transform: 'scale(1)' }];\r

  \  let options = {\r

  \    duration: ms,\r

  \    iterations: 1,\r

  \    easing: 'ease-out',\r

  \  };\r

  \  let a = d.animate(ani, options);\r

  \  a.onfinish = () => {\r

  \    let uplayer = Z.uplayer;\r

  \    let dAmount = UI.player_stat_items[uplayer].dAmount;\r

  \    dAmount.innerHTML = Z.fen.players[uplayer].coins;\r

  \    mStyle(dAmount, { fg: 'red' });\r

  \    if (callback) callback();\r

  \  };\r

  }"
animtest: "function animtest(d, ms = 1000, callback) {\r

  \  let spinAway = [\r

  \    { transform: 'rotate(0) scale(1)' },\r

  \    { transform: 'rotate(360deg) scale(0)' }\r

  \  ];\r

  \  spinAway = [\r

  \    { transform: 'rotate(0) scale(1)' },\r

  \    { transform: 'rotate(180deg) scale(0)' },\r

  \    { transform: 'rotate(360deg) scale(2)' }\r

  \  ];\r

  \  spinAway = [\r

  \    { transform: 'scale(1)' },\r

  \    { transform: 'scale(3)' },\r

  \    { transform: 'scale(1)' }\r

  \  ];\r

  \  let options = {\r

  \    duration: ms,\r

  \    iterations: 1,\r

  \    easing: 'ease-out', //'cubic-bezier(.24,.65,.78,.03)',\r

  \    //easing: 'cubic-bezier(.89,.31,.67,1.05)', //
  'cubic-bezier(.55,.22,.52,.98)' //'cubic-bezier(1,-0.03,.86,.68)'\r

  \  }\r

  \  d.addEventListener('click', (ev) => {\r

  \    evNoBubble(ev);\r

  \    let a = d.animate(spinAway, options);\r

  \    a.onfinish = callback;\r

  \  });\r

  }"
aniPulse: function aniPulse(elem, ms) { animate(elem, 'onPulse', ms); }
anipulse: "function anipulse(d, ms = 3000, callback) {\r

  \  let a = d.animate(\r

  \    [{\r

  \      'background-color': '#2ba805',\r

  \      'box-shadow': '0 0 3px #2ba805'\r

  \    },\r

  \    {\r

  \      'background-color': `#49e819`,\r

  \      'box-shadow': `0 0 10px #49e819`,\r

  \    },\r

  \    {\r

  \      'background-color': `#2ba805`,\r

  \      'box-shadow': `0 0 3px #2ba805`\r

  \    }], { fill: 'both', duration: ms, easing: 'ease', delay: 1000 });\r

  \  a.onfinish = callback;\r

  \  return a;\r

  }"
aniSequence: "function aniSequence() {\r\n}"
aniSuper: "function aniSuper(elem, name, duration, easing, delay, iterations,
  direction, before_after, playstate) {\r

  }"
annotate: "function annotate(sp) {\r

  \  for (const k in sp) {\r

  \    let node = sp[k];\r

  \    node.pool = [];\r

  \    let pool = makePool(node);\r

  \    for (const oid in pool) {\r

  \      let o = pool[oid];\r

  \      if (!evalCond(o, node)) continue;\r

  \      if (nundef(o.RSG)) o.RSG = {};\r

  \      let rsg = o.RSG;\r

  \      rsg[k] = true;\r

  \      node.pool.push(oid);\r

  \    }\r

  \  }\r

  }"
any: "function any(arr, cond) {\r

  \  return !isEmpty(arr.filter(cond));\r

  }"
anyStartsWith: "function anyStartsWith(arr, prefix) {\r

  \  return any(arr, el => startsWith(el, prefix));\r

  }"
anyString: "function anyString(x, indent = 0, ifDict = 'entries') {\r

  \  if (isLiteral(x)) return x;\r

  \  else if (isListOfLiterals(x)) return x.join(' ');\r

  \  else if (isEmpty(x)) return x;\r

  \  else if (isList(x)) { return x.map(el => anyString(el, indent + 1,
  ifDict)).join(' '); }\r

  \  else if (isDict(x)) {\r

  \    let s = '';\r

  \    for (const k in x) { s += '\\n' + ' '.repeat(indent) + k + ': ' +
  anyString(x[k], indent + 1, ifDict); }\r

  \    return s;\r

  \  }\r

  }"
anyString2: "function anyString2(x, indent = 0, proplist, include = true,
  toplevelOnly = false) {\r

  \  if (isLiteral(x)) return x;\r

  \  else if (isListOfLiterals(x)) return x.join(' ');\r

  \  else if (isEmpty(x)) return x;\r

  \  else if (isList(x)) {\r

  \    if (toplevelOnly) proplist = null;\r

  \    return x.map(el => anyString2(el, indent + 1, proplist,
  include)).join(' ');\r

  \  }\r

  \  else if (isDict(x)) {\r

  \    let plist = proplist;\r

  \    if (toplevelOnly) proplist = null;\r

  \    let s = '';\r

  \    if (isdef(plist)) {\r

  \      if (include) {\r

  \        for (const k of plist) {\r

  \          if (nundef(x[k])) { console.log('continue', x, k); continue; }\r

  \          s += '\\n' + ' '.repeat(indent) + k + ': ' + anyString2(x[k],
  indent + 1, proplist, include);\r

  \        }\r

  \      } else {\r

  \        for (const k of plist) {\r

  \          if (isdef(x[k])) continue;\r

  \          s += '\\n' + ' '.repeat(indent) + k + ': ' + anyString2(x[k],
  indent + 1, proplist, include);\r

  \        }\r

  \      }\r

  \    } else {\r

  \      for (const k in x) { s += '\\n' + ' '.repeat(indent) + k + ': ' +
  anyString2(x[k], indent + 1, proplist, include); }\r

  \    }\r

  \    return s;\r

  \  }\r

  }"
anyString3: "function anyString3(x, indent = 0, proplist = null, include = true,
  guard = ['specKey', 'label', 'pool', 'el', 'sub', 'elm', 'cond', 'info', 'o',
  'ui', 'source', 'bi']) {\r

  \  if (isLiteral(x)) return x;\r

  \  else if (isListOfLiterals(x)) return x.join(' ');\r

  \  else if (isEmpty(x)) return x;\r

  \  else if (isList(x)) {\r

  \    return x.map(el => anyString3(el, indent + 1, proplist,
  include)).join(' ');\r

  \  }\r

  \  else if (isDict(x)) {\r

  \    let s = '';\r

  \    for (const k in x) {\r

  \      if (guard.includes(k)) continue;\r

  \      if (isdef(proplist) && !include && proplist.includes(k)) continue;\r

  \      else if (isdef(proplist) && include && !proplist.includes(k))
  continue;\r

  \      s += '\\n' + ' '.repeat(indent) + k + ': ' + anyString3(x[k], indent
  + 1, proplist, include);\r

  \    }\r

  \    return s;\r

  \  }\r

  }"
anyToString1: "function anyToString1(x, indent = 0, ifDict = 'entries') {\r

  \  if (isList(x) && !isEmpty(x)) { return x.join(' '); }\r

  \  else if (isDict(x)) {\r

  \    return ifDict == 'keys' ? Object.keys(x).join(' ')\r

  \      : ifDict == 'entries' ? Object.entries(x).map(([k, v]) => k + ': ' +
  dictOrListToString(v, 'ifDict', indent + 2)).join('\\n')\r

  \        : Object.entries(x).join(' ');\r

  \  }\r

  \  else return x;\r

  }"
anyWordContainedInKeys: "function anyWordContainedInKeys(dict, keywords) {\r

  \  let res = [];\r

  \  for (const k in dict) {\r

  \    let isMatch = false;\r

  \    for (const w of keywords) {\r

  \      if (k.includes(w)) { isMatch = true; break; }\r

  \    }\r

  \    if (isMatch) res.push(dict[k]);\r

  \  }\r

  \  return res;\r

  }"
anyWordContainedInKeysAsWord: "function anyWordContainedInKeysAsWord(dict,
  keywords) {\r

  \  let res = [];\r

  \  for (const k in dict) {\r

  \    let isMatch = false;\r

  \    let wordsInKey = splitAtWhiteSpace(k);\r

  \    for (const w of keywords) {\r

  \      if (wordsInKey.includes(w)) { isMatch = true; break; }\r

  \    }\r

  \    if (isMatch) res.push(dict[k]);\r

  \  }\r

  \  return res;\r

  }"
anyWordContainedInProps: "function anyWordContainedInProps(dict, keywords,
  props) {\r

  \  let res = [];\r

  \  for (const k in dict) {\r

  \    let isMatch = false;\r

  \    let propString = '';\r

  \    for (const p of props) { propString += dict[k][p]; }\r

  \    for (const w of keywords) {\r

  \      if (propString.includes(w)) { isMatch = true; break; }\r

  \    }\r

  \    if (isMatch) res.push(dict[k]);\r

  \  }\r

  \  return res;\r

  }"
anyWordContainedInPropsAsWord: "function anyWordContainedInPropsAsWord(dict,
  keywords, props) {\r

  \  let res = [];\r

  \  for (const k in dict) {\r

  \    let isMatch = false;\r

  \    let keywordList = [];\r

  \    for (const p of props) {\r

  \      if (nundef(dict[k][p])) continue;\r

  \      let wordsInKey = splitAtWhiteSpace(dict[k][p]);\r

  \      keywordList = keywordList.concat(wordsInKey);\r

  \    }\r

  \    for (const w of keywords) {\r

  \      if (keywordList.includes(w)) { isMatch = true; break; }\r

  \    }\r

  \    if (isMatch) res.push(dict[k]);\r

  \  }\r

  \  return res;\r

  }"
apiphp: "function apiphp(o, saveFromZ = false) {\r

  \  let [data, cmd] = [o.data, o.cmd];\r

  \  let result = {}, friendly, uname, state, player_status, fen;\r

  \  if (saveFromZ && isdef(data.friendly) && !db_table_exists(data.friendly))
  {\r

  \    let res = db_new_table(data.friendly, Z.game, Z.host,
  jsCopy(Z.playerlist), jsCopy(Z.fen), jsCopy(Z.options));\r

  \    if (isdef(Z.playerdata)) res.playerdata = jsCopy(Z.playerdata);\r

  \  }\r

  \  if (cmd == 'table') {\r

  \    if (isdef(data.auto)) result.auto = data.auto;\r

  \    friendly = data.friendly;\r

  \    uname = data.uname;\r

  \    result.status = \"table\";\r

  \    if (isdef(data.clear_players)) {\r

  \      result.playerdata = db_clear_players(friendly);\r

  \      result.status = \"clear_players\";\r

  \    } else if (isdef(data.write_player) && isdef(data.state)) {\r

  \      player_status = isdef(data.player_status) ? data.player_status :
  '';\r

  \      result.playerdata = db_write_player(friendly, uname, data.state,
  player_status);\r

  \      result.status = \"write_player\";\r

  \    } else {\r

  \      result.playerdata = db_read_playerdata(friendly);\r

  \    }\r

  \    if (isdef(data.write_fen)) {\r

  \      result.table = db_write_fen(friendly, data.fen);\r

  \      result.status += \" write_fen\";\r

  \    } else {\r

  \      result.table = db_read_table(friendly);\r

  \    }\r

  \  } else if (cmd == 'startgame') {\r

  \    let res = db_new_table(data.friendly, data.game, data.host,
  data.players, data.fen, data.options);\r

  \    result.table = res.table;\r

  \    result.playerdata = res.playerdata;\r

  \    result.status = `startgame ${data.friendly}`;\r

  \  } else if (cmd == 'tables') {\r

  \    result.tables = dict2list(GT, 'friendly').map(x => x.table);\r

  \    result.status = \"tables\";\r

  \  } else if (cmd == 'gameover') {\r

  \    result.table = db_write_fen(data.friendly, data.fen, data.scoring);\r

  \    result.status = `scored table ${data.friendly}`;\r

  \  }\r

  \  return result;\r

  }"
appears_once_only: "function appears_once_only(board, possibilities, segment, r,
  c) {\r

  \  let updated = false\r

  \  for (i = 0; i < possibilities.length; i++) {\r

  \    let possibility = possibilities[i]\r

  \    let counter = 0\r

  \    segment.forEach(cell => {\r

  \      if (Array.isArray(cell)) {\r

  \        if (cell.includes(possibility)) {\r

  \          counter++\r

  \        }\r

  \      } else {\r

  \        if (cell == possibility) {\r

  \          counter++\r

  \        }\r

  \      }\r

  \    })\r

  \    if (counter == 1) {\r

  \      board[r][c] = possibility\r

  \      updated = true\r

  \      break\r

  \    }\r

  \  }\r

  \  return updated\r

  }"
apply_skin1: "function apply_skin1(item) {\r

  \  let d = item.container; mCenterFlex(d); mStyle(d, { position: 'relative',
  w: 400 });\r

  \  mText(`${item.label}: <span
  style=\"font-size:20px;margin:10px;color:red\">${item.content}</span>`, d);\r

  \  let b = mButton(item.caption, item.handler, d, { position: 'absolute',
  right: 0, top: 'calc( 50% - 12px )', h: 24 }, ['selectbutton', 'enabled']);\r

  \  console.log('button', b)\r

  }"
apply_skin2: "function apply_skin2(item) {\r

  \  let d = item.container; mCenterFlex(d); mStyle(d, { position: 'relative',
  w: 400 });\r

  \  let h = 24;\r

  \  let top = `calc( 50% - ${h / 2}px )`\r

  \  mText(item.label + ':', d, { position: 'absolute', left: 0, top: top, h:
  h });\r

  \  mText(`<span
  style=\"font-size:20px;margin:10px;color:red\">${item.content}</span>`, d);\r

  \  item.button = mButton(item.caption, item.handler, d, { position:
  'absolute', right: 0, top: top, h: h, w: 80 }, ['selectbutton', 'enabled']);\r

  }"
apply_skin3: "function apply_skin3(item) {\r

  \  let d = item.container; mCenterCenterFlex(d); mStyle(d, { position:
  'relative', w: 400 });\r

  \  let h = 24;\r

  \  let top = `calc( 50% - ${h / 2}px )`\r

  \  mText(item.label + ':', d, { position: 'absolute', left: 0, top: top, h:
  h });\r

  \  let panel = UI.dAnzeige = item.panel = mDiv(d, { bg: '#ffffff80',
  padding: '4px 12px', w: 200, align: 'center', rounding: 8 });\r

  \  let words = toWords(item.content)\r

  \  let panelitems = UI.panelItems = item.panelitems = [];\r

  \  for (let i = 0; i < 4; i++) {\r

  \    let text = valf(words[i], '');\r

  \    let dw = mDiv(panel, { hpadding: 4, display: 'inline', fz: 22, weight:
  'bold', fg: 'red' }, `dbid_${i}`, text);\r

  \    panelitems.push({ div: dw, index: i, initial: text, state: 'unselected'
  })\r

  \  }\r

  \  let b = item.buttonX = mDiv(panel, { fz: 10, hpadding: 4, bg: 'white' },
  null, 'CLR', 'enabled'); mPlace(b, 'tr', 2)\r

  \  b.onclick = bluff_clear_panel;\r

  \  item.button = mButton(item.caption, item.handler, d, { position:
  'absolute', right: 0, top: top, h: h, w: 80 }, ['selectbutton', 'enabled']);\r

  }"
applyColorkey: "function applyColorkey(item) {\r

  \  let l = item.live;\r

  \  let sShade = '0 0 0 ' + item.textShadowColor;\r

  \  item.shadeStyles = { 'text-shadow': sShade, fg: colorFrom('black',
  l.options.contrast) };\r

  \  let ui = l.options.showPic ? l.dPic : l.dLabel;\r

  \  mStyleX(ui, item.shadeStyles);\r

  }"
applyCssStyles: "function applyCssStyles(ui, params) {\r

  \  let domType = getTypeOf(ui);\r

  \  if (domType == 'g') {\r

  \    mStyle(ui, params);\r

  \  } else {\r

  \    mStyle(ui, params);\r

  \  }\r

  }"
applySettings: "function applySettings(b, s, h = 768, topFrame = 0) {\r

  \  let isRealBoard = topFrame == 0;\r

  \  let hBoard = h, wBoard = 2 * h;\r

  \  let scale = hBoard / valf(s.hBoard, 768);\r

  \  calcLayoutParameters(s, b, scale);\r

  \  clearElement(b.dOuter);\r

  \  b.fields = null;\r

  \  createFields(s, b, scale);\r

  \  console.log('applySettings: baseColor', s.baseColor);\r

  \  if (isRealBoard) setNewBackgroundColor(s.baseColor);\r

  \  return b;\r

  }"
applyStandard: "function applyStandard(dParent, s, h = 768, topFrame = 0) {\r

  \  let isRealBoard = topFrame == 0;\r

  \  let b = { boardFilename: s.boardFilename };\r

  \  let hBoard = h, wBoard = 2 * h;\r

  \  let scale = hBoard / valf(s.hBoard, 768);\r

  \  calcLayoutParameters(s, b, scale);\r

  \  let d0;\r

  \  if (isRealBoard) {\r

  \    d0 = b.d0 = mDiv(dParent, { h: hBoard });\r

  \  } else {\r

  \    d0 = b.d0 = mDiv(dParent, { w: wBoard + 100, h: hBoard + topFrame },
  'd0_' + b.boardFilename);\r

  \  }\r

  \  mCenterCenterFlex(d0);\r

  \  let dOuter = b.dOuter = mDiv(d0, {}, 'dOuter_' + b.boardFilename);\r

  \  mCenterCenterFlex(dOuter);\r

  \  loadBoardImage(dParent, s, b, scale, topFrame != 0);\r

  \  console.log('applyStandard: baseColor', s.baseColor);\r

  \  if (isRealBoard) setNewBackgroundColor(s.baseColor);\r

  \  createFields(s, b, scale);\r

  \  return b;\r

  }"
applyStyles: "function applyStyles(g, id, styles) { g.mStyle(id, styles,
  isdef(g.getNode(id)) ? 'node' : 'edge'); }"
appSpecificSettings: "function appSpecificSettings() {\r

  \  updateLabelSettings();\r

  \  updateTimeSettings();\r

  \  updateKeySettings();\r

  \  updateSpeakmodeSettings();\r

  }"
areaBlink: "function areaBlink(id) {\r

  \  let area = UIS[id];\r

  \  if (area) area.elem.classList.add('blink');\r

  }"
areaRows: "function areaRows(soDict, loc) {\r

  \  let area = getVisual(loc);\r

  \  let [w, areaH] = area.getSize();\r

  \  let keys = getKeys(soDict);\r

  \  let n = keys.length;\r

  \  let h = Math.floor(areaH / n);\r

  \  let extra = areaH - n * h;\r

  \  let x = 0;\r

  \  let y = 0;\r

  \  let [iPalette, ipal] = area.getColorInfo();\r

  \  let pal = S.pals[iPalette];\r

  \  ipal = n <= pal.length - ipal ? ipal : n <= pal.length ? pal.length - n :
  ipal;\r

  \  let i = 0;\r

  \  for (const k in soDict) {\r

  \    let id = k;\r

  \    i += 1;\r

  \    let o = createMainDiv(id, loc);\r

  \    let h1 = i == n - 1 ? h + extra : h;\r

  \    o.setBounds(x, y, w, h1);\r

  \    o.setPalette(iPalette, ipal);\r

  \    y += h1;\r

  \    ipal = (ipal + 1) % pal.length;\r

  \  }\r

  }"
areNeighbors: "function areNeighbors(r1, r2) {\r

  \  let res = firstCond(r1.doors, x => x.includes(r1.id) &&
  x.includes(r2.id));\r

  \  return res != null;\r

  }"
aRestore: function aRestore(elem) { elem.style.transform = ''; }
ari_action_round_over: "function ari_action_round_over(otree, plturn) {\r

  \  ari_move_market_to_discard(otree);\r

  \  ari_move_stalls_to_hands(otree);\r

  \  ari_add_hand_card(otree);\r

  \  otree.round = [];\r

  \  otree.iturn = 0;\r

  \  if (otree.stage == 10) {\r

  \    otree.phase = 'queen';\r

  \    otree.stage = 3;\r

  \  } else if (otree.phase == 'king') {\r

  \    otree.pl_gameover = [];\r

  \    for (const uname of otree.plorder) {\r

  \      let [bcorrect, realvps] =
  ari_get_correct_buildings(otree[uname].buildings);\r

  \      let can_end = ari_check_end_condition(bcorrect);\r

  \      if (can_end) otree.pl_gameover.push(uname);\r

  \    }\r

  \    if (!isEmpty(otree.pl_gameover)) {\r

  \      otree.stage = 10;\r

  \      otree.iturn = otree.plorder.indexOf(otree.pl_gameover[0]);\r

  \    } else {\r

  \      otree.phase = 'queen';\r

  \      otree.stage = 3;\r

  \    }\r

  \  } else if (otree.phase == 'queen') {\r

  \    for (const uname of otree.plorder) {\r

  \      for (const k in otree[uname].buildings) {\r

  \        if (k == 'farms') continue;\r

  \        let n = otree[uname].buildings[k].length;\r

  \        otree[uname].coins += n;\r

  \      }\r

  \    }\r

  \    otree.phase = 'jack';\r

  \    otree.stage = 3;\r

  \  } else {\r

  \    ari_move_herald(otree, plturn);\r

  \    ari_add_harvest_cards(otree);\r

  \    otree.phase = 'king';\r

  \    ari_tax_phase_needed(otree, plturn);\r

  \  }\r

  }"
ari_activate_ui: function ari_activate_ui() { ari_pre_action(); }
ari_add_hand_card: "function ari_add_hand_card() {\r

  \  let fen = Z.fen;\r

  \  for (const uplayer of fen.plorder) {\r

  \    ari_ensure_deck(fen, 1);\r

  \    top_elem_from_to(fen.deck, fen.players[uplayer].hand);\r

  \  }\r

  }"
ari_add_harvest_cards: "function ari_add_harvest_cards(fen) {\r

  \  for (const plname of fen.plorder) {\r

  \    for (const f of fen.players[plname].buildings.farm) {\r

  \      if (nundef(f.h)) {\r

  \        let list = [];\r

  \        ari_ensure_deck(fen, 1);\r

  \        top_elem_from_to(fen.deck, list);\r

  \        f.h = list[0];\r

  \      }\r

  \    }\r

  \  }\r

  }"
ari_add_rumor: "function ari_add_rumor(fenbuilding, key) {\r

  \  if (nundef(fenbuilding.rumors)) fenbuilding.rumors = [];\r

  \  fenbuilding.rumors.push(key);\r

  }"
ari_branch: "function ari_branch(obj, otree, rtree) {\r

  \  verify_unit_test(otree);\r

  \  ari_player_stats(otree);\r

  \  G.plprev = G.plturn;\r

  \  let plturn = G.plturn = otree.plturn;\r

  \  let turn_changed = G.plprev != G.plturn;\r

  \  let my_turn = G.plturn == G.cur_user;\r

  \  console.assert(otree.plturn == otree.plorder[otree.iturn], 'TURN
  MIXUP!');\r

  \  if (TESTING) console.log('___ ITER:' + ITER, plturn, turn_changed ?
  '(changed)' : '', my_turn ? 'ME!' : '', isdef(otree.num_actions) ? 'actions:'
  + otree.num_actions : '');\r

  \  ari_present(otree, plturn);\r

  \  A = { level: 0, di: {}, ll: [], items: [], selected: [], tree: null,
  breadcrumbs: [], sib: [], command: null };\r

  \  console.assert(G.otree == otree, 'OTREE FAIL!!!!!!!!!!!');\r

  \  table_shield_off();\r

  \  if (isdef(otree.winner)) {\r

  \    stop_game();\r

  \    ari_reveal_all_buildings(otree);\r

  \    if (!TestRunning) turn_show_gameover(otree);\r

  \  } else if (G.cur_user == plturn || is_admin(G.cur_user)) {\r

  \    ari_pre_action(otree, plturn);\r

  \  } else {\r

  \    let txt = otree.num_actions > 0 ? ('(' + otree.action_number + '/' +
  otree.total_pl_actions + ')') : '';\r

  \    dTop.innerHTML =\r

  \      `<div style='padding:4px
  10px;font-size:20px;display:flex;justify-content:space-between'>\r

  \      <div>${G.table.friendly.toLowerCase()}</div>\r

  \      <div>${plturn} ${txt} ${ARI.stage[otree.stage]}</div>\r

  \      <div>phase: ${otree.phase.toUpperCase()}</div>\r

  \    </div>`;\r

  \    table_shield_on();\r

  \  }\r

  }"
ari_calc_fictive_vps: "function ari_calc_fictive_vps(fen, plname) {\r

  \  let pl = fen.players[plname];\r

  \  let bs = pl.buildings;\r

  \  let vps = calc_building_vps(bs);\r

  \  return vps;\r

  }"
ari_calc_real_vps: "function ari_calc_real_vps(fen, plname) {\r

  \  let pl = fen.players[plname];\r

  \  let bs = ari_get_correct_buildings(pl.buildings);\r

  \  let vps = calc_building_vps(bs);\r

  \  for (const btype in bs) {\r

  \    let blist = bs[btype];\r

  \    for (const b of blist) {\r

  \      let lead = b.list[0];\r

  \      if (firstCond(pl.commissions, x => x[0] == lead[0])) {\r

  \        vps += 1;\r

  \      }\r

  \    }\r

  \  }\r

  \  return vps;\r

  }"
ari_check_action_available: "function ari_check_action_available(a, fen,
  uplayer) {\r

  \  let cards;\r

  \  let pl = fen.players[uplayer];\r

  \  if (a == 'trade') {\r

  \    cards = ari_get_all_trading_cards(fen);\r

  \    let not_pl_stall = cards.filter(x => !pl.stall.includes(x.key));\r

  \    return cards.length >= 2 && pl.stall.length > 0 && not_pl_stall.length
  > 0;\r

  \  } else if (a == 'exchange') {\r

  \    cards = ari_get_all_wrong_building_cards(fen, uplayer);\r

  \    return cards.length > 0 && (pl.hand.length + pl.stall.length > 0);\r

  \  } else if (a == 'build') {\r

  \    let res = ari_get_player_hand_and_stall(fen, uplayer);\r

  \    if (res.length < 4) return false;\r

  \    let has_a_king = firstCond(res, x => x[0] == 'K');\r

  \    if (pl.coins < 1 && !has_a_king) return false;\r

  \    if (fen.phase != 'king' && (!has_a_king || res.length < 5)) return
  false;\r

  \    if (pl.coin == 0 && res.length < 5) return false;\r

  \    return true;\r

  \  } else if (a == 'upgrade') {\r

  \    if (isEmpty(pl.buildings.farm) && isEmpty(pl.buildings.estate)) return
  false;\r

  \    let res = ari_get_player_hand_and_stall(fen, uplayer);\r

  \    if (isEmpty(res)) return false;\r

  \    let has_a_king = firstCond(res, x => x[0] == 'K');\r

  \    if (pl.coins < 1 && !has_a_king) return false;\r

  \    if (fen.phase != 'king' && !has_a_king) return false;\r

  \    if (pl.coin == 0 && res.length < 2) return false;\r

  \    return true;\r

  \  } else if (a == 'downgrade') {\r

  \    if (isEmpty(pl.buildings.chateau) && isEmpty(pl.buildings.estate))
  return false;\r

  \    return true;\r

  \  } else if (a == 'buy') {\r

  \    if (fen.open_discard.length == 0) return false;\r

  \    let res = ari_get_player_hand_and_stall(fen, uplayer);\r

  \    let has_a_jack = firstCond(res, x => x[0] == 'J');\r

  \    if (pl.coins < 1 && !has_a_jack) return false;\r

  \    if (fen.phase != 'jack' && !has_a_jack) return false;\r

  \    return true;\r

  \  } else if (a == 'visit') {\r

  \    let others = fen.plorder.filter(x => x != uplayer);\r

  \    let n = 0;\r

  \    for (const plname of others) {\r

  \      for (const k in fen.players[plname].buildings) {\r

  \        n += fen.players[plname].buildings[k].length;\r

  \      }\r

  \    }\r

  \    if (n == 0) return false;\r

  \    let res = ari_get_player_hand_and_stall(fen, uplayer);\r

  \    let has_a_queen = firstCond(res, x => x[0] == 'Q');\r

  \    if (pl.coins < 1 && !has_a_queen) return false;\r

  \    if (fen.phase != 'queen' && !has_a_queen) return false;\r

  \    return true;\r

  \  } else if (a == 'harvest') {\r

  \    let harvests = ari_get_all_building_harvest_cards(fen, uplayer);\r

  \    return !isEmpty(harvests);\r

  \  } else if (a == 'pickup') {\r

  \    return !isEmpty(pl.stall);\r

  \  } else if (a == 'sell') {\r

  \    return pl.stall.length >= 2;\r

  \  } else if (a == 'pass') {\r

  \    return true;\r

  \  } else if (a == 'commission') {\r

  \    for (const c of pl.commissions) {\r

  \      let rank = c[0];\r

  \      if (firstCond(pl.stall, x => x[0] == rank)) return true;\r

  \    }\r

  \    return false;\r

  \  } else if (a == 'rumor') {\r

  \    if (isEmpty(pl.rumors)) return false;\r

  \    let others = fen.plorder.filter(x => x != uplayer);\r

  \    let n = 0;\r

  \    for (const plname of others) {\r

  \      for (const k in fen.players[plname].buildings) {\r

  \        n += fen.players[plname].buildings[k].length;\r

  \      }\r

  \    }\r

  \    if (n == 0) return false;\r

  \    return true;\r

  \  } else if (a == 'inspect') {\r

  \    if (isEmpty(pl.rumors)) return false;\r

  \    let others = fen.plorder.filter(x => x != uplayer);\r

  \    let n = 0;\r

  \    for (const plname of others) {\r

  \      for (const k in fen.players[plname].buildings) {\r

  \        n += fen.players[plname].buildings[k].length;\r

  \      }\r

  \    }\r

  \    return n > 0;\r

  \  } else if (a == 'blackmail') {\r

  \    let others = fen.plorder.filter(x => x != uplayer);\r

  \    let n = 0;\r

  \    for (const plname of others) {\r

  \      for (const k in fen.players[plname].buildings) {\r

  \        let list = fen.players[plname].buildings[k];\r

  \        let building_with_rumor = firstCond(list, x =>
  !isEmpty(x.rumors));\r

  \        if (building_with_rumor) n++;\r

  \      }\r

  \    }\r

  \    if (n == 0) return false;\r

  \    let res = ari_get_player_hand_and_stall(fen, uplayer);\r

  \    let has_a_queen = firstCond(res, x => x[0] == 'Q');\r

  \    if (pl.coins < 1 && !has_a_queen) return false;\r

  \    if (fen.phase != 'queen' && !has_a_queen) return false;\r

  \    return true;\r

  \  } else if (a == 'buy rumor') {\r

  \    if (fen.deck_rumors.length == 0) return false;\r

  \    if (pl.coins < 1) return false;\r

  \    return true;\r

  \  }\r

  }"
ari_check_end_condition: "function ari_check_end_condition(blist) {\r

  \  let nchateau = blist.chateau.length;\r

  \  let nfarm = blist.farm.length;\r

  \  let nestate = blist.estate.length;\r

  \  if (nchateau >= 2 || nchateau >= 1 && nfarm >= 3 || nchateau >= 1 &&
  nestate >= 2) {\r

  \    return true;\r

  \  }\r

  \  return false;\r

  }"
ari_clear_church: "function ari_clear_church() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  for (const prop of ['church', 'church_order', 'selorder', 'tithemin',
  'tithe_minimum', 'toBeSelected', 'candidates']) delete fen[prop];\r

  \  for (const plname in fen.players) {\r

  \    delete fen.players[plname].tithes;\r

  \  }\r

  \  fen.church = ari_deck_deal_safe(fen, Z.plorder.length);\r

  }"
ari_complete_building: "function ari_complete_building() {\r

  \  let [otree, plturn] = [G.otree, G.otree.plturn];\r

  \  let building_items = A.selected.map(x => A.items[x]);\r

  \  let building_type = building_items.length == 4 ? 'farms' :
  building_items.length == '5' ? 'estates' : 'chateaus';\r

  \  console.log('...building a', building_type);\r

  \  otree[plturn].buildings[building_type].push({ list: building_items.map(x
  => x.key), h: null });\r

  \  for (const item of building_items) {\r

  \    let source = lookup(otree, item.path.split('.'));\r

  \    removeInPlace(source, item.key);\r

  \  }\r

  \  ari_redo_player_ui(otree, plturn);\r

  \  ari_next_action(otree, plturn);\r

  }"
ari_complete_upgrade: "function ari_complete_upgrade() {\r

  \  let [otree, plturn] = [G.otree, G.otree.plturn];\r

  \  let gb = A.building;\r

  \  let b = lookup(otree, gb.path.split('.'));\r

  \  let n = A.upgrade_cards.length;\r

  \  let type0 = gb.o.type;\r

  \  let len = gb.o.list.length + n;\r

  \  let type1 = len == 5 ? 'estates' : 'chateaus';\r

  \  let target = lookup(otree, gb.path.split('.'));\r

  \  for (const o of A.upgrade_cards) {\r

  \    let source = lookup(otree, o.path.split('.'));\r

  \    elem_from_to(o.key, source, target.list);\r

  \  }\r

  \  let bres = target;\r

  \  bres.harvest = null;\r

  \  removeInPlace(otree[plturn].buildings[type0], bres);\r

  \  otree[plturn].buildings[type1].push(bres);\r

  \  ari_redo_player_ui(otree, plturn);\r

  \  ari_next_action(otree, plturn);\r

  }"
ari_create_card_assets: "function ari_create_card_assets(scolors) {\r

  \  let sz = 100;\r

  \  set_card_constants(sz * .7, sz, 'A23456789TJQK', 'SHDC', scolors);\r

  \  let colors = { r: RED, b: BLUE, g: GREEN, p: PURPLE, y: YELLOW, o: ORANGE
  };\r

  \  let ranknames = { A: 'Ace', K: 'King', T: '10', J: 'Jack', Q: 'Queen'
  };\r

  \  let suitnames = { S: 'Spades', H: 'Hearts', C: 'Clubs', D: 'Diamonds'
  };\r

  \  let di = {};\r

  \  for (const r of Card.ranks) {\r

  \    for (const s of Card.suits) {\r

  \      for (const c of Card.decks) {\r

  \        let k = r + s + c;\r

  \        di[k] = { key: k, val: r == 'A' ? 1 : 'TJQK'.includes(r) ? 10 :
  Number(r), rank: r, suit: s, color: colors[c], c52key: 'card_' + r + s, w: sz
  * .7, h: sz, sz: sz, ov: Card.ovw, friendly: `${isNumber(r) ? r :
  ranknames[r]} of ${suitnames[s]}`, short: `${r}${s}` };\r

  \      }\r

  \    }\r

  \  }\r

  \  Aristocards = di;\r

  \  return di;\r

  }"
ari_create_ui_tree: "function ari_create_ui_tree(n, dParent, r) {\r

  \  let d = null;\r

  \  if (n.oid == 'o_1') {\r

  \    d = mDiv(dParent, { w: '100%' }, getUID('u'));\r

  \  } else if (startsWith(n.path, 'deck')) {\r

  \    let deck = G[n.path] = ui_type_deck(n.content);\r

  \    d = deck.container;\r

  \  } else if (r.otree.player_names.includes(n.content)) {\r

  \    d = ui_make_player(Session.otree, n.content, dParent);\r

  \  } else if (n.type == 'cardlist') {\r

  \    d = ari_make_cardlist(n.content, 2, dParent);\r

  \  } else if (n.type == 'card') {\r

  \    return;\r

  \  } else if (n.type == 'string') {\r

  \    let id = getUID('u');\r

  \    d = mDiv(dParent, { bg: 'inherit' }, id, n.content);\r

  \  }\r

  \  if (nundef(d)) return; else r.add_ui_node(d, d.id, n.oid);\r

  \  for (const ch of n.children) {\r

  \    ari_create_ui_tree(r.nodes[ch], d, r);\r

  \  }\r

  }"
ari_deck_add_safe: "function ari_deck_add_safe(otree, n, arr) {\r

  \  ari_ensure_deck(otree, n);\r

  \  deck_add(otree.deck, n, arr);\r

  }"
ari_deck_deal_safe: function ari_deck_deal_safe(fen, n) { ari_ensure_deck(fen,
  n); return deck_deal(fen.deck, n); }
ari_ensure_deck: "function ari_ensure_deck(fen, n) {\r

  \  if (fen.deck.length < n) { ari_refill_deck(fen); }\r

  }"
ari_get_actions: "function ari_get_actions(uplayer) {\r

  \  let fen = Z.fen;\r

  \  let actions = exp_rumors(Z.options) ? ['trade', 'exchange', 'build',
  'upgrade', 'downgrade', 'buy', 'buy rumor', 'rumor', 'inspect', 'blackmail',
  'harvest', 'pickup', 'sell', 'tithe', 'commission']\r

  \    : ['trade', 'exchange', 'build', 'upgrade', 'downgrade', 'buy',
  'visit', 'harvest', 'pickup', 'sell', 'tithe', 'commission'];\r

  \  if (Config.autosubmit) actions.push('pass');\r

  \  let avail_actions = [];\r

  \  for (const a of actions) {\r

  \    let avail = ari_check_action_available(a, fen, uplayer);\r

  \    if (avail) avail_actions.push(a);\r

  \  }\r

  \  return avail_actions;\r

  }"
ari_get_all_building_harvest_cards: "function
  ari_get_all_building_harvest_cards(fen, uplayer) {\r

  \  let res = [];\r

  \  let pl = fen.players[uplayer];\r

  \  for (const b of pl.buildings.farm) {\r

  \    if (b.h) res.push({ b: b, h: b.h });\r

  \  }\r

  \  return res;\r

  }"
ari_get_all_trading_cards: "function ari_get_all_trading_cards(fen) {\r

  \  let res = [];\r

  \  fen.market.map(c => res.push({ key: c, path: 'market' }));\r

  \  for (const uplayer of fen.plorder) {\r

  \    let pl = fen.players[uplayer];\r

  \    let stall = pl.stall;\r

  \    stall.map(x => res.push({ key: x, path: `players.${uplayer}.stall`
  }));\r

  \  }\r

  \  return res;\r

  }"
ari_get_all_trading_cards_orig: "function ari_get_all_trading_cards_orig(otree)
  {\r

  \  let res = [];\r

  \  let plcardlists = otree.plorder.map(x => otree[x].stall);\r

  \  plcardlists.map(x => x.map(c => res.push[{ c: c, owner: x }]));\r

  \  otree.market.map(c => res.push({ c: c, owner: 'market' }));\r

  \  return res;\r

  }"
ari_get_all_wrong_building_cards: "function
  ari_get_all_wrong_building_cards(fen, uplayer) {\r

  \  let res = [];\r

  \  let pl = fen.players[uplayer];\r

  \  for (const k in pl.buildings) {\r

  \    for (const b of pl.buildings[k]) {\r

  \      let bcards = b.list;\r

  \      let lead = bcards[0];\r

  \      let [rank, suit] = [lead[0], lead[1]];\r

  \      for (let i = 1; i < bcards.length; i++) {\r

  \        if (bcards[i][0] != rank) res.push({ c: bcards[i], building: b
  });\r

  \      }\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
ari_get_building_type: "function ari_get_building_type(obuilding) { let n =
  obuilding.list.length; return n == 4 ? 'farm' : n == 5 ? 'estate' : 'chateau';
  }"
ari_get_card: "function ari_get_card(ckey, h, w, ov = .3) {\r

  \  let type = ckey[2];\r

  \  let sz = { largecard: 100, smallcard: 50 };\r

  \  let info = type == 'n' ? to_aristocard(ckey, sz.largecard) : type == 'l'
  ? to_luxurycard(ckey, sz.largecard) : type == 'r' ? to_rumorcard(ckey,
  sz.smallcard) : to_commissioncard(ckey, sz.smallcard);\r

  \  let card = cardFromInfo(info, h, w, ov);\r

  \  if (type == 'l') luxury_card_deco(card);\r

  \  return card;\r

  }"
ari_get_card_large: "function ari_get_card_large(ckey, h, w, ov = .2) {\r

  \  let type = ckey[2];\r

  \  let sz = { largecard: 120, smallcard: 80 };\r

  \  let info = type == 'n' ? to_aristocard(ckey, sz.largecard) : type == 'l'
  ? to_luxurycard(ckey, sz.largecard) : type == 'r' ? to_rumorcard(ckey,
  sz.smallcard) : to_commissioncard(ckey, sz.smallcard);\r

  \  let card = cardFromInfo(info, h, w, ov);\r

  \  if (type == 'l') luxury_card_deco(card);\r

  \  return card;\r

  }"
ari_get_cardinfo: function ari_get_cardinfo(ckey) { return Aristocards[ckey]; }
ari_get_correct_buildings: "function ari_get_correct_buildings(buildings) {\r

  \  let bcorrect = { farm: [], estate: [], chateau: [] };\r

  \  for (const type in buildings) {\r

  \    for (const b of buildings[type]) {\r

  \      let list = b.list;\r

  \      let lead = list[0];\r

  \      let iscorrect = true;\r

  \      for (const key of arrFromIndex(list, 1)) {\r

  \        if (key[0] != lead[0]) { iscorrect = false; continue; }\r

  \      }\r

  \      if (iscorrect) {\r

  \        lookupAddIfToList(bcorrect, [type], b);\r

  \      }\r

  \    }\r

  \  }\r

  \  return bcorrect;\r

  }"
ari_get_fictive_vps: "function ari_get_fictive_vps(fen, uname) {\r

  \  let pl = fen.players[uname];\r

  \  let bs = pl.buildings;\r

  \  let vps = calc_building_vps(bs);\r

  \  return vps;\r

  }"
ari_get_first_tax_payer: function ari_get_first_tax_payer(fen, pl_tax) { return
  ari_get_tax_payer(fen, pl_tax, 0); }
ari_get_max_journey_length: "function ari_get_max_journey_length(fen, uplayer)
  {\r

  \  let pl = fen.players[uplayer];\r

  \  let sorted_journeys = sortByDescending(pl.journeys.map(x => ({ arr: x,
  len: x.length })), 'len');\r

  \  return isEmpty(pl.journeys) ? 0 : sorted_journeys[0].len;\r

  }"
ari_get_player_hand_and_stall: "function ari_get_player_hand_and_stall(fen,
  uplayer) {\r

  \  let res = [];\r

  \  res = res.concat(fen.players[uplayer].hand);\r

  \  res = res.concat(fen.players[uplayer].stall);\r

  \  return res;\r

  }"
ari_get_real_vps: "function ari_get_real_vps(fen, uname) {\r

  \  let pl = fen.players[uname];\r

  \  let bs = ari_get_correct_buildings(pl.buildings);\r

  \  let vps = calc_building_vps(bs);\r

  \  for (const btype in bs) {\r

  \    let blist = bs[btype];\r

  \    for (const b of blist) {\r

  \      let lead = b.list[0];\r

  \      if (firstCond(pl.commissions, x => x[0] == lead[0])) vps += 1;\r

  \    }\r

  \  }\r

  \  return vps;\r

  }"
ari_get_tax_payer: "function ari_get_tax_payer(fen, pl_tax, ifrom = 0) {\r

  \  let iturn = ifrom;\r

  \  let uplayer = fen.plorder[iturn];\r

  \  if (nundef(uplayer)) return null;\r

  \  while (pl_tax[uplayer] <= 0) {\r

  \    iturn++;\r

  \    if (iturn >= fen.plorder.length) return null;\r

  \    uplayer = fen.plorder[iturn];\r

  \  }\r

  \  return uplayer;\r

  }"
ari_get_vps: "function ari_get_vps(otree, uname) {\r

  \  if (uname == otree.plturn) {\r

  \    return calc_building_vps(otree, uname);\r

  \  } else {\r

  \    return calc_building_vps(otree, uname);\r

  \  }\r

  }"
ari_globalize: "function ari_globalize(g, uname) {\r

  \  DA.uname = uname; DA.g = g;\r

  \  z = {};\r

  \  z.A = { level: 0, di: {}, ll: [], items: [], selected: [], tree: null,
  breadcrumbs: [], sib: [], command: null };\r

  \  copyKeys(DA.g, z);\r

  \  copyKeys(jsCopy(DA.g.fen), z);\r

  \  copyKeys(UI, z);\r

  \  z.uname = uname;\r

  }"
ari_history_list: "function ari_history_list(lines, title = '', fen) {\r

  \  if (nundef(fen)) fen = Z.fen;\r

  \  if (nundef(fen.history)) fen.history = [];\r

  \  fen.history.push({ title: title, lines: lines });\r

  }"
ari_make_cardlist: "function ari_make_cardlist(list, splay, dParent) {\r

  \  let id = getUID('u');\r

  \  let d = mDiv(dParent, { bg: 'random', padding: 10 }, id);\r

  \  let items = list.map(x => ari_get_card(x));\r

  \  let [w, h] = [items[0].w, items[0].h];\r

  \  items.map(x => mAppend(d, iDiv(x)));\r

  \  mContainerSplay(d, splay, w, h, items.length, 20);\r

  \  items.map(x => mItemSplay(x, list, splay));\r

  \  return d;\r

  }"
ari_make_selectable: "function ari_make_selectable(item, dParent, dInstruction)
  {\r

  \  let A = Z.A;\r

  \  switch (item.itemtype) {\r

  \    case 'card': make_card_selectable(item); break;\r

  \    case 'container': make_container_selectable(item); break;\r

  \    case 'string': make_string_selectable(item); break;\r

  \  }\r

  }"
ari_make_selected: "function ari_make_selected(item) {\r

  \  let A = Z.A;\r

  \  switch (item.itemtype) {\r

  \    case 'card': make_card_selected(item); break;\r

  \    case 'container': make_container_selected(item); break;\r

  \    case 'string': make_string_selected(item); break;\r

  \  }\r

  }"
ari_make_unselectable: "function ari_make_unselectable(item) {\r

  \  let A = Z.A;\r

  \  switch (item.itemtype) {\r

  \    case 'card': make_card_unselectable(item); break;\r

  \    case 'container': make_container_unselectable(item); break;\r

  \    case 'string': make_string_unselectable(item); break;\r

  \  }\r

  }"
ari_make_unselected: "function ari_make_unselected(item) {\r

  \  let A = Z.A;\r

  \  switch (item.itemtype) {\r

  \    case 'card': make_card_unselected(item); break;\r

  \    case 'container': make_container_unselected(item); break;\r

  \    case 'string': make_string_unselected(item); break;\r

  \  }\r

  }"
ari_move_herald: "function ari_move_herald(fen) {\r

  \  fen.heraldorder = arrCycle(fen.heraldorder, 1);\r

  \  ari_history_list([`*** new herald: ${fen.heraldorder[0]} ***`],
  'herald');\r

  \  return fen.heraldorder[0];\r

  }"
ari_move_market_to_discard: "function ari_move_market_to_discard() {\r

  \  let fen = Z.fen;\r

  \  while (fen.market.length > 0) {\r

  \    elem_from_to_top(fen.market[0], fen.market, fen.deck_discard);\r

  \  }\r

  \  ari_reorg_discard();\r

  }"
ari_move_stalls_to_hands: "function ari_move_stalls_to_hands() {\r

  \  let fen = Z.fen;\r

  \  for (const uplayer of fen.plorder) {\r

  \    fen.players[uplayer].hand =
  fen.players[uplayer].hand.concat(fen.players[uplayer].stall);\r

  \    fen.players[uplayer].stall = [];\r

  \  }\r

  }"
ari_next_action: "function ari_next_action() {\r

  \  let [fen, uplayer] = [Z.fen, Z.uplayer];\r

  \  deactivate_ui();\r

  \  console.assert(isdef(Z.num_actions));\r

  \  fen.num_actions -= 1;\r

  \  fen.action_number += 1;\r

  \  if (fen.num_actions <= 0) {\r

  \    fen.total_pl_actions = 0;\r

  \    lookupAddIfToList(fen, ['actionsCompleted'], uplayer);\r

  \    let next = ari_select_next_player_according_to_stall_value(fen);\r

  \    if (!next) {\r

  \      ari_next_phase();\r

  \    } else {\r

  \      Z.turn = [next];\r

  \    }\r

  \  } else {\r

  \    Z.stage = 5;\r

  \  }\r

  \  take_turn_fen();\r

  }"
ari_next_phase: "function ari_next_phase() {\r

  \  let [fen, uplayer] = [Z.fen, Z.uplayer];\r

  \  ari_move_market_to_discard();\r

  \  ari_move_stalls_to_hands();\r

  \  ari_add_hand_card();\r

  \  delete fen.actionsCompleted;\r

  \  delete fen.stallSelected;\r

  \  Z.turn = [fen.plorder[0]];\r

  \  if (Z.stage == 10) {\r

  \    Z.phase = 'queen';\r

  \    [Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options,
  Z.phase);\r

  \  } else if (fen.phase == 'king') {\r

  \    fen.pl_gameover = [];\r

  \    for (const plname of fen.plorder) {\r

  \      let bcorrect =
  ari_get_correct_buildings(fen.players[plname].buildings);\r

  \      let can_end = ari_check_end_condition(bcorrect);\r

  \      if (can_end) fen.pl_gameover.push(plname);\r

  \    }\r

  \    if (!isEmpty(fen.pl_gameover)) {\r

  \      Z.stage = 10;\r

  \      Z.turn = [fen.pl_gameover[0]];\r

  \    } else {\r

  \      Z.phase = 'queen';\r

  \      [Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options,
  Z.phase);\r

  \    }\r

  \  } else if (fen.phase == 'queen') {\r

  \    for (const uplayer of fen.plorder) {\r

  \      for (const k in fen.players[uplayer].buildings) {\r

  \        if (k == 'farm') continue;\r

  \        let n = fen.players[uplayer].buildings[k].length;\r

  \        fen.players[uplayer].coins += n;\r

  \        if (n > 0) ari_history_list([`${uplayer} gets ${n} coins for ${k}
  buildings`], 'payout');\r

  \      }\r

  \    }\r

  \    Z.phase = 'jack';\r

  \    [Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options,
  Z.phase);\r

  \  } else {\r

  \    fen.herald = ari_move_herald(fen, uplayer);\r

  \    fen.plorder = jsCopy(fen.heraldorder);\r

  \    ari_add_harvest_cards(fen);\r

  \    Z.phase = 'king';\r

  \    let taxneeded = ari_tax_phase_needed(fen);\r

  \    Z.turn = taxneeded ? fen.turn : [fen.herald];\r

  \    if (taxneeded) Z.stage = 2; else[Z.stage, Z.turn] =
  set_journey_or_stall_stage(fen, Z.options, Z.phase);\r

  \  }\r

  \  return Z.stage;\r

  }"
ari_open_market: "function ari_open_market(fen, phase, deck, market) {\r

  \  DA.qanim = [];\r

  \  let n_market = phase == 'jack' ? 3 : 2;\r

  \  fen.stage = Z.stage = phase == 'jack' ? 12 : phase == 'queen' ? 11 : 4;\r

  \  fen.stallSelected = [];\r

  \  delete fen.passed;\r

  \  for (let i = 0; i < n_market; i++) {\r

  \    DA.qanim.push([qanim_flip_topmost, [deck]]);\r

  \    DA.qanim.push([qanim_move_topmost, [deck, market]]);\r

  \    DA.qanim.push([q_move_topmost, [deck, market]]);\r

  \  }\r

  \  DA.qanim.push([q_mirror_fen, ['deck', 'market']]);\r

  \  DA.qanim.push([ari_pre_action, []]);\r

  \  qanim();\r

  }"
ari_open_rumors: "function ari_open_rumors(stage = 28) {\r

  \  let [fen, deck] = [Z.fen, UI.deck_rumors];\r

  \  DA.qanim = [];\r

  \  fen.stage = Z.stage = stage;\r

  \  let n = Math.min(2, fen.deck_rumors.length);\r

  \  let cards = arrTake(fen.deck_rumors, n);\r

  \  let uicards = cards.map(x => ari_get_card(x));\r

  \  let dest = UI.rumor_top = ui_type_market([], deck.container.parentNode, {
  maleft: 12 }, `rumor_top`, 'rumor_top', ari_get_card);\r

  \  mMagnifyOnHoverControlPopup(dest.cardcontainer);\r

  \  for (let i = 0; i < n; i++) {\r

  \    DA.qanim.push([qanim_flip_topmost, [deck]]);\r

  \    DA.qanim.push([qanim_move_topmost, [deck, dest]]);\r

  \    DA.qanim.push([q_move_topmost, [deck, dest]]);\r

  \  }\r

  \  DA.qanim.push([q_mirror_fen, ['deck_rumors', 'rumor_top']]);\r

  \  DA.qanim.push([ari_pre_action, []]);\r

  \  qanim();\r

  }"
ari_payment: "function ari_payment(rank = 'king') {\r

  \  if (A.payment_complete == true) return true;\r

  \  let [otree, plturn] = [G.otree, G.otree.plturn];\r

  \  let items = a2_get_build_items(plturn);\r

  \  let pay_letter = rank.toUpperCase()[0];\r

  \  let pay_cards = items.filter(x => x.key[0] == pay_letter);\r

  \  let has_pay_card = !isEmpty(pay_cards);\r

  \  if (has_pay_card && otree[plturn].coins > 0 && otree.phase == rank) {\r

  \    otree.stage = 20;\r

  \    let items = pay_cards;\r

  \    items.push({ o: null, a: 'coin', key: 'coin', friendly: 'coin', path:
  null });\r

  \    let i = 0; items.map(x => { x.index = i; i++; });\r

  \    a2_add_selection(items, 'payment', 1, 1, false);\r

  \    return false;\r

  \  } else if (has_pay_card && pay_cards.length > 1) {\r

  \    otree.stage = 20;\r

  \    let items = pay_cards;\r

  \    let i = 0; items.map(x => { x.index = i; i++; });\r

  \    a2_add_selection(items, 'payment', 1, 1, false);\r

  \    return false;\r

  \  } else if (has_pay_card) {\r

  \    console.assert(otree[plturn].coins == 0 || otree.phase != rank, 'HAS A
  COIN in matching phase!!!!');\r

  \    let k = pay_cards[0];\r

  \    a2_pay_with_card(k);\r

  \    return true;\r

  \  } else {\r

  \    a2_pay_with_coin(plturn);\r

  \    return true;\r

  \  }\r

  }"
ari_player_stats: "function ari_player_stats(otree) {\r

  \  let player_stat_items = G.player_stat_items =
  ui_player_info(otree.plorder.map(x => otree[x]));\r

  \  let herald = otree.plorder[0];\r

  \  for (const uname of otree.plorder) {\r

  \    let pl = otree[uname];\r

  \    let item = player_stat_items[uname];\r

  \    let d = iDiv(item); mCenterFlex(d); mLinebreak(d);\r

  \    if (uname == herald) {\r

  \      mSym('tied-scroll', d, { fg: 'gold', fz: 24 }, 'TL');\r

  \    }\r

  \    player_stat_count('coin', pl.coins, d);\r

  \    if (!isEmpty(otree[uname].stall) && otree.stage >= 5 && otree.stage <=
  6) {\r

  \      player_stat_count('shinto shrine', !otree.round.includes(uname) ||
  otree.stage < 6 ? calc_stall_value(otree, uname) : '_', d);\r

  \    }\r

  \    player_stat_count('star', ari_get_vps(otree, uname), d);\r

  \  }\r

  }"
ari_post_action: "function ari_post_action() {\r

  \  clearElement(dError);\r

  \  let otree = G.otree;\r

  \  let [step, stage, iturn, round, phase, plturn] =
  set_state_numbers(otree);\r

  \  let [deck, market, discard, open_discard] = [G.deck, G.market,
  G.deck_discard, G.open_discard];\r

  \  if (stage == 2) {\r

  \    let items = A.selected.map(x => A.items[x]);\r

  \    let n = otree.pl_tax[plturn];\r

  \    if (items.length != n) {\r

  \      output_error(`please select exactly ${n} cards`);\r

  \      return;\r

  \    }\r

  \    for (const item of items) {\r

  \      elem_from_to_top(item.key, otree[plturn].hand, otree.deck_discard);\r

  \    }\r

  \    ari_reorg_discard(otree);\r

  \    let [iturn, plnext] = ari_get_tax_payer(otree, otree.pl_tax,
  otree.iturn + 1);\r

  \    if (iturn == null) {\r

  \      otree.stage = 3;\r

  \      otree.iturn = 0;\r

  \      delete otree.pl_tax;\r

  \    } else {\r

  \      otree.iturn = iturn;\r

  \    }\r

  \    otree.plturn = otree.plorder[otree.iturn];\r

  \    turn_send_move_update(otree, plturn);\r

  \  } else if (stage == 3) {\r

  \    console.assert(false, 'NO SHOULD NOT COME TO POST STATE 3');\r

  \  } else if (stage == 4) {\r

  \    let selectedKeys = A.selected.map(i => A.items[i].key);\r

  \    for (const ckey of selectedKeys) {\r

  \      elem_from_to(ckey, otree[plturn].hand, otree[plturn].stall);\r

  \    }\r

  \    otree.round.push(plturn);\r

  \    if (is_round_over(otree)) {\r

  \      otree.round = [];\r

  \      let next = ari_select_next_player_according_to_stall_value(otree);\r

  \      if (!next) { ari_next_action(otree, plturn); return; }\r

  \    } else {\r

  \      otree.iturn++;\r

  \    }\r

  \    otree.plturn = otree.plorder[otree.iturn];\r

  \    turn_send_move_update(otree, plturn);\r

  \  } else if (stage == 6 && A.selected_key == 'trade') {\r

  \    if (A.selected.length != 2) {\r

  \      output_error('please, select exactly 2 cards!');\r

  \      return;\r

  \    }\r

  \    let i0 = A.items[A.selected[0]];\r

  \    let i1 = A.items[A.selected[1]];\r

  \    if (i0.path == i1.path) {\r

  \      output_error('you cannot trade cards from the same group');\r

  \      return;\r

  \    } else {\r

  \      a2_exchange_items(otree, i0, i1);\r

  \      ari_next_action(otree, plturn);\r

  \    }\r

  \  } else if (stage == 6 && A.selected_key == 'repair') {\r

  \    if (A.selected.length != 2) {\r

  \      output_error('please, select exactly 2 cards!');\r

  \      return;\r

  \    }\r

  \    let i0 = A.items[A.selected[0]];\r

  \    let i1 = A.items[A.selected[1]];\r

  \    let [p0, p1] = [i0.path, i1.path];\r

  \    if (p0.includes('build') == p1.includes('build')) {\r

  \      output_error('select exactly one building card and one of your hand
  or stall cards!');\r

  \      return;\r

  \    }\r

  \    a2_exchange_items(otree, i0, i1);\r

  \    console.log('repair items', i0, i1);\r

  \    let ibuilding = p0.includes('build') ? i0 : i1;\r

  \    let obuilding = lookup(otree, stringBeforeLast(ibuilding.path,
  '.').split('.'));\r

  \    console.log('obuilding', obuilding);\r

  \    obuilding.schwein = null;\r

  \    ari_next_action(otree, plturn);\r

  \  } else if (stage == 6 && A.command == 'build') {\r

  \    console.log('should have paid for building!', otree[plturn].coins);\r

  \    if (A.selected.length < 4 || A.selected.length > 6) {\r

  \      output_error('select 4, 5, or 6 cards to build!');\r

  \      return;\r

  \    }\r

  \    ari_complete_building();\r

  \  } else if (stage == 6 && A.command == 'upgrade') {\r

  \    let n = A.selected.length;\r

  \    if (n > 2 || n == 2 && !has_farm(plturn)) {\r

  \      output_error('too many cards selected!');\r

  \      return;\r

  \    } else if (n == 0) {\r

  \      output_error('please select hand or stall card(s) to upgrade!');\r

  \      return;\r

  \    }\r

  \    A.upgrade_cards = A.selected.map(x => A.items[x]);\r

  \    otree.stage = 102;\r

  \    let b_items = a2_get_farms_estates_items(plturn);\r

  \    a2_add_selection(b_items, 'buildings', 1, 1);\r

  \  } else if (stage == 102) {\r

  \    A.building = A.items[A.selected[0]];\r

  \    ari_complete_upgrade();\r

  \  } else if (stage == 6 && A.command == 'downgrade') {\r

  \    A.building = A.items[A.selected[0]];\r

  \    otree.stage = 103;\r

  \    let items = a2_get_hidden_building_items(A.building.o);\r

  \    items.map(x => face_up(x.o));\r

  \    A.possible_downgrade_cards = items;\r

  \    a2_add_selection(items, 'downgrade cards');\r

  \  } else if (stage == 103) {\r

  \    A.downgrade_cards = A.selected.map(x => A.items[x]);\r

  \    let obuilding = lookup(otree, A.building.path.split('.'));\r

  \    let n = obuilding.list.length;\r

  \    let nremove = A.downgrade_cards.length;\r

  \    let nfinal = n - nremove;\r

  \    let type = A.building.o.type;\r

  \    let list = otree[plturn].buildings[type];\r

  \    removeInPlace(list, obuilding);\r

  \    let cards = A.downgrade_cards.map(x => x.key);\r

  \    if (nfinal < 4) {\r

  \      otree[plturn].hand = otree[plturn].hand.concat(obuilding.list);\r

  \    } else if (nfinal == 4) {\r

  \      otree[plturn].buildings.farms.push(obuilding);\r

  \      otree[plturn].hand = otree[plturn].hand.concat(cards);\r

  \    } else if (nfinal == 5) {\r

  \      otree[plturn].buildings.estates.push(obuilding);\r

  \      otree[plturn].hand = otree[plturn].hand.concat(cards);\r

  \    } else if (nfinal == 6) {\r

  \      otree[plturn].buildings.chateaus.push(obuilding);\r

  \      otree[plturn].hand = otree[plturn].hand.concat(cards);\r

  \    }\r

  \    A.downgrade_cards.map(x => removeInPlace(obuilding.list, x.key));\r

  \    ari_next_action(otree, plturn);\r

  \  } else if (stage == 6 && A.command == 'buy') {\r

  \    let item = A.items[A.selected[0]];\r

  \    elem_from_to(item.key, otree.open_discard, otree[plturn].hand);\r

  \    ari_reorg_discard(otree);\r

  \    ari_next_action(otree, plturn);\r

  \  } else if (stage == 6 && A.command == 'visit') {\r

  \    let item = A.items[A.selected[0]];\r

  \    console.log('building to inspect', item);\r

  \    let obuilding = lookup(otree, item.path.split('.'));\r

  \    let owner = stringBefore(item.path, '.');\r

  \    if (isdef(obuilding.schwein)) {\r

  \      let res = confirm('destroy the building?');\r

  \      if (!res) {\r

  \        if (otree[owner].coins > 0) {\r

  \          otree[owner].coins -= 1;\r

  \          otree[plturn].coins += 1;\r

  \        }\r

  \      } else {\r

  \        let list = obuilding.list;\r

  \        console.log('!!!!!!!!!!!!!building', obuilding,
  'DESTROY!!!!!!!!!!!!!!!!', '\\nlist', list);\r

  \        let correct_key = list[0];\r

  \        let rank = correct_key[0];\r

  \        while (list.length > 0) {\r

  \          let ckey = list[0];\r

  \          if (ckey[0] != rank) {\r

  \            elem_from_to_top(ckey, list, otree.deck_discard);\r

  \          } else {\r

  \            elem_from_to(ckey, list, otree[owner].hand);\r

  \          }\r

  \        }\r

  \        if (isdef(obuilding.harvest)) {\r

  \          otree.deck_discard.unshift(obuilding.harvest);\r

  \        }\r

  \        ari_reorg_discard(otree);\r

  \        let blist = lookup(otree, stringBeforeLast(item.path,
  '.').split('.'));\r

  \        removeInPlace(blist, obuilding);\r

  \      }\r

  \    } else {\r

  \      let cards = item.o.items;\r

  \      let key = cards[0].rank;\r

  \      let schweine = false;\r

  \      let schwein = null;\r

  \      for (const c of cards) {\r

  \        if (c.rank != key) { schweine = true; schwein = c.key; face_up(c);
  break; }\r

  \      }\r

  \      if (schweine) {\r

  \        if (otree[owner].coins > 0) {\r

  \          otree[owner].coins--;\r

  \          otree[plturn].coins++;\r

  \        }\r

  \        let b = lookup(otree, item.path.split('.'));\r

  \        b.schwein = schwein;\r

  \      }\r

  \    }\r

  \    ari_next_action(otree, plturn);\r

  \  } else if (stage == 6 && A.selected_key == 'sell') {\r

  \    if (A.selected.length != 2) {\r

  \      output_error('select exactly 2 cards to sell!');\r

  \      return;\r

  \    }\r

  \    for (const i of A.selected) {\r

  \      let c = A.items[i].key;\r

  \      elem_from_to(c, otree[plturn].stall, otree.deck_discard);\r

  \    }\r

  \    ari_reorg_discard(otree);\r

  \    otree[plturn].coins += 1;\r

  \    ari_next_action(otree, plturn);\r

  \  } else if (stage == 6 && A.command == 'harvest') {\r

  \    let item = A.items[A.selected[0]];\r

  \    let obuilding = lookup(otree, item.path.split('.'));\r

  \    otree[plturn].hand.push(obuilding.h);\r

  \    obuilding.h = null;\r

  \    ari_next_action(otree, plturn);\r

  \  } else if (stage == 100) {\r

  \    console.log('pickup', A.selected_key, A.items, A.selected);\r

  \    let item = A.items[A.selected[0]];\r

  \    elem_from_to(item.key, otree[plturn].stall, otree[plturn].hand);\r

  \    ari_next_action(otree, plturn);\r

  \  } else if (A.selected_key == 'pass') {\r

  \    console.log('HAAAAAAAAAAAAAAAAAAAAAAAAAAAALLLLLLLLLLLLLLLLLLLLLLLLLOOO\
  OOOOOOOOOOOOOO')\r

  \    otree.num_actions = 0;\r

  \    ari_next_action(otree, plturn);\r

  \  } else if (stage == 10) {\r

  \    if (A.selected_key == 'end game') {\r

  \      for (const uname of otree.plorder) {\r

  \        let [bcorrect, realvps] =
  ari_get_correct_buildings(otree[uname].buildings);\r

  \        otree[uname].score = realvps;\r

  \      }\r

  \      let scores = otree.plorder.map(x => ({ name: x, vps: otree[x].realvps
  }));\r

  \      let sorted = sortByDescending(scores, 'vps');\r

  \      ari_reveal_all_buildings(otree);\r

  \      otree.winner = sorted[0].name;\r

  \      turn_send_gameover(otree, plturn);\r

  \    } else {\r

  \      let iturn = otree.iturn += 1;\r

  \      if (iturn >= otree.pl_gameover.length) {\r

  \        delete otree.pl_gameover;\r

  \        otree.round = [];\r

  \        otree.iturn = 0;\r

  \        otree.stage = 3;\r

  \        otree.phase = 'queen';\r

  \        otree.plturn = otree.plorder[otree.iturn];\r

  \        turn_send_move_update(otree, plturn);\r

  \      } else {\r

  \        otree.plturn = otree.plorder[otree.iturn];\r

  \        turn_send_move_update(otree, plturn);\r

  \      }\r

  \    }\r

  \  } else if (stage == 11) {\r

  \    let keys = A.selected.map(x => A.items[x]).map(x => x.key);\r

  \    keys.map(x => lookupAddIfToList(otree, ['ball', plturn], x));\r

  \    keys.map(x => removeInPlace(otree[plturn].hand, x));\r

  \    let iturn = otree.iturn += 1;\r

  \    if (iturn >= otree.plorder.length) {\r

  \      if (isdef(otree.ball)) {\r

  \        let all = [];\r

  \        for (const c of otree.market) all.push(c);\r

  \        for (const uname in otree.ball) for (const c of otree.ball[uname])
  all.push(c);\r

  \        shuffle(all);\r

  \        otree.market = [];\r

  \        for (let i = 0; i < 2; i++) top_elem_from_to(all, otree.market);\r

  \        for (const uname in otree.ball) for (let i = 0; i <
  otree.ball[uname].length; i++) top_elem_from_to(all, otree[uname].hand);\r

  \        delete otree.ball;\r

  \      }\r

  \      otree.round = [];\r

  \      otree.iturn = 0;\r

  \      otree.stage = 4;\r

  \      otree.phase = 'queen';\r

  \    }\r

  \    otree.plturn = otree.plorder[otree.iturn];\r

  \    turn_send_move_update(otree, plturn);\r

  \  } else if (stage == 12) {\r

  \    let keys = A.selected.map(x => A.items[x]);\r

  \    keys.map(x => lookupAddIfToList(otree, ['auction', plturn], x));\r

  \    let iturn = otree.iturn += 1;\r

  \    if (iturn >= otree.plorder.length) {\r

  \      let list = dict2list(otree.auction);\r

  \      list.map(x => { x.uname = x.id; x.item = x.value[0]; x.amount =
  Number(x.item.a); });\r

  \      list = sortByDescending(list, 'amount');\r

  \      let max = list[0].amount;\r

  \      let second = otree.second_most = list[1].amount;\r

  \      otree.stage = 13;\r

  \      let maxplayers = otree.maxplayers = list.filter(x => x.amount ==
  max).map(x => x.uname);\r

  \      otree.round = arrMinus(otree.plorder, maxplayers);\r

  \      otree.iturn = otree.plorder.indexOf(maxplayers[0]);\r

  \    }\r

  \    otree.plturn = otree.plorder[otree.iturn];\r

  \    turn_send_move_update(otree, plturn);\r

  \  } else if (stage == 13) {\r

  \    let item = A.selected.map(x => A.items[x])[0];\r

  \    lookupSet(otree, ['buy', plturn], item);\r

  \    for (const uname of otree.maxplayers) {\r

  \      if (!lookup(otree, ['buy', uname])) {\r

  \        otree.iturn = otree.plorder.indexOf(uname);\r

  \        otree.plturn = otree.plorder[otree.iturn];\r

  \        turn_send_move_update(otree, plturn);\r

  \        return;\r

  \      }\r

  \    }\r

  \    let buylist = dict2list(otree.buy);\r

  \    let discardlist = [];\r

  \    for (const uname of otree.maxplayers) {\r

  \      let choice = otree.buy[uname];\r

  \      let is_unique = !firstCond(buylist, x => x.id != uname && x.value ==
  choice);\r

  \      if (is_unique) {\r

  \        otree[uname].coins -= otree.second_most;\r

  \        elem_from_to(choice.key, otree.market, otree[uname].hand);\r

  \      } else addIf(discardlist, choice);\r

  \    }\r

  \    for (const choice of discardlist) {\r

  \      elem_from_to(choice.key, otree.market, otree.deck_discard);\r

  \      ari_reorg_discard(otree);\r

  \    }\r

  \    otree.iturn = 0;\r

  \    otree.stage = 4;\r

  \    otree.round = [];\r

  \    otree.plturn = otree.plorder[otree.iturn];\r

  \    turn_send_move_update(otree, plturn);\r

  \  }\r

  }"
ari_pre_action: "function ari_pre_action() {\r

  \  let [stage, A, fen, phase, uplayer, deck, market] = [Z.stage, Z.A, Z.fen,
  Z.phase, Z.uplayer, Z.deck, Z.market];\r

  \  if (Z.num_actions > 0) fen.progress = `(action ${Z.action_number} of
  ${Z.total_pl_actions})`; else delete fen.progress;\r

  \  show_stage();\r

  \  switch (ARI.stage[stage]) {\r

  \    case 'action: command': Z.stage = 6;
  select_add_items(ui_get_commands(uplayer), process_command, 'must select an
  action', 1, 1); break;\r

  \    case 'action step 2':\r

  \      switch (A.command) {\r

  \        case 'trade': select_add_items(ui_get_trade_items(uplayer),
  post_trade, 'must select 2 cards to trade', 2, 2); break;\r

  \        case 'build': select_add_items(ui_get_payment_items('K'),
  payment_complete, 'must select payment for building', 1, 1); break;\r

  \        case 'upgrade': select_add_items(ui_get_payment_items('K'),
  payment_complete, 'must select payment for upgrade', 1, 1); break;\r

  \        case 'downgrade': select_add_items(ui_get_building_items(uplayer,
  A.payment), process_downgrade, 'must select a building to downgrade', 1, 1);
  break;\r

  \        case 'pickup': select_add_items(ui_get_stall_items(uplayer),
  post_pickup, 'must select a stall card to take into your hand', 1, 1);
  break;\r

  \        case 'harvest': select_add_items(ui_get_harvest_items(uplayer),
  post_harvest, 'must select a farm to harvest from', 1, 1); break;\r

  \        case 'sell': select_add_items(ui_get_stall_items(uplayer),
  post_sell, 'must select 2 stall cards to sell', 2, 2); break;\r

  \        case 'buy': select_add_items(ui_get_payment_items('J'),
  payment_complete, 'must select payment option', 1, 1); break;\r

  \        case 'buy rumor': ari_open_rumors(); break;\r

  \        case 'exchange': select_add_items(ui_get_exchange_items(uplayer),
  post_exchange, 'must select cards to exchange', 2, 2); break;\r

  \        case 'visit': select_add_items(ui_get_payment_items('Q'),
  payment_complete, 'must select payment for visiting', 1, 1); break;\r

  \        case 'rumor':
  select_add_items(ui_get_other_buildings_and_rumors(uplayer), process_rumor,
  'must select a building and a rumor card to place', 2, 2); break;\r

  \        case 'inspect': select_add_items(ui_get_other_buildings(uplayer),
  process_inspect, 'must select building to visit', 1, 1); break;\r

  \        case 'blackmail': select_add_items(ui_get_payment_items('Q'),
  payment_complete, 'must select payment for blackmailing', 1, 1); break;\r

  \        case 'commission':
  select_add_items(ui_get_commission_items(uplayer), process_commission, 'must
  select a card to commission', 1, 1); break;\r

  \        case 'pass': post_pass(); break;\r

  \      }\r

  \      break;\r

  \    case 'pick_schwein':
  select_add_items(ui_get_schweine_candidates(A.uibuilding), post_inspect, 'must
  select the new schwein', 1, 1); break;\r

  \    case 'comm_weitergeben': if (!is_playerdata_set(uplayer))
  select_add_items(ui_get_all_commission_items(uplayer), process_comm_setup,
  `must select ${fen.comm_setup_num} card${fen.comm_setup_num > 1 ? 's' : ''} to
  discard`, fen.comm_setup_num, fen.comm_setup_num); break;\r

  \    case 'rumors_weitergeben':\r

  \      let rumitems = ui_get_rumors_and_players_items(uplayer);\r

  \      if (isEmpty(rumitems)) {\r

  \        show_waiting_message('waiting for other players...');\r

  \        Z.state = null;\r

  \        let done = rumor_playerdata_complete();\r

  \        if (done) {\r

  \          Z.turn = [Z.host];\r

  \          Z.stage = 105; //'next_rumors_setup_stage';\r

  \          clear_transaction();\r

  \          take_turn_fen();\r

  \        } else autopoll();\r

  \      } else select_add_items(rumitems, process_rumors_setup, `must select
  a player and a rumor to pass on`, 2, 2);\r

  \      break;\r

  \    case 'next_rumor_setup_stage': post_rumor_setup(); break;\r

  \    case 'buy rumor': select_add_items(ui_get_top_rumors(), post_buy_rumor,
  'must select one of the new rumor cards', 1, 1); break;\r

  \    case 'rumor discard': select_add_items(ui_get_rumors_items(uplayer),
  process_rumor_discard, 'must select a rumor card to discard', 1, 1); break;\r

  \    case 'rumor_both': select_add_items(ui_get_top_rumors(),
  post_rumor_both, 'must select one of the new rumor cards', 1, 1); break;\r

  \    case 'blackmail':
  select_add_items(ui_get_other_buildings_with_rumors(uplayer),
  process_blackmail, 'must select a building to blackmail', 1, 1); break;\r

  \    case 'blackmail_owner': select_add_items(ui_get_blackmailed_items(),
  being_blackmailed, 'must react to BLACKMAIL!!!', 1, 1); break;\r

  \    case 'accept_blackmail': select_add_items(ui_get_stall_items(uplayer),
  post_accept_blackmail, 'must select a card to pay off blackmailer', 1, 1);
  break;\r

  \    case 'blackmail_complete': post_blackmail(); break;\r

  \    case 'journey':
  select_add_items(ui_get_hand_and_journey_items(uplayer), process_journey, 'may
  form new journey or add cards to existing one'); break;\r

  \    case 'add new journey': post_new_journey(); break;\r

  \    case 'auto market': ari_open_market(fen, phase, deck, market); break;\r

  \    case 'TEST_starts_in_stall_selection_complete':\r

  \      if (is_stall_selection_complete()) {\r

  \        delete fen.stallSelected;\r

  \        fen.actionsCompleted = [];\r

  \        if (check_if_church()) ari_start_church_stage(); else
  ari_start_action_stage();\r

  \      } else select_add_items(ui_get_hand_items(uplayer),
  post_stall_selected, 'must select your stall'); break;\r

  \    case 'stall selection': select_add_items(ui_get_hand_items(uplayer),
  post_stall_selected, 'must select cards for stall'); break;\r

  \    case 'church': select_add_items(ui_get_hand_and_stall_items(uplayer),
  post_tithe, `must select cards to tithe ${isdef(fen.tithemin) ? `(current
  minimum is ${fen.tithemin})` : ''}`, 1, 100); break;\r

  \    case 'church_minplayer_tithe_add':
  select_add_items(ui_get_hand_and_stall_items(uplayer), post_tithe_minimum,
  `must select cards to reach at least ${fen.tithe_minimum}`, 1, 100); break;\r

  \    case 'church_minplayer_tithe_downgrade':
  select_add_items(ui_get_building_items(uplayer, A.payment), process_downgrade,
  'must select a building to downgrade', 1, 1); break;\r

  \    case 'church_minplayer_tithe':
  console.log('NOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO');\
  \r

  \      let pl = fen.players[uplayer];\r

  \      let hst = pl.hand.concat(pl.stall);\r

  \      let vals = hst.map(x => ari_get_card(x).val);\r

  \      let sum = arrSum(vals);\r

  \      let min = fen.tithe_minimum;\r

  \      if (sum < min) {\r

  \        ari_history_list([`${uplayer} must downgrade a building to tithe
  ${min}!`], 'downgrade');\r

  \        select_add_items(ui_get_building_items(uplayer, A.payment),
  process_downgrade, 'must select a building to downgrade', 1, 1);\r

  \      } else {\r

  \        ari_history_list([`${uplayer} must tithe more cards to reach
  ${min}!`], 'tithe');\r

  \        select_add_items(ui_get_hand_and_stall_items(uplayer),
  post_tithe_minimum, `must select cards to reach at least
  ${fen.tithe_minimum}`, 1, 100);\r

  \      }\r

  \      break;\r

  \    case 'church_newcards':\r

  \      reveal_church_cards();\r

  \      let items = ui_get_church_items(uplayer);\r

  \      let num_select = items.length == fen.church.length ? 1 : 2;\r

  \      let instr = num_select == 1 ? `must select a card for
  ${fen.candidates[0]}` : 'must select card and player';\r

  \      select_add_items(items, post_church, instr, num_select,
  num_select);\r

  \      break;\r

  \    case 'complementing_market_after_church':\r

  \      select_add_items(ui_get_hand_items(uplayer),
  post_complementing_market_after_church, 'may complement stall'); break;\r

  \    case 'tax': let n = fen.pl_tax[uplayer];
  select_add_items(ui_get_hand_items(uplayer), post_tax, `must pay ${n}
  card${if_plural(n)} tax`, n, n); break;\r

  \    case 'build': select_add_items(ui_get_build_items(uplayer, A.payment),
  post_build, 'must select cards to build (first card determines rank)', 4, 6,
  true); break;\r

  \    case 'commission_stall':
  select_add_items(ui_get_commission_stall_items(), process_commission_stall,
  'must select matching stall card to discard', 1, 1); break;\r

  \    case 'commission new':
  select_add_items(ui_get_commission_new_items(uplayer), post_commission, 'must
  select a new commission', 1, 1); break;\r

  \    case 'upgrade': select_add_items(ui_get_build_items(uplayer,
  A.payment), process_upgrade, 'must select card(s) to upgrade a building', 1);
  break;\r

  \    case 'select building to upgrade':
  select_add_items(ui_get_farms_estates_items(uplayer), post_upgrade, 'must
  select a building', 1, 1); break;\r

  \    case 'select downgrade cards':
  select_add_items(A.possible_downgrade_cards, post_downgrade, 'must select
  card(s) to downgrade a building', 1, is_in_middle_of_church() ? 1 : 100);
  break;\r

  \    case 'buy': select_add_items(ui_get_open_discard_items(uplayer,
  A.payment), post_buy, 'must select a card to buy', 1, 1); break;\r

  \    case 'visit': select_add_items(ui_get_other_buildings(uplayer,
  A.payment), process_visit, 'must select a building to visit', 1, 1); break;\r

  \    case 'visit destroy': select_add_items(ui_get_string_items(['destroy',
  'get cash']), post_visit, 'must destroy the building or select the cash', 1,
  1); break;\r

  \    case 'ball': select_add_items(ui_get_hand_items(uplayer), post_ball,
  'may add cards to the ball'); break;\r

  \    case 'auction: bid': select_add_items(ui_get_coin_amounts(uplayer),
  process_auction, 'must bid for the auction', 1, 1); break;\r

  \    case 'auction: buy': select_add_items(ui_get_market_items(),
  post_auction, 'must buy a card', 1, 1); break;\r

  \    case 'end game?': select_add_items(ui_get_endgame(uplayer),
  post_endgame, 'may end the game here and now or go on!', 1, 1); break;\r

  \    case 'pick luxury or journey cards':
  select_add_items(ui_get_string_items(['luxury cards', 'journey cards']),
  post_luxury_or_journey_cards, 'must select luxury cards or getting cards from
  the other end of the journey', 1, 1); break;\r

  \    case 'next_comm_setup_stage':
  select_confirm_weiter(post_comm_setup_stage); break;\r

  \    default: console.log('stage is', stage); break;\r

  \  }\r

  }"
ari_present: "function ari_present(dParent) {\r

  \  let [fen, ui, uplayer, stage, pl] = [Z.fen, UI, Z.uplayer, Z.stage,
  Z.pl];\r

  \  let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent);\r

  \  if (fen.num_actions > 0 && (Z.role == 'active' || Z.mode == 'hotseat'))
  {\r

  \    mStyle(dOben, { hmin: 110 })\r

  \  }\r

  \  ari_stats(dRechts);\r

  \  show_history(fen, dRechts);\r

  \  let deck = ui.deck = ui_type_deck(fen.deck, dOpenTable, { maleft: 12 },
  'deck', 'deck', ari_get_card);\r

  \  let market = ui.market = ui_type_market(fen.market, dOpenTable, { maleft:
  12 }, 'market', 'market', ari_get_card, true);\r

  \  let open_discard = ui.open_discard = ui_type_market(fen.open_discard,
  dOpenTable, { maleft: 12 }, 'open_discard', 'discard', ari_get_card);\r

  \  let deck_discard = ui.deck_discard = ui_type_deck(fen.deck_discard,
  dOpenTable, { maleft: 12 }, 'deck_discard', '', ari_get_card);\r

  \  if (exp_commissions(Z.options)) {\r

  \    let open_commissions = ui.open_commissions =
  ui_type_market(fen.open_commissions, dOpenTable, { maleft: 12 },
  'open_commissions', 'bank', ari_get_card);\r

  \    mMagnifyOnHoverControlPopup(ui.open_commissions.cardcontainer);\r

  \    let deck_commission = ui.deck_commission =
  ui_type_deck(fen.deck_commission, dOpenTable, { maleft: 4 },
  'deck_commission', '', ari_get_card);\r

  \    let comm = ui.commissioned = ui_type_rank_count(fen.commissioned,
  dOpenTable, {}, 'commissioned', 'sentiment', ari_get_card);\r

  \    if (comm.items.length > 0) { let isent = arrLast(comm.items); let dsent
  = iDiv(isent); set_card_border(dsent, 15, 'green'); }\r

  \  }\r

  \  if (exp_church(Z.options)) {\r

  \    let church = ui.church = ui_type_church(fen.church, dOpenTable, {
  maleft: 28 }, 'church', 'church', ari_get_card);\r

  \  }\r

  \  if (exp_rumors(Z.options)) {\r

  \    let deck_rumors = ui.deck_rumors = ui_type_deck(fen.deck_rumors,
  dOpenTable, { maleft: 25 }, 'deck_rumors', 'rumors', ari_get_card);\r

  \  }\r

  \  let uname_plays = fen.plorder.includes(Z.uname);\r

  \  let show_first = uname_plays && Z.mode == 'multi' ? Z.uname : uplayer;\r

  \  let order = get_present_order();\r

  \  for (const plname of order) {\r

  \    let pl = fen.players[plname];\r

  \    let playerstyles = { w: '100%', bg: '#ffffff80', fg: 'black', padding:
  4, margin: 4, rounding: 9, border: `2px ${get_user_color(plname)} solid` };\r

  \    let d = mDiv(dMiddle, playerstyles, null, get_user_pic_html(plname,
  25));\r

  \    mFlexWrap(d);\r

  \    mLinebreak(d, 9);\r

  \    let hidden = compute_hidden(plname);\r

  \    ari_present_player(plname, d, hidden);\r

  \  }\r

  \  ari_show_handsorting_buttons_for(Z.mode == 'hotseat' ? Z.uplayer :
  Z.uname); delete Clientdata.handsorting;\r

  \  show_view_buildings_button(uplayer);\r

  \  let desc = ARI.stage[Z.stage];\r

  \  Z.isWaiting = false;\r

  \  if (isdef(fen.winners)) ari_reveal_all_buildings(fen);\r

  \  else if (desc == 'comm_weitergeben' && is_playerdata_set(uplayer)) {\r

  \    if ((Z.mode == 'hotseat' || Z.host == uplayer) && check_resolve()) {\r

  \      Z.turn = [Z.host];\r

  \      Z.stage = 104; //'next_comm_setup_stage';\r

  \    }\r

  \    show_waiting_message(`waiting for other players...`);\r

  \    Z.isWaiting = true;\r

  \  }\r

  }"
ari_present_player: "function ari_present_player(plname, d, ishidden = false)
  {\r

  \  let fen = Z.fen;\r

  \  let pl = fen.players[plname];\r

  \  let ui = UI.players[plname] = { div: d };\r

  \  let hand = ui.hand = ui_type_hand(pl.hand, d, {},
  `players.${plname}.hand`, 'hand', ari_get_card);\r

  \  if (ishidden) { hand.items.map(x => face_down(x)); }\r

  \  let stall = ui.stall = ui_type_market(pl.stall, d, { maleft: 12 },
  `players.${plname}.stall`, 'stall', ari_get_card);\r

  \  if (fen.stage < 5 && ishidden) { stall.items.map(x => face_down(x)); }\r

  \  if (exp_commissions(Z.options)) {\r

  \    if (!ishidden) pl.commissions = correct_handsorting(pl.commissions,
  plname);\r

  \    ui.commissions = ui_type_market(pl.commissions, d, { maleft: 12 },
  `players.${plname}.commissions`, 'commissions', Z.stage == 23 ?
  ari_get_card_large : ari_get_card);\r

  \    if (ishidden) { ui.commissions.items.map(x => face_down(x)); }\r

  \    else mMagnifyOnHoverControlPopup(ui.commissions.cardcontainer);\r

  \  }\r

  \  if (exp_rumors(Z.options)) {\r

  \    if (!ishidden) pl.rumors = correct_handsorting(pl.rumors, plname);\r

  \    ui.rumors = ui_type_market(pl.rumors, d, { maleft: 12 },
  `players.${plname}.rumors`, 'rumors', Z.stage == 24 ? ari_get_card_large :
  ari_get_card);\r

  \    if (ishidden) { ui.rumors.items.map(x => face_down(x)); }\r

  \    else mMagnifyOnHoverControlPopup(ui.rumors.cardcontainer);\r

  \  }\r

  \  ui.journeys = [];\r

  \  let i = 0;\r

  \  for (const j of pl.journeys) {\r

  \    let jui = ui_type_hand(j, d, { maleft: 12 },
  `players.${plname}.journeys.${i}`, '', ari_get_card);\r

  \    i += 1;\r

  \    ui.journeys.push(jui);\r

  \  }\r

  \  mLinebreak(d, 8);\r

  \  ui.buildinglist = [];\r

  \  ui.indexOfFirstBuilding = arrChildren(d).length;\r

  \  for (const k in pl.buildings) {\r

  \    let i = 0;\r

  \    for (const b of pl.buildings[k]) {\r

  \      let type = k;\r

  \      let b_ui = ui_type_building(b, d, { maleft: 8 },
  `players.${plname}.buildings.${k}.${i}`, type, ari_get_card, true,
  ishidden);\r

  \      b_ui.type = k;\r

  \      ui.buildinglist.push(b_ui);\r

  \      if (b.isblackmailed) { mStamp(b_ui.cardcontainer, 'blackmail'); }\r

  \      lookupAddToList(ui, ['buildings', k], b_ui);\r

  \      i += 1;\r

  \    }\r

  \  }\r

  }"
ari_redo_player_stats: "function ari_redo_player_stats(otree, uname) {\r

  \  let item = G.player_stat_items[uname];\r

  \  let d = iDiv(item);\r

  \  let stall_value = otree[uname].stall_value;\r

  \  mRemoveChildrenFromIndex(d, otree.herald == uname ? 3 : 2);\r

  \  let pl = otree[uname];\r

  \  player_stat_count('coin', pl.coins, d);\r

  \  if (isdef(stall_value)) { player_stat_count('shinto shrine', stall_value,
  d); }\r

  \  player_stat_count('star', ari_get_vps(otree, uname), d);\r

  }"
ari_redo_player_ui: "function ari_redo_player_ui(otree, plturn) {\r

  \  let d = G[plturn].hand.container.parentNode;\r

  \  d.innerHTML = plturn;\r

  \  ari_present_player(otree, plturn, d);\r

  }"
ari_refill_deck: "function ari_refill_deck(fen) {\r

  \  fen.deck = fen.deck.concat(fen.open_discard).concat(fen.deck_discard);\r

  \  shuffle(fen.deck);\r

  \  fen.open_discard = [];\r

  \  fen.deck_discard = [];\r

  \  console.log('deck refilled: contains', fen.deck.length, 'cards');\r

  }"
ari_reorg_discard: "function ari_reorg_discard() {\r

  \  let fen = Z.fen;\r

  \  while (fen.deck_discard.length > 0 && fen.open_discard.length < 4) {\r

  \    bottom_elem_from_to(fen.deck_discard, fen.open_discard);\r

  \  }\r

  }"
ari_reveal_all_buildings: "function ari_reveal_all_buildings(fen) {\r

  \  for (const plname of fen.plorder) {\r

  \    let gbs = UI.players[plname].buildinglist;\r

  \    for (const gb of gbs) {\r

  \      gb.items.map(x => face_up(x));\r

  \    }\r

  \  }\r

  }"
ari_select_next_player_according_to_stall_value: "function
  ari_select_next_player_according_to_stall_value() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  Z.stage = 5;\r

  \  let minval = 100000;\r

  \  let minplayer = null;\r

  \  for (const uname of fen.plorder) {\r

  \    if (fen.actionsCompleted.includes(uname)) continue;\r

  \    let stall = fen.players[uname].stall;\r

  \    if (isEmpty(stall)) { fen.actionsCompleted.push(uname); continue; }\r

  \    let val = fen.players[uname].stall_value = arrSum(stall.map(x =>
  ari_get_card(x).val));\r

  \    if (val < minval) { minval = val; minplayer = uname; }\r

  \  }\r

  \  if (!minplayer) {\r

  \    return null;\r

  \  } else {\r

  \    Z.turn = fen.turn = [minplayer];\r

  \    fen.num_actions = fen.total_pl_actions =
  fen.players[minplayer].stall.length;\r

  \    fen.action_number = 1;\r

  \    return minplayer;\r

  \  }\r

  }"
ari_setup: "function ari_setup(player_names) {\r

  \  let pre_fen = {};\r

  \  let deck = pre_fen.deck = get_keys(Aristocards).filter(x =>
  'br'.includes(x[2]));\r

  \  shuffle(deck);\r

  \  pre_fen.market = [];\r

  \  pre_fen.deck_discard = [];\r

  \  pre_fen.open_discard = [];\r

  \  let pls = pre_fen.players = {};\r

  \  for (const plname of player_names) {\r

  \    let pl = pls[plname] = {\r

  \      hand: deck_deal(deck, 7),\r

  \      buildings: { farms: [], estates: [], chateaus: [] },\r

  \      stall: [],\r

  \      stall_value: 0,\r

  \      coins: 3,\r

  \      vps: 0,\r

  \      score: 0,\r

  \    };\r

  \  }\r

  \  pre_fen.plorder = jsCopy(player_names);\r

  \  pre_fen.herald = player_names[0];\r

  \  pre_fen.phase = 'king';\r

  \  pre_fen.stage = 3;\r

  \  pre_fen.iturn = 0;\r

  \  pre_fen.plturn = pre_fen.plorder[pre_fen.iturn];\r

  \  pre_fen.round = [];\r

  \  pre_fen.step = 0;\r

  \  let fen = pre_fen;\r

  \  return fen;\r

  }"
ari_show_building: "function ari_show_building(otree, uname, building_cards) {\r

  \  DA.qanim = [\r

  \    [anim_from_deck_to_marketX, [deck, market]],\r

  \    [anim_from_deck_to_marketX, [deck, market]],\r

  \    [update_otree_from_ui, [otree, { deck: deck, market: market }]],\r

  \    [ari_pre_action, []],\r

  \  ];\r

  \  qanim();\r

  }"
ari_show_deck: "function ari_show_deck(list, dParent) {\r

  \  let id = getUID('u');\r

  \  let d = mDiv(dParent, { bg: 'random', padding: 10 }, id);\r

  \  console.log('list', list);\r

  \  let items = list.map(x => ari_get_card(x));\r

  \  let [w, h] = [items[0].w, items[0].h];\r

  \  console.log('cards', w, h, items);\r

  \  items.map(x => mAppend(d, iDiv(x)));\r

  \  mContainerSplay(d, splay, w, h, items.length, 20);\r

  \  items.map(x => mItemSplay(x, list, splay));\r

  \  return d;\r

  }"
ari_show_handsorting_buttons_for: "function
  ari_show_handsorting_buttons_for(plname) {\r

  \  if (Z.role == 'spectator' || isdef(mBy('dHandButtons'))) return;\r

  \  let fen = Z.fen;\r

  \  let pl = fen.players[plname];\r

  \  if (pl.hand.length <= 1) return;\r

  \  let d = UI.players[plname].hand.container; mStyle(d, { position:
  'relative' });\r

  \  let dHandButtons = mDiv(d, { position: 'absolute', bottom: -2, left: 52,
  height: 25 }, 'dHandButtons');\r

  \  show_player_button('sort', dHandButtons, onclick_by_rank);\r

  }"
ari_start_action_stage: "function ari_start_action_stage() {\r

  \  let next = ari_select_next_player_according_to_stall_value();\r

  \  if (!next) { ari_next_phase(); }\r

  \  take_turn_fen();\r

  }"
ari_start_church_stage: "function ari_start_church_stage() {\r

  \  let [fen] = [Z.fen];\r

  \  let order = fen.plorder = fen.church_order =
  determine_church_turn_order();\r

  \  [Z.turn, Z.stage] = [[order[0]], 17];\r

  \  ari_history_list([`inquisition starts!`], 'church');\r

  \  take_turn_fen();\r

  }"
ari_state: "function ari_state(dParent) {\r

  \  function get_phase_html() {\r

  \    if (isEmpty(Z.phase) || Z.phase == 'over') return null;\r

  \    let rank = Z.phase[0].toUpperCase();\r

  \    let card = ari_get_card(rank + 'Hn', 40);\r

  \    let d = iDiv(card);\r

  \    mClassRemove(d.firstChild, 'card');\r

  \    return iDiv(card).outerHTML;\r

  \  }\r

  \  if (DA.TEST0 == true) {\r

  \    let html = `${Z.stage}`;\r

  \    if (isdef(Z.playerdata)) {\r

  \      let trigger = get_multi_trigger();\r

  \      if (trigger) html += ` trigger:${trigger}`;\r

  \      for (const data of Z.playerdata) {\r

  \        if (data.name == trigger) continue;\r

  \        let name = data.name;\r

  \        let state = data.state;\r

  \        let s_state = object2string(state);\r

  \        html += ` ${name}:'${s_state}'`;\r

  \      }\r

  \      dParent.innerHTML += ` ${Z.playerdata.map(x => x.name)}`;\r

  \    }\r

  \    dParent.innerHTML = html;\r

  \    return;\r

  \  }\r

  \  let user_html = get_user_pic_html(Z.uplayer, 30);\r

  \  let phase_html = get_phase_html();\r

  \  let html = '';\r

  \  if (phase_html) html += `${Z.phase}:&nbsp;${phase_html}`;\r

  \  if (Z.stage == 17) { html += `&nbsp;&nbsp;CHURCH EVENT!!!`; }\r

  \  else if (TESTING) { html += `&nbsp;&nbsp;&nbsp;stage:
  ${ARI.stage[Z.stage]}`; }\r

  \  else html += `&nbsp;player: ${user_html} `;\r

  \  dParent.innerHTML = html;\r

  }"
ari_stats: "function ari_stats(dParent) {\r

  \  let player_stat_items = UI.player_stat_items = ui_player_info(dParent);\r

  \  let fen = Z.fen;\r

  \  let herald = fen.heraldorder[0];\r

  \  for (const plname in fen.players) {\r

  \    let pl = fen.players[plname];\r

  \    let item = player_stat_items[plname];\r

  \    let d = iDiv(item); mCenterFlex(d); mLinebreak(d);\r

  \    if (plname == herald) {\r

  \      mSym('tied-scroll', d, { fg: 'gold', fz: 24, padding: 4 }, 'TR');\r

  \    }\r

  \    if (exp_church(Z.options)) {\r

  \      if (isdef(pl.tithes)) {\r

  \        player_stat_count('cross', pl.tithes.val, d);\r

  \      }\r

  \    }\r

  \    let dCoin = player_stat_count('coin', pl.coins, d);\r

  \    item.dCoin = dCoin.firstChild;\r

  \    item.dAmount = dCoin.children[1];\r

  \    let list = pl.hand.concat(pl.stall);\r

  \    let list_luxury = list.filter(x => x[2] == 'l');\r

  \    player_stat_count('pinching hand', list.length, d);\r

  \    let d1 = player_stat_count('hand-holding-usd', list_luxury.length,
  d);\r

  \    mStyle(d1.firstChild, { fg: 'gold', fz: 20 })\r

  \    if (!isEmpty(fen.players[plname].stall) && fen.stage >= 5 && fen.stage
  <= 6) {\r

  \      player_stat_count('shinto shrine',
  !fen.actionsCompleted.includes(plname) || fen.stage < 6 ?
  calc_stall_value(fen, plname) : '_', d);\r

  \    }\r

  \    player_stat_count('star', plname == U.name || isdef(fen.winners) ?
  ari_calc_real_vps(fen, plname) : ari_calc_fictive_vps(fen, plname), d);\r

  \    if (fen.turn.includes(plname)) {\r

  \      show_hourglass(plname, d, 30, { left: -3, top: 0 }); //'calc( 50% -
  36px )' });\r

  \    }\r

  \  }\r

  }"
ari_tax_phase_needed: "function ari_tax_phase_needed(fen) {\r

  \  let pl_tax = {};\r

  \  let need_tax_phase = false;\r

  \  for (const uplayer of fen.plorder) {\r

  \    let hsz = fen.players[uplayer].hand.length;\r

  \    let nchateaus = fen.players[uplayer].buildings.chateau.length;\r

  \    let allowed = ARI.sz_hand + nchateaus;\r

  \    let diff = hsz - allowed;\r

  \    if (diff > 0) need_tax_phase = true;\r

  \    pl_tax[uplayer] = diff;\r

  \  }\r

  \  if (need_tax_phase) {\r

  \    fen.turn = [ari_get_first_tax_payer(fen, pl_tax)];\r

  \    fen.pl_tax = pl_tax;\r

  \    fen.stage = 2;\r

  \    return true;\r

  \  } else {\r

  \    fen.stage = 3;\r

  \    return false;\r

  \  }\r

  }"
ari_test_hand_to_discard: "function ari_test_hand_to_discard(fen, uname, keep =
  0) {\r

  \  let list = fen.players[uname].hand;\r

  \  while (fen.open_discard.length < 4 && list.length > keep)
  top_elem_from_to(list, fen.open_discard);\r

  \  while (list.length > keep) top_elem_from_to(list, fen.deck_discard);\r

  }"
ari_ui_player: "function ari_ui_player(otree, uname, dParent) {\r

  \  let dPlayer = ui_make_player(otree, uname, dParent);\r

  \  let dHand = ari_make_cardlist(otree[uname].hand, 2, dPlayer);\r

  }"
ari_ut0_create_staged: "function ari_ut0_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  for (const uname in fen.players) {\r

  \    let pl = fen.players[uname];\r

  \    while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);\r

  \  }\r

  \  fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb KCb QDb'.split(' ');\r

  \  fen.players.leo.hand = 'ACb ASb 2Db 4Db 6Db KDb QSb'.split(' ');\r

  \  fen.players.mimi.buildings.farms = [{ list: '4Cr 4Sr 4Sb 4Dr'.split(' '),
  h: null }, { list: '5Cr 5Sr 5Sb 5Dr'.split(' '), h: null }];\r

  \  fen.players.mimi.buildings.estates = [{ list: 'TCr TSr TSb TDr
  TDb'.split(' '), h: null }];\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut1_create_staged: "function ari_ut1_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  top_elem_from_to(fen.deck, fen.market);\r

  \  top_elem_from_to(fen.deck, fen.market);\r

  \  fen.stage = 4;\r

  \  top_elem_from_to(fen.players.mimi.hand, fen.players.mimi.stall);\r

  \  top_elem_from_to(fen.players.mimi.hand, fen.players.mimi.stall);\r

  \  fen.iturn = 1;\r

  \  fen.plturn = 'leo';\r

  \  fen.round = ['mimi'];\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut10_create_staged: "function ari_ut10_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut100_create_staged: "function ari_ut100_create_staged() {\r

  \  console.log('*** test 100: tax ***');\r

  \  TestNumber = 100;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'amanda', 'felix', 'lauren', 'blade'];\r

  \  let fen = ari_setup(player_names);\r

  \  ari_test_hand_to_discard(fen, 'mimi');\r

  \  deck_add(fen.deck, 3, fen.players.amanda.hand);\r

  \  ari_test_hand_to_discard(fen, 'felix', 3);\r

  \  deck_add(fen.deck, 1, fen.players.blade.hand);\r

  \  let sz = ARI.sz_hand;\r

  \  fen.pl_tax = { mimi: -sz, amanda: 3, felix: -sz + 3, lauren: 0, blade: 1
  };\r

  \  [fen.iturn, fen.plturn] = [1, 'amanda'];\r

  \  fen.stage = 2;\r

  \  DA.fen0 = fen;\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  DA.iter_verify = 3;\r

  \  DA.verify = (ot) => {\r

  \    let res = forAll(ot.plorder, x => ot[x].hand.length <= sz);\r

  \    if (!res) for (const uname of ot.plorder) console.log('pl', uname,
  'hand', ot[uname].hand.length, 'should be', Math.min(sz,
  DA.fen0.players[uname].hand.length));\r

  \    return res;\r

  \  };\r

  \  DA.auto_moves = {\r

  \    amanda_1: [[0, 1, 2]],\r

  \    blade_2: [[0]],\r

  \  }\r

  \  return [fen, player_names];\r

  }"
ari_ut101_create_staged: "function ari_ut101_create_staged() {\r

  \  console.log('*** test 101: stall selection 5 players ***');\r

  \  TestNumber = 101;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'amanda', 'felix', 'lauren', 'blade'];\r

  \  let fen = ari_setup(player_names);\r

  \  ari_test_hand_to_discard(fen, 'mimi');\r

  \  ari_test_hand_to_discard(fen, 'felix');\r

  \  fen.stage = 3;\r

  \  DA.fen0 = fen;\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  DA.iter_verify = 6;\r

  \  DA.verify = (ot) => {\r

  \    let stall_sz = { mimi: 0, amanda: 3, felix: 0, lauren: 1, blade: 2 };\r

  \    let res = forAll(ot.plorder, x => ot[x].stall.length == stall_sz[x]);\r

  \    if (!res) for (const uname of ot.plorder) console.log('pl', uname,
  'stall', ot[uname].stall.length, 'should be', stall_sz[uname]);\r

  \    return res;\r

  \  };\r

  \  DA.auto_moves = {\r

  \    amanda_2: [[0, 1, 2]],\r

  \    lauren_4: [[0]],\r

  \    blade_5: [[0, 1]],\r

  \  }\r

  \  return [fen, player_names];\r

  }"
ari_ut102_create_staged: "function ari_ut102_create_staged() {\r

  \  console.log('*** test 102: stall selection mimi-leo ***');\r

  \  TestNumber = 102;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  ari_test_hand_to_discard(fen, 'mimi');\r

  \  fen.stage = 3;\r

  \  DA.fen0 = fen;\r

  \  DA.iter_verify = 3;\r

  \  DA.verify = (ot) => {\r

  \    let stall_sz = { mimi: 0, leo: 3 };\r

  \    let res = forAll(ot.plorder, x => ot[x].stall.length == stall_sz[x]);\r

  \    if (!res) for (const uname of ot.plorder) console.log('pl', uname,
  'stall', ot[uname].stall.length, 'should be', stall_sz[uname]);\r

  \    return res;\r

  \  };\r

  \  DA.auto_moves = {\r

  \    leo_2: [[0, 1, 2]],\r

  \  };\r

  \  return [fen, player_names];\r

  }"
ari_ut103_create_staged: "function ari_ut103_create_staged() {\r

  \  console.log('*** test 103: trade ***');\r

  \  TestNumber = 103;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen, 2);\r

  \  DA.fen0 = fen;\r

  \  DA.auto_moves = {\r

  \    mimi_1: [['trade'], [1, 3]],\r

  \    mimi_2: [['pass']],\r

  \    leo_3: [['trade'], [1, 3]],\r

  \    leo_4: [['pass']],\r

  \  };\r

  \  DA.iter_verify = 5;\r

  \  DA.verify = (ot) => {\r

  \    let res = firstCond(ot.mimi.hand, x => x == DA.fen0.market[1]);\r

  \    if (!res) console.log('mimi stall does not contain market card from
  start!!!');\r

  \    return res;\r

  \  };\r

  \  return [fen, player_names];\r

  }"
ari_ut104_create_staged: "function ari_ut104_create_staged() {\r

  \  console.log('*** test 104: downgrade from estate to farm ***');\r

  \  TestNumber = 104;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen);\r

  \  stage_building(fen, fen.iturn, 'estate');\r

  \  DA.fen0 = fen;\r

  \  DA.iter_verify = 2;\r

  \  DA.verify = (ot) => {\r

  \    let stall_sz = { mimi: 0, leo: 3 };\r

  \    let res = ot.mimi.buildings.farms.length == 1 &&
  ot.mimi.buildings.estates.length == 0;\r

  \    if (!res) console.log('mimi buildings', ot.mimi.buildings);\r

  \    return res;\r

  \  };\r

  \  DA.auto_moves = {\r

  \    mimi_1: [['downgrade'], [0]],\r

  \  };\r

  \  return [fen, player_names];\r

  }"
ari_ut105_create_staged: "function ari_ut105_create_staged() {\r

  \  console.log('*** test 105: visit ***');\r

  \  TestNumber = 105;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo', 'meckele'];\r

  \  let fen = ari_setup(player_names);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen);\r

  \  stage_replace_hand_cards_by(fen, 'mimi', ['QSy']);\r

  \  stage_building(fen, fen.iturn, 'estate');\r

  \  stage_building(fen, 1, 'estate');\r

  \  stage_building(fen, 2, 'estate');\r

  \  fen.phase = 'queen';\r

  \  DA.fen0 = fen;\r

  \  DA.iter_verify = 2;\r

  \  DA.verify = (ot) => {\r

  \    let uname_visited = ot.plturn;\r

  \    let building = ot[uname_visited].buildings.estates[0];\r

  \    let res = ot.mimi.coins == 2 || ot.mimi.coins == 4 ||
  ot.mimi.hand.length + ot.mimi.stall.length == 6;\r

  \    if (!res) console.log('mimi visit payment did not work!',
  building.list);\r

  \    return res;\r

  \  };\r

  \  DA.auto_moves = {\r

  \    mimi_1: [['visit'], [0], [0], ['pass']],\r

  \  };\r

  \  return [fen, player_names];\r

  }"
ari_ut106_create_staged: "function ari_ut106_create_staged() {\r

  \  console.log('*** test 106: double visit ***');\r

  \  TestNumber = 106;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo', 'meckele'];\r

  \  let fen = ari_setup(player_names);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen);\r

  \  stage_replace_hand_cards_by(fen, 'mimi', ['QSy', 'QSg']);\r

  \  stage_building(fen, fen.iturn, 'estate');\r

  \  stage_building(fen, 1, 'chateau');\r

  \  stage_building(fen, 2, 'chateau');\r

  \  fen.phase = 'queen';\r

  \  DA.fen0 = fen;\r

  \  DA.auto_moves = {\r

  \    mimi_1: [['visit'], [0], [0]],\r

  \    mimi_2: [['visit'], [0], [0]],\r

  \  };\r

  \  DA.iter_verify = 3;\r

  \  DA.verify = (ot) => {\r

  \    let uname_visited = ot.plorder[1];\r

  \    let chateaus = ot[uname_visited].buildings.chateaus;\r

  \    console.log('chateaus:', uname_visited, chateaus);\r

  \    let res = ot.mimi.coins == 5 ||
  ot[uname_visited].buildings.chateaus.length == 0;\r

  \    if (!res) console.log('double visit failed or building is
  correct!!!');\r

  \    return res;\r

  \  };\r

  \  return [fen, player_names];\r

  }"
ari_ut107_create_staged: "function ari_ut107_create_staged() {\r

  \  console.log('*** test 107: end game ***');\r

  \  TestNumber = 107;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen);\r

  \  stage_correct_buildings(fen, { mimi: { farms: 2, estates: 2, chateaus: 1
  }, leo: { farms: 3 } });\r

  \  DA.fen0 = fen;\r

  \  DA.auto_moves = {\r

  \    mimi_1: [['pass']],\r

  \    leo_2: [['pass']],\r

  \    3: [[0]],\r

  \  };\r

  \  DA.iter_verify = 4;\r

  \  DA.verify = (ot) => {\r

  \    let res = ot.winner = 'mimi';\r

  \    if (!res) console.log('end game mimi should win didnt work!', ot);\r

  \    return res;\r

  \  };\r

  \  return [fen, player_names];\r

  }"
ari_ut108_create_staged: "function ari_ut108_create_staged() {\r

  \  console.log('*** test 108: buy from open discard ***');\r

  \  TestNumber = 108;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  fen.open_discard = deck_deal(fen.deck, 4);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen);\r

  \  stage_correct_buildings(fen, { mimi: { farms: 2, estates: 2, chateaus: 1
  }, leo: { farms: 3 } });\r

  \  fen.phase = 'jack';\r

  \  DA.fen0 = fen;\r

  \  DA.auto_moves = {\r

  \    mimi_1: [['buy'], [0], [0]],\r

  \  };\r

  \  DA.iter_verify = 2;\r

  \  DA.verify = (ot) => {\r

  \    let res = ot.open_discard.length == 3 && ot.mimi.hand.length == 5 &&
  ot.mimi.coins == 2\r

  \      || arrLast(ot.open_discard)[0] == 'J' && ot.mimi.hand.length == 4 &&
  ot.mimi.coins == 3;\r

  \    if (!res) console.log('buy form discard does not work!', ot.mimi,
  ot.open_discard);\r

  \    return res;\r

  \  };\r

  \  return [fen, player_names];\r

  }"
ari_ut109_create_staged: "function ari_ut109_create_staged() {\r

  \  console.log('*** test 109: harvest ***');\r

  \  TestNumber = 109;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo', 'meckele'];\r

  \  let fen = ari_setup(player_names);\r

  \  fen.open_discard = deck_deal(fen.deck, 4);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen);\r

  \  stage_correct_buildings(fen, { mimi: { farms: 2, estates: 2 }, leo: {
  farms: 3 }, meckele: { farms: 2 } });\r

  \  fen.phase = 'jack';\r

  \  DA.fen0 = fen;\r

  \  DA.auto_moves = [\r

  \    [[]],\r

  \    [['pass']], [['pass']], [['pass']],\r

  \    [[0]], [[0]], [[0]],\r

  \    [[0, 1]], [[0, 1]], [[0, 1]],\r

  \    [['harvest'], [0]],\r

  \  ];\r

  \  DA.iter_verify = 11;\r

  \  DA.verify = (ot) => {\r

  \    let uname = ot.plturn;\r

  \    let res = ot[uname].buildings.farms[0].h == null &&
  ot[uname].hand.length == 6;\r

  \    if (!res) console.log('harvest FAIL!', ot[uname]);\r

  \    return res;\r

  \  };\r

  \  return [fen, player_names];\r

  }"
ari_ut11_create_staged: "function ari_ut11_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  let [mimi, leo] = [fen.players.mimi, fen.players.leo];\r

  \  mimi.buildings.farms = [{ list: deck_deal(fen.deck, 4), h: null }];\r

  \  leo.buildings.farms = [{ list: deck_deal(fen.deck, 4), h: null }];\r

  \  fen.open_discard = deck_deal(fen.deck, 4);\r

  \  fen.market = deck_deal(fen.deck, 2);\r

  \  fen.phase = 'king';\r

  \  arisim_stage_4(fen, 3, 3);\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut110_create_staged: "function ari_ut110_create_staged() {\r

  \  console.log('*** test 110: end game 2 ***');\r

  \  TestNumber = 110;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen);\r

  \  fen.open_discard = deck_deal(fen.players.mimi.hand, 2);\r

  \  deck_add(fen.players.leo.hand, 2, fen.open_discard);\r

  \  stage_correct_buildings(fen, { mimi: { farms: 2, estates: 2, chateaus: 1
  }, leo: { farms: 3 } });\r

  \  fen.phase = 'jack';\r

  \  DA.fen0 = fen;\r

  \  DA.auto_moves = [\r

  \    [[]],\r

  \    [['pass']], [['pass']],\r

  \    [[0]], [[0]],\r

  \    [['pass']], [['pass']],\r

  \    [[1]],\r

  \  ];\r

  \  DA.iter_verify = 8;\r

  \  DA.verify = (ot) => {\r

  \    let res = ot.stage == 3;\r

  \    if (!res) console.log('Not ending game FAIL!', ot.stage);\r

  \    return res;\r

  \  };\r

  \  return [fen, player_names];\r

  }"
ari_ut111_create_staged: "function ari_ut111_create_staged() {\r

  \  console.log('*** test 111: auction payment test ***');\r

  \  TestNumber = 111;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo', 'meckele'];\r

  \  let fen = ari_setup(player_names);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen);\r

  \  fen.open_discard = deck_deal(fen.players.mimi.hand, 2);\r

  \  deck_add(fen.players.leo.hand, 2, fen.open_discard);\r

  \  fen.phase = 'queen';\r

  \  DA.fen0 = fen;\r

  \  DA.auto_moves = {\r

  \    1: [['pass']],\r

  \    2: [['pass']],\r

  \    3: [['pass']],\r

  \    4: [[0]],\r

  \    5: [[1]],\r

  \    6: [[2]],\r

  \    7: [[0]],\r

  \  };\r

  \  DA.iter_verify = 8;\r

  \  DA.verify = (ot) => {\r

  \    let coins = ot.plorder.map(x => ot[x].coins);\r

  \    let sum = arrSum(coins);\r

  \    let res = sum == 8;\r

  \    if (!res) console.log('payment for auction card wrong', coins, sum);\r

  \    return res;\r

  \  };\r

  \  return [fen, player_names];\r

  }"
ari_ut112_create_staged: "function ari_ut112_create_staged() {\r

  \  console.log('*** test 112: auction payment test 2 ***');\r

  \  TestNumber = 112;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo', 'meckele', 'felix', 'amanda'];\r

  \  let fen = ari_setup(player_names);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen);\r

  \  fen.phase = 'queen';\r

  \  DA.fen0 = fen;\r

  \  DA.auto_moves = {\r

  \    1: [['pass']],\r

  \    2: [['pass']],\r

  \    3: [['pass']],\r

  \    4: [['pass']],\r

  \    5: [['pass']],\r

  \    6: [[1]],\r

  \    7: [[0]],\r

  \    8: [[2]],\r

  \    9: [[2]],\r

  \    10: [[1]],\r

  \    11: [[0]],\r

  \    12: [[1]],\r

  \  };\r

  \  DA.iter_verify = 13;\r

  \  DA.verify = (ot) => {\r

  \    let coins = ot.plorder.map(x => ot[x].coins);\r

  \    let sum = arrSum(coins);\r

  \    let res = sum == 11;\r

  \    if (!res) console.log('payment for auction card wrong', coins, sum);\r

  \    return res;\r

  \  };\r

  \  return [fen, player_names];\r

  }"
ari_ut113_create_staged: "function ari_ut113_create_staged() {\r

  \  console.log('*** test 113: buy from open discard w/ jack ***');\r

  \  TestNumber = 113;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  fen.open_discard = deck_deal(fen.deck, 4);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen);\r

  \  stage_replace_hand_cards_by(fen, 'mimi', ['JSy']);\r

  \  stage_correct_buildings(fen, { mimi: { farms: 2, estates: 2, chateaus: 1
  }, leo: { farms: 3 } });\r

  \  fen.phase = 'jack';\r

  \  DA.fen0 = fen;\r

  \  DA.auto_moves = {\r

  \    mimi_1: [['buy'], [0], [0]],\r

  \  };\r

  \  DA.iter_verify = 2;\r

  \  DA.verify = (ot) => {\r

  \    let res = ot.open_discard.length == 3 && ot.mimi.hand.length == 5 &&
  ot.mimi.coins == 2\r

  \      || arrLast(ot.open_discard)[0] == 'J' && ot.mimi.hand.length == 4 &&
  ot.mimi.coins == 3;\r

  \    if (!res) console.log('buy form discard does not work!', ot.mimi,
  ot.open_discard);\r

  \    return res;\r

  \  };\r

  \  return [fen, player_names];\r

  }"
ari_ut12_create_staged: "function ari_ut12_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'amanda', 'felix', 'lauren', 'blade'];\r

  \  let fen = ari_setup(player_names);\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut13_create_staged: "function ari_ut13_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'amanda', 'felix', 'lauren', 'blade'];\r

  \  let fen = ari_setup(player_names);\r

  \  ari_test_hand_to_discard(fen, 'mimi');\r

  \  ari_test_hand_to_discard(fen, 'lauren');\r

  \  console.log('mimi', fen.players.mimi)\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut14_create_staged: "function ari_ut14_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'amanda', 'felix', 'lauren', 'blade'];\r

  \  let fen = ari_setup(player_names);\r

  \  DA.fen0 = jsCopy(fen);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all(fen, 1);\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  DA.iter_verify = 2;\r

  \  DA.verify = (ot) => {\r

  \    let plast = arrLast(ot.round);\r

  \    let ok = sameList(ot[plast].hand, DA.fen0.players[plast].hand);\r

  \    console.log('pl', plast, 'hand', ot[plast].hand, 'should be',
  DA.fen0.players[plast].hand);\r

  \    return ok;\r

  \  }\r

  \  return [fen, player_names];\r

  }"
ari_ut15_create_staged: "function ari_ut15_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'amanda', 'felix', 'lauren', 'blade'];\r

  \  let fen = DA.fen0 = ari_setup(player_names);\r

  \  ari_test_hand_to_discard(fen, 'mimi');\r

  \  ari_test_hand_to_discard(fen, 'amanda');\r

  \  ari_test_hand_to_discard(fen, 'lauren');\r

  \  ari_test_hand_to_discard(fen, 'blade');\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  DA.iter_verify = 3;\r

  \  DA.verify = (ot) => ot.plturn == 'felix';\r

  \  return [fen, player_names];\r

  }"
ari_ut16_create_staged: "function ari_ut16_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut2_create_staged: "function ari_ut2_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4(fen);\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut206_create_staged: "function ari_ut206_create_staged() {\r

  \  console.log('*** test 206: prep double visit ***');\r

  \  TestNumber = 206;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo', 'meckele'];\r

  \  let fen = ari_setup(player_names);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen);\r

  \  stage_replace_hand_cards_by(fen, 'mimi', ['QSy', 'QSg']);\r

  \  stage_building(fen, fen.iturn, 'estate');\r

  \  fen.players.leo.buildings.farms = [{ list: '4Cy 4Sy 4Hy 6Dy'.split(' '),
  h: null }, { list: '5Cy JSy 5Sy 5Dy'.split(' '), h: null }];\r

  \  fen.phase = 'queen';\r

  \  DA.fen0 = fen;\r

  \  return [fen, player_names];\r

  }"
ari_ut3_create_staged: "function ari_ut3_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  for (const uname in fen.players) {\r

  \    let pl = fen.players[uname];\r

  \    while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);\r

  \  }\r

  \  fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb KCb QDb'.split(' ');\r

  \  fen.players.leo.hand = 'ACb KDb QSb ASb 2Db 4Db 6Db'.split(' ');\r

  \  fen.players.mimi.buildings.farms = [{ list: '4Cr 7Sr 4Sb 4Dr'.split(' '),
  h: null }];\r

  \  fen.players.leo.buildings.estates = [{ list: 'TCr 7Sr TSb TDr
  TDb'.split(' '), h: null }];\r

  \  fen.market = 'KSb 3Sb'.split(' ');\r

  \  arisim_stage_4(fen, 3, 2);\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut306_create_staged: "function ari_ut306_create_staged() {\r

  \  console.log('*** test 306: prep double visit ***');\r

  \  TestNumber = 306;\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo', 'meckele'];\r

  \  let fen = ari_setup(player_names);\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all_mimi_starts(fen);\r

  \  stage_replace_hand_cards_by(fen, 'mimi', ['QSy', 'QSg']);\r

  \  stage_building(fen, fen.iturn, 'estate');\r

  \  fen.players.leo.buildings.farms = [{ list: '4Cy 4Sy 4Hy 6Dy'.split(' '),
  h: null }, { list: '5Cy JSy 5Sy 5Dy'.split(' '), h: null }];\r

  \  fen.phase = 'queen';\r

  \  DA.fen0 = fen;\r

  \  DA.auto_moves = [[],\r

  \  [['visit'], ['last'], [0]],\r

  \  [['visit'], ['last'], [1]],\r

  \  [['pass']],\r

  \  ];\r

  \  return [fen, player_names];\r

  }"
ari_ut4_create_staged: "function ari_ut4_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  for (const uname in fen.players) {\r

  \    let pl = fen.players[uname];\r

  \    while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);\r

  \  }\r

  \  fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb KCb QDb'.split(' ');\r

  \  fen.players.leo.hand = 'ACb KDb QSb ASb 2Db 4Db 6Db'.split(' ');\r

  \  fen.players.mimi.buildings.farms = [{ list: '4Cr 7Sr 4Sb 4Dr'.split(' '),
  h: null }];\r

  \  fen.players.leo.buildings.estates = [{ list: 'TCr 7Sr TSb TDr
  TDb'.split(' '), h: null }];\r

  \  fen.market = 'KSb 3Sb'.split(' ');\r

  \  fen.phase = 'queen';\r

  \  fen.stage = 11;\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut5_create_staged: "function ari_ut5_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  for (const uname in fen.players) {\r

  \    let pl = fen.players[uname];\r

  \    while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);\r

  \  }\r

  \  fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb KCb QDb'.split(' ');\r

  \  fen.players.leo.hand = 'ACb KDb QSb ASb 2Db 4Db 6Db'.split(' ');\r

  \  fen.players.mimi.buildings.farms = [{ list: '4Cr 7Sr 4Sb 4Dr'.split(' '),
  h: null }];\r

  \  fen.players.leo.buildings.estates = [{ list: 'TCr 7Sr TSb TDr
  TDb'.split(' '), h: null }];\r

  \  fen.phase = 'jack';\r

  \  fen.stage = 3;\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut6_create_staged: "function ari_ut6_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  for (const uname in fen.players) {\r

  \    let pl = fen.players[uname];\r

  \    while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);\r

  \  }\r

  \  fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb KCb QDb'.split(' ');\r

  \  fen.players.leo.hand = 'ACb KDb QSb ASb 2Db 4Db 6Db'.split(' ');\r

  \  fen.players.mimi.buildings.farms = [{ list: '4Cr 7Sr 4Sb 4Dr'.split(' '),
  h: null }];\r

  \  fen.players.leo.buildings.estates = [{ list: 'TCr 7Sr TSb TDr
  TDb'.split(' '), h: null }];\r

  \  for (let i = 0; i < 3; i++) {\r

  \    top_elem_from_to(fen.deck, fen.market);\r

  \  }\r

  \  fen.phase = 'jack';\r

  \  arisim_stage_4(fen);\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut7_create_staged: "function ari_ut7_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  for (const uname in fen.players) {\r

  \    let pl = fen.players[uname];\r

  \    while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);\r

  \  }\r

  \  fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb QCb QDb'.split(' ');\r

  \  fen.players.leo.hand = 'ACb KDb QSb ASb 2Db 4Db 6Db'.split(' ');\r

  \  fen.players.mimi.buildings.farms = [{ list: '4Cr 7Sr 4Sb 4Dr'.split(' '),
  h: null }];\r

  \  fen.players.leo.buildings.estates = [{ list: 'TCr 7Sr TSb TDr
  TDb'.split(' '), h: null }];\r

  \  for (let i = 0; i < 3; i++) {\r

  \    top_elem_from_to(fen.deck, fen.market);\r

  \  }\r

  \  fen.phase = 'jack';\r

  \  arisim_stage_4(fen);\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut8_create_staged: "function ari_ut8_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  deck_add(fen.deck, 1, fen.players.mimi.hand); //'AHb ADb 2Cb 4Cb 6Cb QCb
  QDb'.split(' ');\r

  \  //deck_add(fen.deck, 2, fen.players.leo.hand); //'ACb KDb QSb ASb 2Db 4Db
  6Db'.split(' ');\r

  \  fen.players.mimi.buildings.farms = [{ list: deck_deal(fen.deck, 4), h:
  '3Hb' }];\r

  \  fen.players.leo.buildings.farms = [{ list: deck_deal(fen.deck, 4), h:
  null }];\r

  \  fen.players.leo.buildings.estates = [{ list: deck_deal(fen.deck, 5), h:
  null }];\r

  \  fen.market = deck_deal(fen.deck, 3);\r

  \  fen.phase = 'jack';\r

  \  arisim_stage_4(fen);\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
ari_ut9_create_staged: "function ari_ut9_create_staged() {\r

  \  Session.cur_game = 'gAristo';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = ari_setup(player_names);\r

  \  for (const uname in fen.players) {\r

  \    let pl = fen.players[uname];\r

  \    while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);\r

  \  }\r

  \  fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb QCb QDb'.split(' ');\r

  \  fen.players.leo.hand = 'ACb KDb QSb ASb 2Db 4Db 6Db'.split(' ');\r

  \  fen.players.mimi.buildings.farms = [{ list: '4Cr 7Sr 4Sb 4Dr'.split(' '),
  h: '3Hb' }];\r

  \  fen.players.leo.buildings.farms = [{ list: 'JCr JSr JSb JDr'.split(' '),
  h: '3Sr' }];\r

  \  fen.players.leo.buildings.estates = [{ list: 'TCr 7Sr TSb TDr
  TDb'.split(' '), h: null }];\r

  \  for (let i = 0; i < 3; i++) {\r

  \    top_elem_from_to(fen.deck, fen.market);\r

  \  }\r

  \  fen.phase = 'king';\r

  \  arisim_stage_4(fen);\r

  \  DA.staged_moves = [];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
arisim_stage_3: "function arisim_stage_3(fen) {\r

  \  top_elem_from_to(fen.deck, fen.market);\r

  \  top_elem_from_to(fen.deck, fen.market);\r

  \  if (fen.phase == 'jack') top_elem_from_to(fen.deck, fen.market);\r

  \  fen.stage = 4;\r

  }"
arisim_stage_4: "function arisim_stage_4(fen, n_mimi = 2, n_leo = 3) {\r

  \  for (let i = 0; i < n_mimi; i++) top_elem_from_to(fen.players.mimi.hand,
  fen.players.mimi.stall);\r

  \  for (let i = 0; i < n_leo; i++)  top_elem_from_to(fen.players.leo.hand,
  fen.players.leo.stall);\r

  \  fen.stage = 5;\r

  \  let valmimi = fen.players.mimi.stall_value =
  arrSum(fen.players.mimi.stall.map(x => Aristocards[x].val));\r

  \  let valleo = fen.players.leo.stall_value =
  arrSum(fen.players.leo.stall.map(x => Aristocards[x].val));\r

  \  let minplayer = valmimi <= valleo ? 'mimi' : 'leo';\r

  \  fen.iturn = fen.plorder.indexOf(minplayer); fen.plturn = minplayer;\r

  \  fen.num_actions = fen.total_pl_actions =
  fen.players[minplayer].stall.length;\r

  \  fen.action_number = 1;\r

  }"
arisim_stage_4_all: "function arisim_stage_4_all(fen, n = 3) {\r

  \  for (let i = 0; i < n; i++) top_elem_from_to(fen.players.mimi.hand,
  fen.players.mimi.stall);\r

  \  let others = get_keys(fen.players).filter(x => x != 'mimi');\r

  \  for (const uname of others) {\r

  \    for (let i = 0; i < n; i++)  top_elem_from_to(fen.players[uname].hand,
  fen.players[uname].stall);\r

  \  }\r

  \  let list = [];\r

  \  for (const uname of get_keys(fen.players)) {\r

  \    fen.players[uname].stall_value = arrSum(fen.players[uname].stall.map(x
  => Aristocards[x].val));\r

  \    list.push({ uname: uname, val: fen.players[uname].stall_value });\r

  \  }\r

  \  fen.stage = 5;\r

  \  list = sortBy(list, 'val');\r

  \  let minplayer = list[0].uname;\r

  \  fen.iturn = fen.plorder.indexOf(minplayer);\r

  \  fen.plturn = minplayer;\r

  \  fen.num_actions = fen.total_pl_actions =
  fen.players[minplayer].stall.length;\r

  \  fen.action_number = 1;\r

  }"
arisim_stage_4_all_mimi_starts: "function arisim_stage_4_all_mimi_starts(fen, n
  = 3) {\r

  \  for (let i = 0; i < n; i++) top_elem_from_to(fen.players.mimi.hand,
  fen.players.mimi.stall);\r

  \  let others = get_keys(fen.players).filter(x => x != 'mimi');\r

  \  for (const uname of others) {\r

  \    for (let i = 0; i < n; i++)  top_elem_from_to(fen.players[uname].hand,
  fen.players[uname].stall);\r

  \  }\r

  \  let list = [];\r

  \  for (const uname of get_keys(fen.players)) {\r

  \    fen.players[uname].stall_value = arrSum(fen.players[uname].stall.map(x
  => Aristocards[x].val));\r

  \    list.push({ uname: uname, val: fen.players[uname].stall_value });\r

  \  }\r

  \  fen.stage = 5;\r

  \  list = sortBy(list, 'val');\r

  \  let minplayer = list[0].uname;\r

  \  if (minplayer != 'mimi') {\r

  \    console.log('NOT mimi!!! minplayer', minplayer)\r

  \    let best_stall = fen.players[minplayer].stall;\r

  \    let best_stall_value = fen.players[minplayer].stall_value;\r

  \    fen.players[minplayer].stall = fen.players.mimi.stall;\r

  \    fen.players[minplayer].stall_value = fen.players.mimi.stall_value;\r

  \    fen.players.mimi.stall = best_stall;\r

  \    fen.players.mimi.stall_value = best_stall_value;\r

  \    minplayer = 'mimi';\r

  \  }\r

  \  fen.iturn = fen.plorder.indexOf(minplayer);\r

  \  fen.plturn = minplayer;\r

  \  console.assert(fen.plturn == 'mimi', 'WTF?????????????????');\r

  \  fen.num_actions = fen.total_pl_actions =
  fen.players[minplayer].stall.length;\r

  \  fen.action_number = 1;\r

  }"
aristo: "function aristo() {\r

  \  const rankstr = 'A23456789TJQK*';\r

  \  function setup(players, options) {\r

  \    let fen = { players: {}, plorder: jsCopy(players), history: [] };\r

  \    let n = players.length;\r

  \    let num_decks = fen.num_decks = 2 + (n >= 8 ? 2 : n >= 6 ? 1 : 0);\r

  \    let deck = fen.deck = create_fen_deck('n', num_decks);\r

  \    shuffle(deck);\r

  \    let deck_commission = fen.deck_commission = create_fen_deck('c');
  shuffle(deck_commission);\r

  \    let deck_luxury = fen.deck_luxury = create_fen_deck('l');
  shuffle(deck_luxury);\r

  \    let deck_rumors = fen.deck_rumors = exp_rumors(options) ?
  create_fen_deck('r') : []; shuffle(deck_rumors);\r

  \    shuffle(fen.plorder);\r

  \    fen.market = [];\r

  \    fen.deck_discard = [];\r

  \    fen.open_discard = [];\r

  \    fen.commissioned = [];\r

  \    fen.open_commissions = exp_commissions(options) ?
  deck_deal(deck_commission, 3) : [];\r

  \    fen.church = exp_church(options) ? deck_deal(deck, players.length) :
  [];\r

  \    for (const plname of players) {\r

  \      let pl = fen.players[plname] = {\r

  \        hand: deck_deal(deck, 7),\r

  \        commissions: exp_commissions(options) ? deck_deal(deck_commission,
  4) : [],\r

  \        rumors: exp_rumors(options) ? deck_deal(deck_rumors, players.length
  - 1) : [],\r

  \        journeys: [],\r

  \        buildings: { farm: [], estate: [], chateau: [] },\r

  \        stall: [],\r

  \        stall_value: 0,\r

  \        coins: 3,\r

  \        vps: 0,\r

  \        score: 0,\r

  \        name: plname,\r

  \        color: get_user_color(plname),\r

  \      };\r

  \    }\r

  \    fen.phase = 'king';\r

  \    fen.num_actions = 0;\r

  \    fen.herald = fen.plorder[0];\r

  \    fen.heraldorder = jsCopy(fen.plorder);\r

  \    if (exp_commissions(options)) {\r

  \      ari_history_list([`commission trading starts`], 'commissions',
  fen);\r

  \      [fen.stage, fen.turn] = [23, options.mode == 'hotseat' ?
  [fen.plorder[0]] : fen.plorder]; fen.comm_setup_num = 3; fen.keeppolling =
  true;\r

  \    } else if (exp_rumors(options) && fen.plorder.length > 2) {\r

  \      ari_history_list([`gossiping starts`], 'rumors', fen);\r

  \      [fen.stage, fen.turn] = [24, options.mode == 'hotseat' ?
  [fen.plorder[0]] : fen.plorder];\r

  \    } else[fen.stage, fen.turn] = set_journey_or_stall_stage(fen, options,
  fen.phase);\r

  \    return fen;\r

  \  }\r

  \  function activate_ui() { ari_activate_ui(); }\r

  \  function check_gameover(z) { return isdef(z.fen.winners) ? z.fen.winners
  : false; }\r

  \  function present(dParent) { ari_present(dParent); }\r

  \  function stats(dParent) { ari_stats(dParent); }\r

  \  function state_info(dParent) { ari_state(dParent); }\r

  \  function get_selection_color(item) {\r

  \    if (Z.stage == 41 && Z.A.selected.length == 1) return 'blue'; return
  'red';\r

  \  }\r

  \  return { get_selection_color, rankstr, setup, activate_ui,
  check_gameover, present, state_info, stats };\r

  }"
aristoAggregateVisible: "function aristoAggregateVisible(g) {\r

  \  let result = [];\r

  \  let stalls = g.allPlayers.map(x => x.stall);\r

  \  result = arrFlatten(stalls).concat(g.market.cards);\r

  \  return result;\r

  }"
aristoAIAction: "function aristoAIAction(pl, g, key) {\r

  \  if (key == 'stall') {\r

  \    let deck1 = new Deck(pl.hand);\r

  \    pl.stall = deck1.deal(randomNumber(Math.min(2, deck1.count()),
  Math.min(5, deck1.count())));\r

  \    pl.hand = deck1.cards();\r

  \  }\r

  }"
aristocracy_activate: "function aristocracy_activate(fen, plname) {\r

  \  console.log('activating for', plname)\r

  }"
aristocracy_present: "function aristocracy_present(fen, dParent, plname) {\r

  \  console.log('fen', fen);\r

  }"
aristocracy_setup: "function aristocracy_setup(player_names) {\r

  \  let fen = {};\r

  \  let deck = fen.deck = get_keys(Aristocards).filter(x =>
  'br'.includes(x[2]));\r

  \  shuffle(deck);\r

  \  fen.market = [];\r

  \  fen.deck_discard = [];\r

  \  fen.open_discard = [];\r

  \  let pls = fen.players = {};\r

  \  for (const plname of player_names) {\r

  \    let pl = pls[plname] = {\r

  \      hand: deck_deal(deck, 7),\r

  \      buildings: { farms: [], estates: [], chateaus: [] },\r

  \      stall: [],\r

  \      stall_value: 0,\r

  \      coins: 3,\r

  \      vps: 0,\r

  \      score: 0,\r

  \    };\r

  \  }\r

  \  fen.plorder = rPlayerOrder(player_names);\r

  \  fen.iturn = 0;\r

  \  fen.plturn = fen.plorder[0];\r

  \  fen.turn = [fen.plturn];\r

  \  fen.round = [];\r

  \  fen.herald = fen.plturn;\r

  \  fen.phase = 'king';\r

  \  fen.stage = 3;\r

  \  fen.step = 0;\r

  \  return fen;\r

  }"
aristoExchangeCard: function aristoExchangeCard() { }
aristoGame1: "function aristoGame1(g) {\r

  \  let phase = g.phase = 'king';\r

  \  let players = g.allPlayers;\r

  \  let i = 0; players.map(x => x.index = i++);\r

  \  let indices = players.map(x => x.index);\r

  \  let me = g.me;\r

  \  let others = g.others;\r

  \  let market = g.market;\r

  \  let buy_cards = g.buy_cards;\r

  \  let draw_pile = g.draw_pile; draw_pile.type = 'deck';\r

  \  let deck = draw_pile.deck = new Deck();\r

  \  deck.init52_double();\r

  \  let discard_pile = g.discard_pile; discard_pile.type = 'deck';\r

  \  let discard = discard_pile.deck = new Deck();\r

  \  for (const pl of players) { pl.hand = deck.deal(7); pl.coins = 3; }\r

  \  market.cards = deck.deal(3); market.type = 'cards';\r

  \  buy_cards.cards = []; buy_cards.type = 'cards';\r

  \  let herald = g.herald = players[1];\r

  \  let heraldOrder = g.heraldOrder = arrCycle(indices, herald.index);\r

  \  g.stallsHidden = true;\r

  \  for (const plIndex of heraldOrder) {\r

  \    if (plIndex == 0) break;\r

  \    let pl = players[plIndex];\r

  \    aristoAIAction(pl, g, 'stall');\r

  \  }\r

  \  aristoUi(dTable, g);\r

  \  dLineTopMiddle.innerHTML = 'choose your stall!';\r

  \  mButton('submit move', () => aristoUserAction(g, 'stall', aristoGame2),
  mBy('sidebar').firstChild, { w: 80, bg: g.color }, 'mybutton');\r

  \  for (const card of g.me.handItems) {\r

  \    let d = iDiv(card);\r

  \    d.onclick = () => {\r

  \      if (card.isSelected) {\r

  \        card.isSelected = false;\r

  \        iDiv(card).style.transform = 'unset';\r

  \      } else {\r

  \        card.isSelected = true;\r

  \        iDiv(card).style.transform = 'translateY(-25px)';\r

  \      }\r

  \    }\r

  \  }\r

  }"
aristoGame2: "function aristoGame2(g) {\r

  \  let heraldOrder = g.heraldOrder;\r

  \  let players = g.allPlayers;\r

  \  let me = g.me;\r

  \  let iNext = heraldOrder.indexOf(0) + 1;\r

  \  for (let i = iNext; i < heraldOrder.length; i++) {\r

  \    let plIndex = heraldOrder[i];\r

  \    let pl = players[plIndex];\r

  \    if (plIndex == 0) break;\r

  \    let deck1 = new Deck(pl.hand);\r

  \    pl.stall = deck1.deal(randomNumber(Math.min(2, deck1.count()),
  Math.min(5, deck1.count())));\r

  \    pl.hand = deck1.cards();\r

  \  }\r

  \  g.stallsHidden = false;\r

  \  aristoUi(dTable, g);\r

  \  setTimeout(() => aristoGame3(g), 2000);\r

  }"
aristoGame3: "function aristoGame3(g) {\r

  \  let heraldOrder = g.heraldOrder;\r

  \  let players = g.allPlayers;\r

  \  let me = g.me;\r

  \  let stallOrder = g.stallOrder = calcStallOrder(players);\r

  \  players.map(x => x.nActions = x.stall.length);\r

  \  for (const plIndex of stallOrder) {\r

  \    let pl = players[1];\r

  \    console.log('player', pl.name, 'starts with', pl.nActions, 'actions,
  stall value is', pl.stallValue);\r

  \    if (plIndex == 0) break;\r

  \    while (pl.nActions > 0) {\r

  \      aristoBuild(pl, g);\r

  \      break;\r

  \    }\r

  \    console.log('player', pl.name, 'still has', pl.nActions, 'actions');\r

  \  }\r

  \  aristoUi(dTable, g);\r

  \  return;\r

  \  console.log('Game', g);\r

  }"
aristoUi: "function aristoUi(dParent, g) {\r

  \  clearTable();\r

  \  let d1 = mDiv(dParent, { w: '100%' }); mFlex(d1, 'v');\r

  \  let dWorld = mDiv(d1, { bg: 'random', hmin: 170, flex: 1 });\r

  \  mFlex(dWorld);\r

  \  iAdd(g.me, { div: cardZone(d1, g.me, 2) });\r

  \  let others = g.others;\r

  \  for (let i = 0; i < others.length; i++) {\r

  \    let pl = others[i];\r

  \    iAdd(pl, { div: cardZone(d1, pl) });\r

  \  }\r

  \  for (const o of [g.draw_pile, g.market, g.buy_cards, g.discard_pile]) {
  iAdd(o, { div: cardZone(dWorld, o) }); }\r

  \  for (const name of ['draw_pile', 'market', 'buy_cards', 'discard_pile'])
  { g[name + 'Items'] = showCards(g[name]); }\r

  \  for (const pl of g.allPlayers) {\r

  \    pl.handItems = showCards({ div: iDiv(pl), type: pl == g.me ? 'hand' :
  'handHidden', cards: pl.hand });\r

  \    if (isdef(pl.stall)) pl.stallItems = showCards({ div: iDiv(pl), type:
  g.stallsHidden ? 'cardsHidden' : 'cards', cards: pl.stall });\r

  \    if (isdef(pl.buildings)) {\r

  \      for (const building of pl.buildings) {\r

  \        let bItem = showCards({ div: iDiv(pl), type: 'hand', cards:
  building });\r

  \        lookupAddToList(pl, ['buildingItems'], bItem);\r

  \      }\r

  \    }\r

  \  }\r

  }"
aristoUserAction: "function aristoUserAction(g, key, followFunc) {\r

  \  if (key == 'stall') {\r

  \    let me = g.me;\r

  \    let indices = arrIndices(me.handItems, x => x.isSelected);\r

  \    [me.stall, me.hand] = arrSplitByIndices(me.hand, indices);\r

  \    followFunc(g);\r

  \  }\r

  }"
aRollby: "function aRollby(elem, dx = 100, ms = 3000) {\r

  \  anime({ targets: elem, translateX: dx, rotate: '1turn', duration: ms
  });\r

  }"
aRotate: "function aRotate(d, ms = 2000) { return d.animate({ transform:
  `rotate(360deg)` }, ms); }"
aRotateAccel: "function aRotateAccel(d, ms) { return d.animate({ transform:
  `rotate(1200deg)` }, { easing: 'cubic-bezier(.72, 0, 1, 1)', duration: ms });
  }"
arr_count: "function arr_count(arr, funcprop) {\r

  \  console.log('arr', arr);\r

  \  let di = {};\r

  \  if (isdef(funcprop) && isString(funcprop)) {\r

  \    for (const a of arr) { if (isdef(di[a[funcprop]])) di[a[funcprop]] +=
  1; else di[a[funcprop]] = 1; }\r

  \  } else if (isdef(funcprop)) {\r

  \    for (const a of arr) {\r

  \      let val = funcprop(a);\r

  \      if (isdef(di[val])) di[val] += 1; else di[val] = 1;\r

  \    }\r

  \  } else {\r

  \    for (const a of arr) { if (isdef(di[a])) di[a] += 1; else di[a] = 1;
  }\r

  \  }\r

  \  for (const a of arr) {\r

  \    a.rank = a.key[0];\r

  \    a.count = di[a.rank];\r

  \  }\r

  \  let sorted = sortByDescending(arr, 'count');\r

  \  return sorted;\r

  }"
arr_get_max: "function arr_get_max(arr, func) {\r

  \  if (isEmpty(arr)) return null;\r

  \  if (nundef(func)) func = x => x;\r

  \  let i = 0; let aug = arr.map(x => ({ el: jsCopy(x), val: func(x), i: i++
  }));\r

  \  sortByDescending(aug, 'val');\r

  \  let max = aug[0].val;\r

  \  let res = arrTakeWhile(aug, x => x.val == max); return res.map(x =>
  arr[x.i]);\r

  }"
arr_get_min: "function arr_get_min(arr, func) {\r

  \  if (isEmpty(arr)) return null;\r

  \  if (nundef(func)) func = x => x;\r

  \  let i = 0; let aug = arr.map(x => ({ el: jsCopy(x), val: func(x), i: i++
  }));\r

  \  sortBy(aug, 'val');\r

  \  let min = aug[0].val;\r

  \  let res = arrTakeWhile(aug, x => x.val == min); return res.map(x =>
  arr[x.i]);\r

  }"
arr_to_dict_by: function arr_to_dict_by(arr, prop) { let di = {}; for (const a
  of arr) { lookupAddToList(di, [a[prop]], a); } return di; }
arr2Set: "function arr2Set(arr2d, func) {\r

  \  for (let i = 0; i < arr2d.length; i++) {\r

  \    for (let j = 0; j < arr2d[i].length; j++) {\r

  \      let o = arr2d[i][j];\r

  \      if (typeof o == 'object') {\r

  \        func(o, i, j);\r

  \      }\r

  \    }\r

  \  }\r

  }"
arrAdd: "function arrAdd(arr1, arr2) {\r

  \  let i = 0; return arr1.map(x => x + arr2[i++]);\r

  }"
arrangeChildrenAsCircle: "function arrangeChildrenAsCircle(n, R) {\r

  }"
arrangeChildrenAsMatrix: "function arrangeChildrenAsMatrix(n, R, rows, cols) {\r

  \  let children = n.children.map(x => R.uiNodes[x]);\r

  \  let num = children.length;\r

  \  let size = 20;\r

  \  let padding = 4;\r

  \  let i = 0;\r

  \  for (const n1 of children) {\r

  \    let b = getBounds(n1.ui);\r

  \    let newMax = Math.max(Math.max(b.width, b.height), size);\r

  \    if (newMax > size) {\r

  \      size = newMax;\r

  \    }\r

  \  }\r

  \  let [y0, wTitle] = calcParentContentYOffsetAndWidth(n, padding);\r

  \  for (let r = 0; r < rows; r++) {\r

  \    for (let c = 0; c < cols; c++) {\r

  \      let n1 = children[i]; i += 1;\r

  \      n1.params.size = { w: size - 1, h: size - 1 };\r

  \      n1.params.pos = { x: padding + r * size, y: y0 + c * size };\r

  \      n1.params.sizing = 'fixed';\r

  \    }\r

  \  }\r

  }"
arrangeChildrenAsQuad: "function arrangeChildrenAsQuad(n, R) {\r

  \  let children = n.children.map(x => R.uiNodes[x]);\r

  \  let num = children.length;\r

  \  let rows = Math.ceil(Math.sqrt(num));\r

  \  let cols = Math.floor(Math.sqrt(num));\r

  \  let size = 20;\r

  \  let padding = 4;\r

  \  let i = 0;\r

  \  for (const n1 of children) {\r

  \    let b = getBounds(n1.ui);\r

  \    let newMax = Math.max(Math.max(b.width, b.height), size);\r

  \    if (newMax > size) {\r

  \      size = newMax;\r

  \    }\r

  \  }\r

  \  let [y0, wTitle] = calcParentContentYOffsetAndWidth(n, padding);\r

  \  for (let r = 0; r < rows; r++) {\r

  \    for (let c = 0; c < cols; c++) {\r

  \      let n1 = children[i]; i += 1;\r

  \      n1.params.size = { w: size - 1, h: size - 1 };\r

  \      n1.params.pos = { x: padding + r * size, y: y0 + c * size };\r

  \      n1.params.sizing = 'fixed';\r

  \    }\r

  \  }\r

  }"
arrangeOverride: "function arrangeOverride(n, R) {\r

  \  if (nundef(n.children)) return { w: 0, h: 0 }\r

  \  if (isdef(RLAYOUT[n.type])) {\r

  \    return RLAYOUT[n.type](n, R);\r

  \  }\r

  \  if (n.type == 'grid') {\r

  \    console.log('should have been done')\r

  \  } else if (n.type == 'hand') {\r

  \    console.log('should have been done')\r

  \    let szNeeded = handLayout(n, R);\r

  \    return szNeeded;\r

  \  } else if (n.info) {\r

  \    n.sizeNeeded = wrapLayoutSizeNeeded(n.children, R);\r

  \    let nBoard = R.uiNodes[n.uidParent];\r

  \    addResizeInfo(nBoard, n, n.sizeNeeded);\r

  \    return { w: n.sizeNeeded.w, h: n.sizeNeeded.h };\r

  \  } else if (n.uiType == 'd') {\r

  \    let szNeeded = panelLayout(n, R);\r

  \    return szNeeded;\r

  \  } else {\r

  \    console.log('!!!!!!!!!!case NOT catched in arrangeOverride_!!!!!!!!!!',
  n);\r

  \  }\r

  \  return res;\r

  }"
arrAverage: "function arrAverage(arr, prop) {\r

  \  let n = arr.length; if (!n) return 0;\r

  \  let sum = arrSum(arr, prop);\r

  \  return sum / n;\r

  }"
arrBuckets: "function arrBuckets(arr, func, sortbystr) {\r

  \  let di = {};\r

  \  for (const a of arr) {\r

  \    let val = func(a);\r

  \    if (nundef(di[val])) di[val] = { val: val, list: [] };\r

  \    di[val].list.push(a);\r

  \  }\r

  \  let res = []\r

  \  let keys = get_keys(di);\r

  \  if (isdef(sortbystr)) {\r

  \    keys.sort((a, b) => sortbystr.indexOf(a) - sortbystr.indexOf(b));\r

  \  }\r

  \  return keys.map(x => di[x]);\r

  }"
arrByClassName: "function arrByClassName(classname, d) {\r

  \  if (nundef(d)) d = document;\r

  \  return Array.from(d.getElementsByClassName(classname));\r

  }"
arrChildren: function arrChildren(elem) { return [...toElem(elem).children]; }
arrClear: function arrClear(arr) { arr.length = 0; }
arrCount: function arrCount(arr, func) { return arr.filter(func).length; }
arrCreate: "function arrCreate(n, func) {\r

  \  let res = [];\r

  \  for (let i = 0; i < n; i++) {\r

  \    res.push(func(i));\r

  \  }\r

  \  return res;\r

  }"
arrCycle: function arrCycle(arr, count) { return arrRotate(arr, count); }
arrCycleSwap: "function arrCycleSwap(arr, prop, clockwise = true) {\r

  \  let n = arr.length;\r

  \  let h = arr[0].prop;\r

  \  for (let i = 1; i < n; i++) { arr[i - 1][prop] = arr[i][prop]; }\r

  \  arr[n - 1][prop] = h;\r

  }"
arrExcept: "function arrExcept(arr, el) {\r

  \  let res = [];\r

  \  for (const a of arr) { if (a != el) res.push(a); }\r

  \  return res;\r

  }"
arrExtend: function arrExtend(arr, list) { list.map(x => arr.push(x)); return arr; }
arrFirst: "function arrFirst(arr) { return arr.length > 0 ? arr[0] : null; }"
arrFirstOfLast: "function arrFirstOfLast(arr) { if (arr.length > 0) { let l =
  arrLast(arr); return isList(l) ? arrFirst(l) : null; } else return null; }"
arrFlatten: "function arrFlatten(arr) {\r

  \  let res = [];\r

  \  for (let i = 0; i < arr.length; i++) {\r

  \    for (let j = 0; j < arr[i].length; j++) {\r

  \      res.push(arr[i][j]);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
arrFromIndex: function arrFromIndex(arr, i) { return arr.slice(i); }
arrFromTo: function arrFromTo(arr, iFrom, iTo) { return takeFromTo(arr, iFrom, iTo); }
arrFunc: function arrFunc(n, func) { let res = []; for (let i = 0; i < n; i++)
  res.push(func()); return res; }
arrIndices: "function arrIndices(arr, func) {\r

  \  let indices = [];\r

  \  for (let i = 0; i < arr.length; i++) { if (func(arr[i])) indices.push(i);
  }\r

  \  return indices;\r

  }"
arrlast: "function arrlast(arr) {\r

  \  return arr.length > 0 ? arr[arr.length - 1] : null;\r

  }"
arrLast: "function arrLast(arr) { return arr.length > 0 ? arr[arr.length - 1] : null; }"
arrLastOfLast: "function arrLastOfLast(arr) { if (arr.length > 0) { let l =
  arrLast(arr); return isList(l) ? arrLast(l) : null; } else return null; }"
arrMax: function arrMax(arr, f) { return arr_get_max(arr, f); }
arrMin: function arrMin(arr, f) { return arr_get_min(arr, f); }
arrMinMax: "function arrMinMax(arr, func) {\r

  \  if (nundef(func)) func = x => x;\r

  \  let min = func(arr[0]), max = func(arr[0]), imin = 0, imax = 0;\r

  \  for (let i = 1, len = arr.length; i < len; i++) {\r

  \    let v = func(arr[i]);\r

  \    if (v < min) {\r

  \      min = v; imin = i;\r

  \    } else if (v > max) {\r

  \      max = v; imax = i;\r

  \    }\r

  \  }\r

  \  return { min: min, imin: imin, max: max, imax: imax, elmin: arr[imin],
  elmax: arr[imax] };\r

  }"
arrMinus: function arrMinus(a, b) { if (isList(b)) return a.filter(x =>
  !b.includes(x)); else return a.filter(x => x != b); }
arrNext: "function arrNext(list, el) {\r

  \  let iturn = list.indexOf(el);\r

  \  let nextplayer = list[(iturn + 1) % list.length];\r

  \  return nextplayer;\r

  }"
arrNoDuplicates: "function arrNoDuplicates(arr) {\r

  \  let di = {};\r

  \  let arrNew = [];\r

  \  for (const el of arr) {\r

  \    if (!isLiteral(el)) continue;\r

  \    if (isdef(di[el])) continue;\r

  \    di[el] = true;\r

  \    arrNew.push(el);\r

  \  }\r

  \  return arrNew;\r

  }"
arrPairs: "function arrPairs(a) {\r

  \  let res = [];\r

  \  for (let i = 0; i < a.length; i++) {\r

  \    for (let j = i + 1; j < a.length; j++) {\r

  \      res.push([a[i], a[j]]);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
arrPlus: function arrPlus(a, b) { b.map(x => a.push(x)); return a; }
arrPrev: "function arrPrev(list, el) {\r

  \  let iturn = list.indexOf(el);\r

  \  if (iturn == 0) iturn = list.length;\r

  \  let nextplayer = list[(iturn - 1) % list.length];\r

  \  return nextplayer;\r

  }"
arrRange: function arrRange(from = 1, to = 10, step = 1) { let res = []; for
  (let i = from; i <= to; i += step)res.push(i); return res; }
arrRemove: "function arrRemove(arr, listweg) {\r

  \  arrReplace(arr, listweg, []);\r

  }"
arrRemoveDuplicates: "function arrRemoveDuplicates(items, prop) {\r

  \  let di = {};\r

  \  let res = [];\r

  \  for (const item of items) {\r

  \    if (isdef(di[item[prop].toLowerCase()])) { continue; }\r

  \    res.push(item);\r

  \    di[item[prop].toLowerCase()] = true;\r

  \  }\r

  \  return res;\r

  }"
arrRemoveLast: function arrRemoveLast(arr) { arr.length -= 1; }
arrRemovip: "function arrRemovip(arr, el) {\r

  \  let i = arr.indexOf(el);\r

  \  if (i > -1) arr.splice(i, 1);\r

  \  return i;\r

  }"
arrRepeat: function arrRepeat(n, el) { let res = []; for (let i = 0; i < n; i++)
  res.push(el); return res; }
arrReplace: "function arrReplace(arr, listweg, listdazu) {\r

  \  arrExtend(arr, listdazu);\r

  \  listweg.map(x => arrRemovip(arr, x));\r

  \  return arr;\r

  }"
arrReplace1: "function arrReplace1(arr, elweg, eldazu) {\r

  \  let i = arr.indexOf(elweg);\r

  \  arr[i] = eldazu;\r

  \  return arr;\r

  }"
arrReplaceAt: "function arrReplaceAt(arr, index, val, inPlace = true) { return
  inPlace ? arrReplaceAtInPlace(arr, index, val) : arrReplaceAtCopy(arr, index,
  val); }"
arrReplaceAtCopy: "function arrReplaceAtCopy(arr, index, val) {\r

  \  let res = new Array();\r

  \  for (let i = 0; i < arr.length; i++) {\r

  \    if (i == index) res[i] = val; else res[i] = arr[i];\r

  \  }\r

  \  return res;\r

  }"
arrReplaceAtInPlace: function arrReplaceAtInPlace(arr, index, val) { arr[index] = val; }
arrReverse: function arrReverse(arr) { return jsCopy(arr).reverse(); }
arrRotate: "function arrRotate(arr, count) {\r

  \  var unshift = Array.prototype.unshift,\r

  \    splice = Array.prototype.splice;\r

  \  var len = arr.length >>> 0, count = count >> 0;\r

  \  let arr1 = jsCopy(arr);\r

  \  unshift.apply(arr1, splice.call(arr1, count % len, len));\r

  \  return arr1;\r

  }"
arrShufflip: function arrShufflip(arr) { if (isEmpty(arr)) return []; else
  return fisherYates(arr); }
arrSplitAtIndex: "function arrSplitAtIndex(arr, i) {\r

  \  return [arr.slice(0, i), arr.slice(i)];\r

  }"
arrSplitByIndices: "function arrSplitByIndices(arr, indices) {\r

  \  let [a1, a2] = [[], jsCopy(arr)];\r

  \  for (let i = 0; i < indices.length; i++) {\r

  \    let el = arr[indices[i]];\r

  \    a1.push(el);\r

  \    removeInPlace(a2, el);\r

  \  }\r

  \  return [a1, a2];\r

  }"
arrString: "function arrString(arr, func) {\r

  \  if (isEmpty(arr)) return '[]';\r

  \  let s = '[';\r

  \  for (const el of arr) {\r

  \    if (isList(el)) s += arrString(el, func) + ','; else s += (isdef(func)
  ? func(el) : el) + ',';\r

  \  }\r

  \  s = s.substring(0, s.length - 1);\r

  \  s += ']';\r

  \  return s;\r

  }"
arrSum: "function arrSum(arr, props) {\r

  \  if (nundef(props)) return arr.reduce((a, b) => a + b);\r

  \  if (!isList(props)) props = [props];\r

  \  return arr.reduce((a, b) => a + (lookup(b, props) || 0), 0);\r

  }"
arrSwap: function arrSwap(arr, i, j) { let h = arr[i]; arr[i] = arr[j]; arr[j] = h; }
arrSwap2d: function arrSwap2d(arr, r1, c1, r2, c2) { let h = arr[r1][c1];
  arr[r1][c1] = arr[r2][c2]; arr[r2][c2] = h; }
arrTail: function arrTail(arr) { return arr.slice(1); }
arrTake: "function arrTake(arr, n = 0, from = 0) {\r

  \  if (isDict(arr)) {\r

  \    let keys = Object.keys(arr);\r

  \    return n > 0 ? keys.slice(from, from + n).map(x => (arr[x])) :
  keys.slice(from).map(x => (arr[x]));\r

  \  } else return n > 0 ? arr.slice(from, from + n) : arr.slice(from);\r

  }"
arrTakeFromEnd: "function arrTakeFromEnd(arr, n) {\r

  \  if (arr.length <= n) return arr.map(x => x); else return
  arr.slice(arr.length - n);\r

  }"
arrTakeFromTo: function arrTakeFromTo(arr, a, b) { return takeFromTo(arr, a, b); }
arrTakeLast: "function arrTakeLast(arr, n, from = 0) {\r

  \  let res = [];\r

  \  if (isDict(arr)) {\r

  \    let keys = Object.keys(arr);\r

  \    let ilast = keys.length - 1; for (let i = ilast - from; i >= 0 && i >
  ilast - from - n; i--) { res.unshift(arr[keys[i]]); }\r

  \  } else {\r

  \    let ilast = arr.length - 1; for (let i = ilast - from; i >= 0 && i >
  ilast - from - n; i--) { res.unshift(arr[i]); }\r

  \  }\r

  \  return res;\r

  }"
arrTakeWhile: "function arrTakeWhile(arr, func) {\r

  \  let res = [];\r

  \  for (const a of arr) {\r

  \    if (func(a)) res.push(a); else break;\r

  \  }\r

  \  return res;\r

  }"
arrToFen: "function arrToFen(board, plStart = 'w') {\r

  \  let result = \"\";\r

  \  for (let y = 0; y < board.length; y++) {\r

  \    let empty = 0;\r

  \    for (let x = 0; x < board[y].length; x++) {\r

  \      if (isNumber(board[y][x])) {\r

  \        empty += 1; continue;\r

  \      }\r

  \      let c = board[y][x][0];\r

  \      if (c == 'w' || c == 'b') {\r

  \        if (empty > 0) {\r

  \          result += empty.toString();\r

  \          empty = 0;\r

  \        }\r

  \        if (c == 'w') {\r

  \          result += board[y][x][1].toUpperCase();\r

  \        } else {\r

  \          result += board[y][x][1].toLowerCase();\r

  \        }\r

  \      } else {\r

  \        empty += 1;\r

  \      }\r

  \    }\r

  \    if (empty > 0) {\r

  \      result += empty.toString();\r

  \    }\r

  \    if (y < board.length - 1) {\r

  \      result += '/';\r

  \    }\r

  \  }\r

  \  result += ` ${plStart} KQkq - 0 1`;\r

  \  return result;\r

  }"
arrToggleMember: function arrToggleMember(arr, el) { if (arr.includes(el))
  removeInPlace(arr, el); else arr.push(el); }
arrToMatrix: "function arrToMatrix(arr, rows, cols) {\r

  \  let i = 0, res = [];\r

  \  for (let r = 0; r < rows; r++) {\r

  \    let rarr = [];\r

  \    for (let c = 0; c < cols; c++) {\r

  \      let a = arr[i]; i++;\r

  \      rarr.push(a);\r

  \    }\r

  \    res.push(rarr);\r

  \  }\r

  \  return res;\r

  }"
arrWithout: function arrWithout(arr, b) { return arrMinus(arr, b); }
arrZip: "function arrZip(arr1, arr2) {\r

  \  let res = [];\r

  \  for (let i = 0; i < Math.min(arr1, arr2); i++) {\r

  \    let o = {};\r

  \    addKeys(arr1[i], o);\r

  \    addKeys(arr2[i], o);\r

  \    res.push(o);\r

  \  }\r

  \  return res;\r

  }"
asElem: "function asElem(x) { return isString(x) ? mBy(x) : x; }"
asList: "function asList(x) { return isList(x) ? x : [x]; }"
assertion: "function assertion(cond) {\r

  \  if (!cond) {\r

  \    let args = [...arguments];\r

  \    for (const a of args) {\r

  \      console.log('\\n', a);\r

  \    }\r

  \    throw new Error('TERMINATING!!!')\r

  \  }\r

  }"
assets_get: "function assets_get() {\r

  \  where([...arguments]);\r

  \  to_server([...arguments], 'assets');\r

  }"
assets_parse: "function assets_parse(o) {\r

  \  where(o);\r

  \  for (const k in o) {\r

  \    let text = o[k];\r

  \    if (k == 'allSyms') {\r

  \      symbolDict = Syms = jsyaml.load(text);\r

  \      SymKeys = Object.keys(Syms);\r

  \    } else if (k == 'symGSG') {\r

  \      ByGroupSubgroup = jsyaml.load(text);\r

  \    } else if (k == 'allWP') {\r

  \      WordP = jsyaml.load(text);\r

  \    } else if (k == 'fens') {\r

  \      FenPositionList = csv2list(text);\r

  \    } else if (startsWith(k, 'db_')) {\r

  \      let okey = stringAfter(k, '_');\r

  \      DB[okey] = jsyaml.load(text);\r

  \    } else {\r

  \      window[capitalize(k)] = jsyaml.load(text);\r

  \    }\r

  \  }\r

  \  if (nundef(KeySets) && isdef(o.symGSG)) { KeySets = getKeySets(); }\r

  }"
aSvg: "function aSvg(dParent) {\r

  \  if (!dParent.style.position) dParent.style.position = 'relative';\r

  \  let svg1 = gSvg();\r

  \  svg1.setAttribute('width', '100%');\r

  \  svg1.setAttribute('height', '100%');\r

  \  let style = 'margin:0;padding:0;position:absolute;top:0px;left:0px;';\r

  \  svg1.setAttribute('style', style);\r

  \  dParent.appendChild(svg1);\r

  \  return svg1;\r

  }"
aSvgg: "function aSvgg(dParent, originInCenter = true) {\r

  \  if (!dParent.style.position) dParent.style.position = 'relative';\r

  \  let svg1 = gSvg();\r

  \  svg1.setAttribute('width', '100%');\r

  \  svg1.setAttribute('height', '100%');\r

  \  let style = 'margin:0;padding:0;position:absolute;top:0px;left:0px;';\r

  \  svg1.setAttribute('style', style);\r

  \  dParent.appendChild(svg1);\r

  \  let g1 = document.createElementNS('http:/' + '/www.w3.org/2000/svg',
  'g');\r

  \  svg1.appendChild(g1);\r

  \  if (originInCenter) { g1.style.transform = \"translate(50%, 50%)\"; }\r

  \  return g1;\r

  }"
atest01: "async function atest01() {\r

  \  let url = '/frontend/static/rsg/assets/gameIconCodes.yml';\r

  \  let response = await fetch(url);\r

  \  if (response.ok) {\r

  \    let t = await response.text();\r

  \    let iconDict = jsyaml.load(t);\r

  \    timit.showTime('nach atest01')\r

  \    console.log(iconDict);\r

  \  } else {\r

  \    alert(\"HTTP-Error: \" + response.status);\r

  \  }\r

  }"
atest02: "async function atest02() {\r\n}"
atestLoadIcons: "async function atestLoadIcons() {\r

  \  timit.showTime('_______start gameIconCode');\r

  \  let gaIcons = await route_rsg_asset('gameIconCodes');\r

  \  timit.showTime('_______start faIconCodes');\r

  \  let faIcons = await route_rsg_asset('faIconCodes');\r

  \  timit.showTime('_______start iconTest');\r

  \  let smallIcons = await route_rsg_asset('iconTest');\r

  \  timit.showTime('nach atestLoadIconst');\r

  \  faKeys = [];\r

  \  for (const k in gaIcons) {\r

  \    if (isdef(faIcons[k])) faKeys.push(k);\r

  \  }\r

  \  console.log('common keys:', faKeys);\r

  }"
atleastOneElementOfXIsDictWithKey: "function
  atleastOneElementOfXIsDictWithKey(lst, k) {\r

  \  for (const x of lst) { if (!x) continue; if (isDict(x) && k in x) return
  true; }\r

  \  return false;\r

  }"
atleastOneElementOfXIsDictWithKey_obj: "function
  atleastOneElementOfXIsDictWithKey_obj(lst) {\r

  \  for (const x of lst) { if (!x) continue; if (isDict(x) && '_obj' in x)
  return true; }\r

  \  return false;\r

  }"
aTranslateBy: "function aTranslateBy(d, x, y, ms) { return d.animate({
  transform: `translate(${x}px,${y}px)` }, ms); }"
aTranslateBy_v0: "function aTranslateBy_v0(d, x, y, ms) {\r

  \  let a = d.animate([\r

  \    { transform: `translate(${x}px,${y}px)` }\r

  \  ], {\r

  \    duration: ms,\r

  \  });\r

  \  return a;\r

  }"
aTranslateBy_v1: "function aTranslateBy_v1(d, x, y, ms) {\r

  \  let a = d.animate({ transform: `translate(${x}px,${y}px)` }, ms);\r

  \  return a;\r

  }"
aTranslateByEase: "function aTranslateByEase(d, x, y, ms, easing =
  'cubic-bezier(1,-0.03,.27,1)') {\r

  \  return d.animate({ transform: `translate(${x}px,${y}px)` }, { easing:
  easing, duration: ms });\r

  }"
aTranslateFadeBy: "function aTranslateFadeBy(d, x, y, ms) { return d.animate({
  opacity: .5, transform: `translate(${x}px,${y}px)` }, { easing: MyEasing,
  duration: ms }); }"
attachTo: function attachTo(div, deck) { deck.mount(div); }
audio_beep: "function audio_beep(vol, freq, duration) {\r

  \  console.log('sollte beepen!!!');\r

  \  if (nundef(_AUDIOCONTEXT)) _AUDIOCONTEXT = new AudioContext();\r

  \  let a = _AUDIOCONTEXT;\r

  \  v = a.createOscillator()\r

  \  u = a.createGain()\r

  \  v.connect(u)\r

  \  v.frequency.value = freq\r

  \  v.type = \"square\";\r

  \  u.connect(a.destination)\r

  \  u.gain.value = vol * 0.01\r

  \  v.start(a.currentTime)\r

  \  v.stop(a.currentTime + duration * 0.001);\r

  }"
audio_onclick_pp: "function audio_onclick_pp() {\r

  \  audio_toggle('mozart');\r

  \  if (audio_playing()) { hide0('bPlay'); show0('bPause'); } else {
  hide0('bPause'); show0('bPlay'); }\r

  }"
audio_pause: "function audio_pause() {\r

  \  _qSound = [];\r

  \  if (_loaded && isdef(_sndPlayer)) {\r

  \    clearTimeout(_TOSound);\r

  \    _sndPlayer.onended = null;\r

  \    _sndPlayer.onpause = _whenSoundPaused;\r

  \    _sndPlayer.pause();\r

  \  }\r

  }"
audio_play: "function audio_play(key, wait = true) {\r

  \  if (!wait) _qSound = [];\r

  \  _enqSound(key);\r

  \  if (_idleSound) { _idleSound = false; _deqSound(); }\r

  }"
audio_playing: function audio_playing() { return DA.isSound; }
audio_toggle: "function audio_toggle(key) {\r

  \  if (DA.isSound == true) { audio_pause(); DA.isSound = false; return; }\r

  \  audio_play(key);\r

  \  DA.isSound = true;\r

  }"
augment: "function augment(obj, newobj) {\r

  \  return extend(true, obj, newobj);\r

  }"
aushaengen: "function aushaengen(oid, R) {\r

  \  while (true) {\r

  \    let uid = firstCondDict(R.rNodes, x => x.oid == oid);\r

  \    if (!uid) return;\r

  \    let n = R.rNodes[uid];\r

  \    let len = Object.keys(R.rNodes).length;\r

  \    recRemove(n, R);\r

  \    let len2 = Object.keys(R.rNodes).length;\r

  \    if (len2 < len) {\r

  \    } else {\r

  \      console.log('DID NOT REMOVE ANYTHING!!!!', len, len2);\r

  \      return;\r

  \    }\r

  \  }\r

  }"
autocomplete: "function autocomplete(inp, arr) {\r

  \  var currentFocus;\r

  \  inp = toElem(inp);\r

  \  inp.addEventListener('input', e => {\r

  \    var a, b, i, val = this.value;\r

  \    autocomplete_closeAllLists();\r

  \    if (!val) { return false; }\r

  \    currentFocus = -1;\r

  \    a = document.createElement('DIV');\r

  \    a.setAttribute('id', this.id + 'autocomplete-list');\r

  \    a.setAttribute('class', 'autocomplete-items');\r

  \    this.parentNode.appendChild(a);\r

  \    for (i = 0; i < arr.length; i++) {\r

  \      if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase())
  {\r

  \        b = document.createElement('DIV');\r

  \        b.innerHTML = '<strong>' + arr[i].substr(0, val.length) +
  '</strong>';\r

  \        b.innerHTML += arr[i].substr(val.length);\r

  \        b.innerHTML += \"<input type='hidden' value='\" + arr[i] +
  \"'>\";\r

  \        b.addEventListener('click', e => {\r

  \          inp.value = this.getElementsByTagName('input')[0].value;\r

  \          autocomplete_closeAllLists();\r

  \        });\r

  \        a.appendChild(b);\r

  \      }\r

  \    }\r

  \  });\r

  \  inp.addEventListener('keydown', e => {\r

  \    var x = document.getElementById(this.id + 'autocomplete-list');\r

  \    if (x) x = x.getElementsByTagName('div');\r

  \    if (e.keyCode == 40) {\r

  \      currentFocus++;\r

  \      autocomplete_addActive(x);\r

  \    } else if (e.keyCode == 38) {\r

  \      currentFocus--;\r

  \      autocomplete_addActive(x);\r

  \    } else if (e.keyCode == 13) {\r

  \      e.preventDefault();\r

  \      if (currentFocus > -1) {\r

  \        if (x) x[currentFocus].click();\r

  \      }\r

  \    }\r

  \  });\r

  \  inp.addEventListener('dblclick', e => { evNoBubble(e); });\r

  \  document.addEventListener('click', e => {\r

  \    autocomplete_closeAllLists(e.target);\r

  \  });\r

  }"
autocomplete_addActive: "function autocomplete_addActive(x) {\r

  \  if (!x) return false;\r

  \  autocomplete_removeActive(x);\r

  \  if (currentFocus >= x.length) currentFocus = 0;\r

  \  if (currentFocus < 0) currentFocus = x.length - 1;\r

  \  x[currentFocus].classList.add('autocomplete-active');\r

  }"
autocomplete_closeAllLists: "function autocomplete_closeAllLists(elmnt) {\r

  \  var x = document.getElementsByClassName('autocomplete-items');\r

  \  for (var i = 0; i < x.length; i++) {\r

  \    if (elmnt != x[i] && elmnt != inp) {\r

  \      x[i].parentNode.removeChild(x[i]);\r

  \    }\r

  \  }\r

  }"
autocomplete_removeActive: "function autocomplete_removeActive(x) {\r

  \  for (var i = 0; i < x.length; i++) {\r

  \    x[i].classList.remove('autocomplete-active');\r

  \  }\r

  }"
autoGameScreen: "function autoGameScreen() {\r\n}"
autopoll: function autopoll(ms) { TO.poll = setTimeout(_poll, valf(ms,
  valf(Z.options.poll, 2000))); }
autoselect_action: function autoselect_action(r, action, uname, item) {
  select_action(r, action, uname, item); }
autosend: "function autosend(plname, slot) {\r

  \  Z.uplayer = plname;\r

  \  take_turn_collect_open();\r

  }"
autoTestSpeech: "function autoTestSpeech() {\r

  \  ensureSymBySet();\r

  \  nextIndex += 1;\r

  \  let k = SymKeysBySet['nosymbols'][nextIndex];\r

  \  let info = SymbolDict[k];\r

  \  let best = stringAfterLast(info.E, '|');\r

  \  console.log('best', best, '(key', k, ')');\r

  \  record('E', best)\r

  \  say(best, .7, 1, .7, false, 'random', () => { console.log('done:', k)
  });\r

  }"
availableGames: function availableGames(callback) { let route =
  '/game/available'; _sendRouteJS(route, callback); }
availablePlayers: function availablePlayers(callback) { let route =
  '/game/players'; _sendRouteJS(route, callback); }
backtrack_based: "function backtrack_based(orig_board) {\r

  \  let board = JSON.parse(JSON.stringify(orig_board));\r

  \  for (let r = 0; r < 9; r++) {\r

  \    for (let c = 0; c < 9; c++) {\r

  \      if (board[r][c] == 0) {\r

  \        complete_cell(board, r, c)\r

  \        if (is_solved(board)) return board;\r

  \        let cell = board[r][c]\r

  \        if (Array.isArray(cell)) {\r

  \          for (let i = 0; i < cell.length; i++) {\r

  \            let board_2 = JSON.parse(JSON.stringify(board));\r

  \            board_2[r][c] = cell[i]\r

  \            if (completed_board = backtrack_based(board_2)) {\r

  \              return completed_board;\r

  \            }\r

  \          }\r

  \          return false\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  return false;\r

  }"
badges_off: "function badges_off() {\r

  \  hide('dLeftSide');\r

  \  delete Session.is_badges;\r

  \  Badges = [];\r

  }"
badges_on: "function badges_on() {\r

  \  if (!isdef(mBy('dLeiste'))) initSidebar();\r

  \  Session.is_badges = true;\r

  \  Badges = [];\r

  }"
bCapturedPieces: "function bCapturedPieces(plSym, arr, idx, rows, cols,
  includeDiagonals = true) {\r

  \  let res = [];\r

  \  let nei = bNei(arr, idx, rows, cols, includeDiagonals);\r

  \  for (let dir = 0; dir < 8; dir++) {\r

  \    let i = nei[dir];\r

  \    if (nundef(i)) continue;\r

  \    let el = arr[i];\r

  \    if (empty_func(el) || el == plSym) continue;\r

  \    let inew = [];\r

  \    let MAX = 100, cmax = 0;\r

  \    while (isOppPiece(el, plSym)) {\r

  \      if (cmax > MAX) break; cmax += 1;\r

  \      inew.push(i);\r

  \      i = bNeiDir(arr, i, dir, rows, cols);\r

  \      if (nundef(i)) break;\r

  \      el = arr[i];\r

  \    }\r

  \    if (el == plSym) {\r

  \      res = res.concat(inew);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
bCheck: "function bCheck(r, c, rows, cols) { return r >= 0 && r < rows && c >= 0
  && c < cols ? r * cols + c : null; }"
bCreateEmpty: function bCreateEmpty(rows, cols) { return new Array(rows * cols).fill(null); }
beautify_history: "function beautify_history(lines, title, fen, uplayer) {\r

  \  let html = `<div class=\"history\"><span
  style=\"color:red;font-weight:bold;\">${title}: </span>`;\r

  \  for (const l of lines) {\r

  \    let words = toWords(l);\r

  \    for (const w1 of words) {\r

  \      if (is_card_key(w1)) {\r

  \        html += mCardText(w1);\r

  \        continue;\r

  \      }\r

  \      w = w1.toLowerCase();\r

  \      if (isdef(fen.players[w])) {\r

  \        html += `<span
  style=\"color:${get_user_color(w)};font-weight:bold\"> ${w} </span>`;\r

  \      } else html += ` ${w} `;\r

  \    }\r

  \  }\r

  \  html += \"</div>\";\r

  \  return html;\r

  }"
beep: "function beep(vol, freq, duration) {\r

  \  console.log('sollte beepen!!!');\r

  \  if (nundef(_AUDIOCONTEXT)) _AUDIOCONTEXT = new AudioContext();\r

  \  let a = _AUDIOCONTEXT;\r

  \  v = a.createOscillator()\r

  \  u = a.createGain()\r

  \  v.connect(u)\r

  \  v.frequency.value = freq\r

  \  v.type = \"square\";\r

  \  u.connect(a.destination)\r

  \  u.gain.value = vol * 0.01\r

  \  v.start(a.currentTime)\r

  \  v.stop(a.currentTime + duration * 0.001);\r

  }"
beforeActivationUI: function beforeActivationUI() { uiPaused |=
  beforeActivationMask; uiPaused &= ~hasClickedMask; }
being_blackmailed: "function being_blackmailed() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  let cmd = item.key;\r

  \  console.log('selected reaction to blackmail:', item.key);\r

  \  if (cmd == 'accept') { Z.stage = 34; ari_pre_action(); }\r

  \  else if (cmd == 'reject') { post_reject_blackmail(); }\r

  \  else { post_defend_blackmail(); }\r

  }"
bestContrastingColor: "function bestContrastingColor(color, colorlist) {\r

  \  let contrast = 0;\r

  \  let result = null;\r

  \  let rgb = colorRGB(color, true);\r

  \  rgb = [rgb.r, rgb.g, rgb.b];\r

  \  for (c1 of colorlist) {\r

  \    let x = colorRGB(c1, true)\r

  \    x = [x.r, x.g, x.b];\r

  \    let c = getContrast(rgb, x);\r

  \    if (c > contrast) { contrast = c; result = c1; }\r

  \  }\r

  \  return result;\r

  }"
bFreeRayDir: "function bFreeRayDir(arr, idx, dir, rows, cols) {\r

  \  let indices = [];\r

  \  let i = idx;\r

  \  while (i < arr.length) {\r

  \    i = bNeiDir(arr, i, dir, rows, cols);\r

  \    if (!i || !empty_func(arr[i])) break; else indices.push(i);\r

  \  }\r

  \  return indices;\r

  }"
bFreeRayDir1: "function bFreeRayDir1(arr, idx, dir, rows, cols) {\r

  \  let indices = [];\r

  \  let i = idx;\r

  \  while (i < arr.length) {\r

  \    i = bNeiDir(arr, i, dir, rows, cols);\r

  \    if (!i) break;\r

  \    else indices.push(i);\r

  \    if (!empty_func(arr[i])) break;\r

  \  }\r

  \  return indices;\r

  }"
bFullCol: "function bFullCol(arr, icol, rows, cols) {\r

  \  let iStart = icol;\r

  \  let x = arr[iStart]; if (empty_func(x)) return null;\r

  \  for (let i = iStart + cols; i < iStart + (cols * rows); i += cols) if
  (arr[i] != x) return null;\r

  \  return x;\r

  }"
bFullDiag: "function bFullDiag(arr, rows, cols) {\r

  \  let iStart = 0;\r

  \  let x = arr[iStart]; if (empty_func(x)) return null;\r

  \  for (let i = iStart + cols + 1; i < arr.length; i += cols + 1) { if
  (arr[i] != x) return null; }\r

  \  return x;\r

  }"
bFullDiag2: "function bFullDiag2(arr, rows, cols) {\r

  \  let iStart = cols - 1;\r

  \  let x = arr[iStart]; if (empty_func(x)) return null;\r

  \  for (let i = iStart + cols - 1; i < arr.length - 1; i += cols - 1) { if
  (arr[i] != x) return null; }\r

  \  return x;\r

  }"
bFullRow: "function bFullRow(arr, irow, rows, cols) {\r

  \  let iStart = irow * cols;\r

  \  let x = arr[iStart]; if (empty_func(x)) return null;\r

  \  for (let i = iStart + 1; i < iStart + cols; i++) if (arr[i] != x) return
  null;\r

  \  return x;\r

  }"
bGetChunks: "function bGetChunks(arr2d, rowsEach, colsEach) {\r

  \  let res = [];\r

  \  let [rTotal, cTotal] = [arr2d.length, arr2d[0].length];\r

  \  for (let r = 0; r < rTotal; r += rowsEach) {\r

  \    let m1 = [];\r

  \    for (let c = 0; c < cTotal; c += colsEach) {\r

  \      m1 = bGetSubMatrix(arr2d, r, rowsEach, c, colsEach);\r

  \      res.push(arrFlatten(m1));\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
bGetChunksWithIndices: "function bGetChunksWithIndices(arr2d, rowsEach,
  colsEach) {\r

  \  let res = [];\r

  \  let [rTotal, cTotal] = [arr2d.length, arr2d[0].length];\r

  \  for (let r = 0; r < rTotal; r += rowsEach) {\r

  \    let m1 = [];\r

  \    for (let c = 0; c < cTotal; c += colsEach) {\r

  \      m1 = bGetSubMatrixWithIndices(arr2d, r, rowsEach, c, colsEach);\r

  \      res.push(arrFlatten(m1));\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
bGetCol: "function bGetCol(arr, icol, rows, cols) {\r

  \  let iStart = icol;\r

  \  let res = [];\r

  \  for (let i = iStart; i < iStart + (cols * rows); i += cols)
  res.push(arr[i]);\r

  \  return res;\r

  }"
bGetCols: "function bGetCols(arr2d) {\r

  \  let rows = arr2d.length;\r

  \  let cols = arr2d[0].length;\r

  \  let res = [];\r

  \  for (let c = 0; c < cols; c++) { res.push([]); }\r

  \  for (let r = 0; r < rows; r++) {\r

  \    for (let c = 0; c < cols; c++) {\r

  \      res[c].push(arr2d[r][c]);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
bGetInitialState: "function bGetInitialState() {\r\n}"
bGetRow: "function bGetRow(arr, irow, rows, cols) {\r

  \  let iStart = irow * cols;\r

  \  let arrNew = arr.slice(iStart, iStart + cols);\r

  \  let res = [];\r

  \  for (let i = iStart; i < iStart + cols; i++) res.push(arr[i]);\r

  \  console.assert(sameList(arrNew, res), 'NOOOOOO');\r

  \  return res;\r

  }"
bGetRows: "function bGetRows(arr2d) {\r

  \  return arr2d;\r

  }"
bGetSubMatrix: "function bGetSubMatrix(arr2d, rFrom, rows, cFrom, cols) {\r

  \  let res = []; for (let i = 0; i < rows; i++) res.push([]);\r

  \  let [rTotal, cTotal] = [arr2d.length, arr2d[0].length];\r

  \  let rIndex = 0;\r

  \  for (let r = rFrom; r < rFrom + rows; r++) {\r

  \    for (let c = cFrom; c < cFrom + cols; c++) {\r

  \      res[rIndex].push(arr2d[r][c]);\r

  \    }\r

  \    rIndex += 1;\r

  \  }\r

  \  return res;\r

  }"
bGetSubMatrixWithIndices: "function bGetSubMatrixWithIndices(arr2d, rFrom, rows,
  cFrom, cols) {\r

  \  let res = []; for (let i = 0; i < rows; i++) res.push([]);\r

  \  let [rTotal, cTotal] = [arr2d.length, arr2d[0].length];\r

  \  let rIndex = 0;\r

  \  for (let r = rFrom; r < rFrom + rows; r++) {\r

  \    for (let c = cFrom; c < cFrom + cols; c++) {\r

  \      res[rIndex].push({ row: r, col: c, val: arr2d[r][c] });\r

  \    }\r

  \    rIndex += 1;\r

  \  }\r

  \  return res;\r

  }"
bgFromPal: "function bgFromPal(ipal_dep, pal) {\r

  \  return getpal(ipal_dep, 0, 'b', pal);\r

  }"
bgNum: "function bgNum(k, v) {\r\n}"
bid_to_string: function bid_to_string(bid) { return bid.join(' '); }
binding01: "function binding01(R) {\r

  \  serverData.table.o1.name = 'felix';\r

  \  let upd = { oid: 'o1', prop: 'name', ukind: 'valueChange', oldval: 'max',
  newval: 'felix' };\r

  \  let sUpdated = { o1: [upd] };\r

  \  updateBindings(sUpdated, R);\r

  }"
binding02: "function binding02(R) {\r

  \  let o = serverData.table.o3 = { name: 'ama' };\r

  \  let upd = { oid: 'o3', o: o, ukind: 'new' };\r

  \  let sCreated = { o3: [upd] };\r

  \  updateCreatedBindings(sCreated, R);\r

  }"
blackOrWhite: "function blackOrWhite(cssHSLA, maxLumForWhite = 88) {\r

  \  let l = getLuminosity(cssHSLA);\r

  \  let hue = getHue(cssHSLA);\r

  \  if (hue > 40 && hue < 90) maxLumForWhite = 60;\r

  \  let result = l <= maxLumForWhite ? 'white' : 'black';\r

  \  testHelpers('lum(' + l + '), hue(' + hue + ') : ' + result);\r

  \  return result;\r

  }"
blank: function blank(card) { clearElement(card.elem); }
blankExpResult: function blankExpResult() { }
blankInputs: "function blankInputs(d, ilist, blink = true) {\r

  \  let inputs = [];\r

  \  for (const idx of ilist) {\r

  \    let inp = d.children[idx];\r

  \    inp.innerHTML = '_';\r

  \    if (blink) mClass(inp, 'blink');\r

  \    inputs.push({ letter: Goal.word[idx].toUpperCase(), div: inp, index:
  idx });\r

  \  }\r

  \  return inputs;\r

  }"
blankOperand2: function blankOperand2() { }
blankOperator: function blankOperator() { }
blankWordInputs: "function blankWordInputs(wi, n, pos = 'random') {\r

  \  let indivInputs = [];\r

  \  let remels =\r

  \    pos == 'random' ? choose(wi, n)\r

  \      : pos == 'notStart' ? arrTake(wi.slice(1, wi.length - 1), n)\r

  \        : pos == 'start' ? arrTake(wi, n)\r

  \          : takeFromTo(wi, wi.length - n, wi.length);\r

  \  for (const el of remels) {\r

  \    for (const inp of el.charInputs) { unfillCharInput(inp); }\r

  \    indivInputs = indivInputs.concat(el.charInputs);\r

  \    el.hasBlanks = true;\r

  \    el.nMissing = el.charInputs.length;\r

  \    if (n > 1) iDiv(el).onclick = onClickWordInput;\r

  \  }\r

  \  return { iFocus: null, words: remels, letters: indivInputs };\r

  }"
bluff: "function bluff() {\r

  \  const rankstr = '3456789TJQKA2';\r

  \  function setup(players, options) {\r

  \    let fen = { players: {}, plorder: jsCopy(players), history: {}, stage:
  'move', phase: '' };\r

  \    let num_cards_needed = players.length * options.max_handsize;\r

  \    let num_decks_needed = fen.num_decks = Math.ceil(num_cards_needed /
  52);\r

  \    let deck = fen.deck = create_fen_deck('n', num_decks_needed);\r

  \    shuffle(deck);\r

  \    shuffle(fen.plorder);\r

  \    fen.turn = [fen.plorder[0]];\r

  \    for (const plname of fen.plorder) {\r

  \      let handsize = options.min_handsize;\r

  \      fen.players[plname] = {\r

  \        hand: deck_deal(deck, handsize),\r

  \        handsize: handsize,\r

  \        name: plname,\r

  \        color: get_user_color(plname),\r

  \      };\r

  \    }\r

  \    fen.stage = 0;\r

  \    return fen;\r

  \  }\r

  \  function clear_ack() { if (Z.stage == 1) { bluff_change_to_turn_round();
  take_turn_fen(); } }\r

  \  function check_gameover(Z) { let pls = get_keys(Z.fen.players); if
  (pls.length < 2) Z.fen.winners = pls; return valf(Z.fen.winners, false); }\r

  \  function activate_ui() { bluff_activate_new(); }\r

  \  function present(dParent) { bluff_present(dParent); }\r

  \  function stats(dParent) { bluff_stats(dParent); }\r

  \  function state_info(dParent) { bluff_state(dParent); }\r

  \  return { rankstr, setup, activate_ui, check_gameover, clear_ack, present,
  state_info, stats };\r

  }"
bluff_ack_uplayer: "function bluff_ack_uplayer() {\r

  \  let [A, fen, stage, uplayer] = [Z.A, Z.fen, Z.stage, Z.uplayer];\r

  \  fen.players[uplayer].ack = true;\r

  \  ack_player(uplayer);\r

  }"
bluff_activate: "function bluff_activate(fen, plname) {\r

  \  console.log('activating for', plname)\r

  }"
bluff_activate_new: "function bluff_activate_new() {\r

  \  let [z, A, fen, stage, uplayer, ui, dt] = [Z, Z.A, Z.fen, Z.stage,
  Z.uplayer, UI, UI.dOpenTable];\r

  \  if (stage == 1) bluff_activate_stage1(); else { bluff_activate_stage0();
  if (is_ai_player()) ai_move(1000); }\r

  }"
bluff_activate_stage0: "function bluff_activate_stage0() {\r

  \  let [z, A, fen, stage, uplayer, ui, dt] = [Z, Z.A, Z.fen, Z.stage,
  Z.uplayer, UI, UI.dOpenTable];\r

  \  if (isdef(fen.lastbid)) show(ui.currentBidItem.button);\r

  \  bluff_show_new_bid(dt);\r

  \  mLinebreak(dt, 10);\r

  \  bluff_button_panel1(dt, fen.newbid, 50);\r

  }"
bluff_activate_stage1: "function bluff_activate_stage1() {\r

  \  let [z, A, fen, stage, uplayer, ui, dt] = [Z, Z.A, Z.fen, Z.stage,
  Z.uplayer, UI, UI.dOpenTable];\r

  \  if (isdef(DA.ack) && isdef(DA.ack[uplayer])) { console.log('DA.ack',
  DA.ack); mText('...waiting for ack', dt); return; }\r

  \  if (isdef(ui.dHandsize)) mPulse(ui.dHandsize, 2000);\r

  }"
bluff_ai: "function bluff_ai() {\r

  \  let [A, fen, uplayer, pl] = [Z.A, Z.fen, Z.uplayer, Z.pl];\r

  \  const torank = { _: '_', three: '3', four: '4', five: '5', six: '6',
  seven: '7', eight: '8', nine: '9', ten: 'T', jack: 'J', queen: 'Q', king: 'K',
  ace: 'A' };\r

  \  const toword = { _: '_', '3': 'three', '4': 'four', '5': 'five', '6':
  'six', '7': 'seven', '8': 'eight', '9': 'nine', T: 'ten', J: 'jack', Q:
  'queen', K: 'king', A: 'ace' };\r

  \  let words = get_keys(torank).slice(1);\r

  \  let all_hand_cards = aggregate_elements(dict2list(fen.players, 'name'),
  'hand');\r

  \  let no_twos = all_hand_cards.filter(x => x[0] != '2');\r

  \  let rankstr = '3456789TJQKA2';\r

  \  sortByRank(all_hand_cards, rankstr);\r

  \  let byrank = aggregate_player_hands_by_rank(fen);\r

  \  let rank_list = dict2list(byrank, 'rank');\r

  \  let unique_ranks = sortByRank(get_keys(byrank));\r

  \  let myranks = sortByRank(pl.hand.map(x => x[0]));\r

  \  let my_unique = unique_ranks.filter(x => myranks.includes(x));\r

  \  rank_list.map(x => { x.mine = myranks.includes(x.rank); x.irank =
  rankstr.indexOf(x.rank); x.i = x.irank + 100 * x.value; });\r

  \  rank_list = rank_list.filter(x => x.rank != '2');\r

  \  sortByDescending(rank_list, 'i');\r

  \  let maxcount = rank_list[0].value;\r

  \  let mymaxcount = rank_list.filter(x => x.mine)[0].value;\r

  \  let expected = all_hand_cards.length / 13;\r

  \  let nreason = Math.max(1, Math.round(expected * 2));\r

  \  let n_twos = all_hand_cards.filter(x => x[0] == '2').length;\r

  \  let have2 = firstCond(rank_list, x => x.rank == '2' && x.mine);\r

  \  return botbest(rank_list, maxcount, mymaxcount, expected, nreason,
  n_twos, have2, words, fen);\r

  }"
bluff_button_panel1: "function bluff_button_panel1(dt, bid, sz) {\r

  \  let n = bid[0] == '_' ? 1 : Number(bid[0]);\r

  \  let arr1 = arrRange(n, n + 5);\r

  \  let arr2 = toLetters('3456789TJQKA');\r

  \  let arr3 = arrRange(0, 5);\r

  \  let arr4 = toLetters('3456789TJQKA');\r

  \  let dPanel = mDiv(dt, { gap: 5 });\r

  \  [d1, d2, d3, d4] = mColFlex(dPanel, [1, 2, 1, 2]);\r

  \  UI.dn1 = create_bluff_input1(d1, arr1, 1, sz, 0); d1.onmouseenter = () =>
  iHigh(UI.panelItems[0]); d1.onmouseleave = () => iUnhigh(UI.panelItems[0]);\r

  \  UI.dr1 = create_bluff_input1(d2, arr2, 2, sz, 1); d2.onmouseenter = () =>
  iHigh(UI.panelItems[1]); d2.onmouseleave = () => iUnhigh(UI.panelItems[1]);\r

  \  UI.dn2 = create_bluff_input1(d3, arr3, 1, sz, 2); d3.onmouseenter = () =>
  iHigh(UI.panelItems[2]); d3.onmouseleave = () => iUnhigh(UI.panelItems[2]);\r

  \  UI.dr2 = create_bluff_input1(d4, arr4, 2, sz, 3); d4.onmouseenter = () =>
  iHigh(UI.panelItems[3]); d4.onmouseleave = () => iUnhigh(UI.panelItems[3]);\r

  }"
bluff_change_to_ack_round: "function bluff_change_to_ack_round(fen, nextplayer)
  {\r

  \  [Z.stage, Z.turn] = [1, [get_admin_player(fen.plorder)]];\r

  \  fen.keeppolling = true;\r

  \  fen.nextturn = [nextplayer];\r

  }"
bluff_change_to_turn_round: "function bluff_change_to_turn_round() {\r

  \  let [fen, stage] = [Z.fen, Z.stage];\r

  \  assertion(stage == 1, \"ALREADY IN TURN ROUND!!!!!!!!!!!!!!!!!!!!!!\");\r

  \  Z.stage = 0;\r

  \  Z.turn = fen.nextturn;\r

  \  Z.round += 1;\r

  \  for (const k of ['bidder', 'loser', 'aufheber', 'lastbid', 'lastbidder'])
  delete fen[k];\r

  \  for (const k of ['nextturn', 'keeppolling']) delete fen[k];\r

  \  for (const plname of fen.plorder) { delete fen.players[plname].lastbid;
  }\r

  }"
bluff_clear_panel: "function bluff_clear_panel() {\r

  \  for (const item of UI.panelItems) {\r

  \    let d = iDiv(item);\r

  \    d.innerHTML = '_';\r

  \  }\r

  \  Z.fen.newbid = ['_', '_', '_', '_'];\r

  }"
bluff_convert2ranks: "function bluff_convert2ranks(b) { return [b[0],
  BLUFF.torank[b[1]], b[2] == '_' ? 0 : b[2], BLUFF.torank[b[3]]]; }"
bluff_convert2words: "function bluff_convert2words(b) { return [b[0],
  BLUFF.toword[b[1]], b[2] < 1 ? '_' : b[2], BLUFF.toword[b[3]]]; }"
bluff_generate_random_bid: "function bluff_generate_random_bid() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  const di2 = { _: '_', three: 3, four: 4, five: 5, six: 6, seven: 7,
  eight: 8, nine: 9, ten: 'T', jack: 'J', queen: 'Q', king: 'K', ace: 'A' };\r

  \  let words = get_keys(di2).slice(1);\r

  \  let b = isdef(fen.lastbid) ? jsCopy(fen.lastbid) : null;\r

  \  if (isdef(b)) {\r

  \    assertion(b[0] >= (b[2] == '_' ? 0 : b[2]), 'bluff_generate_random_bid:
  bid not formatted correctly!!!!!!!', b)\r

  \    let nmax = calc_reasonable_max(fen);\r

  \    let n = b[0] == '_' ? 1 : Number(b[0]);\r

  \    let done = false;\r

  \    if (n > nmax + 1) {\r

  \      const di = { '3': 'three', '4': 'four', '5': 'five', '6': 'six', '7':
  'seven', '8': 'eight', '9': 'nine', T: 'ten', J: 'jack', Q: 'queen', K:
  'king', A: 'ace' };\r

  \      let rankstr = '3456789TJQKA';\r

  \      let w1 = di2[b[1]];\r

  \      let idx = isdef(w1) ? rankstr.indexOf(w1) : -1;\r

  \      if (idx >= 0 && idx < rankstr.length - 2) {\r

  \        let r = rankstr[idx + 1];\r

  \        b[1] = di[r];\r

  \        done = true;\r

  \      }\r

  \    }\r

  \    if (!done) {\r

  \      if (b[3] == '_') { b[2] = 1; b[3] = rChoose(words, 1, x => x !=
  b[1]); }\r

  \      else if (b[0] > b[2]) { b[2] += 1; }\r

  \      else { b[0] += coin(80) ? 1 : 2; if (coin()) b[2] = b[3] = '_'; }\r

  \    }\r

  \  } else {\r

  \    let nmax = calc_reasonable_max(fen);\r

  \    let nmin = Math.max(nmax - 1, 1);\r

  \    let arr_nmax = arrRange(1, nmax);\r

  \    let arr_nmin = arrRange(1, nmin);\r

  \    b = [rChoose(arr_nmax), rChoose(words), rChoose(arr_nmin),
  rChoose(words)];\r

  \    if (b[1] == b[3]) b[3] = rChoose(words, 1, x => x != b[1]);\r

  \    if (coin()) b[2] = b[3] = '_';\r

  \  }\r

  \  fen.newbid = b;\r

  \  UI.dAnzeige.innerHTML = bid_to_string(b);\r

  }"
bluff_present: "function bluff_present(fen, dParent, plname) {\r

  \  console.log('fen', fen);\r

  }"
bluff_present_new: "function bluff_present_new(dParent) {\r

  \  let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent, 1,
  0);\r

  \  let [fen, uplayer, ui, stage, dt] = [Z.fen, Z.uplayer, UI, Z.stage,
  dOpenTable];\r

  \  clearElement(dt); mCenterFlex(dt);\r

  \  if (stage == 1) { DA.no_shield = true; } else { DA.ack = {}; DA.no_shield
  = false; }\r

  \  bluff_stats_new(dt);\r

  \  mLinebreak(dt, 10);\r

  \  bluff_show_cards(dt);\r

  \  mLinebreak(dt, 4);\r

  \  let item = ui.currentBidItem = bluff_show_current_bid(dt);\r

  \  hide(item.button);\r

  \  mLinebreak(dt, 10);\r

  \  if (stage == 1) {\r

  \    let loser = fen.loser;\r

  \    let msg1 = fen.war_drin ? 'war drin!' : 'war NICHT drin!!!';\r

  \    let msg2 = isdef(fen.players[loser]) ? `${capitalize(loser)} will get
  ${fen.players[loser].handsize} cards!` : `${capitalize(loser)} is out!`;\r

  \    mText(`<span style=\"color:red\">${msg1} ${msg2}</span>`, dt, { fz: 22
  });\r

  \    mLinebreak(dt, 4);\r

  \  }\r

  }"
bluff_reset_to_current_bid: function bluff_reset_to_current_bid() { onclick_reload(); }
bluff_setup: "function bluff_setup(players) {\r

  \  let fen = {};\r

  \  let deck = fen.deck = get_keys(Aristocards).filter(x =>
  'r'.includes(x[2]));\r

  \  shuffle(deck);\r

  \  let pls = fen.players = {};\r

  \  for (const uname of players) {\r

  \    let pl = pls[uname] = {};\r

  \    pl.hand = deck_deal(deck, 2);\r

  \  }\r

  \  fen.plorder = rPlayerOrder(players);\r

  \  fen.turn = [fen.plorder[0]];\r

  \  fen.iturn = 0;\r

  \  fen.round = [];\r

  \  fen.phase = 'create';\r

  \  fen.instruction = 'bid!';\r

  \  return fen;\r

  }"
bluff_show_cards: "function bluff_show_cards(dt) {\r

  \  let [fen, ui, stage, uplayer] = [Z.fen, UI, Z.stage, Z.uplayer];\r

  \  let pl = fen.players[uplayer], upl = ui.players[uplayer] = {};\r

  \  mText(stage == 1 ? \"all players' cards: \" : \"player's hand: \", dt);
  mLinebreak(dt, 2);\r

  \  let cards = stage == 1 ? fen.akku : pl.hand;\r

  \  cards = sort_cards(cards, false, 'CDSH', true, '3456789TJQKA2');\r

  \  let hand = upl.hand = ui_type_hand(cards, dt, { hmin: 160 }, null, '',
  ckey => ari_get_card(ckey, 150));\r

  \  let uname_plays = isdef(fen.players[Z.uname]);;\r

  \  let ishidden = stage == 0 && uname_plays && uplayer != Z.uname && Z.mode
  != 'hotseat';\r

  \  if (ishidden) { hand.items.map(x => face_down(x)); }\r

  }"
bluff_show_current_bid: "function bluff_show_current_bid(dt) {\r

  \  let fen = Z.fen;\r

  \  let bid = fen.oldbid = valf(fen.lastbid, ['_', '_', '_', '_']);\r

  \  let d = mDiv(dt);\r

  \  let content = `${bid_to_string(bid)}`;\r

  \  let item = { container: d, label: 'current bid', content: content,
  caption: 'geht hoch!', handler: handle_gehtHoch };\r

  \  apply_skin2(item);\r

  \  return item;\r

  }"
bluff_show_new_bid: "function bluff_show_new_bid(dt) {\r

  \  let fen = Z.fen;\r

  \  let bid = fen.oldbid = valf(fen.lastbid, ['_', '_', '_', '_']);\r

  \  fen.newbid = jsCopy(bid);\r

  \  let d = mDiv(dt);\r

  \  let content = `${bid_to_string(bid)}`;\r

  \  let item = { container: d, label: 'YOUR bid', content: content, caption:
  'BID', handler: handle_bid };\r

  \  apply_skin3(item);\r

  }"
bluff_start_bid: "function bluff_start_bid(o) {\r

  \  let ranks = rChoose(BLUFF.rankstr, 2).map(x => BLUFF.toword[x]);\r

  \  let b2 = coin(10) ? '_' : rNumber(1, 4);\r

  \  o.fen.lastbid = [rNumber(1, 4), ranks[0], b2, b2 == '_' ? '_' :
  ranks[1]];\r

  }"
bluff_state: "function bluff_state(dParent) {\r

  \  let user_html = get_user_pic_html(Z.uplayer, 30);\r

  \  dParent.innerHTML = `Round ${Z.round}:&nbsp;player: ${user_html} `;\r

  }"
bluff_state_new: "function bluff_state_new(dParent) {\r

  \  let user_html = get_user_pic_html(Z.uplayer, 30);\r

  \  dParent.innerHTML = `Round ${Z.round}:&nbsp;player: ${user_html} `;\r

  }"
bluff_stats: "function bluff_stats(dParent) {\r

  \  let player_stat_items = UI.player_stat_items = ui_player_info(dParent,
  {}, { 'border-width': 1, margin: 10, wmax: 180 });\r

  \  let fen = Z.fen;\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    let item = player_stat_items[plname];\r

  \    let d = iDiv(item); mCenterFlex(d); mLinebreak(d);\r

  \    if (fen.turn.includes(plname)) {\r

  \      let dh = show_hourglass(plname, d, 20, { left: -4, top: 0 });\r

  \    }\r

  \    let dhz = mDiv(d, { fg: pl.handsize == Z.options.max_handsize ?
  'yellow' : 'white' }, null, `hand: ${pl.handsize}`); mLinebreak(d);\r

  \    if (plname == fen.loser) UI.dHandsize = dhz;\r

  \    let elem = mDiv(d, { fg: plname == fen.lastbidder ? 'red' : 'white' },
  null, `${valf(pl.lastbid, ['_']).join(' ')}`);\r

  \    let szhand = getSizeNeeded(dhz);\r

  \    let sz = getSizeNeeded(elem);\r

  \    let w = Math.max(szhand.w + 20, sz.w + 20, 80);\r

  \    mStyle(d, { w: w });\r

  \    mLinebreak(d);\r

  \  }\r

  \  return player_stat_items[Z.uplayer];\r

  }"
bluff_stats_new: "function bluff_stats_new(dParent) {\r

  \  let player_stat_items = UI.player_stat_items = ui_player_info(Z, dParent,
  {}, { 'border-width': 1, margin: 10, wmax: 180 });\r

  \  let fen = Z.fen;\r

  \  for (const uname of fen.plorder) {\r

  \    let pl = fen.players[uname];\r

  \    let item = player_stat_items[uname];\r

  \    let d = iDiv(item); mCenterFlex(d); mLinebreak(d);\r

  \    if (fen.turn.includes(uname)) {\r

  \      let dh = show_hourglass(uname, d, 20, { left: -4, top: 0 });\r

  \    }\r

  \    let dhz = mDiv(d, { fg: pl.handsize == Z.options.max_handsize ?
  'yellow' : 'white' }, null, `hand: ${pl.handsize}`); mLinebreak(d);\r

  \    if (uname == fen.loser) UI.dHandsize = dhz;\r

  \    let elem = mDiv(d, { fg: uname == fen.lastbidder ? 'red' : 'white' },
  null, `${valf(pl.lastbid, ['_']).join(' ')}`);\r

  \    let szhand = getSizeNeeded(dhz);\r

  \    let sz = getSizeNeeded(elem);\r

  \    let w = Math.max(szhand.w + 20, sz.w + 20, 80);\r

  \    mStyle(d, { w: w });\r

  \    mLinebreak(d);\r

  \  }\r

  \  return player_stat_items[Z.uplayer];\r

  }"
bNei: "function bNei(arr, idx, rows, cols, includeDiagonals = true) {\r

  \  let nei = [];\r

  \  let [r, c] = iToRowCol(idx, rows, cols);\r

  \  if (r > 0) nei.push(idx - cols); else nei.push(null);\r

  \  if (r > 0 && c < cols - 1 && includeDiagonals) nei.push(idx - cols + 1);
  else nei.push(null);\r

  \  if (c < cols - 1) nei.push(idx + 1); else nei.push(null);\r

  \  if (r < rows - 1 && c < cols - 1 && includeDiagonals) nei.push(idx + cols
  + 1); else nei.push(null);\r

  \  if (r < rows - 1) nei.push(idx + cols); else nei.push(null);\r

  \  if (r < rows - 1 && c > 0 && includeDiagonals) nei.push(idx + cols - 1);
  else nei.push(null);\r

  \  if (c > 0) nei.push(idx - 1); else nei.push(null);\r

  \  if (r > 0 && c > 0 && includeDiagonals) nei.push(idx - cols - 1); else
  nei.push(null);\r

  \  return nei;\r

  }"
bNeiDir: "function bNeiDir(arr, idx, dir, rows, cols, includeDiagonals = true)
  {\r

  \  let [r, c] = iToRowCol(idx, rows, cols);\r

  \  switch (dir) {\r

  \    case 0: if (r > 0) return (idx - cols); else return (null);\r

  \    case 1: if (r > 0 && c < cols - 1 && includeDiagonals) return (idx -
  cols + 1); else return (null);\r

  \    case 2: if (c < cols - 1) return (idx + 1); else return (null);\r

  \    case 3: if (r < rows - 1 && c < cols - 1 && includeDiagonals) return
  (idx + cols + 1); else return (null);\r

  \    case 4: if (r < rows - 1) return (idx + cols); else return (null);\r

  \    case 5: if (r < rows - 1 && c > 0 && includeDiagonals) return (idx +
  cols - 1); else return (null);\r

  \    case 6: if (c > 0) return (idx - 1); else return (null);\r

  \    case 7: if (r > 0 && c > 0 && includeDiagonals) return (idx - cols -
  1); else return (null);\r

  \  }\r

  \  return null;\r

  }"
boa_save: function boa_save() { localStorage.setItem('boa', JSON.stringify(S)); }
boa_start: "function boa_start() {\r

  \  let d = mBy('dBoa');\r

  \  mClear(d);\r

  \  mAppend(d, get_header_top('Log In'));\r

  \  mAppend(d, get_red_header('Mobile and Online Bill Pay', true));\r

  \  mAppend(d, get_boa_start_content());\r

  \  let footer = mAppend(d, get_boa_footer1());\r

  \  mStyle(footer, { matop: 100, hmax: 150 });\r

  \  S.boa_loggedin = false;\r

  }"
boahavecode_start: "function boahavecode_start() {\r

  \  let d = mBy('dBoa');\r

  \  mClear(d);\r

  \  mAppend(d, get_header_top('Extra Security At Sign-in'));\r

  \  mAppend(d, get_red_header('Verify Your Identity'));\r

  \  add_havecode_content(d);\r

  \  mAppend(d, get_boa_footer2());\r

  \  S.boa_state = 'authorization_pending';\r

  \  console.log(S.boa_authorization_code);\r

  }"
boalogin_start: "function boalogin_start() {\r

  \  console.log('boalogin_start');\r

  \  let d = mBy('dBoa');\r

  \  mClear(d);\r

  \  mAppend(d, get_header_top(''));\r

  \  mAppend(d, get_red_header('Log In to Online Banking'));\r

  \  mAppend(d, get_boalogin_html());\r

  \  mAppend(d, get_boa_footer2());\r

  \  S.boa_state = 'loginform';\r

  \  let elem = get_boa_userid_input();\r

  \  elem.onfocus = () => { bw_symbol_pulse(); S.current_input =
  get_boa_userid_input(); S.current_label = 'userid'; };\r

  \  let elem2 = get_boa_pwd_input();\r

  \  elem2.onfocus = () => { bw_symbol_pulse(); S.current_input =
  get_boa_pwd_input(); S.current_label = 'pwd'; };\r

  }"
boamain_start: "function boamain_start() {\r

  \  S.boa_state = 'authorized';\r

  \  if (DA.challenge == 1) {\r

  \    TO.boa = setTimeout(() => {\r

  \      S.boa_state = null;\r

  \      let msg = DA.challenge == 1 ? 'CONGRATULATIONS!!!! YOU SUCCEEDED IN
  LOGGING IN TO BOA' : 'Session timed out!';\r

  \      show_eval_message(true, null, onclick_home);\r

  \    }, 1000);\r

  \  } else if (DA.challenge == 3) show_bill_button();\r

  \  show_correct_location('boa');\r

  \  let dParent = mBy('dBoa'); mClear(dParent);\r

  \  let d0 = mDiv(dParent, { align: 'center' }, 'dBoaMain');
  mCenterFlex(d0);\r

  \  let [wtotal, wleft, wright] = [972, 972 - 298, 292];\r

  \  let d = mDiv(d0, { w: wtotal, hmin: 500 }); mAppend(d,
  createImage('boamain_header.png', { h: 111 }));\r

  \  let dl = mDiv(d, { float: 'left', w: wleft, hmin: 400 });\r

  \  let dr = mDiv(d, { float: 'right', hmin: 400, w: wright });\r

  \  mDiv(dr, { h: 100 });\r

  \  mAppend(dr, createImage('boamain_rechts.png', { w: 292 }));\r

  \  mAppend(dl, createImage('boamain_left_top.jpg', { matop: 50, maleft: -20
  }));\r

  \  mDiv(dl, { bg: '#857363', fg: 'white', fz: 15 }, null, '&nbsp;&nbsp;<i
  class=\"fa fa-caret-down\"></i>&nbsp;&nbsp;Default Group<div
  style=\"float:right;\">Sort&nbsp;&nbsp;</div>');\r

  \  let boadata = get_fake_boa_data_list();\r

  \  let color_alt = '#F9F7F4';\r

  \  let i = 0;\r

  \  for (const o of boadata) {\r

  \    let k = o.key;\r

  \    o.index = i;\r

  \    let logo = valf(o.logo, 'defaultacct.jpg');\r

  \    let path = `${logo}`;\r

  \    let [sz, bg] = [25, i % 2 ? 'white' : color_alt];\r

  \    let dall = mDiv(dl, { bg: bg, fg: '#FCFCFC', 'border-bottom': '1px
  dotted silver' }, `dAccount${i}`);\r

  \    let da = mDiv(dall);\r

  \    mFlexLR(da);\r

  \    let img = createImage(path, { h: sz, margin: 10 });\r

  \    let da1 = mDiv(da);\r

  \    mAppend(da1, img);\r

  \    let dtext = mDiv(da1, { align: 'left', display: 'inline-block', fg:
  '#FCFCFC', fz: 14 });\r

  \    mAppend(dtext, mCreateFrom(`<a>${k}</a>`));\r

  \    let dsub = mDiv(dtext, { fg: 'dimgray', fz: 12 }, null, o.sub);\r

  \    let da2 = mDiv(da); mFlex(da2);\r

  \    let da21 = mDiv(da2, { w: 100, hmargin: 20, mabottom: 20 });\r

  \    let padinput = 7;\r

  \    mDiv(da21, { fg: 'black', fz: 12, weight: 'bold' }, null, 'Amount');\r

  \    mDiv(da21, { w: 100 }, null, `<input
  onfocus=\"add_make_payments_button(event)\"
  style=\"color:dimgray;font-size:14px;border:1px dotted
  silver;padding:${padinput}px;width:85px\" id=\"inp${i}\" name=\"authocode\"
  value=\"$\" type=\"text\" />`);\r

  \    let da22 = mDiv(da2, { maright: 10 });\r

  \    mDiv(da22, { fg: 'black', fz: 12, weight: 'bold' }, null, 'Deliver
  By');\r

  \    mDiv(da22, {}, null, `<input
  style=\"color:dimgray;font-size:12px;border:1px dotted
  silver;padding:${padinput}px\" id=\"inpAuthocode\" name=\"authocode\"
  value=\"\" type=\"date\" />`);\r

  \    let dabot = mDiv(dall);\r

  \    mFlexLR(dabot);\r

  \    let lastpayment = isdef(o['Last Payment']) ? `Last Payment: ${o['Last
  Payment']}` : ' ';\r

  \    mDiv(dabot, { fz: 12, fg: '#303030', maleft: 10, mabottom: 25 }, null,
  `${lastpayment}`);\r

  \    mDiv(dabot, { fz: 12, fg: 'blue', maright: 90, mabottom: 25 }, null,
  `<a>Activity</a>&nbsp;&nbsp;&nbsp;<a>Reminders</a>&nbsp;&nbsp;&nbsp;<a>AutoPa\
  y</a>`);\r

  \    mDiv(dall);\r

  \    i++;\r

  \  }\r

  }"
board_to_fen: "function board_to_fen(board) {\r

  \  let result = \"\";\r

  \  for (let y = 0; y < board.length; y++) {\r

  \    let empty = 0;\r

  \    for (let x = 0; x < board[y].length; x++) {\r

  \      let c = board[y][x][0];\r

  \      if (c == 'w' || c == 'b') {\r

  \        if (empty > 0) {\r

  \          result += empty.toString();\r

  \          empty = 0;\r

  \        }\r

  \        if (c == 'w') {\r

  \          result += board[y][x][1].toUpperCase();\r

  \        } else {\r

  \          result += board[y][x][1].toLowerCase();\r

  \        }\r

  \      } else {\r

  \        empty += 1;\r

  \      }\r

  \    }\r

  \    if (empty > 0) {\r

  \      result += empty.toString();\r

  \    }\r

  \    if (y < board.length - 1) {\r

  \      result += '/';\r

  \    }\r

  \  }\r

  \  result += ' w KQkq - 0 1';\r

  \  return result;\r

  }"
boardArrOmitFirstRowCol: "function boardArrOmitFirstRowCol(boardArr, rows, cols)
  {\r

  \  let res = [];\r

  \  for (let r = 1; r < rows; r++) {\r

  \    for (let c = 1; c < cols; c++) {\r

  \      let i = iFromRowCol(r, c, rows, cols);\r

  \      res.push(boardArr[i]);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
boardArrReduced: "function boardArrReduced(boardArr, rows, cols) {\r

  \  let res = [];\r

  \  for (let r = 1; r < rows; r++) {\r

  \    for (let c = 1; c < cols; c++) {\r

  \      let i = iFromRowCol(r, c, rows, cols);\r

  \      res.push(boardArr[i]);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
boardTestGetCol: "function boardTestGetCol() {\r

  \  let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\r

  \  let [rows, cols] = [3, 4];\r

  \  for (let i = 0; i < cols; i++) {\r

  \    let x = bGetCol(arr, i, rows, cols);\r

  \    console.log('arr', toBoardString(arr, rows, cols), 'col', i, x);\r

  \  }\r

  }"
boardTestGetRow: "function boardTestGetRow() {\r

  \  let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\r

  \  let [rows, cols] = [6, 2];\r

  \  for (let i = 0; i < rows; i++) {\r

  \    let x = bGetRow(arr, i, rows, cols);\r

  \    console.log('arr', toBoardString(arr, rows, cols), 'row', i, x);\r

  \  }\r

  }"
BoardToFen: "function BoardToFen() {\r

  \  var fenStr = '';\r

  \  var rank, file, sq, piece;\r

  \  var emptyCount = 0;\r

  \  for (rank = RANKS.RANK_8; rank >= RANKS.RANK_1; rank--) {\r

  \    emptyCount = 0;\r

  \    for (file = FILES.FILE_A; file <= FILES.FILE_H; file++) {\r

  \      sq = FR2SQ(file, rank);\r

  \      piece = brd_pieces[sq];\r

  \      if (piece == PIECES.EMPTY) {\r

  \        emptyCount++;\r

  \      } else {\r

  \        if (emptyCount != 0) {\r

  \          fenStr += String.fromCharCode('0'.charCodeAt() + emptyCount);\r

  \        }\r

  \        emptyCount = 0;\r

  \        fenStr += PceChar[piece];\r

  \      }\r

  \    }\r

  \    if (emptyCount != 0) {\r

  \      fenStr += String.fromCharCode('0'.charCodeAt() + emptyCount);\r

  \    }\r

  \    if (rank != RANKS.RANK_1) {\r

  \      fenStr += '/'\r

  \    } else {\r

  \      fenStr += ' ';\r

  \    }\r

  \  }\r

  \  fenStr += SideChar[brd_side] + ' ';\r

  \  if (brd_enPas == SQUARES.NO_SQ) {\r

  \    fenStr += '- '\r

  \  } else {\r

  \    fenStr += PrSq(brd_enPas) + ' ';\r

  \  }\r

  \  if (brd_castlePerm == 0) {\r

  \    fenStr += '- '\r

  \  } else {\r

  \    if (brd_castlePerm & CASTLEBIT.WKCA) fenStr += 'K';\r

  \    if (brd_castlePerm & CASTLEBIT.WQCA) fenStr += 'Q';\r

  \    if (brd_castlePerm & CASTLEBIT.BKCA) fenStr += 'k';\r

  \    if (brd_castlePerm & CASTLEBIT.BQCA) fenStr += 'q';\r

  \  }\r

  \  fenStr += ' ';\r

  \  fenStr += brd_fiftyMove;\r

  \  fenStr += ' ';\r

  \  var tempHalfMove = brd_hisPly;\r

  \  if (brd_side == COLOURS.BLACK) {\r

  \    tempHalfMove--;\r

  \  }\r

  \  fenStr += tempHalfMove / 2;\r

  \  return fenStr;\r

  }"
boardToNode: "function boardToNode(state) {\r

  \  let res = new Array();\r

  \  for (let i = 0; i < state.length; i++) {\r

  \    if (state[i] == null) res[i] = ' ';\r

  \    else res[i] = state[i];\r

  \  }\r

  \  return res;\r

  }"
boaverify_start: "function boaverify_start() {\r

  \  let d = mBy('dBoa');\r

  \  mClear(d);\r

  \  mAppend(d, get_header_top('Extra Security At Sign-in'));\r

  \  mAppend(d, get_red_header('Verify Your Identity'));\r

  \  add_verify_content(d);\r

  \  mAppend(d, get_boa_footer2());\r

  }"
book_animals_1: "function book_animals_1() {\r

  \  let pics = {};\r

  \  for (const k of KeySets.animals) {\r

  \    let item = miPic(k, dContent)\r

  \    pics[k] = item;\r

  \  }\r

  \  return { pics: pics, play: () => { } };\r

  }"
book_blaettern: "function book_blaettern(page) {\r

  \  if (DA.currentpage != page && isNumber(DA.currentpage))
  mStyleRemove(dFooter.children[DA.currentpage], 'fg');\r

  \  mStyle(dFooter.children[page], { fg: 'yellow' });\r

  \  DA.currentpage = page;\r

  \  dTitle.innerHTML = DA.currentbook.title + ' pg.' + page;\r

  }"
book_cs_1: "function book_cs_1() {\r

  \  let o = mCanvas(dContent, { w: 600, h: 300 }, {}, startloop, pauseloop,
  'cc');\r

  \  o.draw = draw_random_walk;\r

  \  return o;\r

  }"
book_cs_2: "function book_cs_2() {\r

  \  let o = mCanvas(dContent, { w: 600, h: 300 }, {}, startloop, pauseloop,
  'cc');\r

  \  o.draw = draw_perlin_x;\r

  \  return o;\r

  }"
book_cs_3: "function book_cs_3() {\r

  \  let o = mCanvas(dContent, { w: 600, h: 300 }, {}, startloop, pauseloop,
  'cc');\r

  \  o.draw = draw_perlin_xy;\r

  \  return o;\r

  }"
book_cs_4: "function book_cs_4() {\r

  \  let o = mCanvas(dContent, { w: 600, h: 300, bg: 'transparent' }, {},
  startloop, pauseloop, 'cc');\r

  \  o.draw = draw_random_walk;\r

  \  return o;\r

  }"
book_get: function book_get(id) { return jsCopy(DB.appdata.book.find(x => x.id == id)); }
book_open: "function book_open(item) {\r

  \  console.log('BOOK OPEN!!!!!!!!!!!!!!!');\r

  \  let d = iDiv(item);\r

  \  let dg = mGrid(2, 1, d, { gap: 3, matop: 22 });\r

  \  let books = DB.appdata.book;\r

  \  for (const book of books) {\r

  \    let d1 = mDiv(dg, { fg: rColor(23) }, null, book.title, 'hop1');\r

  \    d1.onclick = () => book_open_title(book.id);\r

  \  }\r

  }"
book_open_next_page: "function book_open_next_page() {\r

  \  let page = isNumber(DA.currentpage) ? DA.currentpage + 1 : 1;\r

  \  if (page > DA.currentbook.pages) page = 1;\r

  \  book_open_page(page);\r

  }"
book_open_page: "function book_open_page(page) {\r

  \  pauseloop(); iClear(dContent);\r

  \  book_blaettern(page);\r

  \  let book = G = book_get(dContent.getAttribute('book'));\r

  \  let func = window[`book_${book.id}_${page}`];\r

  \  let o = G.canvas = func();\r

  \  iReg(o);\r

  \  dButtons = G.canvas.controls;\r

  \  addKeys(G, window);\r

  \  o.play();\r

  }"
book_open_prev_page: "function book_open_prev_page() {\r

  \  let page = isNumber(DA.currentpage) ? DA.currentpage - 1 :
  DA.currentbook.pages;\r

  \  if (page < 1) page = DA.currentbook.pages;\r

  \  book_open_page(page);\r

  }"
book_open_title: "function book_open_title(id, page) {\r

  \  clear_all();\r

  \  dTable = mSection({ bg: DB.apps.book.color }, 'dTable', null, null,
  'bookgrid');\r

  \  let book = DA.currentbook = book_get(id);\r

  \  dTitle = mDiv(dTable, {}, null, book.title)\r

  \  mButtonX(dTable, () => mClear(dTable), pos = 'tr', sz = 25, color =
  'white')\r

  \  dContent = mDiv(dTable, {}, 'dContent'); mCenterCenterFlex(dContent);\r

  \  dContent.setAttribute('book', id);\r

  \  let footer = dFooter = mDiv(dTable, { align: 'center' });\r

  \  maButton('<', () => book_open_prev_page(), footer);\r

  \  for (const p of range(1, book.pages)) {\r

  \    maButton(p, () => book_open_page(p), footer);\r

  \  }\r

  \  maButton('>', () => book_open_next_page(), footer);\r

  \  book_open_page(valf(page, 1));\r

  }"
BookMove: "function BookMove() {\r

  \  var gameLine = printGameLine();\r

  \  var bookMoves = [];\r

  \  var lengthOfLineHack = gameLine.length;\r

  \  if (gameLine.length == 0) lengthOfLineHack--;\r

  \  for (var bookLineNum = 0; bookLineNum < brd_bookLines.length;
  ++bookLineNum) {\r

  \    if (LineMatch(brd_bookLines[bookLineNum], gameLine) == BOOL.TRUE) {\r

  \      var move = brd_bookLines[bookLineNum].substr(lengthOfLineHack + 1,
  4);\r

  \      if (move.length == 4) {\r

  \        var from = SqFromAlg(move.substr(0, 2));\r

  \        var to = SqFromAlg(move.substr(2, 2));\r

  \        varInternalMove = ParseMove(from, to);\r

  \        bookMoves.push(varInternalMove);\r

  \      }\r

  \    }\r

  \  }\r

  \  console.log(\"Total + \" + bookMoves.length + \" moves in array\");\r

  \  if (bookMoves.length == 0) return NOMOVE;\r

  \  var num = Math.floor(Math.random() * bookMoves.length);\r

  \  return bookMoves[num];\r

  }"
bot_clairvoyant: "function bot_clairvoyant(list, maxvalue, mmax, exp, nreas, n2,
  have2, words, fen) {\r

  \  let reduced_list = list.filter(x => x.value == list[0].value ||
  x.mine);\r

  \  let res = reduced_list.length >= 2 ? rChoose(list, 2) : [reduced_list[0],
  { value: 0, rank: '_' }];\r

  \  let max = res[0].value >= res[1].value ? res[0] : res[1]; let min =
  res[0].value < res[1].value ? res[0] : res[1];\r

  \  let b = [max.value, max.rank, min.value, min.rank];\r

  \  if (isdef(fen.lastbid)) {\r

  \    let [n1, r1, n2, r2] = bluff_convert2ranks(fen.lastbid);\r

  \    if (!is_bid_higher_than(bluff_convert2words(b), fen.lastbid)) {\r

  \      return [null, handle_gehtHoch];\r

  \    }\r

  \  }\r

  \  return [bluff_convert2words(b), handle_bid];\r

  }"
bot_perfect: "function bot_perfect(list, max, mmax, exp, nreas, n2, have2,
  words, fen) {\r

  \  let i = 0; while (list[i].rank == '2') i++;\r

  \  let b = [list[i].value + n2, list[i].rank, list[i + 1].value, list[i +
  1].rank];\r

  \  list.map(x => console.log(x));\r

  \  console.log('b:', b);\r

  \  if (isdef(fen.lastbid)) {\r

  \    let [n1, r1, n2, r2] = bluff_convert2ranks(fen.lastbid);\r

  \    if (!is_bid_higher_than(bluff_convert2words(b), fen.lastbid)) {\r

  \      return [null, handle_gehtHoch];\r

  \    }\r

  \  }\r

  \  return [bluff_convert2words(b), handle_bid];\r

  }"
bot_random: "function bot_random(list, max, mmax, exp, nreas, n2, have2, words,
  fen) {\r

  \  let ranks = rChoose('3456789TJQKA', 2);\r

  \  let b;\r

  \  if (nundef(fen.lastbid)) b = [rNumber(1, nreas), ranks[0], rNumber(1,
  nreas), ranks[1]];\r

  \  else if (fen.lastbid[0] > nreas + 2) {\r

  \    return [null, handle_gehtHoch];\r

  \  } else {\r

  \    [n1, r1, n2, r2] = bluff_convert2ranks(fen.lastbid);\r

  \    assertion(isNumber(n1) && n1 > 0 && isNumber(n2), 'bot_random: n1 or n2
  is not a number OR n1<=0!!!!!!!', n1, n2);\r

  \    if ((n1 + n2) / 2 > nreas && coin(50)) {\r

  \      return [null, handle_gehtHoch];\r

  \    } else if ((n1 + n2) / 2 <= nreas + 1) b = n1 <= nreas + 1 ? [n1 + 1,
  r1, n2, r2] : [n1, r1, n2 + 1, r2];\r

  \    else {\r

  \      let [i1, i2] = [BLUFF.rankstr.indexOf(r1),
  BLUFF.rankstr.indexOf(r2)];\r

  \      let s = '3456789TJQKA';\r

  \      let imin = Math.min(i1, i2); let imax = Math.max(i1, i2); let i =
  imax == i1 ? 1 : 2;\r

  \      let [smin, between, smax] = [s.substring(0, imin), s.substring(imin +
  1, imax), s.substring(imax + 1, s.length)];\r

  \      if (!isEmpty(smax)) { if (i == 1) b = [n1, rChoose(smax), n2, r2];
  else b = [n1, r1, n2, rChoose(smax)]; }\r

  \      else if (!isEmpty(between)) { if (i == 2) b = [n1, rChoose(between),
  n2, r2]; else b = [n1, r1, n2, rChoose(between)]; }\r

  \      else return [null, handle_gehtHoch];\r

  \    }\r

  \  }\r

  \  return [bluff_convert2words(b), handle_bid];\r

  }"
botbest: "function botbest(list, max, mmax, exp, nreas, n2, have2, words, fen)
  {\r

  \  if (nundef(DA.ctrandom)) DA.ctrandom = 1; console.log(`${DA.ctrandom++}:
  ${Z.uplayer} using strategy`, Z.strategy)\r

  \  let bot = window[`bot_${Z.strategy}`];\r

  \  let [b, f] = bot(list, max, mmax, exp, nreas, n2, have2, words, fen);\r

  \  assertion(!b || b[2] != 0, 'bot returned bid with n2==0');\r

  \  return [b, f];\r

  }"
bottom_elem_from_to: function bottom_elem_from_to(arr1, arr2) { last_elem_from_to(arr1, arr2); }
bottom_elem_from_to_top: function bottom_elem_from_to_top(arr1, arr2) { arr2.unshift(arr1.pop()); }
bPartialCol: "function bPartialCol(arr, icol, rows, cols) {\r

  \  let iStart = icol;\r

  \  let x = null;\r

  \  for (let i = iStart; i < iStart + (cols * rows); i += cols) { if
  (empty_func(arr[i])) continue; else if (empty_func(x)) x = arr[i]; else if
  (arr[i] != x) return null; }\r

  \  return x;\r

  }"
bPartialDiag: "function bPartialDiag(arr, rows, cols) {\r

  \  let iStart = 0;\r

  \  let x = null;\r

  \  for (let i = iStart; i < arr.length; i += cols + 1) { if
  (empty_func(arr[i])) continue; else if (empty_func(x)) x = arr[i]; else if
  (arr[i] != x) return null; }\r

  \  return x;\r

  }"
bPartialDiag2: "function bPartialDiag2(arr, rows, cols) {\r

  \  let iStart = cols - 1;\r

  \  let x = null;\r

  \  for (let i = iStart; i < arr.length - 1; i += cols - 1) {\r

  \    if (empty_func(arr[i])) continue; else if (empty_func(x)) x = arr[i];
  else if (arr[i] != x) return null;\r

  \  }\r

  \  return x;\r

  }"
bPartialRow: "function bPartialRow(arr, irow, rows, cols) {\r

  \  let iStart = irow * cols;\r

  \  let x = null;\r

  \  for (let i = iStart; i < iStart + cols; i++) {\r

  \    if (empty_func(arr[i])) continue;\r

  \    else if (empty_func(x)) x = arr[i];\r

  \    else if (arr[i] != x) return null;\r

  \  }\r

  \  return x;\r

  }"
Branch: "function Branch(start, end) {\r

  \  this.start = start;\r

  \  this.end = end;\r

  \  this.init = [start.x, start.y, end.x, end.y];\r

  \  this.children = [];\r

  \  this.finished = false;\r

  \  this.get_healthy_end = () => { return createVector(this.init[2],
  this.init[3]); }\r

  \  this.repair = () => {\r

  \    this.start.x = this.init[0];\r

  \    this.start.y = this.init[1];\r

  \    this.end.x = this.init[2];\r

  \    this.end.y = this.init[3];\r

  \  }\r

  \  this.jitter = () => {\r

  \    this.end.x += random(-1, 1);\r

  \    this.end.y += random(-1, 1);\r

  \  }\r

  \  this.show = () => {\r

  \    stroke(255);\r

  \    line(this.start.x, this.start.y, this.end.x, this.end.y)\r

  \  }\r

  \  this.branch = (angle, factor = .67) => {\r

  \    let dir = p5.Vector.sub(this.end, this.start);\r

  \    dir.rotate(angle);\r

  \    dir.mult(factor);\r

  \    let newend = p5.Vector.add(this.end, dir);\r

  \    let b = new Branch(this.end, newend);\r

  \    this.children.push(b);\r

  \    return b;\r

  \  }\r

  }"
branch_draw: "function branch_draw(o) {\r

  \  cStyle({ fg: o.color, thickness: o.thickness, cap: 'round' }, CX);\r

  \  if (C.root.jitter) cLine(o.p1.x, o.p1.y, o.p2.x + Math.random() * 2 - 1,
  o.p2.y + Math.random() * 2 - 1, {}, CX);\r

  \  else cLine(o.p1.x, o.p1.y, o.p2.x, o.p2.y, {}, CX);\r

  }"
bRayDir: "function bRayDir(arr, idx, dir, rows, cols) {\r

  \  let indices = [];\r

  \  let i = idx;\r

  \  while (i < arr.length) {\r

  \    let i = bNeiDir(arr, i, dir, rows, cols);\r

  \    if (!i) break; else indices.push(i);\r

  \  }\r

  \  return indices;\r

  }"
bringInfoboxToFront: "function bringInfoboxToFront(mobj) {\r

  \  mobj.elem.style.zIndex = maxZIndex;\r

  \  maxZIndex += 1;\r

  }"
bringToFront: "function bringToFront(ui) {\r

  \  ui.style.zIndex = maxZIndex;\r

  \  maxZIndex += 1;\r

  }"
broadcastSIMA: "async function broadcastSIMA(usersPath = './_users.yaml',
  settingsPath = './_settings.yaml', gamesPath = './_games.yaml', addonsPath =
  './_addons.yaml') {\r

  \  let users = await loadYamlDict(usersPath);\r

  \  let settings = await loadYamlDict(settingsPath);\r

  \  let games = await loadYamlDict(gamesPath);\r

  \  let addons = await loadYamlDict(addonsPath);\r

  \  DB = {\r

  \    id: 'speechGames',\r

  \    users: users,\r

  \    settings: settings,\r

  \    games: games,\r

  \    addons: addons,\r

  \  };\r

  \  saveSIMA();\r

  \  if (CLEAR_LOCAL_STORAGE) localStorage.clear();\r

  \  await loadAssetsSIMA('../assets/');\r

  }"
bStrideCol: "function bStrideCol(arr, icol, rows, cols, stride) {\r

  \  for (let i = 0; i <= rows - stride; i++) {\r

  \    let ch = bStrideColFrom(arr, i, icol, rows, cols, stride);\r

  \    if (ch) return ch;\r

  \  }\r

  \  return null;\r

  }"
bStrideColFrom: "function bStrideColFrom(arr, irow, icol, rows, cols, stride)
  {\r

  \  if (rows - irow < stride) return null;\r

  \  let iStart = irow * cols + icol;\r

  \  let x = arr[iStart];\r

  \  if (empty_func(x)) return null;\r

  \  for (let i = iStart + cols; i < iStart + cols * stride; i += cols) if
  (arr[i] != x) return null;\r

  \  return x;\r

  }"
bStrideDiag2From: "function bStrideDiag2From(arr, irow, icol, rows, cols,
  stride) {\r

  \  if (rows - irow < stride || icol - stride + 1 < 0) return null;\r

  \  let iStart = irow * cols + icol;\r

  \  let x = arr[iStart];\r

  \  if (empty_func(x)) return null;\r

  \  for (let i = iStart + cols - 1; i < iStart + (cols - 1) * stride; i +=
  cols - 1) if (arr[i] != x) return null;\r

  \  return x;\r

  }"
bStrideDiagFrom: "function bStrideDiagFrom(arr, irow, icol, rows, cols, stride)
  {\r

  \  if (rows - irow < stride || cols - icol < stride) return null;\r

  \  let iStart = irow * cols + icol;\r

  \  let x = arr[iStart];\r

  \  if (empty_func(x)) return null;\r

  \  for (let i = iStart + cols + 1; i < iStart + (cols + 1) * stride; i +=
  cols + 1) if (arr[i] != x) return null;\r

  \  return x;\r

  }"
bStrideRow: "function bStrideRow(arr, irow, rows, cols, stride) {\r

  \  for (let i = 0; i <= cols - stride; i++) {\r

  \    let ch = bStrideRowFrom(arr, irow, i, rows, cols, stride);\r

  \    if (ch) return ch;\r

  \  }\r

  \  return null;\r

  }"
bStrideRowFrom: "function bStrideRowFrom(arr, irow, icol, rows, cols, stride)
  {\r

  \  if (cols - icol < stride) return null;\r

  \  let iStart = irow * cols + icol;\r

  \  let x = arr[iStart];\r

  \  if (empty_func(x)) return null;\r

  \  for (let i = iStart + 1; i < iStart + stride; i++) if (arr[i] != x)
  return null;\r

  \  return x;\r

  }"
bTest01: "function bTest01() {\r

  \  let arr = [1, 1, 1, 1, 2, 1, 0, 1, 0], rows = 3, cols = 3, irow = 0;\r

  \  console.log(bFullRow(arr, irow, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [1, 1, 1, 1, 2, 1, 1, 1, 0], rows = 3, cols = 3, irow = 2;\r

  \  console.log(bFullRow(arr, irow, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [1, 1, 1, 1, 2, 1, 1, 1, 0], rows = 3, cols = 3, icol = 0;\r

  \  console.log(bFullCol(arr, icol, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [1, 1, 0, 2, 1, 1, 1, 0, 1], rows = 3, cols = 3;\r

  \  console.log(bFullDiag(arr, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [2, 1, 0, 2, 1, 1, 1, 0, 1], rows = 3, cols = 3;\r

  \  console.log(bFullDiag(arr, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [2, 1, 0, 0, 2, 1, 1, 0, 1], rows = 3, cols = 3;\r

  \  console.log(bFullDiag(arr, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [2, 2, 1, 2, 1, 2, 1, 2, 2], rows = 3, cols = 3;\r

  \  console.log(bFullDiag2(arr, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [2, 1, 0, 0, 0, 1, 0, 0, 1], rows = 3, cols = 3;\r

  \  console.log(bFullDiag2(arr, rows, cols));\r

  \  console.log('============================')\r

  }"
bTest02: "function bTest02() {\r

  \  let arr = [1, null, 1, 1, 2, 1, 0, 1, 0], rows = 3, cols = 3, irow = 0;\r

  \  console.log(bPartialRow(arr, irow, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [1, 1, 1, 1, 0, 1, 1, 1, 2], rows = 3, cols = 3, irow = 2;\r

  \  console.log(bPartialRow(arr, irow, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [1, 1, 1, null, 2, 1, 1, 1, 0], rows = 3, cols = 3, icol = 0;\r

  \  console.log(bPartialCol(arr, icol, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [1, 1, 0, 2, null, 1, 1, 0, 1], rows = 3, cols = 3;\r

  \  console.log(bPartialDiag(arr, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [2, 1, 0, 2, 1, 1, 1, 0, 1], rows = 3, cols = 3;\r

  \  console.log(bPartialDiag(arr, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [2, 1, 0, 0, 2, 1, 1, 0, 1], rows = 3, cols = 3;\r

  \  console.log(bPartialDiag(arr, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [2, 2, 1, 2, null, 2, 1, 2, 2], rows = 3, cols = 3;\r

  \  console.log(bPartialDiag2(arr, rows, cols));\r

  \  console.log('____________')\r

  \  arr = [2, 1, 0, 0, 0, 1, 0, 0, 1], rows = 3, cols = 3;\r

  \  console.log(bPartialDiag2(arr, rows, cols));\r

  }"
bTest03: "function bTest03() {\r

  \  let arr = [[0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  ['O', 'X', 0, 0, 0, 0, 0],\r

  \  ['O', 'O', 'O', 'O', 0, 0, 0]]\r

  \  let arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 5, stride = 4;\r

  \  console.log('arr', arr[5]);\r

  \  console.log('stride in row', irow + ':', bStrideRow(arrf, irow, rows,
  cols, stride));\r

  \  console.log('____________');\r

  \  arr = [[0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  ['O', 'X', 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 'O', 'O', 'O', 0]]\r

  \  arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 5, stride = 4;\r

  \  console.log('arr', arr[5]);\r

  \  console.log('stride in row', irow + ':', bStrideRow(arrf, irow, rows,
  cols, stride));\r

  \  console.log('____________');\r

  \  arr = [[0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  ['O', 'X', 0, 0, 0, 0, 0],\r

  \  [0, 'O', 'O', 'O', 'O', 0, 0]]\r

  \  arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 5, stride = 4;\r

  \  console.log('arr', arr[5]);\r

  \  console.log('stride in row', irow + ':', bStrideRow(arrf, irow, rows,
  cols, stride));\r

  \  console.log('____________');\r

  \  arr = [[0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  ['O', 'X', 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 'O', 'O', 'O', 'O']]\r

  \  arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 5, stride = 4;\r

  \  console.log('arr', arr[5]);\r

  \  console.log('stride in row', irow + ':', bStrideRow(arrf, irow, rows,
  cols, stride));\r

  \  console.log('____________');\r

  }"
bTest04: "function bTest04() {\r

  \  let arr = [[0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 0, 0, 0],\r

  \  ['O', 0, 0, 0, 0, 0, 0],\r

  \  ['O', 0, 0, 0, 0, 0, 0],\r

  \  ['O', 'X', 0, 0, 0, 0, 0],\r

  \  ['O', 'O', 'O', 'O', 0, 0, 0]]\r

  \  let arrf = arrFlatten(arr), rows = 6, cols = 7, icol = 0, stride = 4;\r

  \  console.log('stride in col', icol + ':', bStrideCol(arrf, icol, rows,
  cols, stride));\r

  \  console.log('____________');\r

  \  arr = [[0, 0, 0, 0, 0, 0, 0],\r

  \  [0, 0, 0, 0, 'X', 0, 0],\r

  \  ['O', 0, 0, 0, 'X', 0, 0],\r

  \  ['O', 0, 0, 0, 'O', 0, 0],\r

  \  ['O', 'X', 0, 0, 'X', 0, 0],\r

  \  ['O', 'O', 'O', 'O', 0, 0, 0]]\r

  \  arrf = arrFlatten(arr), rows = 6, cols = 7, icol = 4, stride = 4;\r

  \  console.log('stride in col', icol + ':', bStrideCol(arrf, icol, rows,
  cols, stride));\r

  \  console.log('____________');\r

  \  arr = [[0, 0, 'X', 0, 'X', 0, 0],\r

  \  [0, 0, 0, 0, 'X', 0, 0],\r

  \  ['O', 0, 0, 0, 'X', 0, 0],\r

  \  ['O', 0, 0, 0, 'X', 0, 0],\r

  \  ['O', 'X', 0, 0, 'O', 0, 0],\r

  \  ['O', 'O', 'O', 'O', 0, 0, 0]]\r

  \  arrf = arrFlatten(arr), rows = 6, cols = 7, icol = 4, stride = 4;\r

  \  console.log('stride in col', icol + ':', bStrideCol(arrf, icol, rows,
  cols, stride));\r

  \  console.log('____________');\r

  }"
bTest05: "function bTest05() {\r

  \  let arr = [\r

  \    [0, 0, 0, 0, 0, 0, 0],\r

  \    [0, 0, 0, 0, 0, 0, 0],\r

  \    ['O', 0, 0, 0, 0, 0, 0],\r

  \    [0, 'O', 0, 0, 0, 0, 0],\r

  \    ['O', 'X', 'O', 0, 0, 0, 0],\r

  \    ['O', 'O', 'O', 'O', 0, 0, 0]]\r

  \  let arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 2, icol = 0,
  stride = 4;\r

  \  console.log('stride in diag', irow, icol + ':', bStrideDiagFrom(arrf,
  irow, icol, rows, cols, stride));\r

  \  console.log('____________');\r

  \  arr = [\r

  \    [0, 0, 0, 0, 0, 0, 0],\r

  \    [0, 0, 0, 0, 0, 'X', 0],\r

  \    ['O', 0, 0, 0, 0, 0, 'X'],\r

  \    [0, 'O', 0, 0, 0, 0, 0],\r

  \    ['O', 'X', 'O', 0, 0, 0, 0],\r

  \    ['O', 'O', 'O', 'O', 0, 0, 0]]\r

  \  arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 1, icol = 5, stride =
  4;\r

  \  console.log('stride in diag', irow, icol + ':', bStrideDiagFrom(arrf,
  irow, icol, rows, cols, stride));\r

  \  console.log('____________');\r

  \  arr = [\r

  \    [0, 0, 0, 0, 0, 0, 'X'],\r

  \    [0, 0, 0, 0, 0, 'X', 0],\r

  \    ['O', 0, 0, 0, 'X', 0, 'X'],\r

  \    [0, 'O', 0, 'X', 0, 0, 0],\r

  \    ['O', 'X', 'O', 0, 0, 0, 0],\r

  \    ['O', 'O', 'O', 'O', 0, 0, 0]]\r

  \  arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 0, icol = 6, stride =
  4;\r

  \  console.log('stride in diag2', irow, icol + ':', bStrideDiag2From(arrf,
  irow, icol, rows, cols, stride));\r

  \  console.log('____________');\r

  \  arr = [\r

  \    [0, 0, 0, 0, 0, 0, 'X'],\r

  \    [0, 0, 0, 0, 0, 'X', 0],\r

  \    ['O', 0, 0, 'O', 'X', 0, 'X'],\r

  \    [0, 'O', 'O', 'X', 0, 0, 0],\r

  \    ['O', 'O', 'O', 0, 0, 0, 0],\r

  \    ['O', 'O', 'O', 'O', 0, 0, 0]]\r

  \  arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 2, icol = 3, stride =
  4;\r

  \  console.log('stride in diag2', irow, icol + ':', bStrideDiag2From(arrf,
  irow, icol, rows, cols, stride));\r

  \  console.log('____________');\r

  }"
bTest06: "function bTest06() {\r

  \  let pos = [\r

  \    [0, 0, 0, 0, 0, 0, 0],\r

  \    [0, 0, 0, 0, 0, 0, 0],\r

  \    [0, 'X', 0, 0, 0, 0, 0],\r

  \    [0, 'X', 0, 'O', 0, 0, 0],\r

  \    ['O', 'X', 0, 'O', 0, 0, 0],\r

  \    ['O', 'X', 0, 'O', 0, 0, 0]];\r

  \  let arr = arrFlatten(pos);\r

  \  let str = bStrideCol(arr, 1, 6, 7, 4);\r

  \  console.log('stride', str)\r

  \  let w = checkWinnerC4(arr, 6, 7, 4);\r

  \  printState(arr)\r

  \  console.log('w', w);\r

  }"
bTest07: "function bTest07() {\r

  \  let arr = [0, 0, 0, 0, 0, 0, 0, \"X\", 0, 0, 0, 0, 0, 0, \"X\", 0, 0,
  \"X\", \"X\", 0, \"O\", \"X\", 0, \"X\", \"O\", \"O\", \"O\", \"X\", \"O\",
  \"X\", \"O\", \"O\", \"O\", \"X\", \"O\", \"O\", \"X\", \"O\", \"O\", \"O\",
  \"X\", \"O\"];\r

  \  let w = checkWinnerC4(arr, 6, 7, 4);\r

  \  printState(arr)\r

  \  console.log('w', w);\r

  }"
bTest08: "function bTest08() {\r

  \  let arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \"X\", 0,
  0, 0, \"X\", 0, 0, \"O\", 0, 0, 0, \"O\", \"X\", 0, \"O\", 0, 0, 0, \"O\",
  \"X\", \"O\", \"O\", \"O\", \"O\", 0];\r

  \  let w = checkWinnerC4(arr, 6, 7, 4);\r

  \  printState(arr)\r

  \  console.log('w', w);\r

  }"
bTest09: "function bTest09() {\r

  \  let pos = [\r

  \    [0, 0, 0, 0, 0],\r

  \    [0, 0, 0, 0, 0],\r

  \    [0, 'X', 0, 0, 0],\r

  \    [0, 'X', 0, 'O', 0],\r

  \    ['O', 'X', 0, 'O', 0]];\r

  \  let arr = arrFlatten(pos);\r

  \  let nei = bNei(arr, 6, 5, 5);\r

  \  console.log(nei)\r

  \  nei = bNei(arr, 0, 5, 5);\r

  \  console.log(nei)\r

  \  nei = bNei(arr, 24, 5, 5);\r

  \  console.log(nei)\r

  }"
bTest10: "function bTest10() {\r

  \  let pos = [\r

  \    [0, 1, 2, 3, 4, 5],\r

  \    [6, 7, 8, 9, 10, 11],\r

  \    [12, 13, 14, 15, 16, 17],\r

  \    [18, 19, 20, 21, 22, 23],\r

  \    [24, 25, 26, 27, 28, 29]];\r

  \  let arr = arrFlatten(pos);\r

  \  printState(arr);\r

  \  let nei = bNei(arr, 6, 6, 6);\r

  \  console.log(nei);\r

  \  nei = bNei(arr, 7, 6, 6);\r

  \  console.log(nei);\r

  \  nei = bNei(arr, 16, 6, 6);\r

  \  console.log(nei);\r

  }"
btest11_fractions: "function btest11_fractions() {\r

  \  let a = math.fraction(1, 4);\r

  \  let b = math.fraction(1, 4);\r

  \  let c = math.multiply(a, b);\r

  \  console.log(a, b, c);\r

  \  let d = math.add(a, b);\r

  \  console.log(d)\r

  \  let e = math.multiply(2, a);\r

  \  console.log(e)\r

  }"
buildChanav: "function buildChanav(n, rParent) {\r

  \  let parentChanav = convertToList(rParent ? rParent.chanav :
  R.initialChannels);\r

  \  let ownChanav = convertToList(n.chanav);\r

  \  let res = ownChanav;\r

  \  parentChanav.map(x => addIf(res, x));\r

  \  return isEmpty(res) ? null : res.length == 1 ? res[0] : res;\r

  }"
building_is_correct: "function building_is_correct(b) {\r

  \  let key = b.keycard.key;\r

  \  let list = b.list;\r

  \  for (let i = 0; i < list.length; i++) { if (list[i][0] != key[0]) return
  false; }\r

  \  return true;\r

  }"
buildNewSyms: "function buildNewSyms() {\r

  \  let newSyms = {};\r

  \  for (const k of KeySets.all) {\r

  \    let info = Syms[k];\r

  \    console.log(info)\r

  \    delete info.w;\r

  \    delete info.h;\r

  \    let old = symbolDict[k];\r

  \    console.log('old symbol:', old);\r

  \    if (isdef(old)) {\r

  \      addIf(info.cats, old.group);\r

  \      addIf(info.cats, old.subgroups);\r

  \    }\r

  \    newSyms[k] = Syms[k];\r

  \  }\r

  \  downloadAsYaml(newSyms, 'newSyms')\r

  }"
buildWordFromLetters: "function buildWordFromLetters(dParent) {\r

  \  let letters = Array.from(dParent.children);\r

  \  let s = letters.map(x => x.innerHTML);\r

  \  s = s.join('');\r

  \  return s;\r

  }"
busy_wait_until_slot: "function busy_wait_until_slot(slot) {\r

  \  let diff = get_slot_diff(Z.fen);\r

  \  let dd;\r

  \  do {\r

  \    dd = last_n_digits(Date.now(), 2);\r

  \    if (dd >= slot && dd <= slot + diff) { break; }\r

  \  } while (true);\r

  \  return dd;\r

  }"
bw_list_entry: "function bw_list_entry(d, key, loginOrCard = 'login') {\r

  \  let logins = loginOrCard == 'login' ? get_fake_bw_logins() :
  get_fake_bw_cards();\r

  \  let login = logins[key];\r

  \  let d4 = mDiv(d, { bg: 'white', fg: 'black', 'border-bottom': '1px dotted
  #ddd' });\r

  \  let d5 = mDiv(d4, { display: 'flex' });\r

  \  let dimg = mDiv(d5, { bg: 'white', fg: 'black' }, null, `<img
  src='../rechnung/images/${login.logo}' height=14 style=\"margin:8px\">`);\r

  \  let dtext = mDiv(d5, { cursor: 'pointer' }, null, `<div>${key}</div><div
  style=\"font-size:12px;color:gray\">${login.sub}</div>`);\r

  \  dtext.onclick = () => onclick_bw_symbol(key)\r

  \  let d6 = mDiv(d4, { display: 'flex', padding: 2 });\r

  \  let disyms = {\r

  \    bwtext: { postfix: 'userid', matop: 2, maright: 0, mabottom: 0, maleft:
  0, sz: 27 },\r

  \    bwcross: { postfix: 'cross', matop: 2, maright: 0, mabottom: 0, maleft:
  -13, sz: 25 },\r

  \    bwkey: { postfix: 'pwd', matop: 0, maright: 0, mabottom: 0, maleft:
  -12, sz: 27 },\r

  \    bwclock: { postfix: 'clock', matop: 0, maright: 0, mabottom: 0, maleft:
  0, sz: 25 },\r

  \  }\r

  \  for (const k of ['bwtext', 'bwcross', 'bwkey']) {\r

  \    let o = disyms[k];\r

  \    let [filename, styles] = [k, disyms[k]];\r

  \    let path = `../rechnung/images/${filename}.png`;\r

  \    let [sz, ma] = [styles.sz, `${styles.matop}px ${styles.maright}px
  ${styles.mabottom}px ${styles.maleft}px`];\r

  \    let img = mDiv(d6, { paright: 16 }, null, `<img src='${path}'
  height=${sz} style=\"margin:${ma}\">`);\r

  \    if (k != 'bwcross') {\r

  \      mStyle(img, { cursor: 'pointer' });\r

  \      img.onclick = () => onclick_bw_symbol(key, o.postfix);\r

  \    }\r

  \  }\r

  \  mFlexSpacebetween(d4);\r

  \  return d4;\r

  }"
bw_login_popup: "function bw_login_popup() {\r

  \  let html = `\r

  \    <div id=\"dBw\" class=\"mystyle\"
  style=\"background:silver;padding:12px\">\r

  \      <div id=\"dBWLogin\">\r

  \        <form action=\"javascript:bw_master_password_check()\"
  id=\"fBitwarden\">\r

  \          <label for=\"inputPassword\">Enter Master Password:</label>\r

  \          <input type=\"password\" id=\"inputPassword\" placeholder=\"\"
  />\r

  \        </form>\r

  \        <div id=\"bw_login_status\" style=\"color:red\"></div>\r

  \      </div>\r

  \    </div>\r

  \  `;\r

  \  let d = mCreateFrom(html);\r

  \  let dParent = mBy('dPopup');\r

  \  show(dParent);\r

  \  mClear(dParent);\r

  \  mStyle(dParent, { top: 50, right: 10 });\r

  \  mAppend(dParent, d);\r

  \  document.getElementById(\"inputPassword\").focus();\r

  }"
bw_master_password_check: "function bw_master_password_check() {\r

  \  let pw = mBy('inputPassword').value;\r

  \  if (pw == S.master_password) {\r

  \    S.bw_state = 'loggedin';\r

  \    toggle_bw_symbol();\r

  \    hide('dPopup');\r

  \    if (DA.name == 'Password') {\r

  \      show_eval_message(true); DA.name = DA.challenge = null;\r

  \    }\r

  \  } else if (DA.name == 'Password') {\r

  \    DA.name = DA.challenge = null;\r

  \    show_eval_message(false, `Fail! the password is
  ${S.master_password}`);\r

  \    mBy('inputPassword').value = '';\r

  \    hide('dPopup');\r

  \  } else {\r

  \    let d = mBy('bw_login_status');\r

  \    d.innerHTML = 'Incorrect Master Password';\r

  \  }\r

  }"
bw_master_password_renew: "function bw_master_password_renew() {\r

  \  let [inp1, inp2] = [document.getElementById('inputPassword'),
  document.getElementById('inputPassword2')];\r

  \  let pw = inp1.value;\r

  \  let pw2 = inp2.value;\r

  \  let letters = toLetters(pw);\r

  \  let minlen = 8;\r

  \  let correct = false;\r

  \  let d = mBy('dError');\r

  \  if (pw.length < minlen) {\r

  \    d.innerHTML = `password needs to be at least ${minlen} long!`;\r

  \  } else if (!letters.find(x => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.includes(x)))
  {\r

  \    d.innerHTML = 'password needs to contain at least 1 uppercase
  letter!';\r

  \  } else if (!letters.find(x => '0123456789'.includes(x))) {\r

  \    d.innerHTML = 'password needs to contain at least 1 digit!';\r

  \  } else if (isAlphaNum(pw)) {\r

  \    d.innerHTML = 'password needs to contain at least 1 special symbol!';\r

  \  } else if (pw !== pw2) {\r

  \    d.innerHTML = 'passwords do not match';\r

  \  } else correct = true;\r

  \  if (correct) {\r

  \    console.log('new password has been set!', pw);\r

  \    S.master_password = pw;\r

  \    boa_save();\r

  \    hide('dPopup');\r

  \    show_eval_message(true, `Password has been set to ${pw}`); DA.challenge
  = DA.name = null;\r

  \  } else {\r

  \    inp1.value = inp2.value = '';\r

  \    inp1.focus();\r

  \  }\r

  }"
bw_set_new_password_popup: "function bw_set_new_password_popup() {\r

  \  let w = 200;\r

  \  let html = `\r

  \    <div id=\"dBw\" class=\"mystyle\"
  style=\"background:silver;padding:12px\">\r

  \    <h2 style=\"text-align:center\">Set New Master Password</h2>\r

  \    <div id=\"dBWLogin\" style=\"text-align:right\">\r

  \        <form action=\"javascript:bw_master_password_renew()\"
  id=\"fBitwarden\">\r

  \          <label for=\"inputPassword\">New Password:</label>\r

  \          <input style=\"width:${w}px\" type=\"password\"
  id=\"inputPassword\" placeholder=\"\"
  onkeydown=\"focusNextSiblingOrSubmitOnEnter(event,'inputPassword2')\" />\r

  \          <br><br><label for=\"inputPassword2\">Repeat Password:</label>\r

  \          <input style=\"width:${w}px\" type=\"password\"
  id=\"inputPassword2\" placeholder=\"\"
  onkeydown=\"focusNextSiblingOrSubmitOnEnter(event,'fBitwarden')\" />\r

  \          <br>\r

  \          <div id=\"dError\"
  style=\"color:yellow;background:red;text-align:center;margin-top:4px;padding:\
  0px 10px;box-sizing:border-box\"></div>\r

  \          <br><button onclick=\"bw_master_password_renew()\"
  >Submit</button>\r

  \        </form>\r

  \      </div>\r

  \    </div>\r

  \  `;\r

  \  let d = mCreateFrom(html);\r

  \  let dParent = mBy('dPopup');\r

  \  show(dParent);\r

  \  mClear(dParent);\r

  \  mStyle(dParent, { top: 50, right: 10 });\r

  \  mAppend(dParent, d);\r

  \  document.getElementById(\"inputPassword\").focus();\r

  }"
bw_symbol_pulse: function bw_symbol_pulse() { let elem = mBy('tbbw'); if
  (nundef(elem)) return; else { mPulse1(elem); } }
bw_widget_popup: "function bw_widget_popup(key = 'boa') {\r

  \  let dpop = mBy('dPopup');\r

  \  show(dpop); mClear(dpop)\r

  \  mStyle(dpop, { top: 50, right: 10, border: 'silver' });\r

  \  let prefix = key;\r

  \  let douter = mDiv(dpop, { wmin: 200, bg: 'white', fg: 'black', border:
  '1px single #ccc' }, 'dBw');\r

  \  let d2 = mDiv(douter, { padding: 0, h: 30 }, null, `<img width='100%'
  src='../rechnung/images/bwsearch.jpg'>`);\r

  \  let d = mDiv(douter, { padding: 0, hmax: 600, 'overflow-y': 'auto' });\r

  \  let dtb = mDiv(douter, { padding: 8 }); mFlexEvenly(dtb);\r

  \  let dibuttons = { tab: { top: 2, left: 0 }, vault: { top: 1, left: 3 },
  send: { top: 2, left: 3 }, generator: { top: 2, left: 1 }, settings: { top: 4,
  left: 2 } };\r

  \  for (const bname in dibuttons) {\r

  \    let path = `../rechnung/images/bw${bname}.jpg`;\r

  \    let db = mDiv(dtb, { w: 60 }); mCenterFlex(db);\r

  \    let img = mDiv(db, { h: 36, w: 36, bg: 'white', position: 'relative' },
  null, `<img
  style=\"position:absolute;top:${dibuttons[bname].top}px;left:${dibuttons[bnam\
  e].left}px\" src='${path}'>`);\r

  \    mLinebreak(db);\r

  \    let txt = mDiv(db, { fz: 12 }, null, capitalize(bname));\r

  \  }\r

  \  let d3 = mDiv(d, { bg: '#eee', fg: 'dimgray', padding: 8, matop: 8 },
  null, 'LOGINS');\r

  \  bw_list_entry(d, key);\r

  \  let d7 = mDiv(d, { bg: '#eee', fg: 'dimgray', padding: 7 }, null,
  'CARDS');\r

  \  let data = get_fake_bw_cards();\r

  \  let color_alt = '#F9F7F4';\r

  \  let i = 0;\r

  \  for (const k in data) {\r

  \    let dentry = bw_list_entry(d, k, 'cards');\r

  \  }\r

  }"
byEndNodeIds: "function byEndNodeIds(nid1, nid2) {\r

  }"
byId: "function byId(id) {\r

  \  return lookup(EID, [id]);\r

  }"
byPos: "function byPos(x, y, func) {\r

  \  let els = lookup(EC, [y]);\r

  \  if (els) {\r

  \    let lst = lookup(els, [x]);\r

  \    if (lst) {\r

  \      return func ? lst.filter(x => func(x)) : lst;\r

  \    }\r

  \  }\r

  }"
byPos1: "function byPos1(x, y, func) {\r

  \  let els = byPos(x, y, func);\r

  \  if (els && els.length > 0) return els[0];\r

  \  return null;\r

  }"
byType: "function byType(type, func) {\r

  \  els = lookup(ET, [type]);\r

  \  if (els) {\r

  \    return func ? els.filter(x => func(x)) : els;\r

  \  }\r

  }"
byType1: "function byType1(type, func) {\r

  \  let els = byType(type, func);\r

  \  if (els && els.length > 0) return els[0];\r

  \  return null;\r

  }"
C_draw: "function C_draw() {\r

  \  if (!C.changed) return;\r

  \  cClear(CV, CX);\r

  \  for (const type in C.items) { let f = get_func(type, 'draw'); for (const
  item of C.items[type]) { f(item); } }\r

  \  C.changed = false;\r

  }"
C_update: function C_update() { C.root.animated = true; get_func(C.name, 'add')(); }
cal_num_syms_adaptive: "function cal_num_syms_adaptive() {\r

  \  let [uplayer, fen] = [Z.uplayer, Z.fen];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.score = get_player_score(pl.name);\r

  \  let by_score = dict2list(fen.players);\r

  \  for (const pl of by_score) { pl.score = get_player_score(pl.name); }\r

  \  let avg_score = 0;\r

  \  for (const pl of by_score) { avg_score += pl.score; }\r

  \  avg_score /= by_score.length;\r

  \  let di = { nasi: -3, gul: -3, sheeba: -2, mimi: -1, annabel: 1 };\r

  \  let baseline = valf(di[uplayer], 0);\r

  \  let dn = baseline + Math.floor(pl.score - avg_score);\r

  \  let n = Z.options.num_symbols;\r

  \  let nfinal = Math.max(4, Math.min(14, dn + n));\r

  \  return nfinal;\r

  }"
calc_bid_minus_cards: "function calc_bid_minus_cards(fen, bid) {\r

  \  let di2 = { _: '_', three: 3, four: 4, five: 5, six: 6, seven: 7, eight:
  8, nine: 9, ten: 'T', jack: 'J', queen: 'Q', king: 'K', ace: 'A' };\r

  \  let di_ranks = aggregate_player_hands_by_rank(fen);\r

  \  let [brauch1, r1, brauch2, r2] = bid;\r

  \  [r1, r2] = [di2[r1], di2[r2]];\r

  \  if (brauch1 == '_') brauch1 = 0;\r

  \  if (brauch2 == '_') brauch2 = 0;\r

  \  let hab1 = valf(di_ranks[r1], 0);\r

  \  let hab2 = valf(di_ranks[r2], 0);\r

  \  let wildcards = valf(di_ranks['2'], 0);\r

  \  let diff1 = Math.max(0, brauch1 - hab1);\r

  \  let diff2 = Math.max(0, brauch2 - hab2);\r

  \  return diff1 + diff2 - wildcards;\r

  }"
calc_building_vps: "function calc_building_vps(bs) {\r

  \  let res = 0;\r

  \  res += bs.farm.length;\r

  \  res += bs.estate.length * 2;\r

  \  res += bs.chateau.length * 3;\r

  \  return res;\r

  }"
calc_ferro_highest_goal_achieved: "function calc_ferro_highest_goal_achieved(pl)
  {\r

  \  let jsorted = jsCopy(pl.journeys).sort((a, b) => b.length - a.length);\r

  \  let di = {\r

  \    '3': jsorted.length > 0 && is_group(jsorted[0]) && jsorted[0].length >=
  3,\r

  \    '33': jsorted.length > 1 && is_group(jsorted[0]) && jsorted[0].length
  >= 3\r

  \      && is_group(jsorted[1]) && jsorted[1].length >= 3,\r

  \    '4': jsorted.length > 0 && is_group(jsorted[0]) && jsorted[0].length >=
  4,\r

  \    '44': jsorted.length > 1 && is_group(jsorted[0]) && jsorted[0].length
  >= 4\r

  \      && is_group(jsorted[1]) && jsorted[1].length >= 4,\r

  \    '5': jsorted.length > 0 && is_group(jsorted[0]) && jsorted[0].length >=
  5,\r

  \    '55': jsorted.length > 1 && is_group(jsorted[0]) && jsorted[0].length
  >= 5\r

  \      && is_group(jsorted[1]) && jsorted[1].length >= 5,\r

  \    '7R': jsorted.length > 0 && is_sequence(jsorted[0]) &&
  jsorted[0].length >= 7,\r

  \  };\r

  \  for (const k of Z.fen.availableGoals) {\r

  \    if (pl.goals[k]) {\r

  \      console.log('player', pl.name, 'already achieved goal', k);\r

  \      continue;\r

  \    }\r

  \    let achieved = di[k];\r

  \    if (achieved) {\r

  \      return k;\r

  \    }\r

  \  }\r

  \  return null;\r

  }"
calc_ferro_score: "function calc_ferro_score(roundwinner) {\r

  \  let [round, plorder, stage, A, fen, uplayer] = [Z.round, Z.plorder,
  Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  assertion(roundwinner == uplayer, '_calc_ferro_score: roundwinner !=
  uplayer');\r

  \  for (const plname of plorder) {\r

  \    let pl = fen.players[plname];\r

  \    pl.newcards = [];\r

  \    if (nundef(pl.score)) pl.score = 0;\r

  \    if (uplayer == plname) pl.score -= round * 5;\r

  \    else pl.score += calc_hand_value(pl.hand);\r

  \  }\r

  }"
calc_fritz_score: "function calc_fritz_score() {\r

  \  let [round, plorder, stage, A, fen, uplayer] = [Z.round, Z.plorder,
  Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  for (const plname of fen.roundorder) {\r

  \    let pl = fen.players[plname];\r

  \    if (nundef(pl.score)) pl.score = 0;\r

  \    else pl.score += calc_hand_value(pl.hand.concat(pl.loosecards),
  fritz_get_card);\r

  \  }\r

  }"
calc_hand_value: "function calc_hand_value(hand, card_func = ferro_get_card) {\r

  \  let vals = hand.map(x => card_func(x).val);\r

  \  let sum = vals.reduce((a, b) => a + b, 0);\r

  \  return sum;\r

  }"
calc_hex_col_array: "function calc_hex_col_array(rows, cols) {\r

  \  let colarr = [];\r

  \  for (let i = 0; i < rows; i++) {\r

  \    colarr[i] = cols;\r

  \    if (i < (rows - 1) / 2) cols += 1;\r

  \    else cols -= 1;\r

  \  }\r

  \  return colarr;\r

  }"
calc_map_dims: "function calc_map_dims() {\r

  \  let d = M.dims = {\r

  \    pixels: get_map_dims_in_pixel(),\r

  \    meters: get_map_dims_in_meters(),\r

  \    latlng: get_map_dims_in_lat_lng(),\r

  \    zoom: M.map.getZoom(),\r

  \  };\r

  \  let ppm = M.dims.pixels_per_meter = [d.pixels[0] / d.meters[0],
  d.pixels[1] / d.meters[1]];\r

  \  M.dims.meters_per_pixel = [1 / ppm[0], 1 / ppm[1]];\r

  \  let ppll = M.dims.pixels_per_ll = [d.pixels[0] / d.latlng[1], d.pixels[1]
  / d.latlng[0]];\r

  \  M.dims.ll_per_pixel = [1 / ppll[0], 1 / ppll[1]];\r

  \  let mpll = M.dims.meters_per_ll = [d.meters[0] / d.latlng[1], d.meters[1]
  / d.latlng[0]];\r

  \  M.dims.ll_per_meters = [1 / mpll[1], 1 / mpll[0]];\r

  }"
calc_maxdepth: "function calc_maxdepth(maxnodes, rules) {\r

  \  let laus = rules.map(x => x.aus).join();\r

  \  let lwird = rules.map(x => x.wird).join();\r

  \  let naus = countAll(laus, 'ABF');\r

  \  let nwird = countAll(lwird, 'ABF');\r

  \  let ratio = nwird / naus;\r

  \  let pow = 2;\r

  \  while (Math.pow(ratio, pow) < maxnodes) pow++;\r

  \  return pow - 1;\r

  }"
calc_reasonable_max: "function calc_reasonable_max(fen) {\r

  \  let allcards = [];\r

  \  for (const plname in fen.players) {\r

  \    let pl = fen.players[plname];\r

  \    allcards = allcards.concat(pl.hand);\r

  \  }\r

  \  let ncards = allcards.length;\r

  \  let nmax = Math.floor(ncards / 13) + 1;\r

  \  return nmax;\r

  }"
calc_speed: "function calc_speed(oldgoal, newgoal) {\r

  \  let speed = Math.abs(newgoal - oldgoal) / 10;\r

  \  return speed;\r

  }"
calc_stall_value: function calc_stall_value(fen, plname) { let st =
  fen.players[plname].stall; if (isEmpty(st)) return 0; else return
  arrSum(st.map(x => ari_get_card(x).val)); }
calc_syms: "function calc_syms(numSyms) {\r

  \  let n = numSyms, rows, realrows, colarr;\r

  \  if (n == 3) { rows = 2; realrows = 1; colarr = [1, 2]; }\r

  \  else if (n == 4) { rows = 2; realrows = 2; colarr = [2, 2]; }\r

  \  else if (n == 5) { rows = 3; realrows = 3; colarr = [1, 3, 1]; }\r

  \  else if (n == 6) { rows = 3.3; realrows = 3; colarr = [2, 3, 1]; }\r

  \  else if (n == 7) { rows = 3; realrows = 3; colarr = [2, 3, 2]; }\r

  \  else if (n == 8) { rows = 3.8; realrows = 4; colarr = [1, 3, 3, 1]; }\r

  \  else if (n == 9) { rows = 4; realrows = 4; colarr = [2, 3, 3, 1]; }\r

  \  else if (n == 10) { rows = 4; realrows = 4; colarr = [2, 3, 3, 2]; }\r

  \  else if (n == 11) { rows = 4.5; realrows = 4; colarr = [2, 3, 4, 2]; }\r

  \  else if (n == 12) { rows = 5; realrows = 5; colarr = [1, 3, 4, 3, 1]; }\r

  \  else if (n == 13) { rows = 5; realrows = 5; colarr = [2, 3, 4, 3, 1]; }\r

  \  else if (n == 14) { rows = 5; realrows = 5; colarr = [2, 3, 4, 3, 2]; }\r

  \  else if (n == 15) { rows = 5.5; realrows = 5; colarr = [2, 3, 5, 3, 2];
  }\r

  \  else if (n == 16) { rows = 5.5; realrows = 5; colarr = [2, 3, 5, 4, 2];
  }\r

  \  else if (n == 17) { rows = 5.5; realrows = 5; colarr = [2, 4, 5, 4, 2];
  }\r

  \  else if (n == 18) { rows = 5.8; realrows = 5; colarr = [2, 4, 5, 4, 3];
  }\r

  \  return [rows, realrows, colarr];\r

  }"
calcAddressWithin: "function calcAddressWithin(o, addr, R) {\r

  \  if (!o) return addr;\r

  \  if (isLiteral(addr)) {\r

  \    if (isString(addr)) {\r

  \      if (addr[0] != '.') return addr;\r

  \      let props = addr.split('.').slice(1);\r

  \      if (props.length == 1 && isEmpty(props[0])) {\r

  \        console.log('ERROR!!!!!!!! sollte abgefangen werden!!!! props
  empty!')\r

  \        return o;\r

  \      } else if (props.length == 1) {\r

  \        return { key: props[0], obj: o };\r

  \      }\r

  \      else {\r

  \        let key = arrLast(props);\r

  \        let len = props.length;\r

  \        let props1 = props.slice(0, len - 1);\r

  \        return { key: key, obj: dPP(o, props1, R) };\r

  \      }\r

  \    } else {\r

  \      return addr;\r

  \    }\r

  \  }\r

  \  else if (isDict(addr)) {\r

  \    let content = {};\r

  \    for (const k in addr) {\r

  \      let c = calcAddressWithin(o, addr[k], R);\r

  \      if (c) content[k] = c;\r

  \    }\r

  \    return content;\r

  \  } else if (isList(addr)) {\r

  \    let content = addr.map(x => calcAddressWithin(o, x, R));\r

  \    return content;\r

  \  }\r

  \  return null;\r

  }"
calcAristoHandValue: "function calcAristoHandValue(cards) {\r

  \  let ranks = cards.map(x => x % 13);\r

  \  let total = 0;\r

  \  for (const rank of ranks) { total += Math.min(10, rank + 1); }\r

  \  return total;\r

  }"
calcBoardDimensions: "function calcBoardDimensions(nuiBoard, R) {\r

  \  let boardInfo = nuiBoard.bi.board.info;\r

  \  let bParams = nuiBoard.params;\r

  \  let fSpacing = bParams.field_spacing;\r

  \  if (nundef(fSpacing)) nuiBoard.params.field_spacing = fSpacing = 60;\r

  \  let margin = isdef(bParams.padding) ? bParams.padding : 0;\r

  \  let gap = fSpacing - nuiBoard.params.sizes.f;\r

  \  let [fw, fh] = [fSpacing / boardInfo.wdef, fSpacing / boardInfo.hdef];\r

  \  let cornerSize = isEmpty(nuiBoard.bi.corners) ? 0 :
  isdef(bParams.corners) ? bParams.corners.size : 15;\r

  \  let [wBoard, hBoard] = [fw * boardInfo.w + cornerSize, fh * boardInfo.h +
  cornerSize];\r

  \  let [wTotal, hTotal] = [wBoard + 2 * margin, hBoard + 2 * margin];\r

  \  nuiBoard.wTotal = wTotal;\r

  \  nuiBoard.hTotal = hTotal;\r

  \  nuiBoard.wBoard = wBoard;\r

  \  nuiBoard.hBoard = hBoard;\r

  \  nuiBoard.fSpacing = fSpacing;\r

  \  nuiBoard.fw = fw;\r

  \  nuiBoard.fh = fh;\r

  \  nuiBoard.gap = gap;\r

  \  nuiBoard.fSize = fSpacing - gap;\r

  }"
calcBoardDimensionsX: "function calcBoardDimensionsX(nuiBoard, R) {\r

  \  let boardInfo = nuiBoard.bi.board.info;\r

  \  let bParams = nuiBoard.params;\r

  \  let fSpacing = bParams.field_spacing;\r

  \  if (nundef(fSpacing)) nuiBoard.params.field_spacing = fSpacing = 60;\r

  \  let margin = isdef(bParams.padding) ? bParams.padding : 0;\r

  \  let gap = fSpacing - nuiBoard.params.sizes.f;\r

  \  let [fw, fh] = [fSpacing / boardInfo.wdef, fSpacing / boardInfo.hdef];\r

  \  let cornerSize = isEmpty(nuiBoard.bi.corners) ? 0 :
  nuiBoard.params.sizes.c;\r

  \  let [wBoard, hBoard] = [fw * boardInfo.w + cornerSize, fh * boardInfo.h +
  cornerSize];\r

  \  let [wTotal, hTotal] = [wBoard + 2 * margin, hBoard + 2 * margin];\r

  \  nuiBoard.wTotal = wTotal;\r

  \  nuiBoard.hTotal = hTotal;\r

  \  nuiBoard.wBoard = wBoard;\r

  \  nuiBoard.hBoard = hBoard;\r

  \  nuiBoard.fSpacing = fSpacing;\r

  \  nuiBoard.fw = fw;\r

  \  nuiBoard.fh = fh;\r

  \  nuiBoard.gap = gap;\r

  \  nuiBoard.fSize = fSpacing - gap;\r

  }"
calcContent_dep: "function calcContent_dep(oid, o, path) {\r

  \  if (isString(path)) {\r

  \    if (path[0] != '.') return path;\r

  \    let props = path.split('.').slice(1);\r

  \    let content = isEmpty(props) ? o.obj_type : lookup(o, props);\r

  \    return content;\r

  \  } else if (isDict(path)) {\r

  \    let content = {};\r

  \    for (const k in path) {\r

  \      let c = calcContent_dep(oid, o, path[k]);\r

  \      if (c) content[k] = c;\r

  \    }\r

  \    return content;\r

  \  }\r

  \  return null;\r

  }"
calcContentFromData: "function calcContentFromData(oid, o, data, R,
  default_data) {\r

  \  if (!o) return data;\r

  \  if (isLiteral(data)) {\r

  \    if (isString(data)) {\r

  \      if (data[0] != '.') return data;\r

  \      let props = data.split('.').slice(1);\r

  \      if (props.length == 1 && isEmpty(props[0])) return o;\r

  \      else {\r

  \        let res = dPP1(o, props, R);\r

  \        if (isdef(res)) return res;\r

  \      }\r

  \    } else {\r

  \      return data;\r

  \    }\r

  \  }\r

  \  else if (isDict(data)) {\r

  \    let content = {};\r

  \    for (const k in data) {\r

  \      let c = calcContentFromData(oid, o, data[k], R);\r

  \      if (isdef(c)) content[k] = c;\r

  \    }\r

  \    return content;\r

  \  } else if (isList(data)) {\r

  \    let content = data.map(x => calcContentFromData(oid, o, x, R));\r

  \    return content;\r

  \  }\r

  \  if (isdef(default_data)) {\r

  \    let finalRes = calcContentFromData(oid, o, default_data, R);\r

  \    return finalRes;\r

  \  } else return null;\r

  }"
calcCycles: "function calcCycles(R) {\r

  \  let oids = jsCopy(R.locOids);\r

  \  let cycles = R.partitions = {};\r

  \  let oid2partition = R.oid2partition = {};\r

  \  let cid;\r

  \  while (!isEmpty(oids)) {\r

  \    let oid = oids[0];\r

  \    cid = getUID();\r

  \    let c = cycles[cid] = { isCycle: false, oids: [] };\r

  \    while (true) {\r

  \      if (c.oids.includes(oid)) {\r

  \        c.isCycle = true;\r

  \        break;\r

  \      }\r

  \      if (isdef(oid2partition[oid])) {\r

  \        let cid2 = oid2partition[oid];\r

  \        let c2 = cycles[cid2];\r

  \        c.oids.map(x => oid2partition[x] = cid2);\r

  \        c2.oids = c.oids.concat(c2.oids);\r

  \        c = c2;\r

  \        delete cycles[cid];\r

  \        break;\r

  \      } else {\r

  \        c.oids.push(oid);\r

  \        oid2partition[oid] = cid;\r

  \      }\r

  \      removeInPlace(oids, oid);\r

  \      let o = R.getO(oid);\r

  \      if (nundef(o.loc)) break;\r

  \      oid = o.loc;\r

  \    }\r

  \  }\r

  \  for (const k in R.partitions) {\r

  \    let c = R.partitions[k];\r

  \    c.oids.reverse();\r

  \    let removed;\r

  \    if (!c.isCycle) { removed = c.oids.shift(); }\r

  \    for (const oid of c.oids) {\r

  \      if (nundef(R.getO(oid)).loc) {\r

  \        alert('SORT CYCLES SAFETY CHECK FAILED! no loc in ' + oid);\r

  \      }\r

  \    }\r

  \    if (isdef(removed && isdef(R.getO(removed)).loc)) {\r

  \      alert('SORT CYCLES SAFETY CHECK FAILED! removed has loc' +
  removed);\r

  \    }\r

  \  }\r

  }"
calcDimsAndSize: "function calcDimsAndSize(cols, lines, dParent, wmax, hmax) {\r

  \  let ww, wh, hpercent, wpercent;\r

  \  if (isdef(dParent)) {\r

  \    let b = getBounds(dParent);\r

  \    ww = b.width;\r

  \    wh = b.height;\r

  \    hpercent = .9;\r

  \    wpercent = .9;\r

  \  } else if (isdef(wmax) && isdef(hmax)) {\r

  \    ww = wmax;\r

  \    wh = hmax;\r

  \    hpercent = .6;\r

  \    wpercent = .6;\r

  \  } else {\r

  \    ww = window.innerWidth;\r

  \    wh = window.innerHeight;\r

  \    hpercent = .56;\r

  \    wpercent = .64;\r

  \  }\r

  \  let sz, picsPerLine;\r

  \  if (lines > 1) {\r

  \    let hpic = wh * hpercent / lines;\r

  \    let wpic = ww * wpercent / cols;\r

  \    sz = Math.min(hpic, wpic);\r

  \    picsPerLine = cols;\r

  \  } else {\r

  \    let dims = calcRowsColsX(cols);\r

  \    let hpic = wh * hpercent / dims.rows;\r

  \    let wpic = ww * wpercent / dims.cols;\r

  \    sz = Math.min(hpic, wpic);\r

  \    picsPerLine = dims.cols;\r

  \  }\r

  \  pictureSize = Math.max(50, Math.min(sz, 200));\r

  \  return [pictureSize, picsPerLine];\r

  }"
calcFieldGaps: "function calcFieldGaps(sz) {\r

  \  sz = Number(sz);\r

  \  let s = G.settings;\r

  \  s.wGap = s.dxCenter - sz;\r

  \  s.hGap = s.dyCenter - sz;\r

  \  G.clientBoard = applySettings(G.clientBoard, s);\r

  }"
calcIdUiParent: "function calcIdUiParent(n, R, uidParent) {\r

  \  if (uidParent && isBoardMember(uidParent, R)) {\r

  \    let divParent = findAncestorElemOfType(mBy(uidParent), 'div');\r

  \    n.idUiParent = divParent.id;\r

  \  } else {\r

  \    n.idUiParent = uidParent;\r

  \  }\r

  }"
calcLayoutParameters: "function calcLayoutParameters(s, b, scale = 1) {\r

  \  let [layout, horDist, vertDist, rows, cols] = [s.boardLayout, s.dxCenter,
  s.dyCenter, s.rows, s.cols];\r

  \  let isHexLayout = startsWith(layout, 'hex');\r

  \  let hline = isHexLayout ? vertDist * .75 : vertDist;\r

  \  if (nundef(rows) || layout == 'circle') rows = Math.floor(s.hFieldArea /
  hline);\r

  \  if (nundef(cols) || layout == 'circle') cols = Math.floor(s.wFieldArea /
  horDist)\r

  \  let [centers, wNeeded, hNeeded] = getCentersFromRowsCols(layout, rows,
  cols, horDist, vertDist);\r

  \  s.nFields = centers.length;\r

  \  [b.nFields, b.wNeeded, b.hNeeded, b.centers] = [s.nFields, wNeeded,
  hNeeded, centers];\r

  \  [b.layout, b.rows, b.cols, b.dxCenter, b.dyCenter, b.hline] =
  [s.boardLayout, rows, cols, horDist, vertDist, hline];\r

  \  if (scale != 1) {\r

  \    for (const c of centers) {\r

  \      c.x = c.x * scale;\r

  \      c.y = c.y * scale;\r

  \    }\r

  \    b.wNeeded *= scale;\r

  \    b.hNeeded *= scale;\r

  \    b.dxCenter *= scale;\r

  \    b.dyCenter *= scale;\r

  \    b.hline *= scale;\r

  \  }\r

  \  return s.nFields;\r

  }"
calcMainVisualPosCenterInGameArea: "function
  calcMainVisualPosCenterInGameArea(mobj) {\r

  \  let area = UIS['a_d_game'];\r

  \  let parent = UIS[mobj.idParent];\r

  \  if (nundef(parent.x)) parent = UIS[parent.idParent];\r

  \  let offX = 0;\r

  \  let offY = 0;\r

  \  if (mobj.cat == 'g') { offX = parent.w / 2; offY = parent.h / 2; }\r

  \  let x = offX + parent.x + mobj.x;\r

  \  let y = offY + parent.y + mobj.y;\r

  \  return { x: x, y: y };\r

  }"
calcMemorizingTime: "function calcMemorizingTime(numItems, randomGoal = true)
  {\r

  \  let ldep = Math.max(6, randomGoal ? numItems * 2 : numItems);\r

  \  return ldep;\r

  }"
calcNFields: "function calcNFields(s) {\r

  \  let [layout, wCell, hCell, rows, cols] = [s.boardLayout, s.dxCenter,
  s.dyCenter, s.rows, s.cols];\r

  \  let boardSize = { w: s.wFieldArea, h: s.hFieldArea };\r

  \  let [w, h] = [boardSize.w, boardSize.h];\r

  \  if (layout == 'circle') {\r

  \    let hline = layout == 'circle' ? hCell * 1.2 : layout == 'hex' ? hCell
  * .78 : hCell;\r

  \    rows = Math.floor(h / hline);\r

  \    cols = Math.floor(w / wCell);\r

  \  }\r

  \  let n;\r

  \  if (layout == 'hex1') {\r

  \    let colarr = _calc_hex_col_array(rows, cols);\r

  \    n = arrSum(colarr);\r

  \  } else if (layout == 'quad') {\r

  \    n = rows * cols;\r

  \  } else if (layout == 'hex') {\r

  \    console.log('rows', rows, 'cols', cols)\r

  \    let [cs, wn, hn] = hexCenters(rows, cols, wCell, hCell);\r

  \    n = cs.length;\r

  \  } else if (layout == 'circle') {\r

  \    let [cs, wn, hn] = circleCenters(rows, cols, wCell, hCell);\r

  \    n = cs.length;\r

  \  }\r

  \  return n;\r

  }"
calcNumRowsFitting: "function calcNumRowsFitting(dParent, maxHeight, html) {\r

  \  let sz = getTextSize(html, dParent);\r

  \  return maxHeight / (sz.h + 2);\r

  }"
calcParentContentYOffsetAndWidth: "function calcParentContentYOffsetAndWidth(n,
  parentPadding) {\r

  \  let y0 = 0;\r

  \  let wTitle = 0;\r

  \  if (isdef(n.content)) {\r

  \    let uiParent = n.ui;\r

  \    let cont = uiParent.firstChild;\r

  \    let b = getBounds(cont, true);\r

  \    wTitle = b.width;\r

  \    if (isdef(n.params.padding)) wTitle += 2 * n.params.padding;\r

  \    y0 = parentPadding + b.top + b.height + parentPadding;\r

  \  } else y0 = parentPadding;\r

  \  return [y0, wTitle];\r

  }"
calcRays: "function calcRays(n, gParent, R) {\r

  \  if (n.params.dray) {\r

  \    let ui = n.ui;\r

  \    let buid = n.uidParent;\r

  \    let b = R.rNodes[buid];\r

  \    let bui = R.UIS[buid];\r

  \    let size = 20;\r

  \    let fsp = bui.params.field_spacing;\r

  \    let info = n.info;\r

  \    let x = info.x * fsp;\r

  \    let y = info.y * fsp;\r

  \    let w = size;\r

  \    let h = size;\r

  \    let D = distance(0, 0, x, y);\r

  \    let p = n.params.dray;\r

  \    let rel = p.rel;\r

  \    let nanc = n;\r

  \    if (rel == 'ancestor') {\r

  \      console.log('haaaaaaaaaaaaaaaaalllllllllllllllooooooooooooo')\r

  \      while (true) {\r

  \        nanc = R.rNodes[nanc.uidParent];\r

  \        if (nundef(nanc) || nundef(nanc.oid)) { nanc = null; break; }\r

  \        let o = R.getO(nanc.oid);\r

  \        let conds = p.cond;\r

  \        let tf = evalConds(o, conds);\r

  \        if (tf) { break; }\r

  \      }\r

  \    }\r

  \    let by = p.by;\r

  \    nby = isNumber(by) ? by : firstNumber(by);\r

  \    if (isString(by) && by[by.length - 1] == '%') {\r

  \      nby = nby * size / 100;\r

  \    }\r

  \    let elem = isdef(nanc) ? nanc : rel == 'parent' ? gParent : ui;\r

  \    let norm = nby / D;\r

  \    let xdisp = x * norm;\r

  \    let ydisp = y * norm;\r

  \    let txt = n.label.texts;\r

  \    let el = n.label.texts[0].ui;\r

  \    el.setAttribute('x', xdisp);\r

  \    el.setAttribute('y', ydisp);\r

  \    if (isdef(n.label.textBackground)) {\r

  \      if (n.params.bgText) {\r

  \        let tb = n.label.textBackground;\r

  \        let tbb = getBounds(tb);\r

  \        let origX = tb.getAttribute('x');\r

  \        let newX = origX + xdisp;\r

  \        tb.setAttribute('x', xdisp - tbb.width / 2);\r

  \        let origY = tb.getAttribute('y');\r

  \        let newY = origY + ydisp;\r

  \        tb.setAttribute('y', ydisp - tbb.height * 4 / 5);\r

  \      } else {\r

  \        n.label.textBackground.remove();\r

  \        delete n.label.textBackground;\r

  \      }\r

  \    }\r

  \  }\r

  }"
calcRowsCols: "function calcRowsCols(num, rows, cols) {\r

  \  let shape = 'rect';\r

  \  if (isdef(rows) && isdef(cols)) {\r

  \  } else if (isdef(rows)) {\r

  \    cols = Math.ceil(num / rows);\r

  \  } else if (isdef(cols)) {\r

  \    rows = Math.ceil(num / cols);\r

  \  } else if (num == 2) {\r

  \    rows = 1; cols = 2;\r

  \  } else if ([4, 6, 9, 12, 16, 20, 25, 30, 36, 42, 29, 56,
  64].includes(num)) {\r

  \    rows = Math.floor(Math.sqrt(num));\r

  \    cols = Math.ceil(Math.sqrt(num));\r

  \  } else if ([3, 8, 15, 24, 35, 48, 63].includes(num)) {\r

  \    let lower = Math.floor(Math.sqrt(num));\r

  \    console.assert(num == lower * (lower + 2), 'RECHNUNG FALSCH IN
  calcRowsCols');\r

  \    rows = lower;\r

  \    cols = lower + 2;\r

  \  } else if (num > 1 && num < 10) {\r

  \    shape = 'circle';\r

  \  } else if (num > 16 && 0 == num % 4) {\r

  \    rows = 4; cols = num / 4;\r

  \  } else if (num > 9 && 0 == num % 3) {\r

  \    rows = 3; cols = num / 3;\r

  \  } else if (0 == num % 2) {\r

  \    rows = 2; cols = num / 2;\r

  \  } else {\r

  \    rows = 1; cols = num;\r

  \  }\r

  \  return { rows: rows, cols: cols, recommendedShape: shape };\r

  }"
calcRowsColsSizeAbWo: "function calcRowsColsSizeAbWo(n, wmax, hmax, showLabels,
  wimax = 200, himax = 200, fw = 1, fh = 1) {\r

  \  let rows = n > 35 ? 6 : n > 28 ? 5 : n > 24 && !showLabels || n > 21 ? 4
  : n > 8 ? 3 : n > 3 ? 2 : 1;\r

  \  let cols = Math.ceil(n / rows);\r

  \  return calcSizeAbWo(n, rows, cols, wmax, hmax, wimax, himax, fw, fh);\r

  }"
calcRowsColsX: "function calcRowsColsX(num) {\r

  \  const table = {\r

  \    2: { rows: 1, cols: 2 },\r

  \    5: { rows: 2, cols: 3 },\r

  \    7: { rows: 2, cols: 4 },\r

  \    11: { rows: 3, cols: 4 },\r

  \  };\r

  \  if (isdef(table[num])) return table[num]; else return
  calcRowsCols(num);\r

  }"
calcScreenSizeNeeded: "function calcScreenSizeNeeded() {\r

  \  if (nundef(bodyZoom)) bodyZoom = 1.0;\r

  \  let wAreas = ['a_d_actions', 'a_d_game', 'a_d_player', 'a_d_log'];\r

  \  let wTotal = 0;\r

  \  let wTotal2 = 0;\r

  \  for (const a of wAreas) {\r

  \    let mobj = UIS[a];\r

  \    let b = getBounds(mobj.elem);\r

  \    let wIst = Math.round(b.width / bodyZoom);\r

  \    wTotal2 += wIst;\r

  \  }\r

  \  let hAreas = ['a_d_header', 'a_d_status', 'a_d_game', 'a_d_buttons'];\r

  \  let hTotal = 0;\r

  \  let hTotal2 = 0;\r

  \  for (const a of hAreas) {\r

  \    let mobj = UIS[a];\r

  \    let hSoll = mobj.h;\r

  \    hTotal += hSoll;\r

  \    let b = getBounds(mobj.elem);\r

  \    let hIst = Math.round(b.height);\r

  \    hTotal2 += hIst;\r

  \  }\r

  \  return (window.innerWidth * 100) / wTotal2;\r

  }"
calcSizeAbWo: "function calcSizeAbWo(n, rows, cols, wmax, hmax, wimax = 200,
  himax = 200, fw = 1, fh = 1) {\r

  \  if (nundef(cols)) cols = Math.ceil(n / rows); else if (nundef(rows)) rows
  = Math.ceil(n / cols);\r

  \  let wi = wmax * fw / cols;\r

  \  let hi = hmax * fh / rows;\r

  \  wi = Math.min(wi, wimax);\r

  \  hi = Math.min(hi, himax);\r

  \  return [wi, hi, rows, cols];\r

  }"
calcSizeMeasured: "function calcSizeMeasured(n, R) {\r

  \  if (isdef(n.info)) {\r

  \    return { w: n.info.size, h: n.info.size };\r

  \  } else if (n.type == 'grid') {\r

  \    calcBoardDimensions(n, R);\r

  \    return { w: n.wTotal, h: n.hTotal };\r

  \  } else if (n.type == 'hand' || n.ui.style.display == 'flex' &&
  isdef(n.children)) {\r

  \    return { w: 0, h: 0 };\r

  \  } else {\r

  \    let b = getBounds(n.ui, true);\r

  \    return { w: b.width, h: b.height };\r

  \  }\r

  }"
calcSnailPositions: "function calcSnailPositions(x, y, d, n) {\r

  \  let p = { x: x, y: y };\r

  \  let res = [p];\r

  \  let step = 1;\r

  \  let k = 1;\r

  \  while (true) {\r

  \    for (i = 0; i < step; i++) {\r

  \      if (k < n) {\r

  \        p = mup(null, p, d);\r

  \        res.push(p);\r

  \        k += 1;\r

  \      } else return res;\r

  \    }\r

  \    for (i = 0; i < step; i++) {\r

  \      if (k < n) {\r

  \        p = mri(null, p, d);\r

  \        res.push(p);\r

  \        k += 1;\r

  \      } else return res;\r

  \    }\r

  \    step += 1;\r

  \    for (i = 0; i < step; i++) {\r

  \      if (k < n) {\r

  \        p = mdo(null, p, d);\r

  \        res.push(p);\r

  \        k += 1;\r

  \      } else return res;\r

  \    }\r

  \    for (i = 0; i < step; i++) {\r

  \      if (k < n) {\r

  \        p = mle(null, p, d);\r

  \        res.push(p);\r

  \        k += 1;\r

  \      } else return res;\r

  \    }\r

  \    step += 1;\r

  \  }\r

  }"
calcStallOrder: "function calcStallOrder(players) {\r

  \  for (const pl of players) {\r

  \    pl.stallValue = calcAristoHandValue(pl.stall);\r

  \  }\r

  \  let stallOrder = players.map(x => ({ stallValue: x.stallValue, index:
  x.index }));\r

  \  let plSorted = sortBy(stallOrder, 'stallValue').map(x => x.index);\r

  \  return plSorted;\r

  }"
calcTotalDims: "function calcTotalDims(n, uids, R) {\r

  \  let hMax = 0;\r

  \  let margin = isdef(n.params.margin) ? n.params.margin : 0;\r

  \  let wTotal = margin;\r

  \  for (const ch of uids) {\r

  \    let n1 = R.uiNodes[ch];\r

  \    let w = n1.size.w;\r

  \    let h = n1.size.h;\r

  \    hMax = Math.max(hMax, h);\r

  \    wTotal += w + margin;\r

  \  }\r

  \  return { w: wTotal, h: hMax + 2 * margin, margin: margin };\r

  }"
calculateDaysBetweenDates: "function calculateDaysBetweenDates(begin, end) {\r

  \  var oneDay = 24 * 60 * 60 * 1000;\r

  \  var firstDate = new Date(begin);\r

  \  var secondDate = new Date(end);\r

  \  var diffDays = Math.round(Math.abs((firstDate.getTime() -
  secondDate.getTime()) / (oneDay)));\r

  \  return diffDays;\r

  }"
calculateDims: "function calculateDims(n, sz = 60, minRows = 1) {\r

  \  var rows = minRows;\r

  \  var cols = Math.ceil(n / rows);\r

  \  var gap = 10;\r

  \  var padding = 20;\r

  \  let w = 9999999;\r

  \  testHelpers('calculateDims with:', rows, cols);\r

  \  let rOld = 0;\r

  \  while (true) {\r

  \    rOld = rows;\r

  \    for (var i = Math.max(2, rows); i < n / 2; i++) {\r

  \      if (n % i == 0) {\r

  \        rows = i;\r

  \        cols = n / i;\r

  \        break;\r

  \      }\r

  \    }\r

  \    w = padding * 2 - gap + (sz + gap) * cols;\r

  \    if (w > window.innerWidth) {\r

  \      if (rows == rOld) {\r

  \        rows += 1;\r

  \        cols = Math.ceil(n / rows);\r

  \      } else if (gap > 1) gap -= 1;\r

  \      else if (padding > 1) padding -= 2;\r

  \      else {\r

  \        minRows += 1;\r

  \        gap = 6;\r

  \        padding = 10;\r

  \      }\r

  \    } else break;\r

  \    if (rows == rOld) break;\r

  \  }\r

  \  return { rows: rows, cols: cols, gap: gap, padding: padding, width: w
  };\r

  }"
calculateTopLevelGElement: "function calculateTopLevelGElement(el) {\r

  \  while (el && el.parentNode) {\r

  \    let t = getTypeOf(el);\r

  \    let tParent = getTypeOf(el.parentNode);\r

  \    if (tParent == 'svg') break;\r

  \    el = el.parentNode;\r

  \  }\r

  \  return el;\r

  }"
call_answer: function call_answer(i) { call_func('a' + i); }
call_func: function call_func(name) { let f = window[name]; f(); }
call_question: function call_question(i) { call_func('q' + i); }
Camera: "function Camera(scene) {\r

  \  this.canvas = scene.canvas;\r

  \  this.context = this.canvas.getContext(\"2d\");\r

  \  this.cHeight = parseInt(this.canvas.height);\r

  \  this.cWidth = parseInt(this.canvas.width);\r

  \  this.cameraOffsetX = 0;\r

  \  this.cameraOffsetY = 0;\r

  \  this.target = false;\r

  \  this.waitX = 0;\r

  \  this.waitY = 0;\r

  \  this.focalPointX = 0;\r

  \  this.focalPointY = 0;\r

  \  this.moveCamera = function (x, y) {\r

  \    this.cameraOffsetX += x;\r

  \    this.cameraOffsetY += y;\r

  \  }\r

  \  this.followSprite = function (sprite, waitX, waitY) {\r

  \    this.target = sprite;\r

  \    if (typeof waitX != \"undefined\") {\r

  \      this.waitX = waitX;\r

  \      this.waitY = waitY;\r

  \    }\r

  \  }\r

  \  this.update = function () {\r

  \    this.focalPointX = this.cameraOffsetX + this.cWidth / 2;\r

  \    this.focalPointY = this.cameraOffsetY + this.cHeight / 2;\r

  \    if (this.target && !this.checkFocusBounds()) {\r

  \      this.cameraOffsetX = this.target.x + (this.target.width / 2) -
  (this.cWidth / 2) + this.waitX;\r

  \      this.cameraOffsetY = this.target.y + (this.target.height / 2) -
  (this.cHeight / 2) + this.waitY;\r

  \    }\r

  \  }\r

  \  this.checkFocusBounds = function () {\r

  \    centerX = this.target.x + (this.target.width / 2);\r

  \    centerY = this.target.y + (this.target.height / 2);\r

  \    if (Math.abs(this.focalPointX - centerX) >= this.waitX) { return false;
  }\r

  \    if (Math.abs(this.focalPointY - centerY) >= this.waitY) { return false;
  }\r

  \    else { return true; }\r

  \  }\r

  }"
canAct: function canAct() { return (aiActivated || uiActivated) && !auxOpen; }
canAIAct: function canAIAct() { return aiActivated && !auxOpen; }
cancel_game: function cancel_game() { iClear('dMenu'); }
cancelDD: "function cancelDD() {\r

  \  DragElem.remove();\r

  \  DragElem = DragSource = DragSourceItem = DropZoneItem = null;\r

  }"
canHumanAct: function canHumanAct() { return uiActivated && !auxOpen; }
cap_each_word: "function cap_each_word(s) {\r

  \  let arr = s.split(' ');\r

  \  let res = '';\r

  \  for (const a of arr) { res += capitalize(a) + ' '; }\r

  \  return res.slice(0, -1);\r

  }"
capitalize: "function capitalize(s) {\r

  \  if (typeof s !== 'string') return '';\r

  \  return s.charAt(0).toUpperCase() + s.slice(1);\r

  }"
capitals_in_red: "function capitals_in_red(feature) {\r

  \  console.log('feature data', feature.data);\r

  \  let type = lookup(feature, ['data', 'type']);\r

  \  console.log('city', lookup(feature, ['data', 'name']), ':', type)\r

  \  return type == 'capital' ? 'red' : 'yellow';\r

  }"
CAPTURED: function CAPTURED(m) { return (((m) >> 14) & 0xF); }
card123: "function card123(oCard, w, h) {\r

  \  if (lookup(SPEC, ['typeMappings', 'card'])) {\r

  \    for (const k in SPEC.typeMappings.card) {\r

  \      oCard[k] = oCard[SPEC.typeMappings.card[k]];\r

  \    }\r

  \  }\r

  \  let el = cardFace(oCard, w, h);\r

  \  return el;\r

  }"
card52: "function card52(irankey, suit, w, h) {\r

  \  //#region set rank and suit from inputs\r

  \  let rank = irankey;\r

  \  if (nundef(irankey) && nundef(suit)) {\r

  \    irankey = chooseRandom(Object.keys(c52));\r

  \    rank = irankey[5];\r

  \    suit = irankey[6];\r

  \  } else if (nundef(irankey)) {\r

  \    irankey = '2';\r

  \    suit = 'B';\r

  \  } else if (nundef(suit)) {\r

  \    if (isNumber(irankey)) irankey = getC52Key(iramkey);\r

  \    rank = irankey[5];\r

  \    suit = irankey[6];\r

  \  }\r

  \  console.log('rank', rank, 'suit', suit);\r

  \  if (rank == '10') rank = 'T';\r

  \  if (rank == '1') rank = 'A';\r

  \  if (nundef(suit)) suit = 'H'; else suit = suit[0].toUpperCase();\r

  \  //#endregion\r

  \  //#region load svg for card_[rank][suit] (eg. card_2H)\r

  \  let cardKey = 'card_' + rank + suit;\r

  \  let svgCode = c52[cardKey];\r

  \  svgCode = '<div>' + svgCode + '</div>';\r

  \  let el = createElementFromHTML(svgCode);\r

  \  if (isdef(h) || isdef(w)) { mSize(el, w, h); }\r

  \  //#endregion\r

  \  return { rank: rank, suit: suit, key: cardKey, div: el };\r

  }"
cardContent: "function cardContent(card, { topLeft, topRight, bottomLeft,
  bottomRight, reverseBottom = false, title, footer, middle, text }) {\r

  \  let svg = card.firstChild;\r

  \  let div = card;\r

  \  card.style.setProperty('position', 'relative');\r

  \  card.style.setProperty('font-size', '3mm');\r

  \  topLeft = ['A', '2'];\r

  \  bottomRight = ['A', 2];\r

  \  middle = null;\r

  \  let gap = 2; let d;\r

  \  let fBL = reverseBottom ? posBLR : posBL;\r

  \  let fBR = reverseBottom ? posBRR : posBR;\r

  \  if (isdef(topLeft)) { d = mDiv(card); mGap(d, gap); posTL(d);
  asList(topLeft).map(x => mDiv(d).innerHTML = x); }\r

  \  if (isdef(topRight)) { d = mDiv(card); mGap(d, gap); posTR(d);
  asList(topRight).map(x => mDiv(d).innerHTML = x); }\r

  \  if (isdef(bottomLeft)) { d = mDiv(card); mGap(d, gap); fBL(d);
  asList(bottomLeft).map(x => mDiv(d).innerHTML = x); }\r

  \  if (isdef(bottomRight)) { d = mDiv(card); mGap(d, gap); fBR(d);
  asList(bottomRight).map(x => mDiv(d).innerHTML = x); }\r

  \  if (isdef(middle)) {\r

  \    d = mDiv(card); mSize(d, 50, 50, '%'); mFont(d, '7mm');\r

  \    let dContent = mDiv(d); dContent.innerHTML = middle; if (isdef(text))
  posCICT(dContent); else posCIC(dContent);\r

  \  }\r

  \  if (isdef(text)) {\r

  \    d = mDiv(card); mSize(d, 80, 50, '%'); mFont(d, '1.8mm');\r

  \    let lines = 4; if (isdef(middle)) { posCICB(d);
  d.appendChild(document.createElement('hr')); } else { posCIC(d); lines = 8;
  }\r

  \    let dContent = mDiv(d); dContent.innerHTML = text;
  dContent.classList.add('textEllipsis4Lines');
  dContent.style.setProperty('-webkit-line-clamp', lines);\r

  \  }\r

  }"
cardFace: "function cardFace({ cardKey, rank, suit, key } = {}, w, h) {\r

  \  let svgCode;\r

  \  if (isdef(cardKey)) {\r

  \    cardKey = 'card_' + cardKey;\r

  \    svgCode = isdef(c52[cardKey]) ? c52[cardKey] : testCards[cardKey];\r

  \    if (!svgCode) svgCode = vidCache.getRandom('c52');\r

  \  } else if (isdef(key)) {\r

  \    cardKey = key;\r

  \    svgCode = testCards[cardKey];\r

  \    if (!svgCode) svgCode = vidCache.getRandom('c52');\r

  \  } else {\r

  \    if (nundef(rank)) { rank = '2'; suit = 'B'; }\r

  \    if (rank == '10') rank = 'T';\r

  \    if (rank == '1') rank = 'A';\r

  \    if (nundef(suit)) suit = 'H';\r

  \    cardKey = 'card_' + rank + suit;\r

  \    svgCode = c52[cardKey];\r

  \  }\r

  \  svgCode = '<div>' + svgCode + '</div>';\r

  \  let el = createElementFromHTML(svgCode);\r

  \  if (isdef(h)) { mSize(el, w, h); }\r

  \  return el;\r

  }"
cardFromInfo: "function cardFromInfo(info, h, w, ov) {\r

  \  let svgCode = C52[info.c52key];\r

  \  svgCode = '<div>' + svgCode + '</div>';\r

  \  let el = mCreateFrom(svgCode);\r

  \  h = valf(h, valf(info.h, 100));\r

  \  w = valf(w, h * .7);\r

  \  mSize(el, w, h);\r

  \  let res = {};\r

  \  copyKeys(info, res);\r

  \  copyKeys({ w: w, h: h, faceUp: true, div: el }, res);\r

  \  if (isdef(ov)) res.ov = ov;\r

  \  return res;\r

  }"
cardGameTest01: "function cardGameTest01() {\r

  \  rAreas();\r

  }"
cardGameTest02: "function cardGameTest02() {\r

  \  setBackgroundColor(null, 'random');\r

  \  mStyle(dTable, { h: 400, bg: 'black', padding: 10 });\r

  \  let SPEC = { layout: ['T', 'H A'], showAreaNames: true };\r

  \  let s = '';\r

  \  let m = [];\r

  \  for (const line of SPEC.layout) {\r

  \    s += '\"' + line + '\" ';\r

  \    let letters = line.split(' ');\r

  \    let arr = [];\r

  \    for (const l of letters) { if (!isEmpty(l)) arr.push(l); }\r

  \    m.push(arr);\r

  \  }\r

  \  console.log('m', m, '\\ns', s); return;\r

  }"
cardGameTest03_OK: "function cardGameTest03_OK() {\r

  \  setBackgroundColor(null, 'random');\r

  \  mStyle(dTable, { h: 400, bg: 'black', padding: 10 });\r

  \  let dGrid = mDiv100(dTable, { display: 'inline-grid' });\r

  \  let layout = ['T', 'H A'];\r

  \  let x = createGridLayout(dGrid, layout);\r

  \  console.log('result', x);\r

  \  createAreas(dGrid, x, 'a');\r

  }"
cardGameTest04: "function cardGameTest04() {\r

  \  setBackgroundColor(null, 'random');\r

  \  let dGrid = mDiv(dTable, { bg: 'red', w: '80%', h: 400, padding: 10,
  display: 'inline-grid', rounding: 10 }, 'dGrid');\r

  \  let layout = ['T', 'H A'];\r

  \  let x = createGridLayout(dGrid, layout);\r

  \  console.log('result', x);\r

  \  createAreas(dGrid, x, 'dGrid');\r

  }"
cardGameTest05: "function cardGameTest05() {\r

  \  setBackgroundColor(null, 'random');\r

  \  let dGrid = mDiv(dTable, { gap: 10, bg: 'white', w: '80%', h: 400,
  padding: 10, display: 'inline-grid', rounding: 10 }, 'dGrid');\r

  \  let layout = ['T', 'H A'];\r

  \  let areaStyles = { bg: 'random', rounding: 6 };\r

  \  let contentStyles = { bg: 'dimgray', lowerRounding: 6 };\r

  \  let messageStyles = { bg: 'dimgray', fg: 'yellow' };\r

  \  let titleStyles = { family: 'AlgerianRegular', upperRounding: 6 };\r

  \  let areas = {\r

  \    T: { title: 'table', id: 'dTrick', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles },\r

  \    H: { title: 'YOU', id: 'dHuman', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles },\r

  \    A: { title: 'opponent', id: 'dAI', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles },\r

  \  };\r

  \  let x = createGridLayout(dGrid, layout);\r

  \  console.log('result', x);\r

  \  let items = [];\r

  \  for (const k in areas) {\r

  \    let item = areas[k];\r

  \    item.areaStyles['grid-area'] = k;\r

  \    let dCell = mTitledMessageDiv(item.title, dGrid, item.id,
  item.areaStyles, item.contentStyles, item.titleStyles, item.messageStyles)\r

  \    iRegister(item, item.id);\r

  \    iAdd(item, { div: dCell, dTitle: dCell.children[0], dMessage:
  dCell.children[1], dContent: dCell.children[2] });\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
cardGameTest06_clean_OK: "function cardGameTest06_clean_OK() {\r

  \  setBackgroundColor(null, 'random');\r

  \  let dGrid = mDiv(dTable, { gap: 10, bg: 'white', w: '90%', hmin: 400,
  padding: 10, display: 'inline-grid', rounding: 10 }, 'dGrid');\r

  \  let layout = ['T', 'H A'];\r

  \  let areaStyles = { bg: 'green', rounding: 6 };\r

  \  let contentStyles = { lowerRounding: 6 };\r

  \  let messageStyles = { fg: 'yellow' };\r

  \  let titleStyles = { bg: 'dimgray', family: 'AlgerianRegular',
  upperRounding: 6 };\r

  \  let areas = {\r

  \    T: { title: 'table', id: 'dTrick', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles },\r

  \    H: { title: 'YOU', id: 'dHuman', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles },\r

  \    A: { title: 'opponent', id: 'dAI', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles },\r

  \  };\r

  \  areas.T.areaStyles.w = '100%';\r

  \  let x = createGridLayout(dGrid, layout);\r

  \  console.log('result', x);\r

  \  let items = [];\r

  \  for (const k in areas) {\r

  \    let item = areas[k];\r

  \    item.areaStyles['grid-area'] = k;\r

  \    let dCell = mTitledMessageDiv(item.title, dGrid, item.id,
  item.areaStyles, item.contentStyles, item.titleStyles, item.messageStyles)\r

  \    iRegister(item, item.id);\r

  \    iAdd(item, { div: dCell, dTitle: dCell.children[0], dMessage:
  dCell.children[1], dContent: dCell.children[2] });\r

  \    mCenterCenterFlex(diContent(item));\r

  \    mStyle(diContent(item), { gap: 10 });\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
cardGameTest07: "function cardGameTest07() {\r

  \  let items = cardGameTest07_helper();\r

  \  for (let i = 0; i < 3; i++) {\r

  \    let arr = [0, 1, 2, 10, 11].map(x => 1 + (x + i * 13) % 52);\r

  \    let d = diContent(items[i]);\r

  \    let id = 'h' + i;\r

  \    iH00(arr, d, { bg: 'blue' }, id);\r

  \  }\r

  }"
cardGameTest07_helper: "function cardGameTest07_helper() {\r

  \  setBackgroundColor(null, 'random');\r

  \  let dGrid = mDiv(dTable, { gap: 10, bg: 'white', w: '90%', padding: 10,
  display: 'inline-grid', rounding: 10 }, 'dGrid');\r

  \  let layout = ['T', 'H A'];\r

  \  let areaStyles = { bg: 'green', rounding: 6 };\r

  \  let contentStyles = { lowerRounding: 6 };\r

  \  let messageStyles = { fg: 'yellow' };\r

  \  let titleStyles = { bg: 'dimgray', family: 'AlgerianRegular',
  upperRounding: 6 };\r

  \  let areas = {\r

  \    T: { title: 'table', id: 'dTrick', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles },\r

  \    H: { title: 'YOU', id: 'dHuman', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles },\r

  \    A: { title: 'opponent', id: 'dAI', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles },\r

  \  };\r

  \  let x = createGridLayout(dGrid, layout);\r

  \  console.log('result', x);\r

  \  let items = [];\r

  \  for (const k in areas) {\r

  \    let item = areas[k];\r

  \    item.areaStyles['grid-area'] = k;\r

  \    let dCell = mTitledMessageDiv(item.title, dGrid, item.id,
  item.areaStyles, item.contentStyles, item.titleStyles, item.messageStyles)\r

  \    iRegister(item, item.id);\r

  \    iAdd(item, { div: dCell, dTitle: dCell.children[0], dMessage:
  dCell.children[1], dContent: dCell.children[2] });\r

  \    mCenterCenterFlex(diContent(item));\r

  \    mStyle(diContent(item), { gap: 10 });\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
cardGameTest08: "function cardGameTest08() {\r

  \  let state = {\r

  \    pl1: { hand: [1, 2, 3, 4, 5], trick: [[6]] },\r

  \    pl2: { hand: [11, 12, 13, 14, 15], trick: [[16]] },\r

  \  };\r

  \  let trick =
  arrFlatten(state.pl1.trick).concat(arrFlatten(state.pl2.trick));\r

  \  let pl1Hand = state.pl1.hand;\r

  \  let pl2Hand = state.pl2.hand;\r

  \  let arrs = [trick, pl1Hand, pl2Hand];\r

  \  let items = makeAreasKrieg(dTable);\r

  \  for (let i = 0; i < 3; i++) {\r

  \    let arr = arrs[i];\r

  \    let item = items[i];\r

  \    let d = diContent(item);\r

  \    let id = 'h' + i;\r

  \    iMessage(item, '');\r

  \    iH00(arr, d, { bg: 'blue' }, id);\r

  \  }\r

  }"
cardGameTest09: "function cardGameTest09() {\r

  \  let state = {\r

  \    pl1: { hand: [1, 2, 3, 4, 5], trick: [[6], [7, 8, 9]] },\r

  \    pl2: { hand: [11, 12, 13, 14, 15], trick: [[16], [17, 18, 19]] },\r

  \  };\r

  \  let areaItems = makeAreasKrieg(dTable);\r

  \  presentState1(state, areaItems);\r

  }"
cardHand: "function cardHand(pool, loc, o, oid, path, omap) {\r

  \  let size = CARD_SZ;\r

  \  let [w, h, gap] = [size * .66, size, 4];\r

  \  let olist = mapOMap(omap, pool);\r

  \  if (isEmpty(olist)) return null;\r

  \  let uis = getUis(olist, sizedCard123(w, h));\r

  \  let area = stage2_prepArea(loc);\r

  \  let container = stage3_prepContainer(area); mColor(container, 'red')\r

  \  stage4_layout(uis, container, w, h, gap, layoutHand);\r

  }"
cardInno: "function cardInno(dParent, key) {\r

  \  if (nundef(key)) key = chooseRandom(Object.keys(Cinno));\r

  \  let cardInfo = Cinno[key];\r

  \  cardInfo.key = key;\r

  \  let sym = INNO.sym[cardInfo.type];\r

  \  let info = Syms[sym.key];\r

  \  let card = cBlank(dParent, { fg: 'black', bg: INNO.color[cardInfo.color],
  w: CSZ, h: CSZ * .65 });\r

  \  let [dCard, sz, szTitle, margin] = [iDiv(card), CSZ / 5, CSZ / 8, CSZ /
  40];\r

  \  let [dTitle, dMain] = cTitleArea(card, szTitle);\r

  \  let d = mAddContent(dTitle, key, {\r

  \    patop: 4, bg: sym.bg, fg: 'white', h: szTitle, fz: szTitle * .7, align:
  'center',\r

  \    position: 'relative'\r

  \  });\r

  \  mAddContent(d, cardInfo.age, { hpadding: szTitle / 4, float: 'right'
  });\r

  \  let s = mSym(sym.key, d, { hpadding: szTitle / 4, h: szTitle * .7, fg:
  sym.fg, float: 'left' });\r

  \  let positions = ['tl', 'bl', 'bc', 'br'];\r

  \  for (let i = 0; i < 4; i++) {\r

  \    let r = cardInfo.resources[i];\r

  \    let pos = positions[i];\r

  \    if (r in INNO.sym) { innoSym(r, dMain, sz, pos, margin); }\r

  \    else if (r == 'None') { innoAgeNumber(cardInfo.age, dMain, sz, pos,
  margin); }\r

  \    else if (isNumber(r)) { innoBonusNumber(r, dMain, sz, pos, margin); }\r

  \    else if (r == 'echo') { innoEcho(cardInfo.echo, dMain, sz, pos,
  margin); }\r

  \  }\r

  \  let box = mBoxFromMargins(dMain, 10, margin, sz + margin, sz + 2 *
  margin);\r

  \  mStyle(box, { align: 'left' });\r

  \  let text = '';\r

  \  for (const dog of cardInfo.dogmas) {\r

  \    console.log('text', cardInfo.type, sym);\r

  \    let t = startsWith(dog, 'I demand') ? ('I <b>demand</b>' +
  dog.substring(8)) : dog;\r

  \    text += `<span
  style=\"color:${sym.bg};font-family:${info.family}\">${info.text}</span>` +
  '&nbsp;' + t + '<br>';\r

  \  }\r

  \  let t2 = innoText(text);\r

  \  box.onclick = (ev) => makeInfobox(ev, box, 2);\r

  \  mFillText(t2, box);\r

  }"
cardInno1: "function cardInno1(key, wCard = 420) {\r

  \  if (nundef(key)) key = chooseRandom(Object.keys(Cinno));\r

  \  let f = wCard / 420;\r

  \  let [w, h, szSym, paSym, fz, pa, bth, vGapTxt, rnd, gap] = [420 * f, 200
  * f, 100 * f, 8 * f, 100 * f * .8, 20 * f, 4 * f, 8 * f, 10 * f, 6 * f].map(x
  => Math.ceil(x));\r

  \  let info = Cinno[key];\r

  \  info.key = key;\r

  \  let cdict = { red: RED, blue: 'royalblue', green: 'green', yellow:
  'yelloworange', purple: 'indigo' };\r

  \  info.c = getColorDictColor(cdict[info.color]);\r

  \  let d = mDiv();\r

  \  mSize(d, w, h);\r

  \  mStyle(d, { fz: pa, margin: 8, align: 'left', bg: info.c, rounding: rnd,
  patop: paSym, paright: pa, pabottom: szSym, paleft: szSym + paSym, border: ''
  + bth + 'px solid silver', position: 'relative' })\r

  \  mText(info.key.toUpperCase(), d, { fz: pa, weight: 'bold', margin: 'auto'
  });\r

  \  mLinebreak(d);\r

  \  for (const dog of info.dogmas) {\r

  \    let text = replaceSymbols(dog);\r

  \    let d1 = mText(text, d);\r

  \    d1.style.marginBottom = '' + vGapTxt + 'px';\r

  \  }\r

  \  let syms = []; let d1;\r

  \  szSym -= gap;\r

  \  let sdict = {\r

  \    tower: { k: 'white-tower', bg: 'dimgray' }, clock: { k: 'watch', bg:
  'navy' }, crown: { k: 'crown', bg: 'black' },\r

  \    tree: { k: 'tree', bg: GREEN },\r

  \    bulb: { k: 'lightbulb', bg: 'purple' }, factory: { k: 'factory', bg:
  'red' }\r

  \  };\r

  \  for (const s in sdict) { sdict[s].sym = Syms[sdict[s].k]; }\r

  \  for (const sym of info.resources) {\r

  \    let isEcho = false;\r

  \    if (sym == 'None') {\r

  \      d1 = mDiv(d, { fz: fz * .75, fg: 'black', bg: 'white', rounding:
  '50%', display: 'inline' });\r

  \      let d2 = mText('' + info.age, d1, {});\r

  \      mClass(d2, 'centerCentered');\r

  \    } else if (sym == 'echo') {\r

  \      let text = info.echo;\r

  \      console.log('info.echo', info.echo);\r

  \      if (isList(info.echo)) text = info.echo[0];\r

  \      text = replaceSymbols(text);\r

  \      wEcho = szSym;\r

  \      let [w1, h1, w2, h2] = [wEcho, szSym, wEcho - 8, szSym - 8];\r

  \      d1 = mDiv(d, { display: 'inline', fg: 'white', bg: 'dimgray',
  rounding: 6, h: h1, w: w1 });\r

  \      let [bestFont, w3, h3] = fitFont(text, 20, w2, h2);\r

  \      let d2 = mDiv(d1, { w: w3, h: h3, fz: bestFont }, null, text);\r

  \      mCenterCenterFlex(d1);\r

  \      isEcho = true;\r

  \    } else if (isNumber(sym)) {\r

  \      d1 = mDiv(d, { fz: fz * .75, fg: 'white', bg: 'brown', border: '2px
  solid black', rounding: '50%', display: 'inline' });\r

  \      mCenterCenterFlex(d1);\r

  \      let d2 = mText('' + info.age, d1, {});\r

  \    } else {\r

  \      let key = sdict[sym].k;\r

  \      let mi = mPic(key, d, { w: szSym, fz: szSym * .8, bg: sdict[sym].bg,
  rounding: '10%' });\r

  \      d1 = iDiv(mi);\r

  \    }\r

  \    syms.push({ isEcho: isEcho, div: d1 });\r

  \  }\r

  \  placeSymbol(syms[0], szSym, gap, { left: 0, top: 0 });\r

  \  placeSymbol(syms[1], szSym, gap, { left: 0, bottom: 0 });\r

  \  placeSymbol(syms[2], szSym, gap, { left: w / 2, bottom: 0 });\r

  \  placeSymbol(syms[3], szSym, gap, { right: 0, bottom: 0 });\r

  \  info.div = d;\r

  \  return info;\r

  }"
cardInnoSZ: "function cardInnoSZ(key, wCard = 420) {\r

  \  if (nundef(key)) key = chooseRandom(Object.keys(cinno));\r

  \  let f = wCard / 420;\r

  \  let [w, h, szSym, paSym, fz, pa, bth, vGapTxt, rnd, gap] = [420 * f, 200
  * f, 50 * f, 8 * f, 50 * f * .8, 20 * f, 4 * f, 8 * f, 10 * f, 6 * f].map(x =>
  Math.ceil(x));\r

  \  let info = cinno[key];\r

  \  info.key = key;\r

  \  let cdict = { red: 'red1', blue: 'blue1', green: 'green1', yellow:
  'yellow1', purple: 'purple' }\r

  \  info.c = colorDarker(ColorDict[cdict[info.color]].c, .6);\r

  \  let d = mDiv();\r

  \  mSize(d, w, h);\r

  \  mStyleX(d, { fz: pa, margin: 8, align: 'left', bg: info.c, rounding: rnd,
  patop: paSym, paright: pa, pabottom: szSym, paleft: szSym + paSym, border: ''
  + bth + 'px solid silver', position: 'relative' })\r

  \  mText(info.key.toUpperCase(), d, { fz: pa, weight: 'bold', margin: 'auto'
  });\r

  \  mLinebreak(d);\r

  \  for (const dog of info.dogmas) {\r

  \    console.log(dog);\r

  \    let d1 = mText(dog, d);\r

  \    d1.style.marginBottom = '' + vGapTxt + 'px';\r

  \  }\r

  \  let syms = []; let d1;\r

  \  szSym -= gap;\r

  \  let sdict = {\r

  \    tower: { k: 'white-tower', bg: 'dimgray' }, clock: { k: 'watch', bg:
  'navy' }, crown: { k: 'crown', bg: 'black' },\r

  \    tree: { k: 'tree', bg: GREEN },\r

  \    bulb: { k: 'lightbulb', bg: 'purple' }, factory: { k: 'factory', bg:
  'red' }\r

  \  };\r

  \  for (const sym of info.resources) {\r

  \    console.log(sym)\r

  \    if (sym == 'None') {\r

  \      console.log('age of card:', info.age)\r

  \      d1 = mDiv(d, { fz: fz * .75, fg: 'black', bg: 'white', rounding:
  '50%', display: 'inline' });\r

  \      let d2 = mText('' + info.age, d1, {});\r

  \      mClass(d2, 'centerCentered')\r

  \    } else if (sym == 'echo') {\r

  \    } else {\r

  \      console.log('ssssssssssssssssssssssss', sym)\r

  \      let key = sdict[sym].k;\r

  \      d1 = maPic(key, d, { w: szSym, bg: sdict[sym].bg, rounding: '10%'
  });\r

  \    }\r

  \    syms.push(d1);\r

  \  }\r

  \  mStyleX(syms[0], { position: 'absolute', w: szSym, h: szSym, left: 0,
  top: 0, margin: gap });\r

  \  mStyleX(syms[1], { position: 'absolute', w: szSym, h: szSym, left: 0,
  bottom: 0, margin: gap });\r

  \  mStyleX(syms[2], { position: 'absolute', w: szSym, h: szSym, left: w / 2,
  bottom: 0, margin: gap });\r

  \  mStyleX(syms[3], { position: 'absolute', w: szSym, h: szSym, right: 0,
  bottom: 0, margin: gap });\r

  \  info.div = d;\r

  \  return info;\r

  \  return 'hallo';\r

  }"
cardInnoz: "function cardInnoz(key, wCard = 420) {\r

  \  if (nundef(key)) key = chooseRandom(Object.keys(cinno));\r

  \  let f = wCard / 420;\r

  \  let [w, h, szSym, paSym, fz, pa, bth, vGapTxt, rnd, gap] = [420 * f, 200
  * f, 50 * f, 8 * f, 50 * f * .8, 20 * f, 4 * f, 8 * f, 10 * f, 6 * f].map(x =>
  Math.ceil(x));\r

  \  let info = cinno[key]; info.key = key;\r

  \  let cdict = { red: 'red1', blue: 'blue1', green: 'green1', yellow:
  'yellow1', purple: 'purple' }\r

  \  info.c = colorDarker(ColorDict[cdict[info.color]].c, .6);\r

  \  let d = mDiv();\r

  \  mSize(d, w, h);\r

  \  mStyleX(d, { fz: pa, margin: 8, align: 'left', bg: info.c, rounding: rnd,
  patop: paSym, paright: pa, pabottom: szSym, paleft: szSym + paSym, border: ''
  + bth + 'px solid silver', position: 'relative' })\r

  \  mText(info.key.toUpperCase(), d, { fz: pa, weight: 'bold', margin: 'auto'
  });\r

  \  mLinebreak(d);\r

  \  for (const dog of info.dogmas) {\r

  \    let d1 = mText(dog, d);\r

  \    d1.style.marginBottom = '' + vGapTxt + 'px';\r

  \  }\r

  \  let syms = []; let d1;\r

  \  szSym -= gap;\r

  \  let sdict = {\r

  \    tower: { k: 'white-tower', bg: 'dimgray' }, clock: { k: 'watch', bg:
  'navy' }, crown: { k: 'crown', bg: 'black' },\r

  \    tree: { k: 'tree', bg: GREEN },\r

  \    bulb: { k: 'lightbulb', bg: 'purple' }, factory: { k: 'factory', bg:
  'red' }\r

  \  };\r

  \  for (const sym of info.resources) {\r

  \    if (sym == 'None') {\r

  \      d1 = { div: mDiv(d, { fz: fz * .75, w: szSym, h: szSym, fg: 'black',
  bg: 'white', rounding: '50%', display: 'inline' }) };\r

  \      let d2 = mText('' + info.age, d1.div, {});\r

  \      mClass(d2, 'centerCentered')\r

  \    } else if (sym == 'echo') {\r

  \    } else {\r

  \      let key = sdict[sym].k;\r

  \      d1 = zPic(key, d, { padding: 0, w: szSym, h: szSym, bg:
  sdict[sym].bg, rounding: '10%' });\r

  \    }\r

  \    syms.push(d1);\r

  \  }\r

  \  mStyleX(syms[0].div, { position: 'absolute', left: 0, top: 0, margin: gap
  });\r

  \  mStyleX(syms[1].div, { position: 'absolute', left: 0, bottom: 0, margin:
  gap });\r

  \  mStyleX(syms[2].div, { position: 'absolute', left: w / 2, bottom: 0,
  margin: gap });\r

  \  mStyleX(syms[3].div, { position: 'absolute', right: 0, bottom: 0, margin:
  gap });\r

  \  info.div = d;\r

  \  return info;\r

  \  return 'hallo';\r

  }"
cardPattern: "function cardPattern(n, sym) {\r

  \  let di = {\r

  \    1: [sym],\r

  \    2: [[sym], [sym]],\r

  \    3: [[sym], [sym], [sym]],\r

  \    4: [[sym, sym], [sym, sym]],\r

  \    5: [[sym, sym], [sym], [sym, sym]],\r

  \    6: [[sym, sym], [sym, sym], [sym, sym]],\r

  \    7: [[sym, sym], [sym, sym, sym], [sym, sym]],\r

  \    8: [[sym, sym, sym], [sym, sym], [sym, sym, sym]],\r

  \    9: [[sym, sym, sym], [sym, sym, sym], [sym, sym, sym]],\r

  \    10: [[sym, sym, sym], [sym, sym, sym, sym], [sym, sym, sym]],\r

  \    11: [[sym, sym, sym, sym], [sym, sym, sym], [sym, sym, sym, sym]],\r

  \    12: [[sym, sym, sym, sym], [sym, sym, sym, sym], [sym, sym, sym,
  sym]],\r

  \    13: [[sym, sym, sym], [sym, sym], [sym, sym, sym], [sym, sym], [sym,
  sym, sym]],\r

  \    14: [[sym, sym, sym, sym], [sym, sym, sym, sym], [sym, sym, sym,
  sym]],\r

  \    15: [[sym, sym, sym, sym], [sym, sym, sym, sym], [sym, sym, sym,
  sym]],\r

  \  };\r

  \  return di[n];\r

  }"
cards52GetRankFromName: "function cards52GetRankFromName(name) {\r

  \  let rank;\r

  \  let n = firstNumber(name);\r

  \  if (isdef(n) && !isNaN(n)) rank = n;\r

  \  else {\r

  \    let ch = name.toLowerCase()[0];\r

  \    rank = ch == 'k' ? 13 : ch == 'q' ? 12 : 11;\r

  \  }\r

  \  return rank;\r

  }"
cardZone: "function cardZone(dParent, o, flex = 1, hmin = 170) {\r

  \  let dOuter = mDiv(dParent, { bg: o.color, fg: 'contrast', flex: flex,
  hmin: hmin }, 'd' + o.name, o.name);\r

  \  let dInner = mDiv(dOuter);\r

  \  mFlex(dInner); dInner.style.alignContent = 'flex-start';\r

  \  return dInner;\r

  }"
carteset: "function carteset(l1, l2) {\r

  \  let res = [];\r

  \  for (var el1 of l1) {\r

  \    for (var el2 of l2) {\r

  \      if (isList(el1)) res.push(el1.concat(el2));\r

  \      else res.push([el1].concat(el2));\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
cartesi: "function cartesi(l1, l2) {\r

  \  let res = [];\r

  \  for (var el1 of l1) {\r

  \    for (var el2 of l2) {\r

  \      res.push(el1.concat(el2));\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
cartesian: "function cartesian(s1, s2, sep = '_') {\r

  \  let res = [];\r

  \  for (const el1 of s1) {\r

  \    for (const el2 of s2) {\r

  \      res.push(el1 + '_' + el2);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
cartesianOf: "function cartesianOf(ll) {\r

  \  let cart = ll[0];\r

  \  for (let i = 1; i < ll.length; i++) {\r

  \    cart = cartesian(cart, ll[i]);\r

  \  }\r

  \  return cart;\r

  }"
catanBoard: "function catanBoard(dParent, rows, topcols, styles = {}) {\r

  \  let g = hex1Board(dParent, rows, topcols, styles);\r

  \  hexCornerNodes(g);\r

  }"
catFiltered: "function catFiltered(cats, name, best) {\r

  \  let keys = setCategories(cats);\r

  \  let bestName = null;\r

  \  let k1 = keys.filter(x => best.includes(x));\r

  \  if (k1.length > 80) bestName = name + '100';\r

  \  else if (k1.length > 40) bestName = name + '50';\r

  \  else if (k1.length > 20) bestName = name + '25';\r

  \  let result = {};\r

  \  result[name] = keys;\r

  \  if (bestName) result[bestName] = k1;\r

  \  return result;\r

  }"
cBlank: "function cBlank(dParent, styles = {}, id) {\r

  \  if (nundef(styles.h)) styles.h = Card.sz;\r

  \  if (nundef(styles.w)) styles.w = styles.h * .7;\r

  \  if (nundef(styles.bg)) styles.bg = 'white';\r

  \  styles.position = 'relative';\r

  \  let [w, h, sz] = [styles.w, styles.h, Math.min(styles.w, styles.h)];\r

  \  if (nundef(styles.rounding)) styles.rounding = sz * .05;\r

  \  let d = mDiv(dParent, styles, id, null, 'card');\r

  \  let item = mItem(null, { div: d }, { type: 'card', sz: sz, rounding:
  styles.rounding });\r

  \  copyKeys(styles, item);\r

  \  return item;\r

  }"
cBlankSvg: "function cBlankSvg(dParent, styles = {}) {\r

  \  if (nundef(styles.h)) styles.h = Card.sz;\r

  \  if (nundef(styles.w)) styles.w = styles.h * .7;\r

  \  if (nundef(styles.bg)) styles.bg = 'white';\r

  \  styles.position = 'relative';\r

  \  let [w, h, sz] = [styles.w, styles.h, Math.min(styles.w, styles.h)];\r

  \  if (nundef(styles.rounding)) styles.rounding = sz * .05;\r

  \  let d = mDiv(dParent, styles, null, null, 'card');\r

  \  let svg = mgTag('svg', d, { width: '100%', height: '100%' });\r

  \  let g = mgTag('g', svg);\r

  \  let item = mItem(null, { div: d, svg: svg, g: g }, { type: 'card', sz: sz
  });\r

  \  copyKeys(styles, item);\r

  \  return item;\r

  }"
ccanvas: "function ccanvas(dParent, styles, bstyles, play, pause, origin = 'cc')
  {\r

  \  let o = mCanvas(dParent, styles, bstyles, play, pause);\r

  \  [this.cv, this.cx, this.play, this.pause] = [o.cv, o.cx, o.play,
  o.pause];\r

  \  let [w, h] = [this.w, this.h] = [this.cv.width, this.cv.height];\r

  \  this.defaultsize = 20;\r

  \  this.origin = cv_init_origin(this, origin);\r

  \  this.cx.translate(this.origin.x, this.origin.y);\r

  \  this.maxx = w - this.origin.x; this.minx = this.maxx - w;\r

  \  this.maxy = h - this.origin.y; this.miny = this.maxy - h;\r

  \  this.items = [];\r

  }"
cCenterOrigin: "function cCenterOrigin(cnv, ctx) {\r

  \  cSetOrigin(ctx, cnv.width / 2, cnv.height / 2);\r

  }"
cCircle: "function cCircle(c, sz, n, disp = -90) {\r

  \  let rad = sz / 2;\r

  \  centers = getEllipsePoints(rad, rad, n, disp)\r

  \  centers = centers.map(pt => ({ x: pt.X + c.x, y: pt.Y + c.y }));\r

  \  return centers;\r

  }"
cClear: "function cClear(cnv = null, ctx = null) {\r

  \  if (nundef(cnv)) { cnv = CV; ctx = CX; if (!ctx) return; }\r

  \  ctx.save();\r

  \  ctx.setTransform(1, 0, 0, 1, 0, 0);\r

  \  ctx.clearRect(0, 0, cnv.width, cnv.height);\r

  \  ctx.restore();\r

  }"
cColor: function cColor(fill, cvx) { if (nundef(cvx)) cvx = CX; CX.fillStyle = fill; }
cdf0: "function cdf0(x) {\r

  \  function normal(x, mu, sigma) {\r

  \    return stdNormal((x - mu) / sigma);\r

  \  }\r

  \  function stdNormal(z) {\r

  \    var j, k, kMax, m, values, total, subtotal, item, z2, z4, a, b;\r

  \    if (z < -6) { return 0; }\r

  \    if (z > 6) { return 1; }\r

  \    m = 1;\r

  \    b = z;\r

  \    z2 = z * z;\r

  \    z4 = z2 * z2;\r

  \    values = [];\r

  \    for (k = 0; k < 100; k += 2) {\r

  \      a = 2 * k + 1;\r

  \      item = b / (a * m);\r

  \      item *= (1 - (a * z2) / ((a + 1) * (a + 2)));\r

  \      values.push(item);\r

  \      m *= (4 * (k + 1) * (k + 2));\r

  \      b *= z4;\r

  \    }\r

  \    total = 0;\r

  \    for (k = 49; k >= 0; k--) {\r

  \      total += values[k];\r

  \    }\r

  \    return 0.5 + 0.3989422804014327 * total;\r

  \  }\r

  \  return normal(x, 100, 15);\r

  }"
cEllipse: "function cEllipse(x, y, w, h, styles = null, angle = 0, ctx = null)
  {\r

  \  if (nundef(ctx)) { ctx = CX; if (!ctx) return; }\r

  \  if (styles) cStyle(styles, ctx);\r

  \  ctx.beginPath();\r

  \  ctx.ellipse(x, y, w / 2, h / 2, -angle, 0, 2 * Math.PI);\r

  \  if (isdef(styles.bg) || nundef(styles.fg)) ctx.fill();\r

  \  if (isdef(styles.fg)) ctx.stroke();\r

  }"
centerFit: "function centerFit(d, child) {\r

  \  let bChild = getBounds(child);\r

  \  let b = getBounds(d);\r

  \  let padding = firstNumber(d.style.padding);\r

  \  let wdes = b.width;\r

  \  let hdes = b.height;\r

  \  let wdesChild = wdes - 2 * padding;\r

  \  let hdesChild = hdes - 2 * padding;\r

  \  let wChild = bChild.width;\r

  \  let hChild = bChild.height;\r

  \  let padx = Math.floor(padding + (wdesChild - bChild.width) / 2);\r

  \  let pady = Math.floor(padding + (hdesChild - bChild.height) / 2);\r

  \  d.style.padding = pady + 'px ' + padx + 'px';\r

  }"
cha3: "function cha3(cities) {\r

  \  let list = rChoose(cities, 20);\r

  \  for (const o of list) {\r

  \    map_add_city(o);\r

  \  }\r

  \  console.log('source', ensure_city_layer().getSource().getFeatures().map(x
  => x.data.city_ascii));\r

  }"
chainCancel: "function chainCancel() {\r

  \  CancelChain = true;\r

  \  clearTimeout(ChainTimeout);\r

  \  TaskChain = [];\r

  \  setTimeout(() => BlockChain = false, 100);\r

  }"
chainEx: "function chainEx(taskChain, onComplete, ifBlocked = 'wait',
  singleThreaded = true) {\r

  \  if (BlockChain) {\r

  \    console.log('chain blocked!')\r

  \    switch (ifBlocked) {\r

  \      case 'interrupt': CancelChain = true; setTimeout(() =>
  chainEx(taskChain, onComplete, 'wait'), 300); break;\r

  \      case 'wait': setTimeout(() => chainEx(taskChain, onComplete, 'wait'),
  300); break;\r

  \      case 'return': default://just drop it\r

  \    }\r

  \  } else {\r

  \    BlockChain = true;\r

  \    CancelChain = false;\r

  \    let akku = [];\r

  \    if (singleThreaded) {\r

  \      TaskChain = taskChain;\r

  \      _singleThreadedChainExRec(akku, onComplete);\r

  \    } else {\r

  \      _chainExRec(akku, taskChain, onComplete);\r

  \    }\r

  \  }\r

  }"
chainSend: "function chainSend(msgChain, callback) {\r

  \  let akku = [];\r

  \  this.chainSendRec(akku, msgChain, callback);\r

  }"
chainSendRec: "function chainSendRec(akku, msgChain, callback) {\r

  \  if (msgChain.length > 0) {\r

  \    _sendRoute(msgChain[0], d => {\r

  \      akku.push(d);\r

  \      this.chainSendRec(akku, msgChain.slice(1), callback)\r

  \    });\r

  \  } else {\r

  \    callback(akku);\r

  \  }\r

  }"
chall4: "function chall4() {\r

  \  let caps = M.capitals;\r

  \  let list = caps;\r

  \  for (const o of list) {\r

  \    map_add_city(o);\r

  \    console.log('city', o)\r

  \  }\r

  \  console.log('source', ensure_city_layer().getSource().getFeatures().map(x
  => x.data.city_ascii));\r

  }"
challenge0: "function challenge0() {\r

  \  for (const o of arrTake(cities, 10)) {\r

  \    console.log('o', o)\r

  \    add_circle(Number(o.lng), Number(o.lat), M.map);\r

  \  }\r

  }"
challenge1: "async function challenge1() {\r

  \  let data = await route_path_json('../base/mapdata/gadm36_AUT_2.json');\r

  \  var mapOptions = {\r

  \    center: [48.3, 16.3],\r

  \    zoom: 10\r

  \  }\r

  \  var map = new L.map('map', mapOptions);\r

  \  var layer = new L.TileLayer('');
  //http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\r

  \  map.addLayer(layer);\r

  \  geojson = L.geoJson(data, {}).addTo(map);\r

  \  for (const f of data.features) {\r

  \    let name = f.properties.NAME_2;\r

  \    let fpoly = single_poly_feature(f);\r

  \    let center = get_poly_center(fpoly);\r

  \    let p = get_circle(center).addTo(map);\r

  \    var marker = L.marker(center, { opacity: 0 });\r

  \    marker.addTo(map);\r

  \    marker.bindTooltip(f.properties.NAME_2, { direction: 'center',
  permanent: true, className: 'mylabel', offset: L.point({ x: -30, y: 30 })
  });\r

  \  }\r

  }"
challenge2: "function challenge2() {\r

  \  let layer = map_add_layer('city', M.map);\r

  \  let feature = map_add_circle_to_layer(16, 48, layer);\r

  \  feature.data = { hallo: 'Vienna' };\r

  \  console.log('source', layer.getSource().getFeatures());\r

  }"
change: "function change(arr, n) {\r

  \  for (let i = 0; i < n; i++) {\r

  \    let mobj = chooseRandom(arr);\r

  \  }\r

  }"
change_parent_type_if_needed: "function change_parent_type_if_needed(n, R) {\r

  \  let uiNode = R.uiNodes[n.uid];\r

  \  if (!isContainerType(uiNode.type)) {\r

  \    uiNode.type = 'panel';\r

  \    uiNode.changing = true;\r

  \    let uidParent = n.uidParent;\r

  \    let area = uidParent ? uidParent : R.baseArea;\r

  \    let uiNew = createUi(uiNode, area, R, uiNode.defParams);\r

  \  }\r

  }"
changeGameTo: "function changeGameTo(id) {\r

  \  if (isdef(id) && id == Gamename) return;\r

  \  if (isdef(T)) { saveTable(); }\r

  \  loadGame(id);\r

  \  loadTable();\r

  }"
changeTableTo: "function changeTableTo(id) {\r

  \  id = id.toLowerCase();\r

  \  if (isdef(id) && id == Tablename) return;\r

  \  if (id != Tablename && isdef(T)) { saveTable(); }\r

  \  loadTable(id);\r

  }"
changeTo: "function changeTo(newListName) {\r

  \  var x = newListName;\r

  \  document.getElementById('List').value = \"\";\r

  \  document.getElementById('List').setAttribute('list', x);\r

  }"
changeToForInput: "function changeToForInput(newListName, elid, defaultVal) {\r

  \  var x = newListName;\r

  \  document.getElementById(elid).value = '';\r

  \  document.getElementById(elid).setAttribute('list', x);\r

  }"
changeUserTo: "function changeUserTo(name) {\r

  \  if (name != Username) { saveUser(); }\r

  \  mBy('spUser').innerHTML = name;\r

  \  loadUser(name);\r

  \  startUnit();\r

  }"
chat_2handleResult: "function chat_2handleResult(result) {\r

  \  result = JSON.parse(result);\r

  \  console.log('chat result:', result);\r

  \  ActiveChats[result.userdata.username] = result;\r

  \  activateChat(result.userdata.username);\r

  }"
chatStartOrActivate: "function chatStartOrActivate() {\r

  \  if (nundef(DA.currentContact) && nundef(DA.activeChat)) {\r

  \    console.log('no current contact!');\r

  \  } else if (nundef(DA.currentContact)) {\r

  \    console.log('no current contact! - activate activeChat!');\r

  \    console.log('(nothing to do!)')\r

  \  } else if (DA.currentContact == DA.activeChat) {\r

  \    console.log('currentContact is already active', DA.currentContact);\r

  \    return;\r

  \  } else if (isdef(ActiveChats[DA.currentContact])) {\r

  \    console.log('messages have been loaded for', DA.currentContact, '- just
  activate');\r

  \    activateChat(DA.currentContact);\r

  \    console.log('if another contact was active, deactivate,');\r

  \    console.log('activate this new contact');\r

  \  } else {\r

  \    console.log('new data for', DA.currentContact, 'have to be requested
  from phphost!');\r

  \    let data = { username: Username, currentContact: DA.currentContact,
  data_type: 'chat' };\r

  \    get_request('chat', data);\r

  \  }\r

  }"
cheatDevcard: function cheatDevcard() { sendRoute('/cheat/devcard', runToDevdeckAction); }
check_complete_set: "function check_complete_set(fenlist) {\r

  \  if (fenlist.length != 3) return false;\r

  \  let [f1, f2, f3] = fenlist;\r

  \  console.log('set clicked', f1, f2, f3)\r

  \  for (let i = 0; i < f1.length; i++) {\r

  \    let [a, b, c] = [f1[i], f2[i], f3[i]];\r

  \    console.log('...set clicked', a, b, c)\r

  \    let correct = (a == b && b == c) || (a != b && b != c && a != c);\r

  \    if (!correct) return false;\r

  \  }\r

  \  return true;\r

  }"
check_correct_journey: "function check_correct_journey(A, fen, uplayer) {\r

  \  let items = A.selected.map(x => A.items[x]);\r

  \  if (items.length < 2) {\r

  \    select_error('please select at least 2 items!'); return [null, null,
  null];\r

  \  }\r

  \  let carditems = items.filter(x => is_card(x));\r

  \  if (isEmpty(carditems)) {\r

  \    select_error('please select at least 1 card!'); return [null, null,
  null];\r

  \  } else if (items.length - carditems.length > 1) {\r

  \    select_error('please select no more than 1 journey!'); return [null,
  null, null];\r

  \  }\r

  \  let journeyitem = firstCond(items, x => !is_card(x));\r

  \  let cards = journeyitem ? jsCopy(journeyitem.o.list) : [];\r

  \  cards = cards.concat(carditems.map(x => x.o.key));\r

  \  let jlegal = is_journey(cards);\r

  \  if (!jlegal || jlegal.length != cards.length) {\r

  \    select_error('this is not a legal journey!!'); return [null, null,
  null];\r

  \  }\r

  \  return [carditems, journeyitem, jlegal];\r

  }"
check_for_clicks: "function check_for_clicks() {\r

  \  let cur = get_bar_values();\r

  \  let clicks = get_clicks_from_playerdata();\r

  \  let newgoals = jsCopy(Z.fen), changed = false;\r

  \  for (const k in cur) {\r

  \    if (clicks[k] == 0) continue;\r

  \    changed = true;\r

  \    let newgoal = cur[k] + clicks[k] * 10;\r

  \    newgoals[k] = newgoal;\r

  \    set_new_goal(k, newgoal);\r

  \  }\r

  \  Z.fen = newgoals;\r

  \  if (changed) {\r

  \    phpPost({ friendly: 'feedback', fen: newgoals, newstate: { green: 0,
  red: 0 } }, 'update_fen');\r

  \  } else {\r

  \    autopoll();\r

  \  }\r

  }"
check_id: "function check_id(specKey, node, R) {\r

  \  let akku = {};\r

  \  recFindProp(node, '_id', 'self', akku);\r

  \  for (const k in akku) { R.addToPlaces(specKey, akku[k], k); }\r

  }"
check_if_church: "function check_if_church() {\r

  \  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];\r

  \  let jacks = fen.market.filter(x => x[0] == 'J');\r

  \  let queens = fen.market.filter(x => x[0] == 'Q');\r

  \  for (const plname of plorder) {\r

  \    let pl = fen.players[plname];\r

  \    let pl_jacks = pl.stall.filter(x => x[0] == 'J');\r

  \    let pl_queens = pl.stall.filter(x => x[0] == 'Q');\r

  \    jacks = jacks.concat(pl_jacks);\r

  \    queens = queens.concat(pl_queens);\r

  \  }\r

  \  let ischurch = false;\r

  \  for (const j of jacks) {\r

  \    if (firstCond(queens, x => x[1] != j[1])) ischurch = true;\r

  \  }\r

  \  return ischurch;\r

  }"
check_poll_bot_send_move: "function check_poll_bot_send_move(obj) {\r

  \  console.log('...bot check table status: ', lookup(obj, ['table',
  'status']) ?? 'no obj.table.status!!!', obj);\r

  \  if (nundef(DA.poll)) return;\r

  \  else if (isdef(obj) && isdef(obj.table) && obj.table.status == 'over')
  {\r

  \    DA.poll.onsuccess(obj);\r

  \  } else {\r

  \    BotTicker = setTimeout(poll, DA.poll.ms);\r

  \  }\r

  }"
check_poll_orig: "function check_poll_orig() {\r

  \  let p = DA.long_polling;\r

  \  if (nundef(p)) { console.log('no polling is active!'); return; }\r

  \  to_server(p.data, p.type);\r

  }"
check_poll_table_seen: "function check_poll_table_seen(obj) {\r

  \  console.assert(isdef(obj.table), 'check_poll_table_seen NO TABLE!!!!');\r

  \  let t = obj.table;\r

  \  if (t.status == 'seen' || t.status == 'past') {\r

  \    DA.poll.onsuccess(obj);\r

  \  } else {\r

  \    TOTicker = setTimeout(poll, DA.poll.ms);\r

  \  }\r

  }"
check_poll_table_show: "function check_poll_table_show(obj) {\r

  \  if (isdef(obj) && !isEmpty(obj.table) && obj.table.status == 'show') {\r

  \    DA.poll.onsuccess(obj);\r

  \  } else {\r

  \    TOTicker = setTimeout(poll, DA.poll.ms);\r

  \  }\r

  }"
check_poll_table_started: "function check_poll_table_started(obj) {\r

  \  if (isdef(obj) && !isEmpty(obj.tables)) {\r

  \    DA.poll.onsuccess(obj);\r

  \  } else {\r

  \    let dcheck = document.getElementById('ddd_logout');\r

  \    if (!dcheck) {\r

  \      present_non_admin_waiting_screen();\r

  \    }\r

  \    TOTicker = setTimeout(poll, DA.poll.ms);\r

  \  }\r

  }"
check_ref: "function check_ref(specKey, node, R) {\r

  \  let akku = {};\r

  \  recFindProp(node, '_ref', 'self', akku);\r

  \  for (const k in akku) { R.addToRefs(specKey, akku[k], k); }\r

  }"
check_resolve: "function check_resolve() {\r

  \  let can_resolve = true;\r

  \  for (const plname of Z.plorder) {\r

  \    let data1 = firstCond(Z.playerdata, x => x.name == plname &&
  !isEmpty(x.state));\r

  \    if (nundef(data1)) { can_resolve = false; break; }\r

  \  }\r

  \  return can_resolve;\r

  }"
CheckAndSet: "function CheckAndSet() {\r

  \  if (CheckResult() != BOOL.TRUE) {\r

  \    GameController.GameOver = BOOL.FALSE;\r

  \    $(\"#GameStatus\").text('');\r

  \  } else {\r

  \    GameController.GameOver = BOOL.TRUE;\r

  \    GameController.GameSaved = BOOL.TRUE;\r

  \    let win = GameController.winner;\r

  \    lookupAddToList(GameController, ['games'], isdef(win) ? win : 0);\r

  \  }\r

  \  ShowFenPosition();\r

  }"
checkArrowKeys: "function checkArrowKeys(ev) {\r

  \  if (!ev.ctrlKey) return;\r

  \  if (ev.keyCode == '13' && boatHighlighted) onClickSelectTuple(null,
  boatHighlighted);\r

  \  else if (ev.keyCode == '38') _highlightPrevBoat();\r

  \  else if (ev.keyCode == '40') _highlightNextBoat();\r

  \  else if (ev.keyCode == '37') { }\r

  \  else if (ev.keyCode == '39') { }\r

  }"
checkAvailable: "function checkAvailable(i) {\r

  \  id = getidAvailable(i); document.getElementById(id).checked = true;\r

  }"
CheckBoard: "function CheckBoard() {\r

  \  var t_pceNum = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r

  \  var t_material = [0, 0];\r

  \  var sq64, t_piece, t_pce_num, sq120, colour, pcount;\r

  \  for (t_piece = PIECES.wP; t_piece <= PIECES.bK; ++t_piece) {\r

  \    for (t_pce_num = 0; t_pce_num < brd_pceNum[t_piece]; ++t_pce_num) {\r

  \      sq120 = brd_pList[PCEINDEX(t_piece, t_pce_num)];\r

  \      if (brd_pieces[sq120] != t_piece) {\r

  \        console.log('Error Pce Lists');\r

  \        return BOOL.FALSE;\r

  \      }\r

  \    }\r

  \  }\r

  \  for (sq64 = 0; sq64 < 64; ++sq64) {\r

  \    sq120 = SQ120(sq64);\r

  \    t_piece = brd_pieces[sq120];\r

  \    t_pceNum[t_piece]++;\r

  \    t_material[PieceCol[t_piece]] += PieceVal[t_piece];\r

  \  }\r

  \  for (t_piece = PIECES.wP; t_piece <= PIECES.bK; ++t_piece) {\r

  \    if (t_pceNum[t_piece] != brd_pceNum[t_piece]) {\r

  \      console.log('Error t_pceNum');\r

  \      return BOOL.FALSE;\r

  \    }\r

  \  }\r

  \  if (t_material[COLOURS.WHITE] != brd_material[COLOURS.WHITE] ||
  t_material[COLOURS.BLACK] != brd_material[COLOURS.BLACK]) {\r

  \    console.log('Error t_material');\r

  \    return BOOL.FALSE;\r

  \  }\r

  \  if (brd_side != COLOURS.WHITE && brd_side != COLOURS.BLACK) {\r

  \    console.log('Error brd_side');\r

  \    return BOOL.FALSE;\r

  \  }\r

  \  if (GeneratePosKey() != brd_posKey) {\r

  \    console.log('Error brd_posKey');\r

  \    return BOOL.FALSE;\r

  \  }\r

  \  return BOOL.TRUE;\r

  }"
checkBoardEmpty: function checkBoardEmpty(arr) { for (const x of arr) { if
  (!empty_func(x)) return false; } return true; }
checkBoardFull: function checkBoardFull(arr) { for (const x of arr) if
  (empty_func(x)) return false; return true; }
checkCleanup: "function checkCleanup() {\r

  \  if (!S.vars.firstTime) {\r

  \    pageHeaderClearAll();\r

  \    restoreBehaviors();\r

  \    stopBlinking('a_d_status');\r

  \    openTabTesting('London');\r

  \    UIS['a_d_status'].clear({ innerHTML: '<div
  id=\"c_d_statusText\">status</div>' });\r

  \    UIS['a_d_actions'].clear({ innerHTML: '<div id=\"a_d_divSelect\"
  class=\"sidenav1\"></div>' });\r

  \    let areaPlayer = isdef(UIS['a_d_player']) ? 'a_d_player' :
  isdef(UIS['a_d_players']) ? 'a_d_players' : 'a_d_options';\r

  \    for (const id of ['a_d_log', 'a_d_objects', areaPlayer, 'a_d_game'])
  clearElement(id);\r

  \    delete S.players;\r

  \  } else S.vars.firstTime = false;\r

  }"
checkCleanup_I: "function checkCleanup_I() {\r

  \  if (isdef(UIS)) {\r

  \    stopBlinking('a_d_status');\r

  \    hide('passToNextPlayerUI');\r

  \    hide('freezer');\r

  \    stopInteraction();\r

  \    clearLog();\r

  \    delete G.end;\r

  \    delete G.signals.receivedEndMessage;\r

  \    delete G.previousPlayer;\r

  \    delete G.player;\r

  \    collections = {};\r

  \    scenarioQ = [];\r

  \  }\r

  }"
checkCleanup_II: "function checkCleanup_II() {\r

  \  if (isdef(UIS)) {\r

  \    checkCleanup_I();\r

  \    pageHeaderClearAll();\r

  \    restoreBehaviors();\r

  \    openTabTesting('ObjectsTab');\r

  \    UIS['a_d_status'].clear({ innerHTML: '<div
  id=\"c_d_statusText\">status</div>' });\r

  \    UIS['a_d_actions'].clear({ innerHTML: '<div id=\"a_d_divSelect\"
  class=\"sidenav1\"></div>' });\r

  \    let areaPlayer = isdef(UIS['a_d_player']) ? 'a_d_player' :
  isdef(UIS['a_d_players']) ? 'a_d_players' : 'a_d_options';\r

  \    for (const id of ['a_d_log', 'a_d_objects', areaPlayer, 'a_d_game'])
  clearElement(id);\r

  \  }\r

  }"
checkCleanup_III: "function checkCleanup_III() {\r

  \  if (isdef(UIS)) {\r

  \    checkCleanup_II();\r

  \    delete S.players;\r

  \  }\r

  }"
checkControlKey: "function checkControlKey(ev) {\r

  \  if (ev.key == 'Control') {\r

  \    isControlKeyDown = false;\r

  \    clearInfoboxes();\r

  \  }\r

  }"
checkGameConfigComplete: "function checkGameConfigComplete() {\r

  \  for (const pl of S.gameConfig.players) {\r

  \    if (isEmpty(pl.username)) return false;\r

  \  }\r

  \  return true;\r

  }"
checkKey: "function checkKey(superdi, key, type) {\r

  \  let types = ['const', 'var', 'cla', 'func'];\r

  \  let itype = types.indexOf(type);\r

  \  for (const t in superdi) {\r

  \    if (lookup(superdi, [t, key])) {\r

  \      let it = types.indexOf(t);\r

  \      if (itype > it) { delete superdi[t][key]; return type; }\r

  \      else if (it > itype) { return type == 'const' ? t : false; }\r

  \      else return type;\r

  \    }\r

  \  }\r

  \  return type;\r

  }"
checkPlayer: "function checkPlayer(i) {\r

  \  id = getidNum(i); document.getElementById(id).checked = true;\r

  }"
checkPotentialTTT: function checkPotentialTTT(arr, rows, cols) { return
  checkWinnerPossible(arr, rows, cols); }
CheckResult: "function CheckResult() {\r

  \  if (brd_fiftyMove > 100) {\r

  \    $(\"#GameStatus\").text(\"GAME DRAWN {fifty move rule}\");\r

  \    return BOOL.TRUE;\r

  \  }\r

  \  if (ThreeFoldRep() >= 2) {\r

  \    $(\"#GameStatus\").text(\"GAME DRAWN {3-fold repetition}\");\r

  \    return BOOL.TRUE;\r

  \  }\r

  \  if (DrawMaterial() == BOOL.TRUE) {\r

  \    $(\"#GameStatus\").text(\"GAME DRAWN {insufficient material to
  mate}\");\r

  \    return BOOL.TRUE;\r

  \  }\r

  \  GenerateMoves();\r

  \  var MoveNum = 0;\r

  \  var found = 0;\r

  \  for (MoveNum = brd_moveListStart[brd_ply]; MoveNum <
  brd_moveListStart[brd_ply + 1]; ++MoveNum) {\r

  \    if (MakeMove(brd_moveList[MoveNum]) == BOOL.FALSE) {\r

  \      continue;\r

  \    }\r

  \    found++;\r

  \    TakeMove();\r

  \    break;\r

  \  }\r

  \  $(\"#currentFenSpan\").text(BoardToFen());\r

  \  if (found != 0) return BOOL.FALSE;\r

  \  var InCheck = SqAttacked(brd_pList[PCEINDEX(Kings[brd_side], 0)],
  brd_side ^ 1);\r

  \  console.log('No Move Found, incheck:' + InCheck);\r

  \  if (InCheck == BOOL.TRUE) {\r

  \    if (brd_side == COLOURS.WHITE) {\r

  \      $(\"#GameStatus\").text(\"GAME OVER {black mates}\");\r

  \      GameController.winner = 'black';\r

  \      return BOOL.TRUE;\r

  \    } else {\r

  \      $(\"#GameStatus\").text(\"GAME OVER {white mates}\");\r

  \      GameController.winner = 'white';\r

  \      return BOOL.TRUE;\r

  \    }\r

  \  } else {\r

  \    $(\"#GameStatus\").text(\"GAME DRAWN {stalemate}\"); return
  BOOL.TRUE;\r

  \  }\r

  \  console.log('Returning False');\r

  \  return BOOL.FALSE;\r

  }"
checkSudokuRule: "function checkSudokuRule(matrix) {\r

  \  let i = 0;\r

  \  for (const arr of matrix) {\r

  \    let dd = hasDuplicate(arr);\r

  \    if (dd) {\r

  \      let err = { type: 'row', row: i, col: dd.i, val: dd.val, info: dd, i:
  i };\r

  \      return err;\r

  \    }\r

  \    i += 1;\r

  \  }\r

  \  i = 0;\r

  \  for (const arr of bGetCols(matrix)) {\r

  \    let dd = hasDuplicate(arr);\r

  \    if (dd) {\r

  \      let err = { type: 'column', col: i, row: dd.i, val: dd.val, i: i,
  info: dd };\r

  \      return err;\r

  \    }\r

  \    i += 1;\r

  \  }\r

  \  let [rows, cols] = [matrix.length, matrix[0].length];\r

  \  let rowsEach = rows == 9 ? 3 : 2;\r

  \  let colsEach = cols == 4 ? 2 : 3;\r

  \  let chunks = bGetChunksWithIndices(matrix, rowsEach, colsEach);\r

  \  i = 0;\r

  \  for (const arr of chunks) {\r

  \    let dd = hasDuplicate(arr);\r

  \    if (dd) {\r

  \      let val = dd.val;\r

  \      let err = { type: 'quadrant', row: val.row, col: val.col, val:
  val.val, i: i, info: dd };\r

  \    }\r

  \    i += 1;\r

  \  }\r

  \  return null;\r

  }"
checkSudokuRule_trial1: "function checkSudokuRule_trial1(matrix) {\r

  \  for (const arr of matrix) { let dd = hasDuplicate(arr); if (dd) return {
  type: 'row', info: dd }; }\r

  \  for (const arr of bGetCols(matrix)) { let dd = hasDuplicate(arr); if (dd)
  return { type: 'column', info: dd }; }\r

  \  let chunks = bGetChunks(matrix, 2, 2);\r

  \  for (const arr of chunks) { let dd = hasDuplicate(arr); if (dd) return {
  type: 'quadrant', info: dd }; }\r

  \  return null;\r

  }"
checkTimer: function checkTimer(G) { if (nundef(GameTimer)) return false; return
  GameTimer.check(G); }
CheckUp: "function CheckUp() {\r

  \  if (($.now() - srch_start) > srch_time) srch_stop = BOOL.TRUE;\r

  }"
checkWinner: "function checkWinner(arr, rows, cols) {\r

  \  for (i = 0; i < rows; i++) { let ch = bFullRow(arr, i, rows, cols); if
  (ch) return ch; }\r

  \  for (i = 0; i < cols; i++) { let ch = bFullCol(arr, i, rows, cols); if
  (ch) return ch; }\r

  \  let ch = bFullDiag(arr, rows, cols); if (ch) return ch;\r

  \  ch = bFullDiag2(arr, rows, cols); if (ch) return ch;\r

  \  return null;\r

  }"
checkWinnerC4: "function checkWinnerC4(arr, rows = 6, cols = 7, stride = 4) {\r

  \  for (i = 0; i < rows; i++) { let ch = bStrideRow(arr, i, rows, cols,
  stride); if (ch) return ch; }\r

  \  for (i = 0; i < cols; i++) { let ch = bStrideCol(arr, i, rows, cols,
  stride); if (ch) return ch; }\r

  \  for (i = 0; i < rows; i++) {\r

  \    for (j = 0; j < cols; j++) {\r

  \      let ch = bStrideDiagFrom(arr, i, j, rows, cols, stride); if (ch)
  return ch;\r

  \      ch = bStrideDiag2From(arr, i, j, rows, cols, stride); if (ch) return
  ch;\r

  \    }\r

  \  }\r

  \  return null;\r

  }"
checkWinnerPossible: "function checkWinnerPossible(arr, rows, cols) {\r

  \  for (i = 0; i < rows; i++) { let ch = bPartialRow(arr, i, rows, cols); if
  (ch) return ch; }\r

  \  for (i = 0; i < cols; i++) { let ch = bPartialCol(arr, i, rows, cols); if
  (ch) return ch; }\r

  \  let ch = bPartialDiag(arr, rows, cols); if (ch) return ch;\r

  \  ch = bPartialDiag2(arr, rows, cols); if (ch) return ch;\r

  \  return null;\r

  }"
checkwinners: "function checkwinners(arr, rows, cols) {\r

  \  for (i = 0; i < rows; i++) { let ch = bFullRow(arr, i, rows, cols); if
  (ch) return ch; }\r

  \  for (i = 0; i < cols; i++) { let ch = bFullCol(arr, i, rows, cols); if
  (ch) return ch; }\r

  \  let ch = bFullDiag(arr, rows, cols); if (ch) return ch;\r

  \  ch = bFullDiag2(arr, rows, cols); if (ch) return ch;\r

  \  return null;\r

  }"
checkwinnersC4: "function checkwinnersC4(arr, rows = 6, cols = 7, stride = 4)
  {\r

  \  for (i = 0; i < rows; i++) { let ch = bStrideRow(arr, i, rows, cols,
  stride); if (ch) return ch; }\r

  \  for (i = 0; i < cols; i++) { let ch = bStrideCol(arr, i, rows, cols,
  stride); if (ch) return ch; }\r

  \  for (i = 0; i < rows; i++) {\r

  \    for (j = 0; j < cols; j++) {\r

  \      let ch = bStrideDiagFrom(arr, i, j, rows, cols, stride); if (ch)
  return ch;\r

  \      ch = bStrideDiag2From(arr, i, j, rows, cols, stride); if (ch) return
  ch;\r

  \    }\r

  \  }\r

  \  return null;\r

  }"
checkwinnersPossible: "function checkwinnersPossible(arr, rows, cols) {\r

  \  for (i = 0; i < rows; i++) { let ch = bPartialRow(arr, i, rows, cols); if
  (ch) return ch; }\r

  \  for (i = 0; i < cols; i++) { let ch = bPartialCol(arr, i, rows, cols); if
  (ch) return ch; }\r

  \  let ch = bPartialDiag(arr, rows, cols); if (ch) return ch;\r

  \  ch = bPartialDiag2(arr, rows, cols); if (ch) return ch;\r

  \  return null;\r

  }"
checkwinnersTTT: function checkwinnersTTT(arr, rows, cols) { return
  checkwinners(arr, rows, cols); }
checkWinnerTTT: function checkWinnerTTT(arr, rows, cols) { return
  checkWinner(arr, rows, cols); }
chessTestPos01: "function chessTestPos01() {\r

  \  let board = [\r

  \    ['bk', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'bn', 'em', 'wr', 'em', 'wp', 'em', 'em'],\r

  \    ['br', 'em', 'bp', 'em', 'em', 'bn', 'wn', 'em'],\r

  \    ['em', 'em', 'bp', 'bp', 'bp', 'em', 'wp', 'bp'],\r

  \    ['bp', 'bp', 'em', 'bp', 'wn', 'em', 'wp', 'em'],\r

  \    ['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'em', 'em', 'wk', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \  ];\r

  \  console.log(arrToFen(board));\r

  }"
chessTestPos02: "function chessTestPos02() {\r

  \  let board = [\r

  \    ['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \  ];\r

  \  console.log(arrToFen(board, 'b'));\r

  }"
choose: function choose(arr, n, excepti) { return rChoose(arr, n, null, excepti); }
choose_dep: "function choose_dep(arr, n) {\r

  \  var result = new Array(n);\r

  \  var len = arr.length;\r

  \  var taken = new Array(len);\r

  \  if (n > len) n = len - 1;\r

  \  while (n--) {\r

  \    var iRandom = Math.floor(Math.random() * len);\r

  \    result[n] = arr[iRandom in taken ? taken[iRandom] : iRandom];\r

  \    taken[iRandom] = --len in taken ? taken[len] : len;\r

  \  }\r

  \  return result;\r

  }"
chooseDeterministicOrRandom: "function chooseDeterministicOrRandom(n, arr,
  condFunc = null) {\r

  \  if (n < 0) return chooseRandomElement(arr, condFunc);\r

  \  if (condFunc) {\r

  \    let best = arr.filter(condFunc);\r

  \    if (!empty(best)) return best[n % best.length];\r

  \  }\r

  \  return arr[n % arr.length];\r

  }"
chooseKeys: function chooseKeys(dict, n, except) { let keys = Object.keys(dict);
  let ind = except.map(x => keys.indexOf(x)); return choose(keys, n, ind); }
chooseRandom: function chooseRandom(arr) { return rChoose(arr); }
chooseRandomDictKey: "function chooseRandomDictKey(dict, condFunc = null) {\r

  \  if (isEmpty(dict)) return null;\r

  \  let arr = Object.keys(dict);\r

  \  let len = arr.length;\r

  \  if (condFunc) {\r

  \    let best = arr.filter(condFunc);\r

  \    if (!isEmpty(best)) return chooseRandom(best);\r

  \  }\r

  \  let idx = Math.floor(Math.random() * len);\r

  \  return arr[idx];\r

  }"
chooseRandomElement: "function chooseRandomElement(arr, condFunc = null) {\r

  \  let len = arr.length;\r

  \  if (condFunc) {\r

  \    let best = arr.filter(condFunc);\r

  \    if (!empty(best)) return chooseRandomElement(best);\r

  \  }\r

  \  let idx = Math.floor(Math.random() * len);\r

  \  return arr[idx];\r

  }"
chooseRandomKey: function chooseRandomKey(dict) { return chooseRandom(Object.keys(dict)); }
circleCenters: "function circleCenters(rows, cols, wCell, hCell) {\r

  \  let [w, h] = [cols * wCell, rows * hCell];\r

  \  let cx = w / 2;\r

  \  let cy = h / 2;\r

  \  let centers = [{ x: cx, y: cy }];\r

  \  let rx = cx + wCell / 2; let dradx = rx / wCell;\r

  \  let ry = cy + hCell / 2; let drady = ry / hCell;\r

  \  let nSchichten = Math.floor(Math.min(dradx, drady));\r

  \  for (let i = 1; i < nSchichten; i++) {\r

  \    let [newCenters, wsch, hsch] = oneCircleCenters(i * 2 + 1, i * 2 + 1,
  wCell, hCell);\r

  \    for (const nc of newCenters) {\r

  \      centers.push({ x: nc.x + cx - wsch / 2, y: nc.y + cy - hsch / 2 });\r

  \    }\r

  \  }\r

  \  return [centers, wCell * cols, hCell * rows];\r

  }"
cities_from_csv_and_info: "async function cities_from_csv_and_info(min = 25000)
  {\r

  \  let info = await
  route_path_yaml_dict('../base/assets/lists/info.yaml');\r

  \  let text = await route_path_text('../base/mapdata/cities.csv');\r

  \  let cities = M.cities = csv2list(text);\r

  \  let capitals = [];\r

  \  let new_cities = {};\r

  \  let num = 0;\r

  \  for (const o of cities) {\r

  \    let n = o.population;\r

  \    if (nundef(n)) continue;\r

  \    n = Number(n);\r

  \    if (n < min) continue;\r

  \    let w1 = o.city_ascii.toLowerCase();\r

  \    if (nundef(o.country)) {\r

  \      console.log('missing country', o);\r

  \      continue;\r

  \    }\r

  \    num += 1;\r

  \    let land1 = o.country.toLowerCase();\r

  \    for (const k of info.capital) {\r

  \      let w = k.toLowerCase();\r

  \      if (w.includes(w1) && w.includes(land1)) {\r

  \        capitals.push(o);\r

  \        o.capital = 'capital';\r

  \      }\r

  \      let name = o.name = o.city_ascii;\r

  \      if (isdef(new_cities[name]) && new_cities[name].includes('capital'))
  continue;\r

  \      else if (isdef(new_cities[name]) &&
  Number(stringAfterLast(new_cities[name], ',')) > n) continue;\r

  \      new_cities[name] =
  `${o.lng},${o.lat},${o.country},${o.capital},${o.population}`;\r

  \    }\r

  \  }\r

  \  downloadAsYaml(new_cities, 'cities');\r

  \  return new_cities;\r

  }"
clamp: function clamp(x, min, max) { return Math.min(Math.max(x, min), max); }
cLandscape: "function cLandscape(dParent, styles = {}, id) {\r

  \  if (nundef(styles.w)) styles.w = Card.sz;\r

  \  if (nundef(styles.h)) styles.h = styles.w * .65;\r

  \  return cBlank(dParent, styles, id);\r

  }"
classByName: function classByName(name) { return eval(name); }
cleanup_or_resplay: "function cleanup_or_resplay(oldgroup) {\r

  \  if (isdef(oldgroup) && isEmpty(oldgroup.ids)) {\r

  \    let oldgroupid = oldgroup.id;\r

  \    mRemove(iDiv(oldgroup));\r

  \    removeInPlace(DA.TJ, oldgroup);\r

  \    delete Items[oldgroupid];\r

  \  } else if (isdef(oldgroup)) { oldgroup.ov = .3222;
  resplay_container(oldgroup, .3222) }\r

  }"
cleanupOldGame: "function cleanupOldGame() {\r

  \  updateUserScore();\r

  \  if (isdef(G)) { G.clear(); }\r

  \  clearTable();\r

  \  clearStats();\r

  \  clearFleetingMessage();\r

  }"
clear_ack_variables: "function clear_ack_variables() {\r

  \  let [fen, uplayer, pl] = [Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  delete fen.ack_players;\r

  \  delete fen.lastplayer;\r

  \  delete fen.nextplayer;\r

  \  delete fen.turn_after_ack;\r

  \  delete fen.ackstage;\r

  \  delete fen.callbackname_after_ack;\r

  \  delete fen.keeppolling;\r

  }"
clear_agents: "function clear_agents() {\r

  \  for (const a of M.agents) {\r

  \    let marker = a.ui;\r

  \    M.map.removeLayer(marker);\r

  \  }\r

  \  M.agents = [];\r

  }"
clear_all: function clear_all() { for (const id of ['dFiddle', 'dMenu',
  'dSearch', 'dSearchResult', 'dTable']) iClear(id); console.log('ids',
  get_keys(Items)) }
clear_all_players: "function clear_all_players() {\r

  \  console.log('trying to clear!!!')\r

  \  let d = mBy('d_players');\r

  \  let children = d.getElementsByTagName('input');\r

  \  console.log('children', children);\r

  \  for (const ch of children) { if (!ch.getAttribute('disabled')) ch.checked
  = false; }\r

  }"
clear_gametable: "function clear_gametable() {\r

  \  if (!isEmpty(DA.gameItems)) {\r

  \    let t = iDiv(DA.gameItems[0]).parentNode;\r

  \    t.remove();\r

  \  }\r

  }"
clear_previous_level: "function clear_previous_level() {\r

  \  if (!isEmpty(A.items)) {\r

  \    console.assert(A.level >= 1, 'have items but level is ' + A.level);\r

  \    A.ll.push({ items: A.items, selected: A.selected });\r

  \    for (const item of A.items) {\r

  \      let bui = mBy(item.idButton);\r

  \      remove_hover_ui(bui);\r

  \      item.idButton = bui.id = getUID();\r

  \      let uid = item.idCard;\r

  \      let cui = isdef(uid) ? mBy(uid) : null;\r

  \      if (A.selected.includes(item.index)) {\r

  \        bui.onclick = null;\r

  \        if (cui) { mRemoveClass(cui, 'hoverScale'); cui.onclick = null; }\r

  \      } else {\r

  \        bui.style.opacity = 0;\r

  \        if (cui) { mRemoveClass(cui, 'hoverScale'); cui.onclick = null; }\r

  \      }\r

  \    }\r

  \  }\r

  }"
clear_quick_buttons: "function clear_quick_buttons() {\r

  \  if (isdef(DA.bQuick)) { DA.bQuick.remove(); delete DA.bQuick; }\r

  }"
clear_router: function clear_router() { M.map.removeControl(M.router); }
clear_screen: "function clear_screen() { mShieldsOff(); clear_status();
  clear_title(); for (const ch of arrChildren('dScreen')) mClear(ch);
  mClassRemove('dTexture', 'wood'); mStyle(document.body, { bg: 'white', fg:
  'black' }); }"
clear_select: "function clear_select(selected, selstyle = 'selected') {\r

  \  for (const item of selected) {\r

  \    item.isSelected = false;\r

  \    let ui = iDiv(item);\r

  \    if (isString(selstyle)) {\r

  \      mClassRemove(ui, selstyle);\r

  \    } else if (isdef(item.style)) {\r

  \      mStyle(ui, item.style);\r

  \    } else {\r

  \      mStyleUndo(ui, selstyle);\r

  \    }\r

  \  }\r

  \  return [];\r

  }"
clear_selection: "function clear_selection() {\r

  \  let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A,
  Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  if (nundef(Z.A) || isEmpty(A.selected)) return;\r

  \  let selitems = A.selected.map(x => A.items[x]);\r

  \  for (const item of selitems) { ari_make_unselected(item); }\r

  \  A.selected = [];\r

  }"
clear_status: function clear_status() { if (nundef(mBy('dStatus'))) return;
  clearTimeout(TO.fleeting); mRemove("dStatus"); }
clear_table_all: "function clear_table_all() {\r

  \  clear_table_events();\r

  \  if (isdef(mBy('table'))) clearTable();\r

  \  resetUIDs();\r

  \  Items = {};\r

  }"
clear_table_events: "function clear_table_events() {\r

  \  clear_timeouts();\r

  \  STOPAUS = true;\r

  \  pauseSound();\r

  \  DELAY = 1000;\r

  \  uiActivated = aiActivated = false;\r

  \  onclick = null;\r

  \  clearMarkers();\r

  }"
clear_timeouts: "function clear_timeouts() {\r

  \  for (const k in TO) clearTimeout(TO[k]);\r

  \  stop_simple_timer();\r

  }"
clear_title: function clear_title() { mClear('dTitleMiddle');
  mClear('dTitleLeft'); mClear('dTitleRight'); }
clear_transaction: function clear_transaction() { DA.simulate = false; DA.transactionlist = []; }
ClearAllPieces: "function ClearAllPieces() {\r

  \  $(\".Piece\").remove();\r

  }"
clearBadges: "function clearBadges() {\r

  \  removeBadges(null, 0);\r

  \  badges = [];\r

  }"
clearChat: function clearChat() { clearElement(document.getElementById('chatEvent')); }
clearChatWindow: function clearChatWindow() { clearElement('dChatWindow'); }
clearDOM: "function clearDOM() {\r\n}"
clearElement: "function clearElement(elem) {\r

  \  if (isString(elem)) elem = document.getElementById(elem);\r

  \  if (window.jQuery == undefined) { elem.innerHTML = ''; return elem; }\r

  \  while (elem.firstChild) {\r

  \    $(elem.firstChild).remove();\r

  \  }\r

  \  return elem;\r

  }"
clearElementFromChildIndex: "function clearElementFromChildIndex(elem, idx = 0)
  {\r

  \  let charr = arrChildren(elem).slice(idx);\r

  \  for (const ch of charr) {\r

  \    elem.removeChild(ch);\r

  \  }\r

  }"
clearerror: function clearerror() { errormsg(""); }
clearFleetingMessage: "function clearFleetingMessage() {\r

  \  if (isdef(dFleetingMessage)) {\r

  \    dFleetingMessage.remove();\r

  \    dFleetingMessage = null;\r

  \  }\r

  }"
ClearForSearch: "function ClearForSearch() {\r

  \  var index = 0;\r

  \  var index2 = 0;\r

  \  for (index = 0; index < 14 * BRD_SQ_NUM; ++index) {\r

  \    brd_searchHistory[index] = 0;\r

  \  }\r

  \  for (index = 0; index < 3 * MAXDEPTH; ++index) {\r

  \    brd_searchKillers[index] = 0;\r

  \  }\r

  \  ClearPvTable();\r

  \  brd_ply = 0;\r

  \  srch_nodes = 0;\r

  \  srch_fh = 0;\r

  \  srch_fhf = 0;\r

  \  srch_start = $.now();\r

  \  srch_stop = BOOL.FALSE;\r

  }"
clearGame: function clearGame() { }
clearGameTitle: function clearGameTitle() { clearElement(dGameTitle); }
clearIncludingAttr: "function clearIncludingAttr(elem) {\r

  \  if (isString(elem)) elem = document.getElementById(elem);\r

  \  elem.innerHTML = '';\r

  \  removeAttributes(elem);\r

  \  return elem;\r

  }"
clearInfoboxes: "function clearInfoboxes() {\r

  \  let ids = Array.from(getIdsInfobox());\r

  \  for (const id of ids) { deleteRSG(id); }\r

  \  maxZIndex = 10;\r

  }"
clearInit: "function clearInit(elem, startProps = {}) {\r

  \  clearElement(elem);\r

  \  for (const k in startProps) { elem[k] = startProps[k]; }\r

  }"
clearLevel: function clearLevel() { clearElement(dLevel); clearBadges(); }
clearLog: "function clearLog() {\r

  \  delete G.log;\r

  \  UIS['a_d_log'].clear();\r

  }"
clearMarkers: "function clearMarkers() {\r

  \  for (const m of Markers) {\r

  \    mRemove(m);\r

  \  }\r

  \  Markers = [];\r

  }"
clearMessages: function clearMessages() { clearElement(document.getElementById('events')); }
clearPageHeader: "function clearPageHeader() {\r

  \  UIS['a_d_divPlayerNames'].clear();\r

  }"
ClearPiece: "function ClearPiece(sq) {\r

  \  var pce = brd_pieces[sq];\r

  \  var col = PieceCol[pce];\r

  \  var index = 0;\r

  \  var t_pceNum = -1;\r

  \  HASH_PCE(pce, sq);\r

  \  brd_pieces[sq] = PIECES.EMPTY;\r

  \  brd_material[col] -= PieceVal[pce];\r

  \  for (index = 0; index < brd_pceNum[pce]; ++index) {\r

  \    if (brd_pList[PCEINDEX(pce, index)] == sq) {\r

  \      t_pceNum = index;\r

  \      break;\r

  \    }\r

  \  }\r

  \  brd_pceNum[pce]--;\r

  \  brd_pList[PCEINDEX(pce, t_pceNum)] = brd_pList[PCEINDEX(pce,
  brd_pceNum[pce])];\r

  }"
ClearPvTable: "function ClearPvTable() {\r

  \  for (index = 0; index < PVENTRIES; index++) {\r

  \    brd_PvTable[index].move = NOMOVE;\r

  \    brd_PvTable[index].posKey = 0;\r

  \  }\r

  }"
clearScore: function clearScore() { clearElement(dScore) }
clearStats: "function clearStats() {\r

  \  clearLevel();\r

  \  clearScore();\r

  \  clearGameTitle();\r

  }"
clearStatus: function clearStatus() { clearFleetingMessage(); }
clearStep: "function clearStep() {\r\n}"
clearTable: "function clearTable() {\r

  \  clearElement('dTable');\r

  \  clearElement('dHistory');\r

  \  show_title();\r

  \  clearElement('dMessage');\r

  \  clearElement('dInstruction');\r

  \  clearElement('dTitleRight');\r

  \  hide('bPauseContinue');\r

  }"
clearTimeCD: "function clearTimeCD() {\r

  \  if (nundef(MSTimeTO)) return;\r

  \  clearTimeout(MSTimeTO); MSTimeClock = MSTimeDiff = MSTimeStart =
  MSTimeCallback = MSTimeTO = null;\r

  }"
clearTimeouts: "function clearTimeouts() {\r

  \  onclick = null;\r

  \  clearTimeout(TOMain);\r

  \  clearTimeout(TOFleetingMessage);\r

  \  clearTimeout(TOTrial);\r

  \  if (isdef(TOList)) { for (const k in TOList) { TOList[k].map(x =>
  clearTimeout(x)); } }\r

  }"
clearZones: "function clearZones() {\r

  \  for (const k in Zones) {\r

  \    clearElement(Zones[k].dData);\r

  \  }\r

  }"
click_shield_off: function click_shield_off() { mBy('dShield').style.display = 'none'; }
click_shield_on: function click_shield_on(msg) { show_shield(msg); }
ClickedSquare: "function ClickedSquare(pageX, pageY) {\r

  \  var position = $(\"#ChessBoard\").position();\r

  \  let dBoard = mBy('ChessBoard');\r

  \  let rBoard = setRectInt(dBoard);\r

  \  let dParent = mBy('ChessBoard').parentNode;\r

  \  let r = setRectInt(dParent);\r

  \  var workedX = Math.floor(position.left);\r

  \  var workedY = Math.floor(position.top);\r

  \  var pageX = Math.floor(pageX);\r

  \  var pageY = Math.floor(pageY);\r

  \  var file = Math.floor((pageX - workedX - r.l) / 60);\r

  \  var rank = 7 - Math.floor((pageY - workedY - r.t) / 60);\r

  \  var sq = FR2SQ(file, rank);\r

  \  if (GameController.BoardFlipped == BOOL.TRUE) {\r

  \    sq = MIRROR120(sq);\r

  \  }\r

  \  SetSqSelected(sq);\r

  \  return sq;\r

  }"
cLine: "function cLine(x1, y1, x2, y2, styles = null, ctx = null) {\r

  \  if (nundef(ctx)) { ctx = CX; if (!ctx) return; }\r

  \  if (styles) cStyle(styles, ctx);\r

  \  ctx.beginPath();\r

  \  ctx.moveTo(x1, y1);\r

  \  ctx.lineTo(x2, y2)\r

  \  ctx.stroke();\r

  }"
cloneIfNecessary: "function cloneIfNecessary(value, optionsArgument) {\r

  \  var clone = optionsArgument && optionsArgument.clone === true\r

  \  return (clone && isMergeableObject(value)) ?
  deepmerge(emptyTarget(value), value, optionsArgument) : value\r

  }"
cloneSvg: "function cloneSvg(svg, id) {\r

  \  var newPawn = svg.cloneNode(true);\r

  \  newPawn.id = id;\r

  \  return newPawn;\r

  }"
close_game_options: function close_game_options() { mBy('inner_left_panel').innerHTML = ''; }
close_image: "function close_image(e) {\r

  \  e.target.className = \"image_off\";\r

  }"
close_mini_user_info: "function close_mini_user_info() {\r

  \  setTimeout(() => {\r

  \    mBy('user_info_mini').style.display = 'none';\r

  \  }, 500);\r

  }"
close_popup: "function close_popup() {\r

  \  let dpop = mBy('dPopup');\r

  \  hide(dpop);\r

  }"
close_sidebar: "function close_sidebar() {\r

  \  let d = mBy('left_panel'); d.style.flex = 0;\r

  \  DA.left_panel = 'closed';\r

  }"
closeAux: "function closeAux() {\r

  \  hide(dAux);\r

  \  hide('dGo');\r

  \  show('dGear');\r

  \  show('dTemple');\r

  \  if (Settings.hasChanged) { Settings.updateSettings(); dbSaveX(); }\r

  \  Settings.hasChanged = false;\r

  \  auxOpen = false;\r

  }"
closeGameConfig: "function closeGameConfig() {\r

  \  hideGameConfig();\r

  \  if (USE_SOCKETIO) {\r

  \    showEventList();\r

  \  }\r

  \  setMessage('hi again!');\r

  \  show('bJoinGame');\r

  \  show('bCreateGame');\r

  \  show('bResumeGame');\r

  \  hide('bLobbyOk');\r

  \  hide('bLobbyCancel');\r

  }"
closeInfoboxesForBoatOids: "function closeInfoboxesForBoatOids(boat) {\r

  \  let oids = boat.o.oids;\r

  \  for (const oid of oids) hideInfobox(oid);\r

  }"
closeJoinConfig: "function closeJoinConfig() {\r

  \  hideJoinConfig();\r

  \  if (USE_SOCKETIO) {\r

  \    showEventList();\r

  \  }\r

  \  setMessage('hi again!');\r

  \  show('bJoinGame');\r

  \  show('bCreateGame');\r

  \  show('bResumeGame');\r

  \  hide('bLobbyJoinOk');\r

  \  hide('bLobbyJoinCancel');\r

  }"
closeLeftPane: "function closeLeftPane() {\r

  \  if (!paneOpen) return 0;\r

  \  let right = mBy('dInnerRight');\r

  \  mStyle(right, { flex: 2 });\r

  \  paneOpen = false;\r

  \  return DELAY_PANE;\r

  }"
closeSettings: function closeSettings() { setPicsPerLevel(); hide(dSettings); resumeUI(); }
closeSocket: "function closeSocket() {\r

  \  if (!USE_SOCKETIO) return;\r

  \  if (clientData.name !== null && socket !== null) {\r

  \    socket.emit('message', clientData.name + ' has left');\r

  \    socket.close();\r

  \  }\r

  }"
closestParent: "function closestParent(elem, selector) {\r

  \  for (; elem && elem !== document; elem = elem.parentNode) {\r

  \    if (elem.matches(selector)) return elem;\r

  \  }\r

  \  return null;\r

  }"
cls: "function cls() {\r

  \  clearElement(document.getElementById('g'));\r

  }"
coButtonSidebarDiv_00: "function coButtonSidebarDiv_00(dParent, bCaption = '☰',
  bStyles = { fz: 30 }, sbStyles = { bg: wpink }, divStyles = {}, outerStyles =
  { matop: 4, bg: wgrey }) {\r

  \  let d0 = mDiv100(dParent);\r

  \  let b = mButton(bCaption, null, d0, bStyles, 'mybutton');\r

  \  outerStyles.position = 'relative';\r

  \  let h = getRect(d0).h - (getRect(b).h + outerStyles.matop);\r

  \  outerStyles.h = h;\r

  \  let d = mDiv(d0, outerStyles);\r

  \  let dSide = mDiv(d, sbStyles);\r

  \  let dContent = mDiv(d, divStyles);\r

  \  let sb = iSidebar(d, dSide, dContent, b, 120, false);\r

  \  return { button: b, sidebar: sb, div: dContent };\r

  }"
coin: function coin(percent = 50) { return Math.random() * 100 < percent; }
collapseAll: "function collapseAll() {\r

  \  let coll = document.getElementsByClassName(\"collapsible\");\r

  \  for (let i = 0; i < coll.length; i++) {\r

  \    let elem = coll[i];\r

  \    if (isVisible(getLinkContainerId(elem.id))) fireClick(elem);\r

  \  }\r

  }"
collapseSmallLetterAreas: "function collapseSmallLetterAreas(m, d) {\r

  \  let rows = m.length;\r

  \  let cols = m[0].length;\r

  \  let gtc = [];\r

  \  for (let c = 0; c < cols; c++) {\r

  \    gtc[c] = 'min-content';\r

  \    for (let r = 0; r < rows; r++) {\r

  \      let sArea = m[r][c];\r

  \      if (sArea[0] == sArea[0].toUpperCase()) gtc[c] = 'auto';\r

  \    }\r

  \  }\r

  \  let cres = gtc.join(' ');\r

  \  d.style.gridTemplateColumns = gtc.join(' '); //'min-content 1fr 1fr
  min-content';// 'min-content'.repeat(rows);\r

  \  let gtr = [];\r

  \  for (let r = 0; r < rows; r++) {\r

  \    gtr[r] = 'min-content';\r

  \    for (let c = 0; c < cols; c++) {\r

  \      let sArea = m[r][c];\r

  \      if (sArea[0] == sArea[0].toUpperCase()) gtr[r] = 'auto';\r

  \    }\r

  \  }\r

  \  let rres = gtr.join(' ');\r

  \  d.style.gridTemplateRows = gtr.join(' '); //'min-content 1fr 1fr
  min-content';// 'min-content'.repeat(rows);\r

  }"
collect_data: "function collect_data() {\r

  \  var myform = mBy(\"myform\");\r

  \  var inputs = myform.getElementsByTagName(\"INPUT\");\r

  \  var data = {};\r

  \  for (var i = inputs.length - 1; i >= 0; i--) {\r

  \    var key = inputs[i].name;\r

  \    switch (key) {\r

  \      case \"username\":\r

  \      case \"name\":\r

  \        let uname = inputs[i].value;\r

  \        console.log(`${key} in input is`, uname);\r

  \        uname = replaceAllSpecialChars(uname, ' ', '_');\r

  \        uname = replaceAllSpecialChars(uname, '&', '_');\r

  \        uname = replaceAllSpecialChars(uname, '+', '_');\r

  \        uname = replaceAllSpecialChars(uname, '?', '_');\r

  \        uname = replaceAllSpecialChars(uname, '=', '_');\r

  \        uname = replaceAllSpecialChars(uname, '+', '_');\r

  \        uname = replaceAllSpecialChars(uname, '/', '_');\r

  \        uname = replaceAllSpecialChars(uname, '\\\\', '_');\r

  \        data[key] = uname.toLowerCase();\r

  \        break;\r

  \      case \"motto\":\r

  \        data[key] = inputs[i].value.toLowerCase();\r

  \    }\r

  \  }\r

  \  if (DA.imageChanged) {\r

  \    sendHtml('imgPreview', Session.cur_user);\r

  \  } else {\r

  \    let udata = get_current_userdata();\r

  \    let changed = false;\r

  \    if (DA.colorChanged) { udata.color = DA.newColor; changed = true; }\r

  \    if (data.motto != udata.motto) {\r

  \      changed = true;\r

  \      udata.motto = data.motto;\r

  \      mBy('motto').innerHTML = udata.motto;\r

  \    }\r

  \    if (changed) {\r

  \      DA.next = get_login;\r

  \      db_save();\r

  \    }\r

  \  }\r

  }"
collect_game_options: "function collect_game_options() {\r

  \  collect_player_list();\r

  \  collect_game_specific_options();\r

  }"
collect_game_specific_options: "function collect_game_specific_options(game) {\r

  \  let poss = Config.games[game].options;\r

  \  if (nundef(poss)) return;\r

  \  let di = {};\r

  \  for (const p in poss) {\r

  \    let fs = mBy(`d_${p}`);\r

  \    let val = get_checked_radios(fs)[0];\r

  \    di[p] = isNumber(val) ? Number(val) : val;\r

  \  }\r

  \  return di;\r

  }"
collect_innerHTML: function collect_innerHTML(arr, sep = '') { return arr.map(x
  => iDiv(x).innerHTML).join(sep); }
collect_player_list: "function collect_player_list() {\r

  \  let d = mBy('d_players');\r

  \  let checkboxes = d.getElementsByTagName('input');\r

  \  Session.game_options.players = [];\r

  \  for (const chk of checkboxes) {\r

  \    if (chk.checked) {\r

  \      Session.game_options.players.push(chk.value);\r

  \    }\r

  \  }\r

  }"
collectPropFromCss: "function collectPropFromCss(prop) {\r

  \  const styles = document.styleSheets;\r

  \  let cssArr = [...styles[0].cssRules].map(x => ({\r

  \    class: x.selectorText,\r

  \    color: rgbToHex(x.style[prop]),\r

  \  }));\r

  \  return cssArr;\r

  }"
color_areas: "function color_areas(nHues = 2, iButtonHue = 0, areaClass =
  'area', gridDiv = 'root') {\r

  \  let hue1 = Math.floor(Math.random() * 360);\r

  \  let pal = gen_palette(hue1, nHues);\r

  \  palette = pal;\r

  \  setCSSButtonColors(pal, iButtonHue);\r

  \  let areas = document.getElementsByClassName(areaClass);\r

  \  let grid = document.getElementById(gridDiv);\r

  \  grid.style.backgroundColor = pal[pal.length - 1][0].b;\r

  \  idx = 0;\r

  \  ihue = 0;\r

  \  for (const a of areas) {\r

  \    let cb = (a.style.backgroundColor = pal[idx][ihue].b);\r

  \    let cf = (a.style.color = pal[idx][ihue].f);\r

  \    testHelpers('back', standardize_color(cb));\r

  \    let hex = standardize_color(cb);\r

  \    let f = complementaryColor(hex);\r

  \    a.style.color = f;\r

  \    let rgbString = hex2rgb(hex);\r

  \    let f2 = getTextColor(rgbString);\r

  \    a.style.color = f2;\r

  \    let f3 = niceColor(rgbString);\r

  \    a.style.color = f3;\r

  \    let f4 = blackOrWhite(cb);\r

  \    a.style.color = f4;\r

  \    let f5 = idealTextColor(hex);\r

  \    a.style.color = f5;\r

  \    idx += 1;\r

  \    if (idx >= pal.length - 2) idx = 0;\r

  \    ihue = (ihue + 1) % pal[0].length;\r

  \    if (idx % pal[0].length == 0) ihue = (ihue + 1) % pal[0].length;\r

  \  }\r

  }"
color2trans: "function color2trans(color, alpha = 0.5) {\r

  \  let hex = standardize_color(color);\r

  \  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r

  \  result = result\r

  \    ? {\r

  \      r: parseInt(result[1], 16),\r

  \      g: parseInt(result[2], 16),\r

  \      b: parseInt(result[3], 16)\r

  \    }\r

  \    : null;\r

  \  if (result) return
  `rgba(${result.r},${result.g},${result.b},${alpha})`;\r

  \  else return 'rgb(0,0,0,0.5)';\r

  }"
colorA: "function colorA(cAny) {\r

  \  let rgb = colorRGB(cAny, true);\r

  \  return rgb.a;\r

  }"
colorAreas: "function colorAreas(fromLocalStorage = true, nColors = 2) {\r

  \  let key = chooseRandom(Object.keys(modern_palettes));\r

  \  let colors = Object.values(modern_palettes[key]);\r

  \  colors = choose(colors, nColors + 1);\r

  \  shuffle(colors);\r

  \  let pals = colors.map(x => getPalette(x));\r

  \  setSYS('pals', pals);\r

  \  let ihue = 0;\r

  \  let idarkness = 1;\r

  \  setCSSVariable('--bgBody', pals[0][2]);\r

  \  setCSSButtonColors(pals, 0);\r

  \  for (const areaName of getSYS('baseAreaNames')) {\r

  \    console.log(areaName, ihue, idarkness);\r

  \    let areaInfo = getArea(areaName);\r

  \    let a = areaInfo.div;\r

  \    let bg = pals[ihue][idarkness];\r

  \    a.style.backgroundColor = bg;\r

  \    areaInfo.bg = bg;\r

  \    let fg = colorIdealText(bg);\r

  \    a.style.color = fg;\r

  \    areaInfo.fg = fg;\r

  \    areaInfo.idarkness = idarkness;\r

  \    areaInfo.ihue = ihue;\r

  \    idarkness += 1;\r

  \    if (idarkness >= pals[0].length - 2) idarkness = 1;\r

  \    ihue = (ihue + 1) % 2;\r

  \  }\r

  }"
colorAreas_dep: "function colorAreas_dep(hue0 = 260, nHues = 25, areaClass =
  'area', root = 'root') {\r

  \  let hue1 = nHues;\r

  \  let hues = [hue0, hue1];\r

  \  let pals = [];\r

  \  for (const hue of hues) {\r

  \    let c = colorFrom(colorFromHue(hue));\r

  \    let pal = colorPalShade(c);\r

  \    pals.push(pal);\r

  \  }\r

  \  let ihue = 0;\r

  \  let idarkness = 1;\r

  \  setCSSVariable('--bgBody', pals[0][2]);\r

  \  setCSSButtonColors(pals, 0);\r

  \  let areas = document.getElementsByClassName(areaClass);\r

  \  let grid = document.getElementById(root);\r

  \  let areaColors = {};\r

  \  for (const a of areas) {\r

  \    let bg = (a.style.backgroundColor = pals[ihue][idarkness]);\r

  \    a.style.color = colorIdealText(bg);\r

  \    areaColors[a.id] = { bg: bg, fg: a.style.color, ihue: ihue, idarkness:
  idarkness };\r

  \    idarkness += 1;\r

  \    if (idarkness >= pals[0].length - 2) idarkness = 1;\r

  \    ihue = (ihue + 1) % pals.length;\r

  \  }\r

  \  return { hue0: hue0, nHues: nHues, pals: pals, mode: 'shades',
  areaColors: areaColors };\r

  }"
colorAreas_wild: "function colorAreas_wild(fromLocalStorage = true, { className
  = null } = {}) {\r

  \  let hues = getRandomHues(fromLocalStorage);\r

  \  let pals = getPaletteFromHues(hues);\r

  \  setSYS('pals', pals);\r

  \  setSYS('hues', hues);\r

  \  let ihue = 0;\r

  \  let idarkness = 1;\r

  \  setCSSVariable('--bgBody', pals[0][2]);\r

  \  setCSSButtonColors(pals, 0);\r

  \  let areaNames = [];\r

  \  if (isdef(className)) {\r

  \    let divs = document.getElementsByClassName(className);\r

  \    areaNames = divs.map(x => x.id);\r

  \    console.log(divs, areaNames);\r

  \  } else {\r

  \    areaNames = getSYS('baseAreaNames');\r

  \  }\r

  \  console.log(areaNames);\r

  \  for (const areaName of areaNames) {\r

  \    if (isdef(className)) {\r

  \      let d = document.getElementById(areaName);\r

  \      a.style.backgroundColor = randomColor();\r

  \      let fg = colorIdealText(bg);\r

  \      continue;\r

  \    }\r

  \    let areaInfo = getArea(areaName);\r

  \    let a = areaInfo.div;\r

  \    let bg = pals[ihue][idarkness];\r

  \    a.style.backgroundColor = bg;\r

  \    areaInfo.bg = bg;\r

  \    let fg = colorIdealText(bg);\r

  \    a.style.color = fg;\r

  \    areaInfo.fg = fg;\r

  \    areaInfo.idarkness = idarkness;\r

  \    areaInfo.ihue = ihue;\r

  \    idarkness += 1;\r

  \    if (idarkness >= pals[0].length - 2) idarkness = 1;\r

  \    ihue = (ihue + 1) % pals.length;\r

  \  }\r

  }"
colorAreasBlend: "function colorAreasBlend(c1, c2, areaClass = 'area', root =
  'root') {\r

  \  c1 = colorFrom(c1);\r

  \  c2 = colorFrom(c2);\r

  \  let pb = colorPalBlend(c1, c2);\r

  \  let pals = [];\r

  \  for (const c of pb) {\r

  \    let pal = colorPalShade(c);\r

  \    pals.push(pal);\r

  \  }\r

  \  let ihue = 0;\r

  \  let idarkness = 1;\r

  \  setCSSButtonColors(pals, 0);\r

  \  let areas = document.getElementsByClassName(areaClass);\r

  \  let grid = document.getElementById(root);\r

  \  grid.style.backgroundColor = pals[pals.length - 1][0];\r

  \  for (const a of areas) {\r

  \    let bg = (a.style.backgroundColor = pals[ihue][idarkness]);\r

  \    a.style.color = colorIdealText(bg);\r

  \    idarkness += 1;\r

  \    if (idarkness >= pals[0].length - 2) idarkness = 1;\r

  \    ihue = (ihue + 4) % pals.length;\r

  \  }\r

  \  return pals;\r

  }"
colorAreasN: "function colorAreasN(hue0 = 120, nHues = 25, areaClass = 'area',
  root = 'root') {\r

  \  let hues = [];\r

  \  let hueDiff = Math.round(360 / nHues);\r

  \  let h = hue0;\r

  \  for (let i = 0; i < nHues; i++) {\r

  \    hues.push(h);\r

  \    h += hueDiff;\r

  \  }\r

  \  let pals = [];\r

  \  for (const hue of hues) {\r

  \    let c = colorFrom(colorFromHue(hue));\r

  \    let pal = colorPalShade(c);\r

  \    pals.push(pal);\r

  \  }\r

  \  let ihue = 0;\r

  \  let idarkness = 1;\r

  \  setCSSVariable('--bgBody', pals[0][2]);\r

  \  setCSSButtonColors(pals, 0);\r

  \  let areas = document.getElementsByClassName(areaClass);\r

  \  let grid = document.getElementById(root);\r

  \  let areaColors = {};\r

  \  for (const a of areas) {\r

  \    let bg = (a.style.backgroundColor = pals[ihue][idarkness]);\r

  \    a.style.color = colorIdealText(bg);\r

  \    areaColors[a.id] = { bg: bg, fg: a.style.color, ihue: ihue, idarkness:
  idarkness };\r

  \    idarkness += 1;\r

  \    if (idarkness >= pals[0].length - 2) idarkness = 1;\r

  \    ihue = (ihue + 1) % pals.length;\r

  \  }\r

  \  return { hue0: hue0, nHues: nHues, pals: pals, mode: 'shades',
  areaColors: areaColors };\r

  }"
colorAreasOppositesBlend: "function colorAreasOppositesBlend(hue = 120,
  areaClass = 'area', root = 'root') {\r

  \  let hueOpp = (hue + 180) % 360;\r

  \  let c1 = colorFromHue(hue);\r

  \  let c2 = colorFromHue(hueOpp);\r

  \  colorAreasBlend(c1, c2, areaClass, root);\r

  }"
colorAreasRandomBlend: "function colorAreasRandomBlend(areaClass = 'area', root
  = 'root') {\r

  \  let c1 = randomColor();\r

  \  let c2 = randomColor();\r

  \  colorAreasBlend(c1, c2, areaClass, root);\r

  }"
colorArrToString: "function colorArrToString(r, g, b) {\r

  \  return 'rgb(' + r + ',' + g + ',' + b + ')';\r

  }"
colorB: "function colorB(cAny) {\r

  \  let rgb = colorRGB(cAny, true);\r

  \  return rgb.b;\r

  }"
colorBlend: "function colorBlend(zero1, c0, c1, log = true) {\r

  \  c0 = colorFrom(c0);\r

  \  c1 = colorFrom(c1);\r

  \  return pSBC(zero1, c0, c1, log);\r

  }"
colorBright: "function colorBright(c, percent) {\r

  \  let hex = colorHex(c);\r

  \  hex = hex.replace(/^\\s*#|\\s*$/g, '');\r

  \  if (hex.length == 3) {\r

  \    hex = hex.replace(/(.)/g, '$1$1');\r

  \  }\r

  \  var r = parseInt(hex.substr(0, 2), 16),\r

  \    g = parseInt(hex.substr(2, 2), 16),\r

  \    b = parseInt(hex.substr(4, 2), 16);\r

  \  return '#' +\r

  \    ((0 | (1 << 8) + r + (256 - r) * percent / 100).toString(16)).substr(1)
  +\r

  \    ((0 | (1 << 8) + g + (256 - g) * percent / 100).toString(16)).substr(1)
  +\r

  \    ((0 | (1 << 8) + b + (256 - b) * percent /
  100).toString(16)).substr(1);\r

  }"
colorChannelMixer: "function colorChannelMixer(colorChannelA, colorChannelB,
  amountToMix) {\r

  \  var channelA = colorChannelA * amountToMix;\r

  \  var channelB = colorChannelB * (1 - amountToMix);\r

  \  return parseInt(channelA + channelB);\r

  }"
colorChildren: "function colorChildren(strid, setFg = true) {\r

  \  for (const spid of strid.ids) {\r

  \    colorElem(spid, setFg);\r

  \  }\r

  }"
colorChrome: "function colorChrome() {\r

  \  let pals = S.pals;\r

  \  setCSSVariable('--bgTabs', pals[0][3]);\r

  \  setCSSVariable('--bgBody', pals[0][2]);\r

  \  setCSSButtonColors(pals, 0);\r

  }"
colorDark: "function colorDark(c, percent = 50, log = true) {\r

  \  if (nundef(c)) c = rColor(); else c = colorFrom(c);\r

  \  let zero1 = -percent / 100;\r

  \  return pSBC(zero1, c, undefined, !log);\r

  }"
colorDarker: "function colorDarker(c, zero1 = .8, log = true) {\r

  \  c = colorFrom(c);\r

  \  return pSBC(-zero1, c, undefined, !log);\r

  }"
colorElem: "function colorElem(id, setFg = true) {\r

  \  let spa = getVisual(id);\r

  \  if (!('spa' in spa.isa)) return;\r

  \  let bg = S.pals[spa.iPalette][spa.ipal];\r

  \  let elem = M.uis[id];\r

  \  if (isdef(spa.cssColor)) {\r

  \    setCSSVariable(spa.cssColor, bg);\r

  \  } else {\r

  \    elem.style.backgroundColor = fg;\r

  \  }\r

  \  if (setFg) {\r

  \    let fg = colorIdealText(bg);\r

  \    elem.style.color = fg;\r

  \  }\r

  }"
colorFrom: "function colorFrom(cAny, a, allowHsl = false) {\r

  \  if (isString(cAny)) {\r

  \    if (cAny[0] == '#') {\r

  \      if (a == undefined) return cAny;\r

  \      cAny = cAny.substring(0, 7);\r

  \      return cAny + (a == 1 ? '' : alphaToHex(a));\r

  \    } else if (isdef(ColorDi) && lookup(ColorDi, [cAny])) {\r

  \      let c = ColorDi[cAny].c;\r

  \      if (a == undefined) return c;\r

  \      c = c.substring(0, 7);\r

  \      return c + (a == 1 ? '' : alphaToHex(a));\r

  \    } else if (startsWith(cAny, 'rand')) {\r

  \      let spec = capitalize(cAny.substring(4));\r

  \      if (isdef(window['color' + spec])) {\r

  \        c = window['color' + spec]();\r

  \      } else c = rColor();\r

  \      if (a == undefined) return c;\r

  \      return c + (a == 1 ? '' : alphaToHex(a));\r

  \    } else if (startsWith(cAny, 'linear')) {\r

  \      return cAny;\r

  \    } else if (cAny[0] == 'r' && cAny[1] == 'g') {\r

  \      if (a == undefined) return cAny;\r

  \      if (cAny[3] == 'a') {\r

  \        if (a < 1) {\r

  \          return stringBeforeLast(cAny, ',') + ',' + a + ')';\r

  \        } else {\r

  \          let parts = cAny.split(',');\r

  \          let r = firstNumber(parts[0]);\r

  \          return 'rgb(' + r + ',' + parts[1] + ',' + parts[2] + ')';\r

  \        }\r

  \      } else {\r

  \        if (a < 1) {\r

  \          return 'rgba' + cAny.substring(3, cAny.length - 1) + ',' + a +
  ')';\r

  \        } else {\r

  \          return cAny;\r

  \        }\r

  \      }\r

  \    } else if (cAny[0] == 'h' && cAny[1] == 's') {\r

  \      if (allowHsl) {\r

  \        if (a == undefined) return cAny;\r

  \        if (cAny[3] == 'a') {\r

  \          if (a < 1) {\r

  \            return stringBeforeLast(cAny, ',') + ',' + a + ')';\r

  \          } else {\r

  \            let parts = cAny.split(',');\r

  \            let r = firstNumber(parts[0]);\r

  \            return 'hsl(' + r + ',' + parts[1] + ',' + parts[2] + ')';\r

  \          }\r

  \        } else {\r

  \          return a == 1 ? cAny : 'hsla' + cAny.substring(3, cAny.length -
  1) + ',' + a + ')';\r

  \        }\r

  \      } else {\r

  \        if (cAny[3] == 'a') {\r

  \          cAny = HSLAToRGBA(cAny);\r

  \        } else {\r

  \          cAny = HSLToRGB(cAny);\r

  \        }\r

  \        return colorFrom(cAny, a, false);\r

  \      }\r

  \    } else {\r

  \      ensureColorDict();\r

  \      let c = ColorDi[cAny];\r

  \      if (nundef(c)) {\r

  \        if (startsWith(cAny, 'rand')) {\r

  \          let spec = cAny.substring(4);\r

  \          if (isdef(window['color' + spec])) {\r

  \            c = window['color' + spec](res);\r

  \          } else c = rColor();\r

  \        } else {\r

  \          console.log('color not available:', cAny);\r

  \          throw new Error('color not found: ' + cAny)\r

  \          return '#00000000';\r

  \        }\r

  \      } else c = c.c;\r

  \      if (a == undefined) return c;\r

  \      c = c.substring(0, 7);\r

  \      return c + (a == 1 ? '' : alphaToHex(a));\r

  \    }\r

  \  } else if (Array.isArray(cAny)) {\r

  \    if (cAny.length == 3 && isNumber(cAny[0])) {\r

  \      let r = cAny[0];\r

  \      let g = cAny[1];\r

  \      let b = cAny[2];\r

  \      return a == undefined || a == 1 ? `rgb(${r},${g},${b})` :
  `rgba(${r},${g},${b},${a})`;\r

  \    } else {\r

  \      return rChoose(cAny);\r

  \    }\r

  \  } else if (typeof cAny == 'object') {\r

  \    if ('h' in cAny) {\r

  \      let hslString = '';\r

  \      if (a == undefined || a == 1) {\r

  \        hslString = `hsl(${cAny.h},${Math.round(cAny.s <= 1.0 ? cAny.s *
  100 : cAny.s)}%,${Math.round(cAny.l <= 1.0 ? cAny.l * 100 : cAny.l)}%)`;\r

  \      } else {\r

  \        hslString = `hsla(${cAny.h},${Math.round(cAny.s <= 1.0 ? cAny.s *
  100 : cAny.s)}%,${Math.round(cAny.l <= 1.0 ? cAny.l * 100 :
  cAny.l)}%,${a})`;\r

  \      }\r

  \      if (allowHsl) {\r

  \        return hslString;\r

  \      } else {\r

  \        return colorFrom(hslString, a, allowHsl);\r

  \      }\r

  \    } else if ('r' in cAny) {\r

  \      if (a !== undefined && a < 1) {\r

  \        return `rgba(${cAny.r},${cAny.g},${cAny.b},${a})`;\r

  \      } else {\r

  \        return `rgb(${cAny.r},${cAny.g},${cAny.b})`;\r

  \      }\r

  \    }\r

  \  }\r

  }"
colorFromHSL: "function colorFromHSL(hue, sat = 100, lum = 50) {\r

  \  return hslToHex(valf(hue, rHue()), sat, lum);\r

  }"
colorFromHue: "function colorFromHue(h, s = 100, l = 50, asObject = false) {\r

  \  if (asObject) return { h: h, s: s, l: l }; else return
  `hsl(${h},${s},${l})`;\r

  }"
colorG: "function colorG(cAny) {\r

  \  let rgb = colorRGB(cAny, true);\r

  \  return rgb.g;\r

  }"
colorHex: "function colorHex(cAny) {\r

  \  let c = colorFrom(cAny);\r

  \  if (c[0] == '#') {\r

  \    return c;\r

  \  } else {\r

  \    let res = pSBC(0, c, 'c');\r

  \    return res;\r

  \  }\r

  }"
colorHex_RGBAToHex9: "function colorHex_RGBAToHex9(cAny) {\r

  \  let c = colorFrom(cAny);\r

  \  if (c[0] == '#') {\r

  \    return c;\r

  \  } else if (c[3] == '(') {\r

  \    return RGBToHex7(c);\r

  \  } else {\r

  \    let res = RGBAToHex9(c);\r

  \    return res;\r

  \  }\r

  }"
colorHSL: "function colorHSL(cAny, asObject = false) {\r

  \  let res = colorFrom(cAny, undefined, true);\r

  \  let shsl = res;\r

  \  if (res[0] == '#') {\r

  \    if (res.length == 9) {\r

  \      shsl = hexAToHSLA(res);\r

  \    } else if (res.length == 7) {\r

  \      shsl = hexToHSL(res);\r

  \    }\r

  \  } else if (res[0] == 'r') {\r

  \    if (res[3] == 'a') {\r

  \      shsl = RGBAToHSLA(res);\r

  \    } else {\r

  \      shsl = RGBToHSL(res);\r

  \    }\r

  \  }\r

  \  let n = allNumbers(shsl);\r

  \  if (asObject) {\r

  \    return { h: n[0], s: n[1] / 100, l: n[2] / 100, a: n.length > 3 ? n[3]
  : 1 };\r

  \  } else {\r

  \    return shsl;\r

  \  }\r

  }"
colorHSLBuild: function colorHSLBuild(hue, sat = 100, lum = 50) { let result =
  "hsl(" + hue + ',' + sat + '%,' + lum + '%)'; return result; }
colorHue: function colorHue(cAny) { let hsl = colorHSL(cAny, true); return hsl.h; }
colorHueWheel: "function colorHueWheel(contrastTo, minDiff = 25, mod = 30, start
  = 0) {\r

  \  let hc = colorHue(contrastTo);\r

  \  let wheel = [];\r

  \  while (start < 360) {\r

  \    let d1 = Math.abs((start + 360) - hc);\r

  \    let d2 = Math.abs((start) - hc);\r

  \    let d3 = Math.abs((start - 360) - hc);\r

  \    let min = Math.min(d1, d2, d3);\r

  \    if (min > minDiff) wheel.push(start);\r

  \    start += mod;\r

  \  }\r

  \  return wheel;\r

  }"
colorIdealText: "function colorIdealText(bg, grayPreferred = false) {\r

  \  let rgb = colorRGB(bg, true);\r

  \  const nThreshold = 105;\r

  \  let r = rgb.r;\r

  \  let g = rgb.g;\r

  \  let b = rgb.b;\r

  \  var bgDelta = r * 0.299 + g * 0.587 + b * 0.114;\r

  \  var foreColor = 255 - bgDelta < nThreshold ? 'black' : 'white';\r

  \  if (grayPreferred) foreColor = 255 - bgDelta < nThreshold ? 'dimgray' :
  'snow';\r

  \  return foreColor;\r

  }"
colorLabelDiv: function colorLabelDiv(size) { return o => labelDiv(o.label,
  o.color, size, size); }
colorLabelRow: "function colorLabelRow(pool, loc, o, oid, path, omap) {\r

  \  let size = LABEL_SZ, gap = 4;\r

  \  let olist = mapOMap(omap);\r

  \  if (isEmpty(olist)) return;\r

  \  olist = olist.map(item => ({ color: convertToColor(item.key), label:
  convertToLabel(item.value) }));\r

  \  let uis = getUis(olist, colorLabelDiv(size));\r

  \  let area = stage2_prepArea(loc);\r

  \  let container = stage3_prepContainer(area); mColor(container, 'white');\r

  \  stage4_layout(uis, container, size, size, gap, layoutRow);\r

  }"
colorLight: "function colorLight(c, percent = 20, log = true) {\r

  \  if (nundef(c)) {\r

  \    return colorFromHSL(rHue(), 100, 85);\r

  \  } else c = colorFrom(c);\r

  \  let zero1 = percent / 100;\r

  \  return pSBC(zero1, c, undefined, !log);\r

  }"
colorLighter: "function colorLighter(c, zero1 = .2, log = true) {\r

  \  c = colorFrom(c);\r

  \  return pSBC(zero1, c, undefined, !log);\r

  }"
colorLum: "function colorLum(cAny) {\r

  \  let hsl = colorHSL(cAny, true);\r

  \  return hsl.l;\r

  }"
colorMap: "function colorMap(spec) {\r

  \  const Colormap = {\r

  \    \"jet\": [{ \"index\": 0, \"rgb\": [0, 0, 131] }, { \"index\": 0.125,
  \"rgb\": [0, 60, 170] }, { \"index\": 0.375, \"rgb\": [5, 255, 255] }, {
  \"index\": 0.625, \"rgb\": [255, 255, 0] }, { \"index\": 0.875, \"rgb\": [250,
  0, 0] }, { \"index\": 1, \"rgb\": [128, 0, 0] }],\r

  \    \"hsv\": [{ \"index\": 0, \"rgb\": [255, 0, 0] }, { \"index\": 0.169,
  \"rgb\": [253, 255, 2] }, { \"index\": 0.173, \"rgb\": [247, 255, 2] }, {
  \"index\": 0.337, \"rgb\": [0, 252, 4] }, { \"index\": 0.341, \"rgb\": [0,
  252, 10] }, { \"index\": 0.506, \"rgb\": [1, 249, 255] }, { \"index\": 0.671,
  \"rgb\": [2, 0, 253] }, { \"index\": 0.675, \"rgb\": [8, 0, 253] }, {
  \"index\": 0.839, \"rgb\": [255, 0, 251] }, { \"index\": 0.843, \"rgb\": [255,
  0, 245] }, { \"index\": 1, \"rgb\": [255, 0, 6] }],\r

  \    \"hot\": [{ \"index\": 0, \"rgb\": [0, 0, 0] }, { \"index\": 0.3,
  \"rgb\": [230, 0, 0] }, { \"index\": 0.6, \"rgb\": [255, 210, 0] }, {
  \"index\": 1, \"rgb\": [255, 255, 255] }],\r

  \    \"spring\": [{ \"index\": 0, \"rgb\": [255, 0, 255] }, { \"index\": 1,
  \"rgb\": [255, 255, 0] }],\r

  \    \"summer\": [{ \"index\": 0, \"rgb\": [0, 128, 102] }, { \"index\": 1,
  \"rgb\": [255, 255, 102] }],\r

  \    \"autumn\": [{ \"index\": 0, \"rgb\": [255, 0, 0] }, { \"index\": 1,
  \"rgb\": [255, 255, 0] }],\r

  \    \"winter\": [{ \"index\": 0, \"rgb\": [0, 0, 255] }, { \"index\": 1,
  \"rgb\": [0, 255, 128] }],\r

  \    \"bone\": [{ \"index\": 0, \"rgb\": [0, 0, 0] }, { \"index\": 0.376,
  \"rgb\": [84, 84, 116] }, { \"index\": 0.753, \"rgb\": [169, 200, 200] }, {
  \"index\": 1, \"rgb\": [255, 255, 255] }],\r

  \    \"copper\": [{ \"index\": 0, \"rgb\": [0, 0, 0] }, { \"index\": 0.804,
  \"rgb\": [255, 160, 102] }, { \"index\": 1, \"rgb\": [255, 199, 127] }],\r

  \    \"greys\": [{ \"index\": 0, \"rgb\": [0, 0, 0] }, { \"index\": 1,
  \"rgb\": [255, 255, 255] }],\r

  \    \"yignbu\": [{ \"index\": 0, \"rgb\": [8, 29, 88] }, { \"index\":
  0.125, \"rgb\": [37, 52, 148] }, { \"index\": 0.25, \"rgb\": [34, 94, 168] },
  { \"index\": 0.375, \"rgb\": [29, 145, 192] }, { \"index\": 0.5, \"rgb\": [65,
  182, 196] }, { \"index\": 0.625, \"rgb\": [127, 205, 187] }, { \"index\":
  0.75, \"rgb\": [199, 233, 180] }, { \"index\": 0.875, \"rgb\": [237, 248, 217]
  }, { \"index\": 1, \"rgb\": [255, 255, 217] }],\r

  \    \"greens\": [{ \"index\": 0, \"rgb\": [0, 68, 27] }, { \"index\":
  0.125, \"rgb\": [0, 109, 44] }, { \"index\": 0.25, \"rgb\": [35, 139, 69] }, {
  \"index\": 0.375, \"rgb\": [65, 171, 93] }, { \"index\": 0.5, \"rgb\": [116,
  196, 118] }, { \"index\": 0.625, \"rgb\": [161, 217, 155] }, { \"index\":
  0.75, \"rgb\": [199, 233, 192] }, { \"index\": 0.875, \"rgb\": [229, 245, 224]
  }, { \"index\": 1, \"rgb\": [247, 252, 245] }],\r

  \    \"yiorrd\": [{ \"index\": 0, \"rgb\": [128, 0, 38] }, { \"index\":
  0.125, \"rgb\": [189, 0, 38] }, { \"index\": 0.25, \"rgb\": [227, 26, 28] }, {
  \"index\": 0.375, \"rgb\": [252, 78, 42] }, { \"index\": 0.5, \"rgb\": [253,
  141, 60] }, { \"index\": 0.625, \"rgb\": [254, 178, 76] }, { \"index\": 0.75,
  \"rgb\": [254, 217, 118] }, { \"index\": 0.875, \"rgb\": [255, 237, 160] }, {
  \"index\": 1, \"rgb\": [255, 255, 204] }],\r

  \    \"bluered\": [{ \"index\": 0, \"rgb\": [0, 0, 255] }, { \"index\": 1,
  \"rgb\": [255, 0, 0] }],\r

  \    \"rdbu\": [{ \"index\": 0, \"rgb\": [5, 10, 172] }, { \"index\": 0.35,
  \"rgb\": [106, 137, 247] }, { \"index\": 0.5, \"rgb\": [190, 190, 190] }, {
  \"index\": 0.6, \"rgb\": [220, 170, 132] }, { \"index\": 0.7, \"rgb\": [230,
  145, 90] }, { \"index\": 1, \"rgb\": [178, 10, 28] }],\r

  \    \"picnic\": [{ \"index\": 0, \"rgb\": [0, 0, 255] }, { \"index\": 0.1,
  \"rgb\": [51, 153, 255] }, { \"index\": 0.2, \"rgb\": [102, 204, 255] }, {
  \"index\": 0.3, \"rgb\": [153, 204, 255] }, { \"index\": 0.4, \"rgb\": [204,
  204, 255] }, { \"index\": 0.5, \"rgb\": [255, 255, 255] }, { \"index\": 0.6,
  \"rgb\": [255, 204, 255] }, { \"index\": 0.7, \"rgb\": [255, 153, 255] }, {
  \"index\": 0.8, \"rgb\": [255, 102, 204] }, { \"index\": 0.9, \"rgb\": [255,
  102, 102] }, { \"index\": 1, \"rgb\": [255, 0, 0] }],\r

  \    \"rainbow\": [{ \"index\": 0, \"rgb\": [150, 0, 90] }, { \"index\":
  0.125, \"rgb\": [0, 0, 200] }, { \"index\": 0.25, \"rgb\": [0, 25, 255] }, {
  \"index\": 0.375, \"rgb\": [0, 152, 255] }, { \"index\": 0.5, \"rgb\": [44,
  255, 150] }, { \"index\": 0.625, \"rgb\": [151, 255, 0] }, { \"index\": 0.75,
  \"rgb\": [255, 234, 0] }, { \"index\": 0.875, \"rgb\": [255, 111, 0] }, {
  \"index\": 1, \"rgb\": [255, 0, 0] }],\r

  \    \"portland\": [{ \"index\": 0, \"rgb\": [12, 51, 131] }, { \"index\":
  0.25, \"rgb\": [10, 136, 186] }, { \"index\": 0.5, \"rgb\": [242, 211, 56] },
  { \"index\": 0.75, \"rgb\": [242, 143, 56] }, { \"index\": 1, \"rgb\": [217,
  30, 30] }],\r

  \    \"blackbody\": [{ \"index\": 0, \"rgb\": [0, 0, 0] }, { \"index\": 0.2,
  \"rgb\": [230, 0, 0] }, { \"index\": 0.4, \"rgb\": [230, 210, 0] }, {
  \"index\": 0.7, \"rgb\": [255, 255, 255] }, { \"index\": 1, \"rgb\": [160,
  200, 255] }],\r

  \    \"earth\": [{ \"index\": 0, \"rgb\": [0, 0, 130] }, { \"index\": 0.1,
  \"rgb\": [0, 180, 180] }, { \"index\": 0.2, \"rgb\": [40, 210, 40] }, {
  \"index\": 0.4, \"rgb\": [230, 230, 50] }, { \"index\": 0.6, \"rgb\": [120,
  70, 20] }, { \"index\": 1, \"rgb\": [255, 255, 255] }],\r

  \    \"electric\": [{ \"index\": 0, \"rgb\": [0, 0, 0] }, { \"index\": 0.15,
  \"rgb\": [30, 0, 100] }, { \"index\": 0.4, \"rgb\": [120, 0, 100] }, {
  \"index\": 0.6, \"rgb\": [160, 90, 0] }, { \"index\": 0.8, \"rgb\": [230, 200,
  0] }, { \"index\": 1, \"rgb\": [255, 250, 220] }],\r

  \    \"alpha\": [{ \"index\": 0, \"rgb\": [255, 255, 255, 0] }, { \"index\":
  1, \"rgb\": [255, 255, 255, 1] }],\r

  \    \"viridis\": [{ \"index\": 0, \"rgb\": [68, 1, 84] }, { \"index\":
  0.13, \"rgb\": [71, 44, 122] }, { \"index\": 0.25, \"rgb\": [59, 81, 139] }, {
  \"index\": 0.38, \"rgb\": [44, 113, 142] }, { \"index\": 0.5, \"rgb\": [33,
  144, 141] }, { \"index\": 0.63, \"rgb\": [39, 173, 129] }, { \"index\": 0.75,
  \"rgb\": [92, 200, 99] }, { \"index\": 0.88, \"rgb\": [170, 220, 50] }, {
  \"index\": 1, \"rgb\": [253, 231, 37] }],\r

  \    \"inferno\": [{ \"index\": 0, \"rgb\": [0, 0, 4] }, { \"index\": 0.13,
  \"rgb\": [31, 12, 72] }, { \"index\": 0.25, \"rgb\": [85, 15, 109] }, {
  \"index\": 0.38, \"rgb\": [136, 34, 106] }, { \"index\": 0.5, \"rgb\": [186,
  54, 85] }, { \"index\": 0.63, \"rgb\": [227, 89, 51] }, { \"index\": 0.75,
  \"rgb\": [249, 140, 10] }, { \"index\": 0.88, \"rgb\": [249, 201, 50] }, {
  \"index\": 1, \"rgb\": [252, 255, 164] }],\r

  \    \"magma\": [{ \"index\": 0, \"rgb\": [0, 0, 4] }, { \"index\": 0.13,
  \"rgb\": [28, 16, 68] }, { \"index\": 0.25, \"rgb\": [79, 18, 123] }, {
  \"index\": 0.38, \"rgb\": [129, 37, 129] }, { \"index\": 0.5, \"rgb\": [181,
  54, 122] }, { \"index\": 0.63, \"rgb\": [229, 80, 100] }, { \"index\": 0.75,
  \"rgb\": [251, 135, 97] }, { \"index\": 0.88, \"rgb\": [254, 194, 135] }, {
  \"index\": 1, \"rgb\": [252, 253, 191] }],\r

  \    \"plasma\": [{ \"index\": 0, \"rgb\": [13, 8, 135] }, { \"index\":
  0.13, \"rgb\": [75, 3, 161] }, { \"index\": 0.25, \"rgb\": [125, 3, 168] }, {
  \"index\": 0.38, \"rgb\": [168, 34, 150] }, { \"index\": 0.5, \"rgb\": [203,
  70, 121] }, { \"index\": 0.63, \"rgb\": [229, 107, 93] }, { \"index\": 0.75,
  \"rgb\": [248, 148, 65] }, { \"index\": 0.88, \"rgb\": [253, 195, 40] }, {
  \"index\": 1, \"rgb\": [240, 249, 33] }],\r

  \    \"warm\": [{ \"index\": 0, \"rgb\": [125, 0, 179] }, { \"index\": 0.13,
  \"rgb\": [172, 0, 187] }, { \"index\": 0.25, \"rgb\": [219, 0, 170] }, {
  \"index\": 0.38, \"rgb\": [255, 0, 130] }, { \"index\": 0.5, \"rgb\": [255,
  63, 74] }, { \"index\": 0.63, \"rgb\": [255, 123, 0] }, { \"index\": 0.75,
  \"rgb\": [234, 176, 0] }, { \"index\": 0.88, \"rgb\": [190, 228, 0] }, {
  \"index\": 1, \"rgb\": [147, 255, 0] }],\r

  \    \"cool\": [{ \"index\": 0, \"rgb\": [125, 0, 179] }, { \"index\": 0.13,
  \"rgb\": [116, 0, 218] }, { \"index\": 0.25, \"rgb\": [98, 74, 237] }, {
  \"index\": 0.38, \"rgb\": [68, 146, 231] }, { \"index\": 0.5, \"rgb\": [0,
  204, 197] }, { \"index\": 0.63, \"rgb\": [0, 247, 146] }, { \"index\": 0.75,
  \"rgb\": [0, 255, 88] }, { \"index\": 0.88, \"rgb\": [40, 255, 8] }, {
  \"index\": 1, \"rgb\": [147, 255, 0] }],\r

  \    \"rainbow-soft\": [{ \"index\": 0, \"rgb\": [125, 0, 179] }, {
  \"index\": 0.1, \"rgb\": [199, 0, 180] }, { \"index\": 0.2, \"rgb\": [255, 0,
  121] }, { \"index\": 0.3, \"rgb\": [255, 108, 0] }, { \"index\": 0.4, \"rgb\":
  [222, 194, 0] }, { \"index\": 0.5, \"rgb\": [150, 255, 0] }, { \"index\": 0.6,
  \"rgb\": [0, 255, 55] }, { \"index\": 0.7, \"rgb\": [0, 246, 150] }, {
  \"index\": 0.8, \"rgb\": [50, 167, 222] }, { \"index\": 0.9, \"rgb\": [103,
  51, 235] }, { \"index\": 1, \"rgb\": [124, 0, 186] }],\r

  \    \"bathymetry\": [{ \"index\": 0, \"rgb\": [40, 26, 44] }, { \"index\":
  0.13, \"rgb\": [59, 49, 90] }, { \"index\": 0.25, \"rgb\": [64, 76, 139] }, {
  \"index\": 0.38, \"rgb\": [63, 110, 151] }, { \"index\": 0.5, \"rgb\": [72,
  142, 158] }, { \"index\": 0.63, \"rgb\": [85, 174, 163] }, { \"index\": 0.75,
  \"rgb\": [120, 206, 163] }, { \"index\": 0.88, \"rgb\": [187, 230, 172] }, {
  \"index\": 1, \"rgb\": [253, 254, 204] }],\r

  \    \"cdom\": [{ \"index\": 0, \"rgb\": [47, 15, 62] }, { \"index\": 0.13,
  \"rgb\": [87, 23, 86] }, { \"index\": 0.25, \"rgb\": [130, 28, 99] }, {
  \"index\": 0.38, \"rgb\": [171, 41, 96] }, { \"index\": 0.5, \"rgb\": [206,
  67, 86] }, { \"index\": 0.63, \"rgb\": [230, 106, 84] }, { \"index\": 0.75,
  \"rgb\": [242, 149, 103] }, { \"index\": 0.88, \"rgb\": [249, 193, 135] }, {
  \"index\": 1, \"rgb\": [254, 237, 176] }],\r

  \    \"chlorophyll\": [{ \"index\": 0, \"rgb\": [18, 36, 20] }, { \"index\":
  0.13, \"rgb\": [25, 63, 41] }, { \"index\": 0.25, \"rgb\": [24, 91, 59] }, {
  \"index\": 0.38, \"rgb\": [13, 119, 72] }, { \"index\": 0.5, \"rgb\": [18,
  148, 80] }, { \"index\": 0.63, \"rgb\": [80, 173, 89] }, { \"index\": 0.75,
  \"rgb\": [132, 196, 122] }, { \"index\": 0.88, \"rgb\": [175, 221, 162] }, {
  \"index\": 1, \"rgb\": [215, 249, 208] }],\r

  \    \"density\": [{ \"index\": 0, \"rgb\": [54, 14, 36] }, { \"index\":
  0.13, \"rgb\": [89, 23, 80] }, { \"index\": 0.25, \"rgb\": [110, 45, 132] }, {
  \"index\": 0.38, \"rgb\": [120, 77, 178] }, { \"index\": 0.5, \"rgb\": [120,
  113, 213] }, { \"index\": 0.63, \"rgb\": [115, 151, 228] }, { \"index\": 0.75,
  \"rgb\": [134, 185, 227] }, { \"index\": 0.88, \"rgb\": [177, 214, 227] }, {
  \"index\": 1, \"rgb\": [230, 241, 241] }],\r

  \    \"freesurface-blue\": [{ \"index\": 0, \"rgb\": [30, 4, 110] }, {
  \"index\": 0.13, \"rgb\": [47, 14, 176] }, { \"index\": 0.25, \"rgb\": [41,
  45, 236] }, { \"index\": 0.38, \"rgb\": [25, 99, 212] }, { \"index\": 0.5,
  \"rgb\": [68, 131, 200] }, { \"index\": 0.63, \"rgb\": [114, 156, 197] }, {
  \"index\": 0.75, \"rgb\": [157, 181, 203] }, { \"index\": 0.88, \"rgb\": [200,
  208, 216] }, { \"index\": 1, \"rgb\": [241, 237, 236] }],\r

  \    \"freesurface-red\": [{ \"index\": 0, \"rgb\": [60, 9, 18] }, {
  \"index\": 0.13, \"rgb\": [100, 17, 27] }, { \"index\": 0.25, \"rgb\": [142,
  20, 29] }, { \"index\": 0.38, \"rgb\": [177, 43, 27] }, { \"index\": 0.5,
  \"rgb\": [192, 87, 63] }, { \"index\": 0.63, \"rgb\": [205, 125, 105] }, {
  \"index\": 0.75, \"rgb\": [216, 162, 148] }, { \"index\": 0.88, \"rgb\": [227,
  199, 193] }, { \"index\": 1, \"rgb\": [241, 237, 236] }],\r

  \    \"oxygen\": [{ \"index\": 0, \"rgb\": [64, 5, 5] }, { \"index\": 0.13,
  \"rgb\": [106, 6, 15] }, { \"index\": 0.25, \"rgb\": [144, 26, 7] }, {
  \"index\": 0.38, \"rgb\": [168, 64, 3] }, { \"index\": 0.5, \"rgb\": [188,
  100, 4] }, { \"index\": 0.63, \"rgb\": [206, 136, 11] }, { \"index\": 0.75,
  \"rgb\": [220, 174, 25] }, { \"index\": 0.88, \"rgb\": [231, 215, 44] }, {
  \"index\": 1, \"rgb\": [248, 254, 105] }],\r

  \    \"par\": [{ \"index\": 0, \"rgb\": [51, 20, 24] }, { \"index\": 0.13,
  \"rgb\": [90, 32, 35] }, { \"index\": 0.25, \"rgb\": [129, 44, 34] }, {
  \"index\": 0.38, \"rgb\": [159, 68, 25] }, { \"index\": 0.5, \"rgb\": [182,
  99, 19] }, { \"index\": 0.63, \"rgb\": [199, 134, 22] }, { \"index\": 0.75,
  \"rgb\": [212, 171, 35] }, { \"index\": 0.88, \"rgb\": [221, 210, 54] }, {
  \"index\": 1, \"rgb\": [225, 253, 75] }],\r

  \    \"phase\": [{ \"index\": 0, \"rgb\": [145, 105, 18] }, { \"index\":
  0.13, \"rgb\": [184, 71, 38] }, { \"index\": 0.25, \"rgb\": [186, 58, 115] },
  { \"index\": 0.38, \"rgb\": [160, 71, 185] }, { \"index\": 0.5, \"rgb\": [110,
  97, 218] }, { \"index\": 0.63, \"rgb\": [50, 123, 164] }, { \"index\": 0.75,
  \"rgb\": [31, 131, 110] }, { \"index\": 0.88, \"rgb\": [77, 129, 34] }, {
  \"index\": 1, \"rgb\": [145, 105, 18] }],\r

  \    \"salinity\": [{ \"index\": 0, \"rgb\": [42, 24, 108] }, { \"index\":
  0.13, \"rgb\": [33, 50, 162] }, { \"index\": 0.25, \"rgb\": [15, 90, 145] }, {
  \"index\": 0.38, \"rgb\": [40, 118, 137] }, { \"index\": 0.5, \"rgb\": [59,
  146, 135] }, { \"index\": 0.63, \"rgb\": [79, 175, 126] }, { \"index\": 0.75,
  \"rgb\": [120, 203, 104] }, { \"index\": 0.88, \"rgb\": [193, 221, 100] }, {
  \"index\": 1, \"rgb\": [253, 239, 154] }],\r

  \    \"temperature\": [{ \"index\": 0, \"rgb\": [4, 35, 51] }, { \"index\":
  0.13, \"rgb\": [23, 51, 122] }, { \"index\": 0.25, \"rgb\": [85, 59, 157] }, {
  \"index\": 0.38, \"rgb\": [129, 79, 143] }, { \"index\": 0.5, \"rgb\": [175,
  95, 130] }, { \"index\": 0.63, \"rgb\": [222, 112, 101] }, { \"index\": 0.75,
  \"rgb\": [249, 146, 66] }, { \"index\": 0.88, \"rgb\": [249, 196, 65] }, {
  \"index\": 1, \"rgb\": [232, 250, 91] }],\r

  \    \"turbidity\": [{ \"index\": 0, \"rgb\": [34, 31, 27] }, { \"index\":
  0.13, \"rgb\": [65, 50, 41] }, { \"index\": 0.25, \"rgb\": [98, 69, 52] }, {
  \"index\": 0.38, \"rgb\": [131, 89, 57] }, { \"index\": 0.5, \"rgb\": [161,
  112, 59] }, { \"index\": 0.63, \"rgb\": [185, 140, 66] }, { \"index\": 0.75,
  \"rgb\": [202, 174, 88] }, { \"index\": 0.88, \"rgb\": [216, 209, 126] }, {
  \"index\": 1, \"rgb\": [233, 246, 171] }],\r

  \    \"velocity-blue\": [{ \"index\": 0, \"rgb\": [17, 32, 64] }, {
  \"index\": 0.13, \"rgb\": [35, 52, 116] }, { \"index\": 0.25, \"rgb\": [29,
  81, 156] }, { \"index\": 0.38, \"rgb\": [31, 113, 162] }, { \"index\": 0.5,
  \"rgb\": [50, 144, 169] }, { \"index\": 0.63, \"rgb\": [87, 173, 176] }, {
  \"index\": 0.75, \"rgb\": [149, 196, 189] }, { \"index\": 0.88, \"rgb\": [203,
  221, 211] }, { \"index\": 1, \"rgb\": [254, 251, 230] }],\r

  \    \"velocity-green\": [{ \"index\": 0, \"rgb\": [23, 35, 19] }, {
  \"index\": 0.13, \"rgb\": [24, 64, 38] }, { \"index\": 0.25, \"rgb\": [11, 95,
  45] }, { \"index\": 0.38, \"rgb\": [39, 123, 35] }, { \"index\": 0.5, \"rgb\":
  [95, 146, 12] }, { \"index\": 0.63, \"rgb\": [152, 165, 18] }, { \"index\":
  0.75, \"rgb\": [201, 186, 69] }, { \"index\": 0.88, \"rgb\": [233, 216, 137]
  }, { \"index\": 1, \"rgb\": [255, 253, 205] }],\r

  \    \"cubehelix\": [{ \"index\": 0, \"rgb\": [0, 0, 0] }, { \"index\":
  0.07, \"rgb\": [22, 5, 59] }, { \"index\": 0.13, \"rgb\": [60, 4, 105] }, {
  \"index\": 0.2, \"rgb\": [109, 1, 135] }, { \"index\": 0.27, \"rgb\": [161, 0,
  147] }, { \"index\": 0.33, \"rgb\": [210, 2, 142] }, { \"index\": 0.4,
  \"rgb\": [251, 11, 123] }, { \"index\": 0.47, \"rgb\": [255, 29, 97] }, {
  \"index\": 0.53, \"rgb\": [255, 54, 69] }, { \"index\": 0.6, \"rgb\": [255,
  85, 46] }, { \"index\": 0.67, \"rgb\": [255, 120, 34] }, { \"index\": 0.73,
  \"rgb\": [255, 157, 37] }, { \"index\": 0.8, \"rgb\": [241, 191, 57] }, {
  \"index\": 0.87, \"rgb\": [224, 220, 93] }, { \"index\": 0.93, \"rgb\": [218,
  241, 142] }, { \"index\": 1, \"rgb\": [227, 253, 198] }]\r

  \  };\r

  \  var indicies, fromrgba, torgba, nsteps, cmap, colormap, format, nshades,
  colors, alpha, i;\r

  \  if (!spec) spec = {};\r

  \  nshades = (spec.nshades || 72) - 1;\r

  \  format = spec.format || 'hex';\r

  \  colormap = spec.colormap;\r

  \  if (!colormap) colormap = 'jet';\r

  \  if (typeof colormap === 'string') {\r

  \    colormap = colormap.toLowerCase();\r

  \    if (!Colormap[colormap]) {\r

  \      throw Error(colormap + ' not a supported colorscale');\r

  \    }\r

  \    cmap = Colormap[colormap];\r

  \  } else if (Array.isArray(colormap)) {\r

  \    cmap = colormap.slice();\r

  \  } else {\r

  \    throw Error('unsupported colormap option', colormap);\r

  \  }\r

  \  if (cmap.length > nshades + 1) {\r

  \    throw new Error(\r

  \      colormap + ' map requires nshades to be at least size ' +
  cmap.length\r

  \    );\r

  \  }\r

  \  if (!Array.isArray(spec.alpha)) {\r

  \    if (typeof spec.alpha === 'number') {\r

  \      alpha = [spec.alpha, spec.alpha];\r

  \    } else {\r

  \      alpha = [1, 1];\r

  \    }\r

  \  } else if (spec.alpha.length !== 2) {\r

  \    alpha = [1, 1];\r

  \  } else {\r

  \    alpha = spec.alpha.slice();\r

  \  }\r

  \  indicies = cmap.map(c => {\r

  \    return Math.round(c.index * nshades);\r

  \  });\r

  \  alpha[0] = Math.min(Math.max(alpha[0], 0), 1);\r

  \  alpha[1] = Math.min(Math.max(alpha[1], 0), 1);\r

  \  var steps = cmap.map((c, i) => {\r

  \    var index = cmap[i].index\r

  \    var rgba = cmap[i].rgb.slice();\r

  \    if (rgba.length === 4 && rgba[3] >= 0 && rgba[3] <= 1) {\r

  \      return rgba\r

  \    }\r

  \    rgba[3] = alpha[0] + (alpha[1] - alpha[0]) * index;\r

  \    return rgba\r

  \  })\r

  \  var colors = []\r

  \  for (i = 0; i < indicies.length - 1; ++i) {\r

  \    nsteps = indicies[i + 1] - indicies[i];\r

  \    fromrgba = steps[i];\r

  \    torgba = steps[i + 1];\r

  \    for (var j = 0; j < nsteps; j++) {\r

  \      var amt = j / nsteps\r

  \      colors.push([\r

  \        Math.round(lerp(fromrgba[0], torgba[0], amt)),\r

  \        Math.round(lerp(fromrgba[1], torgba[1], amt)),\r

  \        Math.round(lerp(fromrgba[2], torgba[2], amt)),\r

  \        lerp(fromrgba[3], torgba[3], amt)\r

  \      ])\r

  \    }\r

  \  }\r

  \  colors.push(cmap[cmap.length - 1].rgb.concat(alpha[1]))\r

  \  if (format === 'hex') colors = colors.map(rgb2hex);\r

  \  else if (format === 'rgbaString') colors = colors.map(rgbaStr);\r

  \  else if (format === 'float') colors = colors.map(rgb2float);\r

  \  return colors;\r

  }"
colorMellow: "function colorMellow(c, zero1 = .3, factorLum = .5) {\r

  \  hsl = colorHSL(c, true);\r

  \  let res = colorFromHue(hsl.h, zero1, hsl.l * factorLum);\r

  \  return res;\r

  }"
colorMix: "function colorMix(c1, c2, percent = 50) {\r

  \  return pSBC(percent / 100, colorHex(c1), colorHex(c2), true);\r

  \  let o1 = colorRGB(c1, true); let rgbA = [o1.r, o1.g, o1.b];\r

  \  let o2 = colorRGB(c2, true); let rgbB = [o2.r, o2.g, o2.b];\r

  \  amountToMix = percent / 100;\r

  \  var r = colorChannelMixer(rgbA[0], rgbB[0], amountToMix);\r

  \  var g = colorChannelMixer(rgbA[1], rgbB[1], amountToMix);\r

  \  var b = colorChannelMixer(rgbA[2], rgbB[2], amountToMix);\r

  \  return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\r

  }"
colorMixer: "function colorMixer(rgbA, rgbB, amountToMix) {\r

  \  var r = colorChannelMixer(rgbA[0], rgbB[0], amountToMix);\r

  \  var g = colorChannelMixer(rgbA[1], rgbB[1], amountToMix);\r

  \  var b = colorChannelMixer(rgbA[2], rgbB[2], amountToMix);\r

  \  return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\r

  }"
colorNameToHexString: "function colorNameToHexString(str) {\r

  \  var ctx = document.createElement('canvas').getContext('2d');\r

  \  ctx.fillStyle = str;\r

  \  return ctx.fillStyle;\r

  }"
colorNameToHslaString: "function colorNameToHslaString(str) {\r

  \  let hex = colorNameToHexString(str);\r

  \  let rgb = hexToRgb(hex);\r

  \  let hsv = rgbToHsv(rgb.r, rgb.g, rgb.b);\r

  \  let hsl = hsvToHsl(hsv.h, hsv.s, hsv.v);\r

  \  hsla = hslToHslaString(hsl.h, hsl.s, hsl.l, 1);\r

  \  return hsla;\r

  }"
colorNameToRgb: "function colorNameToRgb(str) {\r

  \  let hex = colorNameToHexString(str);\r

  \  let rgb = hexToRgb(hex);\r

  \  return rgb;\r

  }"
colorPalBlend: "function colorPalBlend(c1, c2) {\r

  \  let res = [];\r

  \  for (let frac = 0.1; frac <= 0.9; frac += 0.1) {\r

  \    let c = pSBC(frac, c1, c2, true);\r

  \    res.push(c);\r

  \  }\r

  \  return res;\r

  }"
colorPaletteFromImage: "function colorPaletteFromImage(img) {\r

  \  if (nundef(ColorThiefObject)) ColorThiefObject = new ColorThief();\r

  \  let palette0 = ColorThiefObject.getPalette(img);\r

  \  let palette = [];\r

  \  for (const pal of palette0) {\r

  \    let color = colorFrom(pal);\r

  \    palette.push(color);\r

  \  }\r

  \  return palette;\r

  }"
colorPaletteFromUrl: "function colorPaletteFromUrl(path) {\r

  \  let img = mCreateFrom(`<img src='${path}' />`);\r

  \  let pal = colorPaletteFromImage(img);\r

  \  return pal;\r

  }"
colorPalSet: "function colorPalSet(chStart, nHues = 2, { ch2, lum = 50, sat =
  100, lumSatMode = 1, blendMode = 1, a } = {}) {\r

  \  let h1 = chStart;\r

  \  let h2 = ch2;\r

  \  if (!isNumber(chStart)) {\r

  \    let hsl = colorHSL(chStart);\r

  \    h1 = hsl.h;\r

  \    lum = hsl.l;\r

  \    sat = hsl.s;\r

  \  }\r

  \  if (ch2 !== undefined && !isNumber(ch2)) {\r

  \    h2 = colorHue(ch2);\r

  \  }\r

  \  let palettes = [];\r

  \  let hueDiff = Math.floor(360 / nHues);\r

  \  let pal;\r

  \  for (let i = 0; i < nHues; i++) {\r

  \    if (h2 !== undefined) {\r

  \      pal = colorPalette(h1, { ch2: h2, lum: lum, sat: sat, a: a });\r

  \    } else {\r

  \      pal = colorPalette(h1, { ch2: undefined, lum: lum, sat: sat, a: a
  });\r

  \    }\r

  \    palettes.push(pal);\r

  \    h1 += hueDiff;\r

  \  }\r

  \  return palettes;\r

  }"
colorPalShade: "function colorPalShade(color) {\r

  \  let res = [];\r

  \  for (let frac = -0.8; frac <= 0.8; frac += 0.2) {\r

  \    let c = pSBC(frac, color, undefined, true);\r

  \    res.push(c);\r

  \  }\r

  \  return res;\r

  }"
colorPalShadeX: "function colorPalShadeX(color, n) {\r

  \  let res = [];\r

  \  let step = 1.6 / (n - 1);\r

  \  for (let frac = -0.8; frac <= 0.8; frac += step) {\r

  \    let c = pSBC(frac, color, undefined, true);\r

  \    res.push(c);\r

  \  }\r

  \  return res;\r

  }"
colorPrepper: "function colorPrepper(val) {\r

  \  return `<span
  style=\"color:${ColorDict[val].c}\">${ColorDict[val][G.language].toUpperCase(\
  )}</span>`;\r

  }"
colorR: "function colorR(cAny) {\r

  \  let rgb = colorRGB(cAny, true);\r

  \  return rgb.r;\r

  }"
colorRGB: "function colorRGB(cAny, asObject = false) {\r

  \  let res = colorFrom(cAny);\r

  \  let srgb = res;\r

  \  if (res[0] == '#') {\r

  \    srgb = pSBC(0, res, 'c');\r

  \  }\r

  \  let n = allNumbers(srgb);\r

  \  if (asObject) {\r

  \    return { r: n[0], g: n[1], b: n[2], a: n.length > 3 ? n[3] : 1 };\r

  \  } else {\r

  \    return srgb;\r

  \  }\r

  }"
colorRGBArrToHSLObject: "function colorRGBArrToHSLObject(rgbArr) {\r

  \  var r1 = Number(rgbArr[0]) / 255,\r

  \    g1 = Number(rgbArr[1]) / 255,\r

  \    b1 = Number(rgbArr[2]) / 255;\r

  \  var maxColor = Math.max(r1, g1, b1),\r

  \    minColor = Math.min(r1, g1, b1);\r

  \  var L = (maxColor + minColor) / 2,\r

  \    s = 0,\r

  \    H = 0;\r

  \  if (maxColor != minColor) {\r

  \    if (L < 0.5) {\r

  \      s = (maxColor - minColor) / (maxColor + minColor);\r

  \    } else {\r

  \      s = (maxColor - minColor) / (2.0 - maxColor - minColor);\r

  \    }\r

  \    if (r1 == maxColor) {\r

  \      H = (g1 - b1) / (maxColor - minColor);\r

  \    } else if (g1 == maxColor) {\r

  \      H = 2.0 + (b1 - r1) / (maxColor - minColor);\r

  \    } else {\r

  \      H = 4.0 + (r1 - g1) / (maxColor - minColor);\r

  \    }\r

  \  }\r

  \  L = L * 100;\r

  \  s = s * 100;\r

  \  H = H * 60;\r

  \  if (H < 0) {\r

  \    H += 360;\r

  \  }\r

  \  return { h: H, s: s, l: L };\r

  }"
colorRGBArrToString: "function colorRGBArrToString(r, g, b) {\r

  \  return 'rgb(' + r + ',' + g + ',' + b + ')';\r

  }"
colorSat: "function colorSat(cAny) {\r

  \  let hsl = colorHSL(cAny, true);\r

  \  return hsl.s;\r

  }"
colorsFromBFA: "function colorsFromBFA(bg, fg, alpha) {\r

  \  if (fg == 'contrast') {\r

  \    if (bg != 'inherit') bg = colorFrom(bg, alpha);\r

  \    fg = colorIdealText(bg);\r

  \  } else if (bg == 'contrast') {\r

  \    fg = colorFrom(fg);\r

  \    bg = colorIdealText(fg);\r

  \  } else {\r

  \    if (isdef(bg) && bg != 'inherit') bg = colorFrom(bg, alpha);\r

  \    if (isdef(fg) && fg != 'inherit') fg = colorFrom(fg);\r

  \  }\r

  \  return [bg, fg];\r

  }"
colorShade: "function colorShade(plusMinus1, color, log = true) {\r

  \  let c = colorFrom(color);\r

  \  return pSBC(plusMinus1, c, undefined, !log);\r

  }"
colorShades: "function colorShades(color) {\r

  \  let res = [];\r

  \  for (let frac = -0.8; frac <= 0.8; frac += 0.2) {\r

  \    let c = pSBC(frac, color, undefined, true);\r

  \    res.push(c);\r

  \  }\r

  \  return res;\r

  }"
colorSystem: "function colorSystem() {\r

  \  simpleColors(randomColor());\r

  }"
colorToFillStyle: "function colorToFillStyle(c) {\r

  \  var ctx = document.createElement('canvas').getContext('2d');\r

  \  ctx.fillStyle = c;\r

  \  return ctx.fillStyle;\r

  }"
colorTrans: "function colorTrans(cAny, alpha = 0.5) {\r

  \  return colorFrom(cAny, alpha);\r

  }"
colorTransPalette: "function colorTransPalette(color = '#000000') {\r

  \  let res = [];\r

  \  for (const alpha of [.0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1])
  res.push(colorTrans(color, alpha));\r

  \  return res;\r

  }"
colorWheel: "function colorWheel(contrastTo, n) {\r

  \  let hc = colorHue(contrastTo);\r

  \  let wheel = [];\r

  \  let start = hc;\r

  \  let inc = Math.round(360 / (n + 1));\r

  \  start += inc;\r

  \  for (let i = 0; i < n; i++) {\r

  \    wheel.push(start % 360);\r

  \    start += inc;\r

  \  }\r

  \  return wheel.map(x => colorHSLBuild(x));\r

  }"
combine: "function combine(combiner, f, g) {\r

  \  if (typeof f != 'function') f = x => f;\r

  \  if (typeof g != 'function') g = x => g;\r

  \  return combiner(f, g);\r

  }"
comp_: "function comp_(...arr) {\r

  \  return arr.join('_');\r

  }"
comp_1: "function comp_1(id) {\r

  \  return stringBefore(id, '_');\r

  }"
comp_2: "function comp_2(id) {\r

  \  return stringBefore(stringAfter(id, '_'), '_');\r

  }"
comp_last: "function comp_last(id) {\r

  \  return stringAfterLast(id, '_');\r

  }"
compactObjectString: "function compactObjectString(o) {\r

  \  let s = '';\r

  \  for (const k in o) {\r

  \    if (isSimple(o[k]) && !isComplexColor(o[k])) {\r

  \      if (isDict(o[k])) { error('!!!!!!!!!!!!!!!!isDict', o[k]); }\r

  \      s += k + ':' + o[k] + ' ';\r

  \    }\r

  \  }\r

  \  return s;\r

  }"
compare: "function compare(expected, actual) {\r

  \  let array1 = expected.slice()\r

  \  let array2 = actual.slice()\r

  \  return array1.length === array2.length && array1.sort().every(function
  (value, index) { return value === array2.sort()[index] });\r

  }"
complete_cell: "function complete_cell(board, r, c) {\r

  \  let used = [...get_row(board, r), ...get_column(board, c),
  ...get_square(board, square_coordinates[r][c])]\r

  \  let possibilities = []\r

  \  for (let p = 1; p <= 9; p++) {\r

  \    if (!used.includes(p)) {\r

  \      possibilities.push(p)\r

  \    }\r

  \  }\r

  \  if (possibilities.length == 1) {\r

  \    board[r][c] = possibilities[0]\r

  \    return true\r

  \  } else {\r

  \    board[r][c] = possibilities\r

  \    return false\r

  \  }\r

  }"
completelyRemoveServerObjectFromRsg: "function
  completelyRemoveServerObjectFromRsg(oid, R) {\r

  \  aushaengen(oid, R);\r

  \  R.deleteObject(oid);\r

  }"
complexCompare: "function complexCompare(obj1, obj2) {\r

  \  const obj1Keys = Object.keys(obj1);\r

  \  const obj2Keys = Object.keys(obj2);\r

  \  if (obj1Keys.length !== obj2Keys.length) {\r

  \    return false;\r

  \  }\r

  \  for (let objKey of obj1Keys) {\r

  \    if (obj1[objKey] !== obj2[objKey]) {\r

  \      if (typeof obj1[objKey] == \"object\" && typeof obj2[objKey] ==
  \"object\") {\r

  \        if (!isEqual(obj1[objKey], obj2[objKey])) {\r

  \          return false;\r

  \        }\r

  \      }\r

  \      else {\r

  \        return false;\r

  \      }\r

  \    }\r

  \  }\r

  \  return true;\r

  }"
complus: "function complus(...arr) {\r

  \  return arr.join('+');\r

  }"
complus1: "function complus1(id) {\r

  \  return stringBefore(id, '+');\r

  }"
complus2: "function complus2(id) {\r

  \  return stringBefore(stringAfter(id, '+'), '+');\r

  }"
compluslast: "function compluslast(id) {\r

  \  return stringAfterLast(id, '+');\r

  }"
component: "function component(width, height, color, x, y, type) {\r

  \  this.type = type;\r

  \  this.score = 0;\r

  \  this.width = width;\r

  \  this.height = height;\r

  \  this.speedX = 0;\r

  \  this.speedY = 0;\r

  \  this.x = x;\r

  \  this.y = y;\r

  \  this.gravity = 0;\r

  \  this.gravitySpeed = 0;\r

  \  this.draw = function () {\r

  \    ctx = myGameArea.context;\r

  \    if (this.type == 'text') {\r

  \      ctx.font = this.width + ' ' + this.height;\r

  \      ctx.fillStyle = color;\r

  \      ctx.fillText(this.text, this.x, this.y);\r

  \    } else {\r

  \      ctx.fillStyle = color;\r

  \      ctx.fillRect(this.x, this.y, this.width, this.height);\r

  \    }\r

  \  };\r

  \  this.newPos = function () {\r

  \    this.gravitySpeed += this.gravity;\r

  \    this.x += this.speedX;\r

  \    this.y += this.speedY + this.gravitySpeed;\r

  \    this.hitBottom();\r

  \  };\r

  \  this.hitBottom = function () {\r

  \    var rockbottom = myGameArea.canvas.height - this.height;\r

  \    if (this.y > rockbottom) {\r

  \      this.y = rockbottom;\r

  \      this.gravitySpeed = 0;\r

  \    }\r

  \  };\r

  \  this.crashWith = function (otherobj) {\r

  \    var myleft = this.x;\r

  \    var myright = this.x + this.width;\r

  \    var mytop = this.y;\r

  \    var mybottom = this.y + this.height;\r

  \    var otherleft = otherobj.x;\r

  \    var otherright = otherobj.x + otherobj.width;\r

  \    var othertop = otherobj.y;\r

  \    var otherbottom = otherobj.y + otherobj.height;\r

  \    var crash = true;\r

  \    if (mybottom < othertop || mytop > otherbottom || myright < otherleft
  || myleft > otherright) {\r

  \      crash = false;\r

  \    }\r

  \    return crash;\r

  \  };\r

  }"
compose: "function compose(itop, ichild, x, y) {\r

  \  mPosAbs()\r

  }"
composeFleetingMessage: "function composeFleetingMessage() {\r

  \  let lst = inputs;\r

  \  let msg = lst.map(x => x.letter).join(',');\r

  \  let edecl = lst.length > 1 ? 's ' : ' ';\r

  \  let ddecl = lst.length > 1 ? 'den' : 'die';\r

  \  let s = (currentLanguage == 'E' ? 'Type the letter' + edecl : 'Tippe ' +
  ddecl + ' Buchstaben ');\r

  \  return s + msg;\r

  }"
compute_elo_ranking: "function compute_elo_ranking(players, game) {\r

  \  players = sortBy(players, 'score');\r

  \  let buckets = {};\r

  \  for (const pl of players) {\r

  \    let sc = pl.score;\r

  \    if (nundef(buckets[sc])) buckets[sc] = [];\r

  \    buckets[sc].push(pl.name);\r

  \  }\r

  \  let nBuckets = get_keys(buckets).length;\r

  \  let elopart = 2 / (nBuckets - 1);\r

  \  let val = -1;\r

  \  for (const b in buckets) {\r

  \    for (const name of buckets[b]) {\r

  \      let elo = get_elo(name, game);\r

  \      set_elo(name, game, elo + val);\r

  \      console.log('user', name, 'with score', b, 'gets', val, 'added to
  elo!');\r

  \    }\r

  \    val += elopart;\r

  \  }\r

  }"
compute_hidden: "function compute_hidden(plname) {\r

  \  let [fen, uplayer] = [Z.fen, Z.uplayer];\r

  \  let pl = fen.players[plname];\r

  \  let hidden;\r

  \  if (isdef(fen.winners)) hidden = false;\r

  \  else if (Z.role == 'spectator') hidden = plname != uplayer;\r

  \  else if (Z.mode == 'hotseat') hidden = (pl.playmode == 'bot' || plname !=
  uplayer);\r

  \  else hidden = plname != Z.uname;\r

  \  return hidden;\r

  }"
computeClosure: "function computeClosure(symlist) {\r

  \  let keys = {};\r

  \  for (const k in CODE.di) { for (const k1 in CODE.di[k]) keys[k1] =
  CODE.di[k][k1]; }\r

  \  CODE.all = keys;\r

  \  CODE.keylist = Object.keys(keys)\r

  \  let inter = intersection(Object.keys(keys), Object.keys(window));\r

  \  let done = {};\r

  \  let tbd = valf(symlist, ['_start']);\r

  \  let MAX = 1007, i = 0;\r

  \  let alltext = '';\r

  \  while (!isEmpty(tbd)) {\r

  \    if (++i > MAX) break;\r

  \    let sym = tbd[0];\r

  \    let o = CODE.all[sym];\r

  \    if (nundef(o)) o = getObjectFromWindow(sym);\r

  \    if (o.type == 'var' && !o.name.startsWith('d') && o.name ==
  o.name.toLowerCase()) { tbd.shift(); continue; }\r

  \    if (o.type != 'func') { tbd.shift(); lookupSet(done, [o.type, sym], o);
  continue; }\r

  \    let olive = window[sym];\r

  \    if (nundef(olive)) { tbd.shift(); lookupSet(done, [o.type, sym], o);
  continue; }\r

  \    let text = olive.toString();\r

  \    if (!isEmpty(text)) alltext += text + '\\r\\n';\r

  \    let words = toWords(text, true);\r

  \    words = words.filter(x => text.includes(' ' + x));\r

  \    for (const w of words) {\r

  \      if (nundef(done[w]) && w != sym && isdef(CODE.all[w])) addIf(tbd,
  w);\r

  \    }\r

  \    tbd.shift();\r

  \    lookupSet(done, [o.type, sym], o);\r

  \  }\r

  \  let tres = '';\r

  \  for (const k of ['const', 'var', 'cla', 'func']) {\r

  \    console.log('done', k, done[k])\r

  \    let o = done[k]; if (nundef(o)) continue;\r

  \    let klist = get_keys(o);\r

  \    if (k == 'func') klist = sortCaseInsensitive(klist);\r

  \    for (const k1 of klist) {\r

  \      let code = CODE.justcode[k1];\r

  \      if (!isEmptyOrWhiteSpace(code)) tres += code + '\\r\\n';\r

  \    }\r

  \  }\r

  }"
computeColor: "function computeColor(c) { return (c == 'random') ? randomColor() : c; }"
computeColorX: "function computeColorX(c) {\r

  \  let res = c;\r

  \  if (isList(c)) return chooseRandom(c);\r

  \  else if (isString(c) && startsWith(c, 'rand')) {\r

  \    res = randomColor();\r

  \    let spec = c.substring(4);\r

  \    if (isdef(window['color' + spec])) {\r

  \      console.log('YES!');\r

  \      res = window['color' + spec](res);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
computePresentedKeys: "function computePresentedKeys(o, isTableObject) {\r

  \  let optin = isTableObject ? S.settings.table.optin :
  S.settings.player.optin;\r

  \  if (optin) return intersection(Object.keys(o), optin);\r

  \  let optout;\r

  \  if (S.settings.useExtendedOptout) {\r

  \    let keys = [];\r

  \    optout = S.settings.extendedOptout;\r

  \    for (const k in o) { if (optout[k]) continue; keys.push(k); }\r

  \    return keys;\r

  \  }\r

  \  optout = isTableObject ? S.settings.table.optout :
  S.settings.player.optout;\r

  \  for (const k in o) { if (optout[k]) continue; keys.push(k); }\r

  \  return keys;\r

  }"
consExpand: "function consExpand(o, keys, indent = 0) {\r

  \  console.log('.'.repeat(indent), o);\r

  \  for (const k in o) {\r

  \    if (!keys.includes(k)) continue;\r

  \    let oNew = o[k];\r

  \    console.log('.'.repeat(indent), k + ':')\r

  \    if (isList(oNew)) {\r

  \      for (const el of oNew) {\r

  \        consExpand(el, keys, indent + 2);\r

  \      }\r

  \    } else if (isDict(oNew)) {\r

  \      consExpand(oNew, keys, indent + 2);\r

  \    }\r

  \  }\r

  }"
consout: "function consout() {\r

  \  if (isTraceOn) console.log(...arguments);\r

  }"
consOutput: function consOutput() { console.log(...arguments); }
consoutt: "function consoutt() {\r

  \  if (isTraceOn) console.log(...arguments,
  getFunctionsNameThatCalledThisFunction());\r

  }"
contacts_2handleResult: "function contacts_2handleResult(result) {\r

  \  let d = mBy('dContacts');\r

  \  mCenterCenterFlex(d);\r

  \  d.innerHTML = JSON.parse(result).message;\r

  }"
containedInAny: "function containedInAny(el, ll) {\r

  \  for (const lst of ll) {\r

  \    if (lst.includes(el)) return true;\r

  \  }\r

  \  return false;\r

  }"
contains: function contains(s, sSub) { return
  s.toLowerCase().includes(sSub.toLowerCase()); }
containsAll: "function containsAll(arr, lst) {\r

  \  for (const el of lst) {\r

  \    if (!arr.includes(el)) return false;\r

  \  }\r

  \  return true;\r

  }"
containsAny: "function containsAny(arr, lst) {\r

  \  for (const x of lst) {\r

  \    if (arr.includes(x)) {\r

  \      return true;\r

  \    }\r

  \  }\r

  \  return false;\r

  }"
containsColorWord: "function containsColorWord(s) {\r

  \  let colors = ['old', 'blond', 'red', 'blue', 'green', 'purple', 'black',
  'brown', 'white', 'grey', 'gray', 'yellow', 'orange'];\r

  \  for (const c of colors) {\r

  \    if (s.toLowerCase().includes(c)) return false;\r

  \  }\r

  \  return true;\r

  }"
containsSet: "function containsSet(arr, lst) {\r

  \  return containsAll(arr, lst);\r

  }"
contentHallo: "function contentHallo(n, r) { return isdef(n.children) ? null :
  n.uid == '_2' ? 'HALLO' : 'WELT'; }"
contentNoParentContent: "function contentNoParentContent(x, R) {\r

  \  if (nundef(x.children)) return x.uid; else return null;\r

  }"
contentNoParentContentRootExtralong: "function
  contentNoParentContentRootExtralong(x, R) {\r

  \  if (nundef(x.children)) return x.uid;\r

  \  else if (x.uid == R.tree.uid) return 'hallo das ist ein super super super
  langer string let it go - unclutch!';\r

  \  else return null;\r

  }"
contentNoRootContent: "function contentNoRootContent(x, R) {\r

  \  if (x.uid == R.tree.uid) return null; else return x.uid;\r

  }"
contentRootExtralong: "function contentRootExtralong(x, R) {\r

  \  if (x.uid == R.tree.uid) return 'hallo das ist ein besonders langer
  string!!!';\r

  \  else return x.uid;\r

  }"
contentToElement: "function contentToElement(cont, styles, keepInLine = true)
  {\r

  \  let elem = cont;\r

  \  if (isString(cont)) {\r

  \    if (cont[0] === '<') {\r

  \      elem = createElementFromHtml(cont);\r

  \    } else {\r

  \      elem = mText(elem);\r

  \    }\r

  \  }\r

  \  if (keepInLine) styles['white-space'] = 'nowrap';\r

  \  mStyleX(elem, styles);\r

  \  return elem;\r

  }"
continue_after_error: "function continue_after_error() {\r

  \  dError.innerHTML = ''; if (isdef(DA.callback)) { DA.callback(); delete
  (DA.callback); }\r

  }"
continue_game_ending_process: "function continue_game_ending_process() {\r

  \  let game = Session.cur_game;\r

  \  let winners = Session.winners;\r

  \  if (nundef(Session.cur_table.scoring_complete)) {\r

  \    console.log('scoring...')\r

  \    decrease_handicap_if_winstreak(winners, game);\r

  \    Session.cur_table.scoring_complete = true;\r

  \  }\r

  \  to_server({ tid: Session.cur_tid, uname: Session.cur_user }, 'seen');\r

  }"
convert_from_row: "function convert_from_row(row) {\r

  \  for (const k in row) {\r

  \    let val = row[k];\r

  \    if (isNumber(val)) row[k] = Number(val);\r

  \    if (isString(val) && val[0] == '{') { row[k] = JSON.parse(val); }\r

  \    if (val == 'null') row[k] = null;\r

  \    if (k == 'players' && isString(row[k])) row[k] = val.split(',');\r

  \  }\r

  }"
convert_from_server: "function convert_from_server(obj) {\r

  \  if (isdef(obj.table)) convert_from_row(obj.table);\r

  \  if (isdef(obj.playerdata)) {\r

  \    for (const row of obj.playerdata) {\r

  \      convert_from_row(row);\r

  \    }\r

  \  }\r

  \  if (isdef(obj.moves)) {\r

  \    for (const row of obj.moves) {\r

  \      convert_from_row(row);\r

  \    }\r

  \  }\r

  }"
convert_to_range: "function convert_to_range(x, min1, max1, min2, max2) {\r

  \  return (x - min1) * ((max2 - min2) / (max1 - min1)) + min2;\r

  }"
convertGermanUhrzeitToNumbers: "function convertGermanUhrzeitToNumbers(w) {\r

  \  console.log('...', w)\r

  \  let parts = multiSplit(w, ' :');\r

  \  console.log('...parts', parts)\r

  \  let res = [];\r

  \  for (const p of parts) {\r

  \    let p1 = p.trim().toLowerCase();\r

  \    if (isNumber(p1)) res.push(Number(p1));\r

  \    else if (isdef(germanNumbers[p1])) res.push(germanNumbers[p1]);\r

  \  }\r

  \  return res;\r

  }"
convertTimesAndNumbersToWords: "function convertTimesAndNumbersToWords(w) {\r

  \  if (w.includes(':')) {\r

  \    let h = stringBefore(w, ':');\r

  \    let m = stringAfter(w, ':');\r

  \    let hn = Number(h);\r

  \    let mn = Number(m);\r

  \    let xlist = allIntegers(w);\r

  \    if (xlist.length == 2) {\r

  \      if (xlist[1] == 0) xlist = [xlist[0]];\r

  \      xlist = xlist.map(n => n.toString());\r

  \      let res1 = xlist.join('');\r

  \      w = res1;\r

  \    }\r

  \  }\r

  \  if (isNumber(w)) {\r

  \    let res = toWordsSpeechS(w);\r

  \    return res;\r

  \  }\r

  \  return w;\r

  }"
convertTimeStringToNumbers: "function convertTimeStringToNumbers(ts) {\r

  \  return allIntegers(ts);\r

  }"
convertToColor: "function convertToColor(x) {\r

  \  let res = SPEC.color[x];\r

  \  if (!res) {\r

  \    res = SPEC.color[x] = randomColor();\r

  \  }\r

  \  return res;\r

  }"
convertToGraphElements: "function convertToGraphElements(g1, house) {\r

  \  let vertices = house.rooms.map(x => Items[x]);\r

  \  let doors = [];\r

  \  for (const v of vertices) {\r

  \    v.center = getCenter(v.rect);\r

  \    v.center.x += v.rect.l - house.rect.l;\r

  \    v.center.y += v.rect.t - house.rect.t;\r

  \    g1.addNode(v, v.center);\r

  \    doors = union(doors, v.doors);\r

  \  }\r

  \  let centers = g1.getNodes().map(x => x.data('center'));\r

  \  g1.storePositions('prest', centers);\r

  \  let edges = doors.map(x => Items[x]).filter(x => x.rooms.length == 2);\r

  \  for (const e of edges) {\r

  \    if (e.rooms.length < 2) continue;\r

  \    e.source = e.rooms[0];\r

  \    e.target = e.rooms[1];\r

  \    g1.addEdge(e.source, e.target, e);\r

  \  }\r

  }"
convertToGraphElements_dep: "function convertToGraphElements_dep(g1, house) {\r

  \  let elements = { nodes: [], edges: [] };\r

  \  let vertices = house.rooms.map(x => Items[x]);\r

  \  let doors = [];\r

  \  for (const v of vertices) {\r

  \    v.center = getCenter(v.rect);\r

  \    elements.nodes.push({ data: v, position: v.center });\r

  \    doors = union(doors, v.doors);\r

  \  }\r

  \  let edges = doors.map(x => Items[x]).filter(x => x.rooms.length == 2);\r

  \  for (const e of edges) {\r

  \    if (e.rooms.length < 2) continue;\r

  \    e.source = e.rooms[0];\r

  \    e.target = e.rooms[1];\r

  \    elements.edges.push({ data: e });\r

  \  }\r

  \  return elements;\r

  }"
convertToLabel: "function convertToLabel(x) {\r

  \  let res = lookup(SPEC, ['label', x]);\r

  \  return res ? res : x;\r

  }"
convertToList: "function convertToList(x) {\r

  \  if (isList(x)) return x;\r

  \  if (isString(x) && x != '') return [x];\r

  \  return [];\r

  }"
convertToMS: "function convertToMS(p) {\r

  \  let res = undefined;\r

  \  if (isMS(p)) {\r

  \    res = p;\r

  \  } else if (isEvent(p)) {\r

  \    p = p.target;\r

  \    res = findParentWithId(p);\r

  \    res = MS.byId[res.id];\r

  \  } else if (isString(p)) {\r

  \    res = MS.byId[p];\r

  \  } else {\r

  \  }\r

  \  return res;\r

  }"
convertToRgba: "function convertToRgba(cAny, alpha = 1) {\r

  \  let a = alpha >= 0 && alpha <= 1 ? alpha : alpha / 100;\r

  \  testHelpers('type is', typeof cAny);\r

  \  if (isString(cAny)) {\r

  \    testHelpers('convertToRgba is a String', cAny);\r

  \    if (cAny[0] == '#') {\r

  \      let rgbObj = hexToRgb(cAny);\r

  \      return `rgba(${rgbObj.r},${rgbObj.g},${rgbObj.b},${a})`;\r

  \    } else if (startsWith(cAny, 'hsl') || startsWith(cAny, 'rgb')) {\r

  \      testHelpers('hsla or rgba color!', cAny);\r

  \      return cAny;\r

  \    } else if (cAny == 'transparent') {\r

  \      return cAny;\r

  \    } else {\r

  \      testHelpers('should be a color name!!!', cAny);\r

  \      let rgbObj = colorNameToRgb(cAny);\r

  \      return `rgba(${rgbObj.r},${rgbObj.g},${rgbObj.b},${a})`;\r

  \    }\r

  \  } else if (Array.isArray(cAny)) {\r

  \    if (cAny.length == 3) {\r

  \      let r = cAny[0];\r

  \      let g = cAny[1];\r

  \      let b = cAny[2];\r

  \      return `rgba(${r},${g},${b},${a})`;\r

  \    } else {\r

  \      testHelpers('convertToRgba: ERROR! NOT A COLOR:', cAny);\r

  \      return randomColor(100, 70, a);\r

  \    }\r

  \  }\r

  }"
convertUmlaute: "function convertUmlaute(w) {\r

  \  w = replaceAll(w, 'ue', 'ü');\r

  \  w = replaceAll(w, 'ae', 'ä');\r

  \  w = replaceAll(w, 'oe', 'ö');\r

  \  w = replaceAll(w, 'UE', 'Ü');\r

  \  w = replaceAll(w, 'AE', 'Ä');\r

  \  w = replaceAll(w, 'OE', 'Ö');\r

  \  w = replaceAll(w, 'ß', 'ss');\r

  \  return w;\r

  }"
copyKeys: "function copyKeys(ofrom, oto, except = {}, only = null) {\r

  \  let keys = isdef(only) ? only : Object.keys(ofrom);\r

  \  for (const k of keys) {\r

  \    if (isdef(except[k])) continue;\r

  \    oto[k] = ofrom[k];\r

  \  }\r

  \  return oto;\r

  }"
copyLinesFromTo: "function copyLinesFromTo(lines, iStart, iEnd, trimStart,
  trimEnd) {\r

  \  let block = isdef(trimStart) ? stringAfter(lines[iStart], '/*') :
  lines[iStart];\r

  \  iStart += 1;\r

  \  while (iStart < iEnd) {\r

  \    block += '\\n' + lines[iStart];\r

  \    iStart += 1;\r

  \  }\r

  \  if (isdef(trimEnd)) block = stringBefore(block, '*/');\r

  \  return block.trim();\r

  }"
copySimpleProps: function copySimpleProps(ofrom, oto = {}) { for (const k in
  ofrom) { if (isLiteral(k)) oto[k] = ofrom[k]; } return oto; }
correct_handsorting: "function correct_handsorting(hand, plname) {\r

  \  let pl = Z.fen.players[plname];\r

  \  let [cs, pls, locs] = [Clientdata.handsorting, pl.handsorting,
  localStorage.getItem('handsorting')];\r

  \  let s = cs ?? pls ?? locs ?? Config.games[Z.game].defaulthandsorting;\r

  \  hand = sort_cards(hand, s == 'suit', 'CDSH', true, Z.func.rankstr);\r

  \  return hand;\r

  }"
correctBlanks: "function correctBlanks() {\r

  \  let wrong = getWrongWords();\r

  \  if (nundef(TOList)) TOList = {};\r

  \  Selected.feedbackUI = wrong.map(x => iDiv(x));\r

  \  failPictureGoal();\r

  \  let t1 = setTimeout(removeMarkers, 1000);\r

  \  let t2 = setTimeout(() => wrong.map(x => { correctWordInput(x);
  animate(iDiv(x), 'komisch', 1300); }), 1000);\r

  \  TOList.correction = [t1, t2];\r

  \  return 2500;\r

  }"
correctFuncName: "function correctFuncName(specType) {\r

  \  switch (specType) {\r

  \    case 'list': specType = 'liste'; break;\r

  \    case 'dict': specType = 'dicti'; break;\r

  \    case undefined: specType = 'panel'; break;\r

  \  }\r

  \  return specType;\r

  }"
correctNumbersInString: "function correctNumbersInString(s, dec) {\r

  \  let parts = s.split('_');\r

  \  for (let i = 0; i < parts.length; i++) {\r

  \    let p = parts[i];\r

  \    if (isNumber(p)) {\r

  \      let n = Number(p);\r

  \      n -= dec;\r

  \      parts[i] = '' + n;\r

  \    }\r

  \  }\r

  \  let res = parts.join('_');\r

  \  return res;\r

  }"
correctPolys: "function correctPolys(polys, approx = 10) {\r

  \  let clusters = [];\r

  \  for (const p of polys) {\r

  \    for (const pt of p) {\r

  \      let found = false;\r

  \      for (const cl of clusters) {\r

  \        for (const v of cl) {\r

  \          let dx = Math.abs(v.x - pt.x);\r

  \          let dy = Math.abs(v.y - pt.y);\r

  \          if (dx < approx && dy < approx) {\r

  \            cl.push(pt);\r

  \            found = true;\r

  \            break;\r

  \          }\r

  \        }\r

  \        if (found) break;\r

  \      }\r

  \      if (!found) {\r

  \        clusters.push([pt]);\r

  \      }\r

  \    }\r

  \  }\r

  \  let vertices = [];\r

  \  for (const cl of clusters) {\r

  \    let sumx = 0;\r

  \    let sumy = 0;\r

  \    let len = cl.length;\r

  \    for (const pt of cl) {\r

  \      sumx += pt.x;\r

  \      sumy += pt.y;\r

  \    }\r

  \    vertices.push({ x: Math.round(sumx / len), y: Math.round(sumy / len)
  });\r

  \  }\r

  \  for (const p of polys) {\r

  \    for (const pt of p) {\r

  \      let found = false;\r

  \      for (const v of vertices) {\r

  \        let dx = Math.abs(v.x - pt.x);\r

  \        let dy = Math.abs(v.y - pt.y);\r

  \        if (dx < approx && dy < approx) {\r

  \          if (dx != 0 || dy != 0) {\r

  \            pt.x = v.x;\r

  \            pt.y = v.y;\r

  \          }\r

  \          found = true;\r

  \        }\r

  \        if (found) break;\r

  \      }\r

  \      if (!found) {\r

  \        error('point not found in vertices!!! ' + pt.x + ' ' + pt.y);\r

  \      }\r

  \    }\r

  \  }\r

  \  return vertices;\r

  }"
correctWordInput: function correctWordInput(winp) { winp.charInputs.map(x =>
  refillCharInput(x, x.letter)); }
countAll: "function countAll(s, scount) {\r

  \  let letters = toLetters(scount);\r

  \  function counter(total, ch) { if (letters.includes(ch)) return total + 1;
  else return total; }\r

  \  let res = [...s].reduce(counter, 0);\r

  \  return res;\r

  }"
countIndent: "function countIndent(s, ntab = 2) {\r

  \  let i = 0;\r

  \  let inc;\r

  \  while (!isEmpty(s)) {\r

  \    if (startsWith(s, '\\t')) { i += ntab; inc = ntab; }\r

  \    else if (s[0] == ' ') { i += 1; inc = 1; }\r

  \    else break;\r

  \    s = s.slice(1);\r

  \  }\r

  \  return i;\r

  }"
countLetters: "function countLetters(s, letter) {\r

  \  let n = 0;\r

  \  for (const ch of s) {\r

  \    if (ch == letter) n++;\r

  \  }\r

  \  return n;\r

  }"
cPortrait: "function cPortrait(dParent, styles = {}, id) {\r

  \  if (nundef(styles.h)) styles.h = Card.sz;\r

  \  if (nundef(styles.w)) styles.w = styles.h * .7;\r

  \  return cBlank(dParent, styles, id);\r

  }"
create_agent: "function create_agent(where, o = {}) {\r

  \  let res;\r

  \  if (is_map(where)) {\r

  \    res = L.marker(valf(o.center, where.options.center)).addTo(where);\r

  \  } else {\r

  \    res = mDiv(where, o);\r

  \  }\r

  \  return res;\r

  }"
create_ai_move: "function create_ai_move(data) {\r

  \  let newscore = Math.min(Session.winning_score, data.score + 1);\r

  \  console.log('AI score is', newscore);\r

  \  let newstate = data.state;\r

  \  let newdata = {\r

  \    tid: data.tid,\r

  \    player_status: newscore >= Session.winning_score ? 'done' : 'joined',\r

  \    score: newscore,\r

  \    state: newstate,\r

  \    uname: data.uname\r

  \  };\r

  \  return newdata;\r

  }"
create_bluff_input1: "function create_bluff_input1(dParent, arr, units = 1, sz,
  index) {\r

  \  let d = mDiv(dParent, { gap: 5, w: units * sz * 1.35 });
  mCenterFlex(d);\r

  \  for (const a of arr) {\r

  \    let da = mDiv(d, { align: 'center', wmin: 20, padding: 4, cursor:
  'pointer', rounding: 4, bg: units == 1 ? '#e4914b' : 'sienna', fg: 'contrast'
  }, null, a == 'T' ? '10' : a);\r

  \    da.onclick = () => input_to_anzeige1(a, index);\r

  \  }\r

  \  return d;\r

  }"
create_branch: "function create_branch(b, angle, len, color) {\r

  \  let root = C.root;\r

  \  let x = b.p2.x + Math.cos(angle) * len;\r

  \  let y = b.p2.y - Math.sin(angle) * len;\r

  \  let age = b.age + 1;\r

  \  let o = {\r

  \    done: false,\r

  \    p1: b.p2,\r

  \    p2: { x: x, y: y },\r

  \    x: x,\r

  \    y: y,\r

  \    t: 'branch',\r

  \    age: age,\r

  \    angle: angle,\r

  \    len: len,\r

  \    thickness: b.thickness * root.dthickness,\r

  \    color: color,\r

  \  };\r

  \  b.done = true;\r

  \  return o;\r

  }"
create_card_assets_c52: "function create_card_assets_c52() {\r

  \  let ranknames = { A: 'Ace', K: 'King', T: '10', J: 'Jack', Q: 'Queen'
  };\r

  \  let suitnames = { S: 'Spades', H: 'Hearts', C: 'Clubs', D: 'Diamonds'
  };\r

  \  let rankstr = '23456789TJQKA';\r

  \  let suitstr = 'SHDC';\r

  \  sz = 100;\r

  \  let di = {};\r

  \  for (const r of toLetters(rankstr)) {\r

  \    for (const s of toLetters(suitstr)) {\r

  \      let k = r + s;\r

  \      let info = di[k] = { key: k, val: 1, irank: rankstr.indexOf(r),
  isuit: suitstr.indexOf(s), rank: r, suit: s, color: RED, c52key: 'card_' + r +
  s, w: sz * .7, h: sz, sz: sz, ov: .25, friendly: `${isNumber(r) ? r :
  ranknames[r]} of ${suitnames[s]}`, short: `${r}${s}` };\r

  \      info.isort = info.isuit * 13 + info.irank;\r

  \    }\r

  \  }\r

  \  C52Cards = di;\r

  \  return di;\r

  }"
create_div: "function create_div(where, o = {}) {\r

  \  let res;\r

  \  if (is_map(where)) {\r

  \    let icon = L.divIcon({ className: 'my-div-icon' });\r

  \    var greenIcon = L.icon({\r

  \      iconUrl: 'leaf-green.png',\r

  \      shadowUrl: 'leaf-shadow.png',\r

  \      iconSize: [38, 95],\r

  \      shadowSize: [50, 64],\r

  \      iconAnchor: [22, 94],\r

  \      shadowAnchor: [4, 62],\r

  \      popupAnchor: [-3, -76]\r

  \    });\r

  \    res = L.marker(o.center, { icon: greenIcon }).addTo(map);\r

  \  } else {\r

  \    res = mDiv(where, o);\r

  \  }\r

  \  return res;\r

  }"
create_div_marker: "function create_div_marker(map, html, center, sz, offset)
  {\r

  \  let res = L.marker(center, { icon: L.divIcon({ iconAnchor: offset,
  className: `custom-div-icon ${sz}`, html: html }) }).addTo(map);\r

  \  return res;\r

  }"
create_fa: "function create_fa(map, key, center, styles = {}) {\r

  \  addKeys({ fz: 30 }, styles);\r

  \  let d = mCreate('i');\r

  \  mStyle(d, styles);\r

  \  mClass(d, `fa fa-${key}`);\r

  \  let dp = mCreate('div');\r

  \  mAppend(dp, d);\r

  \  let html = dp.innerHTML;\r

  \  let offset = [styles.fz / 2, styles.fz / 3];\r

  \  let className = `custom-div-icon`;\r

  \  let res = L.marker(center, { icon: L.divIcon({ iconAnchor: offset,
  className: className, html: html }) }).addTo(map);\r

  \  return res;\r

  }"
create_fen_deck: "function create_fen_deck(cardtype, num_decks = 1, num_jokers =
  0) {\r

  \  let arr = get_keys(C52Cards).map(x => x + cardtype);\r

  \  let newarr = [];\r

  \  while (num_decks > 0) { newarr = newarr.concat(arr); num_decks--; }\r

  \  while (num_jokers > 0) { newarr.push('*H' + cardtype); num_jokers--; }\r

  \  return newarr;\r

  }"
create_flower: "function create_flower() {\r\n}"
create_leaf: "function create_leaf(b, root) {\r

  \  let o = {\r

  \    done: true,\r

  \    p: b.p2,\r

  \    x: b.p2.x,\r

  \    y: b.p2.y,\r

  \    t: 'leaf',\r

  \    age: b.age + 1,\r

  \    len: b.len * root.dlen,\r

  \    angle: b.angle,\r

  \    thickness: 20,\r

  \    color: 'lawngreen',\r

  \  };\r

  \  b.done = true;\r

  \  return o;\r

  }"
create_map: "function create_map(o = {}) {\r

  \  addKeys({ maxBounds: [[-89.98155760646617, -180], [89.99346179538875,
  180]], key: 'osm', center: Geo.places.tuerkenschanzpark, zoom: 17, id: 'map'
  }, o);\r

  \  let info = Geo.layerInfo[o.key];\r

  \  o.layers = [isdef(info) ? L.tileLayer(info.url, info.options) :
  L.tileLayer('')];\r

  \  let map = L.map(o.id, o);\r

  \  return map;\r

  }"
create_marker: "function create_marker(text) {\r

  \  let d = mCreate('div');\r

  \  d.innerHTML = text;\r

  \  mStyle(d, { position: 'fixed', fz: 50 });\r

  \  document.body.appendChild(d);\r

  \  Markers.push(d);\r

  \  return d;\r

  }"
create_menu: "function create_menu(dParent, dir = 'h') {\r

  \  let d;\r

  \  if (dir == 'h') {\r

  \    d = dMenu = mDiv(dParent, { w: '100%', display: 'flex' });\r

  \  } else {\r

  \    d = dMenu = mDiv(dParent, { padding: 10, gap: 10, h: '100%', display:
  'flex', dir: dir });\r

  \  }\r

  \  mToolbar(['grow', 'clear'], handle_command, d, {}, { vmargin: 5 });\r

  \  mTogglebar({ jitter: false }, flag_toggle, { bg: 'lightgreen' }, { bg:
  '#eee' }, d);\r

  \  mLinebreak(dTable, 10);\r

  }"
create_new_table: "function create_new_table(user, game) {\r

  \  user = valf(user, Session.cur_user);\r

  \  game = valf(game, Session.cur_game);\r

  \  let opt = extract_game_options();\r

  \  let t = {};\r

  \  t.friendly = generate_friendly_table_name();\r

  \  t.game = Session.cur_game;\r

  \  t.host = user;\r

  \  t.players = opt.players;\r

  \  t.fen = GSpotitMulti.start_fen(t.players);\r

  \  t.status = 'created';\r

  \  t.player_init = '';\r

  \  DA.next = get_games;\r

  \  to_server(t, 'create_table');\r

  }"
create_new_table_and_join_all: "function create_new_table_and_join_all(user,
  game) {\r

  \  Session.cut_tid = Session.cur_table = null;\r

  \  let t = {};\r

  \  t.friendly = generate_friendly_table_name();\r

  \  t.game = 'gSpotit';\r

  \  t.host = Session.cur_user;\r

  \  t.players = valf(lookup(Session, ['game_options', 'players']),
  get_def_players_for_user(Session.cur_user));\r

  \  t.fen = 'noneed';\r

  \  t.options = valf(lookup(Session, ['game_options', 'game']), {});\r

  \  t.status = 'started';\r

  \  t.host_status = 'joined';\r

  \  t.player_status = 'joined';\r

  \  t.player_init = {};\r

  \  to_server(t, 'create_table_and_start');\r

  }"
create_nodes: "function create_nodes(r, pad, dmin) {\r

  \  let [xstart, ystart, w, h] = [r.x + pad, r.y + pad, r.w, r.h];\r

  \  let [x, y] = [xstart, ystart];\r

  \  let items = []; let [rows, cols, row, col] = [0, 0, 0, 0];\r

  \  while (y < h - dmin) {\r

  \    while (x < w - dmin) {\r

  \      let item = { w: 5, h: 5, iy: row, ix: col, bg: 'blue', position:
  'absolute', x: x, y: y };\r

  \      x += dmin;\r

  \      items.push(item);\r

  \      cols++; col++;\r

  \    }\r

  \    rows++; row++; col = 0;\r

  \    x = xstart;\r

  \    y += dmin;\r

  \  }\r

  \  return items;\r

  }"
create_pic_dict: "async function create_pic_dict(l, syms) {\r

  \  let edict = await route_path_text(`../base/assets/words/${l}dict.txt`);\r

  \  console.log('dict', edict);\r

  \  let lang = l.toUpperCase();\r

  \  let words = l == 'e' ? edict.split('\\r\\n') : edict.split('\\n');\r

  \  console.log('words', words);\r

  \  console.log('syms', syms);\r

  \  let wdi = {};\r

  \  for (const w of words) {\r

  \    let w1 = w.trim().toLowerCase();\r

  \    if (isEmpty(w1)) continue;\r

  \    wdi[w1] = true;\r

  \  }\r

  \  let slist = [];\r

  \  for (const skey in syms) {\r

  \    let e = syms[skey][lang];\r

  \    if (nundef(e)) continue;\r

  \    e = e.trim().toLowerCase();\r

  \    slist.push({ key: skey, w: e });\r

  \  }\r

  \  slist_sorted = sortBy(slist, 'w');\r

  \  console.log('slist sorted', slist_sorted);\r

  \  console.log(wdi);\r

  \  let edi = {};\r

  \  for (const o of slist_sorted) {\r

  \    let [e, skey] = [o.w, o.key];\r

  \    if (e in wdi) edi[e] = skey;\r

  \    else console.log('word', e, 'from syms not in dict!!!');\r

  \  }\r

  \  console.log('result', edi, Object.keys(edi).length);\r

  \  return edi;\r

  \  return;\r

  \  for (const skey in syms) {\r

  \    let e = syms[skey][lang];\r

  \    if (nundef(e)) continue;\r

  \    e = e.trim().toLowerCase();\r

  \    console.assert(isdef(e) && e == e.toLowerCase(), 'word in syms not
  lowercasse:' + e);\r

  \    if (e in wdi) edi[e] = skey;\r

  \    else console.log('word', e, 'from syms not in dict!!!');\r

  \  }\r

  \  console.log('result', edi, Object.keys(edi).length);\r

  \  return edi;\r

  }"
create_pic_dicts: "async function create_pic_dicts(list = ['e', 'd', 'f', 's'])
  {\r

  \  let syms = await route_path_yaml_dict('../base/assets/allSyms.yaml');\r

  \  for (const l of list) {\r

  \    let di = await create_pic_dict(l, syms);\r

  \    downloadAsYaml(di, l + 'picdict');\r

  \  }\r

  \  loader_off();\r

  }"
create_random_players: "function create_random_players(n = 1) {\r

  \  let colors = rWheel(n);\r

  \  let res = [{ name: 'mimi', playmode: 'human', color: colors[0] }];\r

  \  let names = rChoose(MyNames, n - 1);\r

  \  if (!isList(names)) names = [names];\r

  \  for (let i = 1; i < n; i++) {\r

  \    let pl = { name: names[i - 1], playmode: 'bot', color: colors[i],
  strategy: 'random' };\r

  \    res.push(pl);\r

  \  }\r

  \  return res;\r

  }"
create_score_table: "function create_score_table() {\r

  \  let t = Session.cur_table;\r

  \  let fen = t.fen;\r

  \  let dParent = mBy('dIntro');\r

  \  let d = mDiv(dParent, { margin: 'auto', w: 300, bg: 'red' });\r

  \  html = `<div style='text-align:center;margin-top:200px'>\r

  \  <table id='customers'><tr><th>player</th><th>score</th></tr>\r

  \  `;\r

  \  let plparts = fen.split(',');\r

  \  for (const pl of plparts) {\r

  \    html += `<tr><td>${stringBefore(pl, ':')}</td><td>${stringAfter(pl,
  ':')}</td></tr>`\r

  \  }\r

  \  html += '</table></div>';\r

  \  d.innerHTML = html;\r

  }"
create_set_card: "function create_set_card(fen, dParent, card_styles) {\r

  \  let myinfo = info_from_fen(fen);\r

  \  let info = { shape: 'circle', color: BLUE, num: 1, shading: 'solid',
  background: 'white', text: 'none' };\r

  \  copyKeys(myinfo, info);\r

  \  let card = draw_set_card(dParent, info, card_styles);\r

  \  card.fen = fen;\r

  \  return card;\r

  }"
create_sym: "function create_sym(map, key, center, sz, styles) {\r

  \  let d1 = mSym(key, null, styles);\r

  \  let html = d1.innerHTML;\r

  \  let [xoff, yoff] = sz == 'large' ? [136, 150] : sz == 'medium' ? [36, 40]
  : [16, 18];\r

  \  let offset = [xoff, yoff];\r

  \  return create_div_marker(map, html, center, sz, offset);\r

  }"
create_table: "function create_table(options, players) {\r

  \  Session.cur_tid = Session.cur_table = Selected = null;\r

  \  let gname = Session.cur_game;\r

  \  let t = {};\r

  \  t.friendly = generate_friendly_table_name();\r

  \  t.game = Session.cur_game;\r

  \  t.host = Session.cur_user;\r

  \  t.turn = 'none';\r

  \  t.players = valf(players, valf(lookup(Session, ['game_options',
  'players']), get_def_players_for_user(Session.cur_user)));\r

  \  t.options = valf(options, lookup(Session, ['game_options', 'game']));\r

  \  t.pl_options = get_player_options(t.players, gname);\r

  \  t.status = 'started';\r

  \  t.host_status = 'joined';\r

  \  t.player_status = 'joined';\r

  \  t.player_init = DB.games[gname].game_type == 'turn' ? null : {};\r

  \  if (gname == 'gPreinno') { t.fen = inno_setup(t.players); }\r

  \  else if (gname == 'gAristo') { t.fen = ari_setup(t.players); }\r

  \  return t;\r

  }"
create_toolbar: "function create_toolbar(map) {\r

  \  let d = map._controlContainer;\r

  \  console.log('control container', d);\r

  \  dMap = mDiv(d, { position: 'absolute', top: 0, left: 50, w: '100%', h:
  '100%' });\r

  \  dMap.style.zIndex = 12000;\r

  \  let toolbar = mDiv(dMap, { hmargin: 10, padding: 10, cursor: 'pointer' },
  null, null, 'top'); mFlexWrap(toolbar);\r

  \  return toolbar;\r

  }"
createAccountContent: "function createAccountContent(userdata) {\r

  \  DA.imageChanged = DA.colorChanged = false;\r

  \  return `\r

  \  <div id=\"dAccount\" style=\"max-width=500px; margin-top:10px;
  display:flex; animation: appear1 1s ease;justify-content:center;
  align-content:center\">\r

  \    <div id=\"error\">some text</div>\r

  \    <div style='text-align:center'>\r

  \      <form id=\"myform\" autocomplete=\"off\"
  style='text-align:center;background:${userdata.color}'>\r

  \        <span id='img_dd_instruction' style=\"font-size:11px;\">drag and
  drop an image to change</span><br>\r

  \        <img id=\"imgPreview\"
  onload='addColorPicker(\"${userdata.color}\");'
  src='${get_image_path(userdata)}' ondragover=\"handle_drag_and_drop(event)\"
  ondrop=\"handle_drag_and_drop(event)\"
  ondragleave=\"handle_drag_and_drop(event)\"\r

  \          style=\"height:200px;margin:10px;\" />\r

  \        <input id='iUsername' type=\"text\" name=\"motto\"
  placeholder='motto' value=\"${userdata.motto}\" autofocus\r

  \          onkeydown=\"if (event.keyCode ===
  13){event.preventDefault();collect_data(event);}\" />\r

  \        <br />\r

  \        <input id='save_settings_button' type=\"button\" value=\"Submit\"
  onclick=\"collect_data(event)\" ><br>\r

  \      </form>\r

  \  </div></div>\r

  \  `;\r

  }"
createAccountContent1: "function createAccountContent1(userdata) {\r

  \  var d = mBy(\"inner_left_panel\");\r

  \  clearElement(d);\r

  \  let d1 = mDiv(d, { w: '100%', matop: 10, animation: 'rotateIntoView 1s
  ease' });\r

  \  mCenterFlex(d1);\r

  \  let d2 = mDiv(d1, {}, 'error', 'hallo das ist ein error');\r

  \  let d3 = mDiv(d1, { align: 'center', bg: 'yellow' });\r

  \  let form = mCreate('form', { align: 'center', bg: 'red' }, 'myform');\r

  \  form.id = 'myform';\r

  \  form.setAttribute('autocomplete', 'off');\r

  \  form.onsubmit = (ev) => { ev.preventDefault(); collect_data(); }\r

  \  mAppend(d3, form);\r

  \  let sp1 = mSpan(form, { fz: 11 }, null, 'drag and drop an image to
  change');\r

  \  form.innerHTML += '<br>';\r

  \  DA.imageChanged = DA.colorChanged = false;\r

  \  let img = mImg(userdata.imagePath + '?=' + Date.now(), form, { h: 200,
  margin: 10 });\r

  \  img.onload = () => {\r

  \    let inp = mCreate('input');\r

  \    mAppend(form, inp);\r

  \    inp.setAttribute('type', 'text');\r

  \    inp.setAttribute('placeholder', 'username');\r

  \    inp.setAttribute('name', 'username');\r

  \    inp.setAttribute('id', 'iUsername');\r

  \    inp.setAttribute('value', userdata.username);\r

  \    inp.setAttribute('autofocus', true);\r

  \    inp.onkeydown = ev => {\r

  \      if (ev.keyCode === 13) {\r

  \        ev.preventDefault();\r

  \        console.log('WTF!!!!!!!!!!!!!!!!!!!!!!!!!!!!');\r

  \        collect_data(ev);\r

  \      }\r

  \    };\r

  \    form.innerHTML += '<br />';\r

  \    let picker = mColorPickerBehavior(U.settings.userColor, img, form,\r

  \      (a) => { console.log('new color is', a); DA.newColor = a;
  DA.colorChanged = true; },\r

  \      { w: 322, h: 45, bg: 'green', rounding: 6, margin: 'auto', align:
  'center' });\r

  \    form.innerHTML += `<input id='save_account_button' type=\"button\"
  value=\"Submit\" onclick=\"collect_data(event)\" ><br>`;\r

  \  };\r

  \  img.id = 'imgPreview';\r

  \  img.setAttribute('allowDrop', true);\r

  \  img.ondragover = img.ondrop = img.ondragleave = handle_drag_and_drop;\r

  }"
createAreas: "function createAreas(dGrid, areaNames, prefix,
  shadeAreaBackgrounds = false, showAreaNames = true) {\r

  \  console.log('creating areas', areaNames)\r

  \  let SPEC = {}; SPEC.areas = { T: 'dTrick', H: 'dHuman', A: 'dAI' };\r

  \  let palette = getTransPalette9();\r

  \  let ipal = 1;\r

  \  let result = [];\r

  \  for (const k in SPEC.areas) {\r

  \    let areaName = SPEC.areas[k];\r

  \    let dCell = mDiv(dGrid, { h: '100%', w: '100%', bg: 'random',
  'grid-area': k, });\r

  \    if (shadeAreaBackgrounds) { dCell.style.backgroundColor =
  palette[ipal]; ipal = (ipal + 1) % palette.length; }\r

  \    if (showAreaNames) {\r

  \      dCell = mTitledDiv(areaName, dCell, { bg: 'green', }, { h: '100%', w:
  '100%', bg: 'yellow', }, areaName)\r

  \    } else { dCell.id = areaName; }\r

  \    result.push({ name: areaName, div: dCell });\r

  \  }\r

  \  return result;\r

  \  for (const areaName of areaNames) {\r

  \    let d1 = document.createElement('div');\r

  \    let id = (isdef(prefix) ? prefix + '.' : '') + areaName;\r

  \    d1.id = id;\r

  \    d1.style.gridArea = areaName;\r

  \    mStyleX(d1, { bg: 'random' });\r

  \    d1.innerHTML = 'hallo'\r

  \    if (shadeAreaBackgrounds) { d1.style.backgroundColor =
  colorPalette[ipal]; ipal = (ipal + 1) % colorPalette.length; }\r

  \    if (showAreaNames) { d1.innerHTML = makeAreaNameDomel(areaName); }\r

  \    dGrid.appendChild(d1);\r

  \  }\r

  }"
createAreas_dep: "function createAreas_dep(d, areaNames, prefix,
  shadeAreaBackgrounds = false, showAreaNames = true) {\r

  \  console.log('creating areas', areaNames)\r

  \  let palette = getTransPalette9();\r

  \  let ipal = 1;\r

  \  for (const areaName of areaNames) {\r

  \    let d1 = document.createElement('div');\r

  \    let id = (isdef(prefix) ? prefix + '.' : '') + areaName;\r

  \    d1.id = id;\r

  \    d1.style.gridArea = areaName;\r

  \    mStyleX(d1, { bg: 'random' });\r

  \    d1.innerHTML = 'hallo'\r

  \    if (shadeAreaBackgrounds) { d1.style.backgroundColor =
  colorPalette[ipal]; ipal = (ipal + 1) % colorPalette.length; }\r

  \    if (showAreaNames) { d1.innerHTML = makeAreaNameDomel(areaName); }\r

  \    d.appendChild(d1);\r

  \  }\r

  }"
createArtificialSpecForBoardMemberIfNeeded: "function
  createArtificialSpecForBoardMemberIfNeeded(oid, o, R) {\r

  \  let key = R.getR(oid);\r

  \  if (!isEmpty(key)) {\r

  \    key = key[0];\r

  \  }\r

  \  else {\r

  \    key = getUID();\r

  \    R.lastSpec[key] = { cond: { obj_type: o.obj_type }, type: 'info' };\r

  \    R.addR(oid, key);\r

  \    R.updateR(key);\r

  \  }\r

  \  return key;\r

  }"
createBoard: "function createBoard(nui, R, area) {\r

  \  console.log('nui', nui, 'R', R, 'area', area);\r

  \  let [oid, boardType, r0, c0] = detectBoardOidAndType(nui.oid,
  nui.boardType, R);\r

  \  nui.oid = oid;\r

  \  nui.boardType = boardType;\r

  \  let baseIndex = { r0: r0, c0: c0 };\r

  \  nui.bi = window[nui.boardType](R.getO(nui.oid), R, baseIndex);\r

  \  generalGrid(nui, R, area);\r

  }"
createCardZone: "function createCardZone(id, label, labelPos = 'top', hCard =
  110) {\r

  \  let gap = 2;\r

  \  let dZone = mDiv(dTable, { padding: 10, align: 'center', rounding: 20
  });\r

  \  dZone.id = 'zone_' + id;\r

  \  let dLabel;\r

  \  if (isdef(label) && labelPos == 'top') {\r

  \    dLabel = mText(label, dZone, { display: 'inline-block', maleft: -10
  });\r

  \  }\r

  \  let dData = mDiv(dZone, { h: hCard + gap, align: 'center' });\r

  \  dData.id = 'data_' + id;\r

  \  if (isdef(label) && labelPos == 'bottom') {\r

  \    dLabel = mText(label, dZone, { display: 'inline-block', maleft: -10
  });\r

  \  }\r

  \  let b = getBounds(dZone);\r

  \  return { div: dZone, dData: dData, dLabel: dLabel, label: label,
  labelPos: labelPos, w: b.width, h: b.height, center: actualCenter(dZone) };\r

  }"
createcircle: "function createcircle(posx, posy, radius, stroke, fill, filter)
  {\r

  \  var circle = document.createElementNS(svgns, \"circle\");\r

  \  circle.setAttributeNS(null, \"id\", \"c\" + circles);\r

  \  circle.setAttributeNS(null, \"cx\", posx);\r

  \  circle.setAttributeNS(null, \"cy\", posy);\r

  \  circle.setAttributeNS(null, \"r\", radius);\r

  \  circle.setAttributeNS(null, \"stroke-width\", stroke);\r

  \  circle.setAttributeNS(null, \"fill\", fill);\r

  \  circle.setAttributeNS(null, \"filter\", filter);\r

  \  circle.setAttributeNS(null, \"data-posx\", posx);\r

  \  svg.appendChild(circle);\r

  }"
createClassByName: function createClassByName(name, ...a) { var c = eval(name);
  return new c(...a); }
createClientBoardNew: "function createClientBoardNew(o, s) {\r

  \  let [layout, wCell, hCell, wGap, hGap] = [s.boardLayout, s.dxCenter,
  s.dyCenter, s.wGap, s.hGap];\r

  \  let dInner = o.dInner;\r

  \  mCenterCenterFlex(dInner);\r

  \  let [wArea, hArea] = [Math.min(o.wOuter, s.wFieldArea),
  Math.min(o.hOuter, s.hFieldArea)];\r

  \  let dArea = o.dArea = mDiv(dInner, { matop: s.boardMarginTop, maleft:
  s.boardMarginLeft, w: wArea, h: hArea }, 'dFieldArea');\r

  \  mCenterCenterFlex(dArea);\r

  \  let [w, h] = [wArea, hArea];\r

  \  let isHexLayout = startsWith(layout, 'hex');\r

  \  let hline = isHexLayout ? hCell * .75 : hCell;\r

  \  let rows, cols;\r

  \  if (isdef(s.rows) && layout != 'circle') rows = s.rows; else rows =
  Math.floor(h / hline);\r

  \  if (isdef(s.cols) && layout != 'circle') cols = s.cols; else cols =
  Math.floor(w / wCell)\r

  \  let [centers, wTotal, hTotal] = getCentersFromRowsCols(layout, rows,
  cols, wCell, hCell);\r

  \  let dCells = mDiv(dArea, { w: wTotal, h: hTotal, position: 'relative'
  });\r

  \  mStyleX(dArea, { w: Math.max(wArea, wTotal), h: Math.max(hArea, hTotal)
  });\r

  \  let fields;\r

  \  if (isdef(centers)) fields = createFieldsFromCenters(dCells, o, centers,
  wCell, hCell, wGap, hGap, wTotal, hTotal);\r

  \  let bg = valf(s.fieldColor, colorTrans('black', .3));\r

  \  fields.map(x => mStyleX(iDiv(x), { bg: bg }));\r

  \  if (s.boardRotation != 0) {\r

  \    dCells.style.transform = `rotate(${s.boardRotation}deg)`;\r

  \  }\r

  }"
createCollapsibles: "function createCollapsibles(dv, lst, collapsed) {\r

  \  let pageContent = mBy('pageContent');\r

  \  for (const item of lst) {\r

  \    let path = item;\r

  \    let info = dv[path];\r

  \    let coll = genCollapsible(path, dv[path]);\r

  \    dv[path].collapsible = coll;\r

  \    DOC_UIS[coll.id] = dv[path];\r

  \    let signatureLinkContainer = mDiv(mBy('menu'));\r

  \    signatureLinkContainer.id = getLinkContainerId(coll.id);\r

  \    let pathContainer = mDiv(pageContent);\r

  \    pathContainer.id = info.idPathContainer;\r

  \    let pathTitle = mDiv(pathContainer);\r

  \    pathTitle.innerHTML = info.filename;\r

  \    pathTitle.classList.add('pathTitle');\r

  \    let pathContent = mDiv(pathContainer);\r

  \    if (!isEmpty(info.topComment)) addComment(info.topComment,
  pathContent);\r

  \    pathContent.classList.add('comments');\r

  \    for (const signature of dv[path].funcIndex) {\r

  \      let entry = dv[path].funcDict[signature];\r

  \      let comments = entry.comments;\r

  \      let l = genLink(signature, signatureLinkContainer);\r

  \      let functionName = stringBefore(signature, '(').trim();\r

  \      l.id = 'a_' + entry.index + '@' + entry.path;\r

  \      entry.idLink = l.id;\r

  \      entry.idDiv = 'div' + entry.index + '@' + entry.path;\r

  \      let fDiv0 = mDiv(pathContent);\r

  \      fDiv0.id = entry.idDiv;\r

  \      let fDiv = mCreate('p');\r

  \      fDiv0.appendChild(fDiv);\r

  \      let fSignature = mDiv(fDiv);\r

  \      fSignature.innerHTML = signature;\r

  \      fSignature.classList.add('signature');\r

  \      let fComments = mDiv(fDiv);\r

  \      if (!isEmpty(comments)) addComment(comments, fComments);\r

  \      fComments.classList.add('comments');\r

  \    }\r

  \    hide(pathContainer);\r

  \  }\r

  \  let coll = document.getElementsByClassName(\"collapsible\");\r

  \  for (let i = 0; i < coll.length; i++) {\r

  \    coll[i].addEventListener(\"click\", toggleCollapsible);\r

  \  }\r

  \  if (collapsed) collapseAll();\r

  }"
createContactsContent: "function createContactsContent(myusers, msgs) {\r

  \  let mydata = uiGetContactStylesAndStart();\r

  \  mydata += uiGetContacts(myusers, msgs);\r

  \  return mydata;\r

  }"
createContainers: "function createContainers(list, dArea, styles) {\r

  \  let i = 0;\r

  \  let containers = [];\r

  \  let defStyles = { w: 150, h: 200, bg: 'random', rounding: 12, display:
  'inline-block', margin: 12 };\r

  \  addKeys(defStyles, styles);\r

  \  for (const cat of list) {\r

  \    let cont = mTitledDiv(cat, dArea, styles, {}, 'c' + i);\r

  \    mStyleX(cont, { h: '100%' });\r

  \    i += 1;\r

  \    containers.push({ label: cat, div: cont });\r

  \  }\r

  \  return containers;\r

  }"
createDeck: function createDeck() { return DeckA(); }
createDeckWithJokers: "function createDeckWithJokers() { return _createDeck({ hasJokers: true }); }"
createDiv: "function createDiv(id, className, left, top, width, height) {\r

  \  var div = document.createElement(\"div\");\r

  \  div.id = id;\r

  \  div.className = className;\r

  \  div.style.left = String(left) + \"px\";\r

  \  div.style.top = String(top) + \"px\";\r

  \  div.style.width = String(width) + \"px\";\r

  \  div.style.height = String(height) + \"px\";\r

  \  return (div);\r

  }"
createDocs: "async function createDocs(collapsed = true) {\r

  \  let dv = DOC_vault = await createVault();\r

  \  DOC_UIS = {};\r

  \  let pkeys = Object.keys(dv).map(x => dv[x].filename);\r

  \  pkeys.sort();\r

  \  let lst = dict2list(dv);\r

  \  let sortedlst = lst.sort(fieldSorter(['filename']));\r

  \  i = 0;\r

  \  for (const item of sortedlst) {\r

  \    let id = item.id;\r

  \    let x = dv[item.id];\r

  \    x.index = i;\r

  \    x.idLink = 'a_path_' + i;\r

  \    x.idPathContainer = 'div_path_' + i;\r

  \    i += 1;\r

  \  }\r

  \  for (const p in dv) {\r

  \    let funcDict = dv[p].funcDict;\r

  \    let keys = Object.keys(funcDict);\r

  \    keys.sort();\r

  \    dv[p].funcIndex = keys;\r

  \    for (let i = 0; i < keys.length; i++) { funcDict[keys[i]].index = i;
  }\r

  \  }\r

  \  DOC_dvIndex = sortedlst.map(x => x.id);\r

  \  createCollapsibles(dv, DOC_dvIndex, collapsed);\r

  \  setCurrentPath('assetHelpers.js');\r

  }"
createDragClone: "function createDragClone(ev, items, onRelease) {\r

  \  DragSourceItems = items;\r

  \  DragSourceItem = findItemFromEvent(items, ev);\r

  \  let elem = DragSource = iDiv(DragSourceItem);\r

  \  var clone = DragElem = elem.cloneNode(true);\r

  \  clone.id = DragElem.id + '_' + clone;\r

  \  DragSource = elem;\r

  \  mAppend(document.body, clone);\r

  \  mClass(clone, 'dragelem');\r

  \  mStyleX(clone, { left: ev.clientX - ev.offsetX, top: ev.clientY -
  ev.offsetY });\r

  \  clone.drag = { offsetX: ev.offsetX, offsetY: ev.offsetY };\r

  \  document.body.onmousemove = onMovingCloneAround;\r

  \  document.body.onmouseup = onRelease;\r

  }"
createDraggable: "function createDraggable(id, className, left, top, width,
  text) {\r

  \  var div = document.createElement(\"div\");\r

  \  div.innerHTML = String(text);\r

  \  div.id = id;\r

  \  div.className = className;\r

  \  div.style.left = String(left) + \"px\";\r

  \  div.style.top = String(top) + \"px\";\r

  \  div.style.width = String(width) + \"px\";\r

  \  div.draggable = true;\r

  \  ondragstart = \"drag(event)\";\r

  \  return (div);\r

  }"
createDragLetters: "function createDragLetters() {\r

  \  fz = 60; let word = Goal.label.toUpperCase();\r

  \  let dp = createLetterInputsX(word, dTable, { bg: 'silver', display:
  'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: 4 });\r

  \  scrambleInputs(dp);\r

  \  let letters = Array.from(dp.children);\r

  \  for (let i = 0; i < letters.length; i++) {\r

  \    let l = letters[i]\r

  \    l.onmousedown = onMouseDownOnLetter;\r

  \    mClass(l, 'draggable');\r

  \    l.id = 'letter' + i;\r

  \  }\r

  \  return letters;\r

  }"
createDragWords: "function createDragWords(items, handler) {\r

  \  let keys = items.map(x => x.key);\r

  \  shuffle(keys);\r

  \  G.showLabels = true;\r

  \  titems = myShowLabels(null, undefined, { rows: 1, showLabels: true },
  keys);\r

  \  titems.map(x => iDiv(x).style.cursor = 'pointer');\r

  \  titems.map(x => iDiv(x).onmousedown = (ev) => {\r

  \    createDragClone(ev, titems, dropAndEval);\r

  \  });\r

  \  return titems;\r

  }"
createDropInputs: "function createDropInputs() {\r

  \  let fz = 120; let word = Goal.label.toUpperCase(); let wlen =
  word.length;\r

  \  let dpEmpty = createLetterInputsX(word, dTable, { pabottom: 5, bg:
  'grey', display: 'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: 4 });\r

  \  let inputs = blankInputs(dpEmpty, range(0, wlen - 1), false);\r

  \  DropZones = [];\r

  \  for (let i = 0; i < inputs.length; i++) {\r

  \    let l = iDiv(inputs[i]);\r

  \    l.onmousedown = onMouseDownOnLetter;\r

  \    l.onclick = l.innerHTML = '_';\r

  \    mClass(l, 'dropzone');\r

  \    l.id = 'input' + i;\r

  \    DropZones.push(l);\r

  \  }\r

  \  return inputs;\r

  }"
createDroppable: "function createDroppable(id, className, left, top, width,
  height) {\r

  \  var div = document.createElement(\"div\");\r

  \  div.id = id;\r

  \  div.className = className;\r

  \  div.style.left = String(left) + \"px\";\r

  \  div.style.top = String(top) + \"px\";\r

  \  div.style.width = String(width) + \"px\";\r

  \  div.style.height = String(height) + \"px\";\r

  \  div.ondrop = \"drop(event)\";\r

  \  div.ondragover = \"allowDrop(event)\";\r

  \  return (div);\r

  }"
createElementFromHTML: "function createElementFromHTML(htmlString) {\r

  \  var div = document.createElement('div');\r

  \  div.innerHTML = htmlString.trim();\r

  \  return div.firstChild;\r

  }"
createElementFromHtml: function createElementFromHtml(s) { return createElementFromHTML(s); }
createEmoji: "function createEmoji({ key, w, h, unit = 'px', fg, bg, padding,
  cat, parent, border, rounding }) {\r

  \  let emoji = emojiChars[emojiKeys[key]];\r

  \  console.log('emoji', emoji);\r

  \  if (nundef(key)) key = getRandomKey(emojiChars);\r

  \  let ch = emoji.hexcode;\r

  \  console.log('ch', ch)\r

  \  let family = 'emoOpen';\r

  \  let text = emoji.emoji;\r

  \  if (isdef(parent) && isString(parent)) parent = mBy(parent);\r

  \  console.log(parent);\r

  \  console.log(typeof text, text)\r

  \  cat = isdef(cat) ? cat : isdef(parent) ? getTypeOf(parent) == 'div' ? 'd'
  : 'g' : isdef(cat) ? cat : 'd';\r

  \  let domel;\r

  \  if (cat == 'd') {\r

  \    let d = document.createElement('div');\r

  \    d.style.textAlign = 'center';\r

  \    if (isdef(bg)) {\r

  \      console.log('bg', bg);\r

  \      d.style.backgroundColor = bg;\r

  \    }\r

  \    d.innerHTML = text;\r

  \    domel = d;\r

  \    if (isdef(padding)) d.style.padding = padding + unit;\r

  \    d.style.display = 'inline-block';\r

  \    d.style.height = h + 2 * padding + unit;\r

  \    d.style.width = d.style.height;\r

  \    if (isdef(border)) d.style.border = border;\r

  \    if (isdef(rounding)) d.style.borderRadius = rounding + unit;\r

  \  } else {\r

  \  }\r

  \  domel.key = key;\r

  \  if (parent) parent.appendChild(domel);\r

  \  return domel;\r

  }"
createFakeState: "function createFakeState() {\r

  \  let settings = DB.games.gPerlen2;\r

  \  let fakeServer = new FakeServerClass(Socket, PerlenDict, settings,
  null);\r

  \  let state = fakeServer.State;\r

  \  return { settings: settings, state: state, perlenDict: PerlenDict };\r

  }"
createFields: "function createFields(s, b, scale) {\r

  \  let dCells = b.dCells = mDiv(b.dOuter, { matop: s.boardMarginTop * scale,
  maleft: s.boardMarginLeft * scale, w: b.wNeeded, h: b.hNeeded, position:
  'relative' }, 'dFieldArea');\r

  \  let [horDist, vertDist, szField] = [b.dxCenter, b.dyCenter, s.szField *
  scale];\r

  \  let fields = b.fields = [], i = 0, dx = horDist / 2, dy = vertDist / 2;\r

  \  let bg = s.fieldColor;\r

  \  for (const p of b.centers) {\r

  \    let left = p.x - szField / 2;\r

  \    let top = p.y - szField / 2;\r

  \    let dItem = mDiv(dCells, { position: 'absolute', left: left, top: top,
  display: 'inline', w: szField, h: szField, rounding: '50%', bg: bg });\r

  \    mCenterCenterFlex(dItem)\r

  \    let f = { div: dItem, index: i, center: p, isField: true }; i += 1;\r

  \    fields.push(f);\r

  \  }\r

  \  if (s.boardRotation != 0) { dCells.style.transform =
  `rotate(${s.boardRotation}deg)`; }\r

  }"
createFields_dep: "function createFields_dep(s, b, scale) {\r

  \  let dCells = b.dCells = mDiv(b.dOuter, { matop: s.boardMarginTop * scale,
  maleft: s.boardMarginLeft * scale, w: b.wNeeded, h: b.hNeeded, position:
  'relative' });\r

  \  let [wCell, hCell, wGap, hGap] = [b.dxCenter, b.dyCenter, s.wGap * scale,
  s.hGap * scale];\r

  \  let fields = b.fields = [], i = 0, dx = wCell / 2, dy = hCell / 2;\r

  \  let bg = s.fieldColor;\r

  \  for (const p of b.centers) {\r

  \    let left = p.x - dx + wGap / 2;\r

  \    let top = p.y - dy + hGap / 2;\r

  \    let dItem = mDiv(dCells, { position: 'absolute', left: left, top: top,
  display: 'inline', w: wCell - wGap, h: hCell - hGap, rounding: '50%', bg: bg
  });\r

  \    mCenterCenterFlex(dItem)\r

  \    let f = { div: dItem, index: i, center: p, isField: true }; i += 1;\r

  \    fields.push(f);\r

  \  }\r

  \  if (s.boardRotation != 0) { dCells.style.transform =
  `rotate(${s.boardRotation}deg)`; }\r

  }"
createFilter: "function createFilter(svg, posx, posy, sizex, sizey, type, data)
  {\r

  \  var svgns = \"http://www.w3.org/2000/svg\";\r

  \  var defs = document.createElementNS(svgns, \"defs\");\r

  \  svg.appendChild(defs);\r

  \  var filter = document.createElementNS(svgns, \"filter\");\r

  \  defs.appendChild(filter);\r

  \  filter.setAttribute(\"id\", \"filterBlur\");\r

  \  filter.setAttribute(\"x\", posx);\r

  \  filter.setAttribute(\"y\", posy);\r

  \  filter.setAttribute(\"width\", sizex);\r

  \  filter.setAttribute(\"height\", sizey);\r

  \  for (z = 0; z < (data.length / 2); z++) {\r

  \    var filter = document.createElementNS(svgns, type[z]);\r

  \    filter.setAttributeNS(null, \"in\", \"SourceGraphic\");\r

  \    filter.setAttributeNS(null, data[2 * z], data[2 * z + 1]);\r

  \    document.getElementById(\"f\" + circles).appendChild(filter);\r

  \  }\r

  }"
createfilter1: "function createfilter1(posx, posy, sizex, sizey, type, data) {\r

  \  var svg = document.getElementById(\"canvas\");\r

  \  var fs = document.getElementById(\"filters\");\r

  \  var circles = 0;\r

  \  var svgns = \"http://www.w3.org/2000/svg\";\r

  \  var w = window.innerWidth;\r

  \  var filter = document.createElementNS(svgns, \"filter\");\r

  \  filter.setAttribute(\"id\", \"f\" + circles);\r

  \  fs.appendChild(filter);\r

  \  for (z = 0; z < (data.length / 2); z++) {\r

  \    var filter = document.createElementNS(svgns, type[z]);\r

  \    filter.setAttributeNS(null, \"in\", \"SourceGraphic\");\r

  \    filter.setAttributeNS(null, data[2 * z], data[2 * z + 1]);\r

  \    document.getElementById(\"f\" + circles).appendChild(filter);\r

  \  }\r

  }"
createGamesContent: "function createGamesContent(mygames, tables = {}) {\r

  \  let mydata = uiGetGamesStylesAndStart();\r

  \  mydata += uiGetGames(mygames, tables);\r

  \  return mydata;\r

  }"
createGrid: "function createGrid(areaName, idBoard, sBoard, sMemberPool, shape)
  {\r

  \  let board = makeBoard(idBoard, sBoard, areaName);\r

  \  board.structInfo = shape == 'hex' ? getHexGridInfo(sBoard.rows,
  sBoard.cols) : getQuadGridInfo(sBoard.rows, sBoard.cols);\r

  \  makeFields(sMemberPool, board, sBoard, shape);\r

  \  if (isdef(sBoard.corners)) makeCorners(sMemberPool, board, sBoard);\r

  \  if (isdef(sBoard.edges)) makeEdges(sMemberPool, board, sBoard);\r

  \  return board;\r

  }"
createGridLayout: "function createGridLayout(d, layout,
  collapseEmptySmallLetterAreas = false) {\r

  \  let s = '';\r

  \  let m = [];\r

  \  let maxNum = 0;\r

  \  let areaNames = [];\r

  \  for (const line of layout) {\r

  \    let letters = line.split(' ');\r

  \    let arr = [];\r

  \    for (const l of letters) {\r

  \      if (!isEmpty(l)) {\r

  \        addIf(areaNames, l);\r

  \        arr.push(l);\r

  \      }\r

  \    }\r

  \    m.push(arr);\r

  \    if (arr.length > maxNum) maxNum = arr.length;\r

  \  }\r

  \  for (const line of m) {\r

  \    let el = line[line.length - 1];\r

  \    while (line.length < maxNum) line.push(el);\r

  \    s += '\"' + line.join(' ') + '\" ';\r

  \  }\r

  \  d.style.gridTemplateAreas = s;\r

  \  if (collapseEmptySmallLetterAreas) { collapseSmallLetterAreas(m, d); }\r

  \  else fixedSizeGrid(m, d);\r

  \  return areaNames;\r

  }"
createGridLayout_dep: "function createGridLayout_dep(d, layout) {\r

  \  let s = '';\r

  \  let m = [];\r

  \  let maxNum = 0;\r

  \  let areaNames = [];\r

  \  for (const line of layout) {\r

  \    let letters = line.split(' ');\r

  \    let arr = [];\r

  \    for (const l of letters) {\r

  \      if (!isEmpty(l)) {\r

  \        addIf(areaNames, l);\r

  \        arr.push(l);\r

  \      }\r

  \    }\r

  \    m.push(arr);\r

  \    if (arr.length > maxNum) maxNum = arr.length;\r

  \  }\r

  \  for (const line of m) {\r

  \    let el = line[line.length - 1];\r

  \    while (line.length < maxNum) line.push(el);\r

  \    s += '\"' + line.join(' ') + '\" ';\r

  \  }\r

  \  d.style.gridTemplateAreas = s;\r

  \  if (SPEC.collapseEmptySmallLetterAreas) { collapseSmallLetterAreas(m, d);
  }\r

  \  else fixedSizeGrid(m, d);\r

  \  return areaNames;\r

  }"
createHandler: "function createHandler(param, func) {\r

  \  return function (ev) {\r

  \    let id = evToId(ev);\r

  \    console.log(param, 'and', id);\r

  \    param.push(getOid(id));\r

  \    for (const oid of param) {\r

  \      getDefVisual(oid)[func]();\r

  \    }\r

  \  }\r

  }"
createHexboard: "function createHexboard(rows = 3, cols = 3, a = 48) {\r

  \  let sq3 = Math.sqrt(3);\r

  \  let wp = a / 4, hp = a / 4, h = sq3 * a / 2;\r

  \  let [xoff, dx, yoff, dy] = [h + wp / 2, 2 * h, hp / 2, a / 2];\r

  \  let ys = 2 + 3 * rows;\r

  \  let xs = cols;\r

  \  let x = xoff, y = yoff;\r

  \  let pts = [];\r

  \  let infos = [];\r

  \  let idx = 0;\r

  \  let yEven = true;\r

  \  for (let i = 0; i < ys; i++) {\r

  \    let tcolOffset = yEven ? 1 : 0;\r

  \    let isCenterRow = i >= 2 && ((i - 2) % 3) == 0;\r

  \    for (let j = 0; j < xs + (1 - tcolOffset); j++) {\r

  \      let pt = { x: x, y: y };\r

  \      pts.push(pt);\r

  \      infos.push({ index: idx, tcol: tcolOffset + 2 * j, trow: i, x: x, y:
  y, pt: pt, isCenterRow: isCenterRow, isHexCenter: isCenterRow, isCenterCol: j
  % 2 == 1 });\r

  \      x += dx;\r

  \      idx += 1;\r

  \    }\r

  \    yEven = !yEven;\r

  \    y += dy; x = i % 2 ? xoff : wp / 2;\r

  \  }\r

  \  let byrc = {};\r

  \  for (const i of infos) {\r

  \    lookupSet(byrc, [i.trow, i.tcol], i.index);\r

  \  }\r

  \  console.log('byrc', byrc)\r

  \  let byxy = {};\r

  \  let adjList = [];\r

  \  let di = {};\r

  \  for (const info of infos) {\r

  \    let [r, c] = [info.trow, info.tcol];\r

  \    info.nodes = [\r

  \      lookup(byrc, [r - 2, c]),\r

  \      lookup(byrc, [r - 1, c + 1]),\r

  \      lookup(byrc, [r + 1, c + 1]),\r

  \      lookup(byrc, [r + 2, c]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \    ];\r

  \    for (let i = 0; i < 6; i++) {\r

  \      let n1 = info.nodes[i];\r

  \      if (n1 == null) continue;\r

  \      let n2 = info.nodes[(i + 1 % 6)];\r

  \      if (n2 == null) continue;\r

  \      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;\r

  \      lookupSet(di, [n1, n2], true);\r

  \      adjList.push([n1, n2]);\r

  \    }\r

  \    info.neighbors = [\r

  \      lookup(byrc, [r - 3, c + 1]),\r

  \      lookup(byrc, [r, c + 2]),\r

  \      lookup(byrc, [r + 3, c + 1]),\r

  \      lookup(byrc, [r + 3, c - 1]),\r

  \      lookup(byrc, [r, c - 2]),\r

  \      lookup(byrc, [r - 3, c - 1]),\r

  \    ];\r

  \  }\r

  \  return { items: infos, adjList: adjList, rows: rows, cols: cols, dx: dx,
  dy: dy, sz: a }\r

  }"
createHexboard1: "function createHexboard1(rows = 3, cols = 3, a = 48) {\r

  \  let sq3 = Math.sqrt(3);\r

  \  let wp = a / 4, hp = a / 4, h = sq3 * a / 2;\r

  \  let [xoff, dx, yoff, dy] = [h + wp / 2, 2 * h, hp / 2, a / 2];\r

  \  return createHexboardHelper(rows, cols, dy, dx, yoff, xoff, hp, wp, a);\r

  }"
createHexboard2: "function createHexboard2(rows = 3, cols = 3, a = 48) {\r

  \  let sq3 = Math.sqrt(3);\r

  \  let wp = a / 4, hp = a / 4, h = sq3 * a / 2;\r

  \  let [xoff, dx, yoff, dy] = [h + wp / 2, 2 * h, hp / 2, a / 2];\r

  \  return createHexboardHelper(rows, cols, dy, dx, yoff, xoff, hp, wp, a);\r

  }"
createHexboardHelper: "function createHexboardHelper(rows, cols, dy, dx, yoff,
  xoff, hp, wp, a) {\r

  \  let ys = 2 + 3 * rows;\r

  \  let xs = cols;\r

  \  let x = xoff, y = yoff;\r

  \  let pts = [];\r

  \  let infos = [];\r

  \  let idx = 0;\r

  \  let yEven = true;\r

  \  for (let i = 0; i < ys; i++) {\r

  \    let tcolOffset = yEven ? 1 : 0;\r

  \    let isCenterRow = i >= 2 && ((i - 2) % 3) == 0;\r

  \    for (let j = 0; j < xs + (1 - tcolOffset); j++) {\r

  \      let pt = { x: x, y: y };\r

  \      pts.push(pt);\r

  \      infos.push({ index: idx, tcol: tcolOffset + 2 * j, trow: i, x: x, y:
  y, pt: pt, isCenterRow: isCenterRow, isHexCenter: isCenterRow, isCenterCol: j
  % 2 == 1 });\r

  \      x += dx;\r

  \      idx += 1;\r

  \    }\r

  \    yEven = !yEven;\r

  \    y += dy; x = i % 2 ? xoff : wp / 2;\r

  \  }\r

  \  let byrc = {};\r

  \  for (const i of infos) {\r

  \    lookupSet(byrc, [i.trow, i.tcol], i.index);\r

  \  }\r

  \  let byxy = {};\r

  \  let adjList = [];\r

  \  let di = {};\r

  \  for (const info of infos) {\r

  \    let [r, c] = [info.trow, info.tcol];\r

  \    info.nodes = [\r

  \      lookup(byrc, [r - 2, c]),\r

  \      lookup(byrc, [r - 1, c + 1]),\r

  \      lookup(byrc, [r + 1, c + 1]),\r

  \      lookup(byrc, [r + 2, c]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \    ];\r

  \    for (let i = 0; i < 6; i++) {\r

  \      let n1 = info.nodes[i];\r

  \      if (n1 == null) continue;\r

  \      let n2 = info.nodes[(i + 1 % 6)];\r

  \      if (n2 == null) continue;\r

  \      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;\r

  \      lookupSet(di, [n1, n2], true);\r

  \      adjList.push([n1, n2]);\r

  \    }\r

  \    info.neighbors = [\r

  \      lookup(byrc, [r - 3, c + 1]),\r

  \      lookup(byrc, [r, c + 2]),\r

  \      lookup(byrc, [r + 3, c + 1]),\r

  \      lookup(byrc, [r + 3, c - 1]),\r

  \      lookup(byrc, [r, c - 2]),\r

  \      lookup(byrc, [r - 3, c - 1]),\r

  \    ];\r

  \  }\r

  \  return { items: infos, adjList: adjList, rows: rows, cols: cols, dx: dx,
  dy: dy, sz: a, byrc: byrc }\r

  }"
createImage: "function createImage(filename, styles) {\r

  \  let img = mCreateFrom(`<img src='../rechnung/images/${filename}'>`);\r

  \  if (isdef(styles.w)) { img.setAttribute('width', styles.w); }\r

  \  if (isdef(styles.h)) { img.setAttribute('height', styles.h); }\r

  \  mStyle(img, styles);\r

  \  return img;\r

  }"
createImg: "function createImg(id, className, zIndex, left, top, width, height,
  src) {\r

  \  var img = document.createElement(\"img\");\r

  \  img.id = id;\r

  \  img.className = className;\r

  \  img.style.zIndex = zIndex;\r

  \  img.style.left = String(left) + \"px\";\r

  \  img.style.top = String(top) + \"px\";\r

  \  img.style.width = String(width) + \"px\";\r

  \  img.style.height = String(height) + \"px\";\r

  \  img.src = src;\r

  \  return (img);\r

  }"
createIndependentUi: "function createIndependentUi(n, area) {\r

  \  if (nundef(n.type)) { n.type = inferType(n); }\r

  \  R.registerNode(n);\r

  \  decodeParams(n, R, {});\r

  \  calcIdUiParent(n, R, area);\r

  \  let ui;\r

  \  if (nundef(RCREATE[n.type])) ui = mDefault(n, area, R);\r

  \  else ui = RCREATE[n.type](n, R, area);\r

  \  if (nundef(n.uiType)) n.uiType = 'd';\r

  \  if (n.uiType == 'NONE') return ui;\r

  \  if (n.uiType != 'childOfBoardElement') {\r

  \    if (isBoard(n.uid, R)) { delete n.cssParams.padding; }\r

  \    applyCssStyles(n.uiType == 'h' ? mBy(n.uidStyle) : ui, n.cssParams);\r

  \  }\r

  \  if (!isEmpty(n.stdParams)) {\r

  \    switch (n.stdParams.show) {\r

  \      case 'if_content': if (!n.content) hide(ui); break;\r

  \      case 'hidden': hide(ui); break;\r

  \      default: break;\r

  \    }\r

  \  }\r

  \  R.setUid(n, ui);\r

  \  return ui;\r

  }"
createKeyIndex: "function createKeyIndex(di, prop) {\r

  \  let res = {};\r

  \  for (const k in di) {\r

  \    res[di[k][prop]] = k;\r

  \  }\r

  \  return res;\r

  }"
createLabel_dep: "function createLabel_dep(n1, ui, R) {\r

  \  let g = ui;\r

  \  if (n1.content) {\r

  \    let pa = n1.params;\r

  \    let transPa = { txt: n1.content };\r

  \    let fill = pa.fg;\r

  \    if (isdef(fill)) { transPa.fill = fill; }\r

  \    else if (isdef(pa.bg)) { transPa.fill = colorIdealText(pa.bg); }\r

  \    else {\r

  \      transPa.fill = 'white';\r

  \    }\r

  \    let font = pa.font; if (isdef(font)) transPa.font = font;\r

  \    let gt = n1.label = new gText(g);\r

  \    gt.text(transPa);\r

  \  }\r

  }"
createLayout: "function createLayout(dParent, l) {\r

  \  console.log('*** createLayout ***', dParent, l);\r

  \  let d = mBy(dParent);\r

  \  let areaNames = createGridLayout(d, l);\r

  \  console.log(areaNames, d)\r

  \  createAreas(d, areaNames, dParent);\r

  }"
createLetterInputs: "function createLetterInputs(s, dParent, style,
  idForContainerDiv, colorWhiteSpaceChars = true,
  preserveColorsBetweenWhiteSpace = true) {\r

  \  let d = mDiv(dParent);\r

  \  if (isdef(idForContainerDiv)) d.id = idForContainerDiv;\r

  \  inputs = [];\r

  \  let whiteStyle = jsCopy(style);\r

  \  if (!colorWhiteSpaceChars) {\r

  \    if (isdef(whiteStyle.fg)) delete whiteStyle.fg;\r

  \    if (isdef(whiteStyle.bg)) delete whiteStyle.bg;\r

  \    if (isdef(whiteStyle.border)) delete whiteStyle.border;\r

  \  }\r

  \  let fg, fgOrig, bg, bgOrig;\r

  \  fgOrig = style.fg;\r

  \  bgOrig = style.bg;\r

  \  if (isVariableColor(fgOrig) && isdef(style.fg)) { fg =
  computeColorX(fgOrig); style.fg = fg; }\r

  \  if (isVariableColor(bgOrig) && isdef(style.bg)) { bg =
  computeColorX(bgOrig); style.bg = bg; }\r

  \  for (let i = 0; i < s.length; i++) {\r

  \    let d1 = mCreate('div');\r

  \    mAppend(d, d1);\r

  \    d1.innerHTML = s[i];\r

  \    let white = isWhiteSpace2(s[i]);\r

  \    if (white) {\r

  \      if (isVariableColor(fgOrig) && isdef(style.fg)) { fg =
  computeColorX(fgOrig); style.fg = fg; }\r

  \      if (isVariableColor(bgOrig) && isdef(style.bg)) { bg =
  computeColorX(bgOrig); style.bg = bg; }\r

  \    }\r

  \    mStyleX(d1, white ? whiteStyle : style);\r

  \  }\r

  \  return d;\r

  }"
createLetterInputsX: "function createLetterInputsX(s, dParent, style,
  idForContainerDiv) {\r

  \  let d = mDiv(dParent);\r

  \  if (isdef(idForContainerDiv)) d.id = idForContainerDiv;\r

  \  inputs = [];\r

  \  for (let i = 0; i < s.length; i++) {\r

  \    let d1 = mDiv(d);\r

  \    d1.innerHTML = s[i];\r

  \    mStyle(d1, style);\r

  \  }\r

  \  return d;\r

  }"
createLoginContent: "function createLoginContent(userdata) {\r

  \  return `\r

  \  <div id=\"dAccount\" style=\"max-width=500px; margin-top:10px;
  display:flex; animation: appear1 1s ease;justify-content:center;
  align-content:center\">\r

  \    <div id=\"error\">some text</div>\r

  \    <div style='text-align:center'>\r

  \      <form id=\"myform\" autocomplete=\"off\"
  style='text-align:center;background:${userdata.color}'>\r

  \        <img id=\"imgPreview\" src='${get_image_path(userdata)}'
  style=\"height:200px;margin:10px;\" />\r

  \        <input id='iUsername' type=\"text\" name=\"username\"
  placeholder='username' value=\"${userdata.name}\" autofocus\r

  \          onkeydown=\"if (event.keyCode ===
  13){event.preventDefault();console.log('WTF!!!!!!!!!!!!!!!!!!!!!!!!!!!!');col\
  lect_data(event);}\" />\r

  \        <br />\r

  \        <input id='save_settings_button' type=\"button\" value=\"Submit\"
  onclick=\"collect_data(event)\" ><br>\r

  \      </form>\r

  \  </div></div>\r

  \  `;\r

  }"
createLoginNewContent: "function createLoginNewContent(myusers, msgs) {\r

  \  let mydata = uiGetLoginNewStylesAndStart();\r

  \  mydata += uiGetLoginNewList(myusers, msgs);\r

  \  return mydata;\r

  }"
createMarker: "function createMarker(markerId) {\r

  \  let divs = document.getElementsByClassName('feedbackMarker');\r

  \  let d;\r

  \  d = mCreate('div');\r

  \  d.innerHTML = MarkerText[markerId];\r

  \  mClass(d, 'feedbackMarker');\r

  \  document.body.appendChild(d);\r

  \  Markers.push(d);\r

  \  return d;\r

  }"
createMarker_orig: "function createMarker_orig(markerId) {\r

  \  let divs = document.getElementsByClassName('feedbackMarker');\r

  \  let d;\r

  \  d = mCreate('div');\r

  \  d.innerHTML = MarkerText[markerId];\r

  \  mClass(d, 'feedbackMarker');\r

  \  document.body.appendChild(d);\r

  \  Markers.push(d);\r

  \  return d;\r

  }"
createMenuUi: "function createMenuUi(dParent) {\r

  \  clearElement(dParent);\r

  \  mCenterFlex(dParent);\r

  \  mAppend(dParent, createElementFromHTML(`<h1>Choose Game:</h1>`));\r

  \  mLinebreak(dParent);\r

  \  let dMenuItems = mDiv(dParent, { w: '90%', h: 600 });\r

  \  let games = jsCopy(U.avGames); if (!navigator.onLine) {
  removeInPlace(games, 'gSayPic'); }\r

  \  let items = [];\r

  \  let outerStyles = {\r

  \    display: 'inline-flex', 'flex-direction': 'column',\r

  \    'justify-content': 'center', 'align-items': 'center', 'vertical-align':
  'top',\r

  \    wmin: 140, hmin: 110, margin: 8, rounding: 6\r

  \  };\r

  \  for (const g of games) {\r

  \    let item = { o: DB.games[g], id: g }; iRegister(item, g);\r

  \    item.bg = getColorDictColor(item.o.color);\r

  \    item.label = capitalize(item.o.friendly);\r

  \    item.info = Syms[item.o.logo];\r

  \    let d = makeItemDiv(item, {\r

  \      outerStyles: outerStyles, ifs: { bg: true },\r

  \      picStyles: { fz: 60 },\r

  \      showPic: true, showLabels: true, labelBottom: true, handler:
  onClickMenuItem\r

  \    });\r

  \    iAdd(item, { div: d });\r

  \    mAppend(dMenuItems, d);\r

  \    items.push(item);\r

  \  }\r

  \  if (nundef(G)) return;\r

  \  SelectedMenuKey = G.id;\r

  \  let selItem = Items[SelectedMenuKey];\r

  \  toggleItemSelection(selItem);\r

  }"
createMenuUiNew: "function createMenuUiNew(dParent, keys, clickMenuHandler,
  outerStyles = {}, picStyles = {}, labelStyles = {}, hTotal = 600) {\r

  \  clearElement(dParent);\r

  \  mCenterFlex(dParent);\r

  \  mAppend(dParent, createElementFromHTML(`<h1>Choose Game:</h1>`));\r

  \  mLinebreak(dParent);\r

  \  let dMenuItems = mDiv(dParent, { w: '90%', h: hTotal });\r

  \  let games = keys;\r

  \  if (!navigator.onLine) { removeInPlace(games, 'gSayPic'); }\r

  \  let items = [];\r

  \  let defaultOuterStyles = {\r

  \    display: 'inline-flex', 'flex-direction': 'column',\r

  \    'justify-content': 'center', 'align-items': 'center', 'vertical-align':
  'top',\r

  \    wmin: hTotal / 4, hmin: hTotal / 6, margin: 8, rounding: 6\r

  \  };\r

  \  addKeys(defaultOuterStyles, outerStyles);\r

  \  let defaultPicStyles = { fz: hTotal / 10, 'line-height': hTotal / 10 +
  'px' };\r

  \  addKeys(defaultPicStyles, picStyles);\r

  \  for (const g of games) {\r

  \    let item = { o: DB.games[g], id: g }; iRegister(item, g);\r

  \    item.bg = getColorDictColor(item.o.color);\r

  \    item.label = capitalize(item.o.friendly);\r

  \    item.info = Syms[item.o.logo];\r

  \    let d = makeItemDiv(item, {\r

  \      outerStyles: outerStyles, ifs: { bg: true },\r

  \      picStyles: picStyles,\r

  \      labelStyles: labelStyles,\r

  \      showPic: true, showLabels: true, labelBottom: true, handler:
  clickMenuHandler\r

  \    });\r

  \    iAdd(item, { div: d });\r

  \    mAppend(dMenuItems, d);\r

  \    items.push(item);\r

  \  }\r

  \  if (nundef(G)) return;\r

  \  SelectedMenuKey = G.id;\r

  \  let selItem = Items[SelectedMenuKey];\r

  \  toggleItemSelection(selItem);\r

  }"
createMessageContent: "function createMessageContent(messages, me, other) {\r

  \  let result = `<div id='messages_holder_parent' onclick='set_seen(event)'
  style='background:silver;height:680px;'>\r

  \  <div id='messages_holder'
  style='box-sizing:border-box;height:580px;padding:10px;margin-bottom:10px;ove\
  rflow-y:auto;'>`;\r

  \  result += `start of chat with ${other.username} <img
  src=\"${other.imagePath}\"
  style=\"margin-left:10px;display:inline;height:30px;\"/><br><br>`;\r

  \  for (const m of messages) {\r

  \    if (m.sender == me.username) { result += message_right(m, me); } else {
  result += message_left(m, other); }\r

  \  }\r

  \  result += message_controls();\r

  \  return result;\r

  }"
createMSTree: "function createMSTree(mobj) {\r

  \  let areas = mobj.elem.children;\r

  \  for (const ch of [...areas]) {\r

  \    if (!ch.id) { continue; }\r

  \    let msChild = makeDomArea(ch);\r

  \    if (ch.id == 'a_d_settings' || ch.id == 'a_d_main_menu') continue;\r

  \    createMSTree(msChild);\r

  \  }\r

  }"
createMultiplayerGame: "function createMultiplayerGame() {\r

  \  _sendRoute('/restart', d1 => _newGame(game));\r

  }"
createMultipleChoiceElements: "function
  createMultipleChoiceElements(correctAnswer, wrongAnswers, dParent,
  dFeedbackUI, styles) {\r

  \  if (nundef(Goal)) Goal = {};\r

  \  let choices = wrongAnswers; choices.push(correctAnswer);\r

  \  Goal.correctChoice = correctAnswer;\r

  \  if (isYesNo(choices)) {\r

  \    sortByDescending(choices, 'text');\r

  \  } else {\r

  \    shuffle(choices);\r

  \    if (coin()) shuffle(choices);\r

  \  }\r

  \  Goal.choices = choices;\r

  \  Goal.feedbackUI = dFeedbackUI;\r

  \  let idx = 0;\r

  \  for (const ch of choices) {\r

  \    ////'&frac57;', //'&frac12;', \r

  \    let dButton = mButton(ch.text, onClickChoice, dParent, { wmin: 100, fz:
  36, margin: 20, rounding: 4, vpadding: 4, hpadding: 10 },
  ['toggleButtonClass']);\r

  \    dButton.id = 'bChoice_' + idx; idx += 1;\r

  \    if (ch.text == correctAnswer.text) {\r

  \      Goal.choice = ch.toString();\r

  \      Goal.buttonCorrect = dButton;\r

  \    }\r

  \  }\r

  }"
createNode: "function createNode(sp, idParent, R) {\r

  \  let n = jsCopy(sp);\r

  \  n.idParent = idParent;\r

  \  let id = n.nid = getUid();\r

  \  n.fullPath = R.NODES[idParent].fullPath + '.' + id;\r

  \  return n;\r

  }"
createNumberSequence: "function createNumberSequence(n, min, max, step, op =
  'plus') {\r

  \  let fBuild = x => { return op == 'plus' ? (x + step) : op == 'minus' ? (x
  - step) : x; };\r

  \  if (op == 'minus') min += step * (n - 1);\r

  \  if (min >= (max - 10)) max = min + 10;\r

  \  let seq = getRandomNumberSequence(n, min, max, fBuild, lastPosition);\r

  \  lastPosition = seq[0];\r

  \  return seq;\r

  }"
createPageDivsFullVisibleArea: "function createPageDivsFullVisibleArea(above,
  tableStyles, below, defs = { bg: 'random', fg: 'contrast' }) {\r

  \  clearElement(dMain);\r

  \  let dRightSide = mDiv(dMain, { display: 'flex', 'flex-direction':
  'column', 'flex-grow': 10 });\r

  \  let table = mDiv(dRightSide, {}, 'table');\r

  \  for (const k in above) {\r

  \    let name = 'd' + capitalize(k);\r

  \    let ltop = get3ColLine(table, name + 'Left', name, name + 'Right',
  mergeOverride(defs, above[k]));\r

  \  }\r

  \  let vals = Object.values(above);\r

  \  vals = vals.concat(Object.values(below));\r

  \  let sum = arrSum(vals, 'h');\r

  \  let sum1 = arrSum(vals, 'hmin');\r

  \  console.log('sum', sum, 'sum1', sum1);\r

  \  sum += sum1;\r

  \  let hTable = percentVh(100) - sum;\r

  \  let wTable = percentVw(100) - 20;\r

  \  if (nundef(tableStyles)) tableStyles = {};\r

  \  tableStyles = mergeOverride({ bg: 'dimgray', w: wTable, h: hTable,
  vpadding: 0, hpadding: 0 }, tableStyles);\r

  \  let ltable = get3ColLine(table, 'dTableLeft', 'dTable', 'dTableRight',
  tableStyles);\r

  \  ltable.id = 'lTable';\r

  \  mSize(dTable.parentNode, '100%', '100%');\r

  \  mSize(dTable, '100%', '100%');\r

  \  console.log('below', below);\r

  \  for (const k in below) {\r

  \    let name = 'd' + capitalize(k);\r

  \    let lbottom = get3ColLine(table, name + 'Left', name, name + 'Right',
  mergeOverride(defs, below[k]));\r

  \  }\r

  \  dFooter.innerHTML = 'HALLO';\r

  \  let rect = getRect(dTable);\r

  \  return rect;\r

  }"
createPanelParentOfObjects: "function createPanelParentOfObjects(lst, n1, area,
  R) {\r

  \  if (nundef(n1.type)) n1.type = lst.length == 1 ? 'invisible' : 'panel';\r

  \  n1.content = null;\r

  \  n1.ui = createUi(n1, R, area);\r

  }"
createPeeps: "function createPeeps() {\r

  \  const {\r

  \    rows,\r

  \    cols\r

  \  } = config\r

  \  const {\r

  \    naturalWidth: width,\r

  \    naturalHeight: height\r

  \  } = img\r

  \  const total = rows * cols\r

  \  const rectWidth = width / rows\r

  \  const rectHeight = height / cols\r

  \  for (let i = 0; i < total; i++) {\r

  \    allPeeps.push(new Peep({\r

  \      image: img,\r

  \      rect: [\r

  \        (i % rows) * rectWidth,\r

  \        (i / rows | 0) * rectHeight,\r

  \        rectWidth,\r

  \        rectHeight,\r

  \      ]\r

  \    }))\r

  \  }\r

  }"
createPerle: "function createPerle(perle, dParent, sz = 64, wf = 1.3, hf = 0.4,
  useNewImage = false) {\r

  \  let d = makePerleDiv(perle,\r

  \    { wmin: sz + 4, h: sz * (1 + hf) + 4 },\r

  \    { w: sz, h: sz }, { wmax: sz * wf, hmax: sz * hf, fz: sz / 6 },\r

  \    'b', true, null, useNewImage);\r

  \  mAppend(dParent, d);\r

  \  if (perle.field != null) {\r

  \    perle.live.dLabel.remove();\r

  \    let img = perle.live.dImg;\r

  \    let d = iDiv(perle);\r

  \    let rect = getRect(img);\r

  \    let szField = G.settings.szField;\r

  \    let sz = G.settings.szPerle * szField / 100;\r

  \    if (isFarbPerle(perle)) mStyleX(img, { w: 1, h: 1 });\r

  \    else mStyleX(img, { w: sz, h: sz });\r

  \    mStyleX(d, { bg: 'transparent', w: sz, h: sz });\r

  \  } else {\r

  \    let d = iDiv(perle);\r

  \    mStyleX(d, { opacity: 1 - G.settings.dimming / 100 });\r

  \    let sz = G.settings.szPoolPerle;\r

  \    if (isdef(sz)) {\r

  \      mStyleX(d.firstChild, { w: sz, h: sz });\r

  \    }\r

  \  }\r

  \  return d;\r

  }"
createPerleOverlap: "function createPerleOverlap(perle, dParent, sz = 64, wf =
  1.3, hf = 0.4) {\r

  \  let d = makePerleDiv(perle, { wmin: sz + 4, h: sz * hf + 4 }, { w: sz, h:
  sz }, { wmax: sz * wf, hmax: sz * hf, fz: sz / 6 }, 'b', true);\r

  \  mAppend(dParent, d);\r

  \  return d;\r

  }"
createPicto: "function createPicto({ key, w = 100, h = 100, unit = 'px', fg =
  'blue', bg, padding = 10, cat, parent, border, rounding }) {\r

  \  if (nundef(key)) key = getRandomKey(iconChars);\r

  \  let ch = iconChars[key];\r

  \  let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';\r

  \  let text = String.fromCharCode('0x' + ch);\r

  \  cat = isdef(parent) ? getTypeOf(parent) == 'div' ? 'd' : 'g' : isdef(cat)
  ? cat : 'd';\r

  \  let domel;\r

  \  if (cat == 'd') {\r

  \    let d = document.createElement('div');\r

  \    d.style.textAlign = 'center';\r

  \    d.style.fontFamily = family;\r

  \    d.style.fontWeight = 900;\r

  \    d.style.fontSize = h + unit;\r

  \    if (isdef(bg)) d.style.backgroundColor = bg;\r

  \    if (isdef(fg)) d.style.color = fg;\r

  \    d.innerHTML = text;\r

  \    domel = d;\r

  \    if (isdef(padding)) d.style.padding = padding + unit;\r

  \    d.style.display = 'inline-block';\r

  \    d.style.height = h + 2 * padding + unit;\r

  \    d.style.width = d.style.height;\r

  \    console.log('padding', padding, 'unit', unit, 'w', d.style.width, 'h',
  d.style.height);\r

  \    if (isdef(border)) d.style.border = border;\r

  \    if (isdef(rounding)) d.style.borderRadius = rounding + unit;\r

  \  } else {\r

  \  }\r

  \  domel.key = key;\r

  \  if (parent) parent.appendChild(domel);\r

  \  return domel;\r

  }"
createPictoSimple: "function createPictoSimple({ key, w, h, unit = 'px', fg, bg,
  padding, cat, parent, border, rounding }) {\r

  \  if (nundef(key)) key = getRandomKey(iconChars);\r

  \  let ch = iconChars[key];\r

  \  let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';\r

  \  let text = String.fromCharCode('0x' + ch);\r

  \  cat = isdef(cat) ? cat : isdef(parent) ? getTypeOf(parent) == 'div' ? 'd'
  : 'g' : isdef(cat) ? cat : 'd';\r

  \  if (nundef(w)) w = 25;\r

  \  if (nundef(h)) h = w;\r

  \  let domel;\r

  \  if (cat == 'd') {\r

  \    let d = document.createElement('div');\r

  \    d.style.textAlign = 'center';\r

  \    d.style.fontFamily = family;\r

  \    d.style.fontWeight = 900;\r

  \    d.style.fontSize = h + unit;\r

  \    if (isdef(bg)) d.style.backgroundColor = bg;\r

  \    if (isdef(fg)) d.style.color = fg;\r

  \    d.innerHTML = text;\r

  \    domel = d;\r

  \    if (isdef(padding)) d.style.padding = padding + unit;\r

  \    d.style.display = 'inline-block';\r

  \    d.style.height = h + 2 * padding + unit;\r

  \    d.style.width = d.style.height;\r

  \    if (isdef(border)) d.style.border = border;\r

  \    if (isdef(rounding)) d.style.borderRadius = rounding + unit;\r

  \  } else {\r

  \  }\r

  \  domel.key = key;\r

  \  if (parent) parent.appendChild(domel);\r

  \  return domel;\r

  }"
createPictoX: "function createPictoX(parent, style, classes, titleOptions,
  pictoOptions, captionOptions) {\r

  \  let d = mDiv(parent);\r

  \  if (isdef(style)) mStyle(d, style);\r

  \  if (isdef(classes)) mClass(d, ...classes);\r

  \  if (isdef(titleOptions)) { titleOptions.parent = d;
  createText(titleOptions); }\r

  \  if (isdef(pictoOptions)) { pictoOptions.parent = d;
  createPicto(pictoOptions); }\r

  \  if (isdef(captionOptions)) { captionOptions.parent = d;
  createText(captionOptions); }\r

  \  return d;\r

  }"
createPlayerZone: "function createPlayerZone(pl, namePos = 'top', showColor =
  false) {\r

  \  let id = pl.id;\r

  \  let z = createCardZone(id, id, namePos);\r

  \  if (showColor) mStyleX(z.div, { bg: pl.color });\r

  \  pl.zone = z;\r

  \  return z;\r

  }"
createProtoForOidAndKey: "function createProtoForOidAndKey(oid, o, k, R) {\r

  \  let n = R.getSpec(k);\r

  \  let n1 = { key: k, oid: oid, uid: getUID() };\r

  \  return n1;\r

  }"
createPrototypesForOid: "function createPrototypesForOid(oid, o, R) {\r

  \  if (isdef(R.oidNodes[oid])) {\r

  \    return;\r

  \  }\r

  \  let klist = R.getR(oid);\r

  \  let nlist = {};\r

  \  for (const k of klist) {\r

  \    let n1 = createProtoForOidAndKey(oid, o, k, R);\r

  \    nlist[k] = n1;\r

  \  }\r

  \  R.oidNodes[oid] = nlist;\r

  }"
createSampleHex1: "function createSampleHex1(rows = 5, topcols = 3, w = 50, h =
  50) {\r

  \  initTable();\r

  \  let styles = {\r

  \    outer: { bg: 'pink', padding: 25 },\r

  \    inner: { w: 500, h: 400 },\r

  \    node: { bg: 'pink', shape: 'hex', w: w, h: h },\r

  \    edge: { bg: 'white' }\r

  \  };\r

  \  let g = hex1Board(dTable, rows, topcols, styles);\r

  \  g.addLayoutControls();\r

  \  return g;\r

  }"
createServerBoard: "function createServerBoard(layout, filename, rows, cols) {\r

  \  let sz = 100;\r

  \  return { filename: 'brett10', layout: 'hex', cells: { w: 100, h: 120,
  wgap: 10, hgap: 10 } };\r

  }"
createServerPoolKeys: function createServerPoolKeys(perlenDict, settings = {}) {
  return getRandomPerlenKeys(perlenDict, valf(settings.numPool, 20)); }
createSettingsUi: "function createSettingsUi(dParent) {\r

  \  clearElement(dParent);\r

  \  let ttag = 'h2';\r

  \  mAppend(dParent, createElementFromHTML(`<${ttag}>Common Settings for
  ${Username}:</${ttag}>`));\r

  \  let nGroupNumCommonAllGames = mInputGroup(dParent);\r

  \  setzeEineZahl(nGroupNumCommonAllGames, 'samples', 25,
  ['samplesPerGame']);\r

  \  setzeEineZahl(nGroupNumCommonAllGames, 'minutes', 1,
  ['minutesPerUnit']);\r

  \  setzeEineZahl(nGroupNumCommonAllGames, 'correct streak', 5,
  ['incrementLevelOnPositiveStreak']);\r

  \  setzeEineZahl(nGroupNumCommonAllGames, 'fail streak', 2,
  ['decrementLevelOnNegativeStreak']);\r

  \  setzeEinOptions(nGroupNumCommonAllGames, 'show labels', ['toggle',
  'always', 'never'], ['toggle', 'always', 'never'], 'toggle',
  ['showLabels']);\r

  \  setzeEinOptions(nGroupNumCommonAllGames, 'language', ['E', 'D', 'S', 'F',
  'C'], ['English', 'German', 'Spanish', 'French', 'Chinese'], 'E',
  ['language']);\r

  \  setzeEinOptions(nGroupNumCommonAllGames, 'vocabulary',
  Object.keys(KeySets), Object.keys(KeySets), 'best25', ['vocab']);\r

  \  setzeEineCheckbox(nGroupNumCommonAllGames, 'show time', false,
  ['showTime']);\r

  \  setzeEineCheckbox(nGroupNumCommonAllGames, 'spoken feedback', true,
  ['spokenFeedback']);\r

  \  setzeEineCheckbox(nGroupNumCommonAllGames, 'silent', false,
  ['silentMode']);\r

  \  setzeEineCheckbox(nGroupNumCommonAllGames, 'switch game after level',
  false, ['switchGame']);\r

  \  mLinebreak(dParent);\r

  \  let g = DB.games[G.id];\r

  \  if (nundef(g)) return;\r

  \  mAppend(dParent, createElementFromHTML(`<${ttag}>Settings for <span
  style='color:${g.color}'>${g.friendly}</span></${ttag}>`));\r

  \  let nGroupSpecific = mInputGroup(dParent);\r

  \  setzeEineZahl(nGroupSpecific, 'trials', 3, ['trials']);\r

  \  setzeEineCheckbox(nGroupSpecific, 'show hint', true, ['showHint']);\r

  }"
createStandardDeck: function createStandardDeck() { return _createDeck(); }
createStandardItems: "function createStandardItems(onClickPictureHandler, ifs =
  {}, options = {}, keys, labels) {\r

  \  //#region prelim: default ifs and options, keys & infos\r

  \  if (nundef(Settings)) Settings = {};\r

  \  let infos = keys.map(k => (isdef(Settings.language) ?
  getRandomSetItem(Settings.language, k) : symbolDict[k]));\r

  \  let bg = isdef(options.colorKeys) ? 'white' : (i) =>
  options.sameBackground ? computeColor('random') : 'random';\r

  \  let fg = (i, info, item) => colorIdealText(item.bg);\r

  \  let defIfs = { bg: bg, fg: fg, label: isdef(labels) ? labels : (i, info)
  => info.best, contrast: .32, fz: 20, padding: 3 };\r

  \  let defOptions = {\r

  \    showLabels: Settings.labels == true, shufflePositions: true,
  sameBackground: true,\r

  \    showRepeat: false, repeat: 1, onclick: onClickPictureHandler, iStart:
  0\r

  \  };\r

  \  ifs = deepmergeOverride(defIfs, ifs);\r

  \  options = deepmergeOverride(defOptions, options);\r

  \  //#endregion\r

  \  //#region phase1: make items: hier jetzt mix and match\r

  \  let items = zItems(infos, ifs, options);\r

  \  if (options.repeat > 1) items = zRepeatEachItem(items, options.repeat,
  options.shufflePositions);\r

  \  if (isdef(options.colorKeys)) items = zRepeatInColorEachItem(items,
  options.colorKeys);\r

  \  items.map(x => x.label = x.label.toUpperCase());\r

  \  //#endregion phase1\r

  \  return [items, ifs, options];\r

  }"
createStandardItemsS: "function createStandardItemsS(onClickPictureHandler, ifs
  = {}, options = {}, keys, labels) {\r

  \  if (nundef(Settings)) Settings = {};\r

  \  let lang = isdef(Settings.language) ? Settings.language : 'E';\r

  \  let defShowLabels = isdef(Settings.labels) && Settings.labels == true;\r

  \  let infos = keys.map(k => Syms[k]);\r

  \  infos.map(x => x.best = x['best' + lang]);\r

  \  console.log(infos.map(x => x.best));\r

  \  let bg = isdef(options.colorKeys) ? 'white' : (i) =>
  options.sameBackground ? computeColor('random') : 'random';\r

  \  let fg = (i, info, item) => colorIdealText(item.bg);\r

  \  let defIfs = { bg: bg, fg: fg, label: isdef(labels) ? labels : (i, info)
  => info.best, contrast: .32, fz: 20, padding: 10 };\r

  \  let defOptions = { showLabels: defShowLabels, shufflePositions: true,
  sameBackground: true, showRepeat: false, repeat: 1, onclick:
  onClickPictureHandler, iStart: 0 };\r

  \  ifs = deepmergeOverride(defIfs, ifs);\r

  \  options = deepmergeOverride(defOptions, options);\r

  \  let items = zItems(infos, ifs, options);\r

  \  if (options.repeat > 1) items = zRepeatEachItem(items, options.repeat,
  options.shufflePositions);\r

  \  if (isdef(options.colorKeys)) items = zRepeatInColorEachItem(items,
  options.colorKeys);\r

  \  items.map(x => x.label = x.label.toUpperCase());\r

  \  return [items, ifs, options];\r

  }"
createStaticUi: "function createStaticUi(area, R) {\r

  \  ensureUiNodes(R);\r

  \  let n = R.tree;\r

  \  recUi(n, R, area);\r

  }"
createSTree: "function createSTree(n, idParent, R) {\r

  \  n = createNode(n, idParent, R);\r

  \  if (isContainerType(n.type)) {\r

  \    let prop = RCONTAINERPROP[n.type];\r

  \  }\r

  }"
createSubtitledPage: "function createSubtitledPage(bg = 'silver', title =
  'Aristocracy', subtitle = '', footer = 'a game by F. Ludos') {\r

  \  setPageBackground(bg);\r

  \  createPageDivsFullVisibleArea({\r

  \    title: { h: 42, family: 'AlgerianRegular', fz: 36 },\r

  \    subtitle: { h: 30, fz: 16 },\r

  \    titleLine: { h: 5, bg: '#00000080' },\r

  \  }, { bg: '#00000050' }, { footer: { h: 30, fz: 16 } }, {});\r

  \  dTitle.innerHTML = title;\r

  \  dSubtitle.innerHTML = subtitle;\r

  \  dFooter.innerHTML = footer;\r

  \  addDummy();\r

  }"
createSuccessMarker: "function createSuccessMarker(sz) {\r

  \  let d = mCreate('div');\r

  \  d.innerHTML = 'J';\r

  \  mClass(d, 'feedbackMarker');\r

  \  document.body.appendChild(d);\r

  \  Markers.push(d);\r

  \  return d;\r

  }"
createTable: "function createTable() {\r

  \  let numPlayers = G.numPlayers;\r

  \  if (isdef(numPlayers)) {\r

  \    idTable = getNextTableId();\r

  \    T = { id: idTable, game: G.id };\r

  \    getPlayersIncludingU();\r

  \    lookupSet(DB, ['tables', idTable], T);\r

  \    return idTable;\r

  \  }\r

  \  return null;\r

  }"
createTableZone: "function createTableZone(showColor = false) {\r

  \  let z = createCardZone('table');\r

  \  if (showColor) mStyleX(z.div, { bg: 'white' });\r

  \  return z;\r

  }"
createText: "function createText({ s, parent, style, classes }) {\r

  \  let d = mText(s, parent);\r

  \  if (isdef(style)) mStyle(d, style);\r

  \  if (isdef(classes)) mClass(d, ...classes);\r

  }"
createTooltip: "function createTooltip(oid) {\r

  \  $('#' + oid).unbind('mouseover mouseout');\r

  \  $('#' + oid).mouseover(function (e) {\r

  \    e.stopPropagation();\r

  \    let id = evToId(e);\r

  \    if (TT_JUST_UPDATED != id) {\r

  \      TT_JUST_UPDATED = id;\r

  \      updateTooltipContent(id);\r

  \      $('div#tooltip').css({\r

  \        display: 'inline-block',\r

  \        top: e.pageY,\r

  \        left: e.pageX,\r

  \      });\r

  \    }\r

  \  });\r

  \  $('#' + oid).mouseout(function (e) {\r

  \    if (TT_JUST_UPDATED == oid) TT_JUST_UPDATED = -1;\r

  \    e.stopPropagation();\r

  \    $('div#tooltip').css({\r

  \      top: 0,\r

  \      left: 0,\r

  \      display: 'none'\r

  \    });\r

  \  });\r

  }"
createTooltip_hallo: "function createTooltip_hallo(oid) {\r

  \  let id = getMainId(oid);\r

  \  let ms = getVisual(oid);\r

  \  if (!ms) return;\r

  \  let ground = ms.ground;\r

  \  if (!ground) return;\r

  \  let domel = ground;\r

  \  console.log('creating tt', domel)\r

  \  $(domel).off('mouseover mouseout');\r

  \  $(domel).mouseover(function (e) {\r

  \    console.log('mouseover', e, evToId(e));\r

  \    return;\r

  \    let mainId = evToId(e);\r

  \    console.log(ev, 'should show tt for', mainId)\r

  \    if (TT_JUST_UPDATED != oid) {\r

  \      TT_JUST_UPDATED = oid;\r

  \      updateTooltipContent(mainId);\r

  \      $('div#tooltip').css({\r

  \        display: 'inline-block',\r

  \        top: e.pageY,\r

  \        left: e.pageX,\r

  \      });\r

  \    }\r

  \  });\r

  \  $(domel).mouseout(function (e) {\r

  \    if (TT_JUST_UPDATED == oid) TT_JUST_UPDATED = -1;\r

  \    e.stopPropagation();\r

  \    $('div#tooltip').css({\r

  \      top: 0,\r

  \      left: 0,\r

  \      display: 'none'\r

  \    });\r

  \  });\r

  }"
createUi: "function createUi(n, R, area) {\r

  \  if (nundef(n.type)) { n.type = inferType(n); }\r

  \  R.registerNode(n);\r

  \  decodeParams(n, R, {});\r

  \  calcIdUiParent(n, R, area);\r

  \  let ui;\r

  \  if (nundef(RCREATE[n.type])) ui = mDefault(n, area, R);\r

  \  else ui = RCREATE[n.type](n, R, area);\r

  \  if (nundef(n.uiType)) n.uiType = 'd';\r

  \  if (n.uiType == 'NONE') return ui;\r

  \  if (n.uiType != 'childOfBoardElement') {\r

  \    if (isBoard(n.uid, R)) { delete n.cssParams.padding; }\r

  \    applyCssStyles(n.uiType == 'h' ? mBy(n.uidStyle) : ui, n.cssParams);\r

  \  }\r

  \  if (!isEmpty(n.stdParams)) {\r

  \    switch (n.stdParams.show) {\r

  \      case 'if_content': if (!n.content) hide(ui); break;\r

  \      case 'hidden': hide(ui); break;\r

  \      default: break;\r

  \    }\r

  \  }\r

  \  R.setUid(n, ui);\r

  \  return ui;\r

  }"
createUiTestX: "function createUiTestX(n, R, area) {\r

  \  if (nundef(n.type)) { n.type = inferType(n); }\r

  \  decodeParams(n, R, {});\r

  \  calcIdUiParent(n, R, area);\r

  \  let ui;\r

  \  if (isdef(RCREATE[n.type])) ui = RCREATE[n.type](n, R, area);\r

  \  else ui = mDefault(n, R, area);\r

  \  if (nundef(n.uiType)) n.uiType = 'd';\r

  \  if (n.uiType == 'NONE') return ui;\r

  \  if (n.uiType != 'childOfBoardElement') {\r

  \    if (isBoard(n.uid, R)) { delete n.cssParams.padding; }\r

  \    applyCssStyles(n.uiType == 'h' ? mBy(n.uidStyle) : ui, n.cssParams);\r

  \  }\r

  \  if (!isEmpty(n.stdParams)) {\r

  \    switch (n.stdParams.show) {\r

  \      case 'if_content': if (!n.content) hide(ui); break;\r

  \      case 'hidden': hide(ui); break;\r

  \      default: break;\r

  \    }\r

  \  }\r

  \  ui.id = n.uid;\r

  \  return ui;\r

  }"
createVault: "async function createVault() {\r

  \  let sIndex = await fetchFileAsText('/RSG/index.html');\r

  \  let lines = sIndex.split('\\n');\r

  \  let res = skipToLine(lines, 0, '#region loading:');\r

  \  let resend = skipToLine(lines, res.index, '#endregion');\r

  \  let listOfFiles = lines.slice(res.index, resend.index);\r

  \  listOfFiles = listOfFiles.map(x => stringBetween(x, '\"'));\r

  \  listOfFiles = listOfFiles.filter(x => !isEmpty(x.trim()));\r

  \  listOfFiles.sort();\r

  \  listOfFiles = Array.from(listOfFiles);\r

  \  let files = ['assetHelpers', 'assets', 'helpers', 'helpersX'];\r

  \  listOfFiles = files.map(x => '/C/' + x + '.js');\r

  \  let vault = await documentVault(listOfFiles);\r

  \  return vault;\r

  }"
createVisual: "function createVisual(id, areaName, { rings = 3, bg =
  'darkslategray', fg = 'lime', label, shape = 'circle', iPalette, ipal, fill, x
  = 0, y = 0, w = 25, h = 25, sPoints, border = 'green', thickness = 1,
  rounding, path, txt, fz = 12, sz, overlay = true, draw = true } = {}) {\r

  \  let parent = getVisual(areaName);\r

  \  if (parent.cat == 'd') {\r

  \    if (parent.ids.length != 1) {\r

  \      error('DIV cannot have more than 1 G child!!!');\r

  \    } else {\r

  \      parent = getVisual(parent.ids[0]);\r

  \      areaName = parent.id;\r

  \    }\r

  \  }\r

  \  let ms = new __O(id, areaName, 'G');\r

  \  let options = {};\r

  \  let labelOptions = {};\r

  \  if (iPalette && ipal) fill = S.pals[iPalette][ipal];\r

  \  if (bg) ms.setBg(bg);\r

  \  if (fg) { ms.setFg(fg); }\r

  \  if (fill) options.fill = fill;\r

  \  if (x) options.x = x;\r

  \  if (y) options.y = y;\r

  \  if (h) { options.h = h; options.sz = h; }\r

  \  if (w) { options.w = w; options.sz = w; }\r

  \  if (sz) options.sz = sz;\r

  \  if (txt) { options.txt = txt; labelOptions.txt = txt; }\r

  \  if (label) { labelOptions.txt = label; }\r

  \  if (fz) { options.fz = fz; labelOptions.fz = fz; }\r

  \  if (sPoints) options.sPoints = sPoints;\r

  \  if (border) options.border = border;\r

  \  if (thickness) options.thickness = thickness;\r

  \  if (rounding) options.rounding = rounding;\r

  \  if (path) options.path = './assets/images/transpng/' + path + '.png';\r

  \  if (rings) {\r

  \  } else rings = 1;\r

  \  dSize = Math.max(w / 6, 5);\r

  \  for (let i = 0; i < rings; i++) {\r

  \    switch (shape) {\r

  \      case 'circle':\r

  \        ms.circle(options);\r

  \        break;\r

  \      case 'hex':\r

  \        ms.hex(options);\r

  \        break;\r

  \      case 'rect':\r

  \        ms.rect(options);\r

  \        break;\r

  \      case 'poly':\r

  \        ms.poly(options);\r

  \        break;\r

  \      case 'image':\r

  \        ms.image(options);\r

  \        break;\r

  \      case 'text':\r

  \        ms.text(options);\r

  \        break;\r

  \      default:\r

  \        return null;\r

  \    }\r

  \    options.w -= dSize;\r

  \    options.sz -= dSize;\r

  \    options.h -= dSize;\r

  \  }\r

  \  if (label) {\r

  \    ms.text(labelOptions);\r

  \  }\r

  \  if (h) { options.h = h; options.sz = h; }\r

  \  if (w) { options.w = w; options.sz = w; }\r

  \  if (sz) options.sz = sz;\r

  \  if (overlay) {\r

  \    overlayOptions = jsCopy(options);\r

  \    overlayOptions.className = 'overlay';\r

  \    delete overlayOptions.fill;\r

  \    delete overlayOptions.path;\r

  \    switch (shape) {\r

  \      case 'circle':\r

  \        ms.circle(overlayOptions);\r

  \        break;\r

  \      case 'hex':\r

  \        ms.hex(overlayOptions);\r

  \        break;\r

  \      case 'rect':\r

  \        ms.rect(overlayOptions);\r

  \        break;\r

  \      case 'poly':\r

  \        ms.poly(overlayOptions);\r

  \        break;\r

  \      case 'image':\r

  \        ms.rect(overlayOptions);\r

  \        break;\r

  \      case 'text':\r

  \        ms.text(overlayOptions);\r

  \        break;\r

  \      default:\r

  \        return null;\r

  \    }\r

  \  }\r

  \  if (draw) ms.attach();\r

  \  return ms;\r

  }"
createWordInputs: "function createWordInputs(words, dParent, idForContainerDiv =
  'seqContainer', sep = null, styleContainer = {}, styleWord = {}, styleLetter =
  {}, styleSep = {}, colorWhiteSpaceChars = true,
  preserveColorsBetweenWhiteSpace = true) {\r

  \  if (isEmpty(styleWord)) {\r

  \    let sz = 80;\r

  \    styleWord = {\r

  \      margin: 10, padding: 4, rounding: '50%', w: sz, h: sz, display:
  'flex', fg: 'lime', bg: 'yellow', 'align-items': 'center',\r

  \      border: 'transparent', outline: 'none', fz: sz - 25,
  'justify-content': 'center',\r

  \    };\r

  \  }\r

  \  let dContainer = mDiv(dParent);\r

  \  if (!isEmpty(styleContainer)) mStyleX(dContainer, styleContainer); else
  mClass(dContainer, 'flexWrap');\r

  \  dContainer.id = idForContainerDiv;\r

  \  let inputGroups = [];\r

  \  let charInputs = [];\r

  \  let iWord = 0;\r

  \  let idx = 0;\r

  \  let numWords = words.length;\r

  \  let wheel = getHueWheel(G.color, 40, numWords <= 4 ? 60 : numWords <= 10
  ? 30 : 15, 0);\r

  \  wheel = wheel.map(x => colorHSLBuild(x, 100, 50));\r

  \  wheel = shuffle(wheel);\r

  \  let wheel1 = colorPalShadeX(colorFrom(wheel[0]), numWords);\r

  \  wheel = jsCopy(wheel1);\r

  \  if (G.op == 'plus') wheel.reverse();\r

  \  for (const w of words) {\r

  \    let dGroup = mDiv(dContainer);\r

  \    mStyleX(dGroup, styleWord);\r

  \    let bg = wheel[iWord]; //
  dGroup.style.backgroundColor=randomColorX(G.color,40,60,0,50,50);//'yellow';/\
  /randomColorX(G.color,70,80);\r

  \    dGroup.style.backgroundColor = bg;\r

  \    dGroup.style.color = colorIdealText(bg);\r

  \    dGroup.id = idForContainerDiv + '_' + iWord;\r

  \    let g = { dParent: dContainer, word: w, iWord: iWord, div: dGroup,
  oStyle: styleWord, ofg: dGroup.style.color, obg: dGroup.style.backgroundColor
  };\r

  \    inputGroups.push(g);\r

  \    let inputs = [];\r

  \    let iLetter = 0;\r

  \    let wString = w.toString();\r

  \    for (const l of wString) {\r

  \      let dLetter = mDiv(dGroup);\r

  \      if (!isEmpty(styleLetter)) mStyleX(dLetter, styleLetter);\r

  \      dLetter.innerHTML = l;\r

  \      let inp = { group: g, div: dLetter, letter: l, iLetter: iLetter,
  index: idx, oStyle: styleLetter, ofg: dLetter.style.color, obg:
  dLetter.style.backgroundColor };\r

  \      charInputs.push(inp);\r

  \      inputs.push(inp);\r

  \      iLetter += 1; idx += 1;\r

  \    }\r

  \    g.charInputs = inputs;\r

  \    if (iWord < words.length - 1 && isdef(sep)) {\r

  \      let dSep = mDiv(dContainer);\r

  \      dSep.innerHTML = sep;\r

  \      if (isdef(styleSep)) mStyleX(dSep, styleSep);\r

  \    }\r

  \    iWord += 1;\r

  \  }\r

  \  return { words: inputGroups, letters: charInputs };\r

  }"
cRect: "function cRect(x, y, w, h, styles = null, ctx = null) {\r

  \  if (nundef(ctx)) { ctx = CX; if (!ctx) return; }\r

  \  if (styles) cStyle(styles, ctx);\r

  \  if (isdef(styles.bg) || nundef(styles.fg)) ctx.fillRect(x, y, w, h);\r

  \  if (isdef(styles.fg)) ctx.strokeRect(x, y, w, h);\r

  }"
cropImageCorrectly: "function cropImageCorrectly(img, mindCorners = false) {\r

  \  let sz = SZ_UPLOAD_CANVAS;\r

  \  let canvas = mBy('canvas1');\r

  \  let cw, ch, iw, ih, fw, fh, f, padw, padh, padmin = mindCorners ? sz * .1
  : 0;\r

  \  cw = ch = sz;\r

  \  iw = img.naturalWidth;\r

  \  ih = img.naturalHeight;\r

  \  fw = cw / iw;\r

  \  fh = ch / ih;\r

  \  f = Math.min(fw, fh);\r

  \  iw *= f;\r

  \  ih *= f;\r

  \  padw = (cw - iw) / 2;\r

  \  padh = (ch - ih) / 2;\r

  \  let dx, dy, cwNet, chNet;\r

  \  if (padw < padmin && padh < padmin) {\r

  \    padw = padh = padmin;\r

  \    cwNet = cw - 2 * padmin;\r

  \    chNet = ch - 2 * padmin;\r

  \    iw = img.naturalWidth;\r

  \    ih = img.naturalHeight;\r

  \    fw = cwNet / iw;\r

  \    fh = chNet / ih;\r

  \    f = Math.min(fw, fh);\r

  \    iw *= f;\r

  \    ih *= f;\r

  \  }\r

  \  let ctx = canvas.getContext(\"2d\");\r

  \  let color = getBackgroundColor(img, ctx);\r

  \  ctx.clearRect(0, 0, sz, sz);\r

  \  drawColoredCircle(canvas, sz, color, color);\r

  \  ctx.drawImage(img, padw, padh, iw, ih);\r

  \  ctx.globalCompositeOperation = 'destination-in';\r

  \  ctx.beginPath();\r

  \  ctx.arc(cw / 2, ch / 2, ch / 2, 0, Math.PI * 2);\r

  \  ctx.closePath();\r

  \  ctx.fill();\r

  }"
cRound: "function cRound(dParent, styles = {}, id) {\r

  \  styles.w = valf(styles.w, Card.sz);\r

  \  styles.h = valf(styles.h, Card.sz);\r

  \  styles.rounding = '50%';\r

  \  return cBlank(dParent, styles, id);\r

  }"
cSetOrigin: "function cSetOrigin(ctx, x, y) {\r

  \  ctx.translate(x, y);\r

  }"
cShadow: "function cShadow(ctx, color, offx, offy, blur) {\r

  \  ctx.shadowColor = color;\r

  \  ctx.shadowOffsetX = offx;\r

  \  ctx.shadowOffsetY = offy;\r

  \  ctx.shadowBlur = blur;\r

  }"
cStyle: "function cStyle(styles, ctx) {\r

  \  if (nundef(ctx)) { ctx = CX; if (nundef(ctx)) { console.log('ctx
  undefined!!!!!!!'); return; } }\r

  \  const di = { bg: 'fillStyle', fill: 'fillStyle', stroke: 'strokeStyle',
  fg: 'strokeStyle', thickness: 'lineWidth', thick: 'lineWidth', cap: 'lineCap',
  ending: 'lineCap' };\r

  \  if (isdef(styles)) {\r

  \    for (const k in styles) { ctx[isdef(di[k]) ? di[k] : k] = styles[k];
  }\r

  \  }\r

  }"
cStyle_dep: "function cStyle_dep(cvx, fill, stroke, wline, cap) {\r

  \  cvx.fillStyle = fill;\r

  \  if (isdef(stroke)) cvx.strokeStyle = stroke;\r

  \  if (isdef(wline)) cvx.lineWidth = wline;\r

  \  if (isdef(cap)) cvx.lineCap = cap;\r

  }"
csv_table_example: "function csv_table_example(dParent) {\r

  \  mystring = get_csv_example();\r

  \  present_table_from_csv(mystring, dParent);\r

  }"
csv2list: "function csv2list(allText, hasHeadings = true) {\r

  \  var numHeadings = 11;\r

  \  var allTextLines = allText.split(/\\r\\n|\\n/);\r

  \  var headings = allTextLines[0].split(',');\r

  \  numHeadings = headings.length;\r

  \  let entries = allTextLines.splice(1);\r

  \  var records = [];\r

  \  for (const e of entries) {\r

  \    let o = {};\r

  \    let values = e.split(',');\r

  \    for (let i = 0; i < numHeadings; i++) {\r

  \      let k = headings[i];\r

  \      o[k] = values[i];\r

  \    }\r

  \    records.push(o);\r

  \  }\r

  \  return records;\r

  }"
cTest03_2Hands_transfer: "function cTest03_2Hands_transfer() {\r

  \  let deck1 = DA.h1.deck;\r

  \  let deck2 = DA.h2.deck;\r

  \  let item = DA.item;\r

  \  deck1.addTop(item.val);\r

  \  deck2.remove(item.val);\r

  \  iPresentHand_test(dTable, DA.h1);\r

  \  iPresentHand_test(dTable, DA.h2);\r

  \  iSortHand_test(dTable, DA.h1)\r

  }"
cTest03_2Hands_transferStarts: "function cTest03_2Hands_transferStarts() {\r

  \  let h1 = DA.h1.iHand;\r

  \  let n1 = h1.items.length;\r

  \  let h2 = DA.h2.iHand;\r

  \  let n2 = h2.items.length;\r

  \  let c = chooseRandom(h2.items);\r

  \  DA.item = c;\r

  \  let w = c.w;\r

  \  let ov = w / 4;\r

  \  let xOffset = n1 * ov;\r

  \  console.log('w', w, 'ov', ov, 'xOffset', xOffset)\r

  \  iMoveFromTo(c, h2.div, h1.div, cTest03_2Hands_transfer, { x: xOffset, y:
  0 });\r

  }"
cTest03_2HandsRandom: "function cTest03_2HandsRandom() {\r

  \  let h1 = iMakeHand_test(dTable, [33, 7, 1, 2, 3, 4], 'h1');\r

  \  let h2 = iMakeHand_test(dTable, [13, 14, 15, 16, 17], 'h2');\r

  \  setTimeout(cTest03_2Hands_transferStarts, 1000);\r

  }"
cTest04_2HandsRandom: "function cTest04_2HandsRandom() {\r

  \  let iarr = [33, 7, 1, 2, 3, 4], dParent = dTable, id = 'h1';\r

  \  let data = DA[id] = {};\r

  \  let h = data.deck = new DeckClass();\r

  \  h.init(iarr);\r

  \  let redo = true;\r

  \  h = data;\r

  \  if (nundef(h.zone)) {\r

  \    let nmax = 10, padding = 10;\r

  \    let sz = netHandSize(nmax);\r

  \    h.zone = mZone(dParent, { w: sz.w, h: sz.h, bg: 'random', padding:
  padding, rounding: 10 });\r

  \  } else {\r

  \    clearElement(h.zone);\r

  \  }\r

  \  if (nundef(h.iHand)) {\r

  \    let items = i52(h.deck.cards());\r

  \    h.iHand = iSplay(items, h.zone);\r

  \  } else if (redo) {\r

  \    clearElement(h.zone);\r

  \    let items = i52(h.deck.cards());\r

  \    h.iHand = iSplay(items, h.zone);\r

  \  }\r

  \  let h2 = iMakeHand([13, 14, 15, 16, 17], dParent, {}, 'h2');\r

  \  setTimeout(cTest03_2Hands_transferStarts, 1000);\r

  }"
cTest05: "function cTest05() {\r

  \  setBackgroundColor(null, 'random')\r

  \  mStyle(dTable, { h: 400, bg: 'black', padding: 10 });\r

  \  let SPEC = { layout: ['T T', 'H A'], showAreaNames: true };\r

  \  let s = '';\r

  \  let m = [];\r

  \  for (const line of SPEC.layout) {\r

  \    s += '\"' + line + '\" ';\r

  \    let letters = line.split(' ');\r

  \    let arr = [];\r

  \    for (const l of letters) { if (!isEmpty(l)) arr.push(l); }\r

  \    m.push(arr);\r

  \  }\r

  \  console.log('m', m, '\\ns', s); return;\r

  \  let rows = SPEC.layout.length;\r

  \  let hCard = 110;\r

  \  let hTitle = 20;\r

  \  let gap = 4;\r

  \  let hGrid = rows * (hCard + hTitle) + gap * (rows + 1);\r

  \  let wGrid = '80%';\r

  \  let dGrid = mDiv(dTable, { h: hGrid, w: wGrid, 'grid-template-areas': s,
  bg: 'yellow' });\r

  }"
cTest05B: "function cTest05B() {\r

  \  let dGridContainer = mDiv100(dTable, { bg: 'yellow' });\r

  \  let areas = mAreas(dGridContainer);\r

  \  areas.map(x => mCenterCenterFlex(x.div));\r

  \  let dGrid = dGridContainer.children[0];\r

  \  mStyle(dGrid, { gap: 5, bg: 'blue', box: true, padding: 5 })\r

  \  console.log(dTrick, dGridContainer.children[0]);\r

  \  areas.map(x => mStyle(x.div, { h: 110 }));\r

  }"
cTest10: "function cTest10() {\r

  \  let layout = ['T', 'H A'];\r

  \  let x = createGridLayout(dTable, layout);\r

  \  console.log('x', x);\r

  }"
cTitleArea: "function cTitleArea(card, h, styles, classes) {\r

  \  let dCard = iDiv(card);\r

  \  let dTitle = mDiv(dCard, { w: '100%', h: h, overflow: 'hidden',
  upperRounding: card.rounding });\r

  \  let dMain = mDiv(dCard, { w: '100%', h: card.h - h, lowerRounding:
  card.rounding });\r

  \  iAdd(card, { dTitle: dTitle, dMain: dMain });\r

  \  if (isdef(styles)) mStyle(dTitle, styles);\r

  \  return [dTitle, dMain];\r

  }"
cumulative_distribution: "function cumulative_distribution(from, to, mean,
  stdev, n = 0) {\r

  \  function cdfNormal(x, mean = 100, standardDeviation = 15) {\r

  \    return (1 - math.erf((mean - x) / (Math.sqrt(2) * standardDeviation)))
  / 2;\r

  \  }\r

  \  let res;\r

  \  if (to < from) { let h = from; from = to; to = h; }\r

  \  assertion(from <= to, 'MATH!!!!!!!!!!!!!!!??????????????????????')\r

  \  if (from <= mean && to >= mean) {\r

  \    let kleiner_als_from = cdfNormal(from, mean, stdev);
  console.log(kleiner_als_from)\r

  \    let kleiner_als_mean = cdfNormal(mean, mean, stdev);
  console.log(kleiner_als_mean)\r

  \    let res1 = kleiner_als_mean - kleiner_als_from; console.log('res1',
  res1);\r

  \    let kleiner_als_to = cdfNormal(to, mean, stdev);
  console.log(kleiner_als_to)\r

  \    let res2 = kleiner_als_to - kleiner_als_mean; console.log('res2',
  res2);\r

  \    console.log(res1 + res2); res = res1 + res2;\r

  \  } else {\r

  \    let kleiner_als_to = cdfNormal(to, mean, stdev);
  console.log(kleiner_als_to)\r

  \    let kleiner_als_from = cdfNormal(from, mean, stdev);
  console.log(kleiner_als_from)\r

  \    res = kleiner_als_to - kleiner_als_from; console.log('res', res);\r

  \  }\r

  \  return 100 * res.toFixed(n);\r

  }"
cv_init_origin: "function cv_init_origin(canvas, origin) {\r

  \  let cv = canvas.cv;\r

  \  if (nundef(origin)) origin = 'cc';\r

  \  let pt = origin;\r

  \  if (isString(origin)) {\r

  \    let v = origin[0], h = origin[1];\r

  \    let y = v == 't' ? 0 : v == 'c' ? cv.height / 2 : cv.height;\r

  \    let x = h == 'l' ? 0 : h == 'c' ? cv.width / 2 : cv.width;\r

  \    pt = { x: x, y: y };\r

  \  }\r

  \  return pt;\r

  }"
cycle: function cycle(x, min, max) { let d = max - min; return (x - min) % d + min; }
dachain: "function dachain(ms = 0) {\r

  \  console.log('TestInfo', TestInfo)\r

  \  if (!isEmpty(DA.chain) && !(DA.test.running && DA.test.step == true)) {\r

  \    dachainext(ms);\r

  \  } else if (isEmpty(DA.chain)) console.log('DA.chain EMPTY ' +
  DA.test.iter)\r

  }"
dachain_orig: "function dachain_orig(ms = 0) {\r

  \  if (!isEmpty(DA.chain)) {\r

  \    dachainext(ms);\r

  \  } else console.log('DA.chain EMPTY ' + ITER)\r

  }"
dachainext: "function dachainext(ms = 0) {\r

  \  let f = DA.chain.shift();\r

  \  if (ms > 0) TOMan.TO[getUID('f')] = setTimeout(f, ms);\r

  \  else f();\r

  }"
danext: function danext() { if (isdef(DA.next)) { let f = DA.next; DA.next =
  null; f(); } }
darkerColor: "function darkerColor(r, g, b) {\r

  \  let hsv = rgbToHsv(r, g, b);\r

  \  testHelpers(hsv);\r

  \  let h = hsv.h;\r

  \  let s = hsv.s;\r

  \  let v = hsv.v / 2;\r

  \  let hsl = hsvToHsl(h, s, v);\r

  \  h = hsl.h;\r

  \  s = hsl.s * 100;\r

  \  let l = hsl.l * 100;\r

  \  testHelpers('hsl:', h, s, l);\r

  \  return hslToHslaString(h, s, l);\r

  }"
dastaged: "function dastaged(r, uname, ms = 0) {\r

  \  if (!isEmpty(DA.staged_moves)) {\r

  \    let action = DA.staged_moves.shift();\r

  \    if (action == 'meld') {\r

  \      let a = firstCond(r.actions, x => startsWith(x, `${uname}.hand.`));\r

  \      if (!a) { console.log('staged action', action, 'cannot be completed',
  r.actions); return; } else action = a;\r

  \    }\r

  \    if (action == 'draw') {\r

  \      let a = firstCond(r.actions, x => startsWith(x, `draw.decks.`));\r

  \      if (!a) { console.log('staged action', action, 'cannot be completed',
  r.actions); return; } else action = a;\r

  \    }\r

  \    if (ms > 0) TOMan.TO[getUID('f')] = setTimeout(() =>
  autoselect_action(r, action, uname), ms);\r

  \    else autoselect_action(r, action, uname);\r

  \  }\r

  }"
data_from_client: "function data_from_client(raw) {\r

  \  assertion(is_stringified(raw), 'data should be stringified
  json!!!!!!!!!!!!!!!', raw);\r

  \  let js = JSON.parse(raw);\r

  \  return js;\r

  }"
date2locale: function date2locale(date) { return date.toLocaleDateString(); }
db_add_code: "function db_add_code() {\r

  \  let kw = prompt('Enter Keywords');\r

  \  let text = dCode.value;\r

  \  console.log('saving', kw, text);\r

  \  let code = { kw: kw, c: text };\r

  \  let data = { table: 'code', item: code };\r

  \  lookupAddToList(DB, ['code'], code);\r

  \  post_json('http://localhost:3000/db/add/code', code, r =>
  console.log('resp', r));\r

  }"
db_clear_players: "function db_clear_players(friendly) {\r

  \  assertion(isdef(GT[friendly]), `table ${friendly} does NOT exist!!!!`);\r

  \  let t = GT[friendly];\r

  \  for (const pldata of t.playerdata) { pldata.state = null;
  pldata.player_status = null; }\r

  \  return t.playerdata;\r

  }"
db_create: "function db_create(table, rec, db) {\r

  \  if (!db) { db = DB; }\r

  \  lookupAddToList(db, ['appdata', table], rec);\r

  \  return db;\r

  }"
db_delete: "function db_delete(table, i, db) {\r

  \  if (!db) { db = DB; }\r

  \  if (nundef(i)) delete db.appdata[table]; else arrRemovip(lookup(db,
  ['appdata', table])[i]);\r

  \  return db;\r

  }"
db_init: function db_init(db) { DB = db; return db; }
db_init_code: "function db_init_code() {\r

  \  let code = [\r

  \    { kw: 'post route', c:
  `post_json('http://localhost:3000/post/json',o,r=>console.log('resp',r));`
  },\r

  \    { kw: 'get yaml route', c: `await
  route_path_yaml_dict('http://localhost:3000/route')` },\r

  \    { kw: 'get json route', c: `await
  route_path_json('http://localhost:3000/route')` },\r

  \  ];\r

  \  DB.code = code;\r

  \  post_json('http://localhost:3000/db/init/code', code, r =>
  console.log('resp', r));\r

  }"
db_list_code: "function db_list_code() {\r

  \  for (const code of DB.code) {\r

  \  }\r

  }"
db_new_table: "function db_new_table(friendly, game, host, players, fen,
  options) {\r

  \  let table = { friendly, game, host, players, fen, options };\r

  \  table.modified = Date.now();\r

  \  let playerdata = [];\r

  \  for (const plname of players) {\r

  \    playerdata.push({ name: `${plname}`, state: null, player_status: null
  });\r

  \  }\r

  \  let res = { table, playerdata };\r

  \  GT[friendly] = res;\r

  \  return res;\r

  }"
db_read_playerdata: "function db_read_playerdata(friendly) {\r

  \  assertion(isdef(GT[friendly]), `table ${friendly} does NOT exist!!!!`);\r

  \  return GT[friendly].playerdata;\r

  }"
db_read_table: "function db_read_table(friendly) {\r

  \  assertion(isdef(GT[friendly]), `table ${friendly} does NOT exist!!!!`);\r

  \  return GT[friendly].table;\r

  }"
db_readall: "function db_readall(db) {\r

  \  if (!db) { db = DB; }\r

  \  return db;\r

  }"
db_save: "function db_save() {\r

  \  if (!is_online()) { console.log('not saving! (no internet)'); return; }\r

  \  let txt = jsyaml.dump(DB);\r

  \  to_server({ db: txt }, 'dbsave');\r

  }"
db_table_exists: function db_table_exists(friendly) { return isdef(GT[friendly]); }
db_update: "function db_update(table, i, rec, save = false) {\r

  \  if (isdef(DB)) { let list = lookup(DB, ['appdata', table]); list[i] =
  rec; }\r

  \  if (NODEJS) post_json(SERVERURL + `/update`, { table: table, i: i, rec:
  rec, save: save }, () => console.log('updated db'));\r

  }"
db_write_fen: "function db_write_fen(friendly, fen, scoring = null) {\r

  \  assertion(isdef(GT[friendly]), `table ${friendly} does NOT exist!!!!`);\r

  \  let t = GT[friendly];\r

  \  let table = t.table;\r

  \  table.fen = fen; table.scoring = scoring; table.phase = isdef(scoring) ?
  'over' : '';\r

  \  table.modified = Date.now();\r

  \  return table;\r

  }"
db_write_player: "function db_write_player(friendly, uname, state,
  player_status) {\r

  \  assertion(isdef(GT[friendly]), `table ${friendly} does NOT exist!!!!`);\r

  \  let t = GT[friendly];\r

  \  let pldata = firstCond(t.playerdata, x => x.name == uname);\r

  \  pldata.state = state;\r

  \  pldata.player_status = player_status;\r

  \  pldata.checked = Date.now();\r

  \  return t.playerdata;\r

  }"
dbInit: "async function dbInit(appName, dir = '../DATA/') {\r

  \  let users = await route_path_yaml_dict(dir + 'users.yaml');\r

  \  let settings = await route_path_yaml_dict(dir + 'settings.yaml');\r

  \  let addons = await route_path_yaml_dict(dir + 'addons.yaml');\r

  \  let games = await route_path_yaml_dict(dir + 'games.yaml');\r

  \  let tables = await route_path_yaml_dict(dir + 'tables.yaml');\r

  \  DB = {\r

  \    id: appName,\r

  \    users: users,\r

  \    settings: settings,\r

  \    games: games,\r

  \    tables: tables,\r

  \    addons: addons,\r

  \  };\r

  \  dbSave(appName);\r

  }"
dbLoad: "async function dbLoad(appName, callback) {\r

  \  let url = SERVERURL;\r

  \  fetch(url, {\r

  \    method: 'GET',\r

  \    headers: {\r

  \      'Accept': 'application/json',\r

  \      'Content-Type': 'application/json'\r

  \    },\r

  \  }).then(async data => {\r

  \    let sData = await data.json();\r

  \    DB = firstCond(sData, x => x.id == appName);\r

  \    if (isdef(callback)) callback();\r

  \  });\r

  }"
dbLoadX: async function dbLoadX() { DB = await route_path_yaml_dict('./DB.yaml'); }
dbSave: "function dbSave() {\r

  \  if (NODEJS) {\r

  \    let route = `/post/json`;\r

  \    let o = { filename: 'db', data: DB }\r

  \    let callback = () => console.log('saved db');\r

  \    post_json(route, o, callback);\r

  \    console.log('full route', route);\r

  \  } else console.log('not saved - no app running!')\r

  }"
dbSaveX: "async function dbSaveX(callback) {\r

  \  if (USELIVESERVER) {\r

  \    return;\r

  \  }\r

  \  if (BlockServerSend1) { setTimeout(() => dbSaveX(callback), 1000); }\r

  \  else {\r

  \    let path = './MZZ/DB.yaml';\r

  \    let resp = await postData('http://localhost:3000/db', { obj: DB, path:
  path });\r

  \    BlockServerSend1 = false;\r

  \    if (callback) callback();\r

  \  }\r

  }"
ddStart: "function ddStart(ev, source, isCopy = true, clearTarget = false) {\r

  \  if (!canAct() || isdef(DDInfo.dragStartHandler) &&
  !DDInfo.dragStartHandler(source)) return;\r

  \  ev.preventDefault();\r

  \  ev.stopPropagation();\r

  \  DDInfo.source = source;\r

  \  let d = iDiv(source);\r

  \  var clone = DragElem = DDInfo.clone = d.cloneNode(true);\r

  \  clone.isCopy = isCopy;\r

  \  clone.clearTarget = clearTarget;\r

  \  mAppend(document.body, clone);\r

  \  mClass(clone, 'dragelem');\r

  \  mStyle(clone, { left: ev.clientX - ev.offsetX, top: ev.clientY -
  ev.offsetY });\r

  \  DDInfo.dragOffset = clone.drag = { offsetX: ev.offsetX, offsetY:
  ev.offsetY };\r

  \  document.body.onmousemove = onMovingCloneAround;\r

  \  document.body.onmouseup = onReleaseClone;\r

  }"
deactivate_ui: function deactivate_ui() { uiActivated = false; DA.ai_is_moving = true; }
deactivateChat: "function deactivateChat(key) {\r

  \  console.log('deactivate chat', key, ActiveChats[key]);\r

  \  mClassRemove(ActiveChats[key].div, 'activeChat'); clearChatWindow();\r

  }"
deactivateFocusGroup: "function deactivateFocusGroup() {\r

  \  if (Goal.iFocus === null) {\r

  \    return;\r

  \  }\r

  \  let g = Goal.words[Goal.iFocus];\r

  \  g.div.style.backgroundColor = g.obg;\r

  \  Goal.iFocus = null;\r

  }"
deactivateTooltips: "function deactivateTooltips() {\r

  \  for (const oid in G.table) {\r

  \    $('#' + oid).unbind('mouseover mouseout');\r

  \  }\r

  \  for (const oid in G.players) {\r

  \    $('#' + oid).unbind('mouseover mouseout');\r

  \  }\r

  }"
deactivateTooltips_hallo: "function deactivateTooltips_hallo() {\r

  \  for (const oid in G.table) {\r

  \    $('#' + oid).unbind('mouseover mouseout');\r

  \  }\r

  \  for (const oid in G.players) {\r

  \    $('#' + oid).unbind('mouseover mouseout');\r

  \  }\r

  }"
deactivateUis: "function deactivateUis(R) {\r

  \  for (const uid in R.uiNodes) {\r

  \    let n = R.uiNodes[uid];\r

  \    if (n.oid && n.ui) {\r

  \      n.act.deactivate();\r

  \    }\r

  \  }\r

  \  R.isUiActive = false;\r

  }"
deal1: "function deal1(deck, w, h) {\r

  \  deck.cards.forEach(function (card, i) {\r

  \    card.setSide('front')\r

  \    card.animateTo({\r

  \      delay: 1000 + i * 2,\r

  \      duration: 500,\r

  \      ease: 'quartOut',\r

  \      x: Math.random() * w - w / 2,\r

  \      y: Math.random() * h - h / 2\r

  \    })\r

  \  });\r

  }"
dec_g_index: function dec_g_index(i) { set_g_index(G.i - 1); }
dec_level_on_losestreak: "function dec_level_on_losestreak() {\r

  \  let players = get_values(Session.cur_players);\r

  \  let scores = players.map(x => x.score);\r

  \  let min = arrMin(scores);\r

  \  let losers = players.filter(x => x.score == min).map(x => x.name);\r

  \  let game = Session.cur_game;\r

  \  for (const w of losers) {\r

  \    let o = lookup(DB.users, [w, 'games', game]);\r

  \    o.losestreak = DB.users[w].games[game].losestreak = isdef(o.losestreak)
  ? o.losestreak + 1 : 1;\r

  \    if (o.losestreak >= 1) {\r

  \      let currentlevel = get_startlevel(w, game);\r

  \      lookupSetOverride(DB.users, [w, 'games', game, 'startlevel'],
  Math.max(currentlevel - 1, 0));\r

  \      delete o.losestreak;\r

  \    }\r

  \  }\r

  }"
Deck: "function Deck() {\r

  \  this.cardWidth = 55;\r

  \  this.cardHeight = 80;\r

  \  this.cardSuit = 13;\r

  \  this.cardTotal = 52;\r

  \  this.cardURL = \"../images/cards2/\";\r

  \  this.cardReverse = \"reverse\";\r

  \  this.cardName = \"\";\r

  \  this.cardExtension = \".png\";\r

  \  this.throwed = new Array(this.cardTotal);\r

  \  this.throwCard = function () {\r

  \    var id = Math.floor(Math.random() * this.throwed.length);\r

  \    while (this.throwed[id])\r

  \      if (++id == this.throwed.length)\r

  \        id = 0;\r

  \    this.throwed[id] = true;\r

  \    return (id)\r

  \  }\r

  \  this.cardSrc = function (id, reverse) {\r

  \    var srcname = (reverse) ? this.cardReverse : (this.cardName +
  String(id));\r

  \    return (this.cardURL + srcname + this.cardExtension);\r

  \  }\r

  }"
deck_add: function deck_add(deck, n, arr) { let els = deck_deal(deck, n);
  els.map(x => arr.push(x)); return arr; }
deck_deal: function deck_deal(deck, n) { return deck.splice(0, n); }
deck_deal_safe_ferro: "function deck_deal_safe_ferro(fen, plname, n) {\r

  \  if (fen.deck.length < n) {\r

  \    fen.deck = fen.deck.concat(fen.deck_discard.reverse());\r

  \    fen.deck_discard = [];\r

  \  }\r

  \  let new_cards = deck_deal(fen.deck, n);\r

  \  fen.players[plname].hand.push(...new_cards);\r

  \  new_cards.map(x => lookupAddToList(fen.players[plname], ['newcards'],
  x));\r

  \  return new_cards;\r

  }"
deck_deal_safe_fritz: "function deck_deal_safe_fritz(fen, plname, n = 1) {\r

  \  if (fen.deck.length < n) {\r

  \    fen.deck = create_fen_deck('n', fen.num_decks, 0);\r

  \    fen.loosecards.push('*Hn');\r

  \  }\r

  \  let new_cards = deck_deal(fen.deck, n);\r

  \  fen.players[plname].hand.push(...new_cards);\r

  \  new_cards.map(x => lookupAddToList(fen.players[plname], ['newcards'],
  x));\r

  \  return new_cards;\r

  }"
deck52Back: "function deck52Back(card) {\r

  \  card.elem.setAttribute('class', 'card');\r

  }"
deck52Prep: "function deck52Prep(card) {\r

  \  let elem = card.elem;\r

  \  var suitName = iToSuit52_G(card.suit);\r

  \  if (card.suitName == 'joker' && card.rank > 3)\r

  \    elem.setAttribute('class', 'card joker');\r

  \  else elem.setAttribute('class', 'card ' + suitName + ' rank' +
  card.rank);\r

  }"
deck52Update: function deck52Update(card) { deck52Prep(card); }
deckAPrep: "function deckAPrep(card) {\r

  \  let elem = card.elem;\r

  \  let i = card.i;\r

  \  elem.setAttribute('class', 'card joker');\r

  }"
deckEmptyBack: "function deckEmptyBack(card) {\r

  \  card.elem.setAttribute('class', 'card');\r

  }"
deckEmptyPrep: "function deckEmptyPrep(card) {\r

  \  let elem = card.elem;\r

  \  elem.setAttribute('class', 'card joker');\r

  }"
deckEmptyUpdate: function deckEmptyUpdate(card) { deckEmptyPrep(card); }
deckWiseBack: "function deckWiseBack(card) {\r

  \  card.elem.setAttribute('class', 'card');\r

  }"
deckWiseUpdate: function deckWiseUpdate(card) { deckEmptyPrep(card); }
decodeColor: "function decodeColor(c) {\r

  \  let parts = c.split(' ');\r

  \  if (parts.length == 1) return c;\r

  \  else if (parts.length == 2 && (parts[1][0] == '.' || parts[1][0] == '0'))
  {\r

  \    return colorFrom(parts[0], Number(parts[1]));\r

  \  } else {\r

  \    let n = Number(parts[1]);\r

  \    let lumParam = n / 50 - 1.0;\r

  \    let cAltered = colorShade(lumParam, parts[0]);\r

  \    if (parts.length > 2) { cAltered = colorFrom(cAltered,
  Number(parts[2])); }\r

  \    return cAltered;\r

  \  }\r

  }"
decodeParams: "function decodeParams(n, R, defParams) {\r

  \  if (isdef(n.params) && isdef(n.params._NODE)) {\r

  \    let spk = n.params._NODE;\r

  \    let oParams = R.getSpec()[spk];\r

  \    for (const k in oParams) {\r

  \      n.params[k] = oParams[k];\r

  \    }\r

  \    delete n.params._NODE;\r

  \    let r = R.rNodes[n.uid];\r

  \    r.params = jsCopy(n.params);\r

  \  }\r

  \  if (nundef(n.params)) n.params = lookup(R.defs, [n.type, 'params']);\r

  \  if (!n.params) n.params = {};\r

  \  let inherited = lookup(defParams, [n.type, 'params']);\r

  \  let defaults = lookup(R.defs, [n.type, 'params']);\r

  \  let defs = n.params.inherit ? inherited : defaults ? defaults : {};\r

  \  if (n.type != 'grid') n.params = mergeOverrideArrays(defs, n.params);\r

  \  let o = isdef(n.oid) ? R.getO(n.oid) : null;\r

  \  let pNew = {};\r

  \  if (o) {\r

  \    pNew = mapValues(o, n.params, defs, R.getSpec());\r

  \    for (const k in pNew) { pNew[k] = calcContentFromData(n.oid, o,
  pNew[k], R); }\r

  \  } else pNew = n.params;\r

  \  if (isdef(pNew.bg) || isdef(pNew.fg)) {\r

  \    [pNew.bg, pNew.fg] = getExtendedColors(pNew.bg, pNew.fg);\r

  \  }\r

  \  let pNew1 = {};\r

  \  for (const k in pNew) { if (nundef(pNew[k])) continue; pNew1[k] =
  pNew[k]; }\r

  \  pNew = pNew1;\r

  \  for (const k in pNew) { if (COLORPARAMNAMES[k]) pNew[k] =
  decodeColor(pNew[k]); }\r

  \  let params = paramsToCss(pNew);\r

  \  n.params = pNew;\r

  \  n.typParams = params.typ;\r

  \  n.cssParams = params.css;\r

  \  n.stdParams = params.std;\r

  }"
decodePropertyPath: "function decodePropertyPath(o, path) {\r

  \  if (isString(path) && path[0] == '.') {\r

  \    let props = path.split('.').slice(1);\r

  \    return lookup(o, props);\r

  \  }\r

  }"
decompose_2d_matrix: "function decompose_2d_matrix(mat) {\r

  \  var a = mat[0];\r

  \  var b = mat[1];\r

  \  var c = mat[2];\r

  \  var d = mat[3];\r

  \  var e = mat[4];\r

  \  var f = mat[5];\r

  \  var delta = a * d - b * c;\r

  \  let result = {\r

  \    translation: [e, f],\r

  \    rotation: 0,\r

  \    scale: [0, 0],\r

  \    skew: [0, 0],\r

  \  };\r

  \  if (a != 0 || b != 0) {\r

  \    var r = Math.sqrt(a * a + b * b);\r

  \    result.rotation = b > 0 ? Math.acos(a / r) : -Math.acos(a / r);\r

  \    result.scale = [r, delta / r];\r

  \    result.skew = [Math.atan((a * c + b * d) / (r * r)), 0];\r

  \  } else if (c != 0 || d != 0) {\r

  \    var s = Math.sqrt(c * c + d * d);\r

  \    result.rotation =\r

  \      Math.PI / 2 - (d > 0 ? Math.acos(-c / s) : -Math.acos(c / s));\r

  \    result.scale = [delta / s, s];\r

  \    result.skew = [0, Math.atan((a * c + b * d) / (s * s))];\r

  \  } else {\r

  \  }\r

  \  return result;\r

  }"
decomposeMatrix: "function decomposeMatrix(matrix) {\r

  \  // @see https://gist.github.com/2052247\r

  \  var px = deltaTransformPoint(matrix, { x: 0, y: 1 });\r

  \  var py = deltaTransformPoint(matrix, { x: 1, y: 0 });\r

  \  var skewX = (180 / Math.PI) * Math.atan2(px.y, px.x) - 90;\r

  \  var skewY = (180 / Math.PI) * Math.atan2(py.y, py.x);\r

  \  return {\r

  \    translateX: matrix.e,\r

  \    translateY: matrix.f,\r

  \    scaleX: Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b),\r

  \    scaleY: Math.sqrt(matrix.c * matrix.c + matrix.d * matrix.d),\r

  \    scale: Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b),\r

  \    skewX: skewX,\r

  \    skewY: skewY,\r

  \    rotation: skewX\r

  \  };\r

  }"
decorateVisual: "function decorateVisual(ms, { draw = true, rings = 3, bg =
  'darkslategray', fg = 'lime', label, shape = 'circle', palette, ipal, fill, x
  = 0, y = 0, w = 25, h = 25, sPoints, border = 'green', thickness = 1,
  rounding, path, txt, fz = 12, sz, overlay = true } = {}) {\r

  \  console.log('decorate', ms)\r

  \  let options = {};\r

  \  let labelOptions = {};\r

  \  if (palette && ipal) fill = palette[ipal];\r

  \  else if (ipal) fill = S.pal[ipal];\r

  \  if (bg) ms.setBg(bg);\r

  \  if (fg) { ms.setFg(fg); }\r

  \  if (fill) options.fill = fill;\r

  \  if (x) options.x = x;\r

  \  if (y) options.y = y;\r

  \  if (h) { options.h = h; options.sz = h; }\r

  \  if (w) { options.w = w; options.sz = w; }\r

  \  if (sz) options.sz = sz;\r

  \  if (txt) { options.txt = txt; labelOptions.txt = txt; }\r

  \  if (label) { labelOptions.txt = label; }\r

  \  if (fz) { options.fz = fz; labelOptions.fz = fz; }\r

  \  if (sPoints) options.sPoints = sPoints;\r

  \  if (border) options.border = border;\r

  \  if (thickness) options.thickness = thickness;\r

  \  if (rounding) options.rounding = rounding;\r

  \  if (path) options.path = './assets/images/transpng/' + path + '.png';\r

  \  if (rings) {\r

  \  } else rings = 1;\r

  \  dSize = Math.max(w / 6, 5);\r

  \  for (let i = 0; i < rings; i++) {\r

  \    switch (shape) {\r

  \      case 'circle':\r

  \        ms.circle(options);\r

  \        break;\r

  \      case 'hex':\r

  \        ms.hex(options);\r

  \        break;\r

  \      case 'rect':\r

  \        ms.rect(options);\r

  \        break;\r

  \      case 'poly':\r

  \        ms.poly(options);\r

  \        break;\r

  \      case 'image':\r

  \        ms.image(options);\r

  \        break;\r

  \      case 'text':\r

  \        ms.text(options);\r

  \        break;\r

  \      default:\r

  \        return null;\r

  \    }\r

  \    options.w -= dSize;\r

  \    options.sz -= dSize;\r

  \    options.h -= dSize;\r

  \  }\r

  \  if (label) {\r

  \    ms.text(labelOptions);\r

  \  }\r

  \  if (h) { options.h = h; options.sz = h; }\r

  \  if (w) { options.w = w; options.sz = w; }\r

  \  if (sz) options.sz = sz;\r

  \  if (overlay) {\r

  \    overlayOptions = jsCopy(options);\r

  \    overlayOptions.className = 'overlay';\r

  \    delete overlayOptions.fill;\r

  \    delete overlayOptions.path;\r

  \    switch (shape) {\r

  \      case 'circle':\r

  \        ms.circle(overlayOptions);\r

  \        break;\r

  \      case 'hex':\r

  \        ms.hex(overlayOptions);\r

  \        break;\r

  \      case 'rect':\r

  \        ms.rect(overlayOptions);\r

  \        break;\r

  \      case 'poly':\r

  \        ms.poly(overlayOptions);\r

  \        break;\r

  \      case 'image':\r

  \        ms.rect(overlayOptions);\r

  \        break;\r

  \      case 'text':\r

  \        ms.text(overlayOptions);\r

  \        break;\r

  \      default:\r

  \        return null;\r

  \    }\r

  \  }\r

  \  if (draw) ms.attach();\r

  \  return ms;\r

  }"
decrease_handicap_if_winstreak: "function
  decrease_handicap_if_winstreak(winners, game) {\r

  \  for (const w of winners) {\r

  \    let o = lookupSet(DB.users, [w, 'games', game], {});\r

  \    o.winstreak = DB.users[w].games[game].winstreak = isdef(o.winstreak) ?
  o.winstreak + 1 : 1;\r

  \    if (o.winstreak >= 3) {\r

  \      lookupSetOverride(DB.users, [w, 'games', game, 'startlevel'],
  Math.min(o.startlevel + 1, Session.maxlevel));\r

  \      delete o.winstreak;\r

  \      console.log('...startlevel of', w, 'is increased to',
  get_startlevel(w, game));\r

  \    }\r

  \    console.log('user', w, 'db entry', o);\r

  \  }\r

  }"
deepmerge: "function deepmerge(target, source, optionsArgument) {\r

  \  var array = Array.isArray(source);\r

  \  var options = optionsArgument || { arrayMerge: defaultArrayMerge }\r

  \  var arrayMerge = options.arrayMerge || defaultArrayMerge\r

  \  if (array) {\r

  \    return Array.isArray(target) ? arrayMerge(target, source,
  optionsArgument) : cloneIfNecessary(source, optionsArgument)\r

  \  } else {\r

  \    return mergeObject(target, source, optionsArgument)\r

  \  }\r

  }"
deepmergeOverride: function deepmergeOverride(base, drueber) { return
  mergeOverrideArrays(base, drueber); }
deepmergeTest: "function deepmergeTest() {\r

  \  let o1 = { a: 1, c: 1 };\r

  \  let o2 = { a: 2, b: 2 };\r

  \  let o3 = deepmerge(o1, o2);\r

  \  logVals('___\\no1', o1); logVals('o2', o2); logVals('o3', o3);\r

  \  o1.a = 11;\r

  \  logVals('___\\no1', o1); logVals('o2', o2); logVals('o3', o3);\r

  \  o2.a = 22;\r

  \  logVals('___\\no1', o1); logVals('o2', o2); logVals('o3', o3);\r

  \  o3.a = 33;\r

  \  logVals('___\\no1', o1); logVals('o2', o2); logVals('o3', o3);\r

  }"
deepmergeTestArray: "function deepmergeTestArray() {\r

  \  let o1 = { a: 1, b: [1, 2, 3], c: 1 };\r

  \  let o2 = { a: 2, b: [2, 3, 4, 5] };\r

  \  let o3 = deepmerge(o1, o2);\r

  \  logVals('___\\no1', o1); logVals('o2', o2); logVals('o3', o3);\r

  \  o3 = mergeOverrideArrays(o1, o2);\r

  \  logVals('___\\no1', o1); logVals('o2', o2); logVals('o3', o3);\r

  \  o3 = safeMerge(o1, o2);\r

  \  logVals('___\\no1', o1); logVals('o2', o2); logVals('o3', o3);\r

  }"
default_allowDrop: function default_allowDrop(ev) { ev.preventDefault(); }
default_item_serializer: "function default_item_serializer(o) { return
  copyKeys(o, {}, { live: true }); }"
defaultArrayMerge: "function defaultArrayMerge(target, source, optionsArgument)
  {\r

  \  var destination = target.slice()\r

  \  source.forEach(function (e, i) {\r

  \    if (typeof destination[i] === 'undefined') {\r

  \      destination[i] = cloneIfNecessary(e, optionsArgument)\r

  \    } else if (isMergeableObject(e)) {\r

  \      destination[i] = deepmerge(target[i], e, optionsArgument)\r

  \    } else if (target.indexOf(e) === -1) {\r

  \      destination.push(cloneIfNecessary(e, optionsArgument))\r

  \    }\r

  \  })\r

  \  return destination\r

  }"
defaultPresentationNode: "function defaultPresentationNode(oid, o, R) {\r

  \  let nrep = {};\r

  \  let objLists = getElementLists(o);\r

  \  if (isEmpty(objLists)) {\r

  \    let litProp = firstCondDictKV(o, (k, v) => k != 'obj_type' &&
  isLiteral(v));\r

  \    let content = litProp ? o[litProp] : o.obj_type + ' ' + oid;\r

  \    nrep = { type: 'info', data: content };\r

  \  } else {\r

  \    let key1 = Object.keys(objLists)[0];\r

  \    let list1 = Object.values(objLists)[0];\r

  \    console.log('defaultPresentationNode1: first list is:', key1, list1);\r

  \    nrep = { type: 'list', pool: list1, elm: '.' + key1 };\r

  \  }\r

  \  return nrep;\r

  }"
defaultUIFunc: "function defaultUIFunc(mk) {\r

  \  let el = mk.elem = mCreate('div');\r

  \  el.style.backgroundColor = randomColor();\r

  \  el.innerHTML = formatJson(mk.o);\r

  \  el.style.textAlign = 'left';\r

  }"
defaultVisualExists: function defaultVisualExists(oid) { return
  firstCond(oid2ids[oid], x => x[0] == 'd'); }
degrade_bars: "function degrade_bars(dec) {\r

  \  let res = {};\r

  \  for (const color in DA.bars) {\r

  \    let bar = DA.bars[color];\r

  \    let val = Math.max(0, bar.w - dec);\r

  \    set_new_goal(color, val, 1);\r

  \    res[color] = val;\r

  \  }\r

  \  return res\r

  }"
delete_current_table: "function delete_current_table() {\r

  \  if (nundef(Session.cur_tid)) return;\r

  \  to_server(Session.cur_tid, 'delete_table');\r

  \  Session.cur_tid = null;\r

  \  Session.cur_table = null;\r

  }"
delete_message: "function delete_message(e) {\r

  \  if (confirm(\"Are you sure you want to delete this message??\")) {\r

  \    var msgid = e.target.getAttribute(\"msgid\");\r

  \    get_data({\r

  \      rowid: msgid\r

  \    }, \"delete_message\");\r

  \    get_data({\r

  \      username: CURRENT_CHAT_USER,\r

  \      seen: SEEN_STATUS\r

  \    }, \"chats_refresh\");\r

  \  }\r

  }"
delete_table: "function delete_table(friendly) { stop_game(); phpPost({
  friendly: friendly }, 'delete_table'); }"
delete_thread: "function delete_thread(e) {\r

  \  if (confirm(\"Are you sure you want to delete this whole thread??\")) {\r

  \    get_data({\r

  \      username: CURRENT_CHAT_USER\r

  \    }, \"delete_thread\");\r

  \    get_data({\r

  \      username: CURRENT_CHAT_USER,\r

  \      seen: SEEN_STATUS\r

  \    }, \"chats_refresh\");\r

  \  }\r

  }"
deleteActions: function deleteActions() { deleteAll('d', 'a'); }
deleteAll: "function deleteAll(rsgType, idoType) {\r

  \  let ids = IdOwner[idoType];\r

  \  ids = isdef(IdOwner[idoType]) ? IdOwner[idoType].filter(x => x[0] ==
  rsgType) : []; for (const id of ids) deleteRSG(id);\r

  }"
deleteDefaultObjects: function deleteDefaultObjects() { deleteAll('d', 't'); }
deleteDefaultPlayers: function deleteDefaultPlayers() { deleteAll('d', 'p'); }
deleteOid: "function deleteOid(oid) {\r

  \  let uids = jsCopy(oid2ids[oid]);\r

  \  for (const uid of uids) {\r

  \    if (uid[2] == 'r' || uid[2] == 'l') continue;\r

  \    if (UIS[uid]) deleteRSG(uid);\r

  \  }\r

  }"
deleteRSG: "function deleteRSG(id) {\r

  \  let mobj = UIS[id];\r

  \  if (nundef(mobj)) {\r

  \    error('object that should be deleted does NOT exist!!!! ' + id);\r

  \  }\r

  \  unhighlightMsAndRelatives(null, mobj)\r

  \  unlink(id);\r

  \  _deleteFromOwnerList(id);\r

  \  mobj.destroy();\r

  \  DELETED_IDS.push(id);\r

  \  DELETED_THIS_ROUND.push(id);\r

  \  delete UIS[id];\r

  }"
deltaTransformPoint: "function deltaTransformPoint(matrix, point) {\r

  \  var dx = point.x * matrix.a + point.y * matrix.c + 0;\r

  \  var dy = point.x * matrix.b + point.y * matrix.d + 0;\r

  \  return { x: dx, y: dy };\r

  }"
describe: "function describe(d) {\r

  \  console.log('_________________');\r

  \  console.log('innerHTML', d.innerHTML);\r

  \  console.log('firstChild', d.firstChild);\r

  \  console.log('d', d)\r

  }"
DeSelectSq: "function DeSelectSq(sq) {\r

  \  $('.Square').each(function (index) {\r

  \    if (PieceIsOnSq(sq, $(this).position().top, $(this).position().left) ==
  BOOL.TRUE) {\r

  \      $(this).removeClass('SqSelected');\r

  \    }\r

  \  });\r

  }"
DeselectSq: "function DeselectSq(sq) {\r

  \  if (GameController.BoardFlipped == BOOL.TRUE) {\r

  \    sq = MIRROR120(sq);\r

  \  }\r

  \  $(\".Square\").each(function (index) {\r

  \    if ((RanksBrd[sq] == 7 - Math.round($(this).position().top / 60)) &&
  (FilesBrd[sq] == Math.round($(this).position().left / 60))) {\r

  \      $(this).removeClass('SqSelected');\r

  \    }\r

  \  });\r

  }"
destroyInfoboxFor: function destroyInfoboxFor(oid) { let id =
  makeIdInfobox(oid); if (UIS[id]) deleteRSG(id); }
destroySudokuRule: "function destroySudokuRule(pattern, rows, cols) {\r

  \  let sz = Math.min(rows, cols);\r

  \  let [r1, r2] = choose(range(0, sz - 1), 2);\r

  \  let c = chooseRandom(range(0, sz - 1));\r

  \  if (coin(50)) { arrSwap2d(pattern, r1, c, r2, c); }\r

  \  else if (coin(50)) { arrSwap2d(pattern, c, r1, c, r2); }\r

  }"
detect_size_from_styles: "function detect_size_from_styles(st = {}, defsize =
  50) {\r

  \  return [valf(st.w, st.sz, defsize), valf(st.w, st.sz, defsize)];\r

  }"
detectArea: "function detectArea(dParent, w, h) {\r

  \  let rect = isdef(dParent) ? getRect(dParent) : null;\r

  \  if (nundef(w)) { w = rect ? rect.w : window.innerWidth; }\r

  \  if (nundef(h)) { h = rect ? rect.h : window.innerHeight; }\r

  \  return [w, h];\r

  }"
detectBoard: "function detectBoard(soDict, loc) {\r

  \  timit.showTime('*** board start ***')\r

  \  let idBoard = firstCondDict(soDict, x => isBoardObject(x));\r

  \  if (isdef(idBoard)) {\r

  \    let sBoard = soDict[idBoard];\r

  \    let idField0 = sBoard.fields._set[0]._obj;\r

  \    let f0 = soDict[idField0];\r

  \    let numNei = f0.neighbors.length;\r

  \    if (numNei == 6) return _hexGrid(loc, idBoard, sBoard, soDict); else
  return _quadGrid(loc, idBoard, sBoard, soDict);\r

  \  }\r

  \  return null;\r

  }"
detectBoardOidAndType: "function detectBoardOidAndType(oid, boardType, R) {\r

  \  if (!oid) oid = detectFirstBoardObject(R);\r

  \  let oBoard = R.getO(oid);\r

  \  if (!boardType) boardType = detectBoardType(oBoard, R);\r

  \  let fids = getElements(oBoard.fields);\r

  \  let r0 = 1000; let c0 = 1000;\r

  \  for (const fid of fids) {\r

  \    let f = R.getO(fid);\r

  \    if (f.row < r0) r0 = f.row;\r

  \    if (f.col < c0) c0 = f.col;\r

  \  }\r

  \  return [oid, boardType, r0, c0];\r

  }"
detectBoardParams: "function detectBoardParams(n, R) {\r

  \  let allParams = {};\r

  \  let boardDefs = R.defs.grid;\r

  \  if (isdef(boardDefs)) {\r

  \    let specific = R.defs[n.boardType];\r

  \    if (isdef(specific)) boardDefs = deepmerge(boardDefs, specific);\r

  \    if (isdef(boardDefs.params)) {\r

  \      if (isdef(n.params)) allParams = deepmerge(boardDefs.params,
  n.params);\r

  \      else allParams = boardDefs.params;\r

  \    }\r

  \  }\r

  \  n.bi.params = { fields: {}, corners: {}, edges: {} };\r

  \  let justBoardParams = jsCopy(allParams);\r

  \  for (const name of ['fields', 'corners', 'edges']) {\r

  \    n.bi.params[name] = justBoardParams[name];\r

  \    delete justBoardParams[name];\r

  \  }\r

  \  return justBoardParams;\r

  }"
detectBoardType: "function detectBoardType(oBoard, R) {\r

  \  let fid0 = getElements(oBoard.fields)[0];\r

  \  let nei = R.getO(fid0).neighbors;\r

  \  let len = nei.length;\r

  \  return len == 6 ? 'hexGrid' : 'quadGrid';\r

  }"
detectDecks: "function detectDecks(tableObjects, areaName) {\r

  \  let deckKeys = allCondDict(tableObjects, x => isDeckObject(x)); if
  (isEmpty(deckKeys)) return null;\r

  \  S.settings.hasCards = true;\r

  \  let deckArea = makeDeckArea(areaName, deckKeys.length);\r

  \  let msDecks = deckKeys.map(x => makeDeckSuccess(x, tableObjects[x],
  deckArea.id));\r

  \  lineupDecks(msDecks, deckArea);\r

  \  return deckKeys;\r

  }"
detectFirstBoardObject: "function detectFirstBoardObject(R) {\r

  \  for (const oid in R._sd) {\r

  \    let o = R.getO(oid);\r

  \    if (isdef(o.map) && isdef(o.fields)) return oid;\r

  \  }\r

  }"
detectItemInfoKey: "function detectItemInfoKey(itemInfoKey) {\r

  \  let item, info, key;\r

  \  if (isString(itemInfoKey)) { key = itemInfoKey; info = Syms[key]; item =
  { info: info, key: key }; }\r

  \  else if (isDict(itemInfoKey)) {\r

  \    if (isdef(itemInfoKey.info)) { item = itemInfoKey; info = item.info;
  key = item.info.key; }\r

  \    else { info = itemInfoKey; key = info.key; item = { info: info, key:
  key }; }\r

  \  }\r

  \  return [item, info, key];\r

  }"
detectItems: "function detectItems(n) {\r

  \  if (isNumber(n)) n = choose(SymKeys, n);\r

  \  if (isString(n[0])) n = n.map(x => Syms[x]);\r

  \  if (nundef(n[0].info)) n = n.map(x => infoToItem(x));\r

  \  return n;\r

  }"
detectSilben: "function detectSilben(words) {\r

  \  const syllableRegex =
  /[^aeiouy]*[aeiouy]+(?:[^aeiouy]*$|[^aeiouy](?=[^aeiouy]))?/gi;\r

  \  return words.match(syllableRegex);\r

  }"
detectSymbolKey: "function detectSymbolKey(o) {\r

  \  if (isdef(o.name)) return o.name;\r

  \  let res = null;\r

  \  for (const k in o) {\r

  \    if (!isLiteral(o[k]) || k == 'obj_type') continue;\r

  \    if (k.toLowerCase().includes('name') && isString(o[k])) return o[k];\r

  \  }\r

  \  let k = firstCondDict(o, x => isLiteral(o[k]));\r

  \  if (isdef(k)) return o[k];\r

  }"
detectType: "function detectType(id) {\r

  \  let el = document.getElementById(id);\r

  \  return getTypeOf(el);\r

  }"
determine_church_turn_order: "function determine_church_turn_order() {\r

  \  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];\r

  \  let initial = [];\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    pl.vps = ari_calc_fictive_vps(fen, plname);\r

  \    pl.max_journey_length = ari_get_max_journey_length(fen, plname);\r

  \    pl.score = pl.vps * 10000 + pl.max_journey_length * 100 + pl.coins;\r

  \    initial.push(pl);\r

  \  }\r

  \  let sorted = sortByDescending(initial, 'score');\r

  \  return sorted.map(x => x.name);\r

  }"
diContent: "function diContent(item) { return isdef(item.live) ?
  item.live.dContent : null; }"
dict_augment: function dict_augment(di, o) { addKeys(o, di); return di; }
dict_remove: "function dict_remove(di, keys) {\r\n}"
dict2list: "function dict2list(d, keyName = 'id') {\r

  \  let res = [];\r

  \  for (const key in d) {\r

  \    let val = d[key];\r

  \    let o;\r

  \    if (isDict(val)) { o = jsCopy(val); } else { o = { value: val }; }\r

  \    o[keyName] = key;\r

  \    res.push(o);\r

  \  }\r

  \  return res;\r

  }"
dict2olist: "function dict2olist(d, keyName = 'id') {\r

  \  let res = [];\r

  \  for (const key in d) {\r

  \    let val = d[key];\r

  \    let o;\r

  \    if (isDict(val)) { o = jsCopy(val); }\r

  \    else {\r

  \      o = { value: val };\r

  \    }\r

  \    o[keyName] = key;\r

  \    res.push(o);\r

  \  }\r

  \  return res;\r

  }"
dicti: "function dicti(areaName, oSpec, oid, o) {\r

  \  let [num, or, split, bg, fg, id, panels, parent] = getParams(areaName,
  oSpec, oid);\r

  \  parent.style.display = 'inline-grid';\r

  \  return parent;\r

  }"
dictOrListToString: "function dictOrListToString(x, ifDict = 'keys') {\r

  \  let lst = x;\r

  \  if (isList(lst) && !isEmpty(lst)) { return lst.join(' '); }\r

  \  else if (isDict(lst)) {\r

  \    return ifDict == 'keys' ? Object.keys(lst).join(' ')\r

  \      : ifDict == 'values' ? Object.keys(lst).join(' ')\r

  \        : Object.entries(lst).join(' ');\r

  \  }\r

  \  else return null;\r

  }"
dictToKeyList: function dictToKeyList(x) { return Object.keys(lst).join(' '); }
dictToKVList: function dictToKVList(x) { return Object.entries(lst).join(' '); }
dictToValueList: function dictToValueList(x) { return Object.values(lst).join(' '); }
differInAtMost: "function differInAtMost(req, given, n = 1) {\r

  \  let diffs = levDist(req, given);\r

  \  return diffs <= n;\r

  }"
diMessage: "function diMessage(item) { return isdef(item.live) ?
  item.live.dMessage : null; }"
disable_bar_ui: "function disable_bar_ui() {\r

  \  for (const k in DA.bars) {\r

  \    let bar = DA.bars[k];\r

  \    let b = bar.cont.getElementsByTagName('button')[0];\r

  \    b.disabled = true;\r

  \  }\r

  }"
disable_sidebar: function disable_sidebar() { close_sidebar(); }
disableButton: function disableButton(id) { disableStyle(id); }
disableButtonsForMultiplayerGame: "function disableButtonsForMultiplayerGame()
  {\r

  \  if (isReallyMultiplayer) {\r

  \    if (iAmStarter()) enableButton('c_b_Restart'); else
  disableButton('c_b_Restart');\r

  \    disableButton('c_b_Step');\r

  \    disableButton('c_b_RunToEnd');\r

  \  }\r

  }"
disableClick: "function disableClick(el) {\r

  \  let mobj = 'mobj' in el ? el.mobj : el;\r

  \  mobj.clickHandler = null;\r

  \  mobj.disable();\r

  }"
disableCreateButton: function disableCreateButton() { disableButton('bCreateGame'); }
disableHover: "function disableHover(el) {\r

  \  let mobj = 'mobj' in el ? el.mobj : el;\r

  \  mobj.mouseEnterHandler = null;\r

  \  mobj.mouseLeaveHandler = null;\r

  \  mobj.disable();\r

  }"
disableJoinButton: function disableJoinButton() { disableButton('bJoinGame'); }
disableResumeButton: "function disableResumeButton() {\r

  \  disableButton('bResumeGame');\r

  }"
disableStyle: "function disableStyle(id) {\r

  \  if (isString(id)) id = document.getElementById(id);\r

  \  id.style.pointerEvents = 'none';\r

  \  id.style.opacity = .5;\r

  \  id.style.cursor = 'none';\r

  }"
disappear: "function disappear(elem, msDuration = 1000, msStartAfter = 0) {\r

  \  if (isString(elem)) elem = mBy(elem);\r

  \  if (nundef(elem)) return;\r

  \  mStyle(elem, { overflow: 'hidden', animation: `disappear ${msDuration}ms
  ease` });\r

  \  setTimeout(() => { hide(elem); mStyle(elem, { animation: 'unset' }); },
  msDuration);\r

  }"
disconnectSocket: "function disconnectSocket() {\r

  \  if (Socket) { Socket.disconnect(); Socket = null; }\r

  }"
displayWindowSize: "function displayWindowSize() {\r

  \  var w = document.documentElement.clientWidth;\r

  \  var h = document.documentElement.clientHeight;\r

  \  for (const msId in elements) {\r

  \    elements[msId].center();\r

  \  }\r

  }"
distance: "function distance(x1, y1, x2, y2) { return Math.sqrt(dSquare({ x: x1,
  y: y1 }, { x: x2, y: y2 })); }"
distribute_innerHTML: "function distribute_innerHTML(arr, s, sep = '') {\r

  \  let letters = s.split(sep);\r

  \  for (let i = 0; i < letters.length; i++) {\r

  \    let d = iDiv(arr[i]);\r

  \    let l = letters[i];\r

  \    if (l.length > 1) {\r

  \      l = '&#x' + l.substring(3) + ';';\r

  \    }\r

  \    d.innerHTML = l;\r

  \  }\r

  \  return;\r

  \  let i = 0; arr.map(x => { iDiv(x).innerHTML = s[i]; if (i < s.length - 1)
  i++; });\r

  }"
diTitle: "function diTitle(item) { return isdef(item.live) ? item.live.dTitle : null; }"
divInt: function divInt(a, b) { return Math.trunc(a / b); }
divKeyFromEv: "function divKeyFromEv(ev) {\r

  \  let id = evToClosestId(ev);\r

  \  let div = mBy(id);\r

  \  return div.key;\r

  }"
divscrolldown: "function divscrolldown(id) {\r

  \  id = '#' + id;\r

  \  setTimeout(function () {\r

  \    $(id).animate(\r

  \      {\r

  \        scrollTop: $(id).offset().top\r

  \      },\r

  \      500\r

  \    );\r

  \  }, 200);\r

  }"
dixit_activate: "function dixit_activate(fen, plname) {\r

  \  console.log('activating for', plname)\r

  }"
dixit_get_card: "function dixit_get_card(ckey, index, h = 200) {\r

  \  let filename = `${Basepath}assets/games/dixit/img${ckey}.jpg`;\r

  \  let clip = 50;\r

  \  let html = `<img src='${filename}' height='${h + clip}'
  style='clip-path:inset(0px 0px ${clip}px 0px)'></img>`;\r

  \  let d = mDiv(null, { rounding: 8, bg: 'blue', margin: 10, h: h, w: h *
  141 / 200, overflow: 'hidden' }, null, html, 'card');\r

  \  mMagnifyOnHoverControl(d)\r

  \  let item = { key: ckey, index: index, div: d, html: html, h: h, faceUp:
  true };\r

  \  d.onclick = () => { face_up(item); };\r

  \  return item;\r

  }"
dixit_present: "function dixit_present(fen, dParent, plname) {\r

  \  F = {};\r

  \  if (isdef(fen.story)) {\r

  \    F.story = ui_message(dParent, fen.story);\r

  \  }\r

  \  if (isdef(fen.instruction) && isdef(plname) && fen.plturn == plname) {\r

  \    let dTemp = mBy('dTemp');\r

  \    dTemp.style.display = 'block';\r

  \    mAppend(dParent, dTemp);\r

  \    dTempTitle.innerHTML = 'Write a story';\r

  \    dTempForm.onsubmit = ev => dixit_submit_story(mBy('dTempInput').value,
  ev);\r

  \  }\r

  \  if (isdef(fen.tablecards)) {\r

  \    let d = mDiv(dParent, { fg: 'white', bg: user.color, w: '100%' }, null,
  'table'); mFlexWrap(d);\r

  \    pl.div = d;\r

  \    mLinebreak(d)\r

  \    let i = 0; let items = F.tablecards = fen.tablecards.map(x => { i++;
  return dixit_get_card(x, i) });\r

  \    for (const item of items) mAppend(d, iDiv(item));\r

  \  }\r

  \  let pls = F.players = {};\r

  \  for (const uname in fen.players) {\r

  \    let pl = pls[uname] = {};\r

  \    let fpl = fen.players[uname];\r

  \    console.log('dixit_present', user);\r

  \    let user = firstCond(Users, x => x.name == uname);\r

  \    copyKeys(user, pl)\r

  \    console.log('pl', uname, pl);\r

  \    if (isdef(plname) && uname != plname) continue;\r

  \    let d = mDiv(dParent, { fg: 'white', bg: user.color, w: '100%' }, null,
  uname); mFlexWrap(d);\r

  \    pl.div = d;\r

  \    mLinebreak(d)\r

  \    let i = 0; let items = pl.hand = fpl.hand.map(x => { i++; return
  dixit_get_card(x, i) });\r

  \    for (const item of items) mAppend(d, iDiv(item));\r

  \  }\r

  }"
dixit_setup: "function dixit_setup(players) {\r

  \  let fen = {};\r

  \  let deck = fen.deck = shuffle(range(0, 435));\r

  \  let pls = fen.players = {};\r

  \  for (const uname of players) {\r

  \    let pl = pls[uname] = {};\r

  \    pl.hand = deck_deal(deck, 7);\r

  \  }\r

  \  fen.plorder = rPlayerOrder(players);\r

  \  fen.turn = [fen.plorder[0]];\r

  \  fen.round = [];\r

  \  fen.iturn = 0;\r

  \  fen.phase = 'create';\r

  \  fen.instruction = 'write your story';\r

  \  return fen;\r

  }"
dixit_submit_story: "function dixit_submit_story(x, ev) {\r

  \  console.log('x', x, 'ev', ev)\r

  }"
dlColor: "function dlColor(factor, r, g, b) {\r

  \  testHelpers(r, g, b);\r

  \  let hsl = rgbToHsl(r, g, b);\r

  \  let hsv = hsl2hsv(...hsl);\r

  \  let h = hsv[0];\r

  \  let s = hsv[1];\r

  \  let v = hsv[2];\r

  \  v *= factor;\r

  \  hsl = hsv2hsl(h, s, v);\r

  \  let l = hsl[2];\r

  \  let sperc = s * 100;\r

  \  let lperc = l * 100;\r

  \  testHelpers('h,s,l,v:', h, s, l, v);\r

  \  return hslToHslaString(h, sperc, lperc);\r

  }"
dm1: "function dm1(a, b, opt) {\r

  \  if (nundef(a)) return b;\r

  \  else if (nundef(b)) return a;\r

  \  else if (isLiteral(a)) return b;\r

  \  else if (isLiteral(b)) return a;\r

  \  else if (Array.isArray(b)) {\r

  \    return Array.isArray(a) ? mergeArr(a, b, opt) : cloneIfNecessary(b,
  opt);\r

  \  } else {\r

  \    return mergeObj(a, b, opt);\r

  \  }\r

  }"
DOCStart: "async function DOCStart() {\r

  \  await loadAssets();\r

  \  createDocs();\r

  }"
documentFile: "async function documentFile(url) {\r

  \  let res = await fetchFileAsText(url);\r

  \  let regex = new RegExp('\\nasync
  function|\\nfunction|\\nvar|\\nconst|\\nclass', 'g');\r

  \  let fcode = res.split(regex);\r

  \  let code = {};\r

  \  for (const w of fcode) {\r

  \    let trimmed = w.trim();\r

  \    let name = firstWord(trimmed);\r

  \    if (!isEmpty(name)) code[name] = trimmed;\r

  \  }\r

  \  let lines = res.split('\\n');\r

  \  let i = 0;\r

  \  let iFunc = 0;\r

  \  let akku = {};\r

  \  let lastKey;\r

  \  let topComment = '';\r

  \  while (i < lines.length) {\r

  \    let result = skipToLine(lines, i, ['function', '/' + '/#r' + 'egion doc
  ']);\r

  \    if (nundef(result.option)) {\r

  \      break;\r

  \    } else if (result.option == 'function') {\r

  \      let line = lines[result.index];\r

  \      let lineTrimmed = line.trim();\r

  \      if (startsWith(lineTrimmed, 'function') || startsWith(lineTrimmed,
  'async')) {\r

  \        let line1 = stringAfter(line, 'function ');\r

  \        if (line1.includes(')')) line1 = stringBefore(line1, ')').trim() +
  ')';\r

  \        let entry = akku[line1] = { name: firstWord(line1), index: iFunc,
  comments: '', path: url };\r

  \        if (isdef(code[entry.name])) entry.code = code[entry.name];\r

  \        iFunc += 1;\r

  \        lastKey = line1;\r

  \      }\r

  \    } else {\r

  \      let iStart = result.index + 1;\r

  \      let resend = skipToLine(lines, iStart, ['//#endregion']);\r

  \      let iEnd = resend.index;\r

  \      let block = copyLinesFromTo(lines, iStart, iEnd, '/*', '*/');\r

  \      if (lastKey) akku[lastKey].comments = block;\r

  \      else topComment = block;\r

  \      lastKey = null;\r

  \    }\r

  \    i = result.index + 1;\r

  \  }\r

  \  return { funcDict: akku, topComment: topComment };\r

  }"
documentVault: "async function documentVault(pathlist) {\r

  \  let res = {};\r

  \  for (const p of pathlist) {\r

  \    let fileInfo = await documentFile(p);\r

  \    res[p] = { filename: stringAfterLast(p, '/'), funcDict:
  fileInfo.funcDict, topComment: fileInfo.topComment };\r

  \  }\r

  \  return res;\r

  }"
doit: "function doit(secs, f, interval) {\r

  \  if (get_now() - DA.start < secs * 1000) setTimeout(() => { f();
  doit(secs, f, interval); }, interval);\r

  \  else console.log('DONE!!!');\r

  }"
dom: "function dom(o, { loc, pool, params }) {\r

  \  console.log(o, loc, pool, params);\r

  \  let res = mCreate(params.tag ? params.tag : 'div');\r

  \  let sep = params.separator ? params.separator : ',';\r

  \  if (params.optin) res.innerHTML = params.optin.map(x =>
  o.o[x]).join(sep);\r

  \  console.log('content:', res.innerHTML);\r

  \  return res;\r

  }"
domId: function domId(id) { return document.getElementById(id) }
doNext: "async function doNext(series, index, mexIndex) {\r

  \  recVerify(series, index + 1, maxIndex);\r

  }"
doPerlenPoolChanges: "function doPerlenPoolChanges() {\r

  \  let s = G.perlenOptions;\r

  \  console.log('options:', s);\r

  \  Socket.emit('perlenOptions', s);\r

  }"
dots: "function dots(ms, n, { UL = false, UR = true, sz = 10, pos, dir, colors }
  = {}) {\r

  \  let dim = ms.bounds;\r

  \  let x, y, dx, dy;\r

  \  if (UR) {\r

  \    if (nundef(sz)) sz = dim.h / (2 * n);\r

  \    x = dim.w / 2 + -2 * sz;\r

  \    y = -dim.h / 2 + 2 * sz;\r

  \    dx = 0;\r

  \    dy = 2 * sz;\r

  \  } else if (UL) {\r

  \    return;\r

  \  }\r

  \  for (let i = 0; i < n; i++) {\r

  \    let color = isdef(colors) ? colors[i] : ms.fg;\r

  \    ms.circle({ sz: sz, x: x, y: y, fill: color });\r

  \    x += dx;\r

  \    y += dy;\r

  \  }\r

  }"
download: "function download(jsonObject, fname) {\r

  \  json_str = JSON.stringify(jsonObject);\r

  \  saveFile(fname + '.json', 'data:application/json', new Blob([json_str], {
  type: '' }));\r

  }"
download_all_functions: function download_all_functions() { downloadAsText(CODE.text, 'hallo', 'js'); }
downloadAsText: "function downloadAsText(s, filename, ext = 'txt') {\r

  \  saveFileAtClient(\r

  \    filename + \".\" + ext,\r

  \    \"data:application/text\",\r

  \    new Blob([s], { type: \"\" }));\r

  }"
downloadAsYaml: "function downloadAsYaml(o, filename) {\r

  \  let y = jsyaml.dump(o);\r

  \  downloadAsText(y, filename, 'yaml');\r

  }"
downloadCodebase: "function downloadCodebase(superdi) {\r

  \  let text = '';\r

  \  for (const type of ['var', 'const', 'cla', 'func']) {\r

  \    let keys = get_keys(superdi[type]);\r

  \    if (type != 'const') sortCaseInsensitive(keys);\r

  \    for (const k of keys) {\r

  \      let code = superdi[type][k].code;\r

  \      if (!isEmptyOrWhiteSpace(code)) {\r

  \        text += code;\r

  \        if (code.trim() == '}') text += '\\r\\n';\r

  \      }\r

  \    }\r

  \  }\r

  \  downloadAsText(text, 'hallo', 'js');\r

  \  downloadAsYaml(superdi, 'hallo');\r

  }"
downloadFile: "function downloadFile(jsonObject, filenameNoExt) {\r

  \  json_str = JSON.stringify(jsonObject);\r

  \  saveFileAtClient(\r

  \    filenameNoExt + \".json\",\r

  \    \"data:application/json\",\r

  \    new Blob([json_str], { type: \"\" }));\r

  }"
downloadHtmlFile: "function downloadHtmlFile(html, filenameNoExt) {\r

  \  saveFileAtClient(\r

  \    filenameNoExt + \".html\",\r

  \    \"data:application/html\",\r

  \    new Blob([html], { type: \"\" }));\r

  }"
downloadJson: "function downloadJson(o, filename) {\r

  \  if (filename.indexOf('.') < 0) filename = filename.json;\r

  \  let txt = (typeof o == 'object') ? encodeURIComponent(JSON.stringify(o))
  : o;\r

  \  let dl = document.getElementById('downloadAnchorElement');\r

  \  if (nundef(dl)) dl = mCreateFrom(`<a id=\"downloadAnchorElem\"
  style=\"display:none\"></a>`);\r

  \  var dataStr = \"data:text/json;charset=utf-8,\" + txt;\r

  \  dl.setAttribute(\"href\", dataStr);\r

  \  dl.setAttribute(\"download\", \"_aaa\\\\scene.json\");\r

  \  dl.click();\r

  }"
downloadKeySet: "function downloadKeySet() {\r

  \  let keys = Pictures.filter(x => x.isSelected).map(x => x.info.key);\r

  \  downloadAsYaml(keys, 'keyset');\r

  }"
downloadTextFile: "function downloadTextFile(s, filenameNoExt, ext = 'txt') {\r

  \  saveFileAtClient(\r

  \    filenameNoExt + \".\" + ext,\r

  \    \"data:application/text\",\r

  \    new Blob([s], { type: \"\" }));\r

  }"
dPP: "function dPP(o, plist, R) {\r

  \  if (isEmpty(plist)) return o;\r

  \  if (isList(o) && isNumber(plist[0])) {\r

  \    let i = Number(plist[0]);\r

  \    return dPP(o[i], plist.slice(1), R);\r

  \  }\r

  \  if (!isDict(o)) {\r

  \    let o1 = R.getO(o);\r

  \    if (isdef(o1)) return dPP(o1, plist, R);\r

  \    console.log('dPP ERROR!!! o', o, 'plist', plist, '\\no1', o1);\r

  \    return null;\r

  \  }\r

  \  let k1 = plist[0];\r

  \  let o1 = o[k1];\r

  \  if (nundef(o1)) return null;\r

  \  let plist1 = plist.slice(1);\r

  \  if (o1._set) {\r

  \    o1 = o1._set;\r

  \    if (plist1.length > 0 && isNumber(plist1[0])) {\r

  \      let i = Number(plist1[0]);\r

  \      return dPP(o1[i], plist1.slice(1), R);\r

  \    } else {\r

  \      return o1.map(x => dPP(x, plist1, R));\r

  \    }\r

  \  }\r

  \  if (o1._player) { o1 = R.getO(o1._player); }\r

  \  else if (o1._obj) { o1 = R.getO(o1._obj); }\r

  \  return dPP(o1, plist1, R);\r

  }"
dPP1: "function dPP1(o, plist, R) {\r

  \  if (isEmpty(plist)) {\r

  \    let res = isdef(o._player) ? [o._player] : isdef(o._obj) ? [o._obj] :
  o;\r

  \    return res;\r

  \  }\r

  \  if (isList(o) && isNumber(plist[0])) {\r

  \    let i = Number(plist[0]);\r

  \    return dPP1(o[i], plist.slice(1), R);\r

  \  }\r

  \  if (!isDict(o)) {\r

  \    let o1 = R.getO(o);\r

  \    if (isdef(o1)) return dPP1(o1, plist, R);\r

  \    console.log('dPP1 ERROR!!! o', o, 'plist', plist, '\\no1', o1);\r

  \    return null;\r

  \  }\r

  \  let k1 = plist[0];\r

  \  let o1 = isdef(o._player) ? R.getO(o._player)[k1]\r

  \    : isdef(o._obj) ? R.getO(o._obj)[k1]\r

  \      : o[k1];\r

  \  if (nundef(o1)) return null;\r

  \  let plist1 = plist.slice(1);\r

  \  if (o1._set) {\r

  \    o1 = o1._set;\r

  \    if (plist1.length > 0 && !isNumber(plist1[0])) {\r

  \      return o1.map(x => dPP1(x, plist1, R));\r

  \    }\r

  \  }\r

  \  return dPP1(o1, plist1, R);\r

  }"
drag: "function drag(ev) {\r

  \  let elem = ev.target;\r

  \  dragStartOffset = getRelCoords(ev, $(elem));\r

  \  draggedElement = elem;\r

  }"
dragKey: "function dragKey(ev) {\r

  \  ev.dataTransfer.setData(\"text\", ev.target.id);\r

  \  dragStartOffset = getRelCoords(ev, $(this));\r

  }"
dragover_fritz: "function dragover_fritz(ev) {\r

  \  ev.preventDefault();\r

  \  ev.dataTransfer.dropEffect = \"move\";\r

  \  let target_id = evToClosestId(ev);\r

  \  let d = mBy(target_id);\r

  \  mStyle(d, { bg: 'red' });\r

  \  if (target_id == 'dOpenTable') {\r

  \  } else if (isdef(Items[target_id])) {\r

  \    let targetcard = Items[target_id];\r

  \    let targetgroup = Items[targetcard.groupid];\r

  \  } else {\r

  \  }\r

  }"
dragStartPreventionOnSidebarOpen: "function dragStartPreventionOnSidebarOpen()
  {\r

  \  if (isdef(mBy('drop-region'))) {\r

  \    alert('please close sidebar (by DOUBLECLICK on it) before
  proceeding!');\r

  \    return false;\r

  \  }\r

  \  return true;\r

  }"
dragX: "function dragX(ev) {\r

  \  let elem = ev.target;\r

  \  dragStartOffset = getRelCoordsX(ev, elem);\r

  \  draggedElement = elem;\r

  }"
dragX2: "function dragX2(ev) {\r

  \  let elem = ev.target;\r

  \  dragStartOffset = getRelCoordsX(ev, elem);\r

  \  draggedElement = elem;\r

  }"
draw: "function draw() {\r

  \  background(51);\r

  \  for (let i = 0; i < tree.length; i++) {\r

  \    tree[i].show();\r

  \    if (jittering) tree[i].jitter();\r

  \  }\r

  \  for (let i = 0; i < leaves.length; i++) {\r

  \    let l = leaves[i].current;\r

  \    noStroke();\r

  \    fill(0, 255, 100, 100);\r

  \    ellipse(l.x, l.y, 8, 8);\r

  \    if (jittering) leaves[i].current.y += random(0, 2);\r

  \  }\r

  }"
draw_canvas: "function draw_canvas(item) {\r

  \  let r = getRect(dTable);\r

  \  let c = mCanvas(d, { w: r.w, h: r.h, rounding: 0, bg: 'white' }); let
  [cv, cx] = [c.cv, c.cx];\r

  \  for (const item of items) {\r

  \    let d1 = item.div = cRect(item.x, item.y, item.w, item.h, { bg: item.bg
  }, cx);\r

  \  }\r

  }"
draw_car: "function draw_car(canvas, item) {\r

  \  let cx = canvas.cx;\r

  \  cRect(0 - item.w / 2, 0 - item.h / 2, item.w, item.h, { bg: item.color },
  cx);\r

  \  cRect(item.w - item.w / 2, 0 - item.h / 2, 10, item.h, { bg: 'yellow' },
  cx);\r

  }"
draw_dom: "function draw_dom(item) {\r

  \  if (item.init) { item.init = false; iAdd(item, { div: mDiv(valf(dParent,
  item.container, dTable)) }); }\r

  \  if (item.refresh) { item.refresh = false; mStyle(iDiv(item.id),
  item.styles); }\r

  }"
draw_from_deck_to: function draw_from_deck_to(deck, arr) { top_elem_from_to(deck, arr); }
draw_from_deck_to_board: function draw_from_deck_to_board(deck, arr) {
  top_elem_from_to_top(deck, arr); }
draw_gaussian: "function draw_gaussian(canvas, mean, stdev, color, thick,
  legendcolor, legend) {\r

  \  canvas.draw_axes();\r

  \  canvas.scale = 40;\r

  \  let f = gaussian_amp(canvas, 1)\r

  \  canvas.plot(f, color, thick);\r

  \  draw_ticks_gaussian(canvas, f, mean, stdev, legendcolor);\r

  \  draw_text(canvas, legend, { fg: legendcolor, pos: 'tr', hmargin: 25,
  vmargin: 12 });\r

  }"
draw_label: "function draw_label(canvas, item) {\r

  \  let cx = canvas.cx;\r

  \  cx.textAlign = 'center';\r

  \  cx.font = `${valf(item.fz, 16)}px Arial`;\r

  \  cx.fillStyle = item.color;\r

  \  cx.fillText(`  ${item.label}`, 0, 0);\r

  }"
draw_on_canvas: "function draw_on_canvas(cx, item) {\r

  \  if (isdef(item.draw)) { item.draw(cx, item); }\r

  \  else {\r

  \    cx.save();\r

  \    let st = item.styles;\r

  \    let [x, y, w, h, a, color] = [valf(st.x, 0), valf(st.y, 0), valf(st.w,
  30), valf(st.h, 30), valf(st.a, 0), valf(st.bg, RED)];\r

  \    cx.translate(x, y);\r

  \    cx.rotate(toRadian(a));\r

  \    cEllipse(0, 0, w, h, { bg: colorFrom(color) }, 0, cx);\r

  \    cx.restore();\r

  \  }\r

  }"
draw_on_div: "function draw_on_div(dParent, item) {\r

  \  if (isdef(item.draw)) { item.draw(dParent, item); }\r

  \  else {\r

  \    let d = mDiv(dParent, item.styles);\r

  \    iAdd(item, { div: d });\r

  \  }\r

  }"
draw_perlin_x: "function draw_perlin_x(item) {\r

  \  let [cv, cx] = [item.live.cv, item.live.cx];\r

  \  cClear(cv, cx);\r

  \  let r = rPerlin(item.x);\r

  \  item.r = map_range(r, 0, 1, -item.w / 2, item.w / 2);\r

  \  cEllipse(item.r, 0, 25, 25, { bg: 'white' }, 0, cx);\r

  \  item.x += .02;\r

  }"
draw_perlin_xy: "function draw_perlin_xy(item) {\r

  \  let [cv, cx] = [item.live.cv, item.live.cx];\r

  \  cClear(cv, cx);\r

  \  item.randx = valf(item.randx, 0) + .01;\r

  \  item.randy = valf(item.randy, 10000) + .02;\r

  \  item.x = map_range(rPerlin(item.randx), 0, 1, -item.w / 2, item.w / 2);\r

  \  item.y = map_range(rPerlin(item.randy), 0, 1, -item.h / 2, item.h / 2);\r

  \  cEllipse(item.x, item.y, 25, 25, { bg: 'white' }, 0, cx);\r

  }"
draw_point: "function draw_point(canvas, item) {\r

  \  let cx = canvas.cx;\r

  \  cx.font = `${valf(item.fz, 16)}px Arial`;\r

  \  cx.fillStyle = item.color;\r

  \  if (isdef(item.label)) cx.fillText(`  ${item.label}`, 0, 0);\r

  \  cEllipse(0, 0, item.w, item.h, { bg: item.color }, 0, cx);\r

  }"
draw_random_walk: "function draw_random_walk(item) {\r

  \  let [cv, cx] = [item.live.cv, item.live.cx];\r

  \  cClear(cv, cx);\r

  \  cEllipse(rInc(item, 'x', -2, 2), rInc(item, 'y', -2, 2), 30, 20, { bg:
  'blue', fg: 'green' }, 0, cx);\r

  }"
draw_rect: "function draw_rect(canvas, item) {\r

  \  let cx = canvas.cx;\r

  \  cRect(0 - item.w / 2, 0 - item.h / 2, item.w, item.h, { bg: item.color },
  cx);\r

  }"
draw_set_card: "function draw_set_card(dParent, info, card_styles) {\r

  \  let card = cLandscape(dParent, card_styles);\r

  \  card.info = info;\r

  \  let d = iDiv(card);\r

  \  mCenterCenterFlex(d);\r

  \  let sz = card.sz / 2.8;\r

  \  let bg, shape = info.shape, text;\r

  \  switch (info.shading) {\r

  \    case 'solid': bg = info.color; break;\r

  \    case 'gradient': bg = `linear-gradient(${info.color}, silver)`;
  break;\r

  \    case 'empty': bg = `repeating-linear-gradient(\r

  \      45deg,\r

  \      ${info.color},\r

  \      ${info.color} 10px,\r

  \      silver 10px,\r

  \      silver 20px\r

  \    )`; break;\r

  \  }\r

  \  mStyle(d, { bg: info.background });\r

  \  switch (info.text) {\r

  \    case 'none': text = null; break;\r

  \    case 'letter': text = randomLetter(); break;\r

  \    case 'number': text = '' + randomDigit(); break;\r

  \  }\r

  \  let styles = { w: sz, h: sz, margin: sz / 10 };\r

  \  for (let i = 0; i < info.num; i++) {\r

  \    let d1 = drawShape(shape, d, styles);\r

  \    if (info.shading == 'gradient') { d1.style.backgroundColor =
  info.color; mClass(d1, 'polka-dot'); } else mStyle(d1, { bg: bg });\r

  \    if (shape == 'circle') console.log('circle', d1);\r

  \    if (isdef(text)) { mCenterCenterFlex(d1); mText(text, d1, { fz: sz /
  1.75, fg: 'black', family: 'impact' }); }\r

  \  }\r

  \  return card;\r

  }"
draw_set_card_test: "function draw_set_card_test(dParent) {\r

  \  let card = cLandscape(dParent, { w: 120 });\r

  \  let d = iDiv(card, { h: '100%' });\r

  \  mCenterCenterFlex(d);\r

  \  let sz = card.sz / 4;\r

  \  let styles = { w: sz, h: sz, bg: `linear-gradient(${RED},black`, margin:
  sz / 10, border: `solid 3px ${GREEN}` };\r

  \  let d1 = drawShape('circle', d, styles); mCenterCenterFlex(d1);
  mText('A', d1, { fz: sz / 4, fg: 'white' });\r

  \  drawShape('circle', d, styles);\r

  \  drawShape('circle', d, styles);\r

  }"
draw_text: "function draw_text(canvas, text, styles = {}) {\r

  \  let cx = canvas.cx;\r

  \  addKeys({ x: 0, y: 0, family: 'opensans', fz: 36 }, styles);\r

  \  styles.bg = styles.fg;\r

  \  styles.font = `${styles.fz}px ${styles.family}`;\r

  \  cStyle(styles, cx);\r

  \  let [x, y, offx, offy] = [styles.x, styles.y, valf(styles.hmargin,
  styles.margin, 4), valf(styles.vmargin, styles.margin, 4)];\r

  \  if (isdef(styles.pos)) {\r

  \    let pos = styles.pos;\r

  \    if (pos[0] == 't') {\r

  \      y += canvas.miny + offy;\r

  \      cx.textBaseline = 'hanging';\r

  \    } else if (pos[0] == 'c') {\r

  \      y += offy;\r

  \      cx.textBaseline = 'middle';\r

  \    } else {\r

  \      y += canvas.maxy - offy;\r

  \      cx.textBaseline = 'top';\r

  \    }\r

  \    if (pos[1] == 'l') {\r

  \      x += canvas.minx + offx;\r

  \      cx.textAlign = 'start';\r

  \    } else if (pos[1] == 'c') {\r

  \      x += offx;\r

  \      cx.textAlign = 'center';\r

  \    } else {\r

  \      x += canvas.maxx - offx;\r

  \      cx.textAlign = 'end';\r

  \    }\r

  \  } else {\r

  \    cx.textAlign = 'center';\r

  \    cx.textBaseline = 'middle';\r

  \  }\r

  \  if (isdef(styles.al)) {\r

  \    let a = ' ' + styles.al;\r

  \    console.log('a', a);\r

  \    cx.textAlign = a.includes(' s') ? 'start' : a.includes(' e') ? 'end' :
  a.includes(' r') ? 'right' : a.includes(' l') ? 'left' : 'center';\r

  \    cx.textBaseline = a.includes(' b') ? 'bottom' : a.includes(' t') ?
  'top' : a.includes(' h') ? 'hanging' : a.includes(' a') ? 'alpjabetic' :
  a.includes(' i') ? 'ideographic' : 'middle';\r

  \  }\r

  \  if (isdef(styles.offy)) {\r

  \    if (isNumber(styles.offy)) y += styles.offy;\r

  \    else {\r

  \      let ws = toWords(styles.offy);\r

  \      let di = { below: 'hanging', above: 'bottom', ontop: 'bottom',
  onbottom: 'hanging', unterhalb: 'hanging', oberhalb: 'bottom', unten:
  'hanging', oben: 'bottom' };\r

  \      for (const w of ws) {\r

  \        if (isNumber(w)) y += Number(w);\r

  \        else if (isdef(di[w])) cx.textBaseline = di[w];\r

  \        else if (w.length == 1) {\r

  \          cx.textBaseline = w == 'b' ? 'bottom' : w == 't' ? 'top' : w ==
  'a' ? 'alphabetic' : w == 'i' ? 'ideographic' : w == 'm' ? 'middle' :
  'hanging';\r

  \        } else cx.textBaseline = w;\r

  \      }\r

  \    }\r

  \  }\r

  \  if (isdef(styles.offx)) {\r

  \    if (isNumber(styles.offx)) y += styles.offx;\r

  \    else {\r

  \      let ws = toWords(styles.offx);\r

  \      for (const w of ws) {\r

  \        if (isNumber(w)) x += Number(w);\r

  \        else if (w.length == 1) {\r

  \          cx.textAlign = w == 's' ? 'start' : w == 'e' ? 'end' : w == 'l' ?
  'left' : w == 'r' ? 'right' : 'center';\r

  \        } else cx.textAlign = w;\r

  \      }\r

  \    }\r

  \  }\r

  \  console.log('x', x, 'y', y, 'elign', cx.textAlign, 'baseline',
  cx.textBaseline)\r

  \  cx.fillText(text, x, y);\r

  }"
draw_ticks: "function draw_ticks(canvas, f) {\r

  \  let sc = canvas.scale;\r

  \  let x_end = search_end_point(f, 0, canvas.maxx, 0.02);\r

  \  let y_end = f(x_end);\r

  \  canvas.pp(x_end * sc, -y_end * sc, `${Math.round(x_end * sc)}`, 'red',
  'tc');\r

  \  console.log('endpoint x', x_end, 'y', y_end, canvas.minx, canvas.maxx);\r

  \  console.log('stdev', x_end / 3);\r

  \  let label = 100, dx = x_end / 3, x = 0;\r

  \  for (let i = 0; i <= 3; i++) {\r

  \    let x1 = Math.round(convert_to_range(x, -x_end, x_end, 50, 150));\r

  \    let x2 = Math.round(convert_to_range(-x, -x_end, x_end, 50, 150));\r

  \    canvas.pp(x * sc, 0, `${label + i * 15}`);\r

  \    if (x) canvas.pp(-x * sc, 0, `${label - i * 15}`);\r

  \    x += dx;\r

  \  }\r

  }"
draw_ticks_gaussian: "function draw_ticks_gaussian(canvas, f, mean, dev, color)
  {\r

  \  let sc = canvas.scale;\r

  \  let x_end = search_end_point(f, 0, canvas.maxx, .005, .02);\r

  \  let dx = x_end / 3, x = 0;\r

  \  for (let i = 0; i <= 3; i++) {\r

  \    canvas.pp(x * sc, 0, `${mean + i * dev}`, { bg: color });\r

  \    if (x) canvas.pp(-x * sc, 0, `${mean - i * dev}`, { bg: color });\r

  \    x += dx;\r

  \  }\r

  }"
drawBee: function drawBee(c) { return drawSym('bee', c); }
drawBox: "function drawBox() {\r

  \  c.lineWidth = 1;\r

  \  c.strokeRect(0.5, 0.5, canvas.width - 1, canvas.height - 1);\r

  }"
drawcard: "function drawcard(key, dParent, sz) {\r

  \  let d1;\r

  \  let card = ari_get_card(key, sz);\r

  \  mAppend(dParent, iDiv(card));\r

  \  let d = iDiv(card); mStyle(d, { position: 'relative', margin: 20 });\r

  \  let h = sz * .6;\r

  \  let w = h / 6.5;\r

  \  let left = sz >= 300 ? 7 : sz >= 200 ? 5 : sz >= 100 ? 3 : 3;\r

  \  let bottom = sz >= 300 ? 0 : sz >= 200 ? -1 : sz >= 100 ? -2 : -3;\r

  \  let matop = (sz - h) / 2;\r

  \  let html = `<img height=${sz / 3}
  src=\"./base/assets/images/icons/deco0.svg\"
  style=\"transform:scaleX(-1);\">`;\r

  \  d1 = mDiv(d, { position: 'absolute', bottom: bottom, left: left, opacity:
  .5 }, null, html);\r

  \  let dt = mDiv(d, { family: 'Algerian' }, null, 'luxury');\r

  \  mPlace(dt, 'tc', 0, '50%')\r

  }"
drawCenteredBee: function drawCenteredBee(c) { return drawCenteredSym('bee', c); }
drawCenteredPlainCircle: "function drawCenteredPlainCircle(c) {\r

  \  let item = iContainer(dMain, { fz: 8, fg: 'black', bg: 'grey', padding: 1
  });\r

  \  let d = iDiv(item);\r

  \  let rect = getRect(d);\r

  \  console.log('rect', rect)\r

  \  mPos(d, c.x - rect.w / 2, c.y - rect.h / 2);\r

  \  return item;\r

  }"
drawCenteredSym: "function drawCenteredSym(sym, c) {\r

  \  let item = mPic(sym, dMain, { w: 80, h: 80, box: true, fz: 25, rounding:
  '50%', vpadding: 14, hpadding: 4 });\r

  \  let d = iDiv(item);\r

  \  let rect = getRect(d);\r

  \  console.log('rect', rect)\r

  \  mPos(d, c.x - rect.w / 2, c.y - rect.h / 2);\r

  \  return item;\r

  }"
drawCircle: "function drawCircle() {\r

  \  c.beginPath();\r

  \  c.arc(circle.x, circle.y, radius - lineWidth / 2, 0, 2 * Math.PI,
  false);\r

  \  c.fillStyle = '00F0FF';\r

  \  c.fill();\r

  \  c.lineWidth = 4;\r

  \  c.strokeStyle = 'black';\r

  \  c.stroke();\r

  }"
drawColoredCircle: "function drawColoredCircle(canvas, sz, color, stroke =
  'black') {\r

  \  var context = canvas.getContext('2d');\r

  \  var centerX = canvas.width / 2;\r

  \  var centerY = canvas.height / 2;\r

  \  var radius = sz / 2;\r

  \  context.beginPath();\r

  \  context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r

  \  context.fillStyle = color;\r

  \  context.fill();\r

  }"
drawElems: "function drawElems(idlist) {\r

  \  for (const id of idlist) {\r

  \    EID[id].ms.draw();\r

  \  }\r

  }"
drawFlatHex: "function drawFlatHex(dParent, styles, classes, sizing) {\r

  \  if (nundef(styles)) styles = { w: 100, h: 100, bg: 'blue' };\r

  \  if (nundef(classes)) classes = ['frameOnHover'];\r

  \  if (nundef(sizing)) sizing = { hgrow: true, wgrow: true };\r

  \  let d = mDiv(dParent, styles, null, null, classes, sizing);\r

  \  mStyle(d, { 'clip-path': 'polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25%
  100%, 0% 50%)' });\r

  \  return d;\r

  }"
drawHex: "function drawHex(dParent, styles, classes, sizing) {\r

  \  if (nundef(styles)) styles = { w: 100, h: 100, bg: 'blue' };\r

  \  if (nundef(classes)) classes = ['frameOnHover'];\r

  \  if (nundef(sizing)) sizing = { hgrow: true, wgrow: true };\r

  \  let d = mDiv(dParent, styles, null, null, classes, sizing);\r

  \  mStyle(d, { 'clip-path': 'polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%,
  0% 75%, 0% 25%)' });\r

  \  return d;\r

  }"
drawLineToMouse: "function drawLineToMouse() {\r

  \  c.lineWidth = 2;\r

  \  c.moveTo(circle.x, circle.y);\r

  \  c.lineTo(mouse.x, mouse.y);\r

  \  c.stroke();\r

  }"
drawloop: function drawloop() { G.items.map(x => { if (isdef(x.draw)) x.draw(x); }); }
DrawMaterial: "function DrawMaterial() {\r

  \  if (brd_pceNum[PIECES.wP] != 0 || brd_pceNum[PIECES.bP] != 0) return
  BOOL.FALSE;\r

  \  if (brd_pceNum[PIECES.wQ] != 0 || brd_pceNum[PIECES.bQ] != 0 ||
  brd_pceNum[PIECES.wR] != 0 || brd_pceNum[PIECES.bR] != 0) return BOOL.FALSE;\r

  \  if (brd_pceNum[PIECES.wB] > 1 || brd_pceNum[PIECES.bB] > 1) { return
  BOOL.FALSE; }\r

  \  if (brd_pceNum[PIECES.wN] > 1 || brd_pceNum[PIECES.bN] > 1) { return
  BOOL.FALSE; }\r

  \  if (brd_pceNum[PIECES.wN] != 0 && brd_pceNum[PIECES.wB] != 0) { return
  BOOL.FALSE; }\r

  \  if (brd_pceNum[PIECES.bN] != 0 && brd_pceNum[PIECES.bB] != 0) { return
  BOOL.FALSE; }\r

  \  return BOOL.TRUE;\r

  }"
drawPlainCircle: "function drawPlainCircle(c) {\r

  \  let item = mPic('heart', dMain, { fz: 8, bg: 'red', rounding: '50%',
  padding: 1 });\r

  \  mPos(iDiv(item), c.x, c.y);\r

  \  return item;\r

  }"
drawShape: "function drawShape(key, dParent, styles, classes, sizing) {\r

  \  if (nundef(styles)) styles = { w: 96, h: 96, bg: 'random' };\r

  \  if (nundef(sizing)) sizing = { hgrow: true, wgrow: true };\r

  \  let d = mDiv(dParent, styles, null, null, classes, sizing);\r

  \  if (key == 'circle' || key == 'ellipse') mStyle(d, { rounding: '50%'
  });\r

  \  else mStyle(d, { 'clip-path': PolyClips[key] });\r

  \  return d;\r

  }"
drawSym: "function drawSym(sym, c) {\r

  \  let item = mPic(sym, dMain, { fz: 25, bg: 'skyblue', rounding: '50%',
  padding: 4 });\r

  \  mPos(iDiv(item), c.x, c.y);\r

  \  return item;\r

  }"
drawTest: "function drawTest(board, num) {\r

  \  clearElement(board.elem);\r

  \  let d = 10;\r

  \  let coll = [];\r

  \  for (let row = 0; row < board.h; row += d) {\r

  \    for (let col = 0; col < board.w; col += d) {\r

  \      let y = row - board.h / 2 + d / 2;\r

  \      let x = col - board.w / 2 + d / 2;\r

  \      let mobj = makeDrawingElement('el1', 'board');\r

  \      mobj.x = x; mobj.y = y;\r

  \      coll.push(mobj);\r

  \    }\r

  \  }\r

  \  timit.showTime('nach compute: number of elements=' + coll.length);\r

  \  const colors = ['red', 'green', 'yellow', 'blue', 'orange', 'violet',
  'skyblue', 'sienna'];\r

  \  let keys = Object.keys(iconChars);\r

  \  let numPictos = Math.min(coll.length, keys.length);\r

  \  for (let i = 0; i < numPictos; i++) {\r

  \    let mobj = coll[i];\r

  \    let c = chooseRandom(colors);\r

  \    let key = keys[i];\r

  \    mobj._picto(key, mobj.x, mobj.y, d, d, c);\r

  \    //   let key =
  keys[i];//chooseRandom(Object.keys(faIcons));//'clock';\r

  \  }\r

  \  timit.showTime('nach shape');\r

  \  for (const mobj of coll) {\r

  \    mobj.attach();\r

  \  }\r

  \  timit.showTime('nach attach');\r

  \  if (num > 0) setTimeout(() => drawTest(board, num - 1), 0);\r

  \  else return coll;\r

  }"
drawText: "function drawText(text, c) {\r

  \  let item = mText(text, dMain, { fz: 16, bg: 'skyblue', rounding: '50%',
  padding: 4 });\r

  \  mPos(iDiv(item), c.x, c.y);\r

  \  return item;\r

  }"
drawTriangle: "function drawTriangle(dParent, styles, classes, sizing) {\r

  \  if (nundef(styles)) styles = { w: 100, h: 100, bg: 'blue' };\r

  \  if (nundef(classes)) classes = ['frameOnHover'];\r

  \  if (nundef(sizing)) sizing = { hgrow: true, wgrow: true };\r

  \  let d = mDiv(dParent, styles, null, null, classes, sizing);\r

  \  mStyle(d, { 'clip-path': 'polygon(50% 0%, 100% 100%, 0% 100%)' });\r

  \  return d;\r

  }"
drop: "function drop(ev) {\r

  \  ev.preventDefault();\r

  \  let targetElem = findDragTarget(ev);\r

  \  targetElem.appendChild(draggedElement);\r

  \  setDropPosition(ev, draggedElement, targetElem,
  isdef(draggedElement.dropPosition) ? draggedElement.dropPosition :
  dropPosition);\r

  }"
drop_card_fritz: "function drop_card_fritz(ev) {\r

  \  ev.preventDefault();\r

  \  evNoBubble(ev);\r

  \  if (isdef(mBy('ddhint'))) mRemove(mBy('ddhint'));\r

  \  var data = ev.dataTransfer.getData(\"text\");\r

  \  let card = Items[data];\r

  \  let target_id = evToClosestId(ev);\r

  \  if (card.source == 'discard') {\r

  \    let [discard, loose] = arrSplitAtIndex(UI.deck_discard.items,
  card.index);\r

  \    c = loose[0];\r

  \    loose = loose.slice(1);\r

  \    assertion(c == card, 'NEEEEEEEE');\r

  \    for (const c of loose) {\r

  \      console.log('card', c.key, 'source', c.source)\r

  \      if (c.source == 'discard') frnew(c, { target: 'dummy' });\r

  \    }\r

  \  }\r

  \  if (target_id == 'dOpenTable') {\r

  \    frnew(card, ev);\r

  \  } else if (isdef(Items[target_id])) {\r

  \    let targetcard = Items[target_id];\r

  \    let targetgroup = Items[targetcard.groupid];\r

  \    fradd(card, targetgroup, targetcard);\r

  \  } else {\r

  \  }\r

  }"
drop_old: "function drop_old(ev) {\r

  \  if (ev.cancel) return;\r

  \  ev.preventDefault();\r

  \  var data = ev.dataTransfer.getData(\"text\");\r

  \  let dElem = document.getElementById(data);\r

  \  let dTarget1 = ev.target;\r

  \  let targetElem = dTarget1;\r

  \  while (!targetElem.ondragover) targetElem = targetElem.parentNode;\r

  \  targetElem.appendChild(dElem);\r

  \  console.log('dropping', dElem.id, 'onto', targetElem.id);\r

  \  var elm = $(targetElem);\r

  \  x = ev.pageX - elm.offset().left - dragStartOffset.x;\r

  \  y = ev.pageY - elm.offset().top - dragStartOffset.y;\r

  \  posXY(dElem, targetElem, x, y);\r

  \  ev.cancel = true;\r

  }"
dropAndEval: "function dropAndEval(ev) {\r

  \  cancelBubble = true;\r

  \  let els = allElementsFromPoint(ev.clientX, ev.clientY);\r

  \  if (nundef(DragElem)) return;\r

  \  let targetItem = DropZoneItem = firstCond(DropZoneItems, x =>
  els.includes(iDiv(x)));\r

  \  if (nundef(targetItem)) { cancelDD(); return; }\r

  \  let droppedItem = DragSourceItem;\r

  \  addLabel1(targetItem, droppedItem.label);\r

  \  cancelDD();\r

  }"
dropDD: "function dropDD(ev) {\r

  \  ev.stopPropagation();\r

  \  ev.preventDefault();\r

  \  var data = ev.dataTransfer.getData(\"text\");\r

  \  let dElem = document.getElementById(data);\r

  \  let targetElem = ev.target;\r

  \  while (!targetElem.ondragover) targetElem = targetElem.parentNode;\r

  \  if (isdef(dElem.dd) && dElem.dd != targetElem.dd) {\r

  \    console.log('wrong association dd', dElem.dd, targetElem.dd);\r

  \    return;\r

  \  }\r

  \  targetElem.appendChild(dElem);\r

  \  console.log('dropping', dElem.id, 'onto', targetElem.id);\r

  \  var elm = $(targetElem);\r

  \  x = ev.pageX - elm.offset().left - dragStartOffset.x;\r

  \  y = ev.pageY - elm.offset().top - dragStartOffset.y;\r

  \  posXY(dElem, targetElem, x, y);\r

  \  ev.cancel = true;\r

  }"
dropKey: "function dropKey(ev) {\r

  \  ev.stopPropagation();\r

  \  ev.preventDefault();\r

  \  var data = ev.dataTransfer.getData(\"text\");\r

  \  let dElem = document.getElementById(data);\r

  \  let targetElem = ev.target;\r

  \  while (!targetElem.ondragover) targetElem = targetElem.parentNode;\r

  \  if (isdef(dElem.dd) && dElem.dd != targetElem.dd) {\r

  \    console.log('wrong association dd', dElem.dd, targetElem.dd);\r

  \    return;\r

  \  }\r

  \  targetElem.appendChild(dElem);\r

  \  console.log('dropping', dElem.id, 'onto', targetElem.id);\r

  \  var elm = $(targetElem);\r

  \  x = ev.pageX - elm.offset().left - dragStartOffset.x;\r

  \  y = ev.pageY - elm.offset().top - dragStartOffset.y;\r

  \  posXY(dElem, targetElem, x, y);\r

  \  ev.cancel = true;\r

  }"
dropLast: function dropLast(s) { return s.substring(0, s.length - 1); }
dropX: "function dropX(ev) {\r

  \  ev.preventDefault();\r

  \  let targetElem = findDragTarget(ev);\r

  \  if (nundef(draggedElement.dropPosition) || typeof
  (draggedElement.dropPosition) != 'function')
  targetElem.appendChild(draggedElement);\r

  \  setDropPosition(ev, draggedElement, targetElem,
  isdef(draggedElement.dropPosition) ? draggedElement.dropPosition :
  dropPosition);\r

  }"
dropX2: "function dropX2(ev) {\r

  \  ev.preventDefault();\r

  \  let targetElem = findDragTarget(ev);\r

  \  if (nundef(draggedElement.dropPosition) || typeof
  (draggedElement.dropPosition) != 'function')
  targetElem.appendChild(draggedElement);\r

  \  setDropPosition(ev, draggedElement, targetElem,
  isdef(draggedElement.dropPosition) ? draggedElement.dropPosition :
  dropPosition);\r

  }"
dSquare: "function dSquare(pos1, pos2) {\r

  \  let dx = pos1.x - pos2.x;\r

  \  dx *= dx;\r

  \  let dy = pos1.y - pos2.y;\r

  \  dy *= dy;\r

  \  return dx + dy;\r

  }"
dummy_reaction: function dummy_reaction(ev) { console.log('clicked', ev.target) }
dump: "function dump(...arr) {\r

  \  for (const a of arr) {\r

  \  }\r

  }"
dynamicArea: "function dynamicArea(areaName, oSpec, oid, o) {\r

  \  func = correctFuncName(oSpec.type);\r

  \  oSpec.ui = window[func](areaName, oSpec, oid, o);\r

  }"
each_hand_of_one: "function each_hand_of_one(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    pl.hand = [rChoose(['4Hn', '5Hn', 'QHn', 'KHn', 'AHn'])];\r

  \    pl.goals['33'] = true; pl.roundgoal = '33';\r

  \    pl.journeys.push(['4Hn', '4Sn', '*Hn'], ['5Hn', '5Sn', '*Hn'], ['QHn',
  'QSn', '*Hn']);\r

  \  }\r

  \  fen.players[uplayer].hand = ['4Cn'];\r

  }"
editableUsernameUi: "function editableUsernameUi(dParent) {\r

  \  let inp = mEditableInput(dParent, 'user: ', Username);\r

  \  inp.id = 'spUser';\r

  \  inp.addEventListener('focusout', () => {
  changeUserTo(inp.innerHTML.toLowerCase()); });\r

  \  return inp;\r

  }"
editLayoutTests: "async function editLayoutTests() {\r

  \  DB = await route_path_yaml_dict('./PERLENDATA/data.yaml');\r

  \  lastState = await route_path_yaml_dict('./PERLENDATA/lastState.yaml');\r

  \  G = { settings: lastState.settings, dParent: dTable, clientBoard: {} };\r

  \  applyStandard(G.dParent, G.settings);\r

  \  onClickEditLayout();\r

  }"
einhaengen: "function einhaengen(oid, o, R) {\r

  \  let topUids;\r

  \  let success = false;\r

  \  let successKeys = [];\r

  \  for (const key of R.getR(oid)) {\r

  \    let specNode = R.getSpec(key);\r

  \    if (o.loc && nundef(R.Locations[key]) && nundef(specNode._ref)) {\r

  \      if (nundef(R.Locations[key])) {\r

  \        topUids = addOidByLocProperty(oid, key, R);\r

  \      } else {\r

  \        console.log('impossible to add!!! key bound to location',
  R.locations[key]);\r

  \      }\r

  \    } else if (isdef(R.Locations[key])) {\r

  \      topUids = addOidByParentKeyLocation(oid, key, R);\r

  \    } else {\r

  \      topUids = [];\r

  \    }\r

  \    if (isEmpty(topUids)) { continue; }\r

  \    else { successKeys.push(key); success = true; }\r

  \    for (const top of topUids) {\r

  \      let uiParent = R.uiNodes[top.uidParent];\r

  \      let rParent = R.rNodes[top.uidParent];\r

  \      if (isdef(uiParent)) {\r

  \        uiParent.adirty = true;\r

  \        uiParent.children = rParent.children.map(x => x);\r

  \      }\r

  \      recUi(R.rNodes[top.uid], R, top.uidParent, oid, key);\r

  \    }\r

  \  }\r

  \  return success ? successKeys : false;\r

  }"
elem_from_to: function elem_from_to(el, arr1, arr2) { removeInPlace(arr1, el);
  arr2.push(el); }
elem_from_to_top: function elem_from_to_top(el, arr1, arr2) {
  removeInPlace(arr1, el); arr2.unshift(el); }
ellipsis: "function ellipsis(text, font, width, padding) {\r

  \  let textLength = getTextWidth(text, font);\r

  \  let ellipsisLength = 0;\r

  \  ellipsisLength = getTextWidth('...', font);\r

  \  let maxw = width - 2 * padding;\r

  \  while (textLength + ellipsisLength > maxw && text.length > 0) {\r

  \    text = text.slice(0, -1).trim();\r

  \    textLength = getTextWidth(text, font);\r

  \  }\r

  \  return ellipsisLength > 0 ? text + '...' : text;\r

  }"
empty: "function empty(arr) {\r

  \  let result = arr === undefined || !arr || (isString(arr) && (arr ==
  'undefined' || arr == '')) || (Array.isArray(arr) && arr.length == 0) ||
  emptyDict(arr);\r

  \  testHelpers(typeof arr, result ? 'EMPTY' : arr);\r

  \  return result;\r

  }"
empty_func: function empty_func(x) { nundef(x) || x == ' '; }
emptyCard: "function emptyCard() {\r

  \  return cardFace({ key: 'empty' });\r

  }"
emptyDict: "function emptyDict(obj) {\r

  \  let test = Object.entries(obj).length === 0 && obj.constructor ===
  Object;\r

  \  return test;\r

  }"
emptyTarget: "function emptyTarget(val) {\r

  \  return Array.isArray(val) ? [] : {}\r

  }"
enableButton: function enableButton(id) { enableStyle(id) }
enableClick: "function enableClick(el, handler) {\r

  \  let mobj = 'mobj' in el ? el.mobj : el;\r

  \  mobj.clickHandler = handler;\r

  \  mobj.enable();\r

  }"
enableCreateButton: function enableCreateButton() { enableButton('bCreateGame'); }
enableDD: "function enableDD(sources, targets, dropHandler, isCopy, clearTarget,
  dragStartHandler) {\r

  \  DDInfo = { sources: sources, targets: targets, dropHandler: dropHandler,
  dragStartHandler };\r

  \  let sourceDivs = sources.map(x => iDiv(x));\r

  \  for (let i = 0; i < sources.length; i++) {\r

  \    let source = sources[i];\r

  \    let d = sourceDivs[i];\r

  \    d.onmousedown = (ev) => ddStart(ev, source, isCopy, clearTarget);\r

  \  }\r

  }"
enableDragForDeck: "function enableDragForDeck(d) {\r

  \  d.cards.forEach(function (card, i) {\r

  \    card.enableDragging();\r

  \  });\r

  }"
enableFlipForDeck: "function enableFlipForDeck(d) {\r

  \  d.cards.forEach(function (card, i) {\r

  \    card.enableFlipping();\r

  \  });\r

  }"
enableHover: "function enableHover(el, enterHandler, leaveHandler) {\r

  \  let mobj = 'mobj' in el ? el.mobj : el;\r

  \  mobj.mouseEnterHandler = enterHandler;\r

  \  mobj.mouseLeaveHandler = leaveHandler;\r

  \  mobj.enable();\r

  }"
enableJoinButton: function enableJoinButton() { enableButton('bJoinGame'); }
enableResumeButton: "function enableResumeButton() {\r

  \  enableButton('bResumeGame');\r

  }"
enableStyle: "function enableStyle(id) {\r

  \  if (isString(id)) id = document.getElementById(id);\r

  \  id.style.pointerEvents = null;\r

  \  id.style.opacity = 1;\r

  \  id.style.cursor = 'pointer';\r

  }"
end_of_round_ferro: "function end_of_round_ferro() {\r

  \  let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen,
  Z.uplayer];\r

  \  calc_ferro_score(uplayer);\r

  \  if (Z.options.phase_order == 'anti') {\r

  \    for (const plname of plorder) {\r

  \      let pl = fen.players[plname];\r

  \      if (!pl.roundgoal) pl.goals[get_round_goal()] = true;\r

  \    }\r

  \  }\r

  \  ari_history_list([`${uplayer} wins the round`], 'round');\r

  \  fen.round_winner = uplayer;\r

  \  [Z.stage, Z.turn] = ['round_end', [Z.host]];\r

  \  take_turn_fen();\r

  }"
end_of_round_fritz: "function end_of_round_fritz(plname) {\r

  \  let [A, fen, uplayer, plorder] = [Z.A, Z.fen, Z.uplayer, Z.plorder];\r

  \  let pl = fen.players[uplayer];\r

  \  calc_fritz_score();\r

  \  ari_history_list([`${plname} wins the round`], 'round over');\r

  \  fen.round_winner = plname;\r

  \  plorder = fen.plorder = jsCopy(fen.roundorder);\r

  \  if (Z.round >= fen.maxrounds) {\r

  \    fen.winners = find_players_with_min_score();\r

  \    ari_history_list([`game over: ${fen.winners.join(', ')}
  win${fen.winners.length == 1 ? 's' : ''}`], 'game over');\r

  \    Z.stage = 'game_over';\r

  \    console.log('end of game: stage', Z.stage, '\\nplorder', fen.plorder,
  '\\nturn', Z.turn);\r

  \  } else {\r

  \    let starter = fen.starter = get_next_in_list(fen.starter, plorder);\r

  \    console.log('starter', starter);\r

  \    Z.turn = [starter];\r

  \    Z.round += 1;\r

  \    fritz_new_table(fen, Z.options);\r

  \    fritz_new_player_hands(fen, Z.turn[0], Z.options);\r

  \  }\r

  }"
end_of_turn_fritz: "function end_of_turn_fritz() {\r

  \  //#region prelim\r

  \  let [A, fen, uplayer, plorder] = [Z.A, Z.fen, Z.uplayer, Z.plorder];\r

  \  let pl = fen.players[uplayer];\r

  \  clear_quick_buttons();\r

  \  let ms = fen.players[uplayer].time_left = stop_timer();\r

  \  //#endregion\r

  \  //#region TJ group processing\r

  \  let ploose = {};\r

  \  fen.journeys = [];\r

  \  fen.loosecards = [];\r

  \  for (const plname in fen.players) { fen.players[plname].loosecards = [];
  }\r

  \  for (const group of DA.TJ) {\r

  \    let ch = arrChildren(iDiv(group));\r

  \    let cards = ch.map(x => Items[x.id]);\r

  \    let set = Z.options.overlapping == 'yes' ? is_overlapping_set(cards,
  Z.options.jokers_per_group, 3, false)\r

  \      : ferro_is_set(cards, Z.options.jokers_per_group, 3, false);\r

  \    if (!set) {\r

  \      for (const card of cards) {\r

  \        if (is_joker(card)) {\r

  \          fen.loosecards.push(card.key);\r

  \          continue;\r

  \        }\r

  \        let owner = valf(card.owner, uplayer);\r

  \        lookupAddToList(ploose, [owner], card.key);\r

  \      }\r

  \    } else {\r

  \      let j = set;\r

  \      fen.journeys.push(j);\r

  \    }\r

  \  }\r

  \  for (const plname in ploose) {\r

  \    fen.players[plname].loosecards = ploose[plname];\r

  \  }\r

  \  let discard = UI.deck_discard.items.filter(x => x.source == 'discard');\r

  \  fen.deck_discard = discard.map(x => x.key);\r

  \  if (!isEmpty(A.selected)) {\r

  \    let ui_discarded_card = A.selected.map(x => A.items[x].o)[0];\r

  \    removeInPlace(UI.players[uplayer].hand.items, ui_discarded_card);\r

  \    ckey = ui_discarded_card.key;\r

  \    elem_from_to(ckey, fen.players[uplayer].hand, fen.deck_discard);\r

  \    ari_history_list([`${uplayer} discards ${ckey}`], 'discard');\r

  \  }\r

  \  let uihand = UI.players[uplayer].hand.items;\r

  \  let fenhand_vorher = fen.players[uplayer].hand;\r

  \  let fenhand = fen.players[uplayer].hand = uihand.filter(x => x.source ==
  'hand').map(x => x.key);\r

  \  //#endregion\r

  \  if (isEmpty(fenhand) && isEmpty(fen.players[uplayer].loosecards)) {\r

  \    end_of_round_fritz(uplayer);\r

  \  } else if (ms <= 100) {\r

  \    console.log(`time is up for ${uplayer}!!!`);\r

  \    ari_history_list([`${uplayer} runs out of time`], 'timeout');\r

  \    if (fen.plorder.length <= 1) { end_of_round_fritz(uplayer); }\r

  \    else { Z.turn = [get_next_player(Z, uplayer)];
  deck_deal_safe_fritz(fen, Z.turn[0]); removeInPlace(fen.plorder, uplayer); }\r

  \  } else { Z.turn = [get_next_player(Z, uplayer)];
  deck_deal_safe_fritz(fen, Z.turn[0]); }\r

  \  take_turn_fen();\r

  }"
endit: function endit() { throw new Error("*** THE END ***"); }
endsWith: function endsWith(s, sSub) { let i = s.indexOf(sSub); return i >= 0 &&
  i == s.length - sSub.length; }
endTurn: "function endTurn() {\r

  \  present();\r

  \  let el = T.trick[0].div;\r

  \  let res = indexOfMax(T.trick, 'rank');\r

  \  let winnerOfTrick = T.players[res.i];\r

  \  winnerOfTrick.hand.add(T.trick);\r

  \  let pos = actualCenter(el);\r

  \  let targetPos = actualCenter(Zones[winnerOfTrick.id].div);\r

  \  console.log('from', pos, 'to', targetPos);\r

  \  el.style.position = 'fixed';\r

  \  el.style.left = pos.x + 'px';\r

  \  el.style.top = pos.y + 'px';\r

  \  setTimeout(() => { el.style.left = targetPos.x + 'px'; el.style.top =
  targetPos.y + 'px' }, 2000);\r

  \  showHands();\r

  \  return;\r

  \  let losers = [], winners = [];\r

  \  for (const pl of T.players) {\r

  \    if (pl.hand.count() == 0) { losers.push(pl); } else { winners.push(pl);
  }\r

  \  }\r

  \  if (winners.length == 1) {\r

  \    console.log('*** game over *** winner', winners[0]); return;\r

  \  } else {\r

  \    console.log('game goes on');\r

  \    showHands();\r

  \  }\r

  \  setTimeout(startRound, 2000);\r

  }"
engine_go: "function engine_go(e) {\r

  \  const matrix = {\r

  \    a: {\r

  \      click: () => add_agent_at(M.map, [e.latlng.lat, e.latlng.lng]),\r

  \      route: () => { M.event = 'route', M.state = 'r'; engine_go() }\r

  \    },\r

  \    r: {\r

  \    },\r

  \  }\r

  \  switch (M.state) {\r

  \    case 'a':\r

  \      switch (event) {\r

  \        case 'click': break;\r

  \        case 'route': M.state = 'r'; break;\r

  \        case 'clear': break;\r

  \      }\r

  \      break;\r

  \    case 'r':\r

  \      break;\r

  \    default:\r

  \      break;\r

  \  }\r

  }"
enQ: "function enQ(f, parr = null, msBefore = null, msAfter = null, callback =
  null) {\r

  \  if (nundef(Q)) restartQ();\r

  \  Q.push({ f: f, parr: parr, msBefore: msBefore, msAfter: msAfter,
  callback: callback });\r

  }"
ensure_actions: function ensure_actions(fen) { fen.actionsCompleted = []; }
ensure_assets: "function ensure_assets(obj) {\r

  \  if (nundef(DB)) {\r

  \    DB = jsyaml.load(obj.db);\r

  \    symbolDict = Syms = jsyaml.load(obj.syms);\r

  \    SymKeys = Object.keys(Syms);\r

  \    ByGroupSubgroup = jsyaml.load(obj.symGSG);\r

  \    WordP = jsyaml.load(obj.allWP);\r

  \    C52 = jsyaml.load(obj.c52);\r

  \    Cinno = jsyaml.load(obj.cinno);\r

  \    FenPositionList = csv2list(obj.fens);\r

  \    KeySets = getKeySets();\r

  \  }\r

  \  console.assert(isdef(DB), 'NO DB!!!!!!!!!!!!!!!!!!!!!!!!!!!');\r

  }"
ensure_assets_old: "function ensure_assets_old(obj) {\r

  \  DB = jsyaml.load(obj.db);\r

  \  symbolDict = Syms = jsyaml.load(obj.syms);\r

  \  SymKeys = Object.keys(Syms);\r

  \  ByGroupSubgroup = jsyaml.load(obj.symGSG);\r

  \  WordP = jsyaml.load(obj.allWP);\r

  \  C52 = jsyaml.load(obj.c52);\r

  \  Cinno = jsyaml.load(obj.cinno);\r

  \  inno_create_card_assets();\r

  \  ari_create_card_assets('rbgyop');\r

  \  FenPositionList = csv2list(obj.fens);\r

  \  KeySets = getKeySets();\r

  \  if (isdef(obj.edict)) { Dictionary = { E: to_words(obj.edict), S:
  to_words(obj.sdict), F: to_words(obj.fdict), D: to_words(obj.ddict) } };\r

  \  console.assert(isdef(DB), 'NO DB!!!!!!!!!!!!!!!!!!!!!!!!!!!');\r

  }"
ensure_buttons_visible_ferro: "function ensure_buttons_visible_ferro() {\r

  \  let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A,
  Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  if (fen.players[uplayer].hand.length <= 1) return;\r

  \  let dbPlayer = mBy('dbPlayer');\r

  \  if (nundef(dbPlayer)) {\r

  \    let d = iDiv(UI.players[uplayer]);\r

  \    mStyle(d, { position: 'relative' })\r

  \    dbPlayer = mDiv(d, { position: 'absolute', bottom: 2, left: 100,
  height: 25 }, 'dbPlayer');\r

  \  }\r

  \  let styles = { rounding: 6, bg: 'silver', fg: 'black', border: 0, maleft:
  10 };\r

  \  if (Z.game == 'ferro') {\r

  \    let b = mButton('clear selection', onclick_clear_selection_ferro,
  dbPlayer, styles, 'enabled', 'bClearSelection');\r

  \    if (isEmpty(A.selected)) hide(b);\r

  \  }\r

  }"
ensure_buttons_visible_for: "function ensure_buttons_visible_for(plname) {\r

  \  if (Z.role == 'spectator' || isdef(mBy('dbPlayer'))) return;\r

  \  let fen = Z.fen;\r

  \  let pl = fen.players[plname];\r

  \  let plui = UI.players[plname];\r

  \  if (pl.hand.length <= 1) return;\r

  \  let d = iDiv(plui);\r

  \  mStyle(d, { position: 'relative' })\r

  \  let dbPlayer = mDiv(d, { position: 'absolute', bottom: 2, left: 100,
  height: 25 }, 'dbPlayer');\r

  \  let styles = { rounding: 6, bg: 'silver', fg: 'black', border: 0, maleft:
  10 };\r

  \  let bByRank = mButton('by rank', onclick_by_rank_ferro, dbPlayer, styles,
  'enabled');\r

  \  let bBySuit = mButton('by suit', onclick_by_suit_ferro, dbPlayer, styles,
  'enabled');\r

  }"
ensure_clientstate: "function ensure_clientstate() {\r

  \  if (nundef(Clientdata.state)) {\r

  \    Clientdata.state = {};\r

  \    for (const k in DA.bars) Clientdata.state[k] = 0;\r

  \  }\r

  }"
ensure_market: function ensure_market(fen, n) { fen.stallSelected = [];
  deck_add(fen.deck, n - fen.market.length, fen.market); }
ensure_player_id_name_index_type_color: "function
  ensure_player_id_name_index_type_color(pls) {\r

  \  let i = 0;\r

  \  pls.map(x => {\r

  \    x.id = getUID();\r

  \    x.name = (i == 0 ? Username : randomBotName()).toLowerCase();\r

  \    x.index = i;\r

  \    x.type = (i == 0 ? 'human' : 'ai');\r

  \    x.colorName = (i == 0 ? U.settings.userColor :
  Object.values(PlayerColors)[i]);\r

  \    x.color = (i == 0 ? U.settings.userColor :
  Object.keys(PlayerColors)[i]);\r

  \    i++;\r

  \  });\r

  }"
ensure_polling: function ensure_polling() { }
ensure_score: "function ensure_score(plname) {\r

  \  let sc = 0;\r

  \  if (isdef(Z.playerdata)) {\r

  \    let pldata = valf(firstCond(Z.playerdata, x => x.name == plname), {
  name: plname, state: { score: 0 } });\r

  \    sc = isdef(pldata.state) ? pldata.state.score : 0;\r

  \  } else Z.playerdata = Z.plorder.map(x => [{ name: x, state: { score: 0 }
  }]);\r

  \  lookupSet(Z.fen, ['players', plname, 'score'], sc);\r

  }"
ensure_stall: function ensure_stall(fen, uplayer, n) { let pl =
  fen.players[uplayer]; deck_add(fen.deck, n - pl.stall.length, pl.stall); }
ensure_stallSelected: function ensure_stallSelected(fen) { if
  (nundef(fen.stallSelected)) fen.stallSelected = []; }
ensure_winnerlist: function ensure_winnerlist(game) { return lookupSet(DB.games,
  [game, 'winnerlist'], []); }
ensure_Z: "function ensure_Z() {\r

  \  if (nundef(Z)) Z = {};\r

  \  copyKeys(Serverdata, Z);\r

  \  if (isdef(Serverdata.table)) { copyKeys(Serverdata.table, Z);
  copyKeys(Serverdata.table.fen, Z); }\r

  }"
ensureAllAssets: async function ensureAllAssets() { ensureAllAssets(true, true, true, true); }
ensureAllGames: "function ensureAllGames(callbacks = []) {\r

  \  if (allGames == null) {\r

  \    sendGetAllGames(d => {\r

  \      allGames = d;\r

  \      console.log('allGames', allGames);\r

  \      if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));\r

  \    });\r

  \  } else if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks,
  1));\r

  }"
ensureAssets: "async function ensureAssets() {\r

  \  if (nundef(Syms)) {\r

  \    Syms = await route_path_yaml_dict(`${Basepath}assets/allSyms.yaml`);\r

  \    SymKeys = get_keys(Syms);\r

  \    ByGroupSubgroup = await
  route_path_yaml_dict(`${Basepath}assets/symGSG.yaml`);\r

  \    KeySets = getKeySets();\r

  \    C52 = await route_path_yaml_dict(`${Basepath}assets/c52.yaml`);\r

  \    ari_create_card_assets('rb');\r

  \  }\r

  }"
ensureColorDict: "function ensureColorDict() {\r

  \  if (isdef(ColorDi)) return;\r

  \  ColorDi = {};\r

  \  let names = getColorNames();\r

  \  let hexes = getColorHexes();\r

  \  for (let i = 0; i < names.length; i++) {\r

  \    ColorDi[names[i].toLowerCase()] = { c: '#' + hexes[i] };\r

  \  }\r

  \  const newcolors = {\r

  \    black: { c: '#000000', D: 'schwarz' },\r

  \    blue: { c: '#0000ff', D: 'blau' },\r

  \    BLUE: { c: '#4363d8', E: 'blue', D: 'blau' },\r

  \    BLUEGREEN: { c: '#004054', E: 'bluegreen', D: 'blaugrün' },\r

  \    BROWN: { c: '#96613d', E: 'brown', D: 'braun' },\r

  \    deepyellow: { c: '#ffed01', E: 'yellow', D: 'gelb' },\r

  \    FIREBRICK: { c: '#800000', E: 'darkred', D: 'rotbraun' },\r

  \    gold: { c: 'gold', D: 'golden' },\r

  \    green: { c: 'green', D: 'grün' },\r

  \    GREEN: { c: '#3cb44b', E: 'green', D: 'grün' },\r

  \    grey: { c: 'grey', D: 'grau' },\r

  \    lightblue: { c: 'lightblue', D: 'hellblau' },\r

  \    LIGHTBLUE: { c: '#42d4f4', E: 'lightblue', D: 'hellblau' },\r

  \    lightgreen: { c: 'lightgreen', D: 'hellgrün' },\r

  \    LIGHTGREEN: { c: '#afff45', E: 'lightgreen', D: 'hellgrün' },\r

  \    lightyellow: { c: '#fff620', E: 'lightyellow', D: 'gelb' },\r

  \    NEONORANGE: { c: '#ff6700', E: 'neonorange', D: 'neonorange' },\r

  \    NEONYELLOW: { c: '#efff04', E: 'neonyellow', D: 'neongelb' },\r

  \    olive: { c: 'olive', D: 'oliv' },\r

  \    OLIVE: { c: '#808000', E: 'olive', D: 'oliv' },\r

  \    orange: { c: 'orange', D: 'orange' },\r

  \    ORANGE: { c: '#f58231', E: 'orange', D: 'orange' },\r

  \    PINK: { c: 'deeppink', D: 'rosa' },\r

  \    pink: { c: 'pink', D: 'rosa' },\r

  \    purple: { c: 'purple', D: 'lila' },\r

  \    PURPLE: { c: '#911eb4', E: 'purple', D: 'lila' },\r

  \    red: { c: 'red', D: 'rot' },\r

  \    RED: { c: '#e6194B', E: 'red', D: 'rot' },\r

  \    skyblue: { c: 'skyblue', D: 'himmelblau' },\r

  \    SKYBLUE: { c: 'deepskyblue', D: 'himmelblau' },\r

  \    teal: { c: '#469990', D: 'blaugrün' },\r

  \    TEAL: { c: '#469990', E: 'teal', D: 'blaugrün' },\r

  \    transparent: { c: '#00000000', E: 'transparent', D: 'transparent' },\r

  \    violet: { c: 'violet', E: 'violet', D: 'violett' },\r

  \    VIOLET: { c: 'indigo', E: 'violet', D: 'violett' },\r

  \    white: { c: 'white', D: 'weiss' },\r

  \    yellow: { c: 'yellow', D: 'gelb' },\r

  \    yelloworange: { c: '#ffc300', E: 'yellow', D: 'gelb' },\r

  \    YELLOW: { c: '#ffe119', E: 'yellow', D: 'gelb' },\r

  \  };\r

  \  for (const k in newcolors) {\r

  \    let cnew = newcolors[k];\r

  \    if (cnew.c[0] != '#' && isdef(ColorDi[cnew.c])) cnew.c =
  ColorDi[cnew.c].c;\r

  \    ColorDi[k] = cnew;\r

  \  }\r

  }"
ensureColorNames: "function ensureColorNames() {\r

  \  if (isdef(ColorNames)) return;\r

  \  ColorNames = {};\r

  \  let names = getColorNames();\r

  \  let hexes = getColorHexes();\r

  \  for (let i = 0; i < names.length; i++) {\r

  \    ColorNames[names[i].toLowerCase()] = '#' + hexes[i];\r

  \  }\r

  }"
ensureDictionary: "function ensureDictionary() {\r

  \  if (nundef(Dictionary)) { Dictionary = { E: {}, S: {}, F: {}, C: {}, D:
  {} } };\r

  \  for (const k in Syms) {\r

  \    for (const lang of ['E', 'D', 'F', 'C', 'S']) {\r

  \      let w = Syms[k][lang];\r

  \      if (nundef(w)) continue;\r

  \      Dictionary[lang][w.toLowerCase()] = Dictionary[lang][w.toUpperCase()]
  = k;\r

  \    }\r

  \  }\r

  }"
ensureInView: "function ensureInView(container, element) {\r

  \  let cTop = container.scrollTop;\r

  \  let cBottom = cTop + container.clientHeight;\r

  \  let eTop = element.offsetTop;\r

  \  let eBottom = eTop + element.clientHeight;\r

  \  if (eTop < cTop) {\r

  \    container.scrollTop -= cTop - eTop;\r

  \  } else if (eBottom > cBottom) {\r

  \    container.scrollTop += eBottom - cBottom;\r

  \  }\r

  }"
ensureKeys: "function ensureKeys(o, def) {\r

  \  addKeys(def, o);\r

  }"
ensureRtree: "function ensureRtree(R) {\r

  \  if (nundef(R.tree) || isEmpty(R.tree)) {\r

  \    if (isdef(R.lastSpec.ROOT.cond)) {\r

  \      R.tree = { uid: getUID(), uidParent: null, here: 'ROOT', type:
  'invisible' };\r

  \      if (R.lastSpec.ROOT.chanav) R.tree.chanav = R.lastSpec.ROOT.chanav;\r

  \      R.rNodes[R.tree.uid] = R.tree;\r

  \      R.Locations.ROOT = [R.tree.uid];\r

  \    } else {\r

  \      R.tree = recTree(R.lastSpec.ROOT, null, R);\r

  \      R.rNodes[R.tree.uid] = R.tree;\r

  \    }\r

  \  } else {\r

  \    console.log('(tree present!)');\r

  \  }\r

  }"
ensureSvgDict: "async function ensureSvgDict() {\r

  \  if (nundef(svgDict)) {\r

  \    svgDictC = await vidCache.load('svgDict', route_svgDict, true,
  false);\r

  \    svgDict = vidCache.asDict('svgDict');\r

  \    svgKeys = Object.keys(svgDict);\r

  \    svgList = dict2list(svgDict);\r

  \  }\r

  }"
ensureSymByHex: "function ensureSymByHex() {\r

  \  if (nundef(symByHex)) {\r

  \    symByHex = {};\r

  \    symKeysByHex = [];\r

  \    for (const k in symbolDict) {\r

  \      let info = symbolDict[k];\r

  \      symByHex[info.hexcode] = info;\r

  \    }\r

  \    symKeysByHex = Object.keys(symByHex);\r

  \  }\r

  }"
ensureSymBySet: function ensureSymBySet() { if (nundef(symBySet)) { makeEmoSetIndex(); } }
ensureSymByType: "function ensureSymByType() {\r

  \  if (nundef(symByType)) {\r

  \    symByType = { emo: {}, eduplo: {}, icon: {}, iduplo: {} };\r

  \    symKeysByType = { emo: [], eduplo: [], icon: [], iduplo: [] };\r

  \    symListByType = { emo: [], eduplo: [], icon: [], iduplo: [] };\r

  \    for (const k in symbolDict) {\r

  \      let info = symbolDict[k];\r

  \      if (info.type == 'emo' && info.isDuplicate) { symByType.eduplo[k] =
  info; symListByType.eduplo.push(info); symKeysByType.eduplo.push(k); }\r

  \      else if (info.type == 'icon' && info.isDuplicate) {
  symByType.iduplo[k] = info; symListByType.iduplo.push(info);
  symKeysByType.iduplo.push(k); }\r

  \      else if (info.type == 'emo') { symByType.emo[k] = info;
  symListByType.emo.push(info); symKeysByType.emo.push(k); }\r

  \      else if (info.type == 'icon') { symByType.icon[k] = info;
  symListByType.icon.push(info); symKeysByType.icon.push(k); }\r

  \    }\r

  \  }\r

  }"
ensureUiNodes: function ensureUiNodes(R) { if (nundef(R.uiNodes)) R.uiNodes = {}; }
ensureUIS: function ensureUIS() { if (nundef(UIS)) { UIS = {}; IdOwner = {};
  id2oids = {}; oid2ids = {}; id2uids = {}; path2mainIds = {}; } }
enter_pressed: function enter_pressed(e) { if (e.keyCode == 13) {
  send_message(e); } set_seen(); }
enterInterruptState: "function enterInterruptState() {\r

  \  clearTimeouts();\r

  \  if (isdef(G.instance)) G.instance.clear();\r

  \  auxOpen = true;\r

  }"
enterLobby: "function enterLobby() {\r

  \  console.assert(isdef(DB) && isdef(U), 'ENTERLOBBY DB U NOT CORRECT!!!')\r

  \  if (JUST_PERLEN_GAME) { simplestPerlenGame(); }\r

  }"
enterOnlineIDFormSubmit: "function enterOnlineIDFormSubmit() {\r

  \  var form = document.getElementById(\"EnterOnlineIDForm\");\r

  \  let userid = mBy(\"enterID-input\");\r

  \  let pwd = mBy('tlpvt-passcode-input');\r

  \  onclick_submit_boa_login();\r

  }"
enterWaitingLoop: "function enterWaitingLoop() {\r

  \  setStatus('waiting for more players!!!');\r

  }"
eraseSpaces: "function eraseSpaces(s) {\r

  \  let i = 0;\r

  \  while (s.includes('  ')) {\r

  \    s = s.replace('  ', ' ');\r

  \    s = s.replace(' {', '{');\r

  \    s = s.replace(' (', '(');\r

  \    s = s.replace('\\n ', ' ');\r

  \    s = s.replace('\\n{', '{');\r

  \    s = s.replace('\\n}', '}');\r

  \  }\r

  \  return s;\r

  }"
errlog: function errlog() { console.log('ERROR!', ...arguments); }
error: "function error(msg) {\r

  \  let fname = getFunctionsNameThatCalledThisFunction();\r

  \  console.log(fname, 'ERROR!!!!! ', msg);\r

  }"
errormsg: function errormsg(ms) { $('#msg').innerHTML = ms; }
establishUsername: "function establishUsername(username) {\r

  \  hide(dLogin);\r

  \  Username = username;\r

  \  initSocket();\r

  }"
ev_to_gname: function ev_to_gname(ev) { evNoBubble(ev); return
  evToTargetAttribute(ev, 'gamename'); }
eval_approx_derivative: function eval_approx_derivative(f, xfrom, xto, dx) { }
eval_approx_integral: function eval_approx_integral(f, xfrom, xto, dx) { }
eval_normal_cdf: function eval_normal_cdf(x, mean, stdev) { let f =
  get_normal_cdf(mean, stdev); return f(x); }
eval_normal_pdf: function eval_normal_pdf(x, mean, stdev) { let f =
  get_normal_pdf(mean, stdev); return f(x); }
evalCond: "function evalCond(o, condKey, condVal) {\r

  \  let func = FUNCTIONS[condKey];\r

  \  if (isString(func)) func = window[func];\r

  \  if (nundef(func)) {\r

  \    if (nundef(o[condKey])) return null;\r

  \    if (isList(condVal)) {\r

  \      for (const v of condVal) if (o[condKey] == v) return true;\r

  \      return null;\r

  \    } else {\r

  \      return isdef(o[condKey]) ? o[condKey] == condVal : null;\r

  \    }\r

  \  }\r

  \  return func(o, condVal);\r

  }"
evalConds: "function evalConds(o, conds) {\r

  \  for (const [f, v] of Object.entries(conds)) {\r

  \    if (!evalCond(o, f, v)) return false;\r

  \  }\r

  \  return true;\r

  }"
evalExp: function evalExp() { }
EvalInit: "function EvalInit() {\r

  \  var index = 0;\r

  \  for (index = 0; index < 10; ++index) {\r

  \    PawnRanksWhite[index] = 0;\r

  \    PawnRanksBlack[index] = 0;\r

  \  }\r

  }"
evalML: "function evalML(word) {\r

  \  let answer = normalize(word, currentLanguage);\r

  \  let reqAnswer = normalize(bestWord, currentLanguage);\r

  \  if (answer == reqAnswer) return true;\r

  \  else if (currentLanguage == 'D' &&
  isEnglishKeyboardGermanEquivalent(reqAnswer, answer)) {\r

  \    return true;\r

  \  } else {\r

  \    return false;\r

  \  }\r

  }"
EvalPosition: "function EvalPosition() {\r

  \  var pce;\r

  \  var pceNum;\r

  \  var sq;\r

  \  var score = brd_material[COLOURS.WHITE] - brd_material[COLOURS.BLACK];\r

  \  var file;\r

  \  var rank;\r

  \  if (0 == brd_pceNum[PIECES.wP] && 0 == brd_pceNum[PIECES.bP] &&
  MaterialDraw() == BOOL.TRUE) {\r

  \    return 0;\r

  \  }\r

  \  PawnsInit();\r

  \  pce = PIECES.wP;\r

  \  for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \    sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \    score += PawnTable[SQ64(sq)];\r

  \    file = FilesBrd[sq] + 1;\r

  \    rank = RanksBrd[sq];\r

  \    if (PawnRanksWhite[file - 1] == RANKS.RANK_8 && PawnRanksWhite[file +
  1] == RANKS.RANK_8) {\r

  \      score += PawnIsolated;\r

  \    }\r

  \    if (PawnRanksBlack[file - 1] <= rank && PawnRanksBlack[file] <= rank &&
  PawnRanksBlack[file + 1] <= rank) {\r

  \      score += PawnPassed[rank];\r

  \    }\r

  \  }\r

  \  pce = PIECES.bP;\r

  \  for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \    sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \    score -= PawnTable[MIRROR64(SQ64(sq))];\r

  \    file = FilesBrd[sq] + 1;\r

  \    rank = RanksBrd[sq];\r

  \    if (PawnRanksBlack[file - 1] == RANKS.RANK_1 && PawnRanksBlack[file +
  1] == RANKS.RANK_1) {\r

  \      score -= PawnIsolated;\r

  \    }\r

  \    if (PawnRanksWhite[file - 1] >= rank && PawnRanksWhite[file] >= rank &&
  PawnRanksWhite[file + 1] >= rank) {\r

  \      score -= PawnPassed[7 - rank];\r

  \    }\r

  \  }\r

  \  pce = PIECES.wN;\r

  \  for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \    sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \    score += KnightTable[SQ64(sq)];\r

  \  }\r

  \  pce = PIECES.bN;\r

  \  for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \    sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \    score -= KnightTable[MIRROR64(SQ64(sq))];\r

  \  }\r

  \  pce = PIECES.wB;\r

  \  for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \    sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \    score += BishopTable[SQ64(sq)];\r

  \  }\r

  \  pce = PIECES.bB;\r

  \  for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \    sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \    score -= BishopTable[MIRROR64(SQ64(sq))];\r

  \  }\r

  \  pce = PIECES.wR;\r

  \  for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \    sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \    score += RookTable[SQ64(sq)];\r

  \    file = FilesBrd[sq] + 1;\r

  \    if (PawnRanksWhite[file] == RANKS.RANK_8) {\r

  \      if (PawnRanksBlack[file] == RANKS.RANK_1) {\r

  \        score += RookOpenFile;\r

  \      } else {\r

  \        score += RookSemiOpenFile;\r

  \      }\r

  \    }\r

  \  }\r

  \  pce = PIECES.bR;\r

  \  for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \    sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \    score -= RookTable[MIRROR64(SQ64(sq))];\r

  \    file = FilesBrd[sq] + 1;\r

  \    if (PawnRanksBlack[file] == RANKS.RANK_1) {\r

  \      if (PawnRanksWhite[file] == RANKS.RANK_8) {\r

  \        score -= RookOpenFile;\r

  \      } else {\r

  \        score -= RookSemiOpenFile;\r

  \      }\r

  \    }\r

  \  }\r

  \  pce = PIECES.wQ;\r

  \  for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \    sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \    score += RookTable[SQ64(sq)];\r

  \    file = FilesBrd[sq] + 1;\r

  \    if (PawnRanksWhite[file] == RANKS.RANK_8) {\r

  \      if (PawnRanksBlack[file] == RANKS.RANK_1) {\r

  \        score += QueenOpenFile;\r

  \      } else {\r

  \        score += QueenSemiOpenFile;\r

  \      }\r

  \    }\r

  \  }\r

  \  pce = PIECES.bQ;\r

  \  for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \    sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \    score -= RookTable[MIRROR64(SQ64(sq))];\r

  \    file = FilesBrd[sq] + 1;\r

  \    if (PawnRanksBlack[file] == RANKS.RANK_1) {\r

  \      if (PawnRanksWhite[file] == RANKS.RANK_8) {\r

  \        score -= QueenOpenFile;\r

  \      } else {\r

  \        score -= QueenSemiOpenFile;\r

  \      }\r

  \    }\r

  \  }\r

  \  pce = PIECES.wK;\r

  \  sq = brd_pList[PCEINDEX(pce, 0)];\r

  \  if ((brd_material[COLOURS.BLACK] <= ENDGAME_MAT)) {\r

  \    score += KingE[SQ64(sq)];\r

  \  } else {\r

  \    score += KingO[SQ64(sq)];\r

  \  }\r

  \  pce = PIECES.bK;\r

  \  sq = brd_pList[PCEINDEX(pce, 0)];\r

  \  if ((brd_material[COLOURS.WHITE] <= ENDGAME_MAT)) {\r

  \    score -= KingE[MIRROR64(SQ64(sq))];\r

  \  } else {\r

  \    score -= KingO[MIRROR64(SQ64(sq))];\r

  \  }\r

  \  if (brd_pceNum[PIECES.wB] >= 2) score += BishopPair;\r

  \  if (brd_pceNum[PIECES.bB] >= 2) score -= BishopPair;\r

  \  if (brd_side == COLOURS.WHITE) {\r

  \    return score;\r

  \  } else {\r

  \    return -score;\r

  \  }\r

  }"
evalSP: "function evalSP(speechResult) {\r

  \  if (isEmpty(speechResult)) {\r

  \    return false;\r

  \  }\r

  \  Selected = {}\r

  \  let answer = Goal.answer = Selected.answer = normalize(speechResult,
  currentLanguage);\r

  \  let reqAnswer = Goal.reqAnswer = normalize(bestWord, currentLanguage);\r

  \  if (answer == reqAnswer) return true;\r

  \  else if (matchesAnyWordOrSound(Goal.info, answer)) return true;\r

  \  else if (matchingNumberOrTime(Goal.info, answer)) {\r

  \    return true;\r

  \  } else if (isAcceptableAnswerButNewSound(Goal.info, reqAnswer, answer))
  {\r

  \    addAsSoundToDatabase(Goal.info, answer);\r

  \    return true;\r

  \  } else {\r

  \    return false;\r

  \  }\r

  }"
evalSPA: "function evalSPA(speechResult) {\r

  \  if (isEmpty(speechResult)) {\r

  \    console.log('empty speechResult')\r

  \    return false;\r

  \  }\r

  \  Selected = {}\r

  \  let answer = Goal.answer = Selected.answer = normalize(speechResult,
  currentLanguage);\r

  \  let reqAnswer = Goal.reqAnswer = normalize(bestWord, currentLanguage);\r

  \  if (answer == reqAnswer) return true;\r

  \  else if (matchesAnyWordOrSound(Goal.info, answer)) return true;\r

  \  else if (matchingNumberOrTime(Goal.info, answer)) {\r

  \    return true;\r

  \  } else if (isAcceptableAnswerButNewSound(Goal.info, reqAnswer, answer))
  {\r

  \    addAsSoundToDatabase(Goal.info, answer);\r

  \    return true;\r

  \  } else {\r

  \    return false;\r

  \  }\r

  }"
evalSpecPath: "function evalSpecPath(n, relpath, R) {\r

  \  if (isEmpty(relpath)) return null;\r

  \  if (relpath == '.') return n;\r

  \  let iNext = firstNumber(relpath);\r

  \  nNext = n.sub[iNext];\r

  \  let newPath = stringAfter(relpath, '.' + iNext);\r

  \  if (isEmpty(newPath)) return nNext;\r

  \  else return evalSpecPath(nNext, newPath, R);\r

  }"
evalTC: "function evalTC(ev) {\r

  \  let id = evToClosestId(ev);\r

  \  ev.cancelBubble = true;\r

  \  let i = firstNumber(id);\r

  \  let item = Pictures[i];\r

  \  Selected = { pic: item, feedbackUI: item.div };\r

  \  if (item == Goal) { return true; } else { return false; }\r

  }"
evalTP: "function evalTP(ev) {\r

  \  let id = evToClosestId(ev);\r

  \  ev.cancelBubble = true;\r

  \  let i = firstNumber(id);\r

  \  let item = Pictures[i];\r

  \  Selected = { pic: item, feedbackUI: item.div, sz:
  getBounds(item.div).height };\r

  \  if (item.label == bestWord) { return true; } else { return false; }\r

  }"
evaluate: "function evaluate() {\r

  \  if (!canAct()) return;\r

  \  uiActivated = false; clearTimeouts();\r

  \  IsAnswerCorrect = G.instance.eval(...arguments);\r

  \  if (IsAnswerCorrect === undefined) { promptNextTrial(); return; }\r

  \  G.trialNumber += 1;\r

  \  if (!IsAnswerCorrect && G.trialNumber < G.trials && !calibrating()) {
  promptNextTrial(); return; }\r

  \  if (calibrating()) { DELAY = 300; if (IsAnswerCorrect)
  G.successFunc(false); else G.failFunc(); }\r

  \  else if (IsAnswerCorrect) { DELAY = Settings.spokenFeedback ? 1500 : 300;
  G.successFunc(); }\r

  \  else { DELAY = G.correctionFunc(); G.failFunc(); }\r

  \  setTimeout(removeMarkers, 1500);\r

  \  let nextLevel = scoring(IsAnswerCorrect);\r

  \  if (Score.gameChange) {\r

  \    setNextGame();\r

  \    if (unitTimeUp()) {\r

  \      setTimeout(() => gameOver('Great job! Time for a break!'), DELAY);\r

  \    } else {\r

  \      TOMain = setTimeout(startGame, DELAY);\r

  \    }\r

  \  } else if (Score.levelChange && nextLevel <= G.maxLevel) {\r

  \    G.level = nextLevel;\r

  \    setBadgeLevel(G.level);\r

  \    TOMain = setTimeout(startLevel, DELAY);\r

  \  } else {\r

  \    TOMain = setTimeout(startRound, DELAY);\r

  \  }\r

  }"
evaluateBoard: "function evaluateBoard(move, prevSum, color) {\r

  \  var from = [8 - parseInt(move.from[1]), move.from.charCodeAt(0) -
  'a'.charCodeAt(0)];\r

  \  var to = [8 - parseInt(move.to[1]), move.to.charCodeAt(0) -
  'a'.charCodeAt(0)];\r

  \  if (prevSum < -1500) {\r

  \    if (move.piece === 'k') { move.piece = 'k_e' }\r

  \    else if (move.captured === 'k') { move.captured = 'k_e' }\r

  \  }\r

  \  if ('captured' in move) {\r

  \    if (move.color === color) {\r

  \      prevSum += (weights[move.captured] +
  pstOpponent[move.color][move.captured][to[0]][to[1]]);\r

  \    }\r

  \    else {\r

  \      prevSum -= (weights[move.captured] +
  pstSelf[move.color][move.captured][to[0]][to[1]]);\r

  \    }\r

  \  }\r

  \  if (move.flags.includes('p')) {\r

  \    move.promotion = 'q';\r

  \    if (move.color === color) {\r

  \      prevSum -= (weights[move.piece] +
  pstSelf[move.color][move.piece][from[0]][from[1]]);\r

  \      prevSum += (weights[move.promotion] +
  pstSelf[move.color][move.promotion][to[0]][to[1]]);\r

  \    }\r

  \    else {\r

  \      prevSum += (weights[move.piece] +
  pstSelf[move.color][move.piece][from[0]][from[1]]);\r

  \      prevSum -= (weights[move.promotion] +
  pstSelf[move.color][move.promotion][to[0]][to[1]]);\r

  \    }\r

  \  }\r

  \  else {\r

  \    if (move.color !== color) {\r

  \      prevSum += pstSelf[move.color][move.piece][from[0]][from[1]];\r

  \      prevSum -= pstSelf[move.color][move.piece][to[0]][to[1]];\r

  \    }\r

  \    else {\r

  \      prevSum -= pstSelf[move.color][move.piece][from[0]][from[1]];\r

  \      prevSum += pstSelf[move.color][move.piece][to[0]][to[1]];\r

  \    }\r

  \  }\r

  \  return prevSum;\r

  }"
evalWP: "function evalWP(wp) {\r

  \  let title = wp.title;\r

  \  if (title.includes('Adding') && !titla.includes('Fractions')) {\r

  \  }\r

  }"
evenFloor: "function evenFloor(x) { let n = Math.floor(x); return n % 2 ? n - 1 : n; }"
everyinterval: "function everyinterval(n) {\r

  \  if ((myGameArea.frameNo / n) % 1 == 0) {\r

  \    return true;\r

  \  }\r

  \  return false;\r

  }"
evNoBubble: function evNoBubble(ev) { ev.preventDefault(); ev.cancelBubble = true; }
evStop: "function evStop(ev) {\r

  \  ev.preventDefault();\r

  \  ev.stopPropagation();\r

  \  ev.stopImmediatePropagation();\r

  \  ev.cancelBubble = true;\r

  }"
evToClass: "function evToClass(ev, className) {\r

  \  let elem = findParentWithClass(className);\r

  \  return elem;\r

  }"
evToClosestId: "function evToClosestId(ev) {\r

  \  let elem = findParentWithId(ev.target);\r

  \  return elem.id;\r

  }"
evToId: "function evToId(ev) {\r

  \  let elem = findParentWithId(ev.target);\r

  \  return elem.id;\r

  }"
evToId_g_: "function evToId_g_(ev) {\r

  \  let elem = findParentWithId(ev.target);\r

  \  let s = elem.id;\r

  \  return s[0] == 'g' && s[1] == '_' ? stringAfter(s, '_') : s;\r

  }"
evToIdParent: "function evToIdParent(ev) {\r

  \  let elem = findParentWithId(ev.target);\r

  \  return elem;\r

  }"
evToIdTNT: "function evToIdTNT(ev) {\r

  \  let elem = findParentWithId(ev.target);\r

  \  return elem.id;\r

  }"
evToItem: "function evToItem(ev) {\r

  \  let id = evToId(ev);\r

  \  let item = Items[id];\r

  \  return item;\r

  }"
evToItemC: function evToItemC(ev) { ev.cancelBubble = true; return evToItem(ev); }
evToO: "function evToO(ev) {\r

  \  return getVisual(evToId(ev));\r

  }"
evToProp: "function evToProp(ev, prop) {\r

  \  let x = ev.target;\r

  \  while (isdef(x) && nundef(x.getAttribute(prop))) x = x.parentNode;\r

  \  return isdef(x) ? x.getAttribute(prop) : null;\r

  }"
evToTargetAttribute: "function evToTargetAttribute(ev, attr) {\r

  \  let val = ev.target.getAttribute(attr);\r

  \  if (nundef(val)) { val = ev.target.parentNode.getAttribute(attr); }\r

  \  return val;\r

  }"
ex00_sidebar: "function ex00_sidebar(sidebar) {\r

  \  let styles = { hpadding: 12, vpadding: 4, fz: 20 };\r

  \  for (const link of ['short', 'link3super superlang dasdasdas', 'short'])
  {\r

  \    sidebar.addContent(`<a href='#'>${link}</a>`, styles);\r

  \  }\r

  \  sidebar.open(null, false);\r

  }"
ex01_table: "function ex01_table(dContent) {\r

  \  console.log('dContent', dContent);\r

  \  mStyle(dContent, { bg: wyellow, position: 'relative' });\r

  \  let dTable = mDiv100(dContent);\r

  \  let d3 = mDiv(dTable, { position: 'absolute', left: 40, top: 4, bg:
  'pink', w: 300, h: 300 });\r

  }"
ex02_table: "function ex02_table(dContent) {\r

  \  console.log('dContent', dContent);\r

  \  mStyle(dContent, { bg: wyellow, position: 'relative', hmin: 1600 });\r

  \  let dTable = mDiv100(dContent);\r

  }"
exchange_by_index: "function exchange_by_index(arr1, i1, arr2, i2) {\r

  \  let temp = arr1[i1];\r

  \  arr1[i1] = arr2[i2];\r

  \  arr2[i2] = temp;\r

  }"
exchange_items_in_fen: "function exchange_items_in_fen(fen, o0, o1) {\r

  \  let p0 = o0.path.split('.'); if (isdef(fen.players[p0[0]]))
  p0.unshift('players');\r

  \  let p1 = o1.path.split('.'); if (isdef(fen.players[p1[0]]))
  p1.unshift('players');\r

  \  let list0 = lookup(fen, p0);\r

  \  let list1 = lookup(fen, p1);\r

  \  if (isDict(list0) && isdef(list0.list)) list0 = list0.list;\r

  \  if (isDict(list1) && isdef(list1.list)) list1 = list1.list;\r

  \  elem_from_to(o0.key, list0, list1);\r

  \  elem_from_to(o1.key, list1, list0);\r

  }"
executeFrame: "function executeFrame() {\r

  \  if (animate)\r

  \    requestAnimFrame(executeFrame);\r

  \  incrementSimulation();\r

  \  c.clearRect(0, 0, canvas.width, canvas.height);\r

  \  drawBox();\r

  \  drawCircle();\r

  \  if (mouse.down)\r

  \    drawLineToMouse();\r

  }"
executeFunctionByName: "function executeFunctionByName(functionName, context)
  {\r

  \  var args = Array.prototype.slice.call(arguments, 2);\r

  \  var namespaces = functionName.split('.');\r

  \  var func = namespaces.pop();\r

  \  for (var i = 0; i < namespaces.length; i++) {\r

  \    context = context[namespaces[i]];\r

  \  }\r

  \  return context[func].apply(context, args);\r

  }"
executeMapping: "function executeMapping(mapping, otype, oid, o) {\r

  \  let mKey = mapping.id;\r

  \  let path = stringAfter(mKey, '.');\r

  \  let omap = parsePropertyPath(o, stringAfter(mKey, '.'));\r

  \  if (nundef(omap)) return;\r

  \  let func = mapping.type;\r

  \  let loc = mapping.loc;\r

  \  if (stringBefore(loc, '.') == 'this') {\r

  \    loc = parsePropertyPath(o, stringAfter(loc, '.'));\r

  \  }\r

  \  let mkLoc = UIS[loc];\r

  \  if (mkLoc && mkLoc.maxHeightFunc) {\r

  \    let hMax = mkLoc.maxHeightFunc();\r

  \    mkLoc.elem.style.setProperty('height', hMax + 'px');\r

  \  }\r

  \  let structObject = window[func](serverData.table, loc, o, oid, path,
  omap);\r

  }"
existingPlayers: "function existingPlayers(callback) { callback({ response: 'hallo' }); }"
exitToAddon: "function exitToAddon(callback) {\r

  \  AD.callback = callback;\r

  \  enterInterruptState(); auxOpen = false;\r

  \  AD.run();\r

  }"
exp_church: function exp_church(options) { return options.church == 'yes'; }
exp_commissions: function exp_commissions(options) { return options.commission == 'yes'; }
exp_dep: "function exp_dep(data) {\r

  \  if (isDict(data) && 'type' in data) {\r

  \    return [data];\r

  \  }\r

  \  if (is_Set(data) && data._set.length == 1) {\r

  \    return exp(data._set[0]);\r

  \  }\r

  \  if (is_Set(data) && data._set.length > 1) {\r

  \    return data._set.map(exp);\r

  \  }\r

  \  if (is_Tuple(data) && data._tuple.length == 1) {\r

  \    return exp(data._tuple[0]);\r

  \  }\r

  \  if (is_Tuple(data) && data._tuple.length > 1) data = data._tuple;\r

  \  if (isList(data) && empty(data)) return [];\r

  \  if (isList(data) && data.length == 1) return exp(data[0])\r

  \  if (isList(data)) {\r

  \    let a = exp(data[0]);\r

  \    let rest = data.slice(1);\r

  \    let tlist = exp(rest);\r

  \    return carteset(a, tlist);\r

  \  }\r

  }"
exp_journeys: function exp_journeys(options) { return options.journey == 'yes'; }
exp_rumors: function exp_rumors(options) { return options.rumors == 'yes'; }
expand: "function expand(e) {\r

  \  console.log('e', e)\r

  \  let res = [];\r

  \  let e2 = expand1(e);\r

  \  console.log('e2', e2)\r

  \  for (const el of e2) {\r

  \    if (isll(el)) el.map(x => res.push(x));\r

  \    else res.push(el);\r

  \  }\r

  \  return res;\r

  }"
expand1: "function expand1(x) {\r

  \  if (isEmpty(x)) return [];\r

  \  if (isLiteral(x)) return [x.toString()];\r

  \  if (isActionElement(x)) return [x];\r

  \  if (isSingleton(x)) return expand1(firstElement(x));\r

  \  if (is_Set(x)) return x._set.map(el => expand1(el));\r

  \  if (isSet(x)) return x.set.map(el => expand1(el));\r

  \  if (is_Tuple(x)) {\r

  \    x = x._tuple;\r

  \    let a = expand1(firstElement(x));\r

  \    let b = x.slice(1);\r

  \    let c = expand1(x.slice(1));\r

  \    let d = extractActionLists(c);\r

  \    return carteset(a, d);\r

  \  }\r

  \  if (isTuple(x)) {\r

  \    let a = expand1(firstElement(x));\r

  \    let b = x.slice(1);\r

  \    let c = expand1(x.slice(1));\r

  \    let d = extractStringLists(c);\r

  \    testHelpers('a=', fj(a), 'b=', fj(b), 'c=', fj(c));\r

  \    testHelpers('d=', fj(d));\r

  \    return carteset(a, d);\r

  \  }\r

  }"
expand1_99: "function expand1_99(x) {\r

  \  if (isList(x)) {\r

  \  }\r

  \  if (isDict(x)) {\r

  \    if ('_set' in x) {\r

  \      return handleSet(x._set);\r

  \    } else if ('_tuple' in x) {\r

  \      return handleTuple(x._tuple);\r

  \    } else if ('type' in x) {\r

  \      return handleAction(x);\r

  \    } else { error('IMPOSSIBLE OBJECT', x); return null; }\r

  \  } else { error('IMPOSSIBLE TYPE', x); return null; }\r

  }"
expand99: "function expand99(e) {\r

  \  let res = [];\r

  \  e = expand1_99(e);\r

  \  for (const el of e) {\r

  \    if (isll(el)) el.map(x => res.push(x));\r

  \    else res.push(el);\r

  \  }\r

  \  return res;\r

  }"
expandBoard: "function expandBoard(board, rNew, cNew, iInsert) {\r

  \  let [boardArrOld, rOld, cOld] = [board.fields.map(x => isdef(x.item) ?
  x.item.index : null), board.rows, board.cols];\r

  \  let boardArrNew = new Array(rNew * cNew);\r

  \  for (let r = 0; r < rNew; r++) {\r

  \    for (let c = 0; c < cNew; c++) {\r

  \      let i = iFromRowCol(r, c, rNew, cNew);\r

  \      let x = (rOld != rNew) ? r : c;\r

  \      if (x < iInsert) {\r

  \        let iOld = iFromRowCol(r, c, rOld, cOld);\r

  \        boardArrNew[i] = boardArrOld[iOld];\r

  \      }\r

  \      else if (x == iInsert) boardArrNew[i] = null;\r

  \      else {\r

  \        let [ir, ic] = (rOld != rNew) ? [r - 1, c] : [r, c - 1];\r

  \        let iOld = iFromRowCol(ir, ic, rOld, cOld);\r

  \        boardArrNew[i] = boardArrOld[iOld];\r

  \      }\r

  \    }\r

  \  }\r

  \  return { rows: rNew, cols: cNew, boardArr: boardArrNew, extras: [] };\r

  }"
expandX: "function expandX(e) {\r

  \  console.log('e', e)\r

  \  let res = [];\r

  \  let e2 = expandX1(e);\r

  \  console.log('e2', e2)\r

  \  for (const el of e2) {\r

  \    if (isll(el)) el.map(x => res.push(x));\r

  \    else res.push(el);\r

  \  }\r

  \  return res;\r

  }"
expandX1: "function expandX1(x) {\r

  \  console.log('expand1', cnt, x); cnt += 1;\r

  \  if (is_Set(x) && x._set.length == 1) return x._set.map(el =>
  expandX1(el));\r

  \  if (isDict(x) || isActionElement(x) || isLiteral(x)) return [x];\r

  \  if (is_Tuple(x)) x = x._tuple;\r

  \  if (Array.isArray(x)) {\r

  \    if (isEmpty(x)) return [];\r

  \    let a = expandX1(firstElement(x));\r

  \    let b = x.slice(1);\r

  \    let c = expandX1(b);\r

  \    console.log(c);\r

  \    let d = extractActionLists(c);\r

  \    console.log('a=', fj(a));\r

  \    console.log('b=', fj(b));\r

  \    console.log('c=', fj(c));\r

  \    console.log('d=', fj(d));\r

  \    return flat(cartesi(a, d));\r

  \  }\r

  }"
explode: "function explode(deck, w, h) {\r

  \  deck.cards.forEach(function (card, i) {\r

  \    card.setSide('front')\r

  \    card.animateTo({\r

  \      delay: 1000 + i * 2,\r

  \      duration: 500,\r

  \      ease: 'quartOut',\r

  \      x: Math.random() * w - w / 2,\r

  \      y: Math.random() * h - h / 2\r

  \    })\r

  \  });\r

  }"
extendedObjectString: "function extendedObjectString(o, indent, simple, lstShow,
  lstOmit) {\r

  \  let s = ' '.repeat(indent) + (o.id ? o.id + ': ' : ' _ : ');\r

  \  for (const k in o) {\r

  \    if (k == 'id') continue;\r

  \    if (lstShow && lstShow.includes(k)\r

  \      || lstOmit && !lstOmit.includes(k)\r

  \      || simple && isSimple(o[k]) && !isComplexColor(o[k])) {\r

  \      if (isDict(o[k])) {\r

  \        s += '(' + extendedObjectString(o[k], indent, simple, lstShow,
  lstOmit) + ') ';\r

  \      } else s += k + ':' + o[k] + ' ';\r

  \    }\r

  \  }\r

  \  return s;\r

  }"
extendPath: "function extendPath(path, postfix) { return path + (endsWith(path,
  '.') ? '' : '.') + postfix; }"
extendRect: function extendRect(r4) { r4.l = r4.x; r4.t = r4.y; r4.r = r4.x +
  r4.w; r4.b = r4.t + r4.h; }
extendWidth: function extendWidth(w) { return replaceEvery(w, 'w', 2); }
extract_game_options: "function extract_game_options() {\r

  \  let opt = Session.game_options;\r

  \  return Session.game_options;\r

  }"
extract_polygon: "function extract_polygon(f) {\r

  \  var polygon = L.polygon(f.geometry.coordinates);\r

  \  if (f.geometry.type == 'MultiPolygon') {\r

  \    let max_area_polygon;\r

  \    let max_area = 0;\r

  \    for (poly in (f.geometry.coordinates)) {\r

  \      let polygon1 = turf.polygon((f.geometry.coordinates)[poly])\r

  \      area = turf.area(polygon1);\r

  \      if (area > max_area) {\r

  \        max_area = area\r

  \        max_area_polygon = polygon1;\r

  \      }\r

  \    }\r

  \    console.log('turf', turf)\r

  \    console.log('polymax', max_area_polygon)\r

  \    polygon = L.polygon(max_area_polygon.geometry.coordinates);\r

  \  }\r

  \  return polygon;\r

  }"
extractActionLists: "function extractActionLists(lst) {\r

  \  let res = [];\r

  \  for (const l of lst) {\r

  \    if (isListOfActionElements(l)) res.push(l);\r

  \    else if (isActionElement(l)) res.push([l]);\r

  \    else {\r

  \      let r2 = extractStringLists(l);\r

  \      r2.map(x => res.push(x));\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
extractActions: "function extractActions(lst) {\r

  \  let res = [];\r

  \  for (const l of lst) {\r

  \    if (isListOfActionElements(l)) res.push(l);\r

  \    else if (isActionElement(l)) res.push([l]);\r

  \    else {\r

  \      let r2 = extractStringLists(l);\r

  \      r2.map(x => res.push(x));\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
extractColorsFromCss: "function extractColorsFromCss() {\r

  \  let arr = collectPropFromCss('background-color');\r

  \  var di = {};\r

  \  for (const o of arr) {\r

  \    let sarr = splitAtAnyOf(o.class, ' .-:,');\r

  \    let sColor = null;\r

  \    for (const w of sarr) {\r

  \      if (['w3', 'text', 'hover', 'border'].includes(w)) continue;\r

  \      sColor = w;\r

  \      break;\r

  \    }\r

  \    if (sColor && o.color) {\r

  \      di[sColor] = o.color; //\"'\" + o.color + \"'\"; //'hallo';
  //o.color.toString();\r

  \    }\r

  \  }\r

  \  return di;\r

  }"
extractKeywords: "function extractKeywords(text) {\r

  \  let words = toWords(text, true);\r

  \  let res = [];\r

  \  for (const w of words) { if (isdef(CODE.all[w])) addIf(res, w); }\r

  \  return res;\r

  }"
extractPixel: "function extractPixel(str) {\r

  \  if (isNumber(str)) return str;\r

  \  else return firstNumber(str);\r

  }"
extractStringLists: "function extractStringLists(lst) {\r

  \  console.log(lst);\r

  \  let res = [];\r

  \  for (const l of lst) {\r

  \    if (isListOfLiterals(l)) res.push(l);\r

  \    else if (isLiteral(l)) res.push([l]);\r

  \    else {\r

  \      let r2 = extractStringLists(l);\r

  \      r2.map(x => res.push(x));\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
extractTuples: "function extractTuples(x) {\r

  \  if (isList(x))\r

  \    if (isListOfListOfActions(x)) return x;\r

  \  return isList(x) && x.length > 0 ? stripSet(x[0]) : x;\r

  }"
extractUniqueStrings: "function extractUniqueStrings(tupleList) {\r

  \  let idlist = [];\r

  \  tupleList.map(x => x.map(y => addIf_dep(y, idlist)));\r

  \  return idlist;\r

  }"
face_down: "function face_down(item, color, texture) {\r

  \  if (!item.faceUp) return;\r

  \  if (isdef(texture) || lookup(item, ['live', 'dCover'])) {\r

  \    face_down_alt(item, color, texture);\r

  \  } else {\r

  \    let svgCode = C52.card_2B;\r

  \    item.div.innerHTML = svgCode;\r

  \    if (nundef(color)) color = item.color;\r

  \    if (isdef(item.color))
  item.div.children[0].children[1].setAttribute('fill', item.color);\r

  \  }\r

  \  item.faceUp = false;\r

  }"
face_down_alt: "function face_down_alt(item, bg, texture_name) {\r

  \  let dCover = item.live.dCover;\r

  \  if (nundef(dCover)) {\r

  \    let d = iDiv(item);\r

  \    dCover = item.live.dCover = mDiv(d, { background: bg, rounding:
  mGetStyle(d, 'rounding'), position: 'absolute', width: '100%', height: '100%',
  left: 0, top: 0 });\r

  \    let t = get_texture(texture_name);\r

  \    dCover.style.backgroundImage = t;\r

  \    dCover.style.backgroundRepeat = 'repeat';\r

  \  } else mStyle(dCover, { display: 'block' });\r

  }"
face_up: "function face_up(item) {\r

  \  if (item.faceUp) return;\r

  \  if (lookup(item, ['live', 'dCover'])) mStyle(item.live.dCover, { display:
  'none' });\r

  \  else item.div.innerHTML = isdef(item.c52key) ? C52[item.c52key] :
  item.html;\r

  \  item.faceUp = true;\r

  }"
faChar: "function faChar(key) {\r

  \  return String.fromCharCode('0x' + faChars[key]); //'f520');\r

  }"
fadder: function fadder(f, g) { return x => f(x) - g(x); }
faicon_list: "async function faicon_list() {\r

  \  let txt = await route_path_text('../base/alibs/fa.min.css');\r

  \  txt = '.fa-0' + stringAfter(txt, '.fa-0');\r

  \  txt = stringBefore(txt, 'sr-only');\r

  \  let parts = txt.split(':before');\r

  \  console.log('parts', parts.length);\r

  \  let list = [];\r

  \  for (const p of parts) {\r

  \    let word = stringAfter(p, '.fa-').trim();\r

  \    list.push(word);\r

  \  }\r

  \  arrRemoveLast(list);\r

  \  list.sort();\r

  \  console.log('list', list);\r

  \  downloadJson({ l: list }, 'liste');\r

  }"
fail_yt: "async function fail_yt() {\r

  \  let url = `http://gdata.youtube.com/feeds/api/videos`; //blocked by
  CORS\r

  \  let result = await route_path_text(url);\r

  \  console.log('result', result);\r

  \  let res = `\r

  \    http://gdata.youtube.com/feeds/api/videos\r

  \    ?v=2\r

  \    &author=SesameStreet\r

  \    &q=rubber+ducky\r

  \    &orderby=viewCount\r

  \    &start-index=1\r

  \    &max-results=10\r

  \    &alt=json-in-script\r

  \    &callback=myCallbackFunction\r

  \    &prettyprint=true\r

  \  `;\r

  }"
failPictureGoal: "function failPictureGoal(withComment = false) {\r

  \  if (withComment && G.spokenFeedback) {\r

  \    const comments = (G.language == 'E' ? ['too bad'] : [\"aber geh'\"]);\r

  \    sayRandomVoice(chooseRandom(comments));\r

  \  }\r

  \  if (isdef(Selected) && isdef(Selected.feedbackUI)) {\r

  \    let uilist = isList(Selected.feedbackUI) ? Selected.feedbackUI :
  [Selected.feedbackUI];\r

  \    let sz = getRect(uilist[0]).h;\r

  \    for (const ui of uilist) {\r

  \      mpOver(markerFail(), ui, sz * (1 / 2), 'red', 'openMojiTextBlack');\r

  \    }\r

  \  }\r

  }"
failSomePictures: "function failSomePictures(withComment = false) {\r

  \  if (withComment && G.spokenFeedback) {\r

  \    const comments = (G.language == 'E' ? ['too bad'] : [\"aber geh'\"]);\r

  \    sayRandomVoice(chooseRandom(comments));\r

  \  }\r

  \  for (const p of Pictures) {\r

  \    let ui = iDiv(p);\r

  \    let sz = getRect(ui).h;\r

  \    if (p.isCorrect == false) mpOver(markerFail(), ui, sz * (1 / 2), 'red',
  'openMojiTextBlack');\r

  \    else mpOver(markerSuccess(), ui, sz * (4 / 5), 'limegreen',
  'segoeBlack');\r

  \  }\r

  }"
failThumbsDown: "function failThumbsDown(withComment = false) {\r

  \  if (withComment && G.spokenFeedback) {\r

  \    const comments = (G.language == 'E' ? ['too bad'] : [\"aber geh'\"]);\r

  \    sayRandomVoice(chooseRandom(comments));\r

  \  }\r

  \  let p1 = firstCond(Pictures, x => x.key == 'thumbs down');\r

  \  iDiv(p1).style.opacity = 1;\r

  \  let p2 = firstCond(Pictures, x => x.key == 'thumbs up');\r

  \  iDiv(p2).style.display = 'none';\r

  }"
failThumbsDownPlus: "function failThumbsDownPlus(withComment = false) {\r

  \  if (withComment && G.spokenFeedback) {\r

  \    const comments = (G.language == 'E' ? ['too bad'] : [\"aber geh'\"]);\r

  \    sayRandomVoice(chooseRandom(comments));\r

  \  }\r

  \  let p1 = firstCond(Pictures, x => x.key == 'thumbs down');\r

  \  iDiv(p1).style.opacity = 1;\r

  \  let p2 = firstCond(Pictures, x => x.key == 'thumbs up');\r

  \  iDiv(p2).style.display = 'none';\r

  \  if (isdef(Selected) && isdef(Selected.feedbackUI)) {\r

  \    let uilist = isList(Selected.feedbackUI) ? Selected.feedbackUI :
  [Selected.feedbackUI];\r

  \    let sz = getRect(uilist[0]).h;\r

  \    for (const ui of uilist) mpOver(markerFail(), ui, sz * (1 / 2), 'red',
  'openMojiTextBlack');\r

  \  }\r

  }"
fakeInitSocket: function fakeInitSocket() { ClientId = '12345'; fakeLogin(Username); }
fakeLogin: "async function fakeLogin(username) {\r

  \  DB = await route_path_yaml_dict('./data.yaml');\r

  \  PerlenDict = await route_path_yaml_dict('./perlenDict.yaml');\r

  \  initSocket();\r

  \  setUserData(username);\r

  \  enterLobby();\r

  }"
fcomposer: function fcomposer(f, g) { return x => f(g(x)); }
fderivative: "function fderivative(exp) {\r

  \  return nerdamer(`diff(${exp},x)`).buildFunction();\r

  }"
feedback: function feedback() { }
feedback_disable_ui: "function feedback_disable_ui() {\r

  \  for (const k in DA.bars) {\r

  \    let bar = DA.bars[k];\r

  \    let b = bar.cont.getElementsByTagName('button')[0];\r

  \    b.disabled = true;\r

  \  }\r

  }"
feedback_present: "function feedback_present() {\r

  \  dTable = mBy('dTable'); mStyle(dTable, { padding: 20 });\r

  \  DA.no_shield = true;\r

  \  feedback_stats(dTable);\r

  \  let dgreen = get_plus_progressbar(dTable, 'green');\r

  \  mLinebreak(dTable);\r

  \  let dred = get_plus_progressbar(dTable, 'red');\r

  \  mLinebreak(dTable);\r

  \  DA.bars = {\r

  \    green: dgreen,\r

  \    red: dred,\r

  \  };\r

  \  set_bar('green'); set_bar('red');\r

  \  if (Z.role == 'spectator') {\r

  \    feedback_disable_ui();\r

  \    mButton('JOIN AS PLAYER', onclick_join_as_player, dTable, { h: 40, w:
  200 });\r

  \  } else if (i_am_host()) {\r

  \    let [uname, fen, options, uplayer] = [Z.uname, Z.fen, Z.options,
  Z.uplayer];\r

  \    mButton('reset', onclick_reset_progressbars, dTable, { h: 30, w: 100
  });\r

  \    feedback_disable_ui();\r

  \    let playerlist = Z.playerlist;\r

  \    let pldatalist = Z.playerdata.map(x => x.name);\r

  \    console.log('playerlist', playerlist, 'pldatalist', pldatalist);\r

  \    for (const plname of pldatalist) {\r

  \      if (!playerlist.includes(plname)) {\r

  \        console.log('plname', plname, 'not in playerlist', playerlist);\r

  \        fen.players[plname] = { score: 0, name: plname, color:
  get_user_color(plname) };\r

  \      }\r

  \    }\r

  \    if (playerlist.length != pldatalist.length) {\r

  \      phpPost({ friendly: Z.friendly, uname: Z.uplayer, players:
  pldatalist, fen: fen }, 'add_players');\r

  \    }\r

  \    fen.decrement = 0;\r

  \    start_downgrade_ticker();\r

  \  } else {\r

  \    assertion(Z.playerlist.includes(Z.uname), `${Z.uname} not in playerlist
  ${Z.playerlist} and not spectator`);\r

  \  }\r

  }"
feedback_stats: "function feedback_stats(d) {\r

  \  let players = Z.fen.players;\r

  \  let d1 = mDiv(d, { display: 'flex', 'justify-content': 'center',
  'align-items': 'space-evenly' });\r

  \  for (const plname in players) {\r

  \    let pl = players[plname];\r

  \    let sz = 50;\r

  \    let bcolor = 'silver';\r

  \    let border = pl.playmode == 'bot' ? `double 5px ${bcolor}` : `solid 5px
  ${bcolor}`;\r

  \    let rounding = pl.playmode == 'bot' ? '0px' : '50%';\r

  \    let d2 = mDiv(d1, { margin: 4, align: 'center' }, null, `<img
  src='../base/assets/images/${plname}.jpg'
  style=\"border-radius:${rounding};display:block;border:${border};box-sizing:b\
  order-box\" class='img_person' width=${sz} height=${sz}>`);\r

  \  }\r

  }"
feedback_update_fen: "function feedback_update_fen() {\r

  \  let fen = Z.fen;\r

  \  fen.barvalues = {};\r

  \  for (const pldata of Z.playerdata) {\r

  \    if (isdef(pldata.state)) {\r

  \      for (const color in pldata.state) {\r

  \        let value = pldata.state[color];\r

  \        if (isdef(fen.barvalues[color])) {\r

  \          fen.barvalues[color] += value;\r

  \        } else {\r

  \          fen.barvalues[color] = value;\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  for (const k in fen.barvalues) {\r

  \    let val = fen.barvalues[k] - fen.decrement;\r

  \    if (val < 0) val = 0;\r

  \    fen.barvalues[k] = val;\r

  \  }\r

  }"
felix_sends_timed_move_at_mimi_slot: "function
  felix_sends_timed_move_at_mimi_slot() {\r

  \  let [fen, pl] = [Z.fen, Z.pl];\r

  \  let slot = fen.players.mimi.slot;\r

  \  slot = busy_wait_until_slot(slot);\r

  }"
fen_from_info: "function fen_from_info(info) {\r

  \  let all_attrs = gSet_attributes();\r

  \  let keys = get_keys(all_attrs);\r

  \  let fen = '';\r

  \  for (const prop of keys) {\r

  \    let val = info[prop];\r

  \    let i = all_attrs[prop].indexOf(val);\r

  \    fen += '' + i;\r

  \  }\r

  \  return fen;\r

  }"
fentest_wise: "function fentest_wise() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('wise', playernames.map(x => ({ name: x, playmode: 'human' })),
  { mode: 'hotseat' });\r

  }"
fentest0_min_items: "function fentest0_min_items() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  let pl = fen.players[uplayer];\r

  \  [pl.hand, pl.stall, Z.stage, Z.phase] = [['JSn', '2Hn', '3Hn', '3Dn',
  '3Cn', '4Hn'], ['QSn', 'KHn'], 5, 'king'];\r

  \  ensure_actions(fen);\r

  \  take_turn_fen();\r

  }"
fentest1_auction: "function fentest1_auction() {\r

  \  Z.stage = 12;\r

  \  Z.phase = 'jack';\r

  \  ensure_market(Z.fen, 3);\r

  \  take_turn_fen();\r

  }"
fentest10_ferro_end_of_round_goals: "function
  fentest10_ferro_end_of_round_goals() {\r

  \  let [game, A, fen, uplayer, plorder] = [Z.game, Z.A, Z.fen, Z.uplayer,
  Z.plorder];\r

  \  let pl = fen.players[plorder[0]];\r

  \  pl.hand = ['3Hn', '3Hn', '3Hn', '3Hn'];\r

  \  pl = fen.players[plorder[1]];\r

  \  pl.journeys = [['3Cn', '3Hn', '3Hn', '3Hn']];\r

  \  pl.goals['4'] = true;\r

  \  pl.hand = ['3Hn', 'KSn'];\r

  \  take_turn_fen();\r

  }"
fentest2_build: "function fentest2_build() {\r

  \  Z.stage = 5;\r

  \  Z.phase = 'king';\r

  \  ensure_stall(Z.fen, Z.uplayer, 4);\r

  \  ensure_actions(Z.fen);\r

  \  take_turn_fen();\r

  }"
fentest4_visit: "function fentest4_visit() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  fen.actionsCompleted = [];\r

  \  for (const plname of fen.plorder) {\r

  \    add_a_schwein(fen, plname);\r

  \  }\r

  \  Z.stage = 5;\r

  \  Z.phase = 'queen';\r

  \  take_turn_fen();\r

  }"
fentest5_market_opens: "function fentest5_market_opens() {\r

  \  Z.stage = 3;\r

  \  Z.phase = 'king';\r

  \  take_turn_fen();\r

  }"
fentest6_endgame: "function fentest6_endgame() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  fen.actionsCompleted = [];\r

  \  for (const plname of fen.plorder) {\r

  \    add_a_correct_building_to(fen, plname, 'chateau');\r

  \    add_a_correct_building_to(fen, plname, rChoose(['farm', 'estate',
  'chateau']));\r

  \    if (coin()) add_a_correct_building_to(fen, plname, rChoose(['farm',
  'estate', 'chateau']));\r

  \    fen.actionsCompleted.push(plname);\r

  \  }\r

  \  fen.pl_gameover = [];\r

  \  for (const plname of fen.plorder) {\r

  \    let bcorrect =
  ari_get_correct_buildings(fen.players[plname].buildings);\r

  \    let can_end = ari_check_end_condition(bcorrect);\r

  \    if (can_end) fen.pl_gameover.push(plname);\r

  \  }\r

  \  if (isEmpty(fen.pl_gameover)) { console.log('try again!!!!!!!!!!!');
  return; }\r

  \  Z.stage = 10;\r

  \  Z.phase = 'king';\r

  \  take_turn_fen(true);\r

  }"
fentest7_gameover: "function fentest7_gameover() {\r

  \  let [game, A, fen, uplayer] = [Z.game, Z.A, Z.fen, Z.uplayer];\r

  \  if (game == 'aristo') fentest6_endgame();\r

  \  else if (game == 'spotit') {\r

  \    for (const plname in fen.players) { fen.players[plname].score =
  Z.options.winning_score - 1; }\r

  \    take_turn_fen();\r

  \  } else if (game == 'bluff') {\r

  \    let pl = fen.players[uplayer];\r

  \    while (pl.handsize < Z.options.max_handsize) inc_handsize(fen,
  uplayer);\r

  \    deck_add(fen.deck, 1, pl.hand);\r

  \    take_turn_fen();\r

  \  }\r

  }"
fentest8_ferro_transation_error: "function fentest8_ferro_transation_error() {\r

  \  let [game, A, fen, uplayer] = [Z.game, Z.A, Z.fen, 'mimi'];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.goals['3'] = true;\r

  \  pl.hand.push('3Hn', '3Hn', '3Hn');\r

  \  Z.turn = ['mimi'];\r

  \  take_turn_fen();\r

  }"
fentest9_ferro_transation_error: "function fentest9_ferro_transation_error() {\r

  \  let [game, A, fen, uplayer] = [Z.game, Z.A, Z.fen, 'mimi'];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.goals['3'] = true;\r

  \  pl.goals['4'] = true;\r

  \  pl.goals['5'] = true;\r

  \  pl.hand = ['3Hn', '3Hn', '3Hn', '2Cn', '2Cn', '2Cn', '*Cn', 'ACn',
  '*Cn'];\r

  \  Z.turn = ['mimi'];\r

  \  let other = firstCond(Z.playerlist, x => x != uplayer);\r

  \  pl = fen.players[other];\r

  \  pl.goals['4'] = true;\r

  \  pl.journeys = [['3Hn', '3Hn', '3Hn'], ['AHn', 'ACn', 'ACn', '*Cn']];\r

  \  take_turn_fen();\r

  }"
ferro: "function ferro() {\r

  \  const rankstr = '23456789TJQKA*';\r

  \  function setup(players, options) {\r

  \    let fen = { players: {}, plorder: jsCopy(players), history: [] };\r

  \    options.jokers_per_group = 1;\r

  \    fen.allGoals = ['7R', '55', '5', '44', '4', '33', '3'];\r

  \    fen.availableGoals = options.maxrounds == 1 ? [rChoose(fen.allGoals)] :
  options.maxrounds < 7 ? rChoose(fen.allGoals, options.maxrounds) :
  fen.allGoals;\r

  \    fen.availableGoals.sort((a, b) => fen.allGoals.indexOf(a) -
  fen.allGoals.indexOf(b));\r

  \    fen.roundGoals = arrReverse(fen.availableGoals);\r

  \    let n = players.length;\r

  \    let num_decks = fen.num_decks = 2 + (n >= 9 ? 2 : n >= 7 ? 1 : 0);\r

  \    let deck = fen.deck = create_fen_deck('n', num_decks, 4 * num_decks);\r

  \    let deck_discard = fen.deck_discard = [];\r

  \    shuffle(deck);\r

  \    if (DA.TESTING != true) { shuffle(fen.plorder); shuffle(fen.plorder);
  }\r

  \    let starter = fen.plorder[0];\r

  \    let handsize = valf(Number(options.handsize), 11);\r

  \    for (const plname of players) {\r

  \      let pl = fen.players[plname] = {\r

  \        hand: deck_deal(deck, plname == starter ? handsize + 1 :
  handsize),\r

  \        journeys: [],\r

  \        roundgoal: false,\r

  \        coins: options.coins,\r

  \        vps: 0,\r

  \        score: 0,\r

  \        name: plname,\r

  \        color: get_user_color(plname),\r

  \      };\r

  \      pl.goals = {};\r

  \      for (const g of fen.availableGoals) { pl.goals[g] = 0; }\r

  \    }\r

  \    fen.phase = '';\r

  \    [fen.stage, fen.turn] = ['card_selection', [starter]];\r

  \    return fen;\r

  \  }\r

  \  function activate_ui() { ferro_activate_ui(); }\r

  \  function check_gameover() { return isdef(Z.fen.winners) ? Z.fen.winners :
  false; }\r

  \  function clear_ack() {\r

  \    if (Z.stage == 'round_end') { start_new_round_ferro(); take_turn_fen();
  }\r

  \    else if (Z.stage != 'card_selection') {\r

  \      for (const plname of Z.fen.canbuy) {\r

  \        let pldata = firstCond(Z.playerdata, x => x.name == plname);\r

  \        if (isdef(pldata) && lookup(pldata, ['state', 'buy']) == true) {\r

  \          Z.fen.buyer = plname;\r

  \          break;\r

  \        }\r

  \      }\r

  \      Z.stage = 'can_resolve';\r

  \      ferro_change_to_card_selection();\r

  \    }\r

  \  }\r

  \  function present(dParent) { ferro_present(dParent); }\r

  \  function stats(dParent) { ferro_stats(dParent); }\r

  \  function state_info(dParent) { ferro_state(dParent); }\r

  \  return { rankstr, setup, activate_ui, check_gameover, clear_ack, present,
  state_info, stats };\r

  }"
ferro_ack_uplayer: function ferro_ack_uplayer() { if (Z.mode == 'multi') {
  ferro_ack_uplayer_multi(); } else { ferro_ack_uplayer_hotseat(); } }
ferro_ack_uplayer_hotseat: "function ferro_ack_uplayer_hotseat() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  let buy = !isEmpty(A.selected) && A.selected[0] == 0;\r

  \  if (buy || uplayer == fen.lastplayer) { fen.buyer = uplayer;[Z.turn,
  Z.stage] = [[get_multi_trigger()], 'can_resolve']; }\r

  \  else { Z.turn = [get_next_in_list(uplayer, fen.canbuy)]; }\r

  \  take_turn_fen();\r

  }"
ferro_ack_uplayer_multi: "function ferro_ack_uplayer_multi() {\r

  \  let [A, uplayer] = [Z.A, Z.uplayer];\r

  \  stopPolling();\r

  \  let o_pldata = Z.playerdata.find(x => x.name == uplayer);\r

  \  Z.state = o_pldata.state = { buy: !isEmpty(A.selected) && A.selected[0]
  == 0 };\r

  \  let can_resolve = ferro_check_resolve();\r

  \  if (can_resolve) {\r

  \    assertion(Z.stage == 'buy_or_pass', 'stage is not buy_or_pass when
  checking can_resolve!');\r

  \    Z.stage = 'can_resolve';\r

  \    [Z.turn, Z.stage] = [[get_multi_trigger()], 'can_resolve'];\r

  \    take_turn_fen_write();\r

  \  } else { take_turn_multi(); }\r

  }"
ferro_activate_ui: function ferro_activate_ui() { ferro_pre_action(); }
ferro_change_to_ack_round: "function ferro_change_to_ack_round() {\r

  \  let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen,
  Z.uplayer];\r

  \  let nextplayer = get_next_player(Z, uplayer);\r

  \  let newturn = jsCopy(plorder); while (newturn[0] != nextplayer) { newturn
  = arrCycle(newturn, 1); }\r

  \  let buyerlist = fen.canbuy = [];\r

  \  for (const plname of newturn) {\r

  \    let pl = fen.players[plname];\r

  \    if (plname == uplayer) { pl.buy = false; continue; }\r

  \    else if (pl.coins > 0) { pl.buy = false; buyerlist.push(plname); }\r

  \  }\r

  \  start_simple_ack_round('buy_or_pass', buyerlist, nextplayer,
  'ferro_change_to_turn_round');\r

  }"
ferro_change_to_buy_pass: "function ferro_change_to_buy_pass() {\r

  \  let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen,
  Z.uplayer];\r

  \  let nextplayer = get_next_player(Z, uplayer);\r

  \  let newturn = jsCopy(plorder); while (newturn[0] != nextplayer) { newturn
  = arrCycle(newturn, 1); }\r

  \  fen.canbuy = newturn.filter(x => x != uplayer && fen.players[x].coins >
  0);\r

  \  fen.trigger = uplayer;\r

  \  fen.buyer = null;\r

  \  fen.nextturn = [nextplayer];\r

  \  if (isEmpty(fen.canbuy)) { Z.stage = 'can_resolve';
  ferro_change_to_card_selection(); return; }\r

  \  else if (Z.mode == 'multi') { [Z.stage, Z.turn] = ['buy_or_pass',
  fen.canbuy]; fen.keeppolling = true; take_turn_fen_clear(); }\r

  \  else {\r

  \    fen.canbuy.map(x => fen.players[x].buy = 'unset');\r

  \    fen.lastplayer = arrLast(fen.canbuy);\r

  \    [Z.stage, Z.turn] = ['buy_or_pass', [fen.canbuy[0]]];\r

  \    take_turn_fen();\r

  \  }\r

  }"
ferro_change_to_card_selection: "function ferro_change_to_card_selection() {\r

  \  let [fen, stage] = [Z.fen, Z.stage];\r

  \  assertion(stage != 'card_selection', \"ALREADY IN TURN
  ROUND!!!!!!!!!!!!!!!!!!!!!!\");\r

  \  assertion(stage == 'can_resolve', \"change to card_selection: NOT IN
  can_resolve stage!!!!!!!!!!!!!!!!!!!!!!\");\r

  \  assertion(Z.uplayer == 'mimi' || Z.uplayer == fen.trigger, \"mixup
  uplayer in change_to_card_selection!!!!!!!!!!!!!!!!!!!!!!\");\r

  \  if (isdef(fen.buyer)) {\r

  \    let plname = fen.buyer;\r

  \    let pl = fen.players[plname];\r

  \    let card = fen.deck_discard.shift();\r

  \    pl.hand.push(card);\r

  \    lookupAddToList(pl, ['newcards'], card);\r

  \    deck_deal_safe_ferro(fen, plname, 1);\r

  \    pl.coins -= 1;\r

  \    ari_history_list([`${plname} bought ${card}`], 'buy');\r

  \  }\r

  \  let nextplayer = fen.nextturn[0];\r

  \  deck_deal_safe_ferro(fen, nextplayer, 1);\r

  \  Z.turn = fen.nextturn;\r

  \  Z.stage = 'card_selection';\r

  \  for (const k of ['buyer', 'canbuy', 'nextturn', 'trigger', 'lastplayer'])
  delete fen[k];\r

  \  delete fen.keeppolling;\r

  \  clear_transaction();\r

  \  take_turn_fen();\r

  }"
ferro_change_to_turn_round: "function ferro_change_to_turn_round() {\r

  \  let [z, A, fen, stage, uplayer, ui] = [Z, Z.A, Z.fen, Z.stage, Z.uplayer,
  UI];\r

  \  assertion(stage == 'buy_or_pass', \"ALREADY IN TURN
  ROUND!!!!!!!!!!!!!!!!!!!!!!\");\r

  \  for (const plname of fen.canbuy) {\r

  \    let pl = fen.players[plname];\r

  \    if (pl.buy == true) {\r

  \      let card = fen.deck_discard.shift();\r

  \      pl.hand.push(card);\r

  \      deck_deal_safe_ferro(fen, plname, 1);\r

  \      pl.coins -= 1;\r

  \      ari_history_list([`${plname} bought ${card}`], 'buy');\r

  \      break;\r

  \    }\r

  \  }\r

  \  deck_deal_safe_ferro(fen, fen.nextplayer, 1);\r

  \  Z.turn = fen.turn_after_ack;\r

  \  Z.stage = 'card_selection';\r

  \  clear_ack_variables();\r

  \  for (const k of ['canbuy']) delete fen[k];\r

  \  for (const plname of fen.plorder) { delete fen.players[plname].buy; }\r

  \  clear_transaction();\r

  }"
ferro_check_resolve: "function ferro_check_resolve() {\r

  \  let [pldata, stage, A, fen, plorder, uplayer, deck, turn] =
  [Z.playerdata, Z.stage, Z.A, Z.fen, Z.plorder, Z.uplayer, Z.deck, Z.turn];\r

  \  let pl = fen.players[uplayer];\r

  \  assertion(stage == 'buy_or_pass', \"check_resolve NOT IN buy_or_pass
  stage!!!!!!!!!\");\r

  \  assertion(isdef(pldata), \"no playerdata in buy_or_pass
  stage!!!!!!!!!!!!!!!!!!!!!!!\");\r

  \  let done = true;\r

  \  for (const plname of turn) {\r

  \    let data = firstCond(pldata, x => x.name == plname);\r

  \    assertion(isdef(data), 'no pldata for', plname);\r

  \    let state = data.state;\r

  \    if (isEmpty(state)) done = false;\r

  \    else if (state.buy == true) fen.buyer = plname;\r

  \    else continue;\r

  \    break;\r

  \  }\r

  \  return done;\r

  }"
ferro_get_card: "function ferro_get_card(ckey, h, w, ov = .25) {\r

  \  let type = ckey[2];\r

  \  let info = ckey[0] == '*' ? get_joker_info() :
  jsCopy(C52Cards[ckey.substring(0, 2)]);\r

  \  info.key = ckey;\r

  \  info.cardtype = ckey[2];\r

  \  let [r, s] = [info.rank, info.suit];\r

  \  info.val = r == '*' ? 50 : r == 'A' ? 20 : 'TJQK'.includes(r) ? 10 :
  Number(r);\r

  \  info.color = RED;\r

  \  info.sz = info.h = valf(h, Config.ui.card.h);\r

  \  info.w = valf(w, info.sz * .7);\r

  \  info.irank = '23456789TJQKA*'.indexOf(r);\r

  \  info.isuit = 'SHCDJ'.indexOf(s);\r

  \  info.isort = info.isuit * 14 + info.irank;\r

  \  let card = cardFromInfo(info, h, w, ov);\r

  \  return card;\r

  }"
ferro_is_set: "function ferro_is_set(cards, max_jollies_allowed = 1, seqlen = 7,
  group_same_suit_allowed = true) {\r

  \  if (cards.length < 3) return false;\r

  \  let num_jollies_in_cards = cards.filter(x => is_joker(x)).length;\r

  \  if (num_jollies_in_cards > max_jollies_allowed) return false;\r

  \  cards = sortCardItemsByRank(cards.map(x => x), rankstr =
  '23456789TJQKA*');\r

  \  let rank = cards[0].rank;\r

  \  let isgroup = cards.every(x => x.rank == rank || is_joker(x));\r

  \  let suits = cards.filter(x => !is_joker(x)).map(x => x.suit);\r

  \  let num_duplicate_suits = suits.filter(x => suits.filter(y => y ==
  x).length > 1).length;\r

  \  if (isgroup && !group_same_suit_allowed && num_duplicate_suits > 0)
  return false;\r

  \  else if (isgroup) return cards.map(x => x.key);\r

  \  let suit = cards[0].suit;\r

  \  if (!cards.every(x => is_jolly(x.key) || x.suit == suit)) return false;\r

  \  let keys = cards.map(x => x.key);\r

  \  if (keys.length != new Set(keys).size) return false;\r

  \  let at_most_jollies = Math.min(num_jollies_in_cards,
  max_jollies_allowed);\r

  \  let num_jolly = sortCardItemsToSequence(cards, rankstr = '23456789TJQKA',
  at_most_jollies);\r

  \  let cond1 = num_jolly <= at_most_jollies;\r

  \  let cond2 = cards.length >= seqlen;\r

  \  if (cond1 && cond2) return cards.map(x => x.key); else return false;\r

  }"
ferro_pre_action: "function ferro_pre_action() {\r

  \  let [stage, A, fen, plorder, uplayer, deck] = [Z.stage, Z.A, Z.fen,
  Z.plorder, Z.uplayer, Z.deck];\r

  \  switch (stage) {\r

  \    case 'can_resolve': if (Z.options.auto_weiter)
  ferro_change_to_card_selection(); else {
  select_add_items(ui_get_string_items(['weiter']),
  ferro_change_to_card_selection, 'may click to continue', 1, 1, Z.mode ==
  'multi'); select_timer(2000, ferro_change_to_card_selection); } break;\r

  \    case 'buy_or_pass': if (!is_playerdata_set(uplayer)) {
  select_add_items(ui_get_buy_or_pass_items(), ferro_ack_uplayer, 'may click
  discard pile to buy or pass', 1, 1); if (uplayer != 'nasi')
  select_timer(Z.options.thinking_time * 1000, ferro_ack_uplayer); } break;\r

  \    case 'card_selection': select_add_items(ui_get_ferro_items(uplayer),
  fp_card_selection, 'must select one or more cards', 1, 100); break;\r

  \    default: console.log('stage is', stage); break;\r

  \  }\r

  }"
ferro_present: "function ferro_present(dParent) {\r

  \  if (DA.simulate == true) show('bRestartMove'); else
  hide('bRestartMove');\r

  \  let [fen, ui, uplayer, stage, pl] = [Z.fen, UI, Z.uplayer, Z.stage,
  Z.pl];\r

  \  let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent);\r

  \  ferro_stats(dRechts);\r

  \  show_history(fen, dRechts);\r

  \  let deck = ui.deck = ui_type_deck(fen.deck, dOpenTable, { maleft: 12 },
  'deck', 'deck', ferro_get_card);\r

  \  let deck_discard = ui.deck_discard = ui_type_deck(fen.deck_discard,
  dOpenTable, { maleft: 12 }, 'deck_discard', '', ferro_get_card);\r

  \  if (!isEmpty(deck_discard.items)) face_up(deck_discard.get_topcard());\r

  \  order = get_present_order();\r

  \  for (const plname of order) {\r

  \    let pl = fen.players[plname];\r

  \    let playerstyles = { w: '100%', bg: '#ffffff80', fg: 'black', padding:
  4, margin: 4, rounding: 10, border: `2px ${get_user_color(plname)} solid` };\r

  \    let d = mDiv(dMiddle, playerstyles, null, get_user_pic_html(plname,
  25));\r

  \    mFlexWrap(d);\r

  \    mLinebreak(d, 10);\r

  \    let hidden = compute_hidden(plname);\r

  \    ferro_present_player(plname, d, hidden);\r

  \  }\r

  \  Z.isWaiting = false;\r

  \  if (Z.stage == 'round_end') {\r

  \    show_waiting_for_ack_message();\r

  \    if (Z.role == 'active' || i_am_host()) {\r

  \      show('bClearAck');\r

  \    }\r

  \  } else if (Z.stage == 'buy_or_pass' && uplayer == fen.trigger &&
  ferro_check_resolve()) {\r

  \    assertion(Z.stage == 'buy_or_pass', 'stage is not buy_or_pass when
  checking can_resolve!');\r

  \    Z.stage = 'can_resolve';\r

  \    [Z.turn, Z.stage] = [[get_multi_trigger()], 'can_resolve'];\r

  \    take_turn_fen(); return;\r

  \  } else if (Z.stage == 'buy_or_pass' && (Z.role != 'active' ||
  is_playerdata_set(uplayer))) {\r

  \    assertion(isdef(Z.playerdata), 'playerdata is not defined in
  buy_or_pass (present ferro)');\r

  \    let pl_not_done = Z.playerdata.filter(x => Z.turn.includes(x.name) &&
  isEmpty(x.state)).map(x => x.name);\r

  \    show_waiting_message(`waiting for possible buy decision...`);\r

  \    Z.isWaiting = true;\r

  \  }\r

  \  show_handsorting_buttons_for(Z.mode == 'hotseat' ? Z.uplayer : Z.uname, {
  bottom: -2 });\r

  \  new_cards_animation();\r

  }"
ferro_present_new: "function ferro_present_new(z, dParent, uplayer) {\r

  \  let [fen, ui, stage] = [z.fen, UI, z.stage];\r

  \  let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent);\r

  \  ferro_stats_new(z, dRechts);\r

  \  show_history(fen, dRechts);\r

  \  let deck = ui.deck = ui_type_deck(fen.deck, dOpenTable, { maleft: 12 },
  'deck', 'deck', ferro_get_card);\r

  \  let deck_discard = ui.deck_discard = ui_type_deck(fen.deck_discard,
  dOpenTable, { maleft: 12 }, 'deck_discard', '', ferro_get_card);\r

  \  if (!isEmpty(deck_discard.items)) face_up(deck_discard.get_topcard());\r

  \  let uname_plays = fen.plorder.includes(Z.uname);\r

  \  let show_first = uname_plays && Z.mode == 'multi' ? Z.uname : uplayer;\r

  \  order = arrCycle(fen.plorder, fen.plorder.indexOf(show_first));\r

  \  for (const plname of order) {\r

  \    let pl = fen.players[plname];\r

  \    let playerstyles = { w: '100%', bg: '#ffffff80', fg: 'black', padding:
  4, margin: 4, rounding: 10, border: `2px ${get_user_color(plname)} solid` };\r

  \    let d = mDiv(dMiddle, playerstyles, null, get_user_pic_html(plname,
  25));\r

  \    mFlexWrap(d);\r

  \    mLinebreak(d, 10);\r

  \    let hidden = compute_hidden(plname);\r

  \    ferro_present_player_new(z, plname, d, hidden);\r

  \  }\r

  }"
ferro_present_player: "function ferro_present_player(plname, d, ishidden =
  false) {\r

  \  let fen = Z.fen;\r

  \  let pl = fen.players[plname];\r

  \  let ui = UI.players[plname] = { div: d };\r

  \  Config.ui.card.h = ishidden ? 100 : 150;\r

  \  Config.ui.container.h = Config.ui.card.h + 30;\r

  \  if (!ishidden) pl.hand = correct_handsorting(pl.hand, plname);\r

  \  let hand = ui.hand = ui_type_hand(pl.hand, d, {},
  `players.${plname}.hand`, 'hand', ferro_get_card);\r

  \  if (ishidden) { hand.items.map(x => face_down(x)); }\r

  \  ui.journeys = [];\r

  \  let i = 0;\r

  \  for (const j of pl.journeys) {\r

  \    let jui = ui_type_lead_hand(j, d, { maleft: 12, h: 130 },
  `players.${plname}.journeys.${i}`, '', ferro_get_card);\r

  \    i += 1;\r

  \    ui.journeys.push(jui);\r

  \  }\r

  }"
ferro_present_player_new: "function ferro_present_player_new(g, plname, d,
  ishidden = false) {\r

  \  let fen = g.fen;\r

  \  let pl = fen.players[plname];\r

  \  let ui = UI.players[plname] = { div: d };\r

  \  Config.ui.card.h = ishidden ? 100 : 150;\r

  \  Config.ui.container.h = Config.ui.card.h + 30;\r

  \  if (isdef(pl.handsorting)) {\r

  \    let bysuit = pl.handsorting.by == 'suit';\r

  \    let [arr1, arr2] = arrSplitAtIndex(pl.hand, pl.handsorting.n - 1);\r

  \    pl.hand = sort_cards(arr1, bysuit, 'CDSH', true,
  '23456789TJQKA*').concat(arr2);\r

  \  }\r

  \  let hand = ui.hand = ui_type_hand(pl.hand, d, {},
  `players.${plname}.hand`, 'hand', ferro_get_card);\r

  \  if (ishidden) { hand.items.map(x => face_down(x)); }\r

  \  else {\r

  \    ensure_buttons_visible_for(Z.mode == 'hotseat' ? Z.uplayer :
  Z.uname);\r

  \  }\r

  \  ui.journeys = [];\r

  \  let i = 0;\r

  \  for (const j of pl.journeys) {\r

  \    let jui = ui_type_lead_hand(j, d, { maleft: 12, h: 130 },
  `players.${plname}.journeys.${i}`, '', ferro_get_card);\r

  \    i += 1;\r

  \    ui.journeys.push(jui);\r

  \  }\r

  }"
ferro_process_discard: "function ferro_process_discard() {\r

  \  let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen,
  Z.uplayer];\r

  \  let pl = fen.players[uplayer];\r

  \  if (!isEmpty(pl.journeys) && !pl.roundgoal) {\r

  \    let goal = is_fixed_goal() ? get_round_goal() :
  calc_ferro_highest_goal_achieved(pl);\r

  \    pl.roundgoal = goal;\r

  \    pl.goals[goal] = true;\r

  \    ari_history_list([`${pl.name} achieved goal ${pl.roundgoal}`],
  'achieve');\r

  \  }\r

  \  let c = A.selectedCards[0].key;\r

  \  elem_from_to_top(c, fen.players[uplayer].hand, fen.deck_discard);\r

  \  ari_history_list([`${uplayer} discards ${c}`], 'discard');\r

  \  if (fen.players[uplayer].hand.length == 0) { end_of_round_ferro(); } else
  ferro_change_to_buy_pass();\r

  }"
ferro_process_jolly: "function ferro_process_jolly(key, j) {\r

  \  let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen,
  Z.uplayer];\r

  \  let a = key;\r

  \  let b = j.find(x => x[0] == '*');\r

  \  arrReplace1(fen.players[uplayer].hand, a, b);\r

  \  replace_jolly(key, j);\r

  \  ari_history_list([`${uplayer} replaces for jolly`], 'jolly');\r

  \  Z.stage = 'card_selection';\r

  }"
ferro_process_set: "function ferro_process_set(keys) {\r

  \  let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A,
  Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  if (is_group(keys)) {\r

  \    keys = sort_cards(keys, true, 'CDSH', true, '23456789TJQKA*');\r

  \  }\r

  \  let j = [];\r

  \  keys.map(x => elem_from_to(x, fen.players[uplayer].hand, j));\r

  \  fen.players[uplayer].journeys.push(j);\r

  \  ari_history_list([`${uplayer} reveals ${j.join(', ')}`], 'auflegen');\r

  \  Z.stage = 'card_selection';\r

  }"
ferro_state: "function ferro_state(dParent) {\r

  \  if (DA.TEST0 == true) {\r

  \    let html = `${Z.stage}`;\r

  \    if (isdef(Z.playerdata)) {\r

  \      let trigger = get_multi_trigger();\r

  \      if (trigger) html += ` trigger:${trigger}`;\r

  \      for (const data of Z.playerdata) {\r

  \        if (data.name == trigger) continue;\r

  \        let name = data.name;\r

  \        let state = data.state;\r

  \        let s_state = object2string(state);\r

  \        html += ` ${name}:'${s_state}'`;\r

  \      }\r

  \      dParent.innerHTML += ` ${Z.playerdata.map(x => x.name)}`;\r

  \    }\r

  \    dParent.innerHTML = html;\r

  \    return;\r

  \  }\r

  \  if (Z.stage == 'round_end') {\r

  \    dParent.innerHTML = `Round ${Z.round} ended by
  &nbsp;${get_user_pic_html(Z.fen.round_winner, 30)}`;\r

  \  } else if (is_fixed_goal()) {\r

  \    let goal = get_round_goal();\r

  \    console.log('goal', goal);\r

  \    let goal_html = `<div
  style=\"font-weight:bold;border-radius:50%;background:white;color:red;line-he\
  ight:100%;padding:4px 8px\">${goal}</div>`;\r

  \    dParent.innerHTML = `Round
  ${Z.round}:&nbsp;&nbsp;minimum:&nbsp;${goal_html}`;\r

  \  } else {\r

  \    let user_html = get_user_pic_html(Z.stage == 'buy_or_pass' ?
  Z.fen.nextturn[0] : Z.turn[0], 30);\r

  \    dParent.innerHTML = `Round ${Z.round}:&nbsp;${Z.stage == 'buy_or_pass'
  ? 'next ' : ''}turn: ${user_html} `;\r

  \  }\r

  }"
ferro_state_new: "function ferro_state_new(dParent) {\r

  \  if (is_fixed_goal()) {\r

  \    let goal = get_round_goal();\r

  \    let goal_html = `<div
  style=\"font-weight:bold;border-radius:50%;background:white;color:red;line-he\
  ight:100%;padding:4px 8px\">${goal}</div>`;\r

  \    dParent.innerHTML = `Round
  ${Z.round}:&nbsp;&nbsp;minimum:&nbsp;${goal_html}`;\r

  \  } else {\r

  \    let user_html = get_user_pic_html(Z.stage == 'buy_or_pass' ?
  Z.fen.turn_after_ack[0] : Z.turn[0], 30);\r

  \    dParent.innerHTML = `Round ${Z.round}:&nbsp;${Z.stage == 'buy_or_pass'
  ? 'next ' : ''}turn: ${user_html} `;\r

  \  }\r

  }"
ferro_stats: "function ferro_stats(dParent) {\r

  \  let player_stat_items = UI.player_stat_items = ui_player_info(dParent);\r

  \  let fen = Z.fen;\r

  \  for (const plname in fen.players) {\r

  \    let pl = fen.players[plname];\r

  \    let item = player_stat_items[plname];\r

  \    let d = iDiv(item); mCenterFlex(d); mStyle(d, { wmin: 150 });
  mLinebreak(d);\r

  \    player_stat_count('coin', pl.coins, d);\r

  \    player_stat_count('pinching hand', pl.hand.length, d);\r

  \    if (!compute_hidden(plname)) player_stat_count('hand with fingers
  splayed', calc_hand_value(pl.hand), d);\r

  \    player_stat_count('star', pl.score, d);\r

  \    mLinebreak(d, 4);\r

  \    if (!is_fixed_goal()) {\r

  \      let d2 = mDiv(d, { padding: 4, display: 'flex' },
  `d_${plname}_goals`);\r

  \      if (fen.availableGoals.length < 4) { mStyle(d2, { wmin: 120 });
  mCenterFlex(d2); }\r

  \      let sz = 16;\r

  \      let styles_done = { h: sz, fz: sz, maleft: 6, fg: 'grey',
  'text-decoration': 'line-through green', weight: 'bold' };\r

  \      let styles_todo = { h: sz, fz: sz, maleft: 6, border: 'red', weight:
  'bold', padding: 4, 'line-height': sz };\r

  \      for (const k of fen.roundGoals) {\r

  \        mText(k, d2, pl.goals[k] ? styles_done : styles_todo);\r

  \      }\r

  \    }\r

  \    if (fen.turn.includes(plname)) { show_hourglass(plname, d, 30, { left:
  -3, top: 0 }); }\r

  \  }\r

  }"
ferro_stats_new: "function ferro_stats_new(z, dParent) {\r

  \  let player_stat_items = UI.player_stat_items = ui_player_info(z,
  dParent);\r

  \  let fen = z.fen;\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    let item = player_stat_items[plname];\r

  \    let d = iDiv(item); mCenterFlex(d); mLinebreak(d);\r

  \    player_stat_count('coin', pl.coins, d);\r

  \    player_stat_count('pinching hand', pl.hand.length, d);\r

  \    if (!compute_hidden(plname)) player_stat_count('hand with fingers
  splayed', calc_hand_value(pl.hand), d);\r

  \    player_stat_count('star', pl.score, d);\r

  \    mLinebreak(d, 4);\r

  \    if (!is_fixed_goal()) {\r

  \      let d2 = mDiv(d, { padding: 4, display: 'flex' },
  `d_${plname}_goals`);\r

  \      let sz = 16;\r

  \      let styles_done = { h: sz, fz: sz, maleft: 6, fg: 'grey',
  'text-decoration': 'line-through green', weight: 'bold' };\r

  \      let styles_todo = { h: sz, fz: sz, maleft: 6, border: 'red', weight:
  'bold', padding: 4, 'line-height': sz };\r

  \      for (const k in pl.goals) {\r

  \        mText(k, d2, pl.goals[k] ? styles_done : styles_todo);\r

  \      }\r

  \    }\r

  \    if (fen.turn.includes(plname)) { show_hourglass(plname, d, 30, { left:
  -3, top: 0 }); }\r

  \  }\r

  }"
ferro_transaction_error: "function ferro_transaction_error() {\r

  \  let d = mDiv(dError, { padding: 10, align: 'center' }, null, `Illegal
  turn sequence - transaction cannot be completed!!!<br>press reload and try
  again!<br>`);\r

  \  mButton('RELOAD', onclick_reload, d, { margin: 10 });\r

  \  clear_transaction();\r

  }"
ferro_ut0_create_staged: "function ferro_ut0_create_staged() {\r

  \  console.log('*** test ferro 0: buy_or_pass with no coins ***');\r

  \  DA.test.number = 0;\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let otherplayer = firstCond(fen.plorder, (p) => p != uplayer);\r

  \  let pl = fen.players[otherplayer];\r

  \  pl.coins = 0;\r

  \  DA.fen0 = fen;\r

  \  DA.auto_moves = [[],\r

  \  [['visit'], ['last'], [0]],\r

  \  [['visit'], ['last'], [1]],\r

  \  [['pass']],\r

  \  ];\r

  \  return [fen, player_names];\r

  }"
fetch_wrapper: async function fetch_wrapper(url) { return await fetch(url); }
fetch_wrapper_NO: "async function fetch_wrapper_NO(url) {\r

  \  route_counter += 1;\r

  \  if (SHOW_SERVER_ROUTE) consOutput(route_counter + ': route:' + url);\r

  \  let res = await fetch(url).then((response) => {\r

  \    if (response.status === 200) {\r

  \      if (SHOW_SERVER_RETURN) consOutput(route_counter + ': return:',
  response);\r

  \    } else {\r

  \      throw new Error('Something went wrong');\r

  \    }\r

  \  }).catch((error) => {\r

  \    console.log(error)\r

  \  });\r

  \  return res;\r

  }"
fetchFileAsText: "async function fetchFileAsText(url) {\r

  \  let f = await fetch(url);\r

  \  let txt = await f.text();\r

  \  return txt;\r

  }"
fiddleAdd: "function fiddleAdd(dParent, content, idx) {\r

  \  let ta = AU.ta = mTextarea(3, null, dParent, { fz: 16, padding: 10,
  family: 'tahoma', w: '100%', box: true });\r

  \  ta.addEventListener('keydown', fiddleControlHandler);\r

  \  ta.addEventListener('keydown', fiddleEnterResize);\r

  \  DA.tribute.attach(ta);\r

  \  DA.tas.push(ta);\r

  \  ta.addEventListener('tribute-replaced', fiddleMessageHandler);\r

  \  if (isdef(content)) ta.value = content;\r

  \  if (isdef(idx)) mInsertAt(dParent, ta, idx);\r

  \  ta.focus();\r

  }"
fiddleControlHandler: "function fiddleControlHandler(ev) {\r

  \  if (ev.ctrlKey) {\r

  \    let instance = DA.tribute;\r

  \    instance.isActive = false;\r

  \    instance.hideMenu();\r

  \    if (ev.key == 'Enter') {\r

  \      runcode(ev.target.value);\r

  \    } else if (ev.key == '+' || ev.key == '=') {\r

  \      evStop(ev);\r

  \      fiddleAdd(dFiddle);\r

  \    } else if (ev.key == '-' || ev.key == '_') {\r

  \      evStop(ev);\r

  \      let empty = DA.tas.filter(x => isEmptyOrWhiteSpace(x.value));\r

  \      let elfocus = document.activeElement;\r

  \      let nofocus = false;\r

  \      for (const ta of empty) { if (ta == elfocus) nofocus = true;
  ta.remove(); }\r

  \      DA.tas = arrMinus(DA.tas, empty);\r

  \      if (isEmpty(DA.tas)) fiddleAdd(dFiddle);\r

  \      else if (nofocus) { AU.ta = DA.tas[0]; AU.ta.focus(); }\r

  \    } else if (ev.key == 'ArrowDown') {\r

  \      let ta = AU.ta = arrNext(DA.tas, AU.ta);\r

  \      ta.focus();\r

  \    } else if (ev.key == 'ArrowUp') {\r

  \      let ta = AU.ta = arrPrev(DA.tas, AU.ta);\r

  \      ta.focus();\r

  \    }\r

  \  }\r

  }"
fiddleEnterResize: "function fiddleEnterResize(ev) {\r

  \  if (ev.key == 'Enter') {\r

  \    console.log('hallo!');\r

  \    let ta = ev.target;\r

  \    let x = ta.value;\r

  \    let lines = x.split('\\n');\r

  \    let min = lines.length + 1;\r

  \    let coords = getCaretCoordinates(ta, ta.selectionEnd);\r

  \    console.log('coords', coords, 'window height', window.innerHeight)\r

  \    if (coords.top + 60 < window.innerHeight && (nundef(ta.rows) || ta.rows
  < min)) ta.rows = min;\r

  \  }\r

  }"
fiddleInit: "function fiddleInit(dParent, dParentConsole) {\r

  \  dFiddle = valf(dParent, dTable);\r

  \  dMessage = mDiv(dFiddle, { w: '100%', bg: 'dimgray', fg: 'yellow', box:
  true, hpadding: 10 }, 'dMessage', 'enter code:');\r

  \  getGlobals();\r

  \  let list = Globals.function.map(x => ({ key: x.key, value: x.key + '('
  }));\r

  \  DA.tas = [];\r

  \  var tributeAttributes = {\r

  \    autocompleteMode: true,\r

  \    //noMatchTemplate: '', //null, //' ',\r

  \    noMatchTemplate: () => {\r

  \      return '<span style:\"visibility: hidden;\"></span>';\r

  \    },\r

  \    values: fiddleSearch,\r

  \    selectTemplate: function (item) {\r

  \      if (typeof item === 'undefined') return null;\r

  \      if (this.range.isContentEditable(this.current.element)) {\r

  \        return '<span contenteditable=\"false\"><a>' + item.original.key +
  '</a></span>';\r

  \      }\r

  \      return item.original.value;\r

  \    },\r

  \    menuItemTemplate: function (item) {\r

  \      return item.string;\r

  \    },\r

  \    replaceTextSuffix: '(',\r

  \    menuShowMinLength: 1,\r

  \  };\r

  \  var trib = DA.tribute = new Tribute(Object.assign({ menuContainer:
  dParent, }, tributeAttributes));\r

  \  let saved = localStorage.getItem('codelist');\r

  \  let codelist = saved ? JSON.parse(saved) : [];\r

  \  if (codelist.length == 0) codelist = [`console.log('hallo');`];\r

  \  for (const code of codelist) {\r

  \    fiddleAdd(dFiddle, code);\r

  \  }\r

  \  setTimeout(() => dFiddle.children[0].focus(), 100);\r

  }"
fiddleMessageHandler: "function fiddleMessageHandler(ev) {\r

  \  let key = ev.detail.item.original.key;\r

  \  let item = window[key];\r

  \  if (typeof item == 'function') {\r

  \    let d = mBy('dMessage');\r

  \    d.innerHTML = stringBefore(item.toString(), ') {') + ')';\r

  \  }\r

  }"
fiddleSave: "function fiddleSave() {\r

  \  if (isdef(dFiddle)) {\r

  \    let codelist = arrChildren(dFiddle).slice(1).filter(x =>
  !isEmptyOrWhiteSpace(x.value)).map(x => x.value);\r

  \    localStorage.setItem('codelist', JSON.stringify(codelist));\r

  \    lookupSetOverride(DB, ['env', 'fiddle'], codelist);\r

  \  } else console.log('fiddle closed - not saved')\r

  }"
fiddleSearch: "function fiddleSearch(text, callback) {\r

  \  console.log('text', text)\r

  \  let list = Globals.function;\r

  \  let list1 = list.filter(x => startsWith(x.key, text));\r

  \  callback(list1);\r

  }"
fillCharInput: "function fillCharInput(inp, ch) {\r

  \  let d = iDiv(inp);\r

  \  d.innerHTML = ch;\r

  \  mRemoveClass(d, 'blink');\r

  }"
fillColarr: "function fillColarr(colarr, items) {\r

  \  let i = 0;\r

  \  let result = [];\r

  \  for (const r of colarr) {\r

  \    let arr = [];\r

  \    for (let c = 0; c < r; c++) {\r

  \      arr.push(items[i]); i++;\r

  \    }\r

  \    result.push(arr);\r

  \  }\r

  \  return result;\r

  }"
fillout_boa_login: "function fillout_boa_login() {\r

  \  let data = DIBOA.bw_info.boa;\r

  \  let elem_userid = get_boa_userid_input();\r

  \  let elem_pwd = get_boa_pwd_input();\r

  \  elem_userid.value = data.userid;\r

  \  elem_pwd.value = data.pwd;\r

  }"
filter_codebase: "function filter_codebase() {\r

  \  let words = toWords(mBy('iKeywords').value);\r

  \  console.log('filter_codebase: keywords are', words);\r

  \  let di = CODE.funcs;\r

  \  let di_values = get_values(di);\r

  \  let records = di_values.filter(x => x.body.includes(words[0]));\r

  \  console.log('records', records)\r

  \  AU.ta.value = '';\r

  \  for (const r of records) {\r

  \    let k = r.name;\r

  \    AU.ta.value += di[k].body + '\\n';\r

  \  }\r

  }"
filter_list: "function filter_list() {\r

  \  let words = toWords(mBy('iKeywords').value);\r

  \  console.log('filter_list: keywords are', words);\r

  \  let di = CODE.funcs;\r

  \  let di_values = get_values(di);\r

  \  let records = di_values.filter(x => x.body.includes(words[0]));\r

  \  console.log('records', records)\r

  \  mClear(dSidebar)\r

  \  for (const rec of records) {\r

  \    let key = rec.name;\r

  \    let d = mDiv(dSidebar, { cursor: 'pointer', wmin: 100 }, null, key,
  'hop1')\r

  \    let info = rec.body;\r

  \    d.onclick = () => AU.ta.value = info;\r

  \  }\r

  }"
filter_sig: "function filter_sig() {\r

  \  let words = toWords(mBy('iKeywords').value);\r

  \  console.log('filter_sig: keywords are', words);\r

  \  let di = CODE.funcs;\r

  \  let di_values = get_values(di);\r

  \  let records = di_values.filter(x => x.body.includes(words[0]));\r

  \  console.log('records', records)\r

  \  AU.ta.value = '';\r

  \  for (const r of records) {\r

  \    let k = r.name;\r

  \    AU.ta.value += di[k].sig + '\\n';\r

  \  }\r

  }"
filterByKey: "function filterByKey(o, desiredKeys) {\r

  \  let o1 = {};\r

  \  for (const k of desiredKeys) {\r

  \    if (isdef(o[k])) {\r

  \      o1[k] = o[k];\r

  \    }\r

  \  }\r

  \  return o1;\r

  }"
filterByLength: function filterByLength(w, min, max, allowSpaces = false) {
  return w.length <= max && w.length >= min && (allowSpaces || !w.includes('
  ')); }
filterByNoKey: "function filterByNoKey(o, undesiredKeys) {\r

  \  let o1 = {};\r

  \  for (const k in o) {\r

  \    if (undesiredKeys.includes(k)) continue;\r

  \    o1[k] = o[k];\r

  \  }\r

  \  return o1;\r

  }"
filterDistinctLetters: "function filterDistinctLetters(s) {\r

  \  let arr = [];\r

  \  for (let i = 0; i < s.length; i++) {\r

  \    let ch = s[i];\r

  \    if (isLetter(ch) && !arr.includes(ch)) arr.push(ch);\r

  \  }\r

  \  return arr;\r

  }"
filterStringFromTuples: "function filterStringFromTuples(strings, tuples) {\r

  \  let result = [];\r

  \  for (const t of tuples) {\r

  \    for (const s of t) {\r

  \      if (strings.includes(s)) {\r

  \        result.push(s);\r

  \      }\r

  \    }\r

  \  }\r

  \  return result;\r

  }"
filterWordByLengthG: "function filterWordByLengthG(g, k, w, allowSpaces = false)
  {\r

  \  if (nundef(g.minWordLength)) g.minWordLength = 0;\r

  \  if (nundef(g.maxWordLength)) g.maxWordLength = 50;\r

  \  return filterByLength(w, g.minWordLength, g.maxWordLength,
  allowSpaces);\r

  }"
find_card: function find_card(index, ui_item) { return ui_item.items[index]; }
find_common_ancestor: function find_common_ancestor(d1, d2) { return dTable; }
find_index_of_jolly: function find_index_of_jolly(j) { return j.findIndex(x => is_jolly(x)); }
find_jolly_rank: "function find_jolly_rank(j, rankstr = 'A23456789TJQKA') {\r

  \  let jolly_idx = find_index_of_jolly(j);\r

  \  if (jolly_idx == -1) return false;\r

  \  if (jolly_idx > 0) {\r

  \    let rank_before_index = j[jolly_idx - 1][0];\r

  \    let rank_needed = rankstr[rankstr.indexOf(rank_before_index) + 1];\r

  \    return rank_needed;\r

  \  } else {\r

  \    let rank_after_index = j[jolly_idx + 1][0];\r

  \    let rank_needed = rank_after_index == 'A' ? 'K' :
  rankstr[rankstr.indexOf(rank_after_index) - 1];\r

  \    return rank_needed;\r

  \  }\r

  }"
find_journeys: "function find_journeys(fen, uplayer) {\r

  \  let h = fen.players[uplayer].hand;\r

  \  let seqs = find_sequences(h, 2, 'A23456789TJQK');\r

  \  if (!isEmpty(seqs)) return seqs;\r

  \  let existing_journeys = aggregate_player(fen, 'journeys');\r

  \  for (const j of existing_journeys) {\r

  \    let h1 = j.concat(h);\r

  \    let seqs1 = find_sequences(h1, j.length + 1, 'A23456789TJQK');\r

  \    if (!isEmpty(seqs1)) return seqs1;\r

  \  }\r

  \  return seqs;\r

  }"
find_minimum: "function find_minimum(array) {\r

  \  let min = array[0];\r

  \  for (let i = 1; i < array.length; i++) {\r

  \    if (array[i] < min) min = array[i];\r

  \  }\r

  \  return min;\r

  }"
find_minimum_by_function: "function find_minimum_by_function(array, func) {\r

  \  let min = func(array[0]);\r

  \  for (let i = 1; i < array.length; i++) {\r

  \    if (func(array[i]) < func(min)) min = array[i];\r

  \  }\r

  \  return min;\r

  }"
find_next_loc_oid_with_existing_parent: "function
  find_next_loc_oid_with_existing_parent(locOids, sdata, R) {\r

  \  for (const oid of locOids) {\r

  \    let o = sdata[oid];\r

  \    let loc = o.loc;\r

  \    let parentID = loc;\r

  \    if (!isEmpty(R.rNodesOidKey[parentID])) return oid;\r

  \  }\r

  \  return null;\r

  }"
find_players_with_max_score: "function find_players_with_max_score() {\r

  \  let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen,
  Z.uplayer];\r

  \  let maxscore = -Infinity;\r

  \  let maxscorepls = [];\r

  \  for (const plname of plorder) {\r

  \    let pl = fen.players[plname];\r

  \    if (pl.score > maxscore) { maxscore = pl.score; maxscorepls = [plname];
  }\r

  \    else if (pl.score == maxscore) maxscorepls.push(plname);\r

  \  }\r

  \  return maxscorepls;\r

  }"
find_players_with_min_score: "function find_players_with_min_score() {\r

  \  let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen,
  Z.uplayer];\r

  \  let minscore = Infinity;\r

  \  let minscorepls = [];\r

  \  for (const plname of plorder) {\r

  \    let pl = fen.players[plname];\r

  \    if (pl.score < minscore) { minscore = pl.score; minscorepls = [plname];
  }\r

  \    else if (pl.score == minscore) minscorepls.push(plname);\r

  \  }\r

  \  return minscorepls;\r

  }"
find_players_with_potential_journey: "function
  find_players_with_potential_journey(fen) {\r

  \  let res = [];\r

  \  for (const uplayer of fen.plorder) {\r

  \    if (isdef(fen.passed) && fen.passed.includes(uplayer)) continue;\r

  \    let j = find_journeys(fen, uplayer);\r

  \    if (!isEmpty(j)) res.push(uplayer);\r

  \  }\r

  \  return res;\r

  }"
find_sequences: "function find_sequences(blatt, n = 2, rankstr =
  '23456789TJQKA', allow_cycle = false) {\r

  \  let suitlists = get_suitlists_sorted_by_rank(blatt, rankstr, true);\r

  \  let seqs = [];\r

  \  for (const lst of get_values(suitlists)) {\r

  \    let len = lst.length;\r

  \    if (len < n) continue;\r

  \    let l = allow_cycle ? lst.concat(lst) : lst;\r

  \    for (let istart = 0; istart < len; istart++) {\r

  \      let seq = [l[istart]];\r

  \      let i = istart;\r

  \      while (i + 1 < l.length && follows_in_rank(l[i], l[i + 1], rankstr))
  {\r

  \        seq.push(l[i + 1]);\r

  \        i++;\r

  \      }\r

  \      if (seq.length >= n) seqs.push(seq);\r

  \    }\r

  \  }\r

  \  return seqs;\r

  }"
find_shared_keys: "function find_shared_keys(keylist, keylists) {\r

  \  let shared = [];\r

  \  for (const keylist2 of keylists) {\r

  \    for (const key of keylist) {\r

  \      if (keylist2.includes(key)) {\r

  \        shared.push(key);\r

  \      }\r

  \    }\r

  \  }\r

  \  return shared;\r

  }"
findAddress: "function findAddress(kSelf, x, path) {\r

  \  let path1 = stringAfter(path, 'self');\r

  \  path1 = kSelf + path1;\r

  \  if (path1[0] != '.') path1 = '.' + path1;\r

  \  let x1 = calcAddressWithin(x, path1);\r

  \  return [x1.key, x1.obj];\r

  }"
findAncestorElemOfType: "function findAncestorElemOfType(el, type) {\r

  \  while (el) {\r

  \    let t = getTypeOf(el);\r

  \    if (t == type) break;\r

  \    el = el.parentNode;\r

  \  }\r

  \  return el;\r

  }"
findAncestorElemWithParentOfType: "function findAncestorElemWithParentOfType(el,
  type) {\r

  \  while (el && el.parentNode) {\r

  \    let t = getTypeOf(el);\r

  \    let tParent = getTypeOf(el.parentNode);\r

  \    if (tParent == type) break;\r

  \    el = el.parentNode;\r

  \  }\r

  \  return el;\r

  }"
findAttributeInAncestors: "function findAttributeInAncestors(elem, attr) {\r

  \  let val;\r

  \  while (elem && nundef(val = elem.getAttribute(attr))) { elem =
  elem.parentNode; }\r

  \  return val;\r

  }"
findChildOfType: "function findChildOfType(type, parentElem) {\r

  \  let children = arrChildren(parentElem);\r

  \  for (const ch of children) {\r

  \    if (getTypeOf(ch) == type) return ch;\r

  \  }\r

  \  return null;\r

  }"
findChildrenOfType: "function findChildrenOfType(type, parentElem) {\r

  \  let children = arrChildren(parentElem);\r

  \  let res = [];\r

  \  for (const ch of children) {\r

  \    if (getTypeOf(ch) == type) res.push(ch);\r

  \  }\r

  \  return res;\r

  }"
findChildWithClass: "function findChildWithClass(className, parentElem) {\r

  \  testHelpers(parentElem);\r

  \  let children = arrChildren(parentElem);\r

  \  for (const ch of children) {\r

  \    if (ch.classList.includes(className)) return ch;\r

  \  }\r

  \  return null;\r

  }"
findChildWithId: "function findChildWithId(id, parentElem) {\r

  \  testHelpers(parentElem);\r

  \  let children = arrChildren(parentElem);\r

  \  for (const ch of children) {\r

  \    if (ch.id == id) return ch;\r

  \  }\r

  \  return null;\r

  }"
findClosestTile: "function findClosestTile(fMetric, goalTile, tilenames) {\r

  \  let distances = tilenames.map(x => fMetric(x, goalTile));\r

  \  const indexOfMin = distances.indexOf(Math.min(...distances));\r

  \  let best = tilenames[indexOfMin];\r

  \  return best;\r

  }"
findClosestTupleForItem: "function findClosestTupleForItem(tuples, item, assets)
  {\r

  \  tuples = tuples.filter(x => x[0] == item.id);\r

  \  if (tuples.length == 0) return null;\r

  \  let tilenames = tuples.map(x => x[1]);\r

  \  let closestTile = findClosestTile((a, b) =>
  assets.distanceBetweenTiles(a, b), item.goalTile, tilenames);\r

  \  let dCurrent = assets.distanceBetweenTiles(item.tile, item.goalTile);\r

  \  let dNew = assets.distanceBetweenTiles(closestTile, item.goalTile);\r

  \  if (dNew > dCurrent) {\r

  \    return null;\r

  \  }\r

  \  return firstCond(tuples, x => x[1] == closestTile);\r

  }"
findClosestUnit: "function findClosestUnit(fMetric, goalTile, units) {\r

  \  let distances = units.map(x => fMetric(x.tile, goalTile));\r

  \  const indexOfMin = distances.indexOf(Math.min(...distances));\r

  \  let best = units[indexOfMin];\r

  \  return best;\r

  }"
findCommonPrefix: "function findCommonPrefix(s1, s2) {\r

  \  let i = 0;\r

  \  let res = '';\r

  \  while (i < s1.length && i < s2.length) {\r

  \    if (s1[i] != s2[i]) break; else res += s1[i];\r

  \    i += 1;\r

  \  }\r

  \  return res;\r

  }"
findDescendantOfType: "function findDescendantOfType(type, parent) {\r

  \  if (getTypeOf(parent) == type) return parent;\r

  \  let children = arrChildren(parent);\r

  \  if (isEmpty(children)) return null;\r

  \  for (const ch of children) {\r

  \    let res = findDescendantOfType(type, ch);\r

  \    if (res) return res;\r

  \  }\r

  \  return null;\r

  }"
findDescendantWithId: "function findDescendantWithId(id, parent) {\r

  \  if (parent.id == id) return parent;\r

  \  let children = arrChildren(parent);\r

  \  if (isEmpty(children)) return null;\r

  \  for (const ch of children) {\r

  \    let res = findDescendantWithId(id, ch);\r

  \    if (res) return res;\r

  \  }\r

  \  return null;\r

  }"
findDOMAncestorOfType: "function findDOMAncestorOfType(elem, t = 'div') {\r

  \  let anc = elem.parentNode;\r

  \  while (MSCATS[getTypeOf(anc)] != t) { anc = anc.parentNode; }\r

  \  return anc;\r

  }"
findDragTarget: "function findDragTarget(ev) {\r

  \  let targetElem = ev.target;\r

  \  while (!targetElem.ondragover) targetElem = targetElem.parentNode;\r

  \  return targetElem;\r

  }"
findFirst: "function findFirst(arr, attr, val) {\r

  \  let matches = arr.filter(x => attr in x && x[attr] == val);\r

  \  return empty(matches) ? null : matches[0];\r

  }"
findFirstListKey: "function findFirstListKey(o, childrenKeys) {\r

  \  for (const k in o) {\r

  \    let val = o[k];\r

  \    if (childrenKeys && childrenKeys.includes(k) || isList(val)) {\r

  \      return k;\r

  \    }\r

  \  }\r

  \  return null;\r

  }"
findFreeWall: "function findFreeWall(r1, walls) {\r

  \  r1 = isString(r1) ? Items[r1] : r1;\r

  \  if (nundef(walls)) {\r

  \    walls = [];\r

  \    for (const dir in r1.walls) {\r

  \      walls = walls.concat(r1.walls[dir]);\r

  \    }\r

  \  }\r

  \  walls = walls.filter(x => !x.door);\r

  \  return isEmpty(walls) ? null : chooseRandom(walls);\r

  }"
findItemFromElem: function findItemFromElem(items, elem) { let item =
  firstCond(items, x => iDiv(x) == elem); return item; }
findItemFromEvent: function findItemFromEvent(items, ev) { return evToItemC(ev); }
findItemFromKey: function findItemFromKey(items, key) { return firstCond(items,
  x => x.key == key); }
findKey: function findKey(dict, val) { for (const k in dict) { if (dict[k] ==
  val) return k; } }
findKeys: function findKeys(s) { return SymKeys.filter(x => contains(x, s) ||
  contains(Syms[x].E, s) || isdef(Syms[x].D) && contains(Syms[x].D, s)); }
findLongestWord: function findLongestWord(arr) { return arr[arrMinMax(arr, x =>
  x.length).imax]; }
findMatch: "function findMatch(odict, condList) {\r

  \  if (isListOfLiterals(condList)) condList = [condList];\r

  \  let Board = lastCondDictPlusKey(odict, x => {\r

  \    for (const tuple of condList) {\r

  \      if (x[tuple[0]] != tuple[1]) return false;\r

  \    }\r

  \    return true;\r

  \  });\r

  \  return Board;\r

  }"
findOrCreateKeysForObjTypes: "function findOrCreateKeysForObjTypes(oids, R) {\r

  \  let keysForOids = {};\r

  \  for (const oid of oids) {\r

  \    let key = R.getR(oid);\r

  \    if (!isEmpty(key)) {\r

  \      keysForOids[oid] = key[0];\r

  \    } else {\r

  \      key = getUID();\r

  \      let o = R.getO(oid);\r

  \      let nSpec = R.lastSpec[key] = { cond: { obj_type: o.obj_type }, type:
  'info' };\r

  \      R.addR(oid, key);\r

  \      let otype = o.obj_type;\r

  \      let sameTypeOids = oids.filter(x => R.getO(x).obj_type == otype);\r

  \      let oSuper = {};\r

  \      for (const oid1 of sameTypeOids) {\r

  \        let o1 = R.getO(oid1);\r

  \        for (const k1 in o1) {\r

  \          if (k1 == 'obj_type' || k1 == 'oid' || !isLiteral(o1[k1]))
  continue;\r

  \          if (isdef(oSuper[k1])) continue;\r

  \          oSuper[k1] = '.' + k1;\r

  \        }\r

  \      }\r

  \      let dataKeys = Object.keys(oSuper);\r

  \      if (dataKeys.length == 0) oSuper = 'X';\r

  \      else if (dataKeys.length == 1) oSuper = '.' + dataKeys[0];\r

  \      nSpec.data = oSuper;\r

  \      keysForOids[oid] = key;\r

  \      R.updateR(key);\r

  \    }\r

  \  }\r

  \  return keysForOids;\r

  }"
findParentWithClass: function findParentWithClass(elem, className) { while (elem
  && !mHasClass(elem, className)) { elem = elem.parentNode; } return elem; }
findParentWithId: function findParentWithId(elem) { while (elem && !(elem.id)) {
  elem = elem.parentNode; } return elem; }
findPool: "function findPool(id) {\r

  \  if (G.players[id]) return G.playersAugmented;\r

  \  else if (G.table[id]) return G.table;\r

  }"
findSameSet: "function findSameSet(llst, lst) {\r

  \  for (const l of llst) {\r

  \    if (sameList(l, lst)) return l;\r

  \  }\r

  \  return null;\r

  }"
findSuitableVoice: "function findSuitableVoice(text, voiceDesc) {\r

  \  let voiceKey = 'david';\r

  \  if (currentLanguage == 'D') {\r

  \    voiceKey = 'deutsch';\r

  \  } else if (text.includes('bad')) {\r

  \    voiceKey = 'zira';\r

  \  } else if (voiceDesc == 'random') {\r

  \    voiceKey = chooseRandom(['david', 'zira', 'us', 'ukFemale',
  'ukMale']);\r

  \  } else if (isdef(voiceNames[voiceDesc])) {\r

  \    voiceKey = voiceDesc;\r

  \  } else if (isdef(voiceDesc)) {\r

  \    let tryVoiceKey = firstCondDict(voiceNames, x => startWith(x,
  voiceDesc));\r

  \    if (tryVoiceKey) voiceKey = tryVoiceKey;\r

  \  }\r

  \  let voiceName = voiceNames[voiceKey];\r

  \  let voice = firstCond(voices, x => startsWith(x.name, voiceName));\r

  \  return [voiceKey, voice];\r

  }"
findTable: "function findTable(createNew = false) {\r

  \  let idTables = U.tables;\r

  \  if (isdef(idTables)) {\r

  \    for (const id of idTables) {\r

  \      let t = DB.tables[id];\r

  \      if (t.game == Gamename) return id;\r

  \    }\r

  \  }\r

  \  return createNew ? createTable() : null;\r

  }"
findWall: "function findWall(r1, r2) {\r

  \  for (const dir in r1.walls) {\r

  \    let walls = r1.walls[dir];\r

  \    for (const wall of walls) {\r

  \      if (wall.r2 == r2.id) return wall;\r

  \    }\r

  \  }\r

  \  return null;\r

  }"
fintegral: "function fintegral(exp) {\r

  \  return nerdamer(`integrate(${exp},x)`).buildFunction();\r

  }"
fireClick: "function fireClick(elem) {\r

  \  const evt = new Event(\"click\", { \"bubbles\": true, \"cancelable\":
  false });\r

  \  elem.dispatchEvent(evt);\r

  }"
fireKey: "function fireKey(k, { control, alt, shift } = {}) {\r

  \  console.log('fireKey called!' + document.createEvent)\r

  \  if (document.createEvent) {\r

  \    console.log('fireKey: createEvent and node.dispatchEvent exist!!!', k,
  control, alt, shift);\r

  \    window.dispatchEvent(new KeyboardEvent('keypress', { key: '+', ctrlKey:
  true }));\r

  \  } else if (document.createEventObject) {\r

  \    console.log('fireClick: createEventObject and node.fireEvent exist!!!',
  node)\r

  \    node.fireEvent('onclick');\r

  \  } else if (typeof node.onclick == 'function') {\r

  \    console.log('fireClick: node.onclick exists!!!', node)\r

  \    node.onclick();\r

  \  }\r

  }"
fireWheel: "function fireWheel(node) {\r

  \  if (document.createEvent) {\r

  \    var evt = document.createEvent('MouseEvents');\r

  \    evt.initEvent('wheel', true, false);\r

  \    console.log('fireClick: createEvent and node.dispatchEvent exist!!!',
  node)\r

  \    node.dispatchEvent(evt);\r

  \  } else if (document.createEventObject) {\r

  \    console.log('fireClick: createEventObject and node.fireEvent exist!!!',
  node)\r

  \    node.fireEvent('onclick');\r

  \  } else if (typeof node.onclick == 'function') {\r

  \    console.log('fireClick: node.onclick exists!!!', node)\r

  \    node.onclick();\r

  \  }\r

  }"
first: "function first(arr) {\r

  \  return arr.length > 0 ? arr[0] : null;\r

  }"
firstCond: "function firstCond(arr, func) {\r

  \  if (nundef(arr)) return null;\r

  \  for (const a of arr) {\r

  \    if (func(a)) return a;\r

  \  }\r

  \  return null;\r

  }"
firstCond_super_inefficient: "function firstCond_super_inefficient(arr, func)
  {\r

  \  let res = arr.filter(x => func(x));\r

  \  return res.length > 0 ? res[0] : null;\r

  }"
firstCondDict: "function firstCondDict(dict, func) {\r

  \  for (const k in dict) { if (func(dict[k])) return k; }\r

  \  return null;\r

  }"
firstCondDictKey: function firstCondDictKey() { return firstCondDictKeys(...arguments); }
firstCondDictKeys: "function firstCondDictKeys(dict, func) {\r

  \  for (const k in dict) { if (func(k)) return k; }\r

  \  return null;\r

  }"
firstCondDictKV: "function firstCondDictKV(dict, func) {\r

  \  for (const k in dict) { if (func(k, dict[k])) return k; }\r

  \  return null;\r

  }"
firstCondDictReturnVal: "function firstCondDictReturnVal(dict, func) {\r

  \  for (const k in dict) { if (func(dict[k])) return dict[k]; }\r

  \  return null;\r

  }"
firstCondX: "function firstCondX(ad, func, keysSorted) {\r

  \  if (nundef(ad)) return null;\r

  \  else if (isDict(ad)) {\r

  \    if (isdef(keysSorted)) {\r

  \      for (const k of keysSorted) {\r

  \        let v = ad[k];\r

  \        if (func(v)) { if (nundef(v.key)) v.key = k; return v; }\r

  \      }\r

  \    } else {\r

  \      for (const k in ad) {\r

  \        let v = ad[k];\r

  \        if (func(v)) { if (nundef(v.key)) v.key = k; return v; }\r

  \      }\r

  \    }\r

  \  } else {\r

  \    for (const a of ad) { if (func(a)) return a; }\r

  \  }\r

  \  return null;\r

  }"
firstElement: "function firstElement(x) {\r

  \  if (isSet(x)) return x.set[0];\r

  \  else if (isTuple(x)) return x[0];\r

  \  else return null;\r

  }"
firstFloat: "function firstFloat(s) {\r

  \  if (s) {\r

  \    let m = s.match(/-?.?\\d+/);\r

  \    if (m) {\r

  \      let sh = m.shift();\r

  \      if (sh) { return Number(sh); }\r

  \    }\r

  \  }\r

  \  return null;\r

  }"
firstNCond: "function firstNCond(n, arr, func) {\r

  \  if (nundef(arr)) return [];\r

  \  let result = [];\r

  \  let cnt = 0;\r

  \  for (const a of arr) {\r

  \    cnt += 1; if (cnt > n) break;\r

  \    if (func(a)) result.push(a);\r

  \  }\r

  \  return result;\r

  }"
firstNumber: "function firstNumber(s) {\r

  \  if (s) {\r

  \    let m = s.match(/-?\\d+/);\r

  \    if (m) {\r

  \      let sh = m.shift();\r

  \      if (sh) { return Number(sh); }\r

  \    }\r

  \  }\r

  \  return null;\r

  }"
firstPositiveNumber: "function firstPositiveNumber(s) {\r

  \  return s ? Number(s.match(/\\d+/).shift()) : -1;\r

  }"
firstWord: function firstWord(s, allow_ = false) { return toWords(s, allow_)[0]; }
firstWordAfter: "function firstWordAfter(s, sub, allow_ = false) {\r

  \  let s1 = stringAfter(s, sub);\r

  \  let s2 = toWords(s1, allow_)[0]\r

  \  return s2;\r

  }"
fisherYates: "function fisherYates(arr) {\r

  \  if (arr.length == 2 && coin()) { return arr; }\r

  \  var rnd, temp;\r

  \  let last = arr[0];\r

  \  for (var i = arr.length - 1; i; i--) {\r

  \    rnd = Math.random() * i | 0;\r

  \    temp = arr[i];\r

  \    arr[i] = arr[rnd];\r

  \    arr[rnd] = temp;\r

  \  }\r

  \  return arr;\r

  }"
fit_points: "function fit_points(map, pts, padding = true) {\r

  \  let latlngs = to_lat_lng(pts);\r

  \  let o = L.latLngBounds(latlngs);\r

  \  map.fitBounds(o, { padding: padding ? [25, 25] : [0, 0] });\r

  }"
fitbit_open: "function fitbit_open(item) {\r

  \  console.log('FITBIT OPEN!!!!!!!!!!!!!!!')\r

  \  let d = iDiv(item);\r

  \  let d2 = mGrid(2, 1, d, { gap: 3, matop: 22 });\r

  \  let arr = DB.appdata.fitbit;\r

  \  let days = arr.length;\r

  \  let sum = arrSum(arr, 'steps');\r

  \  let opt = DB.apps.fitbit.options;\r

  \  let min_per_day = opt.min;\r

  \  let avg_per_day = opt.avg;\r

  \  let req_sum = avg_per_day * (days + 1);\r

  \  let req_today = Math.max(req_sum - sum, opt.min);\r

  \  let avg = sum / days;\r

  \  let davg = mDiv(d2, {}, null, `avg: ${avg.toFixed(1)}K`);\r

  \  let dtoday = mDiv(d2, {}, null, `req: ${Math.ceil(req_today)}K`);\r

  }"
fitFont: "function fitFont(text, fz = 20, w2 = 200, h2 = 100) {\r

  \  let e1, e2, r1, r2;\r

  \  e1 = mDiv(dTable, { w: w2, h: h2, display: 'inline-block' });\r

  \  do {\r

  \    e2 = mDiv(e1, { fz: fz, display: 'inline-block' }, null, text);\r

  \    r1 = getRect(e1);\r

  \    r2 = getRect(e2);\r

  \    e2.remove();\r

  \    fz -= 1;\r

  \  } while (r1.w * r1.h < r2.w * r2.h);\r

  \  e1.remove();\r

  \  return [fz + 1, r2.w, r2.h];\r

  }"
fitSvg: "function fitSvg(el) {\r

  \  const box = el.querySelector('text').getBBox();\r

  \  el.style.width = `${box.width}px`;\r

  \  el.style.height = `${box.height}px`;\r

  }"
fitText: "function fitText(text, rect, dParent, styles, classes) {\r

  \  let l = rect.cx - (rect.w / 2);\r

  \  let t = rect.cy - (rect.h / 2);\r

  \  if (dParent.style.position != 'absolute') dParent.style.position =
  'relative';\r

  \  let d = mDivPosAbs(l, t, dParent);\r

  \  styles.display = 'inline-block';\r

  \  styles.w = rect.w;\r

  \  let fz = 20; if (isdef(styles.fz)) fz = styles.fz;\r

  \  let over = textCorrectionFactor(text, styles, rect.w, rect.h, fz); let
  MAX = 20; let cnt = 0;\r

  \  let oldFz = 0; let oldOldFz = 0;\r

  \  while (over > 0 && fz >= 8) {\r

  \    cnt += 1; if (cnt > MAX) { console.log('MAX reached!!!'); break; }\r

  \    if (over == 0) break;\r

  \    oldOldFz = oldFz;\r

  \    oldFz = fz;\r

  \    fz = Math.round(fontTransition(fz, over));\r

  \    if (oldFz == fz || oldOldFz == fz) break;\r

  \    let newOver = textCorrectionFactor(text, styles, rect.w, rect.h, fz);\r

  \    over = newOver;\r

  \  }\r

  \  d.innerHTML = text;\r

  \  mStyleX(d, styles);\r

  \  return d;\r

  }"
fitWord: "function fitWord(text, rect, dParent, styles, classes) {\r

  \  let d = mDiv(dParent)\r

  \  styles.display = 'inline-block';\r

  \  let fz = rect.h;\r

  \  let over = wordCorrectionFactor(text, styles, rect.w, rect.h, fz); let
  MAX = 20; let cnt = 0;\r

  \  let oldFz = 0; let oldOldFz = 0;\r

  \  while (over > 0 && fz >= 8) {\r

  \    cnt += 1; if (cnt > MAX) { console.log('MAX reached!!!'); break; }\r

  \    if (over == 0) break;\r

  \    oldOldFz = oldFz;\r

  \    oldFz = fz;\r

  \    fz = Math.round(fontTransition(fz, over));\r

  \    if (oldFz == fz || oldOldFz == fz) break;\r

  \    let newOver = wordCorrectionFactor(text, styles, rect.w, rect.h, fz);\r

  \    over = newOver;\r

  \  }\r

  \  d.innerHTML = text;\r

  \  mStyleX(d, styles);\r

  \  return d;\r

  }"
fixedSizeGrid: "function fixedSizeGrid(m, d) {\r

  \  let rows = m.length;\r

  \  let cols = m[0].length;\r

  \  d.style.gridTemplateColumns = 'repeat(' + cols + ',1fr)'; // gtc.join('
  '); //'min-content 1fr 1fr min-content';// 'min-content'.repeat(rows);\r

  \  d.style.gridTemplateRows = 'repeat(' + rows + ',1fr)'; // //'min-content
  1fr 1fr min-content';// 'min-content'.repeat(rows);\r

  }"
fj: "function fj(x) {\r

  \  return formatjson(x);\r

  }"
flag_reset: function flag_reset(prop) { G[prop] = false; }
flag_set: function flag_set(prop) { G[prop] = true; }
flag_toggle: function flag_toggle(name) { if (G[name]) flag_reset(name); else
  flag_set(name); }
fleetingMessage: "function fleetingMessage(msg, d, styles, ms, fade) {\r

  \  if (isString(msg)) {\r

  \    dFleetingMessage.innerHTML = msg;\r

  \    mStyle(dFleetingMessage, styles);\r

  \  } else {\r

  \    mAppend(dFleetingMessage, msg);\r

  \  }\r

  \  if (fade) Animation1 = mAnimate(dFleetingMessage, 'opacity', [1, .4, 0],
  null, ms, 'ease-in', 0, 'both');\r

  \  return dFleetingMessage;\r

  }"
flower_draw: "function flower_draw(x, y, color, angle = 0, petalCount = 1,
  lineWidth = 3, sz = 10) {\r

  \  function createPetal(length, width) {\r

  \    const path = new Path2D();\r

  \    path.moveTo(0, 0);\r

  \    path.lineTo(length * 0.3, -width);\r

  \    path.lineTo(length * 0.8, -width);\r

  \    path.lineTo(length, 0);\r

  \    path.lineTo(length * 0.8, width);\r

  \    path.lineTo(length * 0.3, width);\r

  \    path.closePath();\r

  \    path.moveTo(0, 0);\r

  \    path.lineTo(length, 0);\r

  \    return path;\r

  \  }\r

  \  function drawPetals(x, y, count, startAt, petal) {\r

  \    const step = (Math.PI * 2) / count;\r

  \    CX.setTransform(1, 0, 0, 1, x, y);\r

  \    CX.rotate(startAt);\r

  \    for (var i = 0; i < count; i += 1) {\r

  \      CX.stroke(petal);\r

  \      CX.rotate(step);\r

  \    }\r

  \    CX.setTransform(1, 0, 0, 1, 0, 0);\r

  \  }\r

  \  CX.strokeStyle = color;\r

  \  CX.lineWidth = lineWidth;\r

  \  const size = 50;\r

  \  drawPetals(x, y, petalCount, angle, createPetal(sz, sz * .2));\r

  \  CX.beginPath();\r

  \  CX.arc(x, y, sz * .15, 0, Math.PI * 2);\r

  \  CX.fillStyle = color;\r

  \  CX.fill();\r

  }"
fmultiplier: function fmultiplier(f, g) { return x => f(x) * g(x); }
focusNextSiblingOrSubmitOnEnter: "function focusNextSiblingOrSubmitOnEnter(ev,
  id) {\r

  \  if (ev.key === 'Enter') {\r

  \    ev.preventDefault();\r

  \    let el = mBy(id); let tag = el.tagName.toLowerCase();\r

  \    if (tag == 'input') el.focus();\r

  \    else if (tag == 'form') {\r

  \      el.submit();\r

  \    }\r

  \  }\r

  }"
follows_in_rank: "function follows_in_rank(c1, c2, rankstr) {\r

  \  return get_rank_index(c2, rankstr) - get_rank_index(c1, rankstr) == 1;\r

  \  let i1 = rankstr.indexOf(c1[0]);\r

  \  let i2 = rankstr.indexOf(c2[0]);\r

  \  console.log('follows?', c1, i1, c2, i2, i2 - i1)\r

  \  return rankstr.indexOf(c2[0]) - rankstr.indexOf(c1[0]) == 1;\r

  }"
forAll: function forAll(arr, func) { for (const a of arr) if (!func(a)) return
  false; return true; }
format_currency: "function format_currency(num) {\r

  \  return '$' + num.toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r

  }"
format_date: "function format_date(date) {\r

  \  let d = new Date(date);\r

  \  let month = '' + (d.getMonth() + 1);\r

  \  let day = '' + d.getDate();\r

  \  let year = d.getFullYear();\r

  \  if (month.length < 2) month = '0' + month;\r

  \  if (day.length < 2) day = '0' + day;\r

  \  return [month, day, year].join('/');\r

  }"
format_datetime: "function format_datetime(timestamp, str = 'y-m-d_h:i:s.r') {\r

  \  if (isString(timestamp)) timestamp = Number(timestamp);\r

  \  const plus0 = num => `0${num.toString()}`.slice(-2)\r

  \  const d = new Date(timestamp)\r

  \  const year = d.getFullYear()\r

  \  const monthTmp = d.getMonth() + 1\r

  \  const month = plus0(monthTmp)\r

  \  const date = plus0(d.getDate())\r

  \  const hour = plus0(d.getHours())\r

  \  const minute = plus0(d.getMinutes())\r

  \  const second = plus0(d.getSeconds())\r

  \  const rest = timestamp.toString().slice(-5)\r

  \  let res = '';\r

  \  str = str.toLowerCase();\r

  \  for (let i = 0; i < str.length; i++) {\r

  \    let ch = str[i];\r

  \    res += (ch == 'y' ? year : ch == 'm' ? month : ch == 'd' ? date : ch ==
  'h' ? hour : ch == 'i' ? minute : ch == 's' ? second : ch == 'r' ? rest :
  ch);\r

  \  }\r

  \  return res;\r

  }"
format2Digits: 'function format2Digits(i) { return (i < 10) ? "0" + i : i; }'
formatDate: "function formatDate(d) {\r

  \  const date = isdef(d) ? d : new Date();\r

  \  const month = ('0' + date.getMonth()).slice(0, 2);\r

  \  const day = date.getDate();\r

  \  const year = date.getFullYear();\r

  \  const dateString = `${month}/${day}/${year}`;\r

  \  return dateString;\r

  }"
formatDate1: "function formatDate1(d) {\r

  \  if (nundef(d)) d = Date.now();\r

  \  let ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);\r

  \  let mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d);\r

  \  let da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);\r

  \  return `${da}-${mo}-${ye}`;\r

  }"
formatDate2: function formatDate2(d) { if (nundef(d)) d = new Date(); return
  d.toISOString().slice(0, 19).replace("T", " "); }
formatDate3: function formatDate3(d) { if (nundef(d)) d = new Date(); return
  d.toISOString().slice(0, 19).replace(/-/g, "/").replace("T", " "); }
formatJson: "function formatJson(o) {\r

  \  let s = '';\r

  \  for (const k in o) {\r

  \    if (isSimple(o[k])) s += k + ':' + o[k] + ' ';\r

  \  }\r

  \  return s;\r

  }"
formatjson: "function formatjson(j) {\r

  \  let s = JSON.stringify(j);\r

  \  s = s.replace(/\\s/g, '');\r

  \  return s;\r

  }"
formatll: "function formatll(ll) {\r

  \  if (!isll(ll)) return 'NOT list of lists!';\r

  \  let s = '[';\r

  \  for (const l of ll) {\r

  \    let content = isllPlus(l) ? formatll(l) : l.toString();\r

  \    s += '[' + content + ']';\r

  \  }\r

  \  s += ']';\r

  \  testHelpers(s);\r

  }"
formatNow: function formatNow() { return new Date().toISOString().slice(0,
  19).replace("T", " "); }
formula0: "function formula0(x, mean, stdev) {\r

  \  let v = stdev * stdev;\r

  \  let t = Math.sqrt(Math.PI * 2) * stdev;\r

  \  let t1 = 1 / t;\r

  \  let t2 = (x - mean) ** 2;\r

  \  let t3 = 2 * v;\r

  \  let t4 = -t2 / t3;\r

  \  let t5 = Math.E ** t4;\r

  \  return t1 * t5;\r

  }"
formula1: "function formula1(x) {\r

  \  return formula0(x, 100, 15);\r

  }"
foscillator: "function foscillator(exp, vars) {\r

  \  for (const v of vars) {\r

  \    [v.val, v.step] = oscillate_between(v.val, v.min, v.max, vstep);\r

  \    exp = replaceAll(exp, v.name, v.val);\r

  \  }\r

  \  return nerdamer('exp').buildFunction();\r

  }"
fp_card_selection: "function fp_card_selection() {\r

  \  let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A,
  Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  let selitems = A.selectedCards = A.selected.map(x => A.items[x]);\r

  \  let cards = selitems.map(x => x.o);\r

  \  let cmd = A.last_selected.key;\r

  \  if (cmd == 'discard') {\r

  \    if (selitems.length != 1) { select_error('select exactly 1 hand card to
  discard!'); return; }\r

  \    let item = selitems[0];\r

  \    if (!item.path.includes(`${uplayer}.hand`)) { select_error('select a
  hand card to discard!', () => { ari_make_unselected(item); A.selected = [];
  }); return; }\r

  \    assertion(DA.transactionlist.length == 0 || DA.simulate,
  '!!!!!!!!!!!!!!!!transactionlist is not empty!');\r

  \    if (DA.transactionlist.length > 0) {\r

  \      console.log('VERIFYING TRANSACTION............')\r

  \      let legal = verify_min_req();\r

  \      clear_transaction();\r

  \      if (legal) {\r

  \        ferro_process_discard();\r

  \      } else {\r

  \        ferro_transaction_error();\r

  \      }\r

  \    } else {\r

  \      ferro_process_discard();\r

  \    }\r

  \  } else if (cmd == 'jolly') {\r

  \    if (selitems.length != 2) { select_error('select a hand card and the
  jolly you want!'); return; }\r

  \    let handcard = selitems.find(x => !is_joker(x.o) &&
  x.path.includes(`${uplayer}.hand`));\r

  \    let jolly = selitems.find(x => is_joker(x.o) &&
  !x.path.includes(`${uplayer}.hand`));\r

  \    if (!isdef(handcard) || !isdef(jolly)) { select_error('select a hand
  card and the jolly you want!'); return; }\r

  \    let key = handcard.key;\r

  \    let j = path2fen(fen, jolly.path);\r

  \    if (!jolly_matches(key, j)) { select_error('your card does not match
  jolly!'); return; }\r

  \    if (pl.journeys.length == 0) { add_transaction(cmd); }\r

  \    ferro_process_jolly(key, j);\r

  \    take_turn_fen();\r

  \  } else if (cmd == 'auflegen') {\r

  \    if (selitems.length < 3) { select_error('select cards to form a
  group!'); return; }\r

  \    else if (pl.hand.length == selitems.length) { select_error('you need to
  keep a card for discard!!', clear_selection); return; }\r

  \    let newset = ferro_is_set(cards, Z.options.jokers_per_group);\r

  \    if (!newset) { select_error('this is NOT a valid set!'); return; }\r

  \    let is_illegal = is_correct_group_illegal(cards);\r

  \    if (is_illegal) { select_error(is_illegal); return; }\r

  \    if (pl.journeys.length == 0) { add_transaction(cmd); }\r

  \    let keys = newset;\r

  \    ferro_process_set(keys);\r

  \    take_turn_fen();\r

  \  } else if (cmd == 'anlegen') {\r

  \    if (selitems.length < 1) { select_error('select at least 1 hand card
  and the first card of a group!'); return; }\r

  \    else if (pl.hand.length == selitems.length - 1) { select_error('you
  need to keep a card for discard!!', clear_selection); return; }\r

  \    let handcards = selitems.filter(x => !is_joker(x.o) &&
  x.path.includes(`${uplayer}.hand`));\r

  \    let groupcard = selitems.find(x => !is_joker(x.o) &&
  !x.path.includes(`${uplayer}.hand`));\r

  \    if (isEmpty(handcards) || !isdef(groupcard)) { select_error('select 1
  or more hand cards and the first card of a group!'); return; }\r

  \    let hand_rank = handcards[0].key[0];\r

  \    let handcards_same_rank = handcards.every(x => x.key[0] ==
  hand_rank);\r

  \    let j = path2fen(fen, groupcard.path);\r

  \    if (is_group(j)) {\r

  \      if (!handcards_same_rank) { select_error('all hand cards must have
  the same rank!'); return; }\r

  \      let group_rank = groupcard.key[0];\r

  \      if (group_rank == hand_rank) {\r

  \        for (const h of handcards) {\r

  \          elem_from_to(h.key, fen.players[uplayer].hand, j);\r

  \        }\r

  \        if (pl.journeys.length == 0) { add_transaction(cmd); }\r

  \        take_turn_fen();\r

  \        return;\r

  \      } else {\r

  \        select_error('hand cards do not match the group!');\r

  \        return;\r

  \      }\r

  \    } else {\r

  \      let suit = get_sequence_suit(j);\r

  \      let handkeys = handcards.map(x => x.key);\r

  \      if (firstCond(handkeys, x => x[1] != suit)) { select_error('hand card
  suit does not match the group!'); return; }\r

  \      let ij = j.findIndex(x => is_jolly(x));\r

  \      let j_has_jolly = ij > -1;\r

  \      let rank_to_be_relaced_by_jolly = j_has_jolly ? find_jolly_rank(j) :
  null;\r

  \      let r = rank_to_be_relaced_by_jolly;\r

  \      if (r) {\r

  \        j[ij] = r + suit + 'n';\r

  \      }\r

  \      keys = handkeys.concat(j);\r

  \      let allcards = keys.map(x => ferro_get_card(x));\r

  \      let jneeded = sortCardItemsToSequence(allcards, undefined, 0);\r

  \      if (jneeded == 0) {\r

  \        let seq = allcards.map(x => x.key);\r

  \        if (r) { arrReplace1(seq, r + suit + 'n', '*Hn'); }\r

  \        j.length = 0;\r

  \        j.push(...seq);\r

  \        for (const k of handkeys) {
  removeInPlace(fen.players[uplayer].hand, k); }\r

  \        if (pl.journeys.length == 0) { add_transaction(cmd); }\r

  \        take_turn_fen();\r

  \      } else {\r

  \        if (r != null) { j[ij] = '*Hn'; }\r

  \        select_error('hand cards cannot be added to sequence!');\r

  \        return;\r

  \      }\r

  \    }\r

  \  }\r

  }"
fpowerer: function fpowerer(f, g) { return x => Math.pow(f(x), g(x)); }
fprime: "function fprime(exp) {\r

  \  return x => math.derivative(exp, 'x').evaluate({ x: x });\r

  }"
FR2SQ: function FR2SQ(f, r) { return ((21 + (f)) + ((r) * 10)); }
fractionConvert: "function fractionConvert(wp, diop) {\r

  \  let n = wp.result.number;\r

  \  let t = typeof n;\r

  \  if (isFractionType(n)) {\r

  \    wp.isFractionResult = true;\r

  \    wp.result.text = getTextForFraction(n.n, n.d);\r

  \  }\r

  }"
fractionsUnder1ByDenominator: "function fractionsUnder1ByDenominator() {\r

  \  let fr = {\r

  \    2: [1],\r

  \    3: [1, 2],\r

  \    4: [1, 3],\r

  \    5: [1, 2, 3, 4],\r

  \    6: [1, 5],\r

  \    7: [1, 2, 3, 4, 5, 6],\r

  \    8: [1, 3, 5, 7],\r

  \    9: [1, 2, 4, 5, 7, 8],\r

  \  };\r

  \  return fr;\r

  }"
fradd: "function fradd(card, targetgroup, targetcard) {\r

  \  let [oldgroup, oldindex] = untie_card(card);\r

  \  assertion(isdef(targetgroup.id), 'NO ID IN fradd!!!!!!!', targetgroup);\r

  \  add_card_to_group(card, oldgroup, oldindex, targetcard, targetgroup);\r

  \  if (targetgroup != oldgroup) cleanup_or_resplay(oldgroup);\r

  }"
freezeUI: "function freezeUI() {\r

  \  if (frozen) return;\r

  \  frozen = true;\r

  \  show('tempFreezer');\r

  }"
fritz: "function fritz() {\r

  \  const rankstr = 'A23456789TJQK*';\r

  \  function setup(players, options) {\r

  \    let fen = { players: {}, plorder: jsCopy(players), history: [],
  maxrounds: options.cycles * players.length };\r

  \    let n = players.length;\r

  \    fen.num_decks = 2 + (n >= 9 ? 2 : n >= 7 ? 1 : 0);\r

  \    fritz_new_table(fen, options);\r

  \    let deck = fen.deck;\r

  \    shuffle(fen.plorder);\r

  \    let starter = fen.starter = fen.plorder[0];\r

  \    fen.roundorder = jsCopy(fen.plorder);\r

  \    let handsize = valf(Number(options.handsize), 11);\r

  \    for (const plname of players) {\r

  \      let pl = fen.players[plname] = {\r

  \        hand: deck_deal(deck, plname == starter ? handsize + 1 :
  handsize),\r

  \        loosecards: [],\r

  \        time_left: options.seconds_per_game * 1000,\r

  \        score: 0,\r

  \        name: plname,\r

  \        color: get_user_color(plname),\r

  \      };\r

  \    }\r

  \    [fen.phase, fen.stage, fen.turn] = ['', 'card_selection', [starter]];\r

  \    return fen;\r

  \  }\r

  \  function activate_ui() { fritz_activate_ui(); }\r

  \  function check_gameover() { return isdef(Z.fen.winners) ? Z.fen.winners :
  false; }\r

  \  function present(dParent) { fritz_present(dParent); }\r

  \  function stats(dParent) { fritz_stats(dParent); }\r

  \  function state_info(dParent) { fritz_state_info(dParent); }\r

  \  return { rankstr, setup, activate_ui, check_gameover, present,
  state_info, stats };\r

  }"
fritz_activate_ui: "function fritz_activate_ui() {\r

  \  let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A,
  Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  A.autosubmit = false;\r

  \  new_cards_animation(1);\r

  \  round_change_animation(1);\r

  \  select_add_items(ui_get_hand_items(uplayer), end_of_turn_fritz, 'must
  drag drop cards to assemble groups, then discard 1 hand card', 0, 1);\r

  \  A.items.map(x => iDiv(x).onclick = ev => {\r

  \    let card = Items[x.id];\r

  \    let item = x;\r

  \    clear_quick_buttons();\r

  \    select_last(item, select_toggle, ev);\r

  \    if (item.index == A.selected[0]) {\r

  \      let pos = get_mouse_pos(ev);\r

  \      let b = DA.bQuick = mButton('discard', ev => {\r

  \        b.remove();\r

  \        end_of_turn_fritz();\r

  \      }, document.body, { position: 'absolute', left: pos.x - 40, top:
  pos.y - 10 }, 'selectbutton');\r

  \    }\r

  \  });\r

  \  UI.timer = select_timer(fen.players[uplayer].time_left +
  Z.options.seconds_per_move * 1000, end_of_turn_fritz);\r

  }"
fritz_card: "function fritz_card(ckey, h, w, ov, draggable) {\r

  \  let type = ckey[2];\r

  \  let info = ckey[0] == '*' ? get_joker_info() :
  jsCopy(C52Cards[ckey.substring(0, 2)]);\r

  \  info.key = ckey;\r

  \  info.cardtype = ckey[2];\r

  \  let [r, s] = [info.rank, info.suit];\r

  \  info.val = r == '*' ? 25 : r == 'A' ? 1 : 'TJQK'.includes(r) ? 10 :
  Number(r);\r

  \  info.color = RED;\r

  \  info.sz = info.h = valf(h, Config.ui.card.h);\r

  \  info.w = valf(w, info.sz * .7);\r

  \  info.irank = '23456789TJQKA*'.indexOf(r);\r

  \  info.isuit = 'SHCDJ'.indexOf(s);\r

  \  info.isort = info.isuit * 14 + info.irank;\r

  \  let card = cardFromInfo(info, h, w, ov);\r

  \  card.id = iDiv(card).id = getUID('c');\r

  \  Items[card.id] = card;\r

  \  if (draggable && Z.role == 'active') mDraggable(card);\r

  \  return card;\r

  }"
fritz_get_card: function fritz_get_card(ckey, h, w, ov = .25) { return
  fritz_card(ckey, h, w, ov, true); }
fritz_get_hint_card: function fritz_get_hint_card(ckey) { return
  fritz_card(ckey, 50, 30, .25, false); }
fritz_new_player_hands: "function fritz_new_player_hands(fen, starter, options)
  {\r

  \  let handsize = options.handsize;\r

  \  let deck = fen.deck;\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    pl.hand = deck_deal(deck, plname == starter ? handsize + 1 :
  handsize);\r

  \    pl.loosecards = [];\r

  \    pl.time_left = options.seconds_per_game * 1000;\r

  \    pl.roundchange = true;\r

  \    delete pl.handsorting;\r

  \    delete pl.newcards;\r

  \  }\r

  }"
fritz_new_table: "function fritz_new_table(fen, options) {\r

  \  fen.deck = create_fen_deck('n', fen.num_decks, 0);\r

  \  fen.deck_discard = [];\r

  \  fen.journeys = [];\r

  \  fen.loosecards = arrRepeat(options.jokers, '*Hn');\r

  \  shuffle(fen.deck);\r

  }"
fritz_present: "function fritz_present(dParent) {\r

  \  DA.hovergroup = null;\r

  \  let [fen, ui, uplayer, stage, pl] = [Z.fen, UI, Z.uplayer, Z.stage,
  Z.pl];\r

  \  let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent);
  mFlexWrap(dOpenTable)\r

  \  Config.ui.card.h = 130;\r

  \  Config.ui.container.h = Config.ui.card.h + 30;\r

  \  if (isEmpty(fen.deck_discard)) {\r

  \    mText('discard pile is empty!', dOpenTable);\r

  \    ui.deck_discard = { items: [] }\r

  \  } else {\r

  \    mText('discard pile:', dOpenTable); mLinebreak(dOpenTable);\r

  \    let deck_discard = ui.deck_discard = ui_type_hand(fen.deck_discard,
  dOpenTable, { maright: 25 }, 'deck_discard', null, fritz_get_card, true);\r

  \    let i = 0; deck_discard.items.map(x => { x.source = 'discard'; x.index
  = i++ });\r

  \  }\r

  \  mLinebreak(dOpenTable);\r

  \  mDiv(dOpenTable, { box: true, w: '100%' }, null, '<hr>');\r

  \  let ddarea = UI.ddarea = mDiv(dOpenTable, { border: 'dashed 1px black',
  bg: '#eeeeee80', box: true, hmin: 162, wmin: 245, padding: '5px 50px 5px 5px',
  margin: 5 });\r

  \  mDroppable(ddarea, drop_card_fritz, dragover_fritz); ddarea.id =
  'dOpenTable'; Items[ddarea.id] = ddarea;\r

  \  mFlexWrap(ddarea)\r

  \  fritz_stats(dRechts);\r

  \  show_history(fen, dRechts);\r

  \  DA.TJ = [];\r

  \  for (const j of fen.journeys) {\r

  \    let cards = j.map(x => fritz_get_card(x));\r

  \    frnew(cards[0], { target: 'hallo' });\r

  \    for (let i = 1; i < cards.length; i++) { fradd(cards[i],
  Items[cards[0].groupid]); }\r

  \  }\r

  \  let loosecards = ui.loosecards = jsCopy(fen.loosecards).map(c =>
  fritz_get_card(c));\r

  \  for (const plname of fen.plorder) {\r

  \    let cards = fen.players[plname].loosecards.map(c =>
  fritz_get_card(c));\r

  \    cards.map(x => x.owner = plname);\r

  \    loosecards = loosecards.concat(cards);\r

  \  }\r

  \  for (const looseui of loosecards) {\r

  \    let card = looseui;\r

  \    frnew(card, { target: 'hallo' });\r

  \  }\r

  \  for (const group of DA.TJ) {\r

  \    assertion(isdef(group.id), 'no group id', group);\r

  \    let d = iDiv(group);\r

  \    let ch = arrChildren(iDiv(group));\r

  \    let cards = ch.map(x => Items[x.id]);\r

  \    cards.map(x => mDroppable(x, drop_card_fritz, dragover_fritz));\r

  \  }\r

  \  if (arrChildren(ddarea).length == 0) {\r

  \    let d = mDiv(ddarea, { 'pointer-events': 'none', maleft: 45, align:
  'center', hmin: 40, w: '100%', fz: 12, fg: 'dimgray' }, 'ddhint', 'drag and
  drop cards here');\r

  \  }\r

  \  ui.players = {};\r

  \  let uname_plays = fen.plorder.includes(Z.uname);\r

  \  let plmain = uname_plays && Z.mode == 'multi' ? Z.uname : uplayer;\r

  \  fritz_present_player(plmain, dMiddle);\r

  \  if (TESTING) {\r

  \    for (const plname of arrMinus(fen.plorder, plmain)) {\r

  \      fritz_present_player(plname, dMiddle);\r

  \    }\r

  \  }\r

  \  show_handsorting_buttons_for(Z.mode == 'hotseat' ? Z.uplayer : Z.uname, {
  left: 58, bottom: -1 });\r

  }"
fritz_present_new: "function fritz_present_new(z, dParent, uplayer) {\r

  \  DA.hovergroup = null;\r

  \  let [fen, ui, stage] = [z.fen, UI, z.stage];\r

  \  console.log('role', Z.role)\r

  \  let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent);
  mFlexWrap(dOpenTable)\r

  \  Config.ui.card.h = 130;\r

  \  Config.ui.container.h = Config.ui.card.h + 30;\r

  \  if (isEmpty(fen.deck_discard)) {\r

  \    mText('discard empty', dOpenTable);\r

  \    ui.deck_discard = { items: [] }\r

  \  } else {\r

  \    let deck_discard = ui.deck_discard = ui_type_hand(fen.deck_discard,
  dOpenTable, { maright: 25 }, 'deck_discard', 'discard', fritz_get_card,
  true);\r

  \    let i = 0; deck_discard.items.map(x => { x.source = 'discard'; x.index
  = i++ });\r

  \  }\r

  \  mLinebreak(dOpenTable);\r

  \  let ddarea = UI.ddarea = mDiv(dOpenTable, { border: 'dashed 1px black',
  bg: '#eeeeee80', box: true, hmin: 162, wmin: 245, padding: '5px 50px 5px 5px',
  margin: 5 });\r

  \  mDroppable(ddarea, drop_card_fritz); ddarea.id = 'dOpenTable';
  Items[ddarea.id] = ddarea;\r

  \  mFlexWrap(ddarea)\r

  \  fritz_stats_new(z, dRechts);\r

  \  show_history(fen, dRechts);\r

  \  DA.TJ = [];\r

  \  for (const j of fen.journeys) {\r

  \    let cards = j.map(x => fritz_get_card(x));\r

  \    frnew(cards[0], { target: 'hallo' });\r

  \    for (let i = 1; i < cards.length; i++) { fradd(cards[i],
  Items[cards[0].groupid]); }\r

  \  }\r

  \  let loosecards = ui.loosecards = jsCopy(fen.loosecards).map(c =>
  fritz_get_card(c));\r

  \  for (const plname of fen.plorder) {\r

  \    let cards = fen.players[plname].loosecards.map(c =>
  fritz_get_card(c));\r

  \    cards.map(x => x.owner = plname);\r

  \    loosecards = loosecards.concat(cards);\r

  \  }\r

  \  for (const looseui of loosecards) {\r

  \    let card = looseui;\r

  \    frnew(card, { target: 'hallo' });\r

  \  }\r

  \  for (const group of DA.TJ) {\r

  \    assertion(isdef(group.id), 'no group id', group);\r

  \    let d = iDiv(group);\r

  \    let ch = arrChildren(iDiv(group));\r

  \    let cards = ch.map(x => Items[x.id]);\r

  \    cards.map(x => mDroppable(x, drop_card_fritz));\r

  \  }\r

  \  if (arrChildren(ddarea).length == 0) {\r

  \    let d = mDiv(ddarea, { 'pointer-events': 'none', maleft: 45, align:
  'center', hmin: 40, w: '100%', fz: 12, fg: 'dimgray' }, 'ddhint', 'drag and
  drop cards here');\r

  \  }\r

  \  ui.players = {};\r

  \  let uname_plays = fen.plorder.includes(Z.uname);\r

  \  let plmain = uname_plays && Z.mode == 'multi' ? Z.uname : uplayer;\r

  \  fritz_present_player(plmain, dMiddle);\r

  \  if (TESTING) {\r

  \    for (const plname of arrMinus(fen.plorder, plmain)) {\r

  \      fritz_present_player(plname, dMiddle);\r

  \    }\r

  \  }\r

  }"
fritz_present_player: "function fritz_present_player(playername, dMiddle) {\r

  \  let [fen, ui, stage] = [Z.fen, UI, Z.stage];\r

  \  let pl = fen.players[playername];\r

  \  let playerstyles = { w: '100%', bg: '#ffffff80', fg: 'black', padding: 4,
  margin: 4, rounding: 10, border: `2px ${get_user_color(playername)} solid`
  };\r

  \  let d = mDiv(dMiddle, playerstyles, null, get_user_pic_html(playername,
  25)); mFlexWrap(d); mLinebreak(d, 10);\r

  \  //#region old handsorting code\r

  \  //#endregion\r

  \  pl.hand = correct_handsorting(pl.hand, playername);\r

  \  let upl = ui.players[playername] = { div: d };\r

  \  upl.hand = ui_type_hand(pl.hand, d, {}, `players.${playername}.hand`,
  'hand', fritz_get_card);\r

  \  upl.hand.items.map(x => x.source = 'hand');\r

  \  let ploose = pl.loosecards;\r

  \  if (!isEmpty(ploose)) {\r

  \    upl.loose = ui_type_market(ploose, d, {},
  `players.${playername}.loose`, 'untouchables', fritz_get_hint_card);\r

  \    upl.loose.items.map(x => x.source = 'loose');\r

  \  } else {\r

  \  }\r

  }"
fritz_state_info: "function fritz_state_info(dParent) {\r

  \  let user_html = get_user_pic_html(Z.uplayer, 30);\r

  \  dParent.innerHTML = `Round ${Z.round}:&nbsp;player: ${user_html} `;\r

  }"
fritz_stats: "function fritz_stats(dParent) {\r

  \  let player_stat_items = UI.player_stat_items = ui_player_info(dParent);\r

  \  let fen = Z.fen;\r

  \  console.log('players', get_keys(fen.players));\r

  \  for (const plname in fen.players) {\r

  \    let pl = fen.players[plname];\r

  \    console.log('uname', plname);\r

  \    let item = player_stat_items[plname];\r

  \    let d = iDiv(item); mCenterFlex(d); mLinebreak(d);\r

  \    player_stat_count('hand with fingers splayed',
  calc_hand_value(pl.hand.concat(pl.loosecards), fritz_get_card), d);\r

  \    player_stat_count('star', pl.score, d);\r

  \    if (fen.turn.includes(plname)) { show_hourglass(plname, d, 30, { left:
  -3, top: 0 }); }\r

  \    else if (!fen.plorder.includes(plname)) mStyle(d, { opacity: 0.5 });\r

  \  }\r

  }"
fritz_stats_new: "function fritz_stats_new(z, dParent) {\r

  \  let player_stat_items = UI.player_stat_items = ui_player_info(z,
  dParent);\r

  \  let fen = z.fen;\r

  \  for (const uname in fen.players) {\r

  \    let pl = fen.players[uname];\r

  \    let item = player_stat_items[uname];\r

  \    let d = iDiv(item); mCenterFlex(d); mLinebreak(d);\r

  \    player_stat_count('hand with fingers splayed',
  calc_hand_value(pl.hand.concat(pl.loosecards), fritz_get_card), d);\r

  \    player_stat_count('star', pl.score, d);\r

  \    if (fen.turn.includes(uname)) { show_hourglass(uname, d, 30, { left:
  -3, top: 0 }); }\r

  \    else if (!fen.plorder.includes(uname)) mStyle(d, { opacity: 0.5 });\r

  \  }\r

  }"
frnew: "function frnew(card, ev) {\r

  \  let [oldgroup, oldindex] = untie_card(card);\r

  \  let id = getUID('g');\r

  \  let d = mDiv(Items.dOpenTable, { display: 'grid', margin: 10 }, id);\r

  \  let targetgroup = { div: d, id: id, ids: [], ov: .5222 };\r

  \  assertion(isdef(DA.TJ), 'DA.TJ undefined in frnew!!!');\r

  \  DA.TJ.push(targetgroup);\r

  \  Items[id] = targetgroup;\r

  \  assertion(isdef(targetgroup.id), 'NO ID IN frnew!!!!!!!', targetgroup);\r

  \  add_card_to_group(card, oldgroup, oldindex, null, targetgroup);\r

  \  if (targetgroup != oldgroup) cleanup_or_resplay(oldgroup);\r

  }"
from_lat_lng: function from_lat_lng(p) { return [p.lat, p.lng]; }
from_lat_long: function from_lat_long(p) { return from_lat_lng(p); }
from_server: "function from_server(result, type) {\r

  \  if (type == \"modify_table\") { console.log('______from server:', type,
  '\\nresult:', result); }\r

  \  if (result.trim() == \"\") return;\r

  \  var obj = JSON.parse(result);\r

  \  convert_from_server(obj);\r

  \  switch (type) {\r

  \    case \"intro\": got_intro(obj); break;\r

  \    case 'non_admin_reload': got_non_admin_reload(obj); break;\r

  \    case \"games\": got_games(obj); break;\r

  \    case \"play_start\": got_play_start(obj); break;\r

  \    case \"play\": got_play(obj); break;\r

  \    case 'modify_table': got_modify_table(obj); break;\r

  \    case 'create_table_and_start': got_create_table(obj); break;\r

  \    case 'send_move': got_send_move(obj); break;\r

  \    case 'seen': poll_for_table_seen_or_deleted(); break;\r

  \    case 'standard_assets':\r

  \    case 'assets': assets_parse(obj.response); break;\r

  \    case 'dictionary': got_dictionary(obj); break;\r

  \    case \"get_tables\": got_tables(obj); break;\r

  \    case \"get_user_game_tables\": got_user_game_tables(obj); break;\r

  \    case \"poll_table_started\": check_poll_table_started(obj); break;\r

  \    case \"poll_table_show\": check_poll_table_show(obj); break;\r

  \    case \"poll_table_seen\": check_poll_table_seen(obj); break;\r

  \    case \"get_past_tables\": test_user_endscreen(obj); break;\r

  \    case \"contacts\": present_contacts(obj); break;\r

  \    case \"login\": present_login(obj); break;\r

  \    case \"dbsave\": console.log('db has been saved to server:'); break;\r

  \    case 'delete_table': get_games(obj); break;\r

  \    case 'save_and_delete': alert(`${obj.message}, ranking:${obj.fen}`);\r

  \      console.assert(is_admin(), 'SAVE_AND_DELETE NOT SENT BEI
  ADMIN!!!!');\r

  \      get_games();\r

  \      break;\r

  \    //#region sequence if dont join players automatically\r

  \    case 'create_table':\r

  \      Session.cur_tid = obj.table.id;\r

  \      Session.cur_table = obj.table;\r

  \      break;\r

  \    case \"join_table\":\r

  \      status_message('You have joined the game! Wait for the host to start
  it!');\r

  \      update_cur_table(obj, 'red');\r

  \      break;\r

  \    case \"toggle_join\":\r

  \      let t = obj.table;\r

  \      let st = obj.player_status;\r

  \      update_cur_table(obj, st == 'joined' ? 'red' : 'orange');\r

  \      status_message(`You have ${st == 'joined' ? 'joined' : 'left'} the
  game! Wait for the host to start it!`);\r

  \      break;\r

  \    case \"start_table\":\r

  \      update_cur_table(obj, 'green');\r

  \      status_message('You have started the game! ', obj.table.status);\r

  \      break;\r

  \    //#endregion\r

  \    default: break;\r

  \  }\r

  \  danext();\r

  }"
fromArray: "function fromArray(arr) {\r

  \  return colorArrToString(...arr);\r

  }"
fromArrayDarker: "function fromArrayDarker(arr) {\r

  \  let c = fromArray(arr);\r

  \  return pSBC(-0.4, c);\r

  }"
fromArrayLighter: "function fromArrayLighter(arr) {\r

  \  let c = fromArray(arr);\r

  \  return pSBC(0.4, c);\r

  }"
fromLocalStorage: function fromLocalStorage(name = '_all') { return
  JSON.parse(localStorage.getItem(name)); }
fromRCMxToNumArrSq: "function fromRCMxToNumArrSq(f, r) {\r

  \  return ((21 + (f)) + ((r) * 10));\r

  }"
FROMSQ: function FROMSQ(m) { return (m & 0x7F); }
fromUmlaut: "function fromUmlaut(w) {\r

  \  if (isList(w)) {\r

  \    let res = [];\r

  \    for (const w1 of w) res.push(fromUmlaut(w1));\r

  \    return res;\r

  \  } else {\r

  \    w = replaceAll(w, 'ü', 'ue');\r

  \    w = replaceAll(w, 'ä', 'ae');\r

  \    w = replaceAll(w, 'ö', 'oe');\r

  \    w = replaceAll(w, 'Ü', 'UE');\r

  \    w = replaceAll(w, 'Ä', 'AE');\r

  \    w = replaceAll(w, 'Ö', 'OE');\r

  \    return w;\r

  \  }\r

  }"
fromYaml: function fromYaml(x) { return jsyaml.load(x); }
fsubtracter: function fsubtracter(f, g) { return x => f(x) - g(x); }
fullViewObjects: function fullViewObjects() { let ids = getDefaultObjectIds();
  ids.map(x => UIS[x].maximize()); }
fun1: function fun1(x) { return Math.sin(x); }
fun2: function fun2(x) { return Math.cos(3 * x); }
fundef: "function fundef(x) {\r

  \  return x === undefined || !x;\r

  }"
funGraph: "function funGraph(ctx, axes, func, color, thick) {\r

  \  var xx, yy, dx = 4, x0 = axes.x0, y0 = axes.y0, scale = axes.scale;\r

  \  var iMax = Math.round((ctx.canvas.width - x0) / dx);\r

  \  var iMin = axes.doNegativeX ? Math.round(-x0 / dx) : 0;\r

  \  ctx.beginPath();\r

  \  ctx.lineWidth = thick;\r

  \  ctx.strokeStyle = color;\r

  \  for (var i = iMin; i <= iMax; i++) {\r

  \    xx = dx * i; yy = scale * func(xx / scale);\r

  \    if (i == iMin) ctx.moveTo(x0 + xx, y0 - yy);\r

  \    else ctx.lineTo(x0 + xx, y0 - yy);\r

  \  }\r

  \  ctx.stroke();\r

  }"
G_clear: function G_clear() { gameloop_stop(); clear_timeouts();
  mClear('dTable'); C = G = CV = CX = null; }
G_init: "function G_init(name) {\r

  \  if (CV) G_clear();\r

  \  [dLeft, dCenter] = mColFlex(dTable, [0, 5]);\r

  \  let res = mCanvas(dCenter, { w: 500, h: 500, bg: '#222', rounding: 10
  });\r

  \  [CV, CX] = [res.cv, res.cx];\r

  \  let bpp = _mPlayPause(dCenter, { fz: 28, fg: 'lightgreen', display:
  'flex', ajcenter: true }, onclick_playpause);\r

  \  G = { running: false, bPP: bpp };\r

  \  C = { changed: true, name: name, items: {}, root: get_func(name,
  'init')() };\r

  }"
g4: "function g4(x, mean, stdev) {\r

  \  let variance = stdev * stdev;\r

  \  var y = mean / Math.E ** (((x) ** 2) / (2 * variance)); return y;\r

  }"
g5: "function g5(x, mean, stdev) {\r

  \  x = (x - mean) / stdev;\r

  \  return Math.pow(Math.E, -Math.pow(x, 2) / 2) / Math.sqrt(2 * Math.PI);\r

  }"
g6: "function g6(x, mean, stdev) {\r

  \  x = (x - mean) / stdev;\r

  \  return Math.E ** (-(x ** 2) / 2) / Math.sqrt(2 * Math.PI);\r

  }"
g7: "function g7(x, mean, stdev) {\r

  \  x = (x - mean);\r

  \  let v = stdev * stdev;\r

  \  return Math.E ** (-(x ** 2) / (2 * v)) / Math.sqrt(v * 2 * Math.PI);\r

  }"
g8: "function g8(x, mean, stdev) {\r

  \  const dividend = Math.E ** -((x - mean) ** 2 / (2 * stdev ** 2));\r

  \  const divisor = stdev * Math.sqrt(2 * Math.PI); return dividend /
  divisor;\r

  }"
g9: "function g9(x, mean, stdev) {\r

  \  let f = new Gaussian(mean, stdev ** 2);\r

  \  console.log('f', f)\r

  \  return f.pdf(x);\r

  }"
gaChar: "function gaChar(key) {\r

  \  return String.fromCharCode('0x' + gaChars[key]); //'f520');\r

  }"
game_add_default_item: "function game_add_default_item(ev) {\r

  \  evNoBubble(ev);\r

  \  let sz = 50;\r

  \  let [x, y] = [ev.clientX - sz / 2, ev.clientY - sz / 2];\r

  \  let item = { styles: { position: 'absolute', x: x, y: y, w: sz, h: sz,
  bg: 'random', fg: 'contrast' }, init: true, refresh: true, draw: draw_dom };\r

  \  game_add_item(item);\r

  }"
game_add_item: "function game_add_item(item) {\r

  \  addKeys({ init: true, refresh: true, draw: draw_dom }, item);\r

  \  G.items.push(item);\r

  }"
game_interrupt: "function game_interrupt() {\r

  \  if (!mBy('radio_play').checked) return;\r

  \  interrupt();\r

  \  GAME_PLAY_UI = null;\r

  }"
game_resume_or_start: "function game_resume_or_start() {\r

  \  if (isdef(Session.game)) mBy(\"inner_left_panel\").innerHTML =
  game.screen;\r

  \  else { game_start_new(); }\r

  \  game.run();\r

  }"
game_start_new: "function game_start_new() {\r

  \  console.log('start a new game')\r

  }"
GameButton: "function GameButton(label) {\r

  \  this.clicked = false;\r

  \  this.button = document.createElement(\"button\");\r

  \  this.button.setAttribute(\"type\", \"button\");\r

  \  this.button.innerHTML = label;\r

  \  this.button.style.position = \"absolute\";\r

  \  this.button.style.left = \"0px\";\r

  \  this.button.style.top = \"0px\";\r

  \  this.button.onmousedown = function () {\r

  \    this.clicked = true;\r

  \  }\r

  \  this.button.ontouchstart = function () {\r

  \    this.clicked = true;\r

  \  }\r

  \  this.button.onmouseup = function () {\r

  \    this.clicked = false;\r

  \  }\r

  \  this.isClicked = function () {\r

  \    return this.button.clicked;\r

  \  }\r

  \  this.setPos = function (left, top) {\r

  \    this.button.style.left = left + \"px\";\r

  \    this.button.style.top = top + \"px\";\r

  \  }\r

  \  this.setPosition = function (left, top) {\r

  \    this.setPos(left, top);\r

  \  }\r

  \  this.setSize = function (width, height) {\r

  \    this.button.style.width = width + \"px\";\r

  \    this.button.style.height = height + \"px\";\r

  \  }\r

  \  document.body.appendChild(this.button);\r

  }"
GameFunc: "function GameFunc() {\r

  \  this.panel = new Panel();\r

  \  this.run = function () {\r

  \    this.panel.start();\r

  \  }\r

  }"
gameItem: "function gameItem(name, color) { return mItem(name2id(name), null, {
  color: isdef(color) ? color : randomColor(), name: name }); }"
gameloop: "function gameloop() {\r

  \  for (const item of G.items) {\r

  \    let changed = item.update();\r

  \    if (changed) item.draw();\r

  \  }\r

  }"
gameloop_start: function gameloop_start() { TO.ivdraw = setInterval(gameloop,
  1000 / FR); G.items.map(x => x.draw()); G.running = true; }
gameloop_stop: function gameloop_stop() { clear_timeouts(); if (G) G.running = false; }
gameloop_toggle: function gameloop_toggle() { if (G.running === true)
  gameloop_stop(); else gameloop_start(); }
gameOver: function gameOver(msg, silent = false) { TOMain =
  setTimeout(aniGameOver(msg, silent), DELAY); }
gameStep: "function gameStep(data) {\r

  \  DELETED_THIS_ROUND = [];\r

  \  processData(data);\r

  \  if (flags.specAndDOM) specAndDOM([gameStepII]); else gameStepII();\r

  }"
gamestep: "function gamestep() {\r

  \  show_admin_ui();\r

  \  DA.running = true; clear_screen(); dTable = mBy('dTable');
  mClass('dTexture', 'wood');\r

  \  if (Z.game == 'aristo') { if (Z.role != Clientdata.role || Z.mode ==
  'multi' && Z.role != 'active') mFall(dTable); Clientdata.role = Z.role; }\r

  \  else mFall(dTable);\r

  \  shield_off();\r

  \  show_title();\r

  \  show_role();\r

  \  Z.func.present(dTable);\r

  \  if (isdef(Z.scoring.winners)) { show_winners();
  animatedTitle('GAMEOVER!'); }\r

  \  else if (Z.func.check_gameover(Z)) {\r

  \    let winners = show_winners();\r

  \    Z.scoring = { winners: winners }\r

  \    sendgameover(winners[0], Z.friendly, Z.fen, Z.scoring);\r

  \  } else if (is_shield_mode()) {\r

  \    staticTitle();\r

  \    if (!DA.no_shield == true) { hide('bRestartMove'); shield_on(); }\r

  \    autopoll();\r

  \  } else {\r

  \    Z.A = { level: 0, di: {}, ll: [], items: [], selected: [], tree: null,
  breadcrumbs: [], sib: [], command: null, autosubmit: Config.autosubmit };\r

  \    copyKeys(jsCopy(Z.fen), Z);\r

  \    copyKeys(UI, Z);\r

  \    activate_ui(Z);\r

  \    Z.func.activate_ui();\r

  \    if (Z.isWaiting == true || Z.mode != 'multi') staticTitle(); else
  animatedTitle();\r

  \    if (Z.options.zen_mode != 'yes' && Z.mode != 'hotseat' &&
  Z.fen.keeppolling && Z.uplayer_data.player_status != 'stop') {\r

  \      autopoll();\r

  \      console.log('gamestep autopoll');\r

  \    }\r

  \  }\r

  \  if (TESTING == true) landing();\r

  }"
gameStep1: "function gameStep1(data) {\r

  \  G.serverData = data;\r

  \  DELETED_THIS_ROUND = [];\r

  \  processData(data);\r

  \  if (flags.specAndDOM) specAndDOM([gameStepII]); else gameStepII();\r

  }"
gameStepII: "function gameStepII() {\r

  \  if (S_useSimpleCode) { presentTableSimple(); presentPlayersSimple(); }\r

  \  else { presentTable(); presentPlayers(); }\r

  \  presentStatus();\r

  \  presentLog();\r

  \  if (G.end) { presentEnd(); return; }\r

  \  if (G.tupleGroups) {\r

  \    presentActions();\r

  \    startInteraction();\r

  \  } else presentWaitingFor();\r

  }"
gameView: "function gameView() {\r

  \  setIsReallyMultiplayer();\r

  \  if (!isReallyMultiplayer) {\r

  \    hide('c_b_PollStatus');\r

  \  }\r

  \  document.title = GAME + ' ' + USERNAME;\r

  \  view = 'game'; isPlaying = true;\r

  \  hideLobby(); hideLogin(); showGame();\r

  \  removeAllGlobalHandlers();\r

  \  addGameViewHandlers();\r

  }"
gAnagram: "function gAnagram() {\r

  \  function anagram_fen() {\r

  \    return { key: Goal.key, lang: Goal.lang, inputs:
  collect_innerHTML(Goal.inputs, ':'), letters: collect_innerHTML(Goal.letters,
  ':') };\r

  \  }\r

  \  function anagram_prompt(g, fen) {\r

  \    let [vocab, lang, min, max] = [g.vocab, isdef(fen) ? fen.lang : g.lang,
  g.minWordLength, g.maxWordLength];\r

  \    let keypool = KeySets[vocab];\r

  \    keypool = keypool.filter(x => { let w = Syms[x][lang]; let l =
  w.length; return w.indexOf(' ') < 0 && l >= min && l <= max; });\r

  \    let key = isdef(fen) ? fen.key : chooseRandom(keypool); //'carpentry
  saw'; \r

  \    let pic = mSym(key, dTable, { fz: 100, opacity: g.hidden ? 0 : 1 });\r

  \    if (g.hidden) {\r

  \      let d = pic;\r

  \      let r = getRect(d, dTable);\r

  \      let dHint = mDiv(dTable, { opacity: 0, position: 'absolute', align:
  'center', left: 0, w: '100%', top: r.t + r.h / 2 }, null, 'category: ' +
  Syms[key].subgroup);\r

  \      animatePropertyX(dHint, 'opacity', [0, 0, 1], 2000, 'both',
  'ease-in', 6000);\r

  \    }\r

  \    let word = Syms[key][lang].toUpperCase();\r

  \    Goal = { div: pic, key: key, word: word, lang: lang };\r

  \    mLinebreak(dTable, 12);\r

  \    let wTotal = getRect(mBy('table')).w;\r

  \    Goal.inputs = show_letter_inputs(word, dTable, wTotal);\r

  \    mLinebreak(dTable, 12);\r

  \    Goal.letters = show_dd_click_letters(word, dTable, wTotal);\r

  \    if (isdef(fen) && isdef(fen.inputs)) {\r

  \      distribute_innerHTML(Goal.inputs, fen.inputs, ':');\r

  \      distribute_innerHTML(Goal.letters, fen.letters, ':');\r

  \    } else {\r

  \      mLinebreak(dTable, 12);\r

  \      Goal.bDone = mButton('Done!', anagram_eval, dTable, { fz: 28, matop:
  10, rounding: 10, hpadding: 16, border: 8 }, ['buttonClass']);\r

  \    }\r

  \  }\r

  \  function anagram_eval() {\r

  \    if (!canAct()) return;\r

  \    uiActivated = false; clear_timeouts();\r

  \    let answer = collect_innerHTML(Goal.inputs);\r

  \    let is_correct = answer == Goal.word;\r

  \    let is_word;\r

  \    if (!is_correct && answer.length == Goal.word.length &&
  is_a_word(answer.toLowerCase(), Session.lang)) is_word = true;\r

  \    Selected = { answer: answer, reqAnswer: Goal.word, feedbackUI:
  Goal.inputs.map(x => iDiv(x)) };\r

  \    race_set_fen();\r

  \    race_update_my_score(is_correct ? 1 : is_word ? 0 : -1);\r

  \    let delay = anagram_feedback(is_correct, is_word);\r

  \    setTimeout(() => {\r

  \      in_game_open_prompt_off();\r

  \      clear_table_events();\r

  \      race_send_move();\r

  \    }, delay);\r

  \  }\r

  \  function anagram_feedback(is_correct, is_word, show_feedback = true) {\r

  \    let delay = !is_correct && show_feedback ? 1000 : 300;\r

  \    let d = iDiv(Goal);\r

  \    mStyle(d, { opacity: 1 });\r

  \    if (!is_correct) {\r

  \      for (let i = 0; i < Goal.word.length; i++) {\r

  \        let ch = Goal.word[i];\r

  \        let dl = iDiv(Goal.letters[i]);\r

  \        dl.innerHTML = ch;\r

  \        animate(dl, 'onPulse1', 600);\r

  \        if (!is_word) {\r

  \          let dwrong = iDiv(Goal.inputs[i]);\r

  \          if (dwrong.innerHTML != ch) { mXit(dwrong, 90); }\r

  \        }\r

  \      }\r

  \    } else {\r

  \      mCheckit(d, 100);\r

  \    }\r

  \    return delay;\r

  \  }\r

  \  return {\r

  \    prompt: anagram_prompt,\r

  \    fen: anagram_fen,\r

  \  }\r

  }"
gatherItems: "function gatherItems(n, options) {\r

  \  let items = null;\r

  \  while (!items) { items = Pictures = pickSuitableItems(n, options); }\r

  \  let l = items[0].letter;\r

  \  for (let i = 0; i < n; i++) {\r

  \    let item1 = items[i];\r

  \    let item2 = items[(i + 1) % n];\r

  \    let label = item1.origLabel = item1.label;\r

  \    let idx = item1.iLetter;\r

  \    item1.label = replaceAtString(label, idx, item2.letter);\r

  \    if (isWord(item1.label)) {\r

  \      item2.iLetter = (item2.iLetter + 1) % item2.label.length;\r

  \      item2.letter = item2.label[item2.iLetter];\r

  \      item1.label = replaceAtString(label, idx, item2.letter);\r

  \      if (isWord(item1.label)) return gatherItems(n, options);\r

  \    }\r

  \    item1.swaps = {};\r

  \    item1.swaps[idx] = {\r

  \      swapped: { itemId: item2.id, index: item2.iLetter, l: item2.letter
  },\r

  \      correct: { itemId: item1.id, index: item1.iLetter, l: item1.letter
  },\r

  \      temp: null,\r

  \    };\r

  \  }\r

  \  return items;\r

  }"
gauss: "function gauss(x, mean, standardDeviation) {\r

  \  return (1 / standardDeviation * Math.sqrt(2 * (3, 14))) *
  Math.pow(Math.E, -Math.pow(x - mean, 2) / (2 * (standardDeviation *
  standardDeviation)));\r

  }"
gaussian_amp: "function gaussian_amp(canvas, stdev) {\r

  \  let v = stdev * stdev;\r

  \  function formula(x, v, amp) { return amp * Math.E ** (-(x ** 2) / (2 *
  v)) / Math.sqrt(v * 2 * Math.PI); }\r

  \  let y = 1 / Math.sqrt(v * 2 * Math.PI);\r

  \  let amp = .9 * (-canvas.miny) / (canvas.scale * y);\r

  \  let f = formula(2, amp);\r

  \  f = x => formula(x, v, amp);\r

  \  return f;\r

  }"
gaussian1: "function gaussian1(x, m = 0, stdev = 2, amp = 1) {\r

  \  let v = stdev * stdev;\r

  \  return amp * Math.E ** (-((x - m) ** 2) / (2 * v)) / Math.sqrt(v * 2 *
  Math.PI);\r

  }"
gaussianRand: "function gaussianRand() {\r

  \  var rand = 0;\r

  \  for (var i = 0; i < 6; i += 1) { rand += Math.random(); }\r

  \  return rand / 6;\r

  }"
gaussianRandom: function gaussianRandom(start, end) { return Math.floor(start +
  gaussianRand() * (end - start + 1)); }
gBg: function gBg(g, color) { g.setAttribute('fill', color); }
gCanvas: "function gCanvas(area, w, h, color, originInCenter = true) {\r

  \  let dParent = mBy(area);\r

  \  let div = stage3_prepContainer(dParent);\r

  \  div.style.width = w + 'px';\r

  \  div.style.height = h + 'px';\r

  \  let svg = gSvg();\r

  \  let style =
  `margin:0;padding:0;position:absolute;top:0px;left:0px;width:100%;height:100%\
  ;`\r

  \  svg.setAttribute('style', style);\r

  \  mColor(svg, color);\r

  \  div.appendChild(svg);\r

  \  let g = gG();\r

  \  if (originInCenter) g.style.transform = \"translate(50%, 50%)\";\r

  \  svg.appendChild(g);\r

  \  return g;\r

  }"
gCreate: function gCreate(tag) { return document.createElementNS('http:/' +
  '/www.w3.org/2000/svg', tag); }
gcsAuto: "function gcsAuto() {\r

  \  gcs = {};\r

  \  for (const gName in allGames) {\r

  \    let info = allGames[gName]\r

  \    let nPlayers = info.num_players[0];\r

  \    let pls = [];\r

  \    for (let i = 0; i < nPlayers; i++) {\r

  \      let pl = { id: info.player_names[i], playerType: 'me', agentType:
  null, username: USERNAME + (i > 0 ? i : '') };\r

  \      pls.push(pl);\r

  \    }\r

  \    gcs[gName] = { numPlayers: nPlayers, players: pls };\r

  \  }\r

  }"
geht: "function geht(sp) {\r

  \  POOLS.augData = makeDefaultPool(sData);\r

  \  annotate(sp);\r

  \  dynSpec = sp;\r

  \  let pool = POOLS.augData;\r

  \  for (const oid in pool) {\r

  \    let o = pool[oid];\r

  \    if (nundef(o.RSG)) continue;\r

  \    let info = mergeIncludingPrototype(oid, o);\r

  \    INFO[oid] = info;\r

  \  }\r

  }"
gEllipse: function gEllipse(w, h) { let r = gCreate('ellipse');
  r.setAttribute('rx', w / 2); r.setAttribute('ry', h / 2); return r; }
gen_palette: "function gen_palette(hue = 0, nHues = 2, sat = 100, a = 1) {\r

  \  let hues = [];\r

  \  let hueDiff = 360 / nHues;\r

  \  for (let i = 0; i < nHues; i++) {\r

  \    hues.push(hue);\r

  \    hue += hueDiff;\r

  \  }\r

  \  let pal = [];\r

  \  for (l of [15, 25, 35, 50, 65, 75, 85]) {\r

  \    let palHues = [];\r

  \    for (const h of hues) {\r

  \      cb = `hsla(${h},${sat}%,${l}%,${a})`;\r

  \      hopp = (h + 180) % 360;\r

  \      cf = `hsla(${hopp},${sat}%,${l < 18 ? 100 : 0}%,${a})`;\r

  \      let hex = standardize_color(cb);\r

  \      let f5 = idealTextColor(hex);\r

  \      palHues.push({ b: cb, f: f5 });\r

  \    }\r

  \    pal.push(palHues);\r

  \  }\r

  \  testHelpers('pal.length:', pal.length, ', pal[0].length:', pal[0].length,
  ', pal:', pal);\r

  \  return pal;\r

  }"
genCard: "function genCard() {\r

  \  let names = '23456789TJQKA';\r

  \  let s = chooseRandom(names);\r

  \  if (isNumber(s)) s = Number(s);\r

  \  return { obj_type: 'card', short_name: s, oid: getUID() };\r

  }"
genCard52Key: "function genCard52Key() {\r

  \  let rank = '23456789TJQKA';\r

  \  let suit = 'CDHS';\r

  \  let specialRank = '12';\r

  \  let specialSuit = 'BJ';\r

  \  let isSpecial = tossCoin(25);\r

  \  let s;\r

  \  if (isSpecial) {\r

  \    s = chooseRandom(specialRank) + chooseRandom(specialSuit);\r

  \  } else {\r

  \    s = chooseRandom(rank) + chooseRandom(suit);\r

  \  }\r

  \  return { obj_type: 'card', cardKey: s, oid: getUID() };\r

  }"
genCats: "function genCats(n) {\r

  \  let di = {};\r

  \  let cats = Object.keys(Categories);\r

  \  for (let i = 0; i < n; i++) {\r

  \    let cat = chooseRandom(cats);\r

  \    let incompat = DA.incompatibleCats[cat];\r

  \    cats = arrMinus(cats, incompat);\r

  \    removeInPlace(cats, cat);\r

  \    di[cat] = Categories[cat];\r

  \  }\r

  \  return di;\r

  }"
genCollapsible: "function genCollapsible(path, info) {\r

  \  let caption = stringAfterLast(path, '/');\r

  \  let classes = ['collapsible'];\r

  \  let dParent = mBy('menu');\r

  \  let b = mButton(caption, null, dParent, {}, classes);\r

  \  b.id = info.idLink;\r

  \  let bView = maPicButton('search', e => showCollapsibleContent(e), b, {
  float: 'right', w: 25, padding: 2, margin: 2, rounding: 4 });\r

  \  bView.addEventListener('mouseenter', ev => {\r

  \    ev.stopPropagation = true;\r

  \  });\r

  \  bView.addEventListener('mouseleave', ev => {\r

  \    ev.stopPropagation = true;\r

  \  });\r

  \  b.style.padding = '4px';\r

  \  return b;\r

  }"
generalGrid: "function generalGrid(nuiBoard, R, area) {\r

  \  let bParams = nuiBoard.params = detectBoardParams(nuiBoard, R);\r

  \  let ui = nuiBoard.ui = createUi(nuiBoard, R, area);\r

  \  let rtreeParent = R.rNodes[nuiBoard.uid];\r

  \  let uidBoard = nuiBoard.uid;\r

  \  nuiBoard.params.sizes = nuiBoard.bi.sizes = { f: 0, c: 0, e: 0 };\r

  \  for (const name of ['fields', 'edges', 'corners']) {\r

  \    let groupParams = lookup(DEFS, ['grid', 'params', name]); if
  (!groupParams) groupParams = {};\r

  \    groupParams = safeMerge(groupParams, nuiBoard.bi.params[name]);\r

  \    let group = nuiBoard.bi[name];\r

  \    let groupSize = nuiBoard.params.sizes[name[0]] = groupParams.size;\r

  \    for (const oid in group) {\r

  \      let n1 = group[oid];\r

  \      let o = n1.o;\r

  \      delete n1.o;\r

  \      let key = createArtificialSpecForBoardMemberIfNeeded(oid, o, R);\r

  \      let ntree, nui;\r

  \      ntree = instantOidKey(oid, key, uidBoard, R);\r

  \      ntree.params = isdef(ntree.params) ? safeMerge(groupParams,
  ntree.params) : groupParams;\r

  \      if (ntree.params.size != groupSize) groupSize =
  nuiBoard.params.sizes[name[0]] = ntree.params.size;\r

  \      n1.info.size = groupSize;\r

  \      ntree.info = n1.info;\r

  \      nui = recUi(ntree, R, uidBoard, oid, key);\r

  \    }\r

  \  }\r

  \  nuiBoard.children = rtreeParent.children;\r

  \  nuiBoard.adirty = true;\r

  }"
generate: "function generate() {\r

  \  numgen++; if (numgen > system.max) {\r

  \    clearInterval(interval_id);\r

  \    console.log('done!');\r

  \    return;\r

  \  }\r

  \  len *= factor;\r

  \  let nextSentence = '';\r

  \  for (let i = 0; i < sentence.length; i++) {\r

  \    let current = sentence.charAt(i);\r

  \    let done = false;\r

  \    for (const rule of rules) {\r

  \      if (current == rule.aus) {\r

  \        nextSentence += rule.mach;\r

  \        done = true;\r

  \        break;\r

  \      }\r

  \    }\r

  \    if (!done) nextSentence += current;\r

  \  }\r

  \  sentence = nextSentence;\r

  \  createP(sentence);\r

  \  turtle();\r

  }"
generate_friendly_table_name: "function generate_friendly_table_name(game,
  players) {\r

  \  const europe_capitals =
  'Amsterdam,  Ankara,  Astana,  Athens,  Baku,  Belgrade,  Berlin,  Bern,  Bra\
  tislava,  Brussels,  Bucharest,  Budapest,  Chisinau,  Copenhagen,  Dublin,  \
  Helsinki,  Kiev,  Lisbon,  Ljubljana,  London,  Luxembourg,  Madrid,  Minsk,  \
  Monaco,  Moscow,  Nicosia,  Oslo,  Paris,  Podgorica,  Prague,  Reykjavík,  R\
  iga,  Rome,  San
  Marino,  Sarajevo,  Skopje,  Sofia,  Stockholm,  Tallinn,  Tbilisi,  Tirana,  \
  Vaduz,  Valletta,  Vatican
  City,  Vienna,  Vilnius,  Warsaw,  Yerevan,  Zagreb';\r

  \  const asia_capitals = 'Abu
  Dhabi,  Amman,  Ankara,  Ashgabat,  Astana,  Baghdad,  Baku,  Bangkok,  Beiji\
  ng,  Beirut,  Bishkek,  Cairo,  Colombo,  Damascus,  Dhaka,  Dili,  Doha,  Du\
  shanbe,  Hanoi,  Islamabad,  Jakarta,  Jerusalem,  Kabul,  Kathmandu,  Kuala
  Lumpur,  Kuwait
  City,  Malé,  Manama,  Manila,  Moscow,  Muscat,  Naypyidaw,  New
  Delhi,  Nicosia,  Phnom
  Penh,  Pyongyang,  Ramallah,  Riyadh,  Sana’a,  Seoul,  Singapore,  Taipei,  \
  Tashkent,  Tbilisi,  Tehran,  Thimphu,  Tokyo,  Ulaanbaatar,  Vientiane,  Yer\
  evan';\r

  \  return 'Battle of ' + chooseRandom(coin() ? europe_capitals.split(',\\t')
  : asia_capitals.split(',\\t'));\r

  }"
generate_skype_contacts: "function generate_skype_contacts(n) {\r

  \  let date = new Date();\r

  \  let res = [{ num: `+${rNumber(11111, 99999)}`, date: date, color:
  rChoose([ORANGE, PURPLE, 'deepskyblue', 'hotpink']), msg: `<#>'BofA': DO NOT
  share this S...` }];\r

  \  for (let i = 1; i < n; i++) {\r

  \    date = rDate(date, new Date(2022, 1, 1));\r

  \    let istext = coin();\r

  \    let [num, msg] = istext ? [`+${rNumber(11111, 99999)}`,
  `<#>${rChoose(['BofA', 'Prudential'])}: DO NOT share this S...`]\r

  \      : [`+1425${rNumber(1111111, 9999999)}`, `Missed Call`];\r

  \    let c = { num: num, date: date, color: rChoose([ORANGE, PURPLE,
  'deepskyblue', 'hotpink']), msg: msg };\r

  \    res.push(c);\r

  \  }\r

  \  return res;\r

  }"
generate_statement: "function generate_statement(dParent, boacc, brand) {\r

  \  let brand_colors = {\r

  \    usbank: 'navy', prime: 'skyblue', citibank: 'silver', wellsfargo: RED,
  BofA_rgb: 'navy', chase_bank: BLUE,\r

  \    comcast: 'orange', oasis: GREEN, PSE: 'gold', redmond: 'grey'\r

  \  };\r

  \  let date = new Date();\r

  \  let acc = { index: boacc.index, creditline: rNumber(0, 10) * 100, holder:
  'Gunter Yang Lee', num: 242948572348, due: rDate(addWeekToDate(date, 4),
  addWeekToDate(date, 2)) }\r

  \  let nums = { prevbalance: rNumber(0, 100), payments: rNumber(100, 1000) +
  rNumber(0, 100) / 100, fees: rNumber(0, 100) };\r

  \  nums.balance = nums.prevbalance + nums.payments + nums.fees;\r

  \  acc.cashadvance = acc.creditline / 4;\r

  \  acc.num = acc.num.toString();\r

  \  acc.num = acc.num.substring(0, acc.num.length - 4) +
  boacc.sub.substring(1);\r

  \  acc.num = parseInt(acc.num);\r

  \  let [color, fromdate, todate] = [valf(brand_colors[brand], 'random'),
  addWeekToDate(date, -5), addWeekToDate(date, -1)];\r

  \  //#region header\r

  \  let d;\r

  \  if (nundef(dParent)) {\r

  \    let dpop = mBy('dPopup'); show(dpop); mClear(dpop); mStyle(dpop, { top:
  50, right: 10 });\r

  \    d = mDiv(dpop, { padding: 10, border: '1px solid #ddd', bg: 'white',
  fg: 'black' });\r

  \  } else {\r

  \    mStyle(dParent, { 'justify-content': 'start' });\r

  \    d = mDiv(dParent);\r

  \  }\r

  \  mStyle(d, { bg: 'white', position: 'fixed', top: 50, right: 0, padding:
  10 });\r

  \  let d1 = mDiv(d, { bg: color, h: 5, w: '100%' });\r

  \  let dheader = mDiv(d, { fz: 12 });\r

  \  let [dl, dr] = mColFlex(dheader, [1, 3]);\r

  \  let logo = createImage(`${brand}.png`, { hmax: 90, wmax: 300 });\r

  \  let dl1 = mDiv(dl, { hmax: 90, wmax: 400 }); mAppend(dl1, logo);\r

  \  let dr1 = mDiv(dr, { align: 'right', paright: 10 });\r

  \  mDiv(dr1, {}, null, `Account Holder: ${acc.holder}`);\r

  \  mDiv(dr1, {}, null, `Account Number: ${acc.num}`);\r

  \  mDiv(dr1, {}, null, `Statement Period: ${date2locale(fromdate)} -
  ${date2locale(todate)}`);\r

  \  mDiv(dr1, {}, null, `Due Date: ${date2locale(acc.due)}`);\r

  \  mDiv(d, {}, null, '<br>');\r

  \  //#endregion\r

  \  let dmain = mDiv(d, { wmax: 600 });\r

  \  let [dlm, drm] = mColFlex(dmain, [1, 1.25]);\r

  \  let dlm1 = mDiv(dlm, { hmargin: 10, }, null, `ACCOUNT SUMMARY`);\r

  \  let dsum = mDiv(dlm, { hmargin: 10, rounding: 12, padding: 10, border:
  '1px solid #ccc', bg: 'white', fg: 'black' });\r

  \  mDivLR(dsum, { w: '100%' }, null, [`Previous Balance:`,
  `${format_currency(nums.prevbalance)}`]);\r

  \  mDivLR(dsum, { w: '100%' }, null, [`Payments and Credits:`,
  `${format_currency(nums.payments)}`]);\r

  \  mDivLR(dsum, { w: '100%' }, null, [`Purchases:`,
  `${format_currency(nums.payments)}`]);\r

  \  mDivLR(dsum, { w: '100%' }, null, [`Balance Transfers:`,
  `${format_currency(0)}`]);\r

  \  mDivLR(dsum, { w: '100%' }, null, [`Cash Advances:`,
  `${format_currency(0)}`]);\r

  \  mDivLR(dsum, { w: '100%' }, null, [`Fees Charged:`,
  `${format_currency(nums.fees)}`]);\r

  \  mDivLR(dsum, { w: '100%' }, null, [`Interest Charged:`,
  `${format_currency(0)}`]);\r

  \  mDivLR(dsum, { w: '100%' }, null, [`New Balance:`,
  `${format_currency(nums.balance)}`]);\r

  \  mDiv(dsum, { fz: 9, align: 'center' }, null, 'see interest charge
  calculation section following the Transactions section for detailed APR
  information');\r

  \  mLine(dsum, { fz: 10, align: 'center' });\r

  \  mDivLR(dsum, { w: '100%' }, null, [`Credit Line:`,
  `${format_currency(acc.creditline)}`]);\r

  \  mDivLR(dsum, { w: '100%' }, null, [`Credit Line Available:`,
  `${format_currency(acc.creditline)}`]);\r

  \  mDivLR(dsum, { w: '100%' }, null, [`Cash Advance Credit Line:`,
  `${format_currency(acc.cashadvance)}`]);\r

  \  mDivLR(dsum, { w: '100%' }, null, [`Cash Advance Credit Line Available:`,
  `${format_currency(acc.cashadvance)}`]);\r

  \  mDiv(dsum, {}, null, 'You may be able to avoid interest on purchases. See
  reverse for details');\r

  \  let drm1 = mDiv(drm, { hmargin: 10, }, null, `PAYMENT INFORMATION`);\r

  \  let dpay = mDiv(drm, { hmargin: 10, rounding: 12, padding: 10, border:
  '1px solid #ccc', bg: 'white', fg: 'black' });\r

  \  mDivLR(dpay, { w: '100%', weight: 'bold' }, null, [`New Balance:`,
  `${format_currency(nums.balance)}`]);\r

  \  mLine(dpay, { fz: 10, align: 'center' });\r

  \  mDivLR(dpay, { w: '100%' }, null, [`Minimum Payment Due:`,
  `${format_currency(nums.balance / 10)}`]);\r

  \  mDivLR(dpay, { w: '100%', weight: 'bold' }, null, [`Payment Due Date:`,
  `${date2locale(acc.due)}`]);\r

  \  mDiv(dpay, { fz: 9, matop: 10 }, null, '<b>Late Payment Warning:</b> If
  we do not receive your minimum payment by the date listed above, you may have
  to pay a fee of up to $10.00.');\r

  \  let drm2 = mDiv(drm, { matop: 10, hmargin: 10, }, null, `REWARDS`);\r

  \  let drewards = mDiv(drm, { hmargin: 10, rounding: 12, padding: 10,
  border: '1px solid #ccc', bg: 'white', fg: 'black' });\r

  \  mDivLR(drewards, { w: '100%', weight: 'bold' }, null, [`Cashback
  Bonus*:`, `Anniversary Month`]);\r

  \  mDivLR(drewards, { w: '100%' }, null, [`Opening Balance:`,
  `${format_currency(0)}`]);\r

  \  mDivLR(drewards, { w: '100%' }, null, [`New Cashback Bonus this Period:`,
  `${format_currency(4.98)}`]);\r

  \  mDivLR(drewards, { w: '100%' }, null, [`Redeemed this Period:`,
  `${format_currency(0)}`]);\r

  \  mLine(drewards, { fz: 10, align: 'center' });\r

  \  mDivLR(drewards, { w: '100%', weight: 'bold' }, null, [`Cashback Bonus
  Balance:`, `${format_currency(4.98)}`]);\r

  \  mDiv(drewards, { fz: 10 }, null, `<b>to learn more log in to
  www.${brand}.com</b>`);\r

  \  mDiv(d, { matop: 25, maleft: 6 }, null, img_html('statement2.jpg'));\r

  \  mDiv(d, {}, null, '<br>');\r

  \  let dbla1 = mDiv(d, { hmargin: 10, rounding: 12, padding: 10, border:
  '1px solid #ccc', bg: 'white', fg: 'black' });\r

  \  mAppend(dbla1, createImage('statement1.jpg', {}));\r

  \  mAppend(d, createImage('statementfooter.jpg', {}));\r

  \  return { div: d, nums: nums, acc: acc, topay: nums.balance, brand: brand,
  boacc: boacc };\r

  }"
generate_table_id: "function generate_table_id(gamename) {\r

  \  return gamename + '_' + get_timestamp();\r

  }"
generate_table_name: "function generate_table_name(n) {\r

  \  let existing = Serverdata.tables.map(x => x.friendly);\r

  \  while (true) {\r

  \    let cap = rChoose(Info.capital);\r

  \    let parts = cap.split(' ');\r

  \    if (parts.length == 2) cap = stringBefore(cap, ' '); else cap =
  stringBefore(cap, '-');\r

  \    cap = cap.trim();\r

  \    let s = (n == 2 ? 'duel of ' : rChoose(['battle of ', 'war of '])) +
  cap;\r

  \    if (!existing.includes(s)) return s;\r

  \  }\r

  }"
GenerateCaptures: "function GenerateCaptures() {\r

  \  brd_moveListStart[brd_ply + 1] = brd_moveListStart[brd_ply];\r

  \  var pceType;\r

  \  var pceNum;\r

  \  var pceIndex;\r

  \  var pce;\r

  \  var sq;\r

  \  var tsq;\r

  \  var index;\r

  \  if (brd_side == COLOURS.WHITE) {\r

  \    pceType = PIECES.wP;\r

  \    for (pceNum = 0; pceNum < brd_pceNum[pceType]; ++pceNum) {\r

  \      sq = brd_pList[PCEINDEX(pceType, pceNum)];\r

  \      if (SQOFFBOARD(sq + 9) == BOOL.FALSE && PieceCol[brd_pieces[sq + 9]]
  == COLOURS.BLACK) {\r

  \        AddWhitePawnCaptureMove(sq, sq + 9, brd_pieces[sq + 9]);\r

  \      }\r

  \      if (SQOFFBOARD(sq + 11) == BOOL.FALSE && PieceCol[brd_pieces[sq +
  11]] == COLOURS.BLACK) {\r

  \        AddWhitePawnCaptureMove(sq, sq + 11, brd_pieces[sq + 11]);\r

  \      }\r

  \      if (brd_enPas != SQUARES.NO_SQ) {\r

  \        if (sq + 9 == brd_enPas) {\r

  \          AddEnPassantMove(MOVE(sq, sq + 9, PIECES.EMPTY, PIECES.EMPTY,
  MFLAGEP));\r

  \        }\r

  \        if (sq + 11 == brd_enPas) {\r

  \          AddEnPassantMove(MOVE(sq, sq + 11, PIECES.EMPTY, PIECES.EMPTY,
  MFLAGEP));\r

  \        }\r

  \      }\r

  \    }\r

  \    pceType = PIECES.wN;\r

  \  } else {\r

  \    pceType = PIECES.bP;\r

  \    for (pceNum = 0; pceNum < brd_pceNum[pceType]; ++pceNum) {\r

  \      sq = brd_pList[PCEINDEX(pceType, pceNum)];\r

  \      if (SQOFFBOARD(sq - 9) == BOOL.FALSE && PieceCol[brd_pieces[sq - 9]]
  == COLOURS.WHITE) {\r

  \        AddBlackPawnCaptureMove(sq, sq - 9, brd_pieces[sq - 9]);\r

  \      }\r

  \      if (SQOFFBOARD(sq - 11) == BOOL.FALSE && PieceCol[brd_pieces[sq -
  11]] == COLOURS.WHITE) {\r

  \        AddBlackPawnCaptureMove(sq, sq - 11, brd_pieces[sq - 11]);\r

  \      }\r

  \      if (brd_enPas != SQUARES.NO_SQ) {\r

  \        if (sq - 9 == brd_enPas) {\r

  \          AddEnPassantMove(MOVE(sq, sq - 9, PIECES.EMPTY, PIECES.EMPTY,
  MFLAGEP));\r

  \        }\r

  \        if (sq - 11 == brd_enPas) {\r

  \          AddEnPassantMove(MOVE(sq, sq - 11, PIECES.EMPTY, PIECES.EMPTY,
  MFLAGEP));\r

  \        }\r

  \      }\r

  \    }\r

  \    pceType = PIECES.bN;\r

  \  }\r

  \  pceIndex = LoopSlideIndex[brd_side];\r

  \  pce = LoopSlidePce[pceIndex++];\r

  \  while (pce != 0) {\r

  \    for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \      sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \      for (index = 0; index < DirNum[pce]; ++index) {\r

  \        dir = PceDir[pce][index];\r

  \        t_sq = sq + dir;\r

  \        while (SQOFFBOARD(t_sq) == BOOL.FALSE) {\r

  \          if (brd_pieces[t_sq] != PIECES.EMPTY) {\r

  \            if (PieceCol[brd_pieces[t_sq]] == brd_side ^ 1) {\r

  \              AddCaptureMove(MOVE(sq, t_sq, brd_pieces[t_sq], PIECES.EMPTY,
  0));\r

  \            }\r

  \            break;\r

  \          }\r

  \          t_sq += dir;\r

  \        }\r

  \      }\r

  \    }\r

  \    pce = LoopSlidePce[pceIndex++];\r

  \  }\r

  \  pceIndex = LoopNonSlideIndex[brd_side];\r

  \  pce = LoopNonSlidePce[pceIndex++];\r

  \  while (pce != 0) {\r

  \    for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \      sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \      for (index = 0; index < DirNum[pce]; ++index) {\r

  \        dir = PceDir[pce][index];\r

  \        t_sq = sq + dir;\r

  \        if (SQOFFBOARD(t_sq) == BOOL.TRUE) {\r

  \          continue;\r

  \        }\r

  \        if (brd_pieces[t_sq] != PIECES.EMPTY) {\r

  \          if (PieceCol[brd_pieces[t_sq]] == brd_side ^ 1) {\r

  \            AddCaptureMove(MOVE(sq, t_sq, brd_pieces[t_sq], PIECES.EMPTY,
  0));\r

  \          }\r

  \          continue;\r

  \        }\r

  \      }\r

  \    }\r

  \    pce = LoopNonSlidePce[pceIndex++];\r

  \  }\r

  }"
generateCard: "function generateCard(hasOwner = true, hasContent = true,
  visibleToN = 1) {\r

  \  let id = \"action_\" + unitTestId;\r

  \  unitTestId += 1;\r

  \  let o = JSON.parse(`\r

  \  {\r

  \    \"wildcard\": \"Isolationism\",\r

  \    \"season\": \"Fall\",\r

  \    \"priority\": \"H\",\r

  \    \"value\": 8,\r

  \    \"obj_type\": \"action_card\",\r

  \    \"visible\": {\r

  \      \"xset\": [\r

  \        \"Axis\"\r

  \      ]\r

  \    },\r

  \    \"owner\": \"Axis\",\r

  \    \"_id\": \"action_48\"\r

  \  }\r

  \  `);\r

  \  if (!hasContent) {\r

  \    o = JSON.parse(`\r

  \    {\r

  \    \"obj_type\": \"action_card\",\r

  \    \"visible\": {\r

  \      \"xset\": [\r

  \        \"Axis\"\r

  \      ]\r

  \    },\r

  \    \"owner\": \"Axis\",\r

  \    \"_id\": \"action_48\"\r

  \  }\r

  \  `);\r

  \  }\r

  \  o._id = id;\r

  \  if (!hasOwner) {\r

  \    delete o.owner;\r

  \  }\r

  \  if (visibleToN == 0) {\r

  \    o.visible.xset = [];\r

  \  } else if (visibleToN == 2) {\r

  \    o.visible.xset.push(\"West\");\r

  \  } else if (visibleToN == 3) {\r

  \    o.visible.xset = [\"Axis\", \"West\", \"USSR\"];\r

  \  }\r

  \  return { id: id, o: o };\r

  }"
generateDocs: "function generateDocs(s = 'halo') {\r

  \  let output = `<html><body>${s}</body></html>`;\r

  \  downloadFile();\r

  }"
generateExpAnswers: function generateExpAnswers() { }
generateFontString: "function generateFontString(fz, family, weight = 900) {\r

  \  let s = '' + weight + ' ' + fz + 'px ' + family;\r

  \  return s.trim();\r

  }"
GenerateMoves: "function GenerateMoves() {\r

  \  brd_moveListStart[brd_ply + 1] = brd_moveListStart[brd_ply];\r

  \  var pceType;\r

  \  var pceNum;\r

  \  var pceIndex;\r

  \  var pce;\r

  \  var sq;\r

  \  var tsq;\r

  \  var index;\r

  \  if (brd_side == COLOURS.WHITE) {\r

  \    pceType = PIECES.wP;\r

  \    for (pceNum = 0; pceNum < brd_pceNum[pceType]; ++pceNum) {\r

  \      sq = brd_pList[PCEINDEX(pceType, pceNum)];\r

  \      if (brd_pieces[sq + 10] == PIECES.EMPTY) {\r

  \        AddWhitePawnQuietMove(sq, sq + 10);\r

  \        if (RanksBrd[sq] == RANKS.RANK_2 && brd_pieces[sq + 20] ==
  PIECES.EMPTY) {\r

  \          AddQuietMove(MOVE(sq, (sq + 20), PIECES.EMPTY, PIECES.EMPTY,
  MFLAGPS));\r

  \        }\r

  \      }\r

  \      if (SQOFFBOARD(sq + 9) == BOOL.FALSE && PieceCol[brd_pieces[sq + 9]]
  == COLOURS.BLACK) {\r

  \        AddWhitePawnCaptureMove(sq, sq + 9, brd_pieces[sq + 9]);\r

  \      }\r

  \      if (SQOFFBOARD(sq + 11) == BOOL.FALSE && PieceCol[brd_pieces[sq +
  11]] == COLOURS.BLACK) {\r

  \        AddWhitePawnCaptureMove(sq, sq + 11, brd_pieces[sq + 11]);\r

  \      }\r

  \      if (brd_enPas != SQUARES.NO_SQ) {\r

  \        if (sq + 9 == brd_enPas) {\r

  \          AddEnPassantMove(MOVE(sq, sq + 9, PIECES.EMPTY, PIECES.EMPTY,
  MFLAGEP));\r

  \        }\r

  \        if (sq + 11 == brd_enPas) {\r

  \          AddEnPassantMove(MOVE(sq, sq + 11, PIECES.EMPTY, PIECES.EMPTY,
  MFLAGEP));\r

  \        }\r

  \      }\r

  \    }\r

  \    if (brd_castlePerm & CASTLEBIT.WKCA) {\r

  \      if (brd_pieces[SQUARES.F1] == PIECES.EMPTY && brd_pieces[SQUARES.G1]
  == PIECES.EMPTY) {\r

  \        if (SqAttacked(SQUARES.E1, COLOURS.BLACK) == BOOL.FALSE &&
  SqAttacked(SQUARES.F1, COLOURS.BLACK) == BOOL.FALSE) {\r

  \          AddQuietMove(MOVE(SQUARES.E1, SQUARES.G1, PIECES.EMPTY,
  PIECES.EMPTY, MFLAGCA));\r

  \        }\r

  \      }\r

  \    }\r

  \    if (brd_castlePerm & CASTLEBIT.WQCA) {\r

  \      if (brd_pieces[SQUARES.D1] == PIECES.EMPTY && brd_pieces[SQUARES.C1]
  == PIECES.EMPTY && brd_pieces[SQUARES.B1] == PIECES.EMPTY) {\r

  \        if (SqAttacked(SQUARES.E1, COLOURS.BLACK) == BOOL.FALSE &&
  SqAttacked(SQUARES.D1, COLOURS.BLACK) == BOOL.FALSE) {\r

  \          AddQuietMove(MOVE(SQUARES.E1, SQUARES.C1, PIECES.EMPTY,
  PIECES.EMPTY, MFLAGCA));\r

  \        }\r

  \      }\r

  \    }\r

  \    pceType = PIECES.wN;\r

  \  } else {\r

  \    pceType = PIECES.bP;\r

  \    for (pceNum = 0; pceNum < brd_pceNum[pceType]; ++pceNum) {\r

  \      sq = brd_pList[PCEINDEX(pceType, pceNum)];\r

  \      if (brd_pieces[sq - 10] == PIECES.EMPTY) {\r

  \        AddBlackPawnQuietMove(sq, sq - 10);\r

  \        if (RanksBrd[sq] == RANKS.RANK_7 && brd_pieces[sq - 20] ==
  PIECES.EMPTY) {\r

  \          AddQuietMove(MOVE(sq, (sq - 20), PIECES.EMPTY, PIECES.EMPTY,
  MFLAGPS));\r

  \        }\r

  \      }\r

  \      if (SQOFFBOARD(sq - 9) == BOOL.FALSE && PieceCol[brd_pieces[sq - 9]]
  == COLOURS.WHITE) {\r

  \        AddBlackPawnCaptureMove(sq, sq - 9, brd_pieces[sq - 9]);\r

  \      }\r

  \      if (SQOFFBOARD(sq - 11) == BOOL.FALSE && PieceCol[brd_pieces[sq -
  11]] == COLOURS.WHITE) {\r

  \        AddBlackPawnCaptureMove(sq, sq - 11, brd_pieces[sq - 11]);\r

  \      }\r

  \      if (brd_enPas != SQUARES.NO_SQ) {\r

  \        if (sq - 9 == brd_enPas) {\r

  \          AddEnPassantMove(MOVE(sq, sq - 9, PIECES.EMPTY, PIECES.EMPTY,
  MFLAGEP));\r

  \        }\r

  \        if (sq - 11 == brd_enPas) {\r

  \          AddEnPassantMove(MOVE(sq, sq - 11, PIECES.EMPTY, PIECES.EMPTY,
  MFLAGEP));\r

  \        }\r

  \      }\r

  \    }\r

  \    if (brd_castlePerm & CASTLEBIT.BKCA) {\r

  \      if (brd_pieces[SQUARES.F8] == PIECES.EMPTY && brd_pieces[SQUARES.G8]
  == PIECES.EMPTY) {\r

  \        if (SqAttacked(SQUARES.E8, COLOURS.WHITE) == BOOL.FALSE &&
  SqAttacked(SQUARES.F8, COLOURS.WHITE) == BOOL.FALSE) {\r

  \          AddQuietMove(MOVE(SQUARES.E8, SQUARES.G8, PIECES.EMPTY,
  PIECES.EMPTY, MFLAGCA));\r

  \        }\r

  \      }\r

  \    }\r

  \    if (brd_castlePerm & CASTLEBIT.BQCA) {\r

  \      if (brd_pieces[SQUARES.D8] == PIECES.EMPTY && brd_pieces[SQUARES.C8]
  == PIECES.EMPTY && brd_pieces[SQUARES.B8] == PIECES.EMPTY) {\r

  \        if (SqAttacked(SQUARES.E8, COLOURS.WHITE) == BOOL.FALSE &&
  SqAttacked(SQUARES.D8, COLOURS.WHITE) == BOOL.FALSE) {\r

  \          AddQuietMove(MOVE(SQUARES.E8, SQUARES.C8, PIECES.EMPTY,
  PIECES.EMPTY, MFLAGCA));\r

  \        }\r

  \      }\r

  \    }\r

  \    pceType = PIECES.bN;\r

  \  }\r

  \  pceIndex = LoopSlideIndex[brd_side];\r

  \  pce = LoopSlidePce[pceIndex++];\r

  \  while (pce != 0) {\r

  \    for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \      sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \      for (index = 0; index < DirNum[pce]; ++index) {\r

  \        dir = PceDir[pce][index];\r

  \        t_sq = sq + dir;\r

  \        while (SQOFFBOARD(t_sq) == BOOL.FALSE) {\r

  \          if (brd_pieces[t_sq] != PIECES.EMPTY) {\r

  \            if (PieceCol[brd_pieces[t_sq]] == brd_side ^ 1) {\r

  \              AddCaptureMove(MOVE(sq, t_sq, brd_pieces[t_sq], PIECES.EMPTY,
  0));\r

  \            }\r

  \            break;\r

  \          }\r

  \          AddQuietMove(MOVE(sq, t_sq, PIECES.EMPTY, PIECES.EMPTY, 0));\r

  \          t_sq += dir;\r

  \        }\r

  \      }\r

  \    }\r

  \    pce = LoopSlidePce[pceIndex++];\r

  \  }\r

  \  pceIndex = LoopNonSlideIndex[brd_side];\r

  \  pce = LoopNonSlidePce[pceIndex++];\r

  \  while (pce != 0) {\r

  \    for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \      sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \      for (index = 0; index < DirNum[pce]; ++index) {\r

  \        dir = PceDir[pce][index];\r

  \        t_sq = sq + dir;\r

  \        if (SQOFFBOARD(t_sq) == BOOL.TRUE) {\r

  \          continue;\r

  \        }\r

  \        if (brd_pieces[t_sq] != PIECES.EMPTY) {\r

  \          if (PieceCol[brd_pieces[t_sq]] == brd_side ^ 1) {\r

  \            AddCaptureMove(MOVE(sq, t_sq, brd_pieces[t_sq], PIECES.EMPTY,
  0));\r

  \          }\r

  \          continue;\r

  \        }\r

  \        AddQuietMove(MOVE(sq, t_sq, PIECES.EMPTY, PIECES.EMPTY, 0));\r

  \      }\r

  \    }\r

  \    pce = LoopNonSlidePce[pceIndex++];\r

  \  }\r

  }"
GeneratePosKey: "function GeneratePosKey() {\r

  \  var sq = 0;\r

  \  var finalKey = 0;\r

  \  var piece = PIECES.EMPTY;\r

  \  for (sq = 0; sq < BRD_SQ_NUM; ++sq) {\r

  \    piece = brd_pieces[sq];\r

  \    if (piece != PIECES.EMPTY && piece != SQUARES.OFFBOARD) {\r

  \      finalKey ^= PieceKeys[(piece * 120) + sq];\r

  \    }\r

  \  }\r

  \  if (brd_side == COLOURS.WHITE) {\r

  \    finalKey ^= SideKey;\r

  \  }\r

  \  if (brd_enPas != SQUARES.NO_SQ) {\r

  \    finalKey ^= PieceKeys[brd_enPas];\r

  \  }\r

  \  finalKey ^= CastleKeys[brd_castlePerm];\r

  \  return finalKey;\r

  }"
generateTree: "async function generateTree(source, context) {\r

  \  if (source == 'test') {\r

  \    let fStruct = context.fStruct;\r

  \    let options = context.options;\r

  \    T = R = makeTableTreeX(fStruct, options);\r

  \  } else if (source == 'main' || source == 'direct') {\r

  \    T = R = new RSG(context.spec, context.defs);\r

  \    R.initialChannels = [];\r

  \    ensureRtree(R);\r

  \    R.baseArea = 'table';\r

  \    createStaticUi(R.baseArea, R);\r

  \    addNewlyCreatedServerObjects(context.sdata, R);\r

  \    R.presentationStrategy = context.defs.defaultPresentationStrategy;\r

  \  }\r

  \  let uidRoot = R.uidRoot = R.tree.uid;\r

  \  R.rRoot = R.rNodes[uidRoot];\r

  \  R.uiRoot = R.root = R.uiNodes[uidRoot];\r

  \  return R;\r

  }"
generateUnitList: "function generateUnitList() {\r

  \  data = {\r

  \    created: {\r

  \      \"246\": {\r

  \        nationality: \"Britain\",\r

  \        tile: \"London\",\r

  \        type: \"Fleet\",\r

  \        cv: 4,\r

  \        obj_type: \"unit\",\r

  \        visible: {\r

  \          xset: [\"West\"]\r

  \        },\r

  \        _id: 246\r

  \      },\r

  \      \"246\": {\r

  \        nationality: \"Britain\",\r

  \        tile: \"London\",\r

  \        type: \"Fleet\",\r

  \        cv: 4,\r

  \        obj_type: \"unit\",\r

  \        visible: {\r

  \          xset: [\"West\"]\r

  \        },\r

  \        _id: 246\r

  \      },\r

  \      \"247\": {\r

  \        nationality: \"Britain\",\r

  \        tile: \"Gibraltar\",\r

  \        type: \"Fortress\",\r

  \        cv: 1,\r

  \        obj_type: \"unit\",\r

  \        visible: {\r

  \          xset: [\"West\"]\r

  \        },\r

  \        _id: 247\r

  \      },\r

  \      \"248\": {\r

  \        nationality: \"Britain\",\r

  \        tile: \"Karachi\",\r

  \        type: \"Fortress\",\r

  \        cv: 1,\r

  \        obj_type: \"unit\",\r

  \        visible: {\r

  \          xset: [\"West\"]\r

  \        },\r

  \        _id: 248\r

  \      }\r

  \    }\r

  \  };\r

  \  return data;\r

  }"
generateWordFiles: "function generateWordFiles() {\r

  \  let i = 0; let n = 13000; let len = symbolKeys.length;\r

  \  while (i < len) {\r

  \    wordsFromToText(i, n);\r

  \    i += n;\r

  \  }\r

  }"
generic_present: "function generic_present(d, g) {\r

  \  let ui = ui_type_tile(g, d); return;\r

  }"
genG: "function genG(area, R) {\r

  \  console.log('before gen10 habe', R.gens.G.length, R.getSpec());\r

  \  R.gen10();\r

  \  R.gen11();\r

  \  R.gen12();\r

  \  R.gen13();\r

  \  R.gen14();\r

  \  R.gen21(area);\r

  \  presentRoot_dep(R.getSpec().ROOT, 'tree');\r

  }"
geniales_sin_ease: "function geniales_sin_ease(canvas, item) {\r

  \  let [cv, ctx, astep, a, bstep, b, func, axes] = [canvas.cv, canvas.cx,
  item.astep, item.a, item.bstep, item.b, item.func, item.axes];\r

  \  cClear(cv, ctx);\r

  \  showAxes(ctx, axes);\r

  \  [a, astep] = oscillate_between(a, 0, 5, astep);\r

  \  [b, bstep] = oscillate_between(b, 0, 5, bstep);\r

  \  [item.astep, item.a, item.bstep, item.b] = [astep, a, bstep, b];\r

  \  funGraph(ctx, axes, x => b * func(a * x), \"rgb(11,153,11)\", 1);\r

  \  return false;\r

  }"
genItems: function genItems(n, options) { let keys = genKeys(n, options); let
  items = genItemsFromKeys(keys, options); return items; }
genItemsFromKeys: "function genItemsFromKeys(keys, options = {}) {\r

  \  let items = [];\r

  \  for (const k of keys) {\r

  \    console.assert(isdef(Syms[k]), 'key not found: ' + k);\r

  \    let info = Syms[k];\r

  \    let item = infoToItem(info);\r

  \    items.push(item);\r

  \  }\r

  \  addLabels(items, options.language, options.luc);\r

  \  items = _extendItemsAndOptions(items, options);\r

  \  return items;\r

  }"
genItemsFromObjects: "function genItemsFromObjects(list, keyProp, labelProp,
  options) {\r

  \  let keys = [];\r

  \  for (const l of list) keys.push(l[keyProp]);\r

  \  let items = list.map(x => infoToItem(Syms[x[keyProp]]));\r

  \  let i = 0, luc = options.luc;\r

  \  for (const item of items) {\r

  \    let label = list[i][labelProp];\r

  \    item.o = list[i];\r

  \    item.label = luc == 'c' ? toNoun(label) : luc == 'l' ? label :
  label.toUpperCase();\r

  \    i += 1;\r

  \  }\r

  \  items = _extendItemsAndOptions(items, options);\r

  \  return items;\r

  }"
genKeys: "function genKeys(n, options) {\r

  \  let [maxlen, lang, keySet] = [options.maxlen, valf(options.language,
  'E'), valf(options.keySet, 'all')];\r

  \  let cond = isdef(maxlen) ? ((x) => x[lang].length <= maxlen) : null;\r

  \  let keys = _getKeysCond(n, cond, keySet);\r

  \  return keys;\r

  }"
genLink: "function genLink(fname, dParent) {\r

  \  let content = stringBefore(fname, '(');\r

  \  let b = mLink(content, '#' + content, dParent, { padding: '0px 2px' },
  null);\r

  \  b.addEventListener('click', showSignatureContent);\r

  \  return b;\r

  }"
genMapData: "function genMapData(rows, cols, shape, letters = ['X']) {\r

  \  let res = []; let topcols = cols;\r

  \  if (shape == 'reghex') {\r

  \    imiddleRow = (rows - 1) / 2;\r

  \    let colarr = _calc_hex_col_array(rows, cols);\r

  \    let maxColIndex = 2 * colarr[imiddleRow] - 1;\r

  \    let cmiddle = Math.floor(maxColIndex / 2);\r

  \    let isMiddleEmpty = (cols % 2 == 0);\r

  \    let line = isMiddleEmpty ? ' ' : chooseRandom(letters);\r

  \    for (let r = 0; r < rows; r++) {\r

  \      let rest = '';\r

  \      let isLetter = (line == ' ');\r

  \      let numLetters = Math.floor(colarr[r] / 2);\r

  \      for (let c = cmiddle + 1; c < maxColIndex; c++) {\r

  \        if (isLetter && numLetters > 0) {\r

  \          rest += chooseRandom(letters);\r

  \          numLetters -= 1;\r

  \        }\r

  \        else { rest += ' '; }\r

  \        isLetter = (!isLetter);\r

  \      }\r

  \      let revrest = reverseString(rest);\r

  \      revrest = replaceNonEmptyByRandom(revrest, letters);\r

  \      res.push(revrest + line + rest);\r

  \      line = line == ' ' ? chooseRandom(letters) : ' ';\r

  \    }\r

  \    let line0 = res[0];\r

  \    topcols = 0; for (const letter of line0) { if (letter != ' ') cols +=
  1; }\r

  \  } else if (shape == 'regquad') {\r

  \    for (let r = 0; r < rows; r++) {\r

  \      let line = '';\r

  \      for (let c = 0; c < cols; c++) {\r

  \        line += chooseRandom(letters);\r

  \      }\r

  \      res.push(line);\r

  \    }\r

  \  }\r

  \  return [res, topcols];\r

  }"
genPicto: "function genPicto() {\r

  \  let key = chooseRandom(iconKeys);\r

  \  return { obj_type: 'picto', key: key, oid: getUID() };\r

  }"
genServerDataCards: "function genServerDataCards(n = 3) {\r

  \  let sdata = {};\r

  \  for (let i = 0; i < n; i++) { let c = genCard(); sdata[c.oid] = c; }\r

  \  return sdata;\r

  }"
genServerDataCards52: "function genServerDataCards52(n = 3) {\r

  \  let sdata = {};\r

  \  for (let i = 0; i < n; i++) { let c = genCard52Key(); sdata[c.oid] = c;
  }\r

  \  return sdata;\r

  }"
genServerDataCatan: "function genServerDataCatan(rows = 3, cols = 1) {\r

  \  let resources = { W: 'wood', Y: 'wheat', B: 'brick', O: 'ore', S: 'sheep'
  };\r

  \  let [mapData, topcols] = genMapData(rows, cols, 'reghex',
  Object.keys(resources));\r

  \  cols = topcols;\r

  \  let shape = 'hex';\r

  \  let line0 = mapData[0];\r

  \  cols = 0; for (const letter of line0) { if (letter != ' ') cols += 1; }\r

  \  rows = mapData.length;\r

  \  let b1 = new SimpleGrid('b1', {\r

  \    mapData: mapData,\r

  \    shape: shape,\r

  \    rows: rows,\r

  \    cols: cols,\r

  \    hasEdges: true,\r

  \    hasNodes: true,\r

  \    randomizeIds: true,\r

  \    mapData: mapData,\r

  \  });\r

  \  let sdata = {};\r

  \  let oidBoard = getUID();\r

  \  let board = simpleGridToServerData(b1);\r

  \  sdata[oidBoard] = board;\r

  \  board.oid = oidBoard;\r

  \  let fields = Object.values(b1.objects).filter(x => x.obj_type ==
  'field');\r

  \  let numbers = arrRange(2, 12);\r

  \  for (const oid in b1.objects) {\r

  \    let o = jsCopy(b1.objects[oid]);\r

  \    o.oid = o.id; delete o.id;\r

  \    o.obj_type = capitalize(o.obj_type); //.toCapital(); //toUpperCase();
  //'Field';\r

  \    if (o.obj_type == 'Field') {\r

  \      o.letter = b1.mapData[o.row][o.col];\r

  \      o.res = resources[o.letter];\r

  \      o.num = chooseRandom(numbers);\r

  \    } else { delete o.row; delete o.col; }\r

  \    if (isdef(o.neighbors)) o.neighbors = o.neighbors.map(x => (x ? { _obj:
  x } : null));\r

  \    if (isdef(o.edges)) o.edges = o.edges.map(x => (x ? { _obj: x } :
  null));\r

  \    if (isdef(o.corners)) o.corners = o.corners.map(x => (x ? { _obj: x } :
  null));\r

  \    if (isdef(o.fields)) o.fields = o.fields.map(x => (x ? { _obj: x } :
  null));\r

  \    sdata[o.oid] = o;\r

  \  }\r

  \  Object.values(sdata).map(x => stripObject(x, ['x', 'y', 'x1', 'x2', 'y1',
  'y2', 'thickness', 'w', 'h', 'done', 'rightField', 'leftField', 'startNode',
  'endNode', 'poly']))\r

  \  return sdata;\r

  }"
genServerDataGeneralBoard: "function genServerDataGeneralBoard(rows = 3, cols =
  1, shape = 'quad', hasNodes = true, hasEdges = false, { mapVariant = 'reg',
  fieldContent = { A: 'hallo', B: 'heduda' }, nodeContent, edgeContent } = {})
  {\r

  \  let mapSpec = isdef(mapVariant) ? mapVariant + shape : shape;\r

  \  let [mapData, topcols] = genMapData(rows, cols, mapSpec,
  Object.keys(fieldContent));\r

  \  rows = mapData.length;\r

  \  let b1 = new SimpleGrid('b1', {\r

  \    mapData: mapData,\r

  \    shape: shape,\r

  \    rows: rows,\r

  \    cols: topcols,\r

  \    hasEdges: hasEdges,\r

  \    hasNodes: hasNodes,\r

  \    randomizeIds: true,\r

  \    mapData: mapData,\r

  \  });\r

  \  let sdata = {};\r

  \  let oidBoard = getUID();\r

  \  let board = simpleGridToServerData(b1);\r

  \  sdata[oidBoard] = board;\r

  \  board.oid = oidBoard;\r

  \  let fields = Object.values(b1.objects).filter(x => x.obj_type ==
  'field');\r

  \  for (const oid in b1.objects) {\r

  \    let o = jsCopy(b1.objects[oid]);\r

  \    o.oid = o.id; delete o.id;\r

  \    o.obj_type = capitalize(o.obj_type); //.toCapital(); //toUpperCase();
  //'Field';\r

  \    if (o.obj_type == 'Field' && isdef(fieldContent)) {\r

  \      o.mapKey = b1.mapData[o.row][o.col];\r

  \      o.content = fieldContent[o.mapKey];\r

  \    } else { delete o.row; delete o.col; }\r

  \    if (isdef(o.neighbors)) o.neighbors = o.neighbors.map(x => (x ? { _obj:
  x } : null));\r

  \    if (isdef(o.edges)) o.edges = o.edges.map(x => (x ? { _obj: x } :
  null));\r

  \    if (isdef(o.corners)) o.corners = o.corners.map(x => (x ? { _obj: x } :
  null));\r

  \    if (isdef(o.fields)) o.fields = o.fields.map(x => (x ? { _obj: x } :
  null));\r

  \    if (o.obj_type == 'Corner' && isdef(nodeContent)) {\r

  \      o.content = chooseRandom(Object.values(nodeContent));\r

  \    } else if (o.obj_type == 'Edge' && isdef(edgeContent)) {\r

  \      o.content = chooseRandom(Object.values(edgeContent));\r

  \      console.log('edge:', o)\r

  \    }\r

  \    sdata[o.oid] = o;\r

  \  }\r

  \  Object.values(sdata).map(x => stripObject(x, ['x', 'y', 'x1', 'x2', 'y1',
  'y2', 'thickness', 'w', 'h', 'done', 'rightField', 'leftField', 'startNode',
  'endNode', 'poly']))\r

  \  return sdata;\r

  }"
genServerDataPicto: "function genServerDataPicto(n = 3) {\r

  \  let sdata = {};\r

  \  for (let i = 0; i < n; i++) { let c = genPicto(); sdata[c.oid] = c; }\r

  \  return sdata;\r

  }"
genServerDataTtt: "function genServerDataTtt(rows = 3, cols = 3) {\r

  \  let [mapData, topcols] = genMapData(rows, cols, 'regquad', ['X']);\r

  \  let shape = 'quad';\r

  \  let b1 = new SimpleGrid('b1', {\r

  \    mapData: mapData,\r

  \    shape: shape,\r

  \    rows: rows,\r

  \    cols: cols,\r

  \    hasEdges: false,\r

  \    hasNodes: false,\r

  \    randomizeIds: true,\r

  \    mapData: mapData,\r

  \  });\r

  \  let sdata = {};\r

  \  let oidBoard = getUID();\r

  \  let board = simpleGridToServerData(b1);\r

  \  sdata[oidBoard] = board;\r

  \  board.oid = oidBoard;\r

  \  let fields = Object.values(b1.objects).filter(x => x.obj_type ==
  'field');\r

  \  let numbers = arrRange(2, 12);\r

  \  for (const oid in b1.objects) {\r

  \    let o = jsCopy(b1.objects[oid]);\r

  \    o.oid = o.id; delete o.id;\r

  \    o.obj_type = capitalize(o.obj_type); //.toCapital(); //toUpperCase();
  //'Field';\r

  \    if (o.obj_type == 'Field') {\r

  \      o.letter = b1.mapData[o.row][o.col];\r

  \    } else { delete o.row; delete o.col; }\r

  \    if (isdef(o.neighbors)) o.neighbors = o.neighbors.map(x => (x ? { _obj:
  x } : null));\r

  \    if (isdef(o.edges)) o.edges = o.edges.map(x => (x ? { _obj: x } :
  null));\r

  \    if (isdef(o.corners)) o.corners = o.corners.map(x => (x ? { _obj: x } :
  null));\r

  \    if (isdef(o.fields)) o.fields = o.fields.map(x => (x ? { _obj: x } :
  null));\r

  \    sdata[o.oid] = o;\r

  \  }\r

  \  Object.values(sdata).map(x => stripObject(x, ['x', 'y', 'x1', 'x2', 'y1',
  'y2', 'thickness', 'w', 'h', 'done', 'rightField', 'leftField', 'startNode',
  'endNode', 'poly']))\r

  \  return sdata;\r

  }"
germanize: function germanize(s) { return toUmlaut(s); }
get_account: "function get_account() {\r

  \  let udata = get_current_userdata();\r

  \  mBy(\"inner_left_panel\").innerHTML = present_account(udata);\r

  }"
get_account_dep: function get_account_dep() { get_data({}, "account"); }
get_account_info: function get_account_info() { get_data({}, "account"); }
get_admin_player: "function get_admin_player(list) {\r

  \  let res = valf(firstCond(list, x => x == 'mimi'), firstCond(list, x =>
  ['felix', 'amanda', 'lauren'].includes(x)));\r

  \  return res ?? list[0];\r

  }"
get_app_presenter: "function get_app_presenter(id) {\r

  \  let di = {};\r

  \  return di[id] || generic_present;\r

  }"
get_approx_derivative: function get_approx_derivative(f, dx) { }
get_approx_integral: function get_approx_integral(f, dx) { }
get_auction_history: "function get_auction_history(fen) {\r

  \  let lines = [];\r

  \  let revorder = jsCopy(fen.plorder).reverse();\r

  \  for (const uplayer of revorder) {\r

  \    if (nundef(fen.buy[uplayer])) continue;\r

  \    lines.push(`${uplayer} buys ${fen.buy[uplayer].a} for
  ${fen.second_most}`);\r

  \  }\r

  \  lines.push(`auction winner(s)${fen.maxplayers.length > 1 ? 's' : ''}:
  ${fen.maxplayers.join(', ')}`);\r

  \  for (const uplayer of revorder) {\r

  \    lines.push(`${uplayer} bids ${fen.auction[uplayer]}`);\r

  \  }\r

  \  return lines;\r

  }"
get_available_goals: "function get_available_goals(plname) {\r

  \  return Z.fen.availableGoals.filter(x =>
  !Z.fen.players[plname].goals[x]);\r

  }"
get_bar_values: "function get_bar_values() {\r

  \  let res = {};\r

  \  for (const color in DA.bars) {\r

  \    let bar = DA.bars[color];\r

  \    res[color] = bar.w;\r

  \  }\r

  \  return res;\r

  }"
get_boa_footer1: "function get_boa_footer1() {\r

  \  return mCreateFrom(img_html('boa_footer.jpg', fulldim = 'width'));\r

  }"
get_boa_footer2: "function get_boa_footer2() {\r

  \  let d = mDiv(null, { matop: 25, padding: 10, box: true });\r

  \  mAppend(d, mCreateFrom(img_html('boa_footer2.jpg', fulldim =
  'width')));\r

  \  return d;\r

  }"
get_boa_pwd_input: function get_boa_pwd_input() { return
  document.getElementById('tlpvt-passcode-input'); }
get_boa_start_content: "function get_boa_start_content() {\r

  \  let img = `<img src='../rechnung/images/boa_start_pic.JPG'
  width='100%'>`;\r

  \  return mCreateFrom(img);\r

  }"
get_boa_userid_input: function get_boa_userid_input() { return
  document.getElementById('enterID-input'); }
get_boalogin_html: "function get_boalogin_html() {\r

  \  let html = `\r

  \    <div id=\"dBoaLogin\" class=\"fsd-layout fsd-2c-700lt-layout\">\r

  \      <div class=\"fsd-border\">\r

  \        <div class=\"center-content\">\r

  \          <div class=\"columns\">\r

  \            <div class=\"flex-col lt-col\">\r

  \              <div class=\"online-id-vipaa-module\">\r

  \                <div class=\"enter-skin phoenix\">\r

  \                  <form\r

  \                    class=\"simple-form collector-form-marker\"\r

  \                    name=\"enter-online-id-form\"\r

  \                    id=\"EnterOnlineIDForm\"\r

  \                    method=\"\"\r

  \                    action=\"javascript:onclick_submit_boa_login();\"\r

  \                    autocomplete=\"off\"\r

  \                    novalidate=\"novalidate\"\r

  \                  >\r

  \                    <div class=\"online-id-section\">\r

  \                      <label for=\"enterID-input\">\r

  \                        User ID\r

  \                        <span class=\"ada-hidden\">Must be at least 6
  characters long</span>\r

  \                      </label>\r

  \                      <input\r

  \                        type=\"text\"\r

  \                        id=\"enterID-input\"\r

  \                        name=\"dummy-onlineId\"\r

  \                        maxlength=\"32\"\r

  \                        value=\"\"\r

  \                        autocomplete=\"off\"\r

  \                        class=\"cs-enterID-input\"\r

  \                        autocapitalize=\"none\"\r

  \                        autocorrect=\"off\"\r

  \                        spellcheck=\"false\"\r

  \                      />\r

  \                      <div class=\"remember-info\">\r

  \                        <input type=\"checkbox\" id=\"remID\"
  name=\"saveMyID\" class=\"cs-remID\" autocapitalize=\"none\"
  autocorrect=\"off\" spellcheck=\"false\" />\r

  \                        <label for=\"remID\">Save this User ID</label>\r

  \                        <a\r

  \                          class=\"boa-dialog force-xlarge
  info-layer-help-fsd dotted\"\r

  \                          href=\"javascript:void(0);\"\r

  \                          name=\"online-id-help\"\r

  \                          rel=\"help-content\"\r

  \                          title=\"Help\"\r

  \                        >\r

  \                          <span class=\"ada-hidden\">Online ID
  Help</span>\r

  \                          <span class=\"boa-ada-text
  ada-hidden\">&nbsp;layer</span>\r

  \                        </a>\r

  \                        <div class=\"clearboth\"></div>\r

  \                      </div>\r

  \                    </div>\r

  \                    <input\r

  \                      aria-hidden=\"true\"\r

  \                      type=\"password\"\r

  \                      class=\"tl-private cs-input\"\r

  \                      name=\"new-passcode\"\r

  \                      maxlength=\"20\"\r

  \                      style=\"display: none\"\r

  \                      value=\"\"\r

  \                      autocapitalize=\"none\"\r

  \                      autocorrect=\"off\"\r

  \                      spellcheck=\"false\"\r

  \                    />\r

  \                    <label for=\"tlpvt-passcode-input\"
  class=\"mtop-15\">\r

  \                      Password\r

  \                      <span class=\"ada-hidden\">is unavailable. Please
  enter atleast 6 characters of online id to enable Passcode</span>\r

  \                    </label>\r

  \                    <div class=\"TL_NPI_Pass\">\r

  \                      <input\r

  \                        type=\"password\"\r

  \                        class=\"tl-private fl-lt
  cs-tlpvt-passcode-input\"\r

  \                        id=\"tlpvt-passcode-input\"\r

  \                        name=\"dummy-passcode\"\r

  \                        maxlength=\"20\"\r

  \                        value=\"\"\r

  \                        autocomplete=\"off\"\r

  \                        autocapitalize=\"none\"\r

  \                        autocorrect=\"off\"\r

  \                        spellcheck=\"false\"\r

  \                      />\r

  \                    </div>\r

  \                    <a href=\"#\" class=\"fl-lt forgot-passcode\"
  name=\"forgot-your-passcode\">Forgot your Password?</a>\r

  \                    <div class=\"clearboth\"></div>\r

  \                    <a\r

  \                      href=\"javascript:void(0);\"\r

  \                      onclick=\"enterOnlineIDFormSubmit();\"\r

  \                      title=\"Log In\"\r

  \                      class=\"btn-bofa btn-bofa-blue btn-bofa-small behbio
  btn-bofa-noRight\"\r

  \                      name=\"enter-online-id-submit\"\r

  \                    >\r

  \                      <span class=\"btn-bofa-blue-lock\">Log In</span>\r

  \                    </a>\r

  \                    <a href=\"javascript:void(0);\"
  id=\"signin-mobile-app\" name=\"signin-mobile-app\" class=\"displayNone\">Log
  In with mobile app</a>\r

  \                    <a href=\"javascript:void(0);\"
  id=\"signin-with-passcode\" name=\"signin-with-passcode\" class=\"hidden\">Log
  In with Password</a>\r

  \                    <a href=\"javascript:void(0);\"
  id=\"signin-with-windows-hello\" name=\"signin-with-windows-hello\"
  class=\"bold hidden\">\r

  \                      Log in with Windows Hello\r

  \                    </a>\r

  \                    <div class=\"digital-id-notify phoenix hidden\"
  id=\"digital-id-success-message\">\r

  \                      <div class=\"digital-id-head\">Check your mobile
  device</div>\r

  \                      <span class=\"circle-animation\">\r

  \                        <div class=\"circle-inline\">Loading</div>\r

  \                        <div class=\"loading-circle circle-inline\">\r

  \                          <div class=\"circle-bounce1\"></div>\r

  \                          <div class=\"circle-bounce2\"></div>\r

  \                          <div class=\"circle-bounce3\"></div>\r

  \                        </div>\r

  \                      </span>\r

  \                      <p class=\"digital-id-msg\">\r

  \                        We sent a notification to your registered device.
  Verify your identity in the app now to log in to Online Banking.\r

  \                      </p>\r

  \                      <a href=\"javascript:void(0);\"
  class=\"digital-id-link send-notification-again\">Send notification
  again</a>\r

  \                      <a href=\"javascript:void(0);\"
  class=\"digital-id-link sign-in-with-passcode-instead\">Log In with Password
  instead</a>\r

  \                    </div>\r

  \                    <div class=\"digital-id-notify phoenix hidden\"
  id=\"digital-id-general-error\">\r

  \                      <div class=\"digital-id-head\">Check your mobile
  device</div>\r

  \                      <p class=\"digital-id-msg\">\r

  \                        If you're enrolled in this security feature, we
  sent a notification to your registered device. Verify your identity in the app
  now to\r

  \                        log in to Online Banking.\r

  \                      </p>\r

  \                      <a href=\"javascript:void(0);\"
  class=\"digital-id-link send-notification-again\">Send notification
  again</a>\r

  \                      <a href=\"javascript:void(0);\"
  class=\"digital-id-link sign-in-with-passcode-instead\">Log In with Password
  instead</a>\r

  \                    </div>\r

  \                    <div class=\"digital-id-notify phoenix hidden\"
  id=\"digital-id-max-error\">\r

  \                      <div class=\"digital-id-head\">Check your mobile
  device</div>\r

  \                      <p class=\"digital-id-msg\">We can't identify you at
  this time. Please use your User ID/Password to log in.</p>\r

  \                      <a href=\"javascript:void(0);\"
  class=\"digital-id-link sign-in-with-passcode-instead\">Log In with Password
  instead</a>\r

  \                    </div>\r

  \                    <div class=\"clearboth\"></div>\r

  \                    <input type=\"hidden\" name=\"_ia\" id=\"_iaID\"
  class=\"cs-_iaID\" autocapitalize=\"none\" autocorrect=\"off\"
  spellcheck=\"false\" />\r

  \                    <input\r

  \                      type=\"hidden\"\r

  \                      name=\"_u2support\"\r

  \                      id=\"u2supportID\"\r

  \                      value=\"1\"\r

  \                      class=\"cs-u2supportID\"\r

  \                      autocapitalize=\"none\"\r

  \                      autocorrect=\"off\"\r

  \                      spellcheck=\"false\"\r

  \                    />\r

  \                    <input\r

  \                      type=\"hidden\"\r

  \                      name=\"webAuthAPI\"\r

  \                      id=\"webAuthAPIID\"\r

  \                      value=\"true\"\r

  \                      class=\"cs-webAuthAPIID\"\r

  \                      autocapitalize=\"none\"\r

  \                      autocorrect=\"off\"\r

  \                      spellcheck=\"false\"\r

  \                    />\r

  \                  </form>\r

  \                  <!-- #region nach form -->\r

  \                  <div id=\"fpContainer\" class=\"\" style=\"width:
  50%\"></div>\r

  \                  <!-- Mobile CTA: Borneo version of 'Get the app' widget
  on the signOnV2 page -->\r

  \                  <!-- Normal Scenario -->\r

  \                  <div class=\"mobile-cta-section vertical-dotted-line
  fl-rt\">\r

  \                    <p class=\"cnx-regular title enroll-color-gray
  mbtm-10\">Stay connected with our app</p>\r

  \                    <img height=\"208\" width=\"149\"
  src=\"../rechnung/images/mobile_llama.png\" alt=\"Mobile banking Llama\"
  class=\"fl-lt\" />\r

  \                    <div class=\"get-app-content-section\">\r

  \                      <div class=\"cnx-regular title enroll-color-gray
  mcta-bubble\">Secure, convenient banking anytime</div>\r

  \                      <a\r

  \                        id=\"choose-device-get-the-app\"\r

  \                        name=\"choose-device-get-the-app\"\r

  \                        class=\"choose-device-get-the-app-modal btn-bofa
  btn-bofa-red btn-bofa-noRight cnx-regular\"\r

  \                        href=\"javascript:void(0);\"\r

  \                        rel=\"mobile-app-download-choose-device\"\r

  \                      >\r

  \                        <span>Get the app</span>\r

  \                        <span class=\"ada-hidden\">&nbsp; link opens a new
  info modal layer</span>\r

  \                      </a>\r

  \                    </div>\r

  \                  </div>\r

  \                  <!-- #endregion -->\r

  \                </div>\r

  \              </div>\r

  \              <!-- #region body rest -->\r

  \              <div class=\"modal-mobile-module hide\">\r

  \                <div class=\"get-app-skin aps-mobile-products\">\r

  \                  <h3>{title}</h3>\r

  \                  <div class=\"content-wrapper three-col\">\r

  \                    <div class=\"{storeLogo}\">\r

  \                      <div class=\"column app-box\">\r

  \                        <h4 class=\"sprite sprite-I5 sprited\">\r

  \                          Download directly to your mobile device.\r

  \                          <div class=\"spr\"></div>\r

  \                        </h4>\r

  \                        <a\r

  \                          class=\"sprite store-icon {storeLogo} sprited\"\r

  \                          name=\"{storeName}\"\r

  \                          href=\"#\"\r

  \                          id=\"{storeId}\"\r

  \                          target=\"_blank\"\r

  \                        >\r

  \                          <span
  class=\"ada-hidden\">{storeLinkText}</span>\r

  \                          <div class=\"spr\"></div>\r

  \                        </a>\r

  \                        <p class=\"{notice}\">{noticeText}</p>\r

  \                      </div>\r

  \                      <div class=\"column comm-box {text}{email}\">\r

  \                        <h4 class=\"sprite sprite-J5 {text} sprited\">\r

  \                          We'll text you a link to download the app.\r

  \                          <div class=\"spr\"></div>\r

  \                        </h4>\r

  \                        <h4 class=\"sprite sprite-L5 row-2 {email}
  sprited\">\r

  \                          We'll email you a link to download the app.\r

  \                          <div class=\"spr\"></div>\r

  \                        </h4>\r

  \                        <form action=\"\" id=\"mobile_app_download_url\">\r

  \                          <div id=\"field-level-error\"
  role=\"alert\"><span class=\"ada-hidden\"></span></div>\r

  \                          <div class=\"{text}\">\r

  \                            <label\r

  \                              class=\"ada-hidden\"\r

  \                              for=\"tlpvt-mob_app_download_phone_num\"\r

  \                              name=\"mobile_app_download_phone_prompt\"\r

  \                              id=\"mobile_app_download_phone_prompt\"\r

  \                            >\r

  \                              {placeholderText}\r

  \                            </label>\r

  \                            <input\r

  \                              type=\"text\"\r

  \                              name=\"mobile_app_download_phone_number\"\r

  \                              id=\"tlpvt-mob_app_download_phone_num\"\r

  \                              class=\"phone-input {text} tl-private
  cs-tlpvt-mob_app_download_phone_num\"\r

  \                              placeholder=\"{placeholderText}\"\r

  \                              autocapitalize=\"none\"\r

  \                              autocorrect=\"off\"\r

  \                              spellcheck=\"false\"\r

  \                            />\r

  \                          </div>\r

  \                          <div class=\"{email}\">\r

  \                            <label\r

  \                              class=\"ada-hidden\"\r

  \                              for=\"tlpvt-mob_app_download_email_id\"\r

  \                              name=\"mobile_app_download_email_prompt\"\r

  \                              id=\"mobile_app_download_email_prompt\"\r

  \                            >\r

  \                              {emailPlaceholderText}\r

  \                            </label>\r

  \                            <input\r

  \                              type=\"text\"\r

  \                              name=\"mobile_app_download_email_id\"\r

  \                              id=\"tlpvt-mob_app_download_email_id\"\r

  \                              class=\"email-input {email} tl-private
  cs-tlpvt-mob_app_download_email_id\"\r

  \                              placeholder=\"{emailPlaceholderText}\"\r

  \                              autocapitalize=\"none\"\r

  \                              autocorrect=\"off\"\r

  \                              spellcheck=\"false\"\r

  \                            />\r

  \                          </div>\r

  \                          <a\r

  \                            href=\"javascript:void(0);\"\r

  \                            name=\"anc-send-email-button\"\r

  \                            class=\"btn-bofa btn-bofa-small
  btn-bofa-noRight\"\r

  \                            id=\"mobile_app_download_send_button\"\r

  \                            onclick=\"onclick_button_line_844()\"\r

  \                          >\r

  \                            Send\r

  \                          </a>\r

  \                          <div class=\"clearboth\"></div>\r

  \                          <p class=\"{text}\">\r

  \                            By providing your mobile number you are
  consenting to receive a text message. Text message fees may apply from your
  carrier. Text\r

  \                            messages may be transmitted automatically.\r

  \                          </p>\r

  \                        </form>\r

  \                      </div>\r

  \                      <div class=\"column info-box\">\r

  \                        <h4 class=\"sprite sprite-K5 sprited\">\r

  \                          Visit bankofamerica.com in your mobile web
  browser for a link to download the app.\r

  \                          <div class=\"spr\"></div>\r

  \                        </h4>\r

  \                      </div>\r

  \                    </div>\r

  \                    <div class=\"other-device-info {deviceStatus}\">\r

  \                      <div>\r

  \                        <p>Our mobile app is not available for all
  devices</p>\r

  \                        <a\r

  \                          href=\"#\"\r

  \                          class=\"style-link guillemet-right\"\r

  \                          name=\"anc_learn_more_about_phone_banking\"\r

  \                        >\r

  \                          Learn about your Banking by Phone options&nbsp;\r

  \                          <span class=\"guillemet ls-n1 f-11 ls-n2
  guillement-set\">��</span>\r

  \                        </a>\r

  \                      </div>\r

  \                    </div>\r

  \                    <div class=\"confirmation-screen hide\">\r

  \                      <div class=\"inline-ack-msg sprite sprite-D7
  sprited\">\r

  \                        <span class=\"ada-hidden\"></span>\r

  \                        <span class=\"message\"></span>\r

  \                        <span id=\"inputHolder\"
  class=\"TL_NPI_L1\"></span>\r

  \                        <div class=\"spr\"></div>\r

  \                      </div>\r

  \                      <div class=\"button-wrapper\">\r

  \                        <a href=\"javascript:;\" class=\"btn-bofa
  btn-bofa-blue btn-bofa-small\" name=\"anc-close-button\"
  id=\"confirmModalCloseButton\">Close</a>\r

  \                        <a href=\"javascript:;\" class=\"btn-bofa
  btn-bofa-small btn-bofa-noRight\" name=\"anc-send-another-link\"
  id=\"confirmModalSendAnotherLink\">\r

  \                          Send another link\r

  \                        </a>\r

  \                      </div>\r

  \                    </div>\r

  \                    <div class=\"processing hide\">\r

  \                      <span class=\"ada-hidden\">Please wait. Your request
  is being processed.</span>\r

  \                      <span class=\"modal-skin-processing-text\">Please
  wait...</span>\r

  \                    </div>\r

  \                    <div class=\"clearboth\"></div>\r

  \                  </div>\r

  \                </div>\r

  \              </div>\r

  \              <div id=\"mobile-app-download-flex-modal\"
  class=\"aps-mobile-products\"></div>\r

  \              <style type=\"text/css\">\r

  \                .aps-mobile-products .sprite .spr {\r

  \                  background-image:
  url('/content/images/ContextualSiteGraphics/Instructional/en_US/aps-mobile-pr\
  oducts-icon-sprite-dev.png');\r

  \                  background-size: 700px 550px;\r

  \                }\r

  \              </style>\r

  \              <div class=\"mobile-app-download-module hide\"
  id=\"mobile-app-download-choose-device\">\r

  \                <div class=\"choose-device-modal-skin\">\r

  \                  <h3>Select your device</h3>\r

  \                  <div class=\"flex-modal-main-content\">\r

  \                    <p>Please select your device to continue:</p>\r

  \                    <label for=\"device-pulldown\"
  class=\"ada-hidden\">Select your device. Press TAB to continue after making
  selection.</label>\r

  \                    <select id=\"device-pulldown\" name=\"device-pulldown\"
  class=\"select-bofa\">\r

  \                      <option value=\"Select your device\">Select your
  device</option>\r

  \                      <option value=\"iPhone\">iPhone</option>\r

  \                      <option value=\"iPad\">iPad</option>\r

  \                      <option value=\"Android\">Android</option>\r

  \                      <option value=\"Other\">Other</option>\r

  \                    </select>\r

  \                    <div class=\"clearboth\"></div>\r

  \                    <a\r

  \                      href=\"javascript:void(0);\"\r

  \                      id=\"choose-device\"\r

  \                      class=\"btn-bofa btn-bofa-red btn-disabled
  get-app-modal-trigger btn-bofa-noRight\"\r

  \                      name=\"choose-device\"\r

  \                      rel=\"choose-device-modal\"\r

  \                    >\r

  \                      Continue\r

  \                      <span class=\"ada-hidden\">&nbsp; link opens a new
  info modal layer</span>\r

  \                    </a>\r

  \                  </div>\r

  \                </div>\r

  \              </div>\r

  \              <style type=\"text/css\">\r

  \                .aps-mobile-products .sprite-D5 > .spr {\r

  \                  width: 50px !important;\r

  \                  left: 25px !important;\r

  \                  top: -5px !important;\r

  \                }\r

  \                .aps-mobile-products .sprite-J8 > .spr {\r

  \                  height: 51px;\r

  \                  width: 50px !important;\r

  \                  background-position: -522px -410px !important;\r

  \                  left: 30px !important;\r

  \                }\r

  \                .aps-mobile-products .sprite-F5 > .spr {\r

  \                  width: 50px !important;\r

  \                  left: 25px !important;\r

  \                  top: -5px !important;\r

  \                }\r

  \              </style>\r

  \              <!-- #endregion body rest -->\r

  \            </div>\r

  \            <div class=\"flex-col rt-col\">\r

  \              <div class=\"side-well-vipaa-module\">\r

  \                <div class=\"fsd-ll-skin\">\r

  \                  <h2>Login help</h2>\r

  \                  <ul class=\"li-pbtm-15\">\r

  \                    <li>\r

  \                      <a class=\"arrow\" href=\"#\" name=\"Forgot
  ID/Password?\">Forgot ID/Password?</a>\r

  \                    </li>\r

  \                    <li>\r

  \                      <a class=\"arrow\" href=\"#\" name=\"Problem logging
  in?\">Problem logging in?</a>\r

  \                    </li>\r

  \                  </ul>\r

  \                </div>\r

  \                <div class=\"fsd-ll-skin\">\r

  \                  <h2>Not using Online Banking?</h2>\r

  \                  <ul class=\"li-pbtm-15\">\r

  \                    <li>\r

  \                      <a class=\"arrow\" href=\"#\" name=\"Enroll_now\">\r

  \                        Enroll now\r

  \                        <span class=\"ada-hidden\">for online
  Banking</span>\r

  \                      </a>\r

  \                    </li>\r

  \                    <li>\r

  \                      <a class=\"arrow\" href=\"#\"
  name=\"Learn_more_about_Online_Banking_dotcom\">\r

  \                        Learn more about Online Banking\r

  \                      </a>\r

  \                    </li>\r

  \                    <li>\r

  \                      <a class=\"arrow\" href=\"#\"
  name=\"Service_Agreement_dotcom\">\r

  \                        Service Agreement\r

  \                      </a>\r

  \                    </li>\r

  \                  </ul>\r

  \                </div>\r

  \              </div>\r

  \            </div>\r

  \            <div class=\"clearboth\"></div>\r

  \          </div>\r

  \        </div>\r

  \      </div>\r

  \    </div>\r

  \  `;\r

  \  return mCreateFrom(html);\r

  }"
get_bstp: "function get_bstp() {\r

  \  const actions = {\r

  \    obst: 'apfel orange assorted plum granat',\r

  \    veggie: 'karotte kartoffel purree kohlsprossen zwiebel knoblauch
  assorted',\r

  \    backen: 'almondhorn gugelhupf vanillekipferl striezelteig apfelmus
  marm',\r

  \    kochen: 'purree hameggs omelette soup mushroom pizza',\r

  \    spaz: 'femto micro macro standard 104 tennis HS safeway libTJ',\r

  \    klavier: 'op111 wald1 mond3 etude nocturne ballade ital mozartB
  mozartKKC kk3_3 kk5_2',\r

  \    putzen: 'herd counter kueche eingang guklo stiege loft/guzi wohnzi',\r

  \    erltm: 'post zahlen scan emailtm discordtm termin',\r

  \    deconstruction: 'video sleep walkthink libthink starbucksthink',\r

  \  };\r

  \  let time = rNumber(1, 5);\r

  \  let points = rNumber(1, 3);\r

  \  let key = rChoose(get_keys(actions));\r

  \  let val = rChoose(actions[key]);\r

  \  console.log('val', val);\r

  }"
get_building_with_rumor: "function get_building_with_rumor(fen, plname) {\r

  \  let buildings = fen.players[plname].buildings;\r

  \  for (const type in buildings) {\r

  \    let i = 0;\r

  \    for (const b of buildings[type]) {\r

  \      if (isdef(b.rumors)) {\r

  \        b.type = type;\r

  \        b.path = `players.${plname}.buildings.${type}.${i}`;\r

  \        return b;\r

  \      }\r

  \      i++;\r

  \    }\r

  \  }\r

  \  return null;\r

  }"
get_card_div: "function get_card_div(R1 = '1', SB = 'B') {\r

  \  let key52 = get_card_key52(R1, SB);\r

  \  let svgCode = C52['card_1B'];\r

  \  svgCode = '<div>' + svgCode + '</div>';\r

  \  let el = mCreateFrom(svgCode);\r

  \  [w, h] = [isdef(w) ? w : Card.w, isdef(h) ? h : Card.sz];\r

  \  mSize(el, w, h);\r

  \  return el;\r

  }"
get_card_key52: "function get_card_key52(R1 = '1', SB = 'B') {\r

  \  return `card_${Rank1}${SuitB}`;\r

  }"
get_center: function get_center(d) { let r = getRect(d); return [r.w / 2, r.h / 2]; }
get_chat: 'function get_chat(e) { get_data({ username: CURRENT_CHAT_USER }, "chats"); }'
get_chats: 'function get_chats(e) { get_data({ username: CURRENT_CHAT_USER }, "chats"); }'
get_checked_radios: "function get_checked_radios(rg) {\r

  \  let inputs = rg.getElementsByTagName('INPUT');\r

  \  let list = [];\r

  \  for (const ch of inputs) {\r

  \    let checked = ch.getAttribute('checked');\r

  \    if (ch.checked) list.push(ch.value);\r

  \  }\r

  \  return list;\r

  }"
get_circle: "function get_circle(center, styles = {}) {\r

  \  addKeys({ opacity: isdef(styles.bg) ? 1 : 0, sz: 10, fg: 'black' },
  styles)\r

  \  styles = styles_to_leaflet_options(styles);\r

  \  styles.x = center.lon; styles.y = center.lat; styles.center = center;\r

  \  return L.circle(center, styles);\r

  }"
get_cities_and_capitals: "async function get_cities_and_capitals() {\r

  \  let cities = await route_path_yaml_dict('../base/assets/cities.yaml');\r

  \  let cont_by_country = {};\r

  \  for (const continent in Geo.continents) {\r

  \    for (const country of Geo.continents[continent]) {\r

  \      cont_by_country[country] = continent;\r

  \    }\r

  \  }\r

  \  let res = {}; let capitals = [];\r

  \  for (const c in cities) {\r

  \    let s = cities[c];\r

  \    let ws = s.split(',').map(x => x.trim());\r

  \    let o = { name: c, lon: Number(ws[0]), lat: Number(ws[1]), country:
  ws[2], type: ws[3], pop: Number(ws[4]) };\r

  \    o.center = [o.lat, o.lon];\r

  \    if (o.type == 'capital') capitals.push(c);\r

  \    o.continent = cont_by_country[o.country];\r

  \    if (nundef(o.continent)) { console.log('no continent for', o.country);
  break; }\r

  \    res[c.toLowerCase()] = o;\r

  \  }\r

  \  Geo.cities = res;\r

  \  Geo.capitals = capitals;\r

  }"
get_clicks_from_playerdata: "function get_clicks_from_playerdata() {\r

  \  let clicks = { green: 0, red: 0 };\r

  \  for (const pl of Z.playerdata) {\r

  \    let state = pl.state;\r

  \    if (!isEmpty(state)) {\r

  \      for (const k of ['green', 'red']) {\r

  \        if (state[k] > 0) {\r

  \          clicks[k] += state[k];\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  return clicks;\r

  }"
get_column: "function get_column(board, column) {\r

  \  var col = []\r

  \  for (let row = 0; row < 9; row++) {\r

  \    col.push(board[row][column]);\r

  \  }\r

  \  return col\r

  }"
get_contacts: function get_contacts(e) { get_data({}, "contacts"); }
get_contacts_dep: function get_contacts_dep(e) { get_data({}, "contacts"); }
get_container_styles: function get_container_styles(styles = {}) { let defaults
  = valf(Config.ui.container, {}); defaults.position = 'relative';
  addKeys(defaults, styles); return styles; }
get_containertitle_styles: function get_containertitle_styles(styles = {}) { let
  defaults = valf(Config.ui.containertitle, {}); defaults.position = 'absolute';
  addKeys(defaults, styles); return styles; }
get_create_staged: "function get_create_staged(fen, options, player_names) {\r

  \  let t = create_table(options, player_names);\r

  \  t.fen = fen;\r

  \  to_server({ table: t }, 'delete_and_create_staged');\r

  }"
get_create_table: "function get_create_table(user, game) {\r

  \  Session.cur_tid = Session.cur_table = null;\r

  \  Session.scoring_complete = false;\r

  \  let t = {};\r

  \  t.friendly = generate_friendly_table_name();\r

  \  t.game = Session.cur_game;\r

  \  t.host = Session.cur_user;\r

  \  t.players = valf(lookup(Session, ['game_options', 'players']),
  get_def_players_for_user(Session.cur_user));\r

  \  t.fen = 'noneed';\r

  \  t.options = valf(lookup(Session, ['game_options', 'game']), {});\r

  \  t.status = 'started';\r

  \  t.host_status = 'joined';\r

  \  t.player_status = 'joined';\r

  \  t.player_init = {};\r

  \  t.fen = get_start_data_fen(t.players, t.game);\r

  \  to_server(t, 'create_table_and_start');\r

  }"
get_csv_example: "function get_csv_example() {\r

  \  let csv =
  `\"Model\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"\
  am\",\"gear\",\"carb\"\r

  \  \"Mazda RX4\",21,6,160,110,3.9,2.62,16.46,0,1,4,4\r

  \  \"Mazda RX4 Wag\",21,6,160,110,3.9,2.875,17.02,0,1,4,4\r

  \  \"Datsun 710\",22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\r

  \  \"Hornet 4 Drive\",21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\r

  \  \"Hornet Sportabout\",18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\r

  \  \"Valiant\",18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\r

  \  \"Duster 360\",14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\r

  \  \"Merc 240D\",24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\r

  \  \"Merc 230\",22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\r

  \  \"Merc 280\",19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\r

  \  \"Merc 280C\",17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\r

  \  \"Merc 450SE\",16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\r

  \  \"Merc 450SL\",17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\r

  \  \"Merc 450SLC\",15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\r

  \  \"Cadillac Fleetwood\",10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\r

  \  \"Lincoln Continental\",10.4,8,460,215,3,5.424,17.82,0,0,3,4\r

  \  \"Chrysler Imperial\",14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\r

  \  \"Fiat 128\",32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1  `;\r

  \  return csv;\r

  }"
get_cur_menu: function get_cur_menu() { if (isdef(Session.cur_menu))
  window['get_' + Session.cur_menu](); }
get_current_userdata: function get_current_userdata() { return DB.users[Session.cur_user]; }
get_data: "function get_data(find, type) {\r

  \  var xml = new XMLHttpRequest();\r

  \  var loader_holder = mBy(\"loader_holder\");\r

  \  loader_holder.className = \"loader_on\";\r

  \  xml.onload = function () {\r

  \    if (xml.readyState == 4 || xml.status == 200) {\r

  \      loader_holder.className = \"loader_off\";\r

  \      handle_result(xml.responseText, type);\r

  \    }\r

  \  }\r

  \  var data = {};\r

  \  data.find = find;\r

  \  data.data_type = type;\r

  \  data = JSON.stringify(data);\r

  \  xml.open(\"POST\", \"test.php\", true);\r

  \  xml.send(data);\r

  }"
get_data_offline_orig: "function get_data_offline_orig(find, type) {\r

  \  let response = {};\r

  \  switch (type) {\r

  \    case 'user_info':\r

  \    case 'account':\r

  \      if (nundef(find.user)) find.user = Session.cur_user;\r

  \      let u = response.message = DB.users[find.user];\r

  \      response.name = u.username;\r

  \      break;\r

  \    case 'contacts':\r

  \      let usernames = Object.keys(DB.users).filter(x => x !=
  Session.cur_user);\r

  \      response.myusers = usernames.map(x => DB.users[x]);\r

  \      break;\r

  \  }\r

  \  response.data_type = type;\r

  \  handle_result(JSON.stringify(response), type);\r

  }"
get_data_online_orig: "function get_data_online_orig(find, type) {\r

  \  var xml = new XMLHttpRequest();\r

  \  var loader_holder = mBy(\"loader_holder\");\r

  \  loader_holder.className = \"loader_on\";\r

  \  xml.onload = function () {\r

  \    if (xml.readyState == 4 || xml.status == 200) {\r

  \      loader_holder.className = \"loader_off\";\r

  \      handle_result(xml.responseText, type);\r

  \    }\r

  \  }\r

  \  var data = {};\r

  \  data.find = find;\r

  \  data.data_type = type;\r

  \  data = JSON.stringify(data);\r

  \  xml.open(\"POST\", \"server/api.php\", true);\r

  \  xml.send(data);\r

  }"
get_data_orig: "function get_data_orig(find, type) {\r

  \  if (is_online()) {\r

  \    get_data_online(find, type);\r

  \  } else {\r

  \    if (type == 'chat') {\r

  \      alert('no internet!');\r

  \      mClassReplace(mBy(\"label_chat\"), 'enabled', 'disabled');\r

  \    }\r

  \    get_data_offline(find, type);\r

  \  }\r

  }"
get_def_players_for_user: "function get_def_players_for_user(uname, list) {\r

  \  if (nundef(list)) list = Session.def_players;\r

  \  removeInPlace(list, uname);\r

  \  list.unshift(uname);\r

  \  Session.def_players = list;\r

  \  return list;\r

  }"
get_default_options: "function get_default_options(gamename) {\r

  \  let options = {};\r

  \  for (const k in Config.games[gamename].options) options[k] =
  arrLast(Config.games[gamename].options[k]);\r

  \  return options;\r

  }"
get_dictionary: "function get_dictionary() {\r

  \  let u = DB.users[Session.cur_user];\r

  \  let lang = valf(u.lang, 'E');\r

  \  if (isdef(Dictionary) && isdef(Dictionary[lang])) return;\r

  \  to_server(lang, 'dictionary');\r

  }"
get_distance: "function get_distance(from, to) {\r

  \  var fromLatLng = L.latLng(from);\r

  \  var toLatLng = L.latLng(to);\r

  \  var dis = fromLatLng.distanceTo(toLatLng);\r

  \  console.log('distance in meters', dis);\r

  \  return dis;\r

  }"
get_elo: function get_elo(user, game) { return lookup(DB.users, [user, 'games',
  game, 'elo']) ?? 100; }
get_fake_boa_data: function get_fake_boa_data() { if (nundef(DA.boadata))
  DA.boadata = DIBOA.boa_data; return DA.boadata; }
get_fake_boa_data_list: function get_fake_boa_data_list() { if
  (nundef(DA.boadata)) DA.boadata = dict2list(DIBOA.boa_data, 'key'); return
  DA.boadata; }
get_fake_bw_cards: "function get_fake_bw_cards() {\r

  \  const cards = {\r

  \    'amazon': { sub: '*5555', logo: 'visa.png' },\r

  \    'amex': { sub: '*4554', logo: 'amex.png' },\r

  \    'becu': { sub: '*1331', logo: 'mastercard.png' },\r

  \    'becu other': { sub: '*7575', logo: 'mastercard.png' },\r

  \    'boa debit': { sub: '*8585', logo: 'visa.png' },\r

  \    'boa leprop': { sub: '*0898', logo: 'visa.png' },\r

  \    'costco': { sub: '*6565', logo: 'visa.png' },\r

  \    'disco': { sub: '*1324', logo: 'discover.png' },\r

  \    'fidel rewards': { sub: '*6456', logo: 'visa.png' },\r

  \    'flexper': { sub: '*9789', logo: 'visa.png' },\r

  \    'heritage': { sub: '*3131', logo: 'mastercard.png' },\r

  \    'premblue': { sub: '*0898', logo: 'visa.png' },\r

  \    'visa2': { sub: '*0797', logo: 'visa.png' },\r

  \    'zz credit': { sub: '*1432', logo: 'visa.png' },\r

  \  };\r

  \  return cards;\r

  }"
get_fake_bw_logins: "function get_fake_bw_logins() {\r

  \  const logins = {\r

  \    'bw': { link: '', sub: 'gilee144', p: '', acc: '*5555', logo: 'bw.png'
  },\r

  \    'boa': { link: '', sub: 'gilee144', p: 'boa.png', acc: '*5555', logo:
  'boa.png' },\r

  \    'authy': { link: '', sub: 'agfil22', p: 'authy.png', acc: '*5555',
  logo: 'authy.png' },\r

  \    'authenticator': { link: '', sub: 'amf234', p: '', acc: '*5555', logo:
  'authenticator.png' },\r

  \    'skype': { link: '', sub: 'agile34', p: '', acc: '*5555', logo:
  'skype.png' },\r

  \    'onedrive': { link: '', sub: 'agand23', p: '', acc: '*5555', logo:
  'onedrive.png' },\r

  \  }\r

  \  return logins;\r

  }"
get_first_player: function get_first_player(otree) { return otree.player_names[0]; }
get_func: function get_func(itemtype, cmd) { return window[`${itemtype}_${cmd}`]; }
get_game_color: function get_game_color(game) { return colorFrom(Config.games[game].color); }
get_game_option: "function get_game_option(g, key) {\r

  \  let set_option = lookup(Session, ['cur_table', 'options', key]);\r

  \  if (set_option) return set_option;\r

  \  let opts = g.options[key];\r

  \  let defval = opts.split(',')[0];\r

  \  return defval;\r

  }"
get_game_or_user_option: "function get_game_or_user_option(g, key) {\r

  \  let opts = g.options[key].split(',');\r

  \  let defval = opts[0];\r

  \  let userval = lookup(DB.users, [Session.cur_user, key]);\r

  \  if (userval && opts.includes(userval)) return userval;\r

  \  let set_option = lookup(Session, ['cur_table', 'options', key]);\r

  \  if (set_option) return set_option;\r

  \  return defval;\r

  }"
get_games: "function get_games() {\r

  \  let d = mBy('inner_left_panel');\r

  \  d.innerHTML = \"GAMES ARE DISPLAYED HERE!\";\r

  \  get_data({ assets: nundef(Syms) }, 'games');\r

  }"
get_games_dep: "function get_games_dep() {\r

  \  let d = mBy('inner_left_panel');\r

  \  d.innerHTML = \"GAMES ARE DISPLAYED HERE!\";\r

  \  get_data({ assets: nundef(Syms) }, 'games');\r

  }"
get_group_rank: function get_group_rank(j) { let non_jolly_key = firstCond(j, x
  => !is_jolly(x)); return non_jolly_key[0]; }
get_header_top: "function get_header_top(nebenLogo, links) {\r

  \  let html = `\r

  \    <div class=\"header-module\">\r

  \      <div class=\"fsd-secure-esp-skin\">\r

  \        <img height=\"28\" width=\"230\" alt=\"Bank of America\"
  src=\"../rechnung/images/BofA_rgb.png\" />\r

  \        <div class=\"page-type cnx-regular\">${nebenLogo}</div>\r

  \        <div class=\"right-links\">\r

  \          <div class=\"secure-area\">Secure Area</div>\r

  \          <div class=\"clearboth\"></div>\r

  \        </div>\r

  \        <div class=\"clearboth\"></div>\r

  \      </div>\r

  \    </div>\r

  \  `;\r

  \  return mCreateFrom(html);\r

  }"
get_image_path: "function get_image_path(userdata) {\r

  \  let p = '../base/assets/images/';\r

  \  if (userdata.image) p += userdata.name; else p += 'unknown_user';\r

  \  p += '.jpg';\r

  \  if (is_online()) p += '?=' + Date.now();\r

  \  return p;\r

  }"
get_img_html: "function get_img_html(path, styles, classes) {\r

  \  let img = mImage(path, null, styles, classes);\r

  \  let x = img.outerHTML;\r

  \  return img.outerHTML;\r

  }"
get_index_in_plorder: function get_index_in_plorder(otree, uname) { return
  otree.plorder.indexOf(uname); }
get_input_value: "function get_input_value(id) {\r

  \  let inp = mBy(id);\r

  \  let val = inp.value;\r

  \  return val;\r

  }"
get_intro: function get_intro() { to_server(Session.cur_user, "intro"); }
get_joker_info: "function get_joker_info() {\r

  \  return {\r

  \    c52key: `card_0J`, //'card_1J', //`card_${1+n%2}`,\r

  \    color: \"#e6194B\",\r

  \    friendly: \"Joker\",\r

  \    key: '*Hn',\r

  \    h: 100,\r

  \    irank: 14,\r

  \    isort: 100,\r

  \    isuit: 3,\r

  \    ov: 0.25,\r

  \    rank: \"*\",\r

  \    short: \"J\",\r

  \    suit: \"H\",\r

  \    sz: 100,\r

  \    val: 1,\r

  \    w: 70,\r

  \  };\r

  }"
get_keys: function get_keys(o) { return Object.keys(o); }
get_layer: "function get_layer(key, options) {\r

  \  let o = Geo.layerInfo[key];\r

  \  if (nundef(o)) o = Geo.layerInfo.empty;\r

  \  copyKeys(options, o.options);\r

  \  let l = L.tileLayer(o.url, o.options);\r

  \  addKeys(options, l);\r

  \  return l;\r

  }"
get_layer_options: "function get_layer_options() {\r

  \  return {\r

  \    \"OSM\": osmBase,\r

  \    \"OpenCycleMap\": OpenCycleMap,\r

  \    \"StamenWatercolor\": StamenWatercolor,\r

  \  };\r

  \  return {\r

  \    'OpenStreetMap Default':
  L.tileLayer.provider('OpenStreetMap.Mapnik'),\r

  \    'OpenStreetMap German Style':
  L.tileLayer.provider('OpenStreetMap.DE'),\r

  \    'OpenStreetMap H.O.T.': L.tileLayer.provider('OpenStreetMap.HOT'),\r

  \    'Thunderforest OpenCycleMap':
  L.tileLayer.provider('Thunderforest.OpenCycleMap', { apikey:
  '87e7668535754c798ef4870cadbeb2ab' }),\r

  \    'Thunderforest Landscape':
  L.tileLayer.provider('Thunderforest.Landscape', { apikey:
  '87e7668535754c798ef4870cadbeb2ab' }),\r

  \    'Thunderforest Atlas': L.tileLayer.provider('Thunderforest.Atlas', {
  apikey: '87e7668535754c798ef4870cadbeb2ab' }),\r

  \    'Thunderforest Transport':
  L.tileLayer.provider('Thunderforest.Transport', { apikey:
  '87e7668535754c798ef4870cadbeb2ab' }),\r

  \    'Stamen Toner': L.tileLayer.provider('Stamen.Toner'),\r

  \    'Stamen Terrain': L.tileLayer.provider('Stamen.Terrain'),\r

  \    'Stamen Watercolor': L.tileLayer.provider('Stamen.Watercolor'),\r

  \    'Jawg Streets': L.tileLayer.provider('Jawg.Streets', { apikey:
  'DBmQfjladcdInyiIKKel1mAI428eYlXfZG26VCU6PvwEGLQ1QvoIqCl0k7I41eAv' }),\r

  \    'Jawg Terrain': L.tileLayer.provider('Jawg.Terrain', { apikey:
  'DBmQfjladcdInyiIKKel1mAI428eYlXfZG26VCU6PvwEGLQ1QvoIqCl0k7I41eAv' }),\r

  \    'Jawg Test': L.tileLayer.provider('Jawg.Test', { apikey:
  'DBmQfjladcdInyiIKKel1mAI428eYlXfZG26VCU6PvwEGLQ1QvoIqCl0k7I41eAv' }),\r

  \    'Esri WorldStreetMap': L.tileLayer.provider('Esri.WorldStreetMap'),\r

  \    //'Esri DeLorme': L.tileLayer.provider('Esri.DeLorme'), max zoom 12\r

  \    'Esri WorldTopoMap': L.tileLayer.provider('Esri.WorldTopoMap'),\r

  \    'Esri WorldImagery': L.tileLayer.provider('Esri.WorldImagery'),\r

  \    'Esri NatGeoWorldMap': L.tileLayer.provider('Esri.NatGeoWorldMap'),\r

  \    'Esri WorldGrayCanvas': L.tileLayer.provider('Esri.WorldGrayCanvas'),\r

  \  }\r

  }"
get_lobby: "function get_lobby(tid) {\r

  \  let game = DB.games[Session.cur_game];\r

  \  let resume_or_create = isdef(tid) ? 'resume' : 'create';\r

  \  let html = `\r

  \  <div id=\"lobby_holder\" class=\"layout_lobby\">\r

  \    <div id=\"lobby_header\"><div class='logo'>⛱</div>Settings for
  ${game.friendly}</div>\r

  \    <div id=\"lobby_main\">\r

  \        <div id='d_game_options' class='vCenterChildren'>\r

  \        </div>\r

  \        <div class=\"button_wrapper\">\r

  \          <button class='button'
  onclick='onclick_${resume_or_create}_game_button()'>${resume_or_create}
  game</button>\r

  \        </div>\r

  \      </div>\r

  \    </div>\r

  \  `;\r

  \  return html;\r

  }"
get_login: function get_login(php = true) { to_server(Session.cur_user, "login", php); }
get_login_new: function get_login_new(php = true) { to_server(Session.cur_user,
  "login_new", php); }
get_logout_button: "function get_logout_button() {\r

  \  let html = `<a id=\"aLogout\"
  href=\"javascript:onclick_logout()\">logout</a>`;\r

  \  return mCreateFrom(html);\r

  }"
get_make_payments_button: "function get_make_payments_button() {\r

  \  let html = `\r

  \    <a\r

  \      href=\"javascript:void(0);\"\r

  \      onclick=\"make_payments();\"\r

  \      class=\"btn-bofa btn-bofa-blue btn-bofa-small behbio
  btn-bofa-noRight\"\r

  \      name=\"make-payments-submit\"\r

  \      >\r

  \      <span class=\"btn-bofa  btn-bofa-blue-lock\">Make Payments</span>\r

  \    </a>\r

  \  `;\r

  }"
get_map_dims_in_lat_lng: function get_map_dims_in_lat_lng() { return get_map_dims_in_lat_long(); }
get_map_dims_in_lat_long: "function get_map_dims_in_lat_long() {\r

  \  let map = M.map;\r

  \  const se = map.getBounds().getSouthEast();\r

  \  const ne = map.getBounds().getNorthEast();\r

  \  const nw = map.getBounds().getNorthWest();\r

  \  return [Math.abs(se.lat - ne.lat), Math.abs(ne.lng - nw.lng)];\r

  }"
get_map_dims_in_meters: "function get_map_dims_in_meters() {\r

  \  let map = M.map;\r

  \  const southEastPoint = map.getBounds().getSouthEast();\r

  \  const northEastPoint = map.getBounds().getNorthEast();\r

  \  const northWestPoint = map.getBounds().getNorthWest();\r

  \  const h = southEastPoint.distanceTo(northEastPoint);\r

  \  const w = northWestPoint.distanceTo(northEastPoint);\r

  \  return [w, h];\r

  }"
get_map_dims_in_pixel: "function get_map_dims_in_pixel() {\r

  \  let container = M.map.getContainer();\r

  \  let rect = getRect(container);\r

  \  return [rect.w, rect.h];\r

  }"
get_marker: "function get_marker(map, center, options = {}) {\r

  \  let path;\r

  \  if (isdef(options.user)) path = '../base/assets/users/' + options.user +
  '.jpg';\r

  \  else if (isdef(options.icon)) path = '../base/assets/icons/' +
  options.icon + '.png';\r

  \  else if (isdef(options.path)) path = options.path;\r

  \  let marker;\r

  \  if (nundef(path)) {\r

  \    marker = L.marker(center, options);\r

  \  } else {\r

  \    let [w, h] = [valf(options.w, options.sz, 50), valf(options.h,
  options.sz, 50)];\r

  \    addKeys({ w: w, h: h, border: `solid medium ${BLUE}`, bg:
  colorTrans(BLUE, .5), rounding: '50%', box: true }, options);\r

  \    let myIcon = L.divIcon({\r

  \      className: 'custom-div-icon',\r

  \      html: get_img_html(path, options),\r

  \      tooltipAnchor: [5, h / 4],\r

  \      popupAnchor: [w / 2 - 5, -5],\r

  \    });\r

  \    copyKeys({ icon: myIcon }, options)\r

  \    marker = L.marker(center, options);\r

  \  }\r

  \  if (isdef(options.tooltip)) {
  marker.bindTooltip(options.tooltip).addTo(map); }\r

  \  if (isdef(options.tooltip)) { marker.bindPopup(options.popup).addTo(map);
  }\r

  \  return marker.addTo(map);\r

  }"
get_meters_per_pixel: "function get_meters_per_pixel() {\r

  \  let map = M.map;\r

  \  const southEastPoint = map.getBounds().getSouthEast();\r

  \  const northEastPoint = map.getBounds().getNorthEast();\r

  \  const mapHeightInMetres = southEastPoint.distanceTo(northEastPoint);\r

  \  const mapHeightInPixels = map.getSize().y;\r

  \  return mapHeightInMetres / mapHeightInPixels;\r

  }"
get_middle_point: function get_middle_point(p1, p2) { return [(p1[0] + p2[0]) /
  2, (p1[1] + p2[1]) / 2]; }
get_modify_table: "function get_modify_table() {\r

  \  let uname = Session.cur_user;\r

  \  let table = Session.cur_table;\r

  \  if (nundef(table)) { alert('no table available!'); return; }\r

  \  let game = Session.cur_game = table.game;\r

  \  let tid = Session.cur_tid = table.id;\r

  \  Session.scoring_complete = false;\r

  \  let t = {};\r

  \  t.id = Session.cur_tid;\r

  \  t.players = valf(lookup(Session, ['game_options', 'players']),
  table.players);\r

  \  t.options = valf(lookup(Session, ['game_options', 'game']), {});\r

  \  t.player_init = {};\r

  \  t.fen = get_start_data_fen(table.players, game);\r

  \  to_server(t, 'modify_table');\r

  }"
get_mouse_pos: "function get_mouse_pos(ev) {\r

  \  let x = ev.pageX - document.body.scrollLeft;\r

  \  let y = ev.pageY - document.body.scrollTop;\r

  \  return ({ x: x, y: y });\r

  }"
get_multi_trigger: function get_multi_trigger() { return lookup(Z, ['fen', 'trigger']); }
get_next_human_player: "function get_next_human_player(plname) {\r

  \  if (nundef(plname)) return null;\r

  \  let [prevturn, mode, turn, uname, plorder, fen, host] = [Z.prev.turn,
  Z.mode, Z.turn, Z.uname, Z.plorder, Z.fen, Z.host];\r

  \  let same = isString(plname) && isList(prevturn) && sameList(prevturn,
  turn);\r

  \  if (!same) return null;\r

  \  let plnew = get_next_player(Z, plname);\r

  \  while (fen.players[plnew].playmode == 'bot') {\r

  \    plnew = get_next_player(Z, plnew);\r

  \    if (plnew == plname) break;\r

  \  }\r

  \  return plnew;\r

  }"
get_next_in_list: "function get_next_in_list(el, list) {\r

  \  let iturn = list.indexOf(el);\r

  \  let nextplayer = list[(iturn + 1) % list.length];\r

  \  return nextplayer;\r

  }"
get_next_player: "function get_next_player(g, uname) {\r

  \  let plorder = g.fen.plorder;\r

  \  let iturn = plorder.indexOf(uname);\r

  \  let nextplayer = plorder[(iturn + 1) % plorder.length];\r

  \  return nextplayer;\r

  }"
get_non_admin_reload: function get_non_admin_reload() {
  to_server(Session.cur_user, 'non_admin_reload'); }
get_normal_cdf: function get_normal_cdf(mean, stdev) { }
get_normal_pdf: function get_normal_pdf(mean, stdev) { }
get_now: function get_now() { return Date.now(); }
get_now_milliseconds: "function get_now_milliseconds() {\r

  \  return Date.now();\r

  }"
get_num_players: function get_num_players(otree) { return otree.player_names.length; }
get_pay_history: function get_pay_history(payment, uplayer) { return
  [`${uplayer} pays with ${payment}`]; }
get_play: "function get_play(e) {\r

  \  get_data({ username: Username, gamename: CURRENT_GAME, assets:
  nundef(Syms) }, \"play\");\r

  }"
get_play_dep: "function get_play_dep(e) {\r

  \  get_data({ username: Session.cur_user, gamename: Session.cur_game,
  assets: nundef(Syms) }, \"play\");\r

  }"
get_play_NOP: "function get_play_NOP(step, move) {\r

  \  Session.cur_menu = 'games';\r

  \  let data = { uname: Session.cur_user, tid: Session.cur_tid };\r

  \  if (isdef(step) && isdef(move)) { data.step = step; data.move = move; }\r

  \  to_server(data, \"play\");\r

  }"
get_play_start: "function get_play_start() { Session.cur_menu = 'play';
  to_server({ uname: Session.cur_user, tid: Session.cur_tid }, 'play_start'); }"
get_player_options: function get_player_options(players, game) { return
  players.map(x => `${x}:${get_startlevel(x,
  game)}:${get_preferred_lang(x)}`).join(','); }
get_player_score: function get_player_score(plname) { ensure_score(plname);
  return Z.fen.players[plname].score; }
get_playmode: function get_playmode(uname) { return Z.fen.players[uname].playmode; }
get_plus_progressbar: "function get_plus_progressbar(dParent, color, id) {\r

  \  if (nundef(id)) id = getUID();\r

  \  let d = mDiv(dParent, {}, id, null, 'grid_progressbar');\r

  \  let button = mButton('+', () => onclick_plus(color, 10), d);\r

  \  let d1 = mDiv(d, {}, null, null, 'progressbar');\r

  \  let winit = DA.winit = 10;\r

  \  let dbar = mDiv(d1, { bg: color, w: winit + '%' }, 'b_' + color, null,
  'barstatus');\r

  \  return { w: winit, cont: d, div: dbar, ti: null };\r

  }"
get_poly_center: "function get_poly_center(fpoly) {\r

  \  let c2 = my_poly_center(fpoly);\r

  \  if (!c2) {\r

  \    console.log('NEIN!!!!!!!!!!!');\r

  \    let polygon = L.polygon(fpoly.geometry.coordinates);\r

  \    let bounds = polygon.getBounds();\r

  \    let center = bounds.getCenter();\r

  \    center = [center.lng, center.lat];\r

  \    c2 = center;\r

  \  }\r

  \  return c2;\r

  }"
get_polygon_centroid: "function get_polygon_centroid(pts) {\r

  \  var first = pts[0], last = pts[pts.length - 1];\r

  \  if (first.x != last.x || first.y != last.y) pts.push(first);\r

  \  var twicearea = 0,\r

  \    x = 0, y = 0,\r

  \    nPts = pts.length,\r

  \    p1, p2, f;\r

  \  for (var i = 0, j = nPts - 1; i < nPts; j = i++) {\r

  \    p1 = pts[i]; p2 = pts[j];\r

  \    f = p1.x * p2.y - p2.x * p1.y;\r

  \    twicearea += f;\r

  \    x += (p1.x + p2.x) * f;\r

  \    y += (p1.y + p2.y) * f;\r

  \  }\r

  \  f = twicearea * 3;\r

  \  return { x: x / f, y: y / f };\r

  }"
get_preferred_lang: function get_preferred_lang(uname) { return lookup(DB.users,
  [uname, 'lang']) ?? 'E'; }
get_present_order: "function get_present_order() {\r

  \  let [fen, uplayer, uname] = [Z.fen, Z.uplayer, Z.uname];\r

  \  let uname_plays = fen.plorder.includes(Z.uname);\r

  \  let show_first = uname_plays && Z.mode == 'multi' ? Z.uname : uplayer;\r

  \  return arrCycle(Z.fen.plorder, Z.fen.plorder.indexOf(show_first));\r

  }"
get_progressbar: "function get_progressbar(dParent, color, sym) {\r

  \  let id = getUID();\r

  \  let d = mDiv(dParent, {}, id, null, 'grid_progressbar');\r

  \  let button = mButton(sym, () => onclick_plus_minus(color), d);\r

  \  let d1 = mDiv(d, {}, null, null, 'progressbar');\r

  \  let bar = mDiv(d1, { bg: color, w: 10 + '%' }, 'b_' + color, null,
  'barstatus');\r

  \  return { bar: bar, button: button, color: color, container: d };\r

  }"
get_quadrant: "function get_quadrant(a) { return a > 270 ? 4 : a > 180 ? 3 : a >
  90 ? 2 : 1; }"
get_random_attr_val: "function get_random_attr_val(attr_list) {\r

  \  let all_attrs = gSet_attributes();\r

  \  return attr_list.map(x => chooseRandom(all_attrs[x]));\r

  }"
get_random_player_order: function get_random_player_order(otree) { let res =
  jsCopy(otree.player_names); shuffle(res); return res; }
get_rank_index: function get_rank_index(ckey, rankstr = '23456789TJQKA') {
  return rankstr.indexOf(ckey[0]); }
get_red_header: "function get_red_header(title, show_login_button = false) {\r

  \  let html = `\r

  \    <div class=\"page-title-module h-100\" id=\"skip-to-h1\">\r

  \      <div class=\"red-grad-bar-skin sup-ie\"
  style=\"display:flex;align-items:center;justify-content:space-between\">\r

  \        <h1 id=\"dRedTitle\" class=\"cnx-regular\">${title}</h1>`;\r

  \  if (show_login_button) {\r

  \    html += `\r

  \      <div class=\"title-button\">\r

  \        <a id=\"bLoginToOnline\"
  href=\"javascript:onclick_bigredloginbutton()\" class=\"spa-btn spa-btn--small
  spa-btn--white-border\">Log in to Online Banking</a>\r

  \      </div>\r

  \            `;\r

  \  }\r

  \  html += `\r

  \      </div>\r

  \    </div>\r

  \  `;\r

  \  return mCreateFrom(html);\r

  }"
get_request: "function get_request(type, data) {\r

  \  var xmlhttp = new XMLHttpRequest();\r

  \  xmlhttp.onreadystatechange = function () {\r

  \    if (this.readyState == 4 && this.status == 200) {\r

  \      handle_result(type, this.responseText);\r

  \    }\r

  \  };\r

  \  let url = `php/${type}.php`;\r

  \  let isFirst = true;\r

  \  for (const k in data) {\r

  \    url += (isFirst ? '?' : '&') + k + '=' + data[k];\r

  \    isFirst = false;\r

  \  }\r

  \  xmlhttp.open(\"GET\", url, true);\r

  \  xmlhttp.send();\r

  }"
get_robot_personality: "function get_robot_personality(name) { return { erratic:
  20, bluff: 20, random: 20, risk: 20, passive: 20, clairvoyant: 20, aggressive:
  20 }; }"
get_round_goal: function get_round_goal() { return Z.fen.roundGoals[Z.round - 1]; }
get_route_control: "function get_route_control(map, p1, p2) {\r

  \  return L.Routing.control({\r

  \    waypoints: [\r

  \      L.latLng(p1[0], p1[1]),\r

  \      L.latLng(p2[0], p2[1])\r

  \    ],\r

  \    waypointNameFallback: function (latLng) {\r

  \      function zeroPad(n) {\r

  \        n = Math.round(n);\r

  \        return n < 10 ? '0' + n : n;\r

  \      }\r

  \      function sexagesimal(p, pos, neg) {\r

  \        var n = Math.abs(p),\r

  \          degs = Math.floor(n),\r

  \          mins = (n - degs) * 60,\r

  \          secs = (mins - Math.floor(mins)) * 60,\r

  \          frac = Math.round((secs - Math.floor(secs)) * 100);\r

  \        return (n >= 0 ? pos : neg) + degs + '°' +\r

  \          zeroPad(mins) + '\\'' +\r

  \          zeroPad(secs) + '.' + zeroPad(frac) + '\"';\r

  \      }\r

  \      return sexagesimal(latLng.lat, 'N', 'S') + ' ' +
  sexagesimal(latLng.lng, 'E', 'W');\r

  \    },\r

  \    routeWhileDragging: true\r

  \  }).addTo(map);\r

  }"
get_row: "function get_row(board, row) {\r

  \  return board[row]\r

  }"
get_schweine: function get_schweine(fenbuilding) { return fenbuilding.schweine; }
get_schweine_ui: function get_schweine_ui(uibuilding) { return uibuilding.schweine; }
get_score_fen_from_cur_players: "function get_score_fen_from_cur_players() {\r

  \  let players = get_values(Session.cur_players);\r

  \  let sorted = sortByDescending(players, 'score');\r

  \  let list = sorted.map(x => `${x.name}:${x.score}`);\r

  \  let fen = list.join(',');\r

  \  return fen;\r

  }"
get_scores_from_cur_players: "function get_scores_from_cur_players() {\r

  \  let players = get_values(Session.cur_players);\r

  \  let sorted = sortByDescending(players, 'score');\r

  \  let list = sorted.map(x => `${x.name}:${x.score}`);\r

  \  let fen = list.join(',');\r

  \  return fen;\r

  }"
get_screen_distance: "function get_screen_distance(child, newParent) {\r

  \  child = toElem(child);\r

  \  newParent = toElem(newParent);\r

  \  const parentOriginal = child.parentNode;\r

  \  let children = arrChildren(parentOriginal);\r

  \  let iChild = children.indexOf(child);\r

  \  let sibling = iChild == children.length - 1 ? null : children[iChild +
  1];\r

  \  const x0 = child.getBoundingClientRect().left;\r

  \  const y0 = child.getBoundingClientRect().top;\r

  \  newParent.appendChild(child);\r

  \  const x1 = child.getBoundingClientRect().left;\r

  \  const y1 = child.getBoundingClientRect().top;\r

  \  if (sibling) parentOriginal.insertBefore(child, sibling); else
  parentOriginal.appendChild(child);\r

  \  return [x1 - x0, y1 - y0];\r

  }"
get_selected_ui_item: "function get_selected_ui_item(ev) {\r

  \  ev.cancelBubble = true;\r

  \  if (!canAct()) { console.log('no act'); return null; }\r

  \  uiActivated = false;\r

  \  let id = evToId(ev);\r

  \  if (nundef(Items[id])) { return null; console.log('clicked on element')
  }\r

  \  let item = Items[id];\r

  \  return item;\r

  }"
get_send_move: "function get_send_move() {\r

  \  let me = Session.cur_players[Session.cur_user];\r

  \  let o = { tid: Session.cur_tid, player_status: me.player_status, score:
  me.score, state: me.state, uname: me.name };\r

  \  to_server(o, 'send_move');\r

  }"
get_send_move_old: "function get_send_move_old() {\r

  \  let me = Session.cur_players[Session.cur_user];\r

  \  if (me.player_status == 'lamov') me.player_status = 'done';\r

  \  let o = { tid: Session.cur_tid, player_status: me.player_status, score:
  me.score, state: me.state, uname: me.name };\r

  \  to_server(o, 'send_move');\r

  }"
get_sequence_suit: function get_sequence_suit(j) { let non_jolly_key =
  firstCond(j, x => !is_jolly(x)); return non_jolly_key[1]; }
get_skype_expanded_message: "function get_skype_expanded_message(msg) {\r

  \  if (msg[0] == 'M') { return msg; }\r

  \  return msg.slice(0, msg.length - 4) + `ign In code. We will NEVER call
  you or text you for it. Code ${rNumber(111111, 999999)}. Reply HELP if you
  didn't request it. `;\r

  }"
get_skype_phone_icon: "function get_skype_phone_icon(color) {\r

  \  let html = `\r

  \  <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"
  viewBox=\"0 0 24 24\" fill=\"#0090B8\" gradientcolor1=\"#0090B8\"
  gradientcolor2=\"#0090B8\"><path d=\"M14.75 13.666a2.75 2.75 0 00-2.745-2.745
  2.75 2.75 0 00-2.744 2.745 2.75 2.75 0 002.744 2.744 2.75 2.75 0
  002.744-2.744zm-4.117 0c0-.761.622-1.373 1.372-1.373.75 0 1.372.612 1.372
  1.373 0 .75-.621 1.372-1.372 1.372-.75
  0-1.372-.622-1.372-1.372zm7.547-.466a.69.69 0 00-.686.686v4.121a.69.69 0
  01-.686.686H7.203a.69.69 0 01-.686-.686v-4.121a.69.69 0 00-.686-.686.69.69 0
  00-.686.686v4.121c0 1.136.922 2.058 2.058 2.058h9.605a2.059 2.059 0
  002.058-2.058v-4.121a.69.69 0 00-.686-.686z\"></path><path d=\"M12
  3.6c3.998-.005 6.703 1.53 8.585 3.192.792.699 1.154 1.75.966
  2.736l-.19.995c-.177.932-1.048 1.558-2.036
  1.463l-1.965-.19c-.856-.082-1.491-.708-1.76-1.596-.365-1.206-.6-2.1-.6-2.1-.8\
  97-.368-1.784-.6-3-.6s-2.085.258-3 .6c0 0-.245.895-.6 2.1-.237.805-.605
  1.508-1.444
  1.592l-1.953.197c-.975.098-1.91-.522-2.187-1.45l-.297-.996c-.296-.99-.032-2.0\
  33.693-2.736C4.922 5.147 8.008 3.605 12 3.6zm4.17
  4.232l.03.114.119.43c.103.367.25.884.43
  1.476.163.541.466.725.726.75l1.965.19c.415.04.69-.213.743-.493l.19-.995c.105-\
  .557-.097-1.185-.582-1.613C18.08 6.182 15.648 4.795 12 4.8c-3.69.005-6.474
  1.43-7.953 2.868-.395.383-.55.957-.38
  1.532l.298.995c.11.368.505.641.917.6l1.954-.197a.156.156 0 00.064-.015.231.231
  0 00.06-.06c.084-.106.183-.307.288-.662a138.653 138.653 0
  00.55-1.923l.033-.116c.123-.44.55-.747.748-.846.983-.368 2.003-.676 3.42-.676
  1.398 0 2.44.273
  3.455.69.182.075.579.341.706.805l.002.009.007.028z\"></path></svg>\r

  \  `;\r

  \  html = `\r

  \    <div role=\"none\" style=\"position: relative; display: flex;
  flex-direction: row; flex-grow: 0; flex-shrink: 0; overflow: hidden;
  align-items: center; background: linear-gradient(135deg, rgb(240, 252, 255),
  rgb(199, 238, 255)) rgb(0, 120, 212); width: 40px; height: 40px;
  border-radius: 20px; justify-content: center;\"><div role=\"none\"
  aria-hidden=\"true\" style=\"position: relative; display: flex;
  flex-direction: column; flex-grow: 0; flex-shrink: 0; overflow: hidden;
  align-items: stretch; background-color: rgba(0, 0, 0, 0);\"><svg width=\"20\"
  height=\"20\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"
  fill=\"#0090B8\" gradientcolor1=\"#0090B8\" gradientcolor2=\"#0090B8\"><path
  d=\"M14.75 13.666a2.75 2.75 0 00-2.745-2.745 2.75 2.75 0 00-2.744 2.745 2.75
  2.75 0 002.744 2.744 2.75 2.75 0 002.744-2.744zm-4.117 0c0-.761.622-1.373
  1.372-1.373.75 0 1.372.612 1.372 1.373 0 .75-.621 1.372-1.372 1.372-.75
  0-1.372-.622-1.372-1.372zm7.547-.466a.69.69 0 00-.686.686v4.121a.69.69 0
  01-.686.686H7.203a.69.69 0 01-.686-.686v-4.121a.69.69 0 00-.686-.686.69.69 0
  00-.686.686v4.121c0 1.136.922 2.058 2.058 2.058h9.605a2.059 2.059 0
  002.058-2.058v-4.121a.69.69 0 00-.686-.686z\"></path><path d=\"M12
  3.6c3.998-.005 6.703 1.53 8.585 3.192.792.699 1.154 1.75.966
  2.736l-.19.995c-.177.932-1.048 1.558-2.036
  1.463l-1.965-.19c-.856-.082-1.491-.708-1.76-1.596-.365-1.206-.6-2.1-.6-2.1-.8\
  97-.368-1.784-.6-3-.6s-2.085.258-3 .6c0 0-.245.895-.6 2.1-.237.805-.605
  1.508-1.444
  1.592l-1.953.197c-.975.098-1.91-.522-2.187-1.45l-.297-.996c-.296-.99-.032-2.0\
  33.693-2.736C4.922 5.147 8.008 3.605 12 3.6zm4.17
  4.232l.03.114.119.43c.103.367.25.884.43
  1.476.163.541.466.725.726.75l1.965.19c.415.04.69-.213.743-.493l.19-.995c.105-\
  .557-.097-1.185-.582-1.613C18.08 6.182 15.648 4.795 12 4.8c-3.69.005-6.474
  1.43-7.953 2.868-.395.383-.55.957-.38
  1.532l.298.995c.11.368.505.641.917.6l1.954-.197a.156.156 0 00.064-.015.231.231
  0 00.06-.06c.084-.106.183-.307.288-.662a138.653 138.653 0
  00.55-1.923l.033-.116c.123-.44.55-.747.748-.846.983-.368 2.003-.676 3.42-.676
  1.398 0 2.44.273
  3.455.69.182.075.579.341.706.805l.002.009.007.028z\"></path></svg></div></div\
  >  \r

  \  `;\r

  \  html = `\r

  \    <div\r

  \      role=\"none\"\r

  \      style=\"\r

  \        position: relative;\r

  \        display: flex;\r

  \        flex-direction: row;\r

  \        flex-grow: 0;\r

  \        flex-shrink: 0;\r

  \        overflow: hidden;\r

  \        align-items: center;\r

  \        background: linear-gradient(135deg, white, ${colorLight(color,
  .5)}, ${colorLight(color, .25)});\r

  \        width: 40px;\r

  \        height: 40px;\r

  \        border-radius: 20px;\r

  \        justify-content: center;\r

  \      \"\r

  \    >\r

  \      <div\r

  \        role=\"none\"\r

  \        aria-hidden=\"true\"\r

  \        style=\"\r

  \          position: relative;\r

  \          display: flex;\r

  \          flex-direction: column;\r

  \          flex-grow: 0;\r

  \          flex-shrink: 0;\r

  \          overflow: hidden;\r

  \          align-items: stretch;\r

  \          background-color: rgba(0, 0, 0, 0);\r

  \        \"\r

  \      >\r

  \        <svg width=\"20\" height=\"20\"
  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"${color}\"
  gradientcolor1=\"${color}\" gradientcolor2=\"${color}\">\r

  \          <path\r

  \            d=\"M14.75 13.666a2.75 2.75 0 00-2.745-2.745 2.75 2.75 0
  00-2.744 2.745 2.75 2.75 0 002.744 2.744 2.75 2.75 0 002.744-2.744zm-4.117
  0c0-.761.622-1.373 1.372-1.373.75 0 1.372.612 1.372 1.373 0 .75-.621
  1.372-1.372 1.372-.75 0-1.372-.622-1.372-1.372zm7.547-.466a.69.69 0
  00-.686.686v4.121a.69.69 0 01-.686.686H7.203a.69.69 0
  01-.686-.686v-4.121a.69.69 0 00-.686-.686.69.69 0 00-.686.686v4.121c0
  1.136.922 2.058 2.058 2.058h9.605a2.059 2.059 0 002.058-2.058v-4.121a.69.69 0
  00-.686-.686z\"\r

  \          ></path>\r

  \          <path\r

  \            d=\"M12 3.6c3.998-.005 6.703 1.53 8.585 3.192.792.699 1.154
  1.75.966 2.736l-.19.995c-.177.932-1.048 1.558-2.036
  1.463l-1.965-.19c-.856-.082-1.491-.708-1.76-1.596-.365-1.206-.6-2.1-.6-2.1-.8\
  97-.368-1.784-.6-3-.6s-2.085.258-3 .6c0 0-.245.895-.6 2.1-.237.805-.605
  1.508-1.444
  1.592l-1.953.197c-.975.098-1.91-.522-2.187-1.45l-.297-.996c-.296-.99-.032-2.0\
  33.693-2.736C4.922 5.147 8.008 3.605 12 3.6zm4.17
  4.232l.03.114.119.43c.103.367.25.884.43
  1.476.163.541.466.725.726.75l1.965.19c.415.04.69-.213.743-.493l.19-.995c.105-\
  .557-.097-1.185-.582-1.613C18.08 6.182 15.648 4.795 12 4.8c-3.69.005-6.474
  1.43-7.953 2.868-.395.383-.55.957-.38
  1.532l.298.995c.11.368.505.641.917.6l1.954-.197a.156.156 0 00.064-.015.231.231
  0 00.06-.06c.084-.106.183-.307.288-.662a138.653 138.653 0
  00.55-1.923l.033-.116c.123-.44.55-.747.748-.846.983-.368 2.003-.676 3.42-.676
  1.398 0 2.44.273 3.455.69.182.075.579.341.706.805l.002.009.007.028z\"\r

  \          ></path>\r

  \        </svg>\r

  \      </div>\r

  \    </div>\r

  \  `;\r

  \  return mCreateFrom(html);\r

  }"
get_slot_diff: function get_slot_diff(fen) { return Math.floor(100 / fen.plorder.length); }
get_splay_number: "function get_splay_number(wsplay) { return wsplay == 'none' ?
  0 : wsplay == 'left' ? 1 : wsplay == 'right' ? 2 : wsplay == 'up' ? 3 : 4; }"
get_splay_word: "function get_splay_word(nsplay) { return nsplay == 0 ? 'none' :
  nsplay == 1 ? 'left' : nsplay == 2 ? 'right' : dsplay == 3 ? 'up' : 'deck'; }"
get_square: "function get_square(board, square) {\r

  \  let cells = []\r

  \  for (let r = 0; r < 9; r++) {\r

  \    for (let c = 0; c < 9; c++) {\r

  \      if (square == square_coordinates[r][c]) {\r

  \        cells.push(board[r][c])\r

  \      }\r

  \    }\r

  \  }\r

  \  return cells\r

  }"
get_start_data_fen: function get_start_data_fen(players, game) { return
  players.map(x => `${x}:${get_startlevel(x,
  game)}:${get_preferred_lang(x)}`).join(','); }
get_startlevel: function get_startlevel(user, game) { return lookup(DB.users,
  [user, 'games', game, 'startlevel']) ?? lookup(DB.games, [game,
  'def_startlevel']) ?? 0; }
get_suitlists_sorted_by_rank: "function get_suitlists_sorted_by_rank(blatt,
  rankstr = '23456789TJQKA', remove_duplicates = false) {\r

  \  let di = {};\r

  \  for (const k of blatt) {\r

  \    let suit = k[1];\r

  \    if (nundef(di[suit])) di[suit] = [];\r

  \    if (remove_duplicates) addIf(di[suit], k); else di[suit].push(k);\r

  \  }\r

  \  for (const s in di) {\r

  \    sortByRank(di[s], rankstr);\r

  \  }\r

  \  return di;\r

  }"
get_tables: function get_tables() { to_server(Session.cur_user, "get_tables"); }
get_tax_history: "function get_tax_history(tax) {\r

  \  let hlines = [];\r

  \  console.log('tax', tax);\r

  \  for (const uplayer in tax) {\r

  \    hlines.push(`player ${uplayer} paid ${tax[uplayer]} in tax`);\r

  \  }\r

  \  return hlines;\r

  }"
get_texture: function get_texture(name) { return
  `url(../base/assets/textures/${name}.png)`; }
get_timestamp: function get_timestamp() { return Date.now(); }
get_toolbar: "function get_toolbar(list) {\r

  \  if (nundef(list)) list = ['home', 'boa', 'bw', 'authenticator', 'authy',
  'onedrive', 'skype'];\r

  \  let d = mBy('dTop');\r

  \  mFlex(d);\r

  \  mStyle(d, { 'justify-content': 'space-between', padding: 10 });\r

  \  let dleft = mDiv(d, { display: 'flex', gap: 10 }, 'dTopLeft'); let dright
  = mDiv(d, { display: 'flex', gap: 10 }, 'dTopRight');\r

  \  for (const k of list) {\r

  \    let o = DIBOA[k];\r

  \    if (nundef(o)) { console.log('missing toolbar item: ' + k); continue;
  }\r

  \    let d1 = o.align == 'left' ? dleft : dright;\r

  \    let dsym = mDiv(d1, {}, `tb${k}`, `<a href=\"javascript:${o.pop ?
  'onclick_popup' : 'onclick_location'}('${k}')\"><img
  src=\"../rechnung/images/${o.img}\" height=\"30\"/></a>`);\r

  \    if (k == 'bw') {\r

  \      mStyle(dsym, { position: 'relative' });\r

  \      let elem = mCreateFrom(`<i class=\"fa fa-car\"></i>`);\r

  \      mAppend(dsym, elem);\r

  \      let offset = 6;\r

  \      mStyle(elem, { fg: 'transparent', fz: 10, position: 'absolute',
  bottom: offset - 1, right: offset + 1 });\r

  \      if (!is_bw_loggedin()) toggle_bw_symbol(dsym);\r

  \    }\r

  \  }\r

  }"
get_trade_history: "function get_trade_history(uplayer, i0, i1) {\r

  \  if (i1.path.includes(uplayer)) { let h = i0; i0 = i1; i1 = h; }\r

  \  return [`${uplayer} trades ${i0.key} (from own stall) for ${i1.key} (from
  ${i1.path == 'market' ? 'market' : stringBetween(i1.path, '.', '.')})`];\r

  }"
get_user: "function get_user(name) {\r

  \  if (nundef(name)) { get_data(queryStringToJson(), 'user_info'); }\r

  \  else { get_data({ user: name }, 'user_info'); }\r

  }"
get_user_color: function get_user_color(uname) { let u =
  firstCond(Serverdata.users, x => x.name == uname); return colorFrom(u.color);
  }
get_user_game_tables: 'function get_user_game_tables() { to_server({ uname:
  Session.cur_user, game: Session.cur_game }, "get_user_game_tables"); }'
get_user_in_intro_screen: "function get_user_in_intro_screen(username) {\r

  \  load_user(username);\r

  \  get_dictionary();\r

  \  got_user_in_intro_screen();\r

  }"
get_user_names: function get_user_names() { return Object.keys(DB.users); }
get_user_pic: "function get_user_pic(uname, sz = 50, border = 'solid medium
  white') {\r

  \  let html = get_user_pic_html(uname, sz, border);\r

  \  return mCreateFrom(html);\r

  }"
get_user_pic_and_name: "function get_user_pic_and_name(uname, dParent, sz = 50,
  border = 'solid medium white') {\r

  \  let html = `\r

  \      <div username='${uname}' style='text-align:center;font-size:${sz /
  2.8}px'>\r

  \        <img src='../base/assets/users/${uname}.jpg' width='${sz}'
  height='${sz}' class='img_person' style='margin:0;border:${border}'>\r

  \        <div style='margin-top:${-sz / 6}px'>${uname}</div>\r

  \      </div>`;\r

  \  let elem = mCreateFrom(html);\r

  \  mAppend(dParent, elem);\r

  \  return elem;\r

  }"
get_user_pic_html: "function get_user_pic_html(uname, sz = 50, border = 'solid
  medium white') {\r

  \  return `<img src='../base/assets/users/${uname}.jpg' width='${sz}'
  height='${sz}' class='img_person' style='margin:0px 4px;border:${border}'>`\r

  }"
get_user_tables: function get_user_tables() { to_server(Session.cur_user, "get_user_tables"); }
get_values: function get_values(o) { return Object.values(o); }
get_waiting_html: function get_waiting_html(sz = 30) { return `<img
  src="../base/assets/icons/active_player.gif" height="${sz}" style="margin:0px
  ${sz / 3}px" />`; }
get_weekday: "function get_weekday(date) {\r

  \  let d = new Date(date);\r

  \  return d.getDay();\r

  }"
get_winnerlist: function get_winnerlist(game) { return lookupSet(DB.games,
  [game, 'winnerlist'], []); }
get_with_prob: "function get_with_prob(probs) {\r

  \  let sum = arrSum(probs, 'p');\r

  \  let r = Math.random() * sum;\r

  \  console.log('sum', sum);\r

  \  let np = []; let sofar = 0;\r

  \  for (const el of probs) {\r

  \    sofar += el.p;\r

  \    np.push({ val: el.val, p: el.p, akk: sofar });\r

  \    if (r <= sofar) return el.val;\r

  \  }\r

  \  return arrLast(probs.val);\r

  }"
get2Points: "function get2Points(v1, v2) {\r

  \  let dx = v2.x - v1.x;\r

  \  let dy = v2.y - v1.y;\r

  \  let alpha;\r

  \  if (dx == 1) alpha = dy > 0 ? 270 : 90;\r

  \  else alpha = 180 * Math.atan(dy / dx) / Math.PI;\r

  \  let beta = (alpha + 90) % 360;\r

  \  let stroke = 10;\r

  \  let radius = 5;\r

  \  let rbeta = beta * Math.PI / 180;\r

  \  let x1 = radius * Math.cos(rbeta);\r

  \  let y1 = radius * Math.sin(rbeta);\r

  \  let x2 = -radius * Math.cos(rbeta);\r

  \  let y2 = -radius * Math.sin(rbeta);\r

  \  return { p1: { x: x1 + v1.x, y: y1 + v1.y }, p2: { x: x2 + v1.x, y: y2 +
  v1.y }, p3: { x: x1 + v2.x, y: y1 + v2.y }, p4: { x: x2 + v2.x, y: y2 + v2.y }
  };\r

  }"
get2Points_mod: "function get2Points_mod(v1, v2) {\r

  \  let dx = v2.x - v1.x;\r

  \  let dy = v2.y - v1.y;\r

  \  let alpha;\r

  \  if (dx == 1) alpha = dy > 0 ? 270 : 90;\r

  \  else alpha = 180 * Math.atan(dy / dx) / Math.PI;\r

  \  let beta = (alpha + 90) % 360;\r

  \  let stroke = 10;\r

  \  let radius = 5;\r

  \  let rbeta = beta * Math.PI / 180;\r

  \  let x1 = radius * Math.cos(rbeta);\r

  \  let y1 = radius * Math.sin(rbeta);\r

  \  let x2 = -radius * Math.cos(rbeta);\r

  \  let y2 = -radius * Math.sin(rbeta);\r

  \  return { p1: { x: x1 + v1.x, y: y1 + v1.y }, p2: { x: x2 + v1.x, y: y2 +
  v1.y }, p3: { x: x1 + v2.x, y: y1 + v2.y }, p4: { x: x2 + v2.x, y: y2 + v2.y }
  };\r

  }"
get3ColLine: "function get3ColLine(dParent, idleft, idmiddle, idright, styles =
  {}) {\r

  \  let dOuter = mDiv(dParent);\r

  \  let middleStyles = { fz: styles.fz, family: styles.family };\r

  \  delete styles.fz; delete styles.family;\r

  \  styles = mergeOverride({ wmin: '100%', hmin: 30, vpadding: 4, hpadding:
  10, box: true }, styles);\r

  \  mStyleX(dOuter, styles);\r

  \  let dInner = mDiv(dOuter, { position: 'relative' });\r

  \  let l = mDiv(dInner, { family: 'arial', fz: 16, display: 'inline-block',
  position: 'absolute', wmin: 20 }, idleft)\r

  \  let m = mDiv(dInner, { fz: middleStyles.fz, family: middleStyles.family,
  w: '100%', align: 'center' }, idmiddle);\r

  \  let r = mDiv(dInner, { family: 'arial', fz: 16, display: 'inline-block',
  position: 'absolute', wmin: 20, top: 0, right: 0 }, idright);\r

  \  return dOuter;\r

  }"
get3ColLineName: "function get3ColLineName(dParent, name, styles = {}) {\r

  \  name = 'd' + capitalize(name);\r

  \  let dLine = get3ColLine(dParent, name + 'Left', name, name + 'Right',
  styles);\r

  \  return dLine;\r

  }"
get3FractionVariants: "function get3FractionVariants(fr, sameNum = false,
  sameDenom = true) {\r

  \  let num = fr.n;\r

  \  let rnd1 = randomNumber(1, 2);\r

  \  let rnd2 = rnd1 + randomNumber(1, 3);\r

  \  let rnd3 = rnd2 + randomNumber(1, 5);\r

  \  let nums = sameNum ? [num, num, num, num] : [num, num + rnd1, num > 5 ?
  (num - rnd2) : num + rnd2, num + rnd3];\r

  \  let den = fr.d;\r

  \  let denoms = sameDenom ? [den, den, den, den] : sameNum ? [den, den + 1,
  den + 2, den > 2 ? den - 1 : den + 3]\r

  \    : [den, den + 1, den + 2, den];\r

  \  let frlist = [];\r

  \  for (let i = 0; i < 4; i++) {\r

  \    frlist.push(math.fraction(nums[i], denoms[i]));\r

  \  }\r

  \  return frlist;\r

  }"
getActualText: "function getActualText(item) {\r

  \  if (isdef(item.live.dLabel)) return item.live.dLabel.innerHTML;\r

  }"
getAllItems: function getAllItems(cond, keySet = 'all') { return getItems(10000,
  cond, keySet); }
getAnimals: "function getAnimals() {\r

  \  let gr = 'Animals & Nature';\r

  \  let result = [];\r

  \  for (const sg in ByGroupSubgroup[gr]) {\r

  \    if (startsWith(sg, 'anim')) result =
  result.concat(ByGroupSubgroup[gr][sg]);\r

  \  }\r

  \  return result;\r

  }"
getArea: "function getArea(dParent, styles, id) {\r

  \  let defStyles = { display: 'inline-block' };\r

  \  styles = mergeOverride(defStyles, styles);\r

  \  let d = mDiv(dParent, styles, id);\r

  \  return d;\r

  }"
getAreaId: function getAreaId(key) { return 'm_A_' + key; }
getAreaName: "function getAreaName(id) { return startsWith(id, 'm_A') ?
  id.substring(4) : id; }"
getAsInt: "function getAsInt(mobj, styleInfo, prop) {\r

  \  let h = styleInfo.getPropertyValue(prop);\r

  \  h = trim(h);\r

  \  if (h[h.length - 1] == '%') {\r

  \    let perc = firstNumber(h);\r

  \    let parent = UIS[mobj.idParent];\r

  \    h = parent.h * perc / 100;\r

  \    h = Math.round(h);\r

  \  } else if (h[h.length - 1] == 'x') {\r

  \    h = h.substring(0, h.length - 2);\r

  \    h = Number(h);\r

  \    h = Math.round(h);\r

  \  } else if (h == 'auto') {\r

  \    h = UIS[mobj.idParent].h;\r

  \  }\r

  \  return h;\r

  }"
getAux: function getAux() { return getAuxIds.map(x => UIS[x]); }
getAuxIds: function getAuxIds() { return getList(IdOwner.l); }
getAuxVisuals: function getAuxVisuals(id) { return getVisuals(id, 'aux') }
getAvatar: function getAvatar(username) { let d = Avatars[username]; if
  (nundef(d)) d = makeUserAvatar(username); return d; }
getBackgroundColor: "function getBackgroundColor(img, ctx) {\r

  \  ctx.drawImage(img, 0, 0);\r

  \  var p = ctx.getImageData(1, 1, 1, 1).data;\r

  \  let rgb = `rgb(${p[0]},${p[1]},${p[2]})`;\r

  \  let color = colorFrom(rgb);\r

  \  return color;\r

  }"
getBadgeStyles: "function getBadgeStyles(sContainer, sPic, sText, w, h,
  picPercent, paddingTop, paddingBot, family, bg = 'blue', bgPic = 'random',
  fgPic = 'white', fgText = 'white', hasText = true) {\r

  \  let fact = 55 / picPercent;\r

  \  let [ptop, pbot] = [(isdef(paddingTop) ? paddingTop : (80 - picPercent) *
  3 / 5),\r

  \  (isdef(paddingBot) ? paddingBot : (80 - picPercent) * 2 / 5)];\r

  \  let pText = 100 - picPercent - ptop - pbot;\r

  \  let numbers = hasText ? [fact * ptop, picPercent, 0, fact * pText, fact *
  pbot] : [15, 70, 0, 0, 15];\r

  \  numbers = numbers.map(x => h * x / 100);\r

  \  let [patop, szPic, zwischen, szText, pabot] = numbers;\r

  \  patop = Math.max(patop, paddingTop);\r

  \  pabot = Math.max(pabot, paddingBot);\r

  \  fzText = fact * (100 - picPercent - pabot - patop) * h * 3 / 400;\r

  \  let styles = { h: h, bg: bg, fg: isdef(fgText) ? fgText : 'contrast',
  patop: patop, pabottom: pabot, align: 'center', 'box-sizing': 'border-box'
  };\r

  \  let textStyles = { family: family, fz: fzText };\r

  \  let picStyles = { h: szPic, bg: bgPic, fg: isdef(fgPic) ? fgPic :
  'contrast' };\r

  \  if (w > 0) styles.w = w; else styles.paleft = styles.paright =
  Math.max(padding, 4);\r

  \  for (const k in sContainer) { if (k != 'w' && nundef(styles[k]))
  styles[k] = sContainer[k]; }\r

  \  for (const k in sPic) { if (k != 'w' && nundef(picStyles[k]))
  picStyles[k] = sPic[k]; }\r

  \  for (const k in sText) { if (k != 'w' && nundef(textStyles[k]))
  textStyles[k] = sText[k]; }\r

  \  return [styles, picStyles, textStyles];\r

  }"
getBaseLog: function getBaseLog(x, b) { return Math.log(x) / Math.log(b); }
getBestMove: "function getBestMove(game, color, currSum) {\r

  \  positionCount = 0;\r

  \  var depth = G.searchDepth;\r

  \  var d = new Date().getTime();\r

  \  var [bestMove, bestMoveValue] = minimax(game, depth,
  Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, true, currSum, color);\r

  \  var d2 = new Date().getTime();\r

  \  var moveTime = (d2 - d);\r

  \  var positionsPerS = (positionCount * 1000 / moveTime);\r

  \  return [bestMove, bestMoveValue];\r

  }"
getBestWord: "function getBestWord(info, lang) {\r

  \  let w = info[lang];\r

  \  let best = stringAfterLast(w, '|');\r

  \  if (isEmpty(best)) best = info.annotation;\r

  \  return best;\r

  }"
getBlinkingLetter: "function getBlinkingLetter(item) {\r

  \  if (nundef(item.letters)) return null;\r

  \  return firstCond(item.letters, x => x.isBlinking);\r

  }"
getBoardBackgroundPicker: "function getBoardBackgroundPicker(b) {\r

  \  let palette = getPaletteFromImage(b.img);\r

  \  let picker = mColorPicker3(b.d0, palette, c => setLinearBackground(b.d0,
  c, 10), cornerColor);\r

  \  b.colorPicker = picker;\r

  }"
getBoardElementStandardType: "function getBoardElementStandardType(mobj) {\r

  \  return mobj.isa.corner ? 'corner' : mobj.isa.field ? 'field' : 'edge';\r

  }"
getBoardImagePath: "function getBoardImagePath(boardFilename) {\r

  \  console.assert(boardFilename.includes('.'), 'getImagePath: not a
  filename!!!', boardFilename)\r

  \  return PERLENPATH_FRONT + 'bretter/' + boardFilename;\r

  }"
getBoardMemberColors: "function getBoardMemberColors(board, fieldColor,
  nodeColor, edgeColor, iPalette, ipals = [3, 4, 5]) {\r

  \  let isPalField = nundef(fieldColor) || isNumber(fieldColor) && fieldColor
  >= 0 && fieldColor <= 8;\r

  \  let isPalCorner = isdef(board.structInfo.corners) && (nundef(nodeColor)
  || isNumber(nodeColor) && nodeColor >= 0 && nodeColor <= 8);\r

  \  let isPalEdge = isdef(board.structInfo.edges) && (nundef(edgeColor) ||
  isNumber(edgeColor) && edgeColor >= 0 && edgeColor <= 8);\r

  \  if (!iPalette && (isPalField || isPalCorner || isPalEdge)) iPalette =
  board.getIPalette();\r

  \  if (iPalette) {\r

  \    board.iPalette = iPalette;\r

  \    board.ipal = 2;\r

  \    board.structInfo.ipals = ipals;\r

  \    let pal = S.pals[iPalette];\r

  \    if (isPalField) fieldColor = pal[ipals[0]];\r

  \    if (isPalCorner) nodeColor = pal[ipals[1]];\r

  \    if (isPalEdge) edgeColor = pal[ipals[2]];\r

  \    _register(board, 'paletteUpdates', updateColors);\r

  \  }\r

  \  return [iPalette, fieldColor, isPalField, nodeColor, isPalCorner,
  edgeColor, isPalEdge];\r

  }"
getBoardScaleFactors: "function getBoardScaleFactors(board, { factors, opt,
  f2nRatio, w, h, margin } = {}) {\r

  \  let [fw, fh, nw, nh, ew] = isdef(factors) ? factors : [43, 50, 12, 12,
  10];\r

  \  if (startsWith(opt, 'fit')) {\r

  \    if (w == 0) {\r

  \      let g = document.getElementById(board.id);\r

  \      let transinfo = getTransformInfo(g);\r

  \      w = transinfo.translateX * 2;\r

  \      h = transinfo.translateY * 2;\r

  \    }\r

  \    let divBy = 2 * (f2nRatio - 2);\r

  \    fw = Math.floor((w - margin) / (board.structInfo.w +
  board.structInfo.wdef / divBy));\r

  \    fh = Math.floor((h - margin) / (board.structInfo.h +
  board.structInfo.hdef / divBy));\r

  \    let maintainRatio = (opt[3] == 'R');\r

  \    if (maintainRatio) {\r

  \      let ff = Math.min(fw, fh);\r

  \      fw = ff;\r

  \      fh = ff;\r

  \    }\r

  \    nw = Math.floor(fw / f2nRatio);\r

  \    nh = Math.floor(fh / f2nRatio);\r

  \  }\r

  \  return [fw, fh, nw, nh, ew];\r

  }"
getBoat: function getBoat(idx) { return UIS[getBoatId(idx)]; }
getBoatId: function getBoatId(idx) { return firstCond(getList(IdOwner.a), x =>
  pureId(x) == idx.toString()); }
getBoatIdByIdx: "function getBoatIdByIdx(idx) {\r

  \  if (!IdOwner.a || isEmpty(IdOwner.a)) return null;\r

  \  if (idx < 0) idx += IdOwner.a.length;\r

  \  idx = idx % IdOwner.a.length;\r

  \  return IdOwner.a[idx];\r

  }"
getBoatIds: function getBoatIds() { return getList(IdOwner.a); }
getBoats: function getBoats() { return getBoatIds().map(x => UIS[x]); }
getBoatWith: "function getBoatWith(lst, isGood = true) {\r

  \  let boats = getBoats();\r

  \  if (!isGood) {\r

  \    let goodBoats = [];\r

  \    for (const b of boats) {\r

  \      if (isEmpty(lst.filter(x => b.o.text.includes(x))))
  goodBoats.push(b);\r

  \    }\r

  \    return goodBoats.length > 0 ? chooseRandom(goodBoats) : null;\r

  \  } else {\r

  \    for (const b of boats) {\r

  \      if (!isEmpty(lst.filter(x => b.o.text.includes(x)))) return b;\r

  \    }\r

  \  }\r

  \  return null;\r

  }"
getBorderPropertyForDirection: "function getBorderPropertyForDirection(dir) {
  return { 0: 'border-top', 1: 'border-right', 2: 'border-bottom', 3:
  'border-left' }[dir]; }"
getBounds: "function getBounds(elem, relToParent = false, relativeToElem) {\r

  \  if (isString(elem)) elem = document.getElementById(elem);\r

  \  if (relToParent) return getRelBounds(elem, getParent(elem));\r

  \  else if (isdef(relativeToElem)) return getRelBounds(elem,
  relativeToElem);\r

  \  else return elem.getBoundingClientRect();\r

  }"
getBrightness: "function getBrightness(c) {\r

  \  function luminance(r, g, b) {\r

  \    var a = [r, g, b].map(function (v) {\r

  \      v /= 255;\r

  \      return v <= 0.03928\r

  \        ? v / 12.92\r

  \        : Math.pow((v + 0.055) / 1.055, 2.4);\r

  \    });\r

  \    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\r

  \  }\r

  \  let x = colorRGB(c, true);\r

  \  return luminance(x.r, x.g, x.b);\r

  }"
getC52Key: "function getC52Key(i) {\r

  \  if (i > 52) return 'card_J1';\r

  \  let rank = getC52Rank(i);\r

  \  let suit = getC52Suit(i);\r

  \  return 'card_' + rank + suit;\r

  }"
getC52Rank: "function getC52Rank(i) {\r

  \  let rank = 1 + (i % 13);\r

  \  if (rank == 1) rank = 'A';\r

  \  else if (rank >= 10) rank = ['T', 'J', 'Q', 'K'][rank - 10];\r

  \  return rank;\r

  }"
getC52Suit: "function getC52Suit(i) {\r

  \  return ['S', 'H', 'D', 'C'][divInt(i, 13)];\r

  }"
getCanvasPixelColor: "function getCanvasPixelColor(c, x, y) {\r

  \  var coord = \"x=\" + x + \", y=\" + y;\r

  \  var p = c.getImageData(x, y, 1, 1).data;\r

  \  var hex = \"#\" + (\"000000\" + rgbToHex(p[0], p[1], p[2])).slice(-6);\r

  \  console.log('pixel', coord, 'has color', hex);\r

  }"
getCaretCoordinates: "function getCaretCoordinates(element, position, options)
  {\r

  \  var properties = [\r

  \    'direction',\r

  \    'boxSizing',\r

  \    'width',\r

  \    'height',\r

  \    'overflowX',\r

  \    'overflowY',\r

  \    'borderTopWidth',\r

  \    'borderRightWidth',\r

  \    'borderBottomWidth',\r

  \    'borderLeftWidth',\r

  \    'borderStyle',\r

  \    'paddingTop',\r

  \    'paddingRight',\r

  \    'paddingBottom',\r

  \    'paddingLeft',\r

  \    'fontStyle',\r

  \    'fontVariant',\r

  \    'fontWeight',\r

  \    'fontStretch',\r

  \    'fontSize',\r

  \    'fontSizeAdjust',\r

  \    'lineHeight',\r

  \    'fontFamily',\r

  \    'textAlign',\r

  \    'textTransform',\r

  \    'textIndent',\r

  \    'textDecoration',\r

  \    'letterSpacing',\r

  \    'wordSpacing',\r

  \    'tabSize',\r

  \    'MozTabSize'\r

  \  ];\r

  \  var isBrowser = (typeof window !== 'undefined');\r

  \  var isFirefox = (isBrowser && window.mozInnerScreenX != null);\r

  \  if (!isBrowser) {\r

  \    throw new Error('textarea-caret-position#getCaretCoordinates should
  only be called in a browser');\r

  \  }\r

  \  var debug = options && options.debug || false;\r

  \  if (debug) {\r

  \    var el =
  document.querySelector('#input-textarea-caret-position-mirror-div');\r

  \    if (el) el.parentNode.removeChild(el);\r

  \  }\r

  \  var div = document.createElement('div');\r

  \  div.id = 'input-textarea-caret-position-mirror-div';\r

  \  document.body.appendChild(div);\r

  \  var style = div.style;\r

  \  var computed = window.getComputedStyle ? window.getComputedStyle(element)
  : element.currentStyle;\r

  \  var isInput = element.nodeName === 'INPUT';\r

  \  style.whiteSpace = 'pre-wrap';\r

  \  if (!isInput) style.wordWrap = 'break-word';\r

  \  style.position = 'absolute';\r

  \  if (!debug) style.visibility = 'hidden';\r

  \  properties.forEach(prop => {\r

  \    if (isInput && prop === 'lineHeight') {\r

  \      if (computed.boxSizing === \"border-box\") {\r

  \        var height = parseInt(computed.height);\r

  \        var outerHeight =\r

  \          parseInt(computed.paddingTop) +\r

  \          parseInt(computed.paddingBottom) +\r

  \          parseInt(computed.borderTopWidth) +\r

  \          parseInt(computed.borderBottomWidth);\r

  \        var targetHeight = outerHeight + parseInt(computed.lineHeight);\r

  \        if (height > targetHeight) {\r

  \          style.lineHeight = height - outerHeight + \"px\";\r

  \        } else if (height === targetHeight) {\r

  \          style.lineHeight = computed.lineHeight;\r

  \        } else {\r

  \          style.lineHeight = 0;\r

  \        }\r

  \      } else {\r

  \        style.lineHeight = computed.height;\r

  \      }\r

  \    } else {\r

  \      style[prop] = computed[prop];\r

  \    }\r

  \  });\r

  \  if (isFirefox) {\r

  \    if (element.scrollHeight > parseInt(computed.height))\r

  \      style.overflowY = 'scroll';\r

  \  } else {\r

  \    style.overflow = 'hidden';\r

  \  }\r

  \  div.textContent = element.value.substring(0, position);\r

  \  if (isInput)\r

  \    div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\r

  \  var span = document.createElement('span');\r

  \  span.textContent = element.value.substring(position) || '.';\r

  \  div.appendChild(span);\r

  \  var coordinates = {\r

  \    top: span.offsetTop + parseInt(computed['borderTopWidth']),\r

  \    left: span.offsetLeft + parseInt(computed['borderLeftWidth']),\r

  \    height: parseInt(computed['lineHeight'])\r

  \  };\r

  \  if (debug) {\r

  \    span.style.backgroundColor = '#aaa';\r

  \  } else {\r

  \    document.body.removeChild(div);\r

  \  }\r

  \  return coordinates;\r

  }"
getCenter: "function getCenter(elem) { let r = isdef(elem.x) ? elem :
  getRect(elem); return { x: (r.w) / 2, y: (r.h) / 2 }; }"
getCenters: "function getCenters(layout, rows, cols, wCell, hCell,) {\r

  \  if (layout == 'quad') { return quadCenters(rows, cols, wCell, hCell); }\r

  \  else if (layout == 'hex') { return hexCenters(rows, cols, wCell, hCell);
  }\r

  \  else if (layout == 'circle') { return circleCenters(rows, cols, wCell,
  hCell); }\r

  }"
getCentersFromAreaSize: "function getCentersFromAreaSize(layout, wBoard, hBoard,
  wCell, hCell) {\r

  \  let info;\r

  \  if (layout == 'quad') { info = quadCenters(rows, cols, wCell, hCell); }\r

  \  else if (layout == 'hex') { info = hexCenters(rows, cols, wCell, hCell);
  }\r

  \  else if (layout == 'hex1') { info = hex1Centers(rows, cols, wCell,
  hCell); }\r

  \  else if (layout == 'circle') { info = circleCenters(rows, cols, wCell,
  hCell); }\r

  \  return info;\r

  }"
getCentersFromRowsCols: "function getCentersFromRowsCols(layout, rows, cols,
  wCell, hCell) {\r

  \  let info;\r

  \  if (layout == 'quad') { info = quadCenters(rows, cols, wCell, hCell); }\r

  \  else if (layout == 'hex') { info = hexCenters(rows, cols, wCell, hCell);
  }\r

  \  else if (layout == 'hex1') { info = hex1Centers(rows, cols, wCell,
  hCell); }\r

  \  else if (layout == 'circle') { info = circleCenters(rows, cols, wCell,
  hCell); }\r

  \  return info;\r

  }"
getChildren: function getChildren(elem) { return [...elem.children]; }
getCirclePoints: "function getCirclePoints(rad, n, disp = 0) {\r

  \  let pts = [];\r

  \  let i = 0;\r

  \  let da = 360 / n;\r

  \  let angle = disp;\r

  \  while (i < n) {\r

  \    let px = rad * Math.cos(toRadian(angle));\r

  \    let py = rad * Math.sin(toRadian(angle));\r

  \    pts.push({ X: px, Y: py });\r

  \    angle += da;\r

  \    i++;\r

  \  }\r

  \  return pts;\r

  }"
getClass: function getClass(el) { return el.classList.value; }
getClassG: function getClassG(el) { return el.getAttribute('class'); }
getCollectionArea: "function getCollectionArea(key, msParentArea) {\r

  \  let a = UIS[getIdArea(key)];\r

  \  if (nundef(a)) {\r

  \    a = makeCollectionArea(key, msParentArea.id);\r

  \  }\r

  \  let idHand = a.id;\r

  \  return idHand;\r

  }"
getCollections: "function getCollections(oid, propName) { return isdef(propName)
  ? lookup(collections, [oid, propName]) : collections[oid]; }"
getColorDictColor: "function getColorDictColor(c) { return isdef(ColorDict[c]) ?
  ColorDict[c].c : c; }"
getColorHexes: "function getColorHexes(x) {\r

  \  return [\r

  \    'f0f8ff',\r

  \    'faebd7',\r

  \    '00ffff',\r

  \    '7fffd4',\r

  \    'f0ffff',\r

  \    'f5f5dc',\r

  \    'ffe4c4',\r

  \    '000000',\r

  \    'ffebcd',\r

  \    '0000ff',\r

  \    '8a2be2',\r

  \    'a52a2a',\r

  \    'deb887',\r

  \    '5f9ea0',\r

  \    '7fff00',\r

  \    'd2691e',\r

  \    'ff7f50',\r

  \    '6495ed',\r

  \    'fff8dc',\r

  \    'dc143c',\r

  \    '00ffff',\r

  \    '00008b',\r

  \    '008b8b',\r

  \    'b8860b',\r

  \    'a9a9a9',\r

  \    'a9a9a9',\r

  \    '006400',\r

  \    'bdb76b',\r

  \    '8b008b',\r

  \    '556b2f',\r

  \    'ff8c00',\r

  \    '9932cc',\r

  \    '8b0000',\r

  \    'e9967a',\r

  \    '8fbc8f',\r

  \    '483d8b',\r

  \    '2f4f4f',\r

  \    '2f4f4f',\r

  \    '00ced1',\r

  \    '9400d3',\r

  \    'ff1493',\r

  \    '00bfff',\r

  \    '696969',\r

  \    '696969',\r

  \    '1e90ff',\r

  \    'b22222',\r

  \    'fffaf0',\r

  \    '228b22',\r

  \    'ff00ff',\r

  \    'dcdcdc',\r

  \    'f8f8ff',\r

  \    'ffd700',\r

  \    'daa520',\r

  \    '808080',\r

  \    '808080',\r

  \    '008000',\r

  \    'adff2f',\r

  \    'f0fff0',\r

  \    'ff69b4',\r

  \    'cd5c5c',\r

  \    '4b0082',\r

  \    'fffff0',\r

  \    'f0e68c',\r

  \    'e6e6fa',\r

  \    'fff0f5',\r

  \    '7cfc00',\r

  \    'fffacd',\r

  \    'add8e6',\r

  \    'f08080',\r

  \    'e0ffff',\r

  \    'fafad2',\r

  \    'd3d3d3',\r

  \    'd3d3d3',\r

  \    '90ee90',\r

  \    'ffb6c1',\r

  \    'ffa07a',\r

  \    '20b2aa',\r

  \    '87cefa',\r

  \    '778899',\r

  \    '778899',\r

  \    'b0c4de',\r

  \    'ffffe0',\r

  \    '00ff00',\r

  \    '32cd32',\r

  \    'faf0e6',\r

  \    'ff00ff',\r

  \    '800000',\r

  \    '66cdaa',\r

  \    '0000cd',\r

  \    'ba55d3',\r

  \    '9370db',\r

  \    '3cb371',\r

  \    '7b68ee',\r

  \    '00fa9a',\r

  \    '48d1cc',\r

  \    'c71585',\r

  \    '191970',\r

  \    'f5fffa',\r

  \    'ffe4e1',\r

  \    'ffe4b5',\r

  \    'ffdead',\r

  \    '000080',\r

  \    'fdf5e6',\r

  \    '808000',\r

  \    '6b8e23',\r

  \    'ffa500',\r

  \    'ff4500',\r

  \    'da70d6',\r

  \    'eee8aa',\r

  \    '98fb98',\r

  \    'afeeee',\r

  \    'db7093',\r

  \    'ffefd5',\r

  \    'ffdab9',\r

  \    'cd853f',\r

  \    'ffc0cb',\r

  \    'dda0dd',\r

  \    'b0e0e6',\r

  \    '800080',\r

  \    '663399',\r

  \    'ff0000',\r

  \    'bc8f8f',\r

  \    '4169e1',\r

  \    '8b4513',\r

  \    'fa8072',\r

  \    'f4a460',\r

  \    '2e8b57',\r

  \    'fff5ee',\r

  \    'a0522d',\r

  \    'c0c0c0',\r

  \    '87ceeb',\r

  \    '6a5acd',\r

  \    '708090',\r

  \    '708090',\r

  \    'fffafa',\r

  \    '00ff7f',\r

  \    '4682b4',\r

  \    'd2b48c',\r

  \    '008080',\r

  \    'd8bfd8',\r

  \    'ff6347',\r

  \    '40e0d0',\r

  \    'ee82ee',\r

  \    'f5deb3',\r

  \    'ffffff',\r

  \    'f5f5f5',\r

  \    'ffff00',\r

  \    '9acd32'\r

  \  ];\r

  }"
getColorHint: "function getColorHint(o) {\r

  \  for (const k in o) {\r

  \    if (k.toLowerCase() == 'color') return o[k];\r

  \    if (isDict(o[k]) && isdef(o[k]._player)) return
  getPlayerColor(o[k]._player);\r

  \  }\r

  \  return null;\r

  }"
getColorLabelInstruction: "function getColorLabelInstruction(cmd, color, label)
  {\r

  \  if (nundef(color)) color = Goal.color;\r

  \  let colorWord = color[G.language];\r

  \  let colorSpan = `<span
  style='color:${color.c}'>${colorWord.toUpperCase()}</span>`;\r

  \  if (nundef(label)) label = Goal.label;\r

  \  let labelSpan = `<b>${label.toUpperCase()}</b>`;\r

  \  let eCommand, dCommand;\r

  \  switch (cmd) {\r

  \    case 'click': eCommand = cmd + ' the'; dCommand = cmd; break\r

  \    case 'then': eCommand = cmd + ' the'; dCommand = 'dann'; break\r

  \  }\r

  \  let eInstr = `${eCommand} ${colorWord} ${label}`;\r

  \  let dInstr = `${dCommand} ${label} in ${colorWord}`;\r

  \  let spoken = G.language == 'E' ? eInstr : dInstr;\r

  \  let written = spoken.replace(colorWord, colorSpan).replace(label,
  labelSpan);\r

  \  console.log('spoken', spoken, 'written', written);\r

  \  return [written, spoken];\r

  }"
getColorNames: "function getColorNames() {\r

  \  return [\r

  \    'AliceBlue',\r

  \    'AntiqueWhite',\r

  \    'Aqua',\r

  \    'Aquamarine',\r

  \    'Azure',\r

  \    'Beige',\r

  \    'Bisque',\r

  \    'Black',\r

  \    'BlanchedAlmond',\r

  \    'Blue',\r

  \    'BlueViolet',\r

  \    'Brown',\r

  \    'BurlyWood',\r

  \    'CadetBlue',\r

  \    'Chartreuse',\r

  \    'Chocolate',\r

  \    'Coral',\r

  \    'CornflowerBlue',\r

  \    'Cornsilk',\r

  \    'Crimson',\r

  \    'Cyan',\r

  \    'DarkBlue',\r

  \    'DarkCyan',\r

  \    'DarkGoldenRod',\r

  \    'DarkGray',\r

  \    'DarkGrey',\r

  \    'DarkGreen',\r

  \    'DarkKhaki',\r

  \    'DarkMagenta',\r

  \    'DarkOliveGreen',\r

  \    'DarkOrange',\r

  \    'DarkOrchid',\r

  \    'DarkRed',\r

  \    'DarkSalmon',\r

  \    'DarkSeaGreen',\r

  \    'DarkSlateBlue',\r

  \    'DarkSlateGray',\r

  \    'DarkSlateGrey',\r

  \    'DarkTurquoise',\r

  \    'DarkViolet',\r

  \    'DeepPink',\r

  \    'DeepSkyBlue',\r

  \    'DimGray',\r

  \    'DimGrey',\r

  \    'DodgerBlue',\r

  \    'FireBrick',\r

  \    'FloralWhite',\r

  \    'ForestGreen',\r

  \    'Fuchsia',\r

  \    'Gainsboro',\r

  \    'GhostWhite',\r

  \    'Gold',\r

  \    'GoldenRod',\r

  \    'Gray',\r

  \    'Grey',\r

  \    'Green',\r

  \    'GreenYellow',\r

  \    'HoneyDew',\r

  \    'HotPink',\r

  \    'IndianRed',\r

  \    'Indigo',\r

  \    'Ivory',\r

  \    'Khaki',\r

  \    'Lavender',\r

  \    'LavenderBlush',\r

  \    'LawnGreen',\r

  \    'LemonChiffon',\r

  \    'LightBlue',\r

  \    'LightCoral',\r

  \    'LightCyan',\r

  \    'LightGoldenRodYellow',\r

  \    'LightGray',\r

  \    'LightGrey',\r

  \    'LightGreen',\r

  \    'LightPink',\r

  \    'LightSalmon',\r

  \    'LightSeaGreen',\r

  \    'LightSkyBlue',\r

  \    'LightSlateGray',\r

  \    'LightSlateGrey',\r

  \    'LightSteelBlue',\r

  \    'LightYellow',\r

  \    'Lime',\r

  \    'LimeGreen',\r

  \    'Linen',\r

  \    'Magenta',\r

  \    'Maroon',\r

  \    'MediumAquaMarine',\r

  \    'MediumBlue',\r

  \    'MediumOrchid',\r

  \    'MediumPurple',\r

  \    'MediumSeaGreen',\r

  \    'MediumSlateBlue',\r

  \    'MediumSpringGreen',\r

  \    'MediumTurquoise',\r

  \    'MediumVioletRed',\r

  \    'MidnightBlue',\r

  \    'MintCream',\r

  \    'MistyRose',\r

  \    'Moccasin',\r

  \    'NavajoWhite',\r

  \    'Navy',\r

  \    'OldLace',\r

  \    'Olive',\r

  \    'OliveDrab',\r

  \    'Orange',\r

  \    'OrangeRed',\r

  \    'Orchid',\r

  \    'PaleGoldenRod',\r

  \    'PaleGreen',\r

  \    'PaleTurquoise',\r

  \    'PaleVioletRed',\r

  \    'PapayaWhip',\r

  \    'PeachPuff',\r

  \    'Peru',\r

  \    'Pink',\r

  \    'Plum',\r

  \    'PowderBlue',\r

  \    'Purple',\r

  \    'RebeccaPurple',\r

  \    'Red',\r

  \    'RosyBrown',\r

  \    'RoyalBlue',\r

  \    'SaddleBrown',\r

  \    'Salmon',\r

  \    'SandyBrown',\r

  \    'SeaGreen',\r

  \    'SeaShell',\r

  \    'Sienna',\r

  \    'Silver',\r

  \    'SkyBlue',\r

  \    'SlateBlue',\r

  \    'SlateGray',\r

  \    'SlateGrey',\r

  \    'Snow',\r

  \    'SpringGreen',\r

  \    'SteelBlue',\r

  \    'Tan',\r

  \    'Teal',\r

  \    'Thistle',\r

  \    'Tomato',\r

  \    'Turquoise',\r

  \    'Violet',\r

  \    'Wheat',\r

  \    'White',\r

  \    'WhiteSmoke',\r

  \    'Yellow',\r

  \    'YellowGreen'\r

  \  ];\r

  }"
getColors: "function getColors(n = 3) {\r

  \  let key = chooseRandom(Object.keys(modern_palettes));\r

  \  let colors = Object.values(modern_palettes[key]);\r

  \  colors = choose(colors, n);\r

  \  shuffle(colors);\r

  \  console.log('*** new palette:', key, 'colors:', colors.toString())\r

  \  return colors;\r

  }"
getColorWheel: "function getColorWheel(contrastTo, n) {\r

  \  let hc = colorHue(contrastTo);\r

  \  let wheel = [];\r

  \  let start = hc;\r

  \  let inc = Math.round(360 / (n + 1));\r

  \  start += inc;\r

  \  for (let i = 0; i < n; i++) {\r

  \    wheel.push(start % 360);\r

  \    start += inc;\r

  \  }\r

  \  return wheel.map(x => colorHSLBuild(x));\r

  }"
getCombNodeName: "function getCombNodeName(namelist) {\r

  \  return namelist.join('_');\r

  }"
getConsonants: "function getConsonants(w, except = []) {\r

  \  w = w.toLowerCase();\r

  \  let vowels = 'aeiouy' + except.join('');\r

  \  let res = [];\r

  \  for (let i = 0; i < w.length; i++) {\r

  \    if (!vowels.includes(w[i])) res.push({ i: i, letter: w[i] });\r

  \  }\r

  \  return res;\r

  }"
getContrast: "function getContrast(rgb1, rgb2) {\r

  \  var lum1 = luminance(rgb1[0], rgb1[1], rgb1[2]);\r

  \  var lum2 = luminance(rgb2[0], rgb2[1], rgb2[2]);\r

  \  var brightest = Math.max(lum1, lum2);\r

  \  var darkest = Math.min(lum1, lum2);\r

  \  return (brightest + 0.05)\r

  \    / (darkest + 0.05);\r

  }"
getContrastingHue: "function getContrastingHue(contrastColor, minDiff = 25, mod
  = 30) {\r

  \  let hc = colorHue(contrastColor);\r

  \  let rnd1 = randomNumber(0, 360);\r

  \  let d = Math.floor(rnd1 / mod);\r

  \  let rnd = d * mod;\r

  \  let diff = Math.abs(rnd - hc);\r

  \  if (diff < minDiff) rnd = (rnd + 180) % 360;\r

  \  return rnd;\r

  }"
getContrastingHueX: "function getContrastingHueX(contrastColor, minDiff = 25,
  mod = 30, startWheel = 0) {\r

  \  let wheel = getHueWheel(contrastColor, minDiff, mod, startWheel);\r

  \  return chooseRandom(wheel);\r

  }"
getCornerPixelColor: "function getCornerPixelColor(img) {\r

  \  let canvas = mCreate('canvas');\r

  \  let ctx = canvas.getContext('2d');\r

  \  ctx.drawImage(img, 0, 0);\r

  \  var p = ctx.getImageData(1, 1, 1, 1).data;\r

  \  let rgb = `rgb(${p[0]},${p[1]},${p[2]})`;\r

  \  let x = 1, y = 1;\r

  \  var coord = \"x=\" + x + \", y=\" + y;\r

  \  let color = colorFrom(rgb);\r

  \  return color;\r

  }"
getCornerRooms: "function getCornerRooms(house) {\r

  \  let rooms = house.rooms.map(x => Items[x]);\r

  \  let result = [];\r

  \  for (const r of rooms) {\r

  \    if (isCornerRoom(house, r)) {\r

  \      result.push(r.id);\r

  \    }\r

  \  }\r

  \  return result;\r

  }"
getCornerRoomsDict: "function getCornerRoomsDict(house) {\r

  \  let rooms = house.rooms.map(x => Items[x]);\r

  \  let result = {};\r

  \  for (const r of rooms) {\r

  \    let isN = r.isN = isNorthRoom(house, r);\r

  \    let isS = r.isS = isSouthRoom(house, r);\r

  \    let isW = r.isW = isWestRoom(house, r);\r

  \    let isE = r.isE = isEastRoom(house, r);\r

  \    if (isN && isW) result.NW = r.id;\r

  \    else if (isN && isE) result.NE = r.id;\r

  \    else if (isS && isE) result.SE = r.id;\r

  \    else if (isS && isW) result.SW = r.id;\r

  \  }\r

  \  return result;\r

  }"
getCorners: "function getCorners(board, func) {\r

  \  let fids = board.strInfo.corners;\r

  \  let res = [];\r

  \  for (const id of board.strInfo.corners) {\r

  \    if (func(G.table[id]) || func(getVisual(id))) {\r

  \      let o = getVisual(id);\r

  \      for (const prop in G.table[id]) {\r

  \        o[prop] = G.table[id][prop];\r

  \      }\r

  \      res.push(o);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
getCornerVertices: "function getCornerVertices(centers, w = 100, h = 100) {\r

  \  let polys = [];\r

  \  for (const pt of centers) {\r

  \    let poly = getHexPoly(pt.x, pt.y, w, h);\r

  \    polys.push(poly);\r

  \  }\r

  \  let vertices = correctPolys(polys, 1);\r

  \  return vertices;\r

  }"
getCorrectlyAnsweredWords: function getCorrectlyAnsweredWords() { return
  getQWords().filter(x => getInputStringOfWord(x) == x.word); }
getCorrectPrefix: "function getCorrectPrefix(label, text) {\r

  \  let req = label.toLowerCase();\r

  \  let answer = text.toLowerCase();\r

  \  let res1 = removeNonAlphanum(req);\r

  \  let res2 = removeNonAlphanum(answer);\r

  \  let req1 = res1.alphas;\r

  \  let answer1 = res2.alphas;\r

  \  let whites = res1.whites;\r

  \  let common = findCommonPrefix(req1, answer1);\r

  \  let nletters = common.length;\r

  \  let ireal = 0;\r

  \  let icompact = 0;\r

  \  let iwhites = 0;\r

  \  let correctPrefix = '';\r

  \  while (icompact < nletters) {\r

  \    if (req[ireal] == common[icompact]) { correctPrefix += label[ireal];
  icompact += 1; }\r

  \    else if (whites[iwhites] == req[ireal]) { correctPrefix +=
  label[ireal]; iwhites += 1; }\r

  \    else break;\r

  \    ireal += 1;\r

  \  }\r

  \  return correctPrefix;\r

  }"
getCorrectWords: function getCorrectWords() { return Goal.seq; }
getCorrectWordString: function getCorrectWordString(sep = ' ') { return
  getCorrectWords().join(sep); }
getCssVar: function getCssVar(varname) { return
  getComputedStyle(document.body).getPropertyValue(varname); }
getCSSVariable: function getCSSVariable(varname) { return getCssVar(varname); }
getCurrentFileName: "function getCurrentFileName() {\r

  \  let currentFilePath = document.scripts[document.scripts.length -
  1].src;\r

  \  let fileName = currentFilePath.split('/').pop();\r

  \  return fileName;\r

  }"
getDefaultObjectIds: function getDefaultObjectIds() { return
  _getChildrenOf(S.settings.table.defaultArea); }
getDefaultObjects: function getDefaultObjects() { return getDefaultObjectIds(x => UIS[x]); }
getDefaultPlayerIds: function getDefaultPlayerIds() { return
  _getChildrenOf(S.settings.player.defaultArea); }
getDefaultPlayers: function getDefaultPlayers() { return getDefaultPlayerIds(x => UIS[x]); }
getDefaultVisual: function getDefaultVisual(oid) { return UIS[getDefId(oid)]; }
getDefId: function getDefId(oid) { return firstCond(oid2ids[oid], x => x[0] == 'd'); }
getDefVisual: function getDefVisual(oid) { return UIS[getDefId(oid)]; }
getDiagonallyOpposedCornerRooms: "function
  getDiagonallyOpposedCornerRooms(house) {\r

  \  if (coin()) return [getRoomNW(house), getRoomSE(house)]; else return
  [getRoomSW(house), getRoomNE(house)];\r

  }"
getDiagRoomPairs: "function getDiagRoomPairs(house) {\r

  \  return [[getRoomNW(house), getRoomSE(house)], [getRoomSW(house),
  getRoomNE(house)]];\r

  }"
getDirList: "function getDirList() {\r

  \  let dirlist = [\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\02harris\\\\_global',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\02harris\\\\manyCars',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\02harris\\\\wipgame',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\02harris\\\\ch9',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\03seidlin\\\\ch12\\\\scripts',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\06verou',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\07joeames\\\\js',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\08cardGame1\\\\script',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\16kaefer\\\\js',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\19lifeGame\\\\version1',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\20testPongApp',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\23Animations_CSS_JS\\\\_my\\\\clock\\\\js',\
  \r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\23Animations_CSS_JS\\\\_my\\\\learning\\\\\
  final\\\\js',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\24memory',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\25nnImage\\\\scripts',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\26udaCanvas',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\28cards\\\\test02',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\31p0',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\32t0\\\\grid',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\33cardGameStarter',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\40cardSolitaire\\\\cg01',\r

  \    'C:\\\\DATA\\\\dev\\\\js\\\\42deckOfCards\\\\test02',\r

  \    'C:\\\\DATA\\\\dev_2020\\\\CBII\\\\zLastVid\\\\work2',\r

  \    'C:\\\\DATA\\\\dev_2020\\\\CBII\\\\zLastVid\\\\work',\r

  \    'C:\\\\DATA\\\\dev_2020\\\\CBII\\\\zLastVid\\\\wCOMMON\\\\js',\r

  \    'C:\\\\DATA\\\\dev_2020\\\\CBII\\\\zLastVid\\\\wCOMMON\\\\js\\\\rsgTyp\
  es',\r

  \    'C:\\\\DATA\\\\dev_2020\\\\CBII\\\\zLastVid\\\\vid2\\\\js',\r

  \    'C:\\\\DATA\\\\dev_2020\\\\CBII\\\\zLastVid\\\\vid2\\\\rsg',\r

  \    'C:\\\\DATA\\\\dev_2020\\\\CBII\\\\zLastVid\\\\vid0\\\\static\\\\front\
  \\\\js',\r

  \    'C:\\\\DATA\\\\dev_2020\\\\CBII\\\\zLastVid\\\\vid0\\\\static\\\\rsg\\\
  \\js',\r

  \    'C:\\\\DATA\\\\dev_2020\\\\CODEBASE\\\\tnt_code\\\\_front\\\\asimple\\\
  \\js',\r

  \    'C:\\\\DATA\\\\dev_2020\\\\CODEBASE\\\\tnt_code\\\\_front\\\\front_con\
  sole\\\\js',\r

  \    'C:\\\\DATA\\\\dev_2020\\\\CODEBASE\\\\okt21\\\\static\\\\js',\r

  \    'C:\\\\DATA\\\\dev_2020\\\\CODEBASE\\\\work\\\\nov08\\\\js',\r

  \    'C:\\\\Users\\\\tawzz\\\\OneDrive\\\\dev\\\\CODEBASE\\\\rsg93\\\\static\
  \\\\js',\r

  \    'C:\\\\Users\\\\tawzz\\\\OneDrive\\\\dev\\\\CODEBASE\\\\okt21\\\\static\
  \\\\js',\r

  \    'C:\\\\Users\\\\tawzz\\\\OneDrive\\\\dev\\\\CBII\\\\CODE_SAFE\\\\CODE\\\
  \\js',\r

  \    'C:\\\\Users\\\\tawzz\\\\OneDrive\\\\dev\\\\CODEBASE\\\\gsm2_tictactoe\
  \\\\js',\r

  \    'C:\\\\Users\\\\tawzz\\\\OneDrive\\\\dev\\\\CODEBASE\\\\tnt_code\\\\_f\
  ront\\\\asimple\\\\js',\r

  \    'C:\\\\Users\\\\tawzz\\\\OneDrive\\\\dev\\\\CODEBASE\\\\tntCode\\\\js',\
  \r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\testing\\\\BASE\\\\features',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\testing\\\\BASE',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\test01\\\\public\\\\BASE',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\test01\\\\public\\\\t99',\r

  \    'C:\\\\D\\\\a00\\\\FLASK\\\\step4\\\\base\\\\js',\r

  \    'C:\\\\D\\\\a00\\\\FLASK\\\\step4\\\\base\\\\features',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\vid_old\\\\static\\\\rsg\\\\js',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\vid_old\\\\static\\\\front\\\\js',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\vid\\\\frontend\\\\static\\\\rsg\\\\\
  js',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\vid\\\\frontend\\\\static\\\\front\\\
  \\js',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\gsmTester\\\\C',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\gsmTester\\\\DIE',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\gsmTester\\\\DOC',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\gsmTester\\\\RSG\\\\js\\\\done',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\gsmTester\\\\RSG\\\\js\\\\measureArr\
  ange',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\gsmTester\\\\RSG\\\\js\\\\R',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\gsmTester\\\\RSG\\\\js\\\\testing',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\gsmTester\\\\RSG\\\\js\\\\types',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\gsmTester\\\\RSG\\\\js\\\\uiCreation\
  ',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\gsmTester\\\\RSG\\\\js',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\gsmTester\\\\SPGAME',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\gsmTester\\\\SPNEW',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\cardTests\\\\_test\\\\ex03',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\cardTests\\\\simple01',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\cardTests\\\\ex06_fromScratch',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\eximple\\\\static',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\eximple\\\\static\\\\games',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\dycon_ui_test\\\\base\\\\js',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\course-player-socketio\\\\public\\\\\
  t99',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\asstest\\\\CODE',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\asstest\\\\SIMPLE',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\animaludos\\\\public\\\\work',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\animaludos\\\\public\\\\work\\\\done\
  ',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\also\\\\MZZ',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\also\\\\BASE',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\also\\\\BASE\\\\features',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\animaludos\\\\public',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\animaludos\\\\public\\\\BASE',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\animaludos\\\\public\\\\BASE\\\\feat\
  ures',\r

  \    'C:\\\\D\\\\a00\\\\git_archive\\\\abra',\r

  \    'C:\\\\D\\\\a00\\\\hive\\\\hive',\r

  \    'C:\\\\D\\\\a00\\\\TESTING\\\\base\\\\js',\r

  \    'C:\\\\D\\\\a00\\\\TESTING\\\\cosensus',\r

  \    'C:\\\\D\\\\a00\\\\TESTING\\\\easy',\r

  \    'C:\\\\D\\\\a00\\\\TESTING\\\\feedback',\r

  \    'C:\\\\D\\\\a00\\\\TESTING\\\\games',\r

  \    'C:\\\\D\\\\a00\\\\TESTING\\\\index_palette',\r

  \    'C:\\\\D\\\\a00\\\\videmo\\\\frontend\\\\static\\\\front\\\\js',\r

  \    'C:\\\\D\\\\a00\\\\videmo\\\\frontend\\\\static\\\\rsg\\\\js',\r

  \    'C:\\\\D\\\\a00\\\\videmo\\\\games\\\\catan\\\\_rsg',\r

  \    'C:\\\\D\\\\a00\\\\videmo\\\\games\\\\ttt\\\\_rsg',\r

  \    'C:\\\\D\\\\a00\\\\vid\\\\vid0\\\\static\\\\front\\\\js',\r

  \    'C:\\\\D\\\\a00\\\\vid\\\\vid0\\\\static\\\\rsg\\\\js',\r

  \    'C:\\\\D\\\\a00\\\\vid\\\\work2',\r

  \    'C:\\\\D\\\\a00\\\\vid\\\\wCOMMON\\\\js\\\\rsgTypes',\r

  \    'C:\\\\D\\\\a00\\\\vid\\\\wCOMMON\\\\js',\r

  \    'C:\\\\D\\\\a00\\\\vid\\\\vid2\\\\js',\r

  \    'C:\\\\D\\\\a00\\\\vid\\\\vid2\\\\rsg',\r

  \    'C:\\\\D\\\\a01\\\\chatApp\\\\public\\\\BASE',\r

  \    'C:\\\\D\\\\a01\\\\chatApp\\\\public\\\\BASE\\\\features',\r

  \    'C:\\\\D\\\\a01\\\\chatApp\\\\public\\\\work',\r

  \    'C:\\\\D\\\\a01\\\\chatApp\\\\public\\\\work\\\\done',\r

  \    'C:\\\\D\\\\a01\\\\chatApp\\\\public',\r

  \    'C:\\\\D\\\\a01\\\\chess',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\perlen\\\\work\\\\done',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\perlen\\\\work',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\perlen',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\bella\\\\js',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\bg\\\\js',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\bg4\\\\js',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\canyonglen',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\cards',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\caristo',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\chatas\\\\js',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\chatas2',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\chmultOrig\\\\js',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\feedback',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\frontend',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\happy',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\hive',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\klavier',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\phpchat\\\\public\\\\sock\
  et.io-client\\\\lib',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\simply\\\\js',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\_other\\\\v0_chatas',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\base\\\\js',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\base\\\\code',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\belinda\\\\js',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\belinda\\\\features',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\cosensus',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\easy',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\iconViewer\\\\js',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\rechnung',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\simple',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\videos\\\\js',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\caba',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\canvas\\\\lib',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\canvas\\\\noc',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\canvas\\\\smooth',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\cita',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\coding\\\\public\\\\javascript\
  s',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\favicontester',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\fileupload\\\\public',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\fractals\\\\nature',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\fractals\\\\nn\\\\031_FlappyBi\
  rd\\\\P5',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\fractals\\\\plant',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\fractals\\\\tree',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\leaflet\\\\leaf',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\leaflet\\\\leaf90',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\leaflet\\\\leaf91',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\leaflet\\\\leafp',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\leaflet\\\\leaf94',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\leaflet\\\\leafstreetview',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\leaflet\\\\mapgame',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\leaflet\\\\routing',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\mybrary\\\\public\\\\javascrip\
  ts',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\openlayers\\\\map',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\all\\\\openlayers\\\\mapTEXT',\r

  \    'C:\\\\xampp\\\\htdocs\\\\aroot\\\\games',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\basejs',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\cai',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\noc',\r

  \    'C:\\\\D\\\\a03\\\\nodemaster\\\\socketstarter',\r

  \    'C:\\\\D\\\\a04\\\\basejs',\r

  \    'C:\\\\D\\\\a04\\\\game',\r

  \  ];\r

  }"
getDistinctVals: "function getDistinctVals(list, prop) {\r

  \  let res = [];\r

  \  for (const item of list) {\r

  \    let val = item[prop];\r

  \    addIf(res, val);\r

  \  }\r

  \  return res;\r

  }"
getDivisors: "function getDivisors(n) {\r

  \  let x = Math.floor(Math.sqrt(n));\r

  \  let res = [];\r

  \  for (let i = 2; i <= x; i++) {\r

  \    let q = n / i;\r

  \    if (q == Math.round(q)) res.push(i);\r

  \  }\r

  \  return res;\r

  }"
getDoorId: function getDoorId(r1, r2) { return r1 + '_' + r2 + '_' + r1; }
getDraggedElem: "function getDraggedElem(ev) {\r

  \  console.log(ev)\r

  \  if (isdef(ev.dataTransfer)) return
  document.getElementById(ev.dataTransfer.getData(\"text\"));\r

  \  return null;\r

  }"
getDynamicBaseArea: "function getDynamicBaseArea(info, oid) {\r

  \  let loc = info.loc;\r

  \  let areaName = getDynId(info.loc, oid);\r

  \  if (!AREAS[areaName]) {\r

  \    let uiNode = AREAS[loc];\r

  \    let group = info.pool;\r

  \    prepParentForChildren(loc, group.length);\r

  \    for (const oid of group) {\r

  \      addPanel(loc, oid);\r

  \    }\r

  \  }\r

  \  return areaName;\r

  }"
getDynId: function getDynId(loc, oid) { return loc + '@' + oid; }
getEdgeCorners: "function getEdgeCorners(o) {\r

  \  let cornerIds = o.corners.map(x => x._obj);\r

  \  return cornerIds.map(x => isdef(x) ? G.table[x] : x);\r

  }"
getElementLists: "function getElementLists(o, elKey = '_obj', arrKey = '_set')
  {\r

  \  let res = {};\r

  \  if (!o) return [];\r

  \  for (const k in o) {\r

  \    let o1 = o[k];\r

  \    if (isLiteral(o1)) continue;\r

  \    let els = getElements(o1, elKey, arrKey);\r

  \    if (!isEmpty(els)) res[k] = els;\r

  \  }\r

  \  return res;\r

  }"
getElements: "function getElements(o, elKey = '_obj', arrKey = '_set') {\r

  \  if (!o) return [];\r

  \  let res = o[arrKey] ? o[arrKey] : o;\r

  \  if (isList(res) && res.length > 0) return res[0][elKey] ? res.map(x =>
  x[elKey]) : res;\r

  \  else return [];\r

  }"
getElemSize: "function getElemSize(elem) {\r

  \  var d = document.createElement(\"div\");\r

  \  document.body.appendChild(d);\r

  \  let cStyles = { position: 'fixed', opacity: 0, top: '-9999px' };\r

  \  mStyleX(d, cStyles);\r

  \  mAppend(d, elem);\r

  \  height = d.clientHeight;\r

  \  width = d.clientWidth;\r

  \  d.parentNode.removeChild(d);\r

  \  return { w: width, h: height };\r

  }"
getEllipsePoints: "function getEllipsePoints(radx, rady, n, disp = 0) {\r

  \  let pts = [];\r

  \  let i = 0;\r

  \  let da = 360 / n;\r

  \  let angle = disp;\r

  \  while (i < n) {\r

  \    let px = radx * Math.cos(toRadian(angle));\r

  \    let py = rady * Math.sin(toRadian(angle));\r

  \    pts.push({ X: px, Y: py });\r

  \    angle += da;\r

  \    i++;\r

  \  }\r

  \  return pts;\r

  }"
getExtendedColors: "function getExtendedColors(bg, fg) {\r

  \  //#region doc \r

  \  //#endregion \r

  \  bg = computeColor(bg);\r

  \  fg = computeColor(fg);\r

  \  if (bg == 'inherit' && (nundef(fg) || fg == 'contrast')) {\r

  \    fg = 'inherit';\r

  \  } else if (fg == 'contrast' && isdef(bg) && bg != 'inherit') fg =
  colorIdealText(bg);\r

  \  else if (bg == 'contrast' && isdef(fg) && fg != 'inherit') { bg =
  colorIdealText(fg); }\r

  \  return [bg, fg];\r

  }"
getFieldEdges: "function getFieldEdges(o) {\r

  \  let edgeIds = o.edges.map(x => x._obj);\r

  \  return edgeIds.map(x => isdef(x) ? G.table[x] : x);\r

  }"
getFields: "function getFields(board) {\r

  \  let fids = board.strInfo.fields;\r

  \  return fids.map(x => G.table[x]);\r

  }"
getFilename: "function getFilename(path, withExt = true) {\r

  \  let fname = stringAfterLast(path, '/');\r

  \  let name = stringBefore(fname, '.');\r

  \  let ext = stringAfter(fname, '.');\r

  \  if (isEmpty(ext)) ext = 'png';\r

  \  let result = withExt ? (name + '.' + ext) : name;\r

  \  console.log(`filename (ext:${withExt}): ${result}`);\r

  \  return result;\r

  }"
getFirstBoat: function getFirstBoat() { if (!IdOwner.a || isEmpty(IdOwner.a))
  return null; return UIS[getFirstBoatId()]; }
getFirstBoatId: function getFirstBoatId() { if (!IdOwner.a ||
  isEmpty(IdOwner.a)) return null; return IdOwner.a[0]; }
getFirstId: "function getFirstId(path) { let ids = path2mainIds[path]; return
  ids && ids.length > 0 ? ids[0] : null; }"
getFirstKey: function getFirstKey(o) { return Object.keys(o)[0]; }
getFirstVisual: "function getFirstVisual(oid) { let res = getVisual(oid); return
  res ? res : getDefVisual(oid); }"
getFloatLeftDiv: "function getFloatLeftDiv() {\r

  \  let d = document.createElement('div');\r

  \  d.style.float = 'left';\r

  \  return d;\r

  }"
getFontString: "function getFontString(params) {\r

  \  let f = params.font;\r

  \  if (nundef(f)) return null;\r

  \  if (isString(f)) return f;\r

  \  else {\r

  \    let fz = f.size; if (isNumber(fz)) fz = '' + fz + 'px';\r

  \    let ff = f.family;\r

  \    let fv = f.variant;\r

  \    let fw = isdef(f.bold) ? 'bold' : isdef(f.light) ? 'light' :
  f.weight;\r

  \    let fs = isdef(f.italic) ? 'italic' : f.style;\r

  \    if (nundef(fz) || nundef(ff)) return null;\r

  \    let s = fz + ' ' + ff;\r

  \    if (isdef(fw)) s = fw + ' ' + s;\r

  \    if (isdef(fv)) s = fv + ' ' + s;\r

  \    if (isdef(fs)) s = fs + ' ' + s;\r

  \    return s;\r

  \  }\r

  }"
getFractionVariantsTrial1: "function getFractionVariantsTrial1(res) {\r

  \  let num = getRandomFractions(res, 8);\r

  \  let resInList = firstCond(nums, x => x.n == res.n && x.d == res.d);\r

  \  if (!resInList) nums.push(res);\r

  \  let finalNums = nums.filter(x => x.n == res.n);\r

  \  let otherNums = nums.filter(x => x.n != res.n);\r

  \  if (finalNums.length < 4) {\r

  \    let nMissing = 4 - finalNums.length;\r

  \    let additional = choose(otherNums, nMissing);\r

  \    finalNums = finalNums.concat(additional);\r

  \  }\r

  \  nums = finalNums;\r

  \  return nums;\r

  }"
getFruid: "function getFruid(pref = '') {\r

  \  const alpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r

  \  FRUIDCounter += 1;\r

  \  if (FRUIDCounter < alpha.length) return pref + alpha[FRUIDCounter];\r

  \  return pref + FRUIDCounter - alpha.length;\r

  }"
getFuncName: "function getFuncName() {\r

  \  return getFuncName.caller.name;\r

  }"
getFunctionCallerName: "function getFunctionCallerName() {\r

  \  return new Error().stack.match(/at (\\S+)/g)[1].slice(3);\r

  }"
getFunctionSignature: "function getFunctionSignature(firstline, key) {\r

  \  let sig;\r

  \  if (firstline.includes(') {')) sig = stringBefore(firstline, ') {') +
  ')';\r

  \  else if (firstline.includes('){')) sig = stringBefore(firstline, '){') +
  ')';\r

  \  else sig = `function ${key}()`;\r

  \  sig += '{}';\r

  \  return sig;\r

  }"
getFunctionsNameThatCalledThisFunction: "function
  getFunctionsNameThatCalledThisFunction() {\r

  \  let c1 = getFunctionsNameThatCalledThisFunction.caller;\r

  \  if (nundef(c1)) return 'no caller!';\r

  \  let c2 = c1.caller;\r

  \  if (nundef(c2)) return 'no caller!';\r

  \  return c2.name;\r

  }"
getGameOrLevelInfo: "function getGameOrLevelInfo(k, defval) {\r

  \  let val = lookup(DB.games, [G.id, 'levels', G.level, k]);\r

  \  if (!val) val = lookupSet(DB.games, [G.id, k], defval);\r

  \  return val;\r

  }"
getGamePlayer: "function getGamePlayer() {\r

  \  for (const k in G.playersAugmented) {\r

  \    o = G.playersAugmented[k];\r

  \    if (o.obj_type == 'GamePlayer') return o;\r

  \  }\r

  }"
getGames: function getGames() { return U.avGames; }
getGameValues: "function getGameValues() {\r

  \  let user = U.id;\r

  \  let game = G.id;\r

  \  let level = G.level;\r

  \  let settings = { numColors: 1, numRepeat: 1, numPics: 1, numSteps: 1,
  colors: ColorList };\r

  \  settings = mergeOverride(settings, DB.settings);\r

  \  if (isdef(U.settings)) settings = mergeOverride(settings, U.settings);\r

  \  if (isdef(DB.games[game])) settings = mergeOverride(settings,
  DB.games[game]);\r

  \  let next = lookup(DB.games, [game, 'levels', level]); if (next) settings
  = mergeOverride(settings, next);\r

  \  next = lookup(U, ['games', game]); if (next) settings =
  mergeOverride(settings, next);\r

  \  next = lookup(U, ['games', game, 'levels', level]); if (next) settings =
  mergeOverride(settings, next);\r

  \  delete settings.levels;\r

  \  Speech.setLanguage(settings.language);\r

  \  return settings;\r

  }"
getGlobalColors: function getGlobalColors() { return Object.keys(ColorDict).map(x => x.E); }
getGlobals: "function getGlobals() {\r

  \  let di = {};\r

  \  let keys = get_keys(window); keys.sort();\r

  \  for (const k of keys) {\r

  \    let o = window[k];\r

  \    let type = typeof o;\r

  \    lookupAddToList(di, [type], { key: k, o: o, value: k, type: type });\r

  \  }\r

  \  Globals = di;\r

  \  return di;\r

  }"
getGSGElements: "function getGSGElements(gCond, sCond) {\r

  \  let keys = [];\r

  \  let byg = ByGroupSubgroup;\r

  \  for (const gKey in byg) {\r

  \    if (!gCond(gKey)) continue;\r

  \    for (const sKey in byg[gKey]) {\r

  \      if (!sCond(sKey)) continue;\r

  \      keys = keys.concat(byg[gKey][sKey]);\r

  \    }\r

  \  }\r

  \  return keys.sort();\r

  }"
getHarmoniousStyles: "function getHarmoniousStyles(sz, family, bg = 'blue', fg =
  'random', hasText = true) {\r

  \  let fpic = 2 / 3; let ffont = 1 / 8; let ftop = 1 / 9; let fbot = 1 /
  12;\r

  \  let styles = { w: sz, h: sz, bg: bg, fg: 'contrast', patop: sz * ftop,
  pabottom: sz * fbot, align: 'center', 'box-sizing': 'border-box' };\r

  \  let textStyles = { family: family, fz: Math.floor(sz * ffont) };\r

  \  let picStyles = { h: sz * fpic, bg: fg };\r

  \  return [styles, picStyles, textStyles];\r

  }"
getHarmoniousStyles1: "function getHarmoniousStyles1(w, h, padding, family, bg =
  'blue', fg = 'random', hasText = true) {\r

  \  let numbers = hasText ? [15, 55, 0, 20, 10] : [15, 70, 0, 0, 15];\r

  \  numbers = numbers.map(x => h * x / 100);\r

  \  [patop, szPic, zwischen, szText, pabot] = numbers;\r

  \  patop = Math.max(patop, padding);\r

  \  pabot = Math.max(pabot, padding);\r

  \  let styles = { h: h, bg: bg, fg: 'contrast', patop: patop, pabottom:
  pabot, align: 'center', 'box-sizing': 'border-box' };\r

  \  let textStyles = { family: family, fz: Math.floor(szText * 3 / 4) };\r

  \  let picStyles = { h: szPic, bg: fg };\r

  \  if (w > 0) styles.w = w; else styles.paleft = styles.paright =
  Math.max(padding, 4);\r

  \  return [styles, picStyles, textStyles];\r

  }"
getHarmoniousStylesPlus: "function getHarmoniousStylesPlus(sContainer, sPic,
  sText, w, h, padding, family, bg = 'blue', fg = 'random', hasText = true) {\r

  \  let numbers = hasText ? [15, 55, 0, 20, 10] : [15, 70, 0, 0, 15];\r

  \  numbers = numbers.map(x => h * x / 100);\r

  \  [patop, szPic, zwischen, szText, pabot] = numbers;\r

  \  patop = Math.max(patop, padding);\r

  \  pabot = Math.max(pabot, padding);\r

  \  let styles = { h: h, bg: bg, fg: 'contrast', patop: patop, pabottom:
  pabot, align: 'center', 'box-sizing': 'border-box' };\r

  \  let textStyles = { family: family, fz: Math.floor(szText * 3 / 4) };\r

  \  let picStyles = { h: szPic, bg: fg };\r

  \  if (w > 0) styles.w = w; else styles.paleft = styles.paright =
  Math.max(padding, 4);\r

  \  for (const k in sContainer) { if (k != 'w' && nundef(styles[k]))
  styles[k] = sContainer[k]; }\r

  \  for (const k in sPic) { if (k != 'w' && nundef(picStyles[k]))
  picStyles[k] = sPic[k]; }\r

  \  for (const k in sText) { if (k != 'w' && nundef(textStyles[k]))
  textStyles[k] = sText[k]; }\r

  \  return [styles, picStyles, textStyles];\r

  }"
getHarmoniousStylesPlusPlus: "function getHarmoniousStylesPlusPlus(sContainer,
  sPic, sText, w, h, picPercent, padding, family, bg = 'blue', bgPic = 'random',
  fgPic = 'white', fgText = 'white', hasText = true) {\r

  \  let fact = 55 / picPercent;\r

  \  let [ptop, pbot] = [(80 - picPercent) * 3 / 5, (80 - picPercent) * 2 /
  5];\r

  \  let numbers = hasText ? [fact * 15, picPercent, 0, fact * 20, fact * 10]
  : [15, 70, 0, 0, 15];\r

  \  numbers = numbers.map(x => h * x / 100);\r

  \  [patop, szPic, zwischen, szText, pabot] = numbers;\r

  \  patop = Math.max(patop, padding);\r

  \  pabot = Math.max(pabot, padding);\r

  \  let styles = { h: h, bg: bg, fg: isdef(fgText) ? fgText : 'contrast',
  patop: patop, pabottom: pabot, align: 'center', 'box-sizing': 'border-box'
  };\r

  \  let textStyles = { family: family, fz: Math.floor(szText * 3 / 4) };\r

  \  let picStyles = { h: szPic, bg: bgPic, fg: isdef(fgPic) ? fgPic :
  'contrast' };\r

  \  if (w > 0) styles.w = w; else styles.paleft = styles.paright =
  Math.max(padding, 4);\r

  \  for (const k in sContainer) { if (k != 'w' && nundef(styles[k]))
  styles[k] = sContainer[k]; }\r

  \  for (const k in sPic) { if (k != 'w' && nundef(picStyles[k]))
  picStyles[k] = sPic[k]; }\r

  \  for (const k in sText) { if (k != 'w' && nundef(textStyles[k]))
  textStyles[k] = sText[k]; }\r

  \  return [styles, picStyles, textStyles];\r

  }"
getHarmoniousStylesX: "function getHarmoniousStylesX(sz, family, bg = 'blue', fg
  = 'random', hasText = true, setWidth = false) {\r

  \  let numbers = hasText ? [15, 55, 0, 20, 10] : [15, 70, 0, 0, 15];\r

  \  numbers = numbers.map(x => sz * x / 100);\r

  \  [patop, szPic, zwischen, szText, pabot] = numbers;\r

  \  console.log(patop, szPic, zwischen, szText, pabot);\r

  \  let styles = { h: sz, bg: bg, fg: 'contrast', patop: patop, pabottom:
  pabot, align: 'center', 'box-sizing': 'border-box' };\r

  \  let textStyles = { family: family, fz: Math.floor(szText * 3 / 4) };\r

  \  let picStyles = { h: szPic, bg: fg };\r

  \  if (setWidth) styles.w = sz; else styles.paleft = styles.paright = 4;\r

  \  return [styles, picStyles, textStyles];\r

  }"
getHarmoniousStylesXX: "function getHarmoniousStylesXX(w, h, padding, family, bg
  = 'blue', fg = 'random', hasText = true) {\r

  \  let numbers = hasText ? [15, 55, 0, 20, 10] : [15, 70, 0, 0, 15];\r

  \  numbers = numbers.map(x => h * x / 100);\r

  \  [patop, szPic, zwischen, szText, pabot] = numbers;\r

  \  patop = Math.max(patop, padding);\r

  \  pabot = Math.max(pabot, padding);\r

  \  let styles = { h: h, bg: bg, fg: 'contrast', patop: patop, pabottom:
  pabot, align: 'center', 'box-sizing': 'border-box' };\r

  \  let textStyles = { family: family, fz: Math.floor(szText * 3 / 4) };\r

  \  let picStyles = { h: szPic, bg: fg };\r

  \  if (w > 0) styles.w = w; else styles.paleft = styles.paright =
  Math.max(padding, 4);\r

  \  return [styles, picStyles, textStyles];\r

  }"
getHexFieldInfo: "function getHexFieldInfo(boardInfo, row, col) {\r

  \  let info = {\r

  \    shape: 'hex',\r

  \    memType: 'field',\r

  \    row: row,\r

  \    col: col,\r

  \    x: -boardInfo.w / 2 + (col - boardInfo.minCol) * boardInfo.dx +
  boardInfo.wdef / 2,\r

  \    y: -boardInfo.h / 2 + boardInfo.hdef / 2 + (row - boardInfo.minRow) *
  boardInfo.dy,\r

  \    w: boardInfo.wdef,\r

  \    h: boardInfo.hdef,\r

  \  };\r

  \  info.poly = getHexPoly(info.x, info.y, info.w, info.h);\r

  \  return info;\r

  }"
getHexGridInfo: "function getHexGridInfo(rows, cols) {\r

  \  [wdef, hdef] = [4, 4];\r

  \  [dx, dy] = [wdef / 2, (hdef * 3) / 4];\r

  \  let info = {\r

  \    structType: 'hexGrid',\r

  \    rows: rows,\r

  \    cols: cols,\r

  \    wdef: 4,\r

  \    hdef: 4,\r

  \    dx: dx,\r

  \    dy: dy,\r

  \    w: wdef + (cols - 1) * dx,\r

  \    h: hdef + (rows - 1) * dy,\r

  \    minRow: 0,\r

  \    minCol: 0,\r

  \  };\r

  \  return info;\r

  }"
getHexPoly: "function getHexPoly(x, y, w, h) {\r

  \  let hex = [[0, -0.5], [0.5, -0.25], [0.5, 0.25], [0, 0.5], [-0.5, 0.25],
  [-0.5, -0.25]];\r

  \  return getPoly(hex, x, y, w, h);\r

  }"
getHue: "function getHue(cssHSLA) {\r

  \  let h = firstNumber(cssHSLA);\r

  \  return h;\r

  }"
getHueWheel: "function getHueWheel(contrastTo, minDiff = 25, mod = 30, start =
  0) {\r

  \  let hc = colorHue(contrastTo);\r

  \  let wheel = [];\r

  \  while (start < 360) {\r

  \    let d1 = Math.abs((start + 360) - hc);\r

  \    let d2 = Math.abs((start) - hc);\r

  \    let d3 = Math.abs((start - 360) - hc);\r

  \    let min = Math.min(d1, d2, d3);\r

  \    if (min > minDiff) wheel.push(start);\r

  \    start += mod;\r

  \  }\r

  \  return wheel;\r

  }"
getIdArea: "function getIdArea(areaName) {\r

  \  if (startsWith(areaName, 'a_d_')) {\r

  \    return areaName;\r

  \  } else if (startsWith(areaName, 'm_A_')) {\r

  \    return areaName;\r

  \  } else {\r

  \    return 'm_A_' + areaName;\r

  \  }\r

  }"
getidAvailable: function getidAvailable(i) { return 'c_b_mm_plj' + i; }
getIdForOid: function getIdForOid(oid) { return 'm_t_' + oid; }
getidNum: function getidNum(i) { return 'c_b_mm_pln' + i; }
getidPlayermode: function getidPlayermode(mode) { return 'c_b_mm_' + mode; }
getIds: "function getIds(id, type = 'all') {\r

  \  let res = id2uids[id];\r

  \  if (nundef(res)) return [];\r

  \  if (isEmpty(res) || type == 'all') return res;\r

  \  return res.filter(x => isdef(x[type]));\r

  }"
getIdsInfobox: "function getIdsInfobox() { return IdOwner.i ? IdOwner.i : []; }"
getidSpan: function getidSpan(i) { return 'sppl' + i; }
getidSpanJoin: function getidSpanJoin(i) { return 'spplj' + i; }
getidType: function getidType(i) { return 'c_b_mm_plt' + i; }
getIfDict: "function getIfDict(o, key, defval) {\r

  \  let entry = o[key];\r

  \  if (nundef(entry) && isdef(defval)) {\r

  \    o[key] = defval;\r

  \  }\r

  \  return o[key];\r

  }"
getIndicesCondi: "function getIndicesCondi(arr, func) {\r

  \  let res = [];\r

  \  for (let i = 0; i < arr.length; i++) {\r

  \    if (func(arr[i], i)) res.push(i);\r

  \  }\r

  \  return res;\r

  }"
getIndicesOfCorrectlyAnsweredWords: function
  getIndicesOfCorrectlyAnsweredWords() { return
  getCorrectlyAnsweredWords().map(x => x.iWord); }
getIndicesOfWrongChars: function getIndicesOfWrongChars() { return getWrongChars().map(x => x.index); }
getIndicesOfWrongWords: function getIndicesOfWrongWords() { return getWrongWords().map(x => x.iWord); }
getInfos: "function getInfos(cats, lang,\r

  \  { minlen, maxlen, wShort = false, wLast = false, wExact = false, sorter =
  null }) {\r

  \  let keys = setCategories(cats);\r

  \  let infos = [];\r

  \  if (isdef(minlen && isdef(maxlen))) {\r

  \    keys = keys.filter(k => {\r

  \      let info = jsCopy(symbolDict[k]);\r

  \      let exact = CorrectWordsExact[lang][k];\r

  \      if (wExact && nundef(exact)) return false;\r

  \      let ws = wExact ? [exact.req] : wLast ? [lastOfLanguage(k, lang)] :
  wordsOfLanguage(k, lang);\r

  \      if (wShort) ws = [getShortestWord(ws, false)];\r

  \      info.words = [];\r

  \      for (const w of ws) {\r

  \        if (w.length >= minlen && w.length <= maxlen) {\r

  \          info.words.push(w);\r

  \          info.best = w;\r

  \        }\r

  \      }\r

  \      if (!isEmpty(info.words)) { infos.push(info); return true; } else
  return false;\r

  \    });\r

  \  }\r

  \  if (isdef(sorter)) sortByFunc(infos, sorter);\r

  \  return infos;\r

  }"
getInputStringOfChar: function getInputStringOfChar(inp) { return iDiv(inp).innerHTML; }
getInputStringOfChari: function getInputStringOfChari(index) { return
  getInputStringOfChar(Goal.chars[index]); }
getInputStringOfWord: function getInputStringOfWord(winp) { return
  winp.charInputs.map(x => iDiv(x).innerHTML).join(''); }
getInputStringOfWordi: function getInputStringOfWordi(iWord) { return
  getInputStringOfWord(Goal.words[iWord]); }
getInputValue: function getInputValue(id) { const input =
  document.getElementById(id); const text = input.value; input.value = '';
  return text; }
getInputWords: function getInputWords() { return Goal.words.map(x =>
  getInputStringOfWord(x)); }
getInputWordString: function getInputWordString(sep = ' ') { return getInputWords().join(sep); }
getInstance: "function getInstance(G) {\r

  \  return new (Daat.GameClasses[G.id])(G.id);\r

  }"
getInstrGeoJson: "function getInstrGeoJson(instr, coord) {\r

  \  console.log('instr', instr, 'coord', coord);\r

  \  var formatter = new L.Routing.Formatter();\r

  \  var instrPts = {\r

  \    type: \"FeatureCollection\",\r

  \    features: []\r

  \  };\r

  \  for (var i = 0; i < instr.length; ++i) {\r

  \    var g = {\r

  \      \"type\": \"Point\",\r

  \      \"coordinates\": [coord[instr[i].index].lng,
  coord[instr[i].index].lat]\r

  \    };\r

  \    var p = {\r

  \      \"instruction\": formatter.formatInstruction(instr[i])\r

  \    };\r

  \    instrPts.features.push({\r

  \      \"geometry\": g,\r

  \      \"type\": \"Feature\",\r

  \      \"properties\": p\r

  \    });\r

  \  }\r

  \  return instrPts;\r

  }"
getItem: function getItem(k) { return infoToItem(Syms[k]); }
getItemOfSameIndexAsIn: "function getItemOfSameIndexAsIn(val, arr, items) {\r

  \  let i = arr.indexOf(val);\r

  \  return items[i];\r

  }"
getItems: "function getItems(n, cond, keySet = 'all') {\r

  \  if (isNumber(n)) { n = _getKeysCond(n, cond, keySet); }\r

  \  if (isString(n[0])) n = n.map(x => Syms[x]);\r

  \  if (nundef(n[0].info)) n = n.map(x => infoToItem(x));\r

  \  return n;\r

  }"
getItemsMaxLen: function getItemsMaxLen(n, len, keySet = 'all', lang = 'E', luc
  = 'c') { return getItemsMaxWordLength(...arguments); }
getItemsMaxWordLength: "function getItemsMaxWordLength(n, len, keySet = 'all',
  lang = 'E', luc = 'c') {\r

  \  let items = getItems(n, x => x[lang].length <= len, keySet);\r

  \  addLabels(items, lang, luc);\r

  \  return items;\r

  }"
getItemWithMax: "function getItemWithMax(d, propName) {\r

  \  testHelpers('getItemWithMax dict:', d, 'propName:', propName);\r

  \  let max = 0;\r

  \  let kmax = null;\r

  \  for (const key in d) {\r

  \    let val = d[key][propName];\r

  \    if (val > max) {\r

  \      max = val;\r

  \      kmax = key;\r

  \    }\r

  \  }\r

  \  return [kmax, d[kmax], max];\r

  }"
getItemWithMaxValue: "function getItemWithMaxValue(d) {\r

  \  let k = Object.keys(d).reduce((a, b) => (d[a] >= d[b] ? a : b));\r

  \  return [k, d[k]];\r

  }"
getKeys: function getKeys(dict) { return Object.keys(dict); }
getKeySet: "function getKeySet(groupName, language, maxlength) {\r

  \  let keys = setGroup(groupName);\r

  \  keys = isdef(maxlength) && maxlength > 0 ?\r

  \    keys.filter(x => lastOfLanguage(x, language).length <= maxlength)\r

  \    : keys;\r

  \  return keys;\r

  }"
getKeySets: "function getKeySets() {\r

  \  makeCategories();\r

  \  let res = {};\r

  \  for (const k in Syms) {\r

  \    let info = Syms[k];\r

  \    if (nundef(info.cats)) continue;\r

  \    for (const ksk of info.cats) {\r

  \      lookupAddIfToList(res, [ksk], k);\r

  \    }\r

  \  }\r

  \  res.animals = getAnimals();\r

  \  res.nature = getNature();\r

  \  localStorage.setItem('KeySets', JSON.stringify(res));\r

  \  return res;\r

  }"
getKeySetSimple: "function getKeySetSimple(cats, lang, minlen, maxlen, wLast =
  false, wExact = false, sorter = null) {\r

  \  let keys = setCategories(cats);\r

  \  if (isdef(minlen && isdef(maxlen))) {\r

  \    keys = keys.filter(k => {\r

  \      let exact = CorrectWordsExact[k];\r

  \      if (wExact && nundef(exact)) return false;\r

  \      let ws = wLast ? [lastOfLanguage(k, lang)] : wordsOfLanguage(k,
  lang);\r

  \      for (const w of ws) {\r

  \        if (w.length >= minlen && w.length <= maxlen\r

  \          && (!wExact || isdef(exact) && w.toLowerCase() == exact.req &&
  !exact.danger))\r

  \          return true;\r

  \      }\r

  \      return false;\r

  \    });\r

  \  }\r

  \  if (isdef(sorter)) sortByFunc(keys, sorter);\r

  \  return keys;\r

  }"
getKeySetsX: "function getKeySetsX() {\r

  \  let ks = localStorage.getItem('KeySets');\r

  \  if (isdef(ks)) return JSON.parse(ks);\r

  \  let res = {};\r

  \  for (const k in Syms) {\r

  \    let info = Syms[k];\r

  \    if (nundef(info.cats)) continue;\r

  \    for (const ksk of info.cats) {\r

  \      lookupAddIfToList(res, [ksk], k);\r

  \    }\r

  \  }\r

  \  localStorage.setItem('KeySets', JSON.stringify(res));\r

  \  return res;\r

  }"
getKeySetX: "function getKeySetX(categories, language, minlength, maxlength,
  bestOnly = false, sortAccessor = null, correctOnly = false, reqOnly = false)
  {\r

  \  let keys = setCategories(categories);\r

  \  if (isdef(minlength && isdef(maxlength))) {\r

  \    keys = keys.filter(k => {\r

  \      let ws = bestOnly ? [lastOfLanguage(k, language)] :
  wordsOfLanguage(k, language);\r

  \      for (const w of ws) {\r

  \        if (w.length >= minlength && w.length <= maxlength\r

  \          && (!correctOnly || isdef(CorrectWordsExact[k]))\r

  \          && (!reqOnly || w.toLowerCase() == CorrectWordsExact[k].req))\r

  \          return true;\r

  \      }\r

  \      return false;\r

  \    });\r

  \  }\r

  \  if (isdef(sortAccessor)) sortByFunc(keys, sortAccessor);\r

  \  return keys;\r

  }"
getLastBoatId: function getLastBoatId() { if (!IdOwner.a || isEmpty(IdOwner.a))
  return null; return IdOwner.a[IdOwner.a.length - 1]; }
getLayoutSample: "function getLayoutSample(n) {\r

  \  if (G.level > 4) {\r

  \  }\r

  \  let samples = {\r

  \    1: '\"a\"',\r

  \    2: '\"a b\"', //'\"a\" \"b\"',\r

  \    3: ['\"a b c\"', '\"a a\" \"b c\"', '\"a b\" \"c c\"'],\r

  \    4: ['\"z z d\" \"a a c\" \"a a c\"', '\"a b\" \"c d\"'],\r

  \    5: ['\"a b e\" \"c c d\"', '\"a a b\" \"c d e\"', '\"a b e\" \"c d
  e\"'],\r

  \    6: ['\"a b b c\" \"d d e f\"', '\"a b b c\" \"a d e f\"', '\"a b b b\"
  \"c d e f\"'],\r

  \    7: ['\"a b c d\" \"a b e f\"', '\"a b b c\" \"a d e c\" \"a d f
  g\"'],\r

  \    8: ['\"a a b c\" \"d d e c\" \"f g e h\"', '\"a b b c\" \"a d e c\" \"f
  g e h\"'],\r

  \    9: ['\"a a b b\" \"c d d e\" \"f g h i\"', '\"a d e b\" \"c d e b\" \"f
  g h i\"'],\r

  \    10: '\"j a b b\" \"c d d e\" \"f g h i\"',\r

  \    11: '\"j a a b b\" \"j c d d e\" \"f g h i k\"',\r

  \    12: '\"j a a b b l\" \"j c d d e l\" \"f g h i k k\"',\r

  \    13: '\"j a a b b\" \"j c d d e\" \"f g h i k\" \"l l m m k\"',\r

  \    14: '\"n j a a b b\" \"n j c d d e\" \"f g h i i k\" \"l l m m m
  k\"',\r

  \    15: '\"n j o o b b\" \"n j a a b b\" \"n j c d d e\" \"f g h i i k\"
  \"l l m m m k\"',\r

  \    16: [\r

  \      '\"a b c d e\" \"f f g h e\" \"o p i h j\" \"k l i m n\"',\r

  \      '\"a b b d e\" \"n f p g e\" \"i j j o k\" \"l l c m h\"',\r

  \      '\"a a p g c h\" \"a a b b c h\" \"n d d e e f\" \"o i j k l m\"',\r

  \      '\"a b c o d e\" \"f b c p g e\" \"f i i j g k\" \"n l m j h k\"'\r

  \    ],\r

  \    17: [\r

  \      '\"a b c d e\" \"f g h i j\" \"k l m i o\" \"p n q q o\"',\r

  \      '\"a a c d e\" \"f g h i j\" \"k l m i o\" \"p n q b o\"',\r

  \      '\"a b c d e\" \"f b h i j\" \"k l m i o\" \"p n m q g\"'\r

  \    ],\r

  \    18: [\r

  \      '\"a b c d e\" \"a g h i j\" \"k l m n o\" \"p q r f o\"',\r

  \      '\"a b b c d e\" \"a g h h i j\" \"k l l m n o\" \"p q q r f o\"',\r

  \      '\"a b b c d e\" \"a g g h i j\" \"k g g m n o\" \"p q l r f o\"',\r

  \      '\"a b b c d e\" \"a g h h i j\" \"k k l m n o\" \"p q l r f o\"',\r

  \    ],\r

  \    19: [\r

  \      '\"a b c d e\" \"f b h i j\" \"k l m s o\" \"p n q g r\"',\r

  \      '\"a a b c d e\" \"f h b i i j\" \"k l m m s o\" \"p n q g g r\"',\r

  \      '\"a a b c d e\" \"f h b i l j\" \"k h m m s o\" \"p n q g g r\"',\r

  \      '\"a q b c d e\" \"f h b i l j\" \"k h m m s o\" \"p n m m g r\"',\r

  \      '\"a q b c d e\" \"f h b i l j\" \"k h m m s o\" \"p n m m g r\"',\r

  \    ],\r

  \    20: [\r

  \      '\"a b c d e\" \"f g h i j\" \"k l m n o\" \"p q r s t\"',\r

  \      '\"a b b c d e\" \"f g h h i j\" \"k k l m n o\" \"p q r s s t\"',\r

  \      '\"a b b c d e\" \"f g h h i j\" \"k k l m i o\" \"p q r n s t\"',\r

  \      '\"a f b c d e\" \"a g h h i j\" \"k k l m i o\" \"p q r n s t\"',\r

  \    ],\r

  \    21: [\r

  \      '\"a b b c d e\" \"f g h h i j\" \"k u l m n o\" \"p q r s s t\"',\r

  \      '\"a b b c d e\" \"f u g h i j\" \"k u l m n o\" \"p q r s n t\"',\r

  \      '\"a b b c d e\" \"f g h u i j\" \"k k l m i o\" \"p q r n s t\"',\r

  \      '\"a f b c d e\" \"a g h h i j\" \"k u l m i o\" \"p q r n s t\"',\r

  \    ],\r

  \    22: [\r

  \      '\"a v b c d e\" \"f g h h i j\" \"k u l m n o\" \"p q r s s t\"',\r

  \      '\"a b b c d e e\" \"f u g h i j v\" \"k u l m n o v\" \"p q r s n t
  t\"',\r

  \      '\"a b b c d e e\" \"f u g h i j j\" \"k u l m n o v\" \"p q r s n t
  t\"',\r

  \      '\"a b b c d d e\" \"m b b c i j e\" \"f u g h i j v\" \"k u l l n o
  v\" \"p q r s n t t\"',\r

  \    ],\r

  \    23: [\r

  \      '\"a v b c d e\" \"f g h h i j\" \"k u l m n o\" \"p q r w s t\"',\r

  \      '\"a w b c d e e\" \"f u g h i j v\" \"k u l m n o o\" \"p q r s n t
  t\"',\r

  \      '\"a b b c d e e\" \"f w g h i j j\" \"k u l m n o v\" \"p q r s n t
  t\"',\r

  \    ],\r

  \    24: [\r

  \      '\"a v b c d e\" \"f g h x i j\" \"k u l m n o\" \"p q r w s t\"',\r

  \      '\"a v v b c d e\" \"f g h x x i j\" \"k u l l n o m\" \"p q r w s t
  m\"',\r

  \    ],\r

  \    25: ['\"a b c d e f g\" \"a h i k l m g\" \"o p n r s m u\" \"v w x y q
  t j\"'],\r

  \    26: ['\"a a c d e f g\" \"h i b k l j n\" \"o p q r s m u\" \"v w x y z
  t u\"'],\r

  \    27: ['\"a b c d e f g\" \"h i j k l m n\" \"o p q r s t u\" \"v w x y z
  A u\"'],\r

  \    28: ['\"a b c d e f g\" \"h i j k l m n\" \"o p q r s t u\" \"v w x y z
  A B\"'],\r

  \    29: ['\"a b c d e f g h\" \"i j k d m n o p\" \"q r r t u v w x\" \"y z
  A B C s l l\"'],\r

  \    30: ['\"a b c d e f g h\" \"i j k d m n o p\" \"q r s t u v w x\" \"y z
  A B C D l l\"'],\r

  \    31: ['\"a b c d e f g h\" \"i j k l m n o p\" \"q r s t u v w x\" \"y z
  A B C D E E\"'],\r

  \    32: ['\"a b c d e f g h\" \"i j k l m n o p\" \"q r s t u v w x\" \"y z
  A B C D E F\"'],\r

  \  };\r

  \  let s;\r

  \  if (nundef(n)) {\r

  \    let l = chooseRandom(Object.keys(samples));\r

  \    s = samples[l];\r

  \  } else {\r

  \    s = samples[n];\r

  \  }\r

  \  s = isList(s) ? chooseRandom(s) : s;\r

  \  s = getLetterSwapEncoding(s);\r

  \  return s;\r

  }"
getLbl: "function getLbl(key, sz, bg, label) {\r

  \  let items, ifs = { bg: bg }, options = { sz: sz };\r

  \  if (isdef(label)) options.showLabels = true; else options.showLabels =
  false;\r

  \  [items, ifs, options] = createStandardItems(null, ifs, options, [key],
  isdef(label) ? [label] : undefined);\r

  \  prepDims(items, options);\r

  \  prepLbls(items, ifs, options);\r

  \  return items[0];\r

  }"
getLbls: "function getLbls(onClickPictureHandler, ifs = {}, options = {}, keys,
  labels) {\r

  \  let items;\r

  \  [items, ifs, options] = createStandardItems(onClickPictureHandler, ifs,
  options, keys, labels);\r

  \  prepDims(items, options);\r

  \  prepLbls(items, ifs, options);\r

  \  return items;\r

  }"
getLettersExcept: "function getLettersExcept(w, except = []) {\r

  \  w = w.toLowerCase();\r

  \  let res = [];\r

  \  for (let i = 0; i < w.length; i++) {\r

  \    if (!except.includes(w[i])) res.push({ i: i, letter: w[i] });\r

  \  }\r

  \  return res;\r

  }"
getLetterSwapEncoding: "function getLetterSwapEncoding(s) {\r

  \  let di = getRandomLetterMapping(s);\r

  \  let result = '';\r

  \  for (let i = 0; i < s.length; i++) {\r

  \    result += s[i] in di ? di[s[i]] : s[i];\r

  \  }\r

  \  return result;\r

  }"
getLines: "function getLines(s) {\r

  \  var str = s;\r

  \  var res = str.split('\\n');\r

  \  return res;\r

  }"
getLinkContainerId: function getLinkContainerId(linkId) { return 'd' + linkId; }
getList: "function getList(lst) { return isdef(lst) ? lst : []; }"
getListsContainingAll: "function getListsContainingAll(ll, l) {\r

  \  let res = [];\r

  \  for (const l1 of ll) {\r

  \    if (containsAll(l1, l)) res.push(l1);\r

  \  }\r

  \  return res;\r

  }"
getLuminosity: "function getLuminosity(cssHSLA) {\r

  \  let ints = allNumbers(cssHSLA);\r

  \  return ints[2];\r

  }"
getMainArea: "function getMainArea(dParent, styles = {}) {\r

  \  clearElement(dParent);\r

  \  let dArea = getArea(dParent, styles);\r

  \  return dArea;\r

  }"
getMainAreaPadding: "function getMainAreaPadding(dParent, padding = 10, bg =
  'grey', styles = {}) {\r

  \  let aTable = percentOf(dParent, 100, 100);\r

  \  let defAreaStyles = { margin: padding, w: aTable.w - 2 * padding, h:
  aTable.h - 2 * padding, bg: bg, layout: 'hcc', };\r

  \  clearElement(dParent);\r

  \  let dArea = getArea(dParent, mergeOverride(defAreaStyles, styles));\r

  \  return dArea;\r

  }"
getMainAreaPercent: "function getMainAreaPercent(dParent, bg = 'grey', wPercent
  = 94, hPercent = 96, id) {\r

  \  clearElement(dParent);\r

  \  let aTable = percentOf(dParent, wPercent, hPercent);\r

  \  let dArea = getArea(dParent, { w: aTable.w, h: aTable.h, layout: 'hcc',
  bg: bg }, id);\r

  \  return dArea;\r

  }"
getMainId: function getMainId(oid) { return firstCond(oid2ids[oid], x => x[0] == 'm'); }
getMainVisual: function getMainVisual(oid) { return UIS[oid]; }
getMatchingPictoKey: "function getMatchingPictoKey(o, key) {\r

  \  let sym = o.obj_type;\r

  \  if (sym in S.settings.symbols) { sym = S.settings.symbols[sym]; }\r

  \  if (!(sym in iconChars)) {\r

  \    symNew = Object.keys(iconChars)[randomNumber(5, 120)];\r

  \    S.settings.symbols[sym] = symNew;\r

  \    sym = symNew;\r

  \  }\r

  }"
getMissingIndices: "function getMissingIndices(arr, len) {\r

  \  let i = 0;\r

  \  let a = arr[i];\r

  \  let j = 0;\r

  \  let res = [];\r

  \  while (j < len) {\r

  \    while (j < a) {\r

  \      testHelpers(j, a, 'adding j');\r

  \      res.push(j);\r

  \      j += 1;\r

  \    }\r

  \    i += 1;\r

  \    j = a + 1;\r

  \    a = i < arr.length ? arr[i] : len;\r

  \  }\r

  \  return res;\r

  }"
getMixedNumber: "function getMixedNumber(num, denom) {\r

  \  const quotient = Math.floor(num / denom);\r

  \  const remainder = num % denom;\r

  \  if (remainder === 0) {\r

  \    return { full: quotient, frac: null, n: null, d: null };\r

  \  } else {\r

  \    return { full: quotient, frac: math.fraction(remainder, denom), n:
  remainder, d: denom };\r

  \  };\r

  }"
getMouseObject: "function getMouseObject(e) {\r

  \  return (e ? e.target : window.event.srcElement);\r

  }"
getMouseX: "function getMouseX(e) {\r

  \  return (e ? e.clientX : window.event.clientX);\r

  }"
getMouseY: "function getMouseY(e) {\r

  \  return (e ? e.clientY : window.event.clientY);\r

  }"
getNamedUID: "function getNamedUID(name) {\r

  \  if (!(name in NAMED_UIDS)) {\r

  \    NAMED_UIDS[name] = 0;\r

  \  }\r

  \  NAMED_UIDS[name] += 1;\r

  \  return name[0] + NAMED_UIDS[name];\r

  }"
getNature: "function getNature() {\r

  \  let gr = 'Animals & Nature';\r

  \  let result = [];\r

  \  for (const sg in ByGroupSubgroup[gr]) {\r

  \    result = result.concat(ByGroupSubgroup[gr][sg]);\r

  \  }\r

  \  return result;\r

  }"
getNColors: "function getNColors(n) {\r

  \  return choose(getColorNames(), n);\r

  }"
getNextIndexOfMissingNumber: "function getNextIndexOfMissingNumber(iStart = 0)
  {\r

  \  for (let i = iStart; i < G.seq.length; i++) {\r

  \    if (Goal.words[i].hasBlanks) return i;\r

  \  }\r

  \  return null;\r

  }"
getNextStartBoat: "function getNextStartBoat() {\r

  \  let mobj = null;\r

  \  let sb = startBoats[0];\r

  \  if (G.phase == 'setup') {\r

  \    let boats = getBoats();\r

  \    for (const b of boats) {\r

  \      for (const id of startBoats) {\r

  \        for (const t of b.o.text) {\r

  \          if (t.includes(id)) {\r

  \            sb = id;\r

  \            mobj = b;\r

  \            removeInPlace(startBoats, sb);\r

  \            return mobj;\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  return mobj;\r

  }"
getNextTableId: "function getNextTableId() {\r

  \  let ids = nundef(DB.tables) ? [] : Object.keys(DB.tables);\r

  \  ids = ids.map(x => Number(x));\r

  \  let max = Math.max(ids);\r

  \  return '' + (max + 1);\r

  }"
getNItemsPerKeylist: "function getNItemsPerKeylist(n, keylists, options = {})
  {\r

  \  let items = [];\r

  \  for (const list of keylists) {\r

  \    options.keySet = list.keys;\r

  \    let cat = list.cat;\r

  \    let newItems = genItems(n, options);\r

  \    newItems.map(x => { x.cat = cat; items.push(x) });\r

  \  }\r

  \  return items;\r

  }"
getNumCards: function getNumCards(deck) { return deck.cards.length; }
getNumSeqHint: "function getNumSeqHint() {\r

  \  let l = G.op == 'plus' ? 'to' : 'from';\r

  \  let msg = `${G.op} ${G.step} ${l} the previous number`;\r

  \  msg = `${G.oop.cmd} ${G.step} ${G.oop.link} the previous number`;\r

  \  return msg;\r

  }"
getNumSeqHintString: "function getNumSeqHintString(i) {\r

  \  console.log('i', i, 'trial#', G.trialNumber)\r

  \  let cmd = G.op;\r

  \  let m = G.step;\r

  \  let lstSpoken, lstWritten;\r

  \  if (i == 0) {\r

  \    lstSpoken = [G.oop.cmd, m];\r

  \  } else if (i == 1) {\r

  \    let decl = G.op == 'plus' ? 'to' : G.op == 'minus' ? 'from' : 'by';\r

  \    let phrase = decl + ' the previous number';\r

  \    lstSpoken = [G.oop.cmd, m, G.oop.link, ' the previous number'];\r

  \  } else if (i == 2) {\r

  \    let iBlank = getNextIndexOfMissingNumber();\r

  \    let iPrevious = iBlank - 1;\r

  \    let n = G.seq[iPrevious];\r

  \    lstSpoken = ['the previous number', 'is', n];\r

  \  } else if (i >= 3) {\r

  \    let iBlank = getNextIndexOfMissingNumber();\r

  \    let iPrevious = iBlank - 1;\r

  \    let n = G.seq[iPrevious];\r

  \    let oop = OPS[cmd];\r

  \    let erg = i >= 4 ? Goal.words[iBlank].word : '?';\r

  \    lstSpoken = ['', n, oop.sp, m, 'equals', erg];\r

  \    lstWritten = [n, oop.wr, m, '=', erg];\r

  \  } else {\r

  \    let iBlank = getNextIndexOfMissingNumber();\r

  \    lstSpoken = ['enter', Goal.words[iBlank].word];\r

  \  }\r

  \  if (G.language == 'D') lstSpoken = lstSpoken.map(x =>
  translateToGerman(x));\r

  \  if (nundef(lstWritten)) lstWritten = lstSpoken;\r

  \  return [lstSpoken.join(' '), lstWritten.join(' ')];\r

  }"
getO: function getO(n, R) { let oid = n.oid; if (isdef(oid)) return R.getO(oid);
  else return null; }
getObject: function getObject(id) { return G.table[id]; }
getObjectFromWindow: "function getObjectFromWindow(key) {\r

  \  let code, sig, type;\r

  \  let f = window[key];\r

  \  if (typeof f != 'function') return null;\r

  \  code = f.toString();\r

  \  sig = getFunctionSignature(stringBefore(code, '\\n'), key);\r

  \  type = 'func';\r

  \  let o = { name: key, code: code, sig: sig, region: type, filename: '',
  path: '', type: type };\r

  \  CODE.justcode[key] = code;\r

  \  CODE.all[key] = CODE.di[type][key] = o;\r

  \  return o;\r

  }"
getObjectsWithSame: "function getObjectsWithSame(olist, props, o, up = true,
  breakWhenDifferent = true) {\r

  \  let res = [];\r

  \  let val = lookup(o, props);\r

  \  if (up) {\r

  \    for (let i = 0; i <= olist.length - 1; i++) {\r

  \      let val1 = lookup(olist[i], props);\r

  \      if (val1 == val) res.push(olist[i]); else if (breakWhenDifferent)
  return res;\r

  \    }\r

  \  } else {\r

  \    for (let i = olist.length - 1; i >= 0; i--) {\r

  \      let val1 = lookup(olist[i], props);\r

  \      if (val1 == val) res.push(olist[i]); else if (breakWhenDifferent)
  return res;\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
getOidForMainId: "function getOidForMainId(id) { return id[0] == 'm' ?
  id.substring(4) : null; }"
getOlist: "function getOlist() {\r

  \  let keyList = ['female', 'male', 'spy', 'frog', 'fairy'];\r

  \  let olist = [];\r

  \  for (const k of keyList) {\r

  \    olist.push({ key: k, label: k, color: randomColor() });\r

  \  }\r

  \  return olist;\r

  }"
getOperand: function getOperand(type) { let x = OPS[type]; return
  randomNumber(Math.max(2, x.min), x.max); }
getOperationHintString: "function getOperationHintString(i) {\r

  \  if (i == 0) {\r

  \    let spOp = G.oop.sp; if (G.language == 'D') spOp = DD[spOp];\r

  \    let sSpoken = [G.operand, spOp, G.step].join(' ');\r

  \    let sWritten = visOperation(G.op, G.operand, G.step, null, '?');\r

  \    return [sSpoken, sWritten];\r

  \  } else {\r

  \    let result = G.oop.f(G.operand, G.step);\r

  \    let lstSpoken = i == 1 ? result == 0 ? [result] : ['count', 'the red
  dots'] : [G.operand, G.oop.sp, G.step, 'equals', result];\r

  \    if (G.language == 'D') lstSpoken = lstSpoken.map(x =>
  translateToGerman(x));\r

  \    let sSpoken = lstSpoken.join(' ');\r

  \    let sWritten = visOperation(G.op, G.operand, G.step, null);\r

  \    return [sSpoken, sWritten];\r

  \  }\r

  }"
getOppDir: "function getOppDir(dir) { return { e: 'w', w: 'e', n: 's', s: 'n' }[dir]; }"
getOptionsMinimalistic: "function getOptionsMinimalistic(dParent, handler, w =
  0, h = 0, ifs = {}, options = {}, g) {\r

  \  [w, h] = detectArea(dParent, w, h);\r

  \  let defOptions = {\r

  \    isRegular: true, hugeFont: true, szPic: { w: 200, h: 200 }, gap: 15,
  shufflePositions: true,\r

  \    showPic: true, showLabels: true, luc: 'l', labelPos: 'bottom',
  language: g.language, keySet: g.vocab,\r

  \    w: w, h: h, fz: 24, fzText: 24, fzPic: 96, ifs: ifs, handler: handler,
  ifs: ifs, handler: handler,\r

  \  };\r

  \  addSimpleProps(g, options);\r

  \  addKeys(defOptions, options);\r

  \  if (options.numRepeat > 1 && nundef(options.ifs.bg)) {\r

  \    let bg = isdef(options.colorKeys) ? 'white' : (i) =>
  options.sameBackground ? computeColor('random') : 'random';\r

  \    let fg = isdef(options.colorKeys) ? 'black' : 'contrast';\r

  \    options.ifs.bg = bg;\r

  \    options.ifs.fg = fg;\r

  \  }\r

  \  return options;\r

  }"
getOrdinal: "function getOrdinal(i) { return G.numRepeat == 1 ? '' : G.language
  == 'E' ? ordinal_suffix_of(i) : '' + i + '. '; }"
getOrdinalColorLabelInstruction: "function getOrdinalColorLabelInstruction(cmd,
  ordinal, color, label) {\r

  \  if (nundef(ordinal)) ordinal = getOrdinal(Goal.iRepeat);\r

  \  if (nundef(color)) color = Goal.color;\r

  \  let colorWord = '', colorSpan = '';\r

  \  if (isdef(color)) {\r

  \    colorWord = nundef(color) ? '' : nundef(color[G.language]) ? color.E :
  color[G.language];\r

  \    if (G.language == 'D' && !isEmpty(ordinal) && !['lila',
  'rosa'].includes(colorWord)) colorWord += 'e';\r

  \    colorSpan = `<span
  style='color:${color.c}'>${colorWord.toUpperCase()}</span>`;\r

  \  }\r

  \  if (nundef(label)) label = Goal.label;\r

  \  let labelSpan = `<b>${label.toUpperCase()}</b>`;\r

  \  let eCommand, dCommand;\r

  \  switch (cmd) {\r

  \    case 'click': eCommand = cmd + ' the'; dCommand = cmd; break\r

  \    case 'then': eCommand = cmd + ' the'; dCommand = 'dann'; break\r

  \  }\r

  \  let eInstr = `${eCommand} ${ordinal} ${colorWord} ${label}`;\r

  \  let dInstr = ordinal == '' ? `${dCommand} ${label} ${colorWord == '' ? ''
  : 'in ' + colorWord}`\r

  \    : `${dCommand} ${ordinal} ${colorWord} ${label}`;\r

  \  let ecorr = `${ordinal} ${colorWord} ${label}`\r

  \  let dcorr = ordinal == '' ? `${label} ${colorWord == '' ? '' : 'in ' +
  colorWord}`\r

  \    : `${ordinal} ${colorWord} ${label}`;\r

  \  let corr = G.language == 'E' ? ecorr : dcorr;\r

  \  let spoken = G.language == 'E' ? eInstr : dInstr;\r

  \  let written = spoken.replace(colorWord, colorSpan).replace(label,
  labelSpan);\r

  \  return [written, spoken, corr];\r

  }"
getOuterDivForMenuStyle: "function getOuterDivForMenuStyle() {\r

  \  return createElementFromHtml(`<div style='max-height:430px;text-align:
  center; animation: appear 4s ease'>`);\r

  }"
getPageHeaderDivForPlayer: function getPageHeaderDivForPlayer(oid) { return
  document.getElementById('c_c_' + G.playersAugmented[oid].username); }
getPal: "function getPal(ipal, pal) {\r

  \  return pal[ipal % pal.length];\r

  }"
getpal: "function getpal(ipal_dep = -1, ihue = 0, bOrf = 'b', pal) {\r

  \  let p = empty(pal) || !pal || pal == undefined ? palette : pal;\r

  \  if (!p) return randomColor();\r

  \  nHues = p[0].length;\r

  \  nShades = p.length;\r

  \  if (ipal_dep < -1) ipal_dep = randomNumber(0, nShades);\r

  \  else if (ipal_dep >= nShades) ipal_dep %= nShades;\r

  \  if (ihue < -1) ihue = randomNumber(0, nHues);\r

  \  else if (ihue >= nHues) ihue %= nHues;\r

  \  return p[ipal_dep][ihue][bOrf];\r

  }"
getPalette: "function getPalette(color, type = 'shade') {\r

  \  color = colorFrom(color);\r

  \  return colorPalShade(color);\r

  }"
getPaletteFromHues: "function getPaletteFromHues(hues) {\r

  \  let colors = hues.map(h => colorFromHue(h));\r

  \  return colors.map(x => getPalette(x));\r

  }"
getPaletteFromImage: "function getPaletteFromImage(img) {\r

  \  let palette0 = ColorThiefObject.getPalette(img);\r

  \  let palette = [];\r

  \  for (const pal of palette0) {\r

  \    let color = colorFrom(pal);\r

  \    palette.push(color);\r

  \  }\r

  \  return palette;\r

  }"
getPara: "function getPara(msg, float) {\r

  \  let pl = document.createElement('div');\r

  \  if (isdef(float)) pl.style.float = float;\r

  \  pl.innerHTML = msg;\r

  \  return pl;\r

  }"
getParams: "function getParams(areaName, oSpec, oid) {\r

  \  let params = oSpec.params ? oSpec.params : {};\r

  \  let panels = oSpec.panels ? oSpec.panels : [];\r

  \  let num = panels.length;\r

  \  let or = params.orientation ? params.orientation == 'h' ? 'rows'\r

  \    : 'columns' : DEF_ORIENTATION;\r

  \  let split = params.split ? params.split : DEF_SPLIT;\r

  \  let bg = oSpec.color ? oSpec.color : randomColor();\r

  \  let fg = bg ? colorIdealText(bg) : null;\r

  \  let id = oSpec.id ? oSpec.id : areaName;\r

  \  if (oid) { id = getDynId(id, oid); }\r

  \  let parent = mBy(areaName);\r

  \  if (oSpec.id) {\r

  \    parent.id = id;\r

  \    addAREA(id, oSpec);\r

  \    parent.innerHTML = id;\r

  \  }\r

  \  if (bg) { mColor(parent, bg, fg); }\r

  \  return [num, or, split, bg, fg, id, panels, parent];\r

  }"
getParamsForMaPicStyle: "function getParamsForMaPicStyle(desc = 'segoeBlack')
  {\r

  \  desc = desc.toLowerCase();\r

  \  switch (desc) {\r

  \    case 'twittertext': return { isText: true, isOmoji: false };\r

  \    case 'twitterimage': return { isText: false, isOmoji: false };\r

  \    case 'openmojitext': return { isText: true, isOmoji: true };\r

  \    case 'openmojiimage': return { isText: false, isOmoji: true };\r

  \    case 'openmojiblacktext': return { isText: true, isOmoji: 'openmoBlack'
  };\r

  \    case 'segoe': return { isText: true, isOmoji: 'segoe ui emoji' };\r

  \    case 'segoeblack': return { isText: true, isOmoji: 'segoe ui symbol'
  };\r

  \    default: return { isText: true, isOmoji: false };\r

  \  }\r

  }"
getParent: function getParent(elem) { return elem.parentElement; }
getParentOfScript: "function getParentOfScript() {\r

  \  var thisScript = document.scripts[document.scripts.length - 1];\r

  \  var parent = thisScript.parentElement;\r

  \  return parent;\r

  }"
getParentRNode: "function getParentRNode(n, R) { return n.uidParent ?
  R.rNodes(n.uidParent) : null; }"
getParentUi: "function getParentUi(n) { return n.idUiParent ? mBy(n.idUiParent) : null; }"
getParentUiNodes: "function getParentUiNodes(n, R) { return n.uidParent ?
  R.uiNodes(n.uidParent) : null; }"
getPic: "function getPic(key, sz, bg, label) {\r

  \  let items, ifs = { bg: bg }, options = { sz: sz };\r

  \  if (isdef(label)) options.showLabels = true; else options.showLabels =
  false;\r

  \  [items, ifs, options] = createStandardItems(null, ifs, options, [key],
  isdef(label) ? [label] : undefined);\r

  \  prepDims(items, options);\r

  \  prepPics(items, ifs, options);\r

  \  return items[0];\r

  }"
getPics: "function getPics(onClickPictureHandler, ifs = {}, options = {}, keys,
  labels) {\r

  \  let items;\r

  \  [items, ifs, options] = createStandardItems(onClickPictureHandler, ifs,
  options, keys, labels);\r

  \  prepDims(items, options);\r

  \  prepPics(items, ifs, options);\r

  \  return items;\r

  }"
getPicsS: "function getPicsS(onClickPictureHandler, ifs = {}, options = {},
  keys, labels) {\r

  \  let items;\r

  \  [items, ifs, options] = createStandardItemsS(onClickPictureHandler, ifs,
  options, keys, labels);\r

  \  console.log(items)\r

  \  prepDims(items, options);\r

  \  options.showPics = true;\r

  \  _createDivs(items, ifs, options);\r

  \  return items;\r

  }"
getPlayer: function getPlayer(id) { return G.playersAugmented[id]; }
getPlayerArea: "function getPlayerArea(pid) {\r

  \  let areaName = defaultGameplayerAreaName + '_' + pid;\r

  \  let msPlayer = getMainArea(areaName);\r

  \  if (!msPlayer) { msPlayer = _makeGameplayerArea(areaName, 'a_d_game');
  }\r

  \  return msPlayer;\r

  }"
getPlayerColor: function getPlayerColor(id) { return G.playersAugmented[id].color }
getPlayerColorString: function getPlayerColorString(id) { return G.playersAugmented[id].altName }
getPlayerInfo: function getPlayerInfo(i) { return currentPlayersById[plidByIndex[i]]; }
getPlayermodeRadio: "function getPlayermodeRadio(mode) {\r

  \  return document.getElementById(getidNum(mode));\r

  }"
getPlayerRadio: "function getPlayerRadio(n) {\r

  \  return document.getElementById(getidNum(n));\r

  }"
getPlayersIncludingU: "function getPlayersIncludingU() {\r

  \  if (!isList(G.numPlayers)) G.numPlayers = [G.numPlayers];\r

  \  let n = G.numPlayers[0];\r

  \  let ids = chooseKeys(DB.users, n, ['guest0', 'test0']);\r

  \  if (!ids.includes(Username)) ids.splice(0, 1, Username);\r

  \  T.players = ids.map(x => new Player(x, DB.users[x].settings.color));\r

  \  ids.map(x => lookupAddToList(DB.users, [x, 'tables'], T.id));\r

  }"
getPlayerTypeInput: "function getPlayerTypeInput(n) {\r

  \  return document.getElementById(getidType(n));\r

  }"
getPlid: "function getPlid(username) {\r

  \  console.log(playerConfig[GAME].players, username);\r

  \  let res = firstCondDict(playerConfig[GAME].players, x => x.username ==
  username);\r

  \  console.log(res)\r

  \  return res;\r

  }"
getPlidForUsername: "function getPlidForUsername(username) {\r

  \  let players = S.gameConfig.players;\r

  \  let pl = firstCond(players, x => x.username == username);\r

  \  let res = pl.id;\r

  \  return res;\r

  }"
getPoly: "function getPoly(offsets, x, y, w, h) {\r

  \  let poly = [];\r

  \  for (let p of offsets) {\r

  \    let px = Math.round(x + p[0] * w);\r

  \    let py = Math.round(y + p[1] * h);\r

  \    poly.push({ x: px, y: py });\r

  \  }\r

  \  return poly;\r

  }"
getPrefixHint: "function getPrefixHint() {\r

  \  let oldHintLength = isdef(G.hintLength) ? G.hintLength : 0;\r

  \  if (nundef(G.hintLength)) G.hintLength = 0;\r

  \  G.input.value = G.correctPrefix;\r

  \  let progress = G.correctPrefix.length > G.nCorrect;\r

  \  if (G.correctPrefix.length > G.nCorrect) {\r

  \    G.hintLength = 1;\r

  \    G.nCorrect = G.correctPrefix.length;\r

  \  } else if (G.hintLength < G.goal.label.length - G.nCorrect) G.hintLength
  += 1;\r

  \  if (G.hintLength == 0) G.hintLength = 1;\r

  \  let wr = substringOfMinLength(G.goal.label, G.correctPrefix.length,
  G.hintLength);\r

  \  let sp = oldHintLength == G.hintLength && !progress ? G.lastHintPrompt :
  null;\r

  \  return [wr, sp];\r

  }"
getProfileImagePath: "function getProfileImagePath(userrecord) {\r

  \  let dir = '../base/assets/images/';\r

  \  let path = dir + (userrecord.hasImage ? userrecord.username :
  'unknown_user') + '.jpg';\r

  \  return path;\r

  }"
getPublicPath: "function getPublicPath(filename) {\r

  \  let result = './public/' + getFilename(filename);\r

  \  console.log('pubPath', result);\r

  \  return result;\r

  }"
GetPvLine: "function GetPvLine(depth) {\r

  \  ;\r

  \  var move = ProbePvTable();\r

  \  var count = 0;\r

  \  while (move != NOMOVE && count < depth) {\r

  \    if (MoveExists(move)) {\r

  \      MakeMove(move);\r

  \      brd_PvArray[count++] = move;\r

  \    } else {\r

  \      break;\r

  \    }\r

  \    move = ProbePvTable();\r

  \  }\r

  \  while (brd_ply > 0) {\r

  \    TakeMove();\r

  \  }\r

  \  return count;\r

  }"
getQChars: "function getQChars() {\r

  \  return Goal.qCharIndices.map(x => Goal.chars[x]);\r

  }"
getQuadFieldInfo: "function getQuadFieldInfo(boardInfo, row, col) {\r

  \  let info = {\r

  \    shape: 'rect',\r

  \    memType: 'field',\r

  \    row: row,\r

  \    col: col,\r

  \    x: -boardInfo.w / 2 + (col - boardInfo.minCol) * boardInfo.dx +
  boardInfo.wdef / 2,\r

  \    y: -boardInfo.h / 2 + (row - boardInfo.minRow) * boardInfo.dy +
  boardInfo.hdef / 2,\r

  \    w: boardInfo.wdef,\r

  \    h: boardInfo.hdef,\r

  \  };\r

  \  info.poly = getQuadPoly(info.x, info.y, info.w, info.h);\r

  \  return info;\r

  }"
getQuadGridInfo: "function getQuadGridInfo(rows, cols) {\r

  \  [wdef, hdef] = [4, 4];\r

  \  let info = {\r

  \    structType: 'grid',\r

  \    rows: rows,\r

  \    cols: cols,\r

  \    wdef: 4,\r

  \    hdef: 4,\r

  \    dx: wdef,\r

  \    dy: hdef,\r

  \    w: wdef * cols,\r

  \    h: hdef * rows,\r

  \    minRow: 1,\r

  \    minCol: 1,\r

  \  };\r

  \  return info;\r

  }"
getQuadPoly: "function getQuadPoly(x, y, w, h) {\r

  \  q = [[0.5, -0.5], [0.5, 0.5], [-0.5, 0.5], [-0.5, -0.5]];\r

  \  return getPoly(q, x, y, w, h);\r

  }"
getQWords: function getQWords() { return Goal.qWordIndices.map(x => Goal.words[x]); }
getRandomBoat: function getRandomBoat() { return UIS[chooseRandom(getBoatIds())]; }
getRandomCard: "function getRandomCard({ rank, suit, type } = {}) {\r

  \  if (isdef(rank) || isdef(suit)) return card52(rank, suit);\r

  \  else if (type == 'c52') return card52();\r

  \  else if (type == 'inno') return cardInno();\r

  }"
getRandomCards: "function getRandomCards(n, { rank, suit, type, age, color } =
  {}) {\r

  \  if (type == 'inno') {\r

  \    let allKeys = Object.keys(cinno);\r

  \    let keys = isdef(age) ? allKeys.filter(x => cinno[x].age == age) :
  allKeys;\r

  \    keys = isdef(color) ? keys.filter(x => cinno[x].color == color) :
  keys;\r

  \    let nKeys = choose(keys, n);\r

  \    return nKeys;\r

  \  }\r

  }"
getRandomConsonant: function getRandomConsonant(w, except = []) { let cons =
  getConsonants(w, except); return chooseRandom(cons); }
getRandomFraction: "function getRandomFraction(num, denom) {\r

  \  if (isdef(denom)) {\r

  \    if (nundef(num)) num = randomNumber(1, denom - 1);\r

  \    return math.fraction(num, denom);\r

  \  } else if (isdef(num)) {\r

  \    denom = randomNumber(2, 9);\r

  \    return math.fraction(num, denom);\r

  \  }\r

  \  let flist = all2DigitFractionsUnder1Expanded();\r

  \  let fr = chooseRandom(flist);\r

  \  return math.fraction(Number(fr.numer), Number(fr.denom));\r

  }"
getRandomFractions: "function getRandomFractions(n) {\r

  \  let flist = all2DigitFractionsUnder1Expanded();\r

  \  let frlist = choose(flist, n);\r

  \  return frlist.map(x => math.fraction(Number(x.numer),
  Number(x.denom)));\r

  }"
getRandomHues: "function getRandomHues(fromLocalStorage = true) {\r

  \  let hue1 = randomNumber(0, 360);\r

  \  if (hue1 > 165 && hue1 < 195) hue1 += 60;\r

  \  if (hue1 > 270 && hue1 < 325) hue1 = (hue1 + 120) % 360;\r

  \  let hue2 = randomNumber(0, 360);\r

  \  if (hue2 > 168 && hue2 < 192) hue2 += 70;\r

  \  if (hue2 > 270 && hue2 < 325) hue2 = (hue2 + 120) % 360;\r

  \  if (Math.abs(hue1 - hue2) < 20) {\r

  \    hue1 = randomNumber(-30, 160);\r

  \    hue2 = randomNumber(200, 280);\r

  \  }\r

  \  if (fromLocalStorage) {\r

  \    let info = localStorage.getItem('palette');\r

  \    if (info) {\r

  \      let ns = allNumbers(info);\r

  \      hue1 = ns[0];\r

  \      hue2 = ns[1];\r

  \    }\r

  \  }\r

  \  return [hue1, hue2];\r

  }"
getRandomItems: "function getRandomItems(n, keyOrSet, text = true, pic = true,
  styles = {}) {\r

  \  let keys = getRandomKeys(n, keyOrSet);\r

  \  if (pic == true) return getPics(() => console.log('click'), styles, {
  showLabels: text }, keys);\r

  \  else return getLbls(() => console.log('click'), styles, { showLabels:
  text }, keys);\r

  }"
getRandomKey: "function getRandomKey(dict) {\r

  \  let keys = Object.keys(dict);\r

  \  return chooseRandom(keys);\r

  }"
getRandomKeys: "function getRandomKeys(n, kSetOrList) { return
  choose(isList(kSetOrList) ? kSetOrList : KeySets[kSetOrList], n); }"
getRandomKeysFromGKeys: function getRandomKeysFromGKeys(n) { return getRandomKeys(n, G.keys); }
getRandomKeysIncluding: "function getRandomKeysIncluding(n, k, kSetOrList) {\r

  \  let keys = getRandomKeys(n, kSetOrList);\r

  \  if (!keys.includes(k)) {\r

  \    let i = randomNumber(0, keys.length - 1);\r

  \    keys.splice(i, 1, k);\r

  \  }\r

  \  shuffle(keys);\r

  \  return keys;\r

  }"
getRandomLetter: function getRandomLetter(w, except = []) { let cons =
  getLettersExcept(w, except); return chooseRandom(cons); }
getRandomLetterMapping: "function getRandomLetterMapping(s) {\r

  \  if (nundef(s)) s =
  'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r

  \  let alphabet = filterDistinctLetters(s);\r

  \  let alphabet2 = shuffle(jsCopy(alphabet));\r

  \  let di = {};\r

  \  for (let i = 0; i < alphabet.length; i++) {\r

  \    di[alphabet[i]] = alphabet2[i];\r

  \  }\r

  \  return di;\r

  }"
getRandomNodeThatCanBeAdded: "function getRandomNodeThatCanBeAdded(R) {\r

  \  let nonEmpty = allCondDict(R.oidNodes, x => !isEmpty(x));\r

  }"
getRandomNumberSequence: "function getRandomNumberSequence(n, minStart,
  maxStart, fBuild, exceptStart) {\r

  \  let nStart = randomNumber(minStart, maxStart - n + 1);\r

  \  if (exceptStart) {\r

  \    let att = 10;\r

  \    while (att >= 0 && nStart == exceptStart) { att -= 1; nStart =
  randomNumber(minStart, maxStart - n + 1); }\r

  \  }\r

  \  if (isNumber(fBuild)) return range(nStart, nStart + (n - 1) * fBuild,
  fBuild);\r

  \  else {\r

  \    let res = [], x = nStart;\r

  \    for (let i = 0; i < n; i++) {\r

  \      res.push(x);\r

  \      x = fBuild(x);\r

  \    }\r

  \    return res;\r

  \  }\r

  }"
getRandomPerlenKeys: function getRandomPerlenKeys(di, n) { return choose(Object.keys(di), n); }
getRandomPicto: function getRandomPicto() { let key = getRandomKey(iconChars); }
getRandomPixelColor: "function getRandomPixelColor(img) {\r

  \  let canvas = mCreate('canvas');\r

  \  let ctx = canvas.getContext('2d');\r

  \  ctx.drawImage(img, 0, 0);\r

  \  let [rx, ry] = [randomNumber(1, 100), randomNumber(1, 50)];\r

  \  console.log('______________', rx, ry)\r

  \  var p = ctx.getImageData(rx, ry, 1, 1).data;\r

  \  console.log('p', p)\r

  \  let rgb = `rgb(${p[0]},${p[1]},${p[2]})`;\r

  \  let x = rx, y = ry;\r

  \  var coord = \"x=\" + x + \", y=\" + y;\r

  \  let color = colorFrom(rgb);\r

  \  console.log('pixel', coord, 'has color', color);\r

  \  return color;\r

  }"
getRandomSetItem: "function getRandomSetItem(lang = 'E', key, keylist) {\r

  \  if (nundef(keylist)) keylist = setCategories(['animal']);\r

  \  if (nundef(key)) key = chooseRandom(keylist);\r

  \  //#region individual keys for test\r

  \  //#endregion\r

  \  let info = jsCopy(picInfo(key));\r

  \  let valid, words;\r

  \  let oValid = info[lang + '_valid_sound'];\r

  \  if (isEmpty(oValid)) valid = []; else valid =
  sepWordListFromString(oValid, ['|']);\r

  \  let oWords = info[lang];\r

  \  if (isEmpty(oWords)) words = []; else words =
  sepWordListFromString(oWords, ['|']);\r

  \  let dWords = info.D;\r

  \  if (isEmpty(dWords)) dWords = []; else dWords =
  sepWordListFromString(dWords, ['|']);\r

  \  let eWords = info.E;\r

  \  if (isEmpty(eWords)) eWords = []; else eWords =
  sepWordListFromString(eWords, ['|']);\r

  \  words = isEnglish(lang) ? eWords : dWords;\r

  \  info.eWords = eWords;\r

  \  info.dWords = dWords;\r

  \  info.words = words;\r

  \  info.best = Syms[key][Settings.language];\r

  \  info.valid = valid;\r

  \  currentLanguage = lang;\r

  \  return info;\r

  }"
getRandomShape: function getRandomShape() { return chooseRandom(['ellipse',
  'roundedRect', 'rect', 'hex']); }
getRandomUidNodeWithAct: "function getRandomUidNodeWithAct(R) {\r

  \  let cands = Object.values(R.uiNodes).filter(x => isdef(x.act) &&
  isdef(x.oid));\r

  \  if (isEmpty(cands)) return null;\r

  \  let n = chooseRandom(cands);\r

  \  return n;\r

  }"
getRandomVowel: function getRandomVowel(w, except = []) { let vowels =
  getVowels(w, except); return chooseRandom(vowels); }
getRandomWP: function getRandomWP(min = 0, max = 35) { let n = randomNumber(min,
  max); console.log('wp', n); return jsCopy(WordP[n]); }
getRect: "function getRect(elem, relto) {\r

  \  if (isString(elem)) elem = document.getElementById(elem);\r

  \  let res = elem.getBoundingClientRect();\r

  \  if (isdef(relto)) {\r

  \    let b2 = relto.getBoundingClientRect();\r

  \    let b1 = res;\r

  \    res = {\r

  \      x: b1.x - b2.x,\r

  \      y: b1.y - b2.y,\r

  \      left: b1.left - b2.left,\r

  \      top: b1.top - b2.top,\r

  \      right: b1.right - b2.right,\r

  \      bottom: b1.bottom - b2.bottom,\r

  \      width: b1.width,\r

  \      height: b1.height\r

  \    };\r

  \  }\r

  \  let r = { x: res.left, y: res.top, w: res.width, h: res.height };\r

  \  addKeys({ l: r.x, t: r.y, r: r.x + r.w, b: r.t + r.h }, r);\r

  \  return r;\r

  }"
getRectInt: "function getRectInt(elem, relto) {\r

  \  if (isString(elem)) elem = document.getElementById(elem);\r

  \  let res = elem.getBoundingClientRect();\r

  \  if (isdef(relto)) {\r

  \    let b2 = relto.getBoundingClientRect();\r

  \    let b1 = res;\r

  \    res = {\r

  \      x: b1.x - b2.x,\r

  \      y: b1.y - b2.y,\r

  \      left: b1.left - b2.left,\r

  \      top: b1.top - b2.top,\r

  \      right: b1.right - b2.right,\r

  \      bottom: b1.bottom - b2.bottom,\r

  \      width: b1.width,\r

  \      height: b1.height\r

  \    };\r

  \  }\r

  \  let r4 = { x: Math.round(res.left), y: Math.round(res.top), w:
  Math.round(res.width), h: Math.round(res.height) };\r

  \  extendRect(r4);\r

  \  return r4;\r

  }"
getRelativeIds: function getRelativeIds(id) { return getList(id2ids[id]); }
getRelBounds: "function getRelBounds(elem, elRel) {\r

  \  let b1 = elem.getBoundingClientRect();\r

  \  if (!elRel) return b1;\r

  \  let b2 = elRel.getBoundingClientRect();\r

  \  return {\r

  \    x: b1.x - b2.x,\r

  \    y: b1.y - b2.y,\r

  \    left: b1.left - b2.left,\r

  \    top: b1.top - b2.top,\r

  \    right: b1.right - b2.right,\r

  \    bottom: b1.bottom - b2.bottom,\r

  \    width: b1.width,\r

  \    height: b1.height\r

  \  };\r

  }"
getRelCoords: "function getRelCoords(ev, elem) {\r

  \  let x = ev.pageX - elem.offset().left;\r

  \  let y = ev.pageY - elem.offset().top;\r

  \  return { x: x, y: y };\r

  }"
getRelCoordsX: "function getRelCoordsX(ev, elem) {\r

  \  let x = ev.pageX - elem.getBoundingClientRect().left;\r

  \  let y = ev.pageY - elem.getBoundingClientRect().top;\r

  \  return { x: x, y: y };\r

  }"
getRoomNE: function getRoomNE(house) { return firstCond(house.rooms, x =>
  isNorthRoom(house, Items[x]) && isEastRoom(house, Items[x])); }
getRoomNW: function getRoomNW(house) { return firstCond(house.rooms, x =>
  isNorthRoom(house, Items[x]) && isWestRoom(house, Items[x])); }
getRoomSE: "function getRoomSE(house) {\r

  \  let rooms = house.rooms.map(x => Items[x]);\r

  \  for (const r of rooms) {\r

  \    let isSouth = isSouthRoom(house, r);\r

  \    let isEast = isEastRoom(house, r);\r

  \  }\r

  \  return firstCond(house.rooms, x => isSouthRoom(house, Items[x]) &&
  isEastRoom(house, Items[x]));\r

  }"
getRoomSW: function getRoomSW(house) { return firstCond(house.rooms, x =>
  isSouthRoom(house, Items[x]) && isWestRoom(house, Items[x])); }
getScaledSizeCss: function getScaledSizeCss(sz, scale) { return `${sz.w *
  scale}px ${sz.h * scale}px`; }
getServerObject: "function getServerObject(oid) { return serverData.table[oid] ?
  serverData.table[oid] : serverData.players[oid]; }"
getSet: "function getSet(o, key) {\r

  \  if (!(key in o) || (!('set' in o[key]) && !('xset' in o[key]))) return
  null;\r

  \  else if ('set' in o[key]) return o[key].set;\r

  \  else return o[key].xset;\r

  }"
getShortestWord: "function getShortestWord(list, preferFirst = true) {\r

  \  let res = list[0];\r

  \  if (preferFirst) {\r

  \    for (let i = 1; i < list.length; i++) {\r

  \      if (list[i].length < res.length) res = list[i];\r

  \    }\r

  \  } else {\r

  \    for (let i = 1; i < list.length; i++) {\r

  \      if (list[i].length <= res.length) res = list[i];\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
getSignalColor: function getSignalColor() { if (currentLevel != 4 &&
  currentLevel != 7 && currentLevel != 10 && currentLevel != 3) return 'red';
  else return 'yellow'; }
getSimpleSetElements: function getSimpleSetElements(o) { return getValueArray(o); }
getSimpleStyles: "function getSimpleStyles(sz, family, bg, fg) {\r

  \  let styles = { bg: bg, fg: 'contrast', align: 'center', 'box-sizing':
  'border-box', padding: 4, margin: 2 };\r

  \  let textStyles = { family: family };\r

  \  let picStyles = { w: sz, h: sz, bg: fg };\r

  \  return [styles, picStyles, textStyles];\r

  }"
getSize: "function getSize(elem) { let r = getRectInt(elem); return { w: r.w, h:
  r.h, sz: Math.min(r.w, r.h) }; }"
getSizeNeeded: "function getSizeNeeded(elem) {\r

  \  var d = elem.cloneNode(true);\r

  \  d.style.width = 'auto';\r

  \  document.body.appendChild(d);\r

  \  let cStyles = {};\r

  \  cStyles.position = 'fixed';\r

  \  cStyles.opacity = 0;\r

  \  cStyles.top = '-9999px';\r

  \  mStyle(d, cStyles);\r

  \  height = d.clientHeight;\r

  \  width = d.clientWidth;\r

  \  d.parentNode.removeChild(d);\r

  \  return { w: Math.round(width), h: Math.round(height) };\r

  }"
getSizeWithStyles: "function getSizeWithStyles(text, styles) {\r

  \  var d = document.createElement(\"div\");\r

  \  document.body.appendChild(d);\r

  \  let cStyles = jsCopy(styles);\r

  \  cStyles.position = 'fixed';\r

  \  cStyles.opacity = 0;\r

  \  cStyles.top = '-9999px';\r

  \  mStyleX(d, cStyles);\r

  \  d.innerHTML = text;\r

  \  height = d.clientHeight;\r

  \  width = d.clientWidth;\r

  \  d.parentNode.removeChild(d);\r

  \  return { w: width, h: height };\r

  }"
getSizeWithStylesX: "function getSizeWithStylesX(text, styles, wmax, hmax) {\r

  \  var d = document.createElement(\"div\");\r

  \  document.body.appendChild(d);\r

  \  let cStyles = jsCopy(styles);\r

  \  cStyles.position = 'fixed';\r

  \  cStyles.opacity = 0;\r

  \  cStyles.top = '-9999px';\r

  \  if (isdef(wmax)) cStyles.width = wmax;\r

  \  if (isdef(hmax)) cStyles.height = wmax;\r

  \  mStyleX(d, cStyles);\r

  \  d.innerHTML = text;\r

  \  height = d.clientHeight;\r

  \  width = d.clientWidth;\r

  \  let x = getBounds(d)\r

  \  d.parentNode.removeChild(d);\r

  \  let res = { w: x.width, h: x.height };\r

  \  return res;\r

  }"
getSizing: "function getSizing(n, R, currentSizing) {\r

  \  return isdef(n.params) && isdef(n.params.sizing) ? n.params.sizing\r

  \    : isdef(currentSizing) ? currentSizing : R.defs.defaultSizing;\r

  }"
getStandardAreaNameForKey: function getStandardAreaNameForKey(key) { return 'm_A_' + key; }
getStandardAreaNameForPlayerProp: function getStandardAreaNameForPlayerProp(pid,
  propName) { return 'area_' + pid + '_' + propName; }
getStandardFz: "function getStandardFz(wi, hi, showPic, showLabels, wLongest)
  {\r

  \  let hText = showPic ? hi / 3 : hi;\r

  \  return showLabels ? idealFontSize(wLongest, wi, hText) : 0;\r

  }"
getStandardFzPic: "function getStandardFzPic(wi, hi, showLabels) { return
  Math.min(wi * .8, showLabels ? hi * .6 : hi * .75); }"
getStartLevels: "function getStartLevels(user) {\r

  \  let udata = lookup(DB, ['users', user]);\r

  \  if (!udata) return 'not available';\r

  \  let res = [];\r

  \  let res2 = {};\r

  \  for (const g in udata.games) {\r

  \    res2[g] = udata.games[g].startLevel;\r

  \    res.push(g + ': ' + udata.games[g].startLevel);\r

  \  }\r

  \  return res2;\r

  }"
getStyledItems: "function getStyledItems(words, bgFunc, fgFunc = 'contrast',
  fzFunc) {\r

  \  let items = [];\r

  \  if (isString(bgFunc)) { bgFunc = () => bgFunc; }\r

  \  if (isLiteral(fzFunc)) { fzFunc = () => fzFunc; }\r

  \  if (isString(fgFunc)) { fgFunc = () => fgFunc; }\r

  \  else if (nundef(fgFunc)) fgFunc = (i, w, bg) => colorIdealText(bg);\r

  \  for (let i = 0; i < words.length; i++) {\r

  \    let w = words[i];\r

  \    let bg = bgFunc(i, w);\r

  \    let fg = fgFunc(i, w, bg);\r

  \    let item = { w: w, bg: bg, fg: fg, i: i, fz: fzFunc(i, w) };\r

  \    items.push(item)\r

  \  }\r

  \  return items;\r

  }"
getStyledItems1: "function getStyledItems1(words, bgFunc, fgFunc = 'contrast',
  fzFunc) {\r

  \  let items = [];\r

  \  if (isString(bgFunc)) { bgFunc = () => bgFunc; }\r

  \  if (isLiteral(fzFunc)) { fzFunc = () => fzFunc; }\r

  \  if (isString(fgFunc)) { fgFunc = () => fgFunc; }\r

  \  else if (nundef(fgFunc)) fgFunc = (i, w, bg) => colorIdealText(bg);\r

  \  for (let i = 0; i < words.length; i++) {\r

  \    let w = words[i];\r

  \    let bg = bgFunc(i, w);\r

  \    let fg = fgFunc(i, w, bg);\r

  \    let item = { w: w, bg: bg, fg: fg, i: i, fz: fzFunc(i, w) };\r

  \    items.push(item)\r

  \  }\r

  \  return items;\r

  }"
getStyleProp: function getStyleProp(elem, prop) { return
  getComputedStyle(elem).getPropertyValue(prop); }
getSudokuPattern: "function getSudokuPattern(r, c) {\r

  \  let patterns = {\r

  \    44: [\r

  \      [[0, 1, 2, 3], [2, 3, 0, 1], [3, 0, 1, 2], [1, 2, 3, 0]],\r

  \      [[0, 1, 2, 3], [3, 2, 0, 1], [2, 3, 1, 0], [1, 0, 3, 2]],\r

  \      [[0, 1, 2, 3], [2, 3, 0, 1], [1, 0, 3, 2], [3, 2, 1, 0]],\r

  \    ],\r

  \  };\r

  \  return chooseRandom(patterns['' + r + c]);\r

  }"
getSudokuPatternFromDB: "function getSudokuPatternFromDB(r, c, index) {\r

  \  let key = '' + r + 'x' + c;\r

  \  let numSamples = Object.keys(DB.games.gColoku.samples[key]).length;\r

  \  if (nundef(index)) index = randomNumber(0, numSamples - 1); else if
  (index >= numSamples) index = 1;\r

  \  let sample = DB.games.gColoku.samples[key][index];\r

  \  let pattern = sudokuSampleToIndexMatrix(sample.sol, r, c);\r

  \  let puzzle = sudokuSampleToIndexMatrix(sample.min, r, c);\r

  \  return { pattern: pattern, puzzle: puzzle };\r

  }"
getSuitName: "function getSuitName(suit) {\r

  \  return suit === 0 ? 'spades' : suit === 1 ? 'hearts' : suit === 2 ?
  'clubs' : suit === 3 ? 'diamonds' : 'joker';\r

  }"
getSym: "function getSym(key, lang = 'E') {\r

  \  let info = jsCopy(picInfo(key));\r

  \  if (nundef(info.bestD)) { info.bestE = info.E.key; return info; }\r

  \  let valid, words;\r

  \  let oValid = info[lang + '_valid_sound'];\r

  \  if (isEmpty(oValid)) valid = []; else valid =
  sepWordListFromString(oValid, ['|']);\r

  \  let oWords = info[lang];\r

  \  if (isEmpty(oWords)) words = []; else words =
  sepWordListFromString(oWords, ['|']);\r

  \  let dWords = info.D;\r

  \  if (isEmpty(dWords)) dWords = []; else dWords =
  sepWordListFromString(dWords, ['|']);\r

  \  let eWords = info.E;\r

  \  if (isEmpty(eWords)) eWords = []; else eWords =
  sepWordListFromString(eWords, ['|']);\r

  \  words = isEnglish(lang) ? eWords : dWords;\r

  \  info.eWords = eWords;\r

  \  info.dWords = dWords;\r

  \  info.words = words;\r

  \  info.best = arrLast(words);\r

  \  info.valid = valid;\r

  \  currentLanguage = lang;\r

  \  return info;\r

  }"
getTables: function getTables() { return U.tables; }
getTabletopCardsArea: "function getTabletopCardsArea() {\r

  \  let msTable = getMainArea(defaultTabletopCardsAreaName);\r

  \  if (!msTable) { msTable = _makeTabletopCardsArea('a_d_game'); }\r

  \  return msTable;\r

  }"
getTextAreaCurrentLine: "function getTextAreaCurrentLine(el) {\r

  \  let line = '';\r

  \  if (el instanceof HTMLTextAreaElement) {\r

  \    line = el.value.slice(el.value.lastIndexOf('\\n', el.selectionStart -
  1) + 1,\r

  \      ((end = el.value.indexOf('\\n', el.selectionStart)) => end > -1 ? end
  : undefined)());\r

  \  }\r

  \  return line;\r

  }"
getTextAreaCurrentWord: "function getTextAreaCurrentWord(el) {\r

  \  let line = '', w = '', prefix = '';\r

  \  if (el instanceof HTMLTextAreaElement) {\r

  \    let s = el.value;\r

  \    let i_caret = el.selectionEnd;\r

  \    let i_last_break_before_caret = s.lastIndexOf('\\n', i_caret - 1); if
  (i_last_break_before_caret < 0) i_last_break_before_caret = 0;\r

  \    let i_next_break = s.indexOf('\\n', i_caret); if (i_next_break < 0)
  i_next_break = s.length - 1;\r

  \    let i_caret_within_line = i_caret - i_last_break_before_caret;\r

  \    line = s.slice(i_last_break_before_caret + 1, i_next_break);\r

  \    let pos = i_caret_within_line - 2;\r

  \    console.log('_________\\nline:', line, '\\ni_caret=' + i_caret,
  'i_in_line=' + pos);\r

  \    for (let i = pos; i >= 0; i--) {\r

  \      let ch = line[i];\r

  \      if (isAlphaNum(ch)) w = ch + w; else break;\r

  \    }\r

  \    prefix = w;\r

  \    for (let i = pos + 1; i < line.length; i++) {\r

  \      let ch = line[i];\r

  \      if (isAlphaNum(ch)) w = w + ch; else break;\r

  \    }\r

  \  }\r

  \  return [w, prefix];\r

  }"
getTextColor: "function getTextColor(c) {\r

  \  let rgb = c\r

  \    .substring(4, c.indexOf(')'))\r

  \    .split(', ')\r

  \    .map(x => parseInt(x));\r

  \  let o = Math.round((parseInt(rgb[0]) * 299 + parseInt(rgb[1]) * 587 +
  parseInt(rgb[2]) * 114) / 1000);\r

  \  return o > 125 ? 'black' : 'white';\r

  }"
getTextForFraction: "function getTextForFraction(num, denom) {\r

  \  let s = '' + num + '&frasl;' + denom; return s;\r

  }"
getTextForFractionX: "function getTextForFractionX(num, denom) {\r

  \  if (num == denom) return '1';\r

  \  else if (denom == 1) return num;\r

  \  else if (num / denom > 2) {\r

  \    let mixed = getMixedNumber(num, denom);\r

  \    return getTextForMixed(mixed.full, mixed.n, mixed.d);\r

  \  } else {\r

  \    let s = '' + num + '&frasl;' + denom; return s;\r

  \  }\r

  }"
getTextForMixed: "function getTextForMixed(full, num, denom) {\r

  \  let s = '' + full;\r

  \  if (isdef(num) && isdef(denom)) s += ' ' + num + '&frasl;' + denom;\r

  \  return s;\r

  }"
getTextSize: "function getTextSize(s = 'hallo', parentDivOrId) {\r

  \  var newDiv = document.createElement(\"div\");\r

  \  newDiv.innerHTML = s;\r

  \  newDiv.style.cssText = \"position:fixed; top:-9999px; opacity:0;\"\r

  \  if (isdef(parentDivOrId)) {\r

  \    if (isString(parentDivOrId)) parentDivOrId =
  document.getElementById(parentDivOrId);\r

  \    parentDivOrId.appendChild(newDiv);\r

  \  } else {\r

  \    document.body.appendChild(newDiv);\r

  \  }\r

  \  height = newDiv.clientHeight;\r

  \  width = newDiv.clientWidth;\r

  \  newDiv.parentNode.removeChild(newDiv)\r

  \  return { w: width, h: height };\r

  }"
getTextSizeX: "function getTextSizeX(text, fz, family, weight = 900,
  parentDivOrId = null, styles = {}) {\r

  \  var d = document.createElement(\"div\");\r

  \  styles.fz = fz;\r

  \  styles.family = family;\r

  \  styles['font-weight'] = weight;\r

  \  styles.position = 'fixed';\r

  \  styles.opacity = 0;\r

  \  styles.top = '-9999px';\r

  \  styles.w = 200;\r

  \  mStyleX(d, styles);\r

  \  d.innerHTML = text;\r

  \  if (isdef(parentDivOrId)) {\r

  \    if (isString(parentDivOrId)) parentDivOrId =
  document.getElementById(parentDivOrId);\r

  \    parentDivOrId.appendChild(d);\r

  \  } else {\r

  \    document.body.appendChild(d);\r

  \  }\r

  \  height = d.clientHeight;\r

  \  width = d.clientWidth;\r

  \  d.parentNode.removeChild(d)\r

  \  return { w: width, h: height };\r

  }"
getTextSizeX1: "function getTextSizeX1(text, fz, family, weight = 900,
  parentDivOrId = null, styles = {}) {\r

  \  var d = document.createElement(\"div\");\r

  \  styles.fz = fz;\r

  \  styles.family = family;\r

  \  styles['font-weight'] = weight;\r

  \  styles.position = 'fixed';\r

  \  styles.opacity = 0;\r

  \  styles.top = '-9999px';\r

  \  mStyleX(d, styles);\r

  \  d.innerHTML = text;\r

  \  if (isdef(parentDivOrId)) {\r

  \    if (isString(parentDivOrId)) parentDivOrId =
  document.getElementById(parentDivOrId);\r

  \    parentDivOrId.appendChild(d);\r

  \  } else {\r

  \    document.body.appendChild(d);\r

  \  }\r

  \  height = d.clientHeight;\r

  \  width = d.clientWidth;\r

  \  return { w: width, h: height, d: d };\r

  }"
getTextWidth: "function getTextWidth(text, font) {\r

  \  var canvas = getTextWidth.canvas || (getTextWidth.canvas =
  document.createElement('canvas'));\r

  \  var context = canvas.getContext('2d');\r

  \  context.font = font;\r

  \  var metrics = context.measureText(text);\r

  \  return metrics.width;\r

  }"
getTimeElapsed: function getTimeElapsed() { return TimeElapsed +
  msElapsedSince(TimestampStarted); }
getTransformInfo: "function getTransformInfo(gElement) {\r

  \  var matrix = gElement.getCTM();\r

  \  let info = decomposeMatrix(matrix);\r

  \  return info;\r

  }"
getTransformInfoDOM: "function getTransformInfoDOM(d) {\r

  \  let info = parseComplexStyleProperty(d.style.transform);\r

  \  if (info.translate) {\r

  \    let s = info.translate.split(',');\r

  \    info.translateX = s[0].trim();\r

  \    info.translateY = s.length > 1 ? s[1].trim() : s[0].trim();\r

  \  }\r

  \  if (!isdef(info.translateX)) info.translateX = '0px';\r

  \  if (!isdef(info.translateY)) info.translateY = '0px';\r

  \  if (info.scale) {\r

  \    let s = info.scale.split(',');\r

  \    info.scaleX = s[0].trim();\r

  \    info.scaleY = s.length > 1 ? s[1].trim() : s[0].trim();\r

  \  }\r

  \  if (!isdef(info.scaleX)) info.scaleX = '1';\r

  \  if (!isdef(info.scaleY)) info.scaleY = '1';\r

  \  if (!isdef(info.rotation)) info.rotation = '0';\r

  \  for (const k in info) {\r

  \    if (!isNumber(info[k])) info[k] = firstNumber(info[k]);\r

  \  }\r

  \  return info;\r

  }"
getTranslateX: "function getTranslateX(myElement) {\r

  \  var style = window.getComputedStyle(myElement);\r

  \  var matrix = new WebKitCSSMatrix(style.webkitTransform);\r

  \  console.log('translateX: ', matrix.m41);\r

  }"
getTranslateY: "function getTranslateY(myElement) {\r

  \  var style = window.getComputedStyle(myElement);\r

  \  var matrix = new WebKitCSSMatrix(style.webkitTransform);\r

  \  console.log('translateX: ', matrix.m41);\r

  }"
getTransPalette: "function getTransPalette(color = '#000000') {\r

  \  let res = [];\r

  \  for (const alpha of [.0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1])
  res.push(colorTrans(color, alpha));\r

  \  return res;\r

  }"
getTransPalette9: "function getTransPalette9(color = '#000000') {\r

  \  let res = [];\r

  \  for (const alpha of [.1, .2, .3, .4, .5, .6, .7, .8, .9])
  res.push(colorTrans(color, alpha));\r

  \  return res;\r

  }"
getTriangleDownPoly: "function getTriangleDownPoly(x, y, w, h) {\r

  \  let tridown = [[-0.5, 0.5], [0.5, 0.5], [-0.5, 0.5]];\r

  \  return getPoly(tridown, x, y, w, h);\r

  }"
getTriangleUpPoly: "function getTriangleUpPoly(x, y, w, h) {\r

  \  let triup = [[0, -0.5], [0.5, 0.5], [-0.5, 0.5]];\r

  \  return getPoly(triup, x, y, w, h);\r

  }"
getTupleGroups: "function getTupleGroups() {\r

  \  let act = G.serverData.options;\r

  \  let tupleGroups = [];\r

  \  for (const desc in act) {\r

  \    let tg = { desc: desc, tuples: [] };\r

  \    let tuples = expand1_99(act[desc].actions);\r

  \    if (tuples.length == 1 && !isList(tuples[0])) tuples = [tuples];\r

  \    tg.tuples = tuples;\r

  \    tupleGroups.push({ desc: desc, tuples: tuples });\r

  \  }\r

  \  return tupleGroups;\r

  }"
getTuples: "function getTuples(data) {\r

  \  let tuples = [];\r

  \  if ('actions' in data) {\r

  \    tuples = expand(data.actions);\r

  \    tuples.sort();\r

  \    if (!empty(tuples) && tuples.length == 1 && !Array.isArray(tuples[0]))
  {\r

  \      tuples = [tuples];\r

  \    }\r

  \  }\r

  \  return tuples;\r

  }"
getTurnPlayer: "function getTurnPlayer() {\r

  \  return T.players[T.index];\r

  }"
getTypeOf: "function getTypeOf(param) {\r

  \  let type = typeof param;\r

  \  if (type == 'string') {\r

  \    return 'string';\r

  \  }\r

  \  if (type == 'object') {\r

  \    type = param.constructor.name;\r

  \    if (startsWith(type, 'SVG')) type = stringBefore(stringAfter(type,
  'SVG'), 'Element').toLowerCase();\r

  \    else if (startsWith(type, 'HTML')) type =
  stringBefore(stringAfter(type, 'HTML'), 'Element').toLowerCase();\r

  \  }\r

  \  let lType = type.toLowerCase();\r

  \  if (lType.includes('event')) type = 'event';\r

  \  return type;\r

  }"
getUID: "function getUID(pref = '') {\r

  \  UIDCounter += 1;\r

  \  return pref + '_' + UIDCounter;\r

  }"
getUIObject: function getUIObject(id) { return UIS[id]; }
getUis: function getUis(olist, func) { return olist.map(o => func(o)); }
getUnitOwner: "function getUnitOwner(nationality) {\r

  \  if (nationality == 'Germany' || nationality == 'Italy') {\r

  \    return 'Axis';\r

  \  } else if (nationality == 'USSR') {\r

  \    return 'USSR';\r

  \  } else if (nationality == 'Britain' || nationality == 'France' ||
  nationality == 'USA') {\r

  \    return 'West';\r

  \  } else {\r

  \    return 'Minor';\r

  \  }\r

  }"
getUser: function getUser(idPlayer) { return G.playersAugmented[idPlayer].username; }
getuser_1send: "function getuser_1send() {\r

  \  get_data('getuser', {});\r

  }"
getuser_2handleResult: "function getuser_2handleResult(result) {\r

  \  Userdata = JSON.parse(result);\r

  \  Userdata.image = Userdata.username + '.jpg';\r

  \  Username = Userdata.username;\r

  \  let d = mBy('dUserInfo');\r

  \  clearElement(d);\r

  \  let dParent = mDiv(d);\r

  \  let dir = '../base/assets/images/';\r

  \  let path = dir + (Userdata.hasImage ? Username : 'unknown_user') +
  '.jpg';\r

  \  let size = 100;\r

  \  let styles = { 'object-fit': 'cover', rounding: '50%', margin: 10, h:
  size, w: size, border: '2px solid white' };\r

  \  let dUserImage = mImg(path, dParent, styles);\r

  \  dUserImage.id = 'dUserImage';\r

  \  let dUserName = mText(Username, d, { fz: 14, family: 'opensans' });\r

  \  dUserName.id = 'dUserName';\r

  \  let dUserEmail = mText(Userdata.email, d, { fz: 12, opacity: .5, family:
  'opensans' });\r

  \  dUserEmail.id = 'dUserEmail';\r

  }"
getUsername: function getUsername(idPlayer) { return getUser(idPlayer); }
getUsernameForPlayer: "function getUsernameForPlayer(id) {\r

  \  let players = S.gameConfig.players;\r

  \  let pl = firstCond(players, x => x.id == id);\r

  \  let uname = pl.username;\r

  \  return uname;\r

  }"
getUsernameForPlid: function getUsernameForPlid(id) { return
  playerConfig[GAME].players[id].username; }
getUsers: function getUsers() { return Object.keys(DB.users); }
getUserStartLevel: function getUserStartLevel(game) { return valf(lookup(U,
  ['games', game, 'startLevel']), 0); }
getUserStartLevel_dep: "function getUserStartLevel_dep(game) { gInfo =
  U.games[game]; level = isdef(gInfo) && isdef(gInfo.startLevel) ?
  gInfo.startLevel : 0; return level; }"
getValueArray: "function getValueArray(o, elKey = 'obj', arrKey = '_set') {\r

  \  let raw = jsCopy(o);\r

  \  if (isdef(o[arrKey])) {\r

  \    raw = raw[arrKey];\r

  \  }\r

  \  if (isDict(raw)) {\r

  \    raw = odict2olist(raw);\r

  \  }\r

  \  if (!isList(raw)) return [];\r

  \  if (raw.length > 0 && raw[0][elKey]) {\r

  \    raw = raw.map(x => x[elKey]);\r

  \  }\r

  \  return raw;\r

  }"
getValueInPixel: "function getValueInPixel(val, relto) {\r

  \  if (isNumber(val)) return val;\r

  \  val = firstNumber(val);\r

  \  return val * relto / 100;\r

  }"
getVerticalOverflow: function getVerticalOverflow(element) { return
  element.scrollHeight - element.clientHeight; }
getVisibleChild: function getVisibleChild(id) { for (const ch of
  mBy(id).children) if (ch.style.display != 'none') return ch.id; }
getVisibleList: "function getVisibleList(o) {\r

  \  return o.visible._set;\r

  }"
getVisibleSet: "function getVisibleSet(o) {\r

  \  return getSet(o, 'visible');\r

  \  if (!('visible' in o) || (!('set' in o.visible) && !('xset' in
  o.visible))) return null;\r

  \  else if ('set' in o.visible) return o.visible.set;\r

  \  else return o.visible.xset;\r

  }"
getVisual: function getVisual(oid) { return UIS[getMainId(oid)]; }
getVisuals: "function getVisuals(oid) {\r

  \  let mk = UIS[getMainId(oid)];\r

  \  if (mk || USE_OLD_GRID_FUNCTIONS) return mk;\r

  \  let oids = oid2ids[oid];\r

  \  if (!oids || !IdOwner.m) return null;\r

  \  return intersection(IdOwner.m, oid2ids[oid]).map(x => UIS[x]);\r

  }"
getVowels: "function getVowels(w, except = []) {\r

  \  w = w.toLowerCase();\r

  \  let vowels = 'aeiouy';\r

  \  let res = [];\r

  \  for (let i = 0; i < w.length; i++) {\r

  \    if (vowels.includes(w[i]) && !except.includes(w[i])) res.push({ i: i,
  letter: w[i] });\r

  \  }\r

  \  return res;\r

  }"
getWordSize: "function getWordSize(text, fz, family, weight = 900) {\r

  \  let st = {\r

  \    fz: fz,\r

  \    display: 'inline-block',\r

  \    bg: 'green',\r

  \    family: family,\r

  \    weight: weight, //900, //'bold', //weight, //'bold',\r

  \  };\r

  \  return getSizeWithStyles(text, st);\r

  }"
getWordSize_dep: "function getWordSize_dep(text, fz, family, weight = 900) {\r

  \  console.log('hier!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\r

  \  var d = document.createElement(\"div\");\r

  \  document.body.appendChild(d);\r

  \  d.innerHTML = text;\r

  \  d.style.fontSize = fz + 'px';\r

  \  d.style.position = 'fixed';\r

  \  d.style.fontFamily = family;\r

  \  d.style.fontWeight = 900;\r

  \  let b = getBounds(d);\r

  \  height = d.clientHeight;\r

  \  width = d.clientWidth;\r

  \  return { w: width, h: height };\r

  }"
getWordSize2: "function getWordSize2(text, fz, family, weight = 900) {\r

  \  var d = document.createElement(\"div\");\r

  \  document.body.appendChild(d);\r

  \  d.style.fontSize = fz + 'px';\r

  \  d.style.opacity = 0;\r

  \  d.style.position = 'fixed';\r

  \  d.style.top = '-9999px';\r

  \  d.style.display = 'inline-block';\r

  \  d.style.backgroundColor = 'green';\r

  \  d.style.fontFamily = family;\r

  \  d.style.fontWeight = weight; //'bold';\r

  \  d.innerHTML = text;\r

  \  height = d.clientHeight;\r

  \  width = d.clientWidth;\r

  \  d.parentNode.removeChild(d)\r

  \  return { w: width, h: height };\r

  }"
getWrongChars: function getWrongChars() { return getQChars().filter(x =>
  getInputStringOfChar(x) != x.letter); }
getWrongWords: function getWrongWords() { return getQWords().filter(x =>
  getInputStringOfWord(x) != x.word); }
getZoomFactor: "function getZoomFactor(gElement) {\r

  \  var matrix = gElement.getCTM();\r

  \  let info = decomposeMatrix(matrix);\r

  \  return info.scale;\r

  }"
gFg: function gFg(g, color, thickness) { g.setAttribute('stroke', color); if
  (thickness) g.setAttribute('stroke-width', thickness); }
gG: function gG() { return gCreate('g'); }
gHex: function gHex(w, h) { let pts = size2hex(w, h); return gPoly(pts); }
gInfo: "function gInfo(n, R, uidParent) {\r

  \  let pf = n.params;\r

  \  n.uiType = 'g';\r

  \  let ui = gShape(pf.shape, pf.size, pf.size, pf.bg, pf.rounding);\r

  \  let gParent = findAncestorElemWithParentOfType(mBy(uidParent), 'svg');\r

  \  gParent.appendChild(ui);\r

  \  n.idUiParent = gParent.id;\r

  \  if (n.content) {\r

  \    let bgText = pf.bgText ? pf.bgText : null;\r

  \    let color = nundef(pf.fg) ? nundef(pf.bgText) ? null :
  colorIdealText(pf.bgText) : pf.fg;\r

  \    n.label = agText(ui, n.content, color, bgText, pf.font);\r

  \    calcRays(n, gParent, R);\r

  \  }\r

  \  if (pf.border) {\r

  \    let th = isdef(pf.thickness) ? pf.thickness : 1;\r

  \    let color = decodeColor(pf.border);\r

  \    let ch = ui.children[0];\r

  \    ch.setAttribute('stroke', color);\r

  \    ch.setAttribute('stroke-width', th);\r

  \  }\r

  \  positionGElement(ui, uidParent, gParent);\r

  \  return ui;\r

  }"
giRep: "function giRep(gi, dParent, styles, shape, prefix, content) {\r

  \  gi = isString(gi) ? gi[1] == '_' ? Items[gi] : Items[name2id(gi)] : gi;\r

  \  let id = gi.id;\r

  \  let name = gi.name;\r

  \  let d = mShape(shape, dParent, styles);\r

  \  d.id = (isdef(prefix) ? prefix : '') + id;\r

  \  let key = isdef(prefix) ? prefix : 'div';\r

  \  d.innerHTML = content;\r

  \  let di = {}; di[key] = d; iAdd(gi, di);\r

  \  return d;\r

  }"
give_each_jolly_group: "function give_each_jolly_group(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    pl.journeys.push(['4Hn', '4Sn', '*Hn']);\r

  \    pl.goals['3'] = true; pl.roundgoal = '3';\r

  \  }\r

  \  fen.players[uplayer].hand.push('4Cn');\r

  }"
give_one_player_0_coins: "function give_one_player_0_coins(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let otherplayer = firstCond(fen.plorder, (p) => p != uplayer);\r

  \  let pl = fen.players[otherplayer];\r

  \  pl.coins = 0;\r

  }"
give_other_blackmailed_building: "function give_other_blackmailed_building(o)
  {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let b1 = stage_building(fen, 1, 'farm'); b1.rumors = ['KHr'];\r

  \  b1.isblackmailed = true;\r

  \  set_queen_phase(o);\r

  }"
give_other_jolly_group: "function give_other_jolly_group(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let otherplayer = firstCond(fen.plorder, (p) => p != uplayer);\r

  \  let pl = fen.players[otherplayer];\r

  \  pl.journeys.push(['2Hn', '2Sn', '*Hn']);\r

  \  pl.goals['3'] = true; pl.roundgoal = '3';\r

  \  fen.players[uplayer].hand.push('2Cn');\r

  }"
give_other_jolly_sequence: "function give_other_jolly_sequence(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let otherplayer = firstCond(fen.plorder, (p) => p != uplayer);\r

  \  let pl = fen.players[otherplayer];\r

  \  pl.journeys.push(['KHn', 'AHn', '*Hn', '3Hn', '4Hn', '5Hn', '6Hn']);\r

  \  pl.goals['7R'] = true; pl.roundgoal = '7R';\r

  \  fen.players[uplayer].hand.push('2Hn', '5Hn', 'JHn', 'QHn');\r

  }"
give_other_various_buildings: "function give_other_various_buildings(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let other = firstCond(o.fen.plorder, (p) => p != uplayer);\r

  \  return give_various_buildings_to(o, other);\r

  }"
give_player_7R: "function give_player_7R(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.hand = ['7Cn', '8Cn', 'TCn', 'JCn', 'QCn', 'KCn', 'ACn', '*Hn', '8Cn',
  '2Hn', '2Sn', '2Hn'];\r

  \  let otherplayer = firstCond(fen.plorder, (p) => p != uplayer);\r

  \  let plother = fen.players[otherplayer];\r

  \  plother.hand.unshift('9Cn', '2Sn', '2Hn', '6Cn', '5Cn');\r

  }"
give_player_achieve_5: "function give_player_achieve_5(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.hand = ['6Hn', '6Hn', '6Hn', '6Hn', '*Hn', '4Cn', '4Cn', '4Cn', '3Dn',
  '3Dn', '2Sn', 'KHn', 'QSn'];\r

  \  for (const plname of fen.plorder) {\r

  \    if (plname == uplayer) continue;\r

  \    let pl1 = fen.players[plname];\r

  \    pl1.journeys = [['2Cn', '2Hn', '*Hn']];\r

  \  }\r

  }"
give_player_group: "function give_player_group(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.journeys = [['2Hn', '2Sn', '2Hn']];\r

  }"
give_player_hand_group: "function give_player_hand_group(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.hand = ['2Hn', '2Sn', '2Hn', '3Hn', '3Sn', '3Hn', '4Hn', '4Sn',
  '*Hn'];\r

  }"
give_player_hand_groups: "function give_player_hand_groups(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.hand = ['2Hn', '2Hn', '2Sn', '2Cn', '3Sn', '3Hn', '4Hn', '4Sn',
  '*Hn'];\r

  }"
give_player_jolly: "function give_player_jolly(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.hand.push('*Hn');\r

  }"
give_player_jolly_sequence: "function give_player_jolly_sequence(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.journeys.push(['KHn', 'AHn', '*Hn', '3Hn', '4Hn', '5Hn', '6Hn']);\r

  \  pl.goals['7R'] = true; pl.roundgoal = '7R';\r

  \  fen.players[uplayer].hand.push('2Hn', 'JHn', 'QHn');\r

  }"
give_player_king: "function give_player_king(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  fen.players[uplayer].hand.push('KHn');\r

  }"
give_player_luxury_cards: "function give_player_luxury_cards(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  fen.players[uplayer].hand.push('AHl', 'AHl', 'AHl');\r

  }"
give_player_multiple_commission_cards: "function
  give_player_multiple_commission_cards(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.hand.push('QCn', 'QHn');\r

  \  pl.stall.push('QDn', 'QSn');\r

  \  pl.commissions.push('QCc');\r

  }"
give_player_one_ferro_set: "function give_player_one_ferro_set(o) {\r

  \  o.fen.players[o.fen.turn[0]].hand = ['*Hn', 'KHn', 'KCn'];\r

  }"
give_player_only_4_cards: "function give_player_only_4_cards(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  fen.players[uplayer].hand = ['AHn', 'AHn'];\r

  \  fen.players[uplayer].stall = ['ACn', 'ASn'];\r

  }"
give_player_only_one_card: "function give_player_only_one_card(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.hand = ['4Hn'];\r

  }"
give_player_queen: "function give_player_queen(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  fen.players[uplayer].hand.push('QHn');\r

  }"
give_player_sequence: "function give_player_sequence(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let pl = fen.players[uplayer];\r

  \  pl.hand = ['2Sn', '3Sn', '4Sn', '5Sn', '6Sn', '7Sn', '8Sn', '9Sn',
  'ASn'];\r

  }"
give_player_two_ferro_sets: "function give_player_two_ferro_sets(o) {\r

  \  o.fen.players[o.fen.turn[0]].hand = ['*Hn', 'KHn', 'KCn', 'QHn', 'QCn',
  'QDn'];\r

  }"
give_player_various_buildings: "function give_player_various_buildings(o) {\r

  \  let plname = o.fen.turn[0];\r

  \  return give_various_buildings_to(o, plname);\r

  }"
give_players_buildings: "function give_players_buildings(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  stage_correct_buildings(fen, { mimi: { estate: 1 }, amanda: { chateau: 1
  } });\r

  \  fen.stage = 5;\r

  \  fen.phase = 'king';\r

  }"
give_players_buildings_plus: "function give_players_buildings_plus(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let di = {};\r

  \  for (const plname of fen.plorder) { di[plname] = { estate: 1, farm: 1,
  chateau: 1 }; }\r

  \  stage_correct_buildings(fen, di);\r

  \  ari_add_harvest_cards(fen);\r

  \  fen.stage = o.stage = 5;\r

  \  fen.phase = 'king';\r

  }"
give_players_empty_stalls: "function give_players_empty_stalls(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let n = rChoose([2, 3]);\r

  \  fen.market = deck_deal(fen.deck, 2);\r

  \  fen.stage = 4, fen.actionsCompleted = [], fen.stallSelected =
  jsCopy(fen.plorder);\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    pl.stall = [];\r

  \    pl.stall_value = 0;\r

  \  }\r

  }"
give_players_hand_A2: "function give_players_hand_A2(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    pl.hand = ['ACn', '2Cn', '3Cn', '5Hn', '7Hn', '7Sn', '7Cn', '7Dn'];\r

  \  }\r

  \  [fen.stage, fen.turn] = set_journey_or_stall_stage(fen, o.options,
  fen.phase);\r

  }"
give_players_hand_journey: "function give_players_hand_journey(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    arrExtend(pl.hand, ['ACn', '2Cn', '3Cn']);\r

  \  }\r

  }"
give_players_schwein: "function give_players_schwein(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  for (let i = 0; i < fen.plorder.length; i++) {\r

  \    let b = stage_building(fen, i, 'farm');\r

  \    b.h = 'KHn';\r

  \    b.schweine = [2];\r

  \    let b1 = stage_building(fen, i, 'estate');\r

  \  }\r

  \  [fen.turn, fen.stage] = [[uplayer], 5];\r

  \  fen.phase = 'king';\r

  }"
give_players_schwein_old: "function give_players_schwein_old(o, isOpen = true)
  {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let b = stage_building(fen, 1, 'farm');\r

  \  b.h = 'KHn';\r

  \  if (isOpen) b.schweine = [b.list[2]];\r

  \  fen.stage = 5;\r

  \  fen.phase = 'king';\r

  }"
give_players_schweine_variety: "function give_players_schweine_variety(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let b = stage_building_new(fen, 1, 'farm', 1, 1);\r

  \  b = stage_building_new(fen, 1, 'farm', 1, 0);\r

  \  b = stage_building_new(fen, 1, 'farm', 0, 0);\r

  \  b = stage_building_new(fen, 1, 'farm', 0, 1);\r

  \  b = stage_building_new(fen, 1, 'farm', 0, 2);\r

  \  b = stage_building(fen, 0, 'farm'); b.h = 'KHn'; b.schweine = [2];\r

  \  [fen.turn, fen.stage] = [[uplayer], 5];\r

  \  fen.phase = 'king';\r

  }"
give_players_stalls: "function give_players_stalls(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let n = rChoose([2, 3]);\r

  \  fen.market = deck_deal(fen.deck, 2);\r

  \  fen.stage = 4, fen.actionsCompleted = [], fen.stallSelected =
  jsCopy(fen.plorder);\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    for (let i = 0; i < n; i++)  top_elem_from_to(pl.hand, pl.stall);\r

  \    pl.stall_value = calc_stall_value(fen, plname);\r

  \  }\r

  }"
give_various_buildings_to: "function give_various_buildings_to(o, plname) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let i = fen.plorder.indexOf(plname);\r

  \  let b1 = stage_building(fen, i, 'farm'); b1.rumors = ['KHr'];\r

  \  let b2 = stage_building(fen, i, 'farm');\r

  \  let lead = b2.lead;\r

  \  b2.rumors = ['4Cr', `${lead[0]}Cr`];\r

  \  let b3 = stage_building(fen, i, 'farm');\r

  \  return plname;\r

  }"
glabel: "function glabel(el, val, { bg, fg, contrastBackground = false, force =
  true, shrinkFont = false, wrap = false, fz = 20 } = {}) {\r

  \  let mobj = el.mobj;\r

  \  if (contrastBackground) {\r

  \    unitTestMS('.................fill black!!!');\r

  \    mobj.text({ txt: val, force: force, shrinkFont: shrinkFont, wrap: wrap,
  fz: fz, bg: 'white', fill: 'black' });\r

  \  } else {\r

  \    mobj.text({ txt: val, force: force, shrinkFont: shrinkFont, wrap: wrap,
  fz: fz, bg: bg, fill: fg });\r

  \  }\r

  }"
glabels: "function glabels(board, ids, func, { bg, fg, contrastBackground =
  false, force = true, shrinkFont = false, wrap = false, fz = 20 } = {}) {\r

  \  for (const id of ids) {\r

  \    let el = board.objects[id];\r

  \    let val = func(el);\r

  \    glabel(el, val, { bg: bg, fg: fg, contrastBackground:
  contrastBackground, force: force, shrinkFont: shrinkFont, wrap: wrap, fz: fz
  });\r

  \  }\r

  }"
gLine: function gLine(x1, y1, x2, y2) { let r = gCreate('line');
  r.setAttribute('x1', x1); r.setAttribute('y1', y1); r.setAttribute('x2', x2);
  r.setAttribute('y2', y2); return r; }
gMaze: "function gMaze() {\r

  \  function maze_fen() { return 'nix'; }\r

  \  function maze_prompt(g, fen) {\r

  \    let [rows, cols, sz, gap] = [g.rows, g.cols, g.sz, g.gap];\r

  \    clear_graph();\r

  \    let maze = new MazeGraph(dTable, rows, cols, sz, gap);\r

  \    setRectInt(maze.dGraph);\r

  \    mLinebreak(dTable, 12);\r

  \    let cellStart = maze.getTopLeftCell();\r

  \    mCellContent(iDiv(cellStart), { w: '60%', h: '60%', fz: '50%', padding:
  '5%', bg: 'green', fg: 'white', rounding: '50%' }, 'A');\r

  \    let cellGoal = maze.getBottomRightCell();\r

  \    mCellContent(iDiv(cellGoal), { w: '60%', h: '60%', fz: '50%', padding:
  '5%', bg: 'red', fg: 'white', rounding: '50%' }, 'B');\r

  \    let [roomFrom, roomTo] = [cellStart.nodeId, cellGoal.nodeId];\r

  \    if (isdef(fen)) {\r

  \      let instruction = mText('game over!', dTable, { fz: 24, display:
  'inline-block' });\r

  \      return;\r

  \    }\r

  \    let instruction = mText('is there a path from A to B?', dTable, { fz:
  24, display: 'inline-block' });\r

  \    mLinebreak(dTable);\r

  \    let path = maze.getShortestPathFromTo(roomFrom, roomTo);\r

  \    console.assert(path.length < Infinity, 'WAAAAAAAAAAAAAAS?');\r

  \    if (coin()) maze.cutPath(path, .5, .75);\r

  \    let len = maze.getLengthOfShortestPath(roomFrom, roomTo);\r

  \    let is_yes = len != Infinity;\r

  \    let byes = mButton('yes', (ev) => maze_eval(is_yes, ev), dTable, { fz:
  20 }, ['donebutton', 'buttonClass']);\r

  \    let bno = mButton('no', (ev) => maze_eval(!is_yes, ev), dTable, { fz:
  20 }, ['donebutton', 'buttonClass']);\r

  \    if (is_yes) { Goal = { b_correct: byes, b_wrong: bno, is_yes: true,
  maze: maze, path: path }; }\r

  \    else { Goal = { b_correct: bno, b_wrong: byes, is_yes: false, maze:
  maze, path: path }; }\r

  \    animatePropertyX(dTable, 'opacity', [0, 0, 1], 500, 'both', 'ease',
  0);\r

  \  }\r

  \  function maze_eval(is_correct, ev) {\r

  \    if (!canAct()) return;\r

  \    uiActivated = false; clear_timeouts();\r

  \    let button_clicked = ev.target;\r

  \    race_set_fen();\r

  \    race_update_my_score(is_correct ? 1 : -1);\r

  \    let delay = maze_feedback(is_correct, button_clicked);\r

  \    setTimeout(() => {\r

  \      in_game_open_prompt_off();\r

  \      clear_table_events();\r

  \      race_send_move();\r

  \    }, delay);\r

  \  }\r

  \  function clear_graph() { if (nundef(Goal)) return; let cy = lookup(Goal,
  ['maze', 'cy']); if (cy) cy.destroy(); }\r

  \  function maze_feedback(is_correct, button_clicked, show_feedback = true)
  {\r

  \    let delay = !is_correct && show_feedback ? 1000 : 100;\r

  \    if (!is_correct) {\r

  \      mStyle(Goal.b_correct, { bg: 'green' });\r

  \      animate(Goal.b_correct, 'komisch', 1000);\r

  \      if (Goal.is_yes) Goal.maze.breadCrumbs(Goal.path); else
  Goal.maze.colorComponents();\r

  \    }\r

  \    if (is_correct) { mStyle(button_clicked, { bg: 'green' });
  mCheckit(button_clicked, 100); }\r

  \    else { mXit(button_clicked); }\r

  \    return delay;\r

  \  }\r

  \  return {\r

  \    prompt: maze_prompt,\r

  \    fen: maze_fen,\r

  \  }\r

  }"
go_offline: function go_offline() { DA.internet = false; }
go_online: function go_online() { DA.internet = true; }
goalHasNumber: "function goalHasNumber() {\r

  \  let ws = Goal.info.words;\r

  \  return firstCond(ws, x => isNumber(x));\r

  }"
goalHasNumberOrTimeString: "function goalHasNumberOrTimeString() {\r

  \  return goalHasNumber() || goalHasTimeString();\r

  }"
goalHasTimeString: "function goalHasTimeString() {\r

  \  let ws = Goal.info.words;\r

  \  return firstCond(ws, x => isTimeString(x));\r

  }"
got_create_table: function got_create_table(obj) { Session.cur_tid =
  obj.table.id; Session.cur_table = obj.table; present_table(obj); }
got_dictionary: "function got_dictionary(obj) {\r

  \  let lang = obj.lang;\r

  \  let x = obj.dict;\r

  \  Dictionary[lang] = to_words(x);\r

  \  return;\r

  \  let keys = get_keys(obj).filter(x => endsWith(x, 'dict'));\r

  \  console.log('keys', keys)\r

  \  if (isEmpty(keys)) return;\r

  \  if (nundef(Dictionary)) Dictionary = {};\r

  \  let l = obj.lang;\r

  \  for (const k of keys) {\r

  \    if (nundef(Dictionary[l])) {\r

  \      Dictionary[l] = to_words(obj[k]);\r

  \    }\r

  \  }\r

  }"
got_games: "function got_games(obj) {\r

  \  let tables = obj.tables;\r

  \  let bygame = set_tables_by_game(obj, false);\r

  \  set_most_recent_table_as_cur_tid(tables);\r

  \  present_games();\r

  }"
got_intro: "function got_intro(obj) {\r

  \  Session.users = obj.users;\r

  \  Session.users_by_name = {};\r

  \  for (const u of Session.users) {\r

  \    Session.users_by_name[u.username] = u;\r

  \    if (isdef(DB.users[u.username])) { copyKeys(DB.users[u.username], u);
  }\r

  \  }\r

  \  present_intro();\r

  }"
got_modify_table: function got_modify_table(obj) { Session.cur_tid =
  obj.table.id; Session.cur_table = obj.table; present_table(obj); }
got_non_admin_reload: "function got_non_admin_reload(obj) {\r

  \  in_game_off();\r

  \  in_game_open_prompt_off();\r

  \  console.log('got_non_admin reload: obj', obj)\r

  \  set_tables_by_game(obj);\r

  \  tables = obj.tables;\r

  \  if (isEmpty(tables)) {\r

  \    console.assert(nundef(Session.cur_tid), 'reload no table still
  cur_tid!!!!!')\r

  \    get_user_in_intro_screen();\r

  \  } else {\r

  \    get_play_start();\r

  \  }\r

  }"
got_play: function got_play(obj) { present_table(obj); }
got_play_start: "function got_play_start(obj) {\r

  \  console.log('got_play_start', obj);\r

  \  let table = obj.table;\r

  \  console.log('fen', table.fen);\r

  \  let lang = get_preferred_lang(Session.cur_user);\r

  \  set_start_data_from_fen(obj.table.fen, obj.table.game);\r

  \  let lang2 = get_preferred_lang(Session.cur_user);\r

  \  if (lang != lang2) get_dictionary();\r

  \  present_table(obj);\r

  }"
got_send_move: function got_send_move(obj) { present_table(obj); }
got_tables: "function got_tables(obj) {\r

  \  set_tables_by_game(obj);\r

  \  if (isdef(Session.cur_tid)) { get_play(); } else get_games();\r

  }"
got_user_game_tables: "function got_user_game_tables(obj) {\r

  \  let tables = obj.tables;\r

  \  if (!isEmpty(tables)) { Session.cur_tid = tables[0].id; Session.cur_table
  = tables[0]; }\r

  }"
got_user_in_intro_screen: "function got_user_in_intro_screen() {\r

  \  show('dIntro'); clearElement('dIntro');\r

  \  intro_show_user_image(Session.cur_user);\r

  \  present_wait_for_table_to_start();\r

  }"
gotNumberOrTimeString: "function gotNumberOrTimeString(answer) {\r

  \  if (isNumber(answer) || isTimeString(answer)) return true; else return
  false;\r

  }"
gPanel: "function gPanel(n, R, area) {\r

  \  gParent = mBy(area);\r

  \  n.idUiParent = gParent.id;\r

  \  if (isdef(n.ui)) {\r

  \    delete n.changing;\r

  \    return n.ui;\r

  \  }\r

  \  let ui = agG(gParent);\r

  \  n.uiType = 'g';\r

  \  return ui;\r

  }"
gPoly: function gPoly(pts) { let r = gCreate('polygon'); if (pts)
  r.setAttribute('points', pts); return r; }
gPos: function gPos(g, x, y) { g.style.transform = `translate(${x}px, ${y}px)`; }
gRect: function gRect(w, h) { let r = gCreate('rect'); r.setAttribute('width',
  w); r.setAttribute('height', h); r.setAttribute('x', -w / 2);
  r.setAttribute('y', -h / 2); return r; }
gRectPartOnArea: "function gRectPartOnArea() {\r

  \  let g = new MMS({ parent: UIS.a_d_game }).setDefaults({ bg: 'powderBlue'
  }).attach();\r

  \  let ms = new MMS({ parent: g }).rect({ w: 50, h: 50, bg: 'blue'
  }).attach();\r

  \  console.log(ms.elem)\r

  }"
grid: "function grid(id, rows, cols, size, bg = 'blue') {\r

  \  visualStructures[id] = [];\r

  \  let w = size * cols;\r

  \  let h = size * rows;\r

  \  let ms = new MS(id, 'g')\r

  \    .setbg(getpal(3))\r

  \    .rect({ w: w, h: h });\r

  \  ms.tag('layout', 'grid');\r

  \  visualStructures[id].push(ms);\r

  \  return (r, c) => {\r

  \    return {\r

  \      x: c * size - w / 2 + size / 2,\r

  \      y: r * size - h / 2 + size / 2,\r

  \      id: id,\r

  \      ms: ms\r

  \    };\r

  \  };\r

  }"
gridLabeled: "function gridLabeled(list, picLabelStyles) {\r

  \  let dGrid = mDiv(mBy('table'));\r

  \  let elems = [];\r

  \  let isText = true;\r

  \  let isOmoji = false;\r

  \  let pictureSize = 200;\r

  \  let stylesForLabelButton = { rounding: 10, margin: pictureSize / 8 };\r

  \  for (const k of list) {\r

  \    let info = symbolDict[k];\r

  \    let label = info.type == 'emo' ? (isdef(info.bestE) ? info.bestE :
  lastOfLanguage(k, 'E')) + ' ' + lastIndex\r

  \      : k;\r

  \    let el = maPicLabelButtonFitText(info, label,\r

  \      { w: pictureSize, h: pictureSize, bgPic: 'random', shade: null,
  contrast: null },\r

  \      onClickIVPicture, dGrid, stylesForLabelButton, 'frameOnHover',
  isText, isOmoji);\r

  \    el.id = 'pic' + lastIndex;\r

  \    elems.push(el);\r

  \    Pictures.push({ div: el, info: info, label: label, isSelected: false
  });\r

  \    lastIndex += 1;\r

  \  }\r

  \  let gridStyles = { 'place-content': 'center', gap: 4, margin: 4, padding:
  4, bg: 'silver', rounding: 5 };\r

  \  let size = layoutGrid(elems, dGrid, gridStyles, { rows: 10, isInline:
  true });\r

  \  console.log('lastIndex', lastIndex)\r

  }"
gridLabeledX: "function gridLabeledX(keyList, labelList, dParent, { rows, layout
  } = {}, clickHandler) {\r

  \  let dGrid = mDiv(dParent);\r

  \  let elems = [];\r

  \  let isText = true;\r

  \  let isOmoji = false;\r

  \  let pictureSize = 200;\r

  \  let stylesForLabelButton = { rounding: 10, margin: pictureSize / 8 };\r

  \  let pics = [];\r

  \  for (let i = 0; i < keyList.length; i++) {\r

  \    let k = keyList[i];\r

  \    let info = symbolDict[k];\r

  \    let label = labelList[i];\r

  \    let el = maPicLabelButtonFitText(info, label,\r

  \      { w: pictureSize, h: pictureSize, bgPic: 'random', shade: null,
  contrast: null },\r

  \      clickHandler, dGrid, stylesForLabelButton, 'frameOnHover', isText,
  isOmoji);\r

  \    el.id = 'pic' + lastIndex;\r

  \    elems.push(el);\r

  \    pics.push({ div: el, info: info, label: label, isSelected: false });\r

  \    lastIndex += 1;\r

  \  }\r

  \  let gridStyles = { 'place-content': 'center', gap: 4, margin: 4, padding:
  4, bg: 'silver', rounding: 5 };\r

  \  let func = (layout == 'flex' ? layoutFlex : layoutGrid);\r

  \  let size = func(elems, dGrid, gridStyles, { rows: rows, isInline: true
  });\r

  \  return pics;\r

  }"
gridLayout: "function gridLayout(nuiBoard, R) {\r

  \  calcBoardDimensionsX(nuiBoard, R);\r

  \  let [fw, fh] = [nuiBoard.fw, nuiBoard.fh];\r

  \  let boardDiv = mBy(nuiBoard.uidDiv);\r

  \  let svg = mBy(nuiBoard.uidSvg);\r

  \  let g = mBy(nuiBoard.uid);\r

  \  mStyle(boardDiv, { 'min-width': nuiBoard.wTotal, 'min-height':
  nuiBoard.hTotal });\r

  \  nuiBoard.sizeMeasured = { w: nuiBoard.wTotal, h: nuiBoard.hTotal };\r

  \  nuiBoard.size = jsCopy(nuiBoard.sizeMeasured);\r

  \  for (const fid of nuiBoard.children) {\r

  \    let f = R.uiNodes[fid];\r

  \    if (f.params.shape == 'line') {\r

  \      let line = f.ui.firstChild;\r

  \      if (nundef(line)) {\r

  \        agLine(f.ui, f.info.x1 * fw, f.info.y1 * fw, f.info.x2 * fw,
  f.info.y2 * fw);\r

  \      } else {\r

  \        line.setAttribute('x1', f.info.x1 * fw);\r

  \        line.setAttribute('y1', f.info.y1 * fw);\r

  \        line.setAttribute('x2', f.info.x2 * fw);\r

  \        line.setAttribute('y2', f.info.y2 * fw);\r

  \      }\r

  \      f.pos = { x: (f.info.x1 * fw + f.info.x2 * fw) / 2, y: (f.info.y1 *
  fw + f.info.y2 * fw) / 2 };\r

  \    } else {\r

  \      f.pos = { x: (fw * f.info.x), y: (fh * f.info.y) };\r

  \      gPos(f.ui, fw * f.info.x, fh * f.info.y);\r

  \    }\r

  \  }\r

  \  g.style = `transform: translate(${nuiBoard.wTotal / 2}px,
  ${nuiBoard.hTotal / 2}px)`;\r

  }"
gridSkeleton: "function gridSkeleton(omap, R, gridInfoFunc, fieldInfoFunc) {\r

  \  let board = { o: omap, info: gridInfoFunc(omap.rows, omap.cols) };\r

  \  let fields = {};\r

  \  for (const fid of getElements(omap.fields)) {\r

  \    let o = R.getO(fid);\r

  \    fields[fid] = { oid: fid, o: o, info: fieldInfoFunc(board.info, o.row,
  o.col) };\r

  \  }\r

  \  board.info.vertices = correctPolys(Object.values(fields).map(x =>
  x.info.poly), 1);\r

  \  let dhelp = {};\r

  \  let corners = {};\r

  \  for (const fid in fields) {\r

  \    let f = fields[fid];\r

  \    let i = 0;\r

  \    for (const cid of getElements(f.o.corners)) {\r

  \      if (cid && nundef(dhelp[cid])) {\r

  \        let pt = f.info.poly[i];\r

  \        corners[cid] = { oid: cid, o: R.getO(cid), info: { shape: 'circle',
  memType: 'corner', x: pt.x, y: pt.y, w: 1, h: 1 } };\r

  \        dhelp[cid] = true;\r

  \      }\r

  \      i += 1;\r

  \    }\r

  \  }\r

  \  dhelp = {};\r

  \  let edges = {};\r

  \  for (const fid in fields) {\r

  \    let f = fields[fid];\r

  \    for (const eid of getElements(f.o.edges)) {\r

  \      if (eid && nundef(dhelp[eid])) {\r

  \        let el = R.getO(eid);\r

  \        let n1 = corners[el.corners[0]._obj];\r

  \        let n2 = corners[el.corners[1]._obj];\r

  \        let [x1, y1, x2, y2] = [n1.info.x, n1.info.y, n2.info.x,
  n2.info.y];\r

  \        edges[eid] = { oid: eid, o: el, info: { shape: 'line', memType:
  'edge', x1: x1, y1: y1, x2: x2, y2: y2, x: (x1 + x2) / 2, y: (y1 + y2) / 2,
  thickness: 1, w: 1, h: 1 } };\r

  \        dhelp[eid] = true;\r

  \      }\r

  \    }\r

  \  }\r

  \  return { board: board, fields: fields, corners: corners, edges: edges
  };\r

  }"
gRounding: "function gRounding(r, rounding) {\r

  \  r.setAttribute('rx', rounding);\r

  \  r.setAttribute('ry', rounding);\r

  }"
groupSizes: "function groupSizes() {\r

  \  ensureSymBySet();\r

  \  for (const gname in symKeysBySet) {\r

  \    console.log('group', gname + ': ' + symKeysBySet[gname].length);\r

  \  }\r

  }"
growIfDefaultMainAreaWidth: "function growIfDefaultMainAreaWidth(mobj) {\r

  \  let wElem = mobj.parts.table.offsetWidth;\r

  \  let areaName = mobj.idParent;\r

  \  if (isdef(wElem) && isdef(AREAS[areaName])) {\r

  \    let wNeeded = wElem + 40;\r

  \    let wArea = UIS[areaName].w;\r

  \    if (wArea < wNeeded || wArea > wNeeded + 100) {\r

  \      setAreaWidth(areaName, wNeeded);\r

  \    }\r

  \  }\r

  }"
growIfDefaultPlayerAreaWidthblablabla_UNUSED: "function
  growIfDefaultPlayerAreaWidthblablabla_UNUSED(mobj) {\r

  \  let wElem = mobj.parts.table.offsetWidth;\r

  \  let areaName = mobj.idParent;\r

  \  if (isdef(wElem) && isdef(AREAS[areaName])) {\r

  \    let wNeeded = wElem + 40;\r

  \    let wArea = UIS[areaName].w;\r

  \    if (wArea < wNeeded || wArea > wNeeded + 100) {\r

  \      setAreaWidth(areaName, wNeeded);\r

  \    }\r

  \  }\r

  }"
gSet: "function gSet() {\r

  \  function set_fen() {\r

  \    let items = Session.items;\r

  \    let fen = items.map(x => x.fen).join(',');\r

  \    return fen;\r

  \  }\r

  \  function set_prompt(g, fen) {\r

  \    let [n, rows, cols] = [g.num_attrs, g.rows, g.cols];\r

  \    let all_attrs = gSet_attributes();\r

  \    let attrs_in_play = arrTake(get_keys(all_attrs), n);\r

  \    let deck = g.deck = make_set_deck(n);\r

  \    shuffle(deck);\r

  \    let goal = Goal = { set: make_goal_set(deck, g.prob_different), cards:
  [] };\r

  \    let dCards = stdRowsColsContainer(dTable, cols, styles = { bg:
  'transparent' });\r

  \    let card_styles = { w: cols > 4 ? 130 : 160 };\r

  \    let items = g.items = [];\r

  \    let deck_rest = arrWithout(deck, goal.set);\r

  \    let fens = choose(deck_rest, rows * cols - 3);\r

  \    let all_fens = goal.set.concat(fens);\r

  \    shuffle(all_fens);\r

  \    if (isdef(fen)) { all_fens = fen.split(','); }\r

  \    for (const f of all_fens) {\r

  \      let item = create_set_card(f, dCards, card_styles);\r

  \      let d = iDiv(item);\r

  \      mStyle(d, { cursor: 'pointer' });\r

  \      d.onclick = set_interact;\r

  \      if (Goal.set.includes(item.fen)) Goal.cards.push(item);\r

  \      items.push(item);\r

  \    }\r

  \    g.selected = [];\r

  \    return items;\r

  \  }\r

  \  function set_interact(ev) {\r

  \    ev.cancelBubble = true;\r

  \    if (!canAct()) { console.log('no act'); return; }\r

  \    let id = evToId(ev);\r

  \    if (isdef(Items[id])) {\r

  \      let item = Items[id];\r

  \      toggleSelectionOfPicture(item, Session.selected);\r

  \      if (Session.selected.length == 3) {\r

  \        let correct = check_complete_set(Session.selected.map(x =>
  x.fen));\r

  \        if (correct) {\r

  \          Selected = { isCorrect: true, feedbackUI: Session.selected.map(x
  => iDiv(x)) };\r

  \        } else {\r

  \          Selected = { isCorrect: false, correctUis: Goal.cards.map(x =>
  iDiv(x)), feedbackUI: null, animation: 'onPulse1' };\r

  \        }\r

  \        set_eval();\r

  \      }\r

  \    }\r

  \  }\r

  \  function set_eval() {\r

  \    if (!canAct()) return;\r

  \    uiActivated = false; clear_timeouts();\r

  \    IsAnswerCorrect = Selected.isCorrect;\r

  \    race_set_fen();\r

  \    race_update_my_score(IsAnswerCorrect ? 1 : 0);\r

  \    let delay = show_feedback(IsAnswerCorrect);\r

  \    setTimeout(() => {\r

  \      in_game_open_prompt_off();\r

  \      clear_table_events();\r

  \      race_send_move();\r

  \    }, delay);\r

  \  }\r

  \  return {\r

  \    prompt: set_prompt,\r

  \    fen: set_fen,\r

  \  }\r

  }"
gSet_attributes: "function gSet_attributes() {\r

  \  const all_attrs = {\r

  \    shape: ['circle', 'triangle', 'square'],\r

  \    color: [RED, BLUE, GREEN],\r

  \    num: [1, 2, 3],\r

  \    shading: ['solid', 'empty', 'gradient'],\r

  \    background: ['white', 'grey', 'black'],\r

  \    text: ['none', 'letter', 'number'],\r

  \  };\r

  \  return all_attrs;\r

  }"
gShape: "function gShape(shape, w = 20, h = 20, color = 'green', rounding) {\r

  \  let el = gG();\r

  \  if (nundef(shape)) shape = 'rect';\r

  \  if (shape != 'line') agColoredShape(el, shape, w, h, color);\r

  \  else gStroke(el, color, w);\r

  \  if (isdef(rounding) && shape == 'rect') {\r

  \    let r = el.children[0];\r

  \    gRounding(r, rounding);\r

  \  }\r

  \  return el;\r

  }"
gSize: "function gSize(g, w, h, shape = null, iChild = 0) {\r

  \  let el = (getTypeOf(g) != 'g') ? g : g.children[iChild];\r

  \  let t = getTypeOf(el);\r

  \  switch (t) {\r

  \    case 'rect': el.setAttribute('width', w); el.setAttribute('height', h);
  el.setAttribute('x', -w / 2); el.setAttribute('y', -h / 2); break;\r

  \    case 'ellipse': el.setAttribute('rx', w / 2); el.setAttribute('ry', h /
  2); break;\r

  \    default:\r

  \      if (shape) {\r

  \        switch (shape) {\r

  \          case 'hex': let pts = size2hex(w, h); el.setAttribute('points',
  pts); break;\r

  \        }\r

  \      }\r

  \  }\r

  \  return el;\r

  }"
gSizeToContent: "function gSizeToContent(svg) {\r

  \  var bbox = svg.getBBox();\r

  \  svg.setAttribute(\"width\", bbox.x + bbox.width + bbox.x);\r

  \  svg.setAttribute(\"height\", bbox.y + bbox.height + bbox.y);\r

  }"
gSpotit: "function gSpotit() {\r

  \  function spotit_fen() {\r

  \    let items = Session.items;\r

  \    console.log('items', items)\r

  \    let fen = items.map(x => x.keys.join(' ')).join(',');\r

  \    let item_fens = [];\r

  \    for (const item of items) {\r

  \      let arr = arrFlatten(item.pattern);\r

  \      let ifen = arr.map(x => `${x.key}:${x.scale}`).join(' ');\r

  \      item_fens.push(ifen);\r

  \    }\r

  \    fen = item_fens.join(',');\r

  \    return fen;\r

  \  }\r

  \  function spotit_prompt(g, fen) {\r

  \    g.items = spotit_deal(g.num_cards, g.rows, g.cols, g.vocab, g.lang,
  g.min_scale, g.max_scale, fen);\r

  \  }\r

  \  function spotit_interact(ev) {\r

  \    ev.cancelBubble = true;\r

  \    if (!canAct()) { console.log('no act'); return; }\r

  \    let keyClicked = evToProp(ev, 'key');\r

  \    let id = evToId(ev);\r

  \    if (isdef(keyClicked) && isdef(Items[id])) {\r

  \      let item = Items[id];\r

  \      if (Object.values(item.shares).includes(keyClicked)) {\r

  \        let otherCard = spotitFindCardSharingSymbol(item, keyClicked);\r

  \        let cardSymbol = ev.target;\r

  \        let otherSymbol = spotitFindSymbol(otherCard, keyClicked);\r

  \        Selected = { isCorrect: true, feedbackUI: [cardSymbol, otherSymbol]
  };\r

  \      } else {\r

  \        let cardSymbol = ev.target;\r

  \        Selected = { isCorrect: false, feedbackUI: [cardSymbol],
  correctUis: spotit_get_shared_symbols(), correctionDelay: Session.items.length
  * 1500 };\r

  \      }\r

  \      spotit_eval();\r

  \    }\r

  \  }\r

  \  function spotit_eval() {\r

  \    if (!canAct()) return;\r

  \    uiActivated = false; clear_timeouts();\r

  \    IsAnswerCorrect = Selected.isCorrect;\r

  \    race_set_fen();\r

  \    race_update_my_score(IsAnswerCorrect ? 1 : 0);\r

  \    let delay = show_feedback(IsAnswerCorrect);\r

  \    setTimeout(() => {\r

  \      in_game_open_prompt_off();\r

  \      clear_table_events();\r

  \      race_send_move();\r

  \    }, delay);\r

  \  }\r

  \  function spotit_card(info, dParent, cardStyles, onClickSym) {\r

  \    CSZ = 300;\r

  \    copyKeys({ w: CSZ, h: CSZ }, cardStyles);\r

  \    let card = cRound(dParent, cardStyles, info.id);\r

  \    addKeys(info, card);\r

  \    let d = iDiv(card);\r

  \    let zipped = [];\r

  \    for (let i = 0; i < card.keys.length; i++) {\r

  \      zipped.push({ key: card.keys[i], scale: card.scales[i] });\r

  \    }\r

  \    card.pattern = fillColarr(card.colarr, zipped);\r

  \    let symStyles = { sz: CSZ / (card.rows + 1), fg: 'random', hmargin: 8,
  vmargin: 4, cursor: 'pointer' };\r

  \    let syms = [];\r

  \    mRowsX(iDiv(card), card.pattern, symStyles, { 'justify-content':
  'center' }, { 'justify-content': 'center' }, syms);\r

  \    for (let i = 0; i < info.keys.length; i++) {\r

  \      let key = card.keys[i];\r

  \      let sym = syms[i];\r

  \      card.live[key] = sym;\r

  \      sym.setAttribute('key', key);\r

  \      sym.onclick = onClickSym;\r

  \    }\r

  \    return card;\r

  \  }\r

  \  function spotit_deal(numCards, rows, cols, vocab, lang, min_scale,
  max_scale, fen) {\r

  \    lang = valf(lang, 'E');\r

  \    let colarr = _calc_hex_col_array(rows, cols);\r

  \    if (rows == 3 && cols == 1) { colarr = [1, 3, 1]; }\r

  \    else if (rows == 2 && cols == 1) { colarr = [1, 2]; }\r

  \    else if (rows == 4 && cols == 1) { rows = 3; colarr = [2, 3, 1]; }\r

  \    else if (rows == 5 && cols == 1) { rows = 4; cols = 1; colarr = [1, 3,
  3, 1]; }\r

  \    else if (rows == 5 && cols == 3) { rows = 5; cols = 1; colarr = [1, 3,
  4, 3, 1]; }\r

  \    else if (rows == 6 && cols == 2) { rows = 5.5; colarr = [2, 4, 5, 4,
  2]; }\r

  \    else if (rows == 6 && cols == 3) { rows = 5.8; colarr = [2, 4, 5, 4,
  3]; }\r

  \    let perCard = arrSum(colarr);\r

  \    let nShared = (numCards * (numCards - 1)) / 2;\r

  \    let nUnique = perCard - numCards + 1;\r

  \    let numKeysNeeded = nShared + numCards * nUnique;\r

  \    let nMin = numKeysNeeded + 3;\r

  \    let keypool = setKeys({ nMin: nMin, lang: valf(lang, 'E'), key:
  valf(vocab, 'animals'), keySets: KeySets, filterFunc: (_, x) => !x.includes('
  ') });\r

  \    let keys = choose(keypool, numKeysNeeded);\r

  \    let dupls = keys.slice(0, nShared);\r

  \    let uniqs = keys.slice(nShared);\r

  \    let infos = [];\r

  \    for (let i = 0; i < numCards; i++) {\r

  \      let keylist = uniqs.slice(i * nUnique, (i + 1) * nUnique);\r

  \      let info = { id: getUID(), shares: {}, keys: keylist, rows: rows,
  cols: cols, colarr: colarr, num_syms: perCard };\r

  \      infos.push(info);\r

  \    }\r

  \    let iShared = 0;\r

  \    for (let i = 0; i < numCards; i++) {\r

  \      for (let j = i + 1; j < numCards; j++) {\r

  \        let c1 = infos[i];\r

  \        let c2 = infos[j];\r

  \        let dupl = dupls[iShared++];\r

  \        c1.keys.push(dupl);\r

  \        c1.shares[c2.id] = dupl;\r

  \        c2.shares[c1.id] = dupl;\r

  \        c2.keys.push(dupl);\r

  \      }\r

  \    }\r

  \    for (const info of infos) { shuffle(info.keys); }\r

  \    for (const info of infos) {\r

  \      info.scales = info.keys.map(x => chooseRandom([.5, .75, 1, 1.25]));\r

  \    }\r

  \    if (!isEmpty(fen)) {\r

  \      let ks_for_cards = fen.split(',');\r

  \      for (let i = 0; i < infos.length; i++) {\r

  \        let info = infos[i];\r

  \        let ks_list = ks_for_cards[i].split(' ');\r

  \        info.keys = ks_list.map(x => stringBefore(x, ':'));\r

  \        info.scales = ks_list.map(x => stringAfter(x, ':')).map(x =>
  Number(x));\r

  \      }\r

  \    }\r

  \    let items = [];\r

  \    for (const info of infos) {\r

  \      let item = spotit_card(info, dTable, { margin: 20 },
  spotit_interact);\r

  \      items.push(item);\r

  \    }\r

  \    return items;\r

  \  }\r

  \  function spotit_get_shared_symbols() {\r

  \    let result = [];\r

  \    for (const item of Session.items) {\r

  \      for (const id in item.shares) {\r

  \        let k = item.shares[id];\r

  \        let ui = iGetl(item, k);\r

  \        result.push(ui);\r

  \      }\r

  \    }\r

  \    return result;\r

  \  }\r

  \  //#region future: verbessere die art wie symbols auf card verteilt
  (unused)\r

  \  function spotit_colarr_settings(num) {\r

  \    let di = {\r

  \      3: { rows: 2, colarr: [1, 2] },\r

  \      4: { rows: 2, colarr: [2, 2] },\r

  \      5: { rows: 2.5, colarr: [2, 3] },\r

  \      6: { rows: 3, colarr: [1, 2] },\r

  \      7: { rows: 3, colarr: [1, 2] },\r

  \      8: { rows: 3.2, colarr: [1, 2] },\r

  \      9: { rows: 2, colarr: [1, 2] },\r

  \      10: { rows: 2, colarr: [1, 2] },\r

  \      11: { rows: 2, colarr: [1, 2] },\r

  \      12: { rows: 2, colarr: [1, 2] },\r

  \      13: { rows: 2, colarr: [1, 2] },\r

  \      14: { rows: 2, colarr: [1, 2] },\r

  \      15: { rows: 2, colarr: [1, 2] },\r

  \    }\r

  \    let colarr = _calc_hex_col_array(rows, cols);\r

  \    if (rows == 3 && cols == 1) { colarr = [1, 3, 1]; }\r

  \    else if (rows == 2 && cols == 1) { colarr = [1, 2]; }\r

  \    else if (rows == 4 && cols == 1) { rows = 3; colarr = [2, 3, 1]; }\r

  \    else if (rows == 5 && cols == 1) { rows = 4; cols = 1; colarr = [1, 3,
  3, 1]; }\r

  \    else if (rows == 3 && cols == 3) { rows = 3; cols = 3; colarr = [1, 3,
  3, 1]; }\r

  \    else if (rows == 5 && cols == 3) { rows = 5; cols = 1; colarr = [1, 3,
  4, 3, 1]; }\r

  \    else if (rows == 6 && cols == 2) { rows = 5.5; colarr = [2, 4, 5, 4,
  2]; }\r

  \  }\r

  \  function spotit_deal_new_not_yet(numCards, rows, colarr, vocab, lang,
  min_scale, max_scale, fen) {\r

  \    lang = valf(lang, 'E');\r

  \    let perCard = arrSum(colarr);\r

  \    let nShared = (numCards * (numCards - 1)) / 2;\r

  \    let nUnique = perCard - numCards + 1;\r

  \    let numKeysNeeded = nShared + numCards * nUnique;\r

  \    let nMin = numKeysNeeded + 3;\r

  \    let keypool = setKeys({ nMin: nMin, lang: valf(lang, 'E'), key:
  valf(vocab, 'animals'), keySets: KeySets, filterFunc: (_, x) => !x.includes('
  ') });\r

  \    let keys = choose(keypool, numKeysNeeded);\r

  \    let dupls = keys.slice(0, nShared);\r

  \    let uniqs = keys.slice(nShared);\r

  \    let infos = [];\r

  \    for (let i = 0; i < numCards; i++) {\r

  \      let keylist = uniqs.slice(i * nUnique, (i + 1) * nUnique);\r

  \      let info = { id: getUID(), shares: {}, keys: keylist, rows: rows,
  cols: cols, colarr: colarr, num_syms: perCard };\r

  \      infos.push(info);\r

  \    }\r

  \    let iShared = 0;\r

  \    for (let i = 0; i < numCards; i++) {\r

  \      for (let j = i + 1; j < numCards; j++) {\r

  \        let c1 = infos[i];\r

  \        let c2 = infos[j];\r

  \        let dupl = dupls[iShared++];\r

  \        c1.keys.push(dupl);\r

  \        c1.shares[c2.id] = dupl;\r

  \        c2.shares[c1.id] = dupl;\r

  \        c2.keys.push(dupl);\r

  \      }\r

  \    }\r

  \    for (const info of infos) { shuffle(info.keys); }\r

  \    for (const info of infos) {\r

  \      info.scales = info.keys.map(x => chooseRandom([.6, .75, 1, 1.25]));\r

  \    }\r

  \    if (!isEmpty(fen)) {\r

  \      let ks_for_cards = fen.split(',');\r

  \      for (let i = 0; i < infos.length; i++) {\r

  \        let info = infos[i];\r

  \        let ks_list = ks_for_cards[i].split(' ');\r

  \        info.keys = ks_list.map(x => stringBefore(x, ':'));\r

  \        info.scales = ks_list.map(x => stringAfter(x, ':')).map(x =>
  Number(x));\r

  \      }\r

  \    }\r

  \    let items = [];\r

  \    for (const info of infos) {\r

  \      let item = spotit_card(info, dTable, { margin: 20 },
  spotit_interact);\r

  \      items.push(item);\r

  \    }\r

  \    return items;\r

  \  }\r

  \  //#endregion\r

  \  return {\r

  \    prompt: spotit_prompt,\r

  \    fen: spotit_fen,\r

  \  }\r

  }"
gStroke: function gStroke(g, color, thickness) { g.setAttribute('stroke',
  color); if (thickness) g.setAttribute('stroke-width', thickness); }
gSvg: function gSvg() { return gCreate('svg'); }
gTest00: "function gTest00() {\r

  \  let g = new AbsGraph1();\r

  \  let nid1 = g.addNode();\r

  \  let nid2 = g.addNode();\r

  \  let eid1 = g.addEdge(nid1, nid2);\r

  \  console.log('g', g.getNodeIds(), g.getEdgeIds());\r

  }"
gTest01: "function gTest01() {\r

  \  let g = new AbsGraph1();\r

  \  let nids = g.addNodes(10);\r

  \  let eids = g.addEdges(15);\r

  \  console.log('g', g.getNodeIds(), g.getEdgeIds());\r

  }"
gTest02: "function gTest02() {\r

  \  initTable();\r

  \  let d = mDiv(dTable, { w: 500, h: 300, bg: 'blue', align: 'left' });\r

  \  let g = new SimpleGraph(d);\r

  \  let nids = g.addNodes(10);\r

  \  let eids = g.addEdges(15);\r

  \  console.log('g', g.getNodeIds(), g.getEdgeIds());\r

  \  g.cose();\r

  \  g.addLayoutControls();\r

  }"
gTest03: "function gTest03() {\r

  \  initTable();\r

  \  let d = mDiv(dTable, { w: 500, h: 360, bg: 'blue', align: 'left' });\r

  \  let g = new AbsGraph1(d);\r

  \  upgradeToSimpleGraph(g, d);\r

  \  let nids = g.addNodes(10);\r

  \  let eids = g.addEdges(15);\r

  \  console.log('g', g.getNodeIds(), g.getEdgeIds());\r

  \  g.cose();\r

  \  g.addLayoutControls();\r

  }"
gTest04: "function gTest04() {\r

  \  initTable();\r

  \  let d = mDiv(dTable, { w: 500, h: 360, bg: 'blue', align: 'left' });\r

  \  let g = new AbsGraph1(d);\r

  \  g.addVisual(d);\r

  \  let nids = g.addNodes(10);\r

  \  let eids = g.addEdges(15);\r

  \  console.log('g', g.getNodeIds(), g.getEdgeIds());\r

  \  g.cose();\r

  \  g.addLayoutControls(d);\r

  }"
gTest05: "function gTest05() {\r

  \  initTable();\r

  \  let hexPoints = [0, -1, 1, -0.5, 1, 0.5, 0, 1, -1, 0.5, -1, -0.5];\r

  \  let styles = {\r

  \    outer: { bg: 'pink', padding: 25 },\r

  \    inner: { w: 500, h: 400 },\r

  \    node: { shape: 'polygon', 'shape-polygon-points': hexPoints, w: 90, h:
  100, bg: 'black', fg: 'red', fz: 40 }\r

  \  };\r

  \  let g = new UIGraph(dTable, styles);\r

  \  let nids = g.addNodes(7);\r

  \  console.log('g', g.getNodeIds(), g.getEdgeIds());\r

  \  g.hex1(3, 2, styles.node.w + 2, styles.node.h + 2);\r

  \  g.addLayoutControls();\r

  \  g.disableDD();\r

  \  g.nodeEvent('click', x => { let id = x.id(); console.log('clicked ' +
  id); g.mStyle(id, { bg: 'yellow', fg: 'blue' }); });\r

  }"
gTest06: "function gTest06() {\r

  \  initTable();\r

  \  let hexPoints = [0, -1, 1, -0.5, 1, 0.5, 0, 1, -1, 0.5, -1, -0.5];\r

  \  let styles = {\r

  \    outer: { bg: 'pink', padding: 25 },\r

  \    inner: { w: 500, h: 400 },\r

  \    node: { bg: 'pink' },\r

  \    edge: { bg: 'blue' }\r

  \    //'node.field':  { shape: 'polygon', 'shape-polygon-points': hexPoints,
  w: 90, h: 100, bg: 'black', fg: 'red', fz: 40 },\r

  \  };\r

  \  let g = new UIGraph(dTable, styles);\r

  \  let cy = g.cy;\r

  \  let nids = g.addNodes(10);\r

  \  let eids = g.addEdges(10);\r

  \  let node = g.getNodes()[0];\r

  \  node.addClass('high');\r

  \  g.cose();\r

  \  cy.style().selector('node.field').style('color', 'black');\r

  \  cy.style().selector('node.city').style('shape', 'hexagon');\r

  \  let node1 = g.getNodes()[1];\r

  \  node.addClass('city');\r

  \  node1.addClass('field');\r

  }"
gTest07: "function gTest07() {\r

  \  initTable();\r

  \  let hexPoints = [0, -1, 1, -0.5, 1, 0.5, 0, 1, -1, 0.5, -1, -0.5];\r

  \  let styles = {\r

  \    outer: { bg: 'pink', padding: 25 },\r

  \    inner: { w: 500, h: 400 },\r

  \    node: { bg: 'pink', shape: 'hex' },\r

  \    edge: { bg: 'blue' }\r

  \    //'node.field':  { shape: 'polygon', 'shape-polygon-points': hexPoints,
  w: 90, h: 100, bg: 'black', fg: 'red', fz: 40 },\r

  \  };\r

  \  let g = new UIGraph(dTable, styles);\r

  \  let cy = g.cy;\r

  \  let nids = g.addNodes(10);\r

  \  let eids = g.addEdges(10);\r

  \  let node = g.getNodes()[0];\r

  \  node.addClass('high');\r

  \  g.cose();\r

  \  cy.style().selector('node.field').style('color', 'black');\r

  \  cy.style().selector('node.city').style('shape', 'hexagon');\r

  \  let node1 = g.getNodes()[1];\r

  \  node.addClass('city');\r

  \  node1.addClass('field');\r

  }"
gTest08: "function gTest08() {\r

  \  initTable();\r

  \  let styles = {\r

  \    outer: { bg: 'pink', padding: 25 },\r

  \    inner: { w: 500, h: 400 },\r

  \    node: { bg: 'pink', shape: 'hex' },\r

  \    edge: { bg: 'green' }\r

  \  };\r

  \  let g = new UIGraph(dTable, styles);\r

  \  let nids = g.addNodes(10);\r

  \  let eids = g.addEdges(10);\r

  \  g.cose();\r

  \  g.addLayoutControls();\r

  \  let nodes = g.getNodes();\r

  \  console.log('nodes', nodes[0]);\r

  \  g.mStyle(nodes[0], { shape: 'ellipse', bg: 'black' });\r

  }"
gTest09: "function gTest09() {\r

  \  initTable();\r

  \  let [w, h] = [50, 50];\r

  \  let styles = {\r

  \    outer: { bg: 'pink', padding: 25 },\r

  \    inner: { w: 500, h: 400 },\r

  \    node: { bg: 'pink', shape: 'hex', w: w, h: h },\r

  \    edge: { bg: 'green' }\r

  \  };\r

  \  let g = new UIGraph(dTable, styles);\r

  \  let [rows, topcols] = [5, 3];\r

  \  let total = hex1Count(rows, topcols);\r

  \  console.log('for rows', rows, 'and cols', topcols, 'need', total,
  'nodes')\r

  \  let nids = g.addNodes(total);\r

  \  g.hex1(rows, topcols, w + 4, h + 4);\r

  \  let indices = hex1Indices(rows, topcols);\r

  \  console.log('indices', indices);\r

  \  let ids = g.getNodeIds();\r

  \  console.log('node ids:', ids);\r

  \  let di = {};\r

  \  for (let i = 0; i < ids.length; i++) {\r

  \    let [row, col] = [indices[i].row, indices[i].col];\r

  \    let id = ids[i];\r

  \    lookupSet(di, [row, col], id);\r

  \    g.setProp(id, 'row', row);\r

  \    g.setProp(id, 'col', col);\r

  \    g.setProp(id, 'label', `${row},${col}`);\r

  \  }\r

  \  let labels = g.getNodes().map(x => x.data().label);\r

  \  console.log('labels', labels);\r

  \  let label = g.cy.getElementById(ids[1]).data('label');\r

  \  for (let i = 0; i < ids.length; i++) {\r

  \    let [row, col] = [indices[i].row, indices[i].col];\r

  \    let id = ids[i];\r

  \    let nid2 = lookup(di, [row, col + 2]); if (nid2) g.addEdge(id, nid2);\r

  \    nid2 = lookup(di, [row + 1, col - 1]); if (nid2) g.addEdge(id, nid2);\r

  \    nid2 = lookup(di, [row + 1, col + 1]); if (nid2) g.addEdge(id, nid2);\r

  \  }\r

  \  let deg = g.getDegree(ids[1]);\r

  \  let deg1 = g.getDegree(ids[10]);\r

  \  let deg2 = g.getDegree(ids[18]);\r

  \  console.log('das geht: label', label, deg, deg1, deg2);\r

  }"
gTest10: "function gTest10() {\r

  \  initTable();\r

  \  let [rows, topcols, w, h] = [7, 10, 50, 50];\r

  \  let styles = {\r

  \    outer: { bg: 'pink', padding: 25 },\r

  \    inner: { w: 500, h: 400 },\r

  \    node: { bg: 'pink', shape: 'hex', w: w, h: h },\r

  \    edge: { bg: 'green' }\r

  \  };\r

  \  let g = hex1Board(dTable, rows, topcols, styles);\r

  }"
gTest11: "function gTest11() {\r

  \  let g = createSampleHex1();\r

  \  let ids = g.getNodeIds();\r

  \  let id = ids[0];\r

  \  console.log('size', g.getSize(id), g.cy.getElementById(id).bb());\r

  \  let n = g.cy.getElementById(id);\r

  \  n.css({ width: '40px', height: '40px' });\r

  \  g.zoom(false);\r

  \  let bb = g.cy.elements().bb();\r

  \  console.log('gesamt graph braucht:', bb)\r

  }"
gTest12: "function gTest12() {\r

  \  let g = createSampleHex1(21, 11); let ids = g.getNodeIds(); let id =
  ids[0];\r

  \  g.showExtent();\r

  }"
gTest13: "function gTest13() {\r

  \  let g = createSampleHex1(3, 2, 100, 100); let ids = g.getNodeIds(); let
  id = ids[0]; g.showExtent();\r

  \  let center = g.getProp(id, 'center');\r

  \  console.log('center prop', center);\r

  \  center = g.posDict['preset'][id];\r

  \  console.log('center', center);\r

  \  let size = g.getSize(id);\r

  \  console.log('size', size);\r

  \  let pN = { x: center.x, y: size.y1 };\r

  \  let node = g.getNode(id);\r

  \  let b = node.renderedBoundingBox();\r

  \  pN = { x: b.x1 + b.w / 2, y: b.y1 };\r

  \  let nNew = g.addNode({ width: 25, height: 25 }, pN);\r

  \  console.log('new node', nNew);\r

  \  let n1 = g.getNode(nNew);\r

  \  n1.css('background-color', 'blue');\r

  \  let st = { bg: 'red', shape: 'ellipse', w: 25, h: 25 };\r

  \  let st1 = mStyleToCy(st);\r

  \  n1.css(st1);\r

  }"
guest_update: "function guest_update() {\r

  \  assertion(isdef(Z.fen), 'no fen');\r

  \  show_status();\r

  \  let mydata = firstCond(Z.playerdata, x => x.name == Clientdata.uid);\r

  \  if (isdef(mydata) && isdef(mydata.state) && isNumber(mydata.state.green))
  {\r

  \    console.log('mydata.state', mydata.state);\r

  \    assertion(isdef(mydata.state), 'no state');\r

  \    for (const k of ['green', 'red']) {\r

  \      assertion(isNumber(mydata.state[k]), 'NAN state[' + k + ']');\r

  \      Clientdata.state[k] = Math.ceil((mydata.state[k] +
  Clientdata.state[k]) / 2);\r

  \    }\r

  \  }\r

  \  for (const k in Z.fen) {\r

  \    set_new_goal(k, Z.fen[k]);\r

  \  }\r

  \  autopoll();\r

  }"
gZone: "function gZone(d, gid, vAnchor, hAnchor, wPercent, hPercent, bg, fg) {\r

  \  let svg1 = document.createElementNS('http://www.w3.org/2000/svg',
  'svg');\r

  \  let wd = d.style.width;\r

  \  let hd = d.style.height;\r

  \  // let g1 = document.createElementNS('http://www.w3.org/2000/svg',
  'g');\r

  }"
h2rgb: "function h2rgb(h) {\r

  \  let r = Math.abs(h * 6 - 3) - 1;\r

  \  let g = 2 - Math.abs(h * 6 - 2);\r

  \  let b = 2 - Math.abs(h * 6 - 4);\r

  \  return saturate(float3(r, g, b));\r

  }"
hackPhaseAndPlayerTest: "function hackPhaseAndPlayerTest(msg) {\r

  \  testHelpers(msg);\r

  \  let res = stringAfterLast(msg, 'Beginning ');\r

  \  let phase = stringBefore(res, ' ');\r

  \  testHelpers(res, 'phase=' + phase);\r

  \  let res1 = stringAfter(res, '<br>');\r

  \  let player = stringBefore(res1, ' ');\r

  \  testHelpers(res1, 'player=' + player);\r

  }"
hallo: "function hallo(control, map) {\r

  \  control.on('routeselected', function (e) {\r

  \    var coord = e.route.coordinates;\r

  \    var instr = e.route.instructions;\r

  \    L.geoJson(getInstrGeoJson(instr, coord)).addTo(map);\r

  \  });\r

  }"
halloIchZeichneJetzt: "function halloIchZeichneJetzt() {\r

  \  let isDrawing = false;\r

  \  let x = 0;\r

  \  let y = 0;\r

  \  const canvas = document.getElementById('sheet');\r

  \  let r = getRect(G.clientBoard.dOuter); r.left = r.x; r.top = r.y;\r

  \  console.log('rectBoard', r);\r

  \  canvas.width = r.w;\r

  \  canvas.height = r.h;\r

  \  var context = canvas.getContext('2d');\r

  \  canvas.onmousedown = e => {\r

  \    x = e.offsetX;\r

  \    y = e.offsetY;\r

  \    isDrawing = true;\r

  \  };\r

  \  canvas.onmousemove = e => {\r

  \    if (isDrawing === true) {\r

  \      drawLine(context, x, y, e.offsetX, e.offsetY);\r

  \      x = e.offsetX;\r

  \      y = e.offsetY;\r

  \    }\r

  \  };\r

  \  canvas.onmouseup = e => {\r

  \    if (isDrawing === true) {\r

  \      drawLine(context, x, y, e.offsetX, e.offsetY);\r

  \      x = 0;\r

  \      y = 0;\r

  \      isDrawing = false;\r

  \    }\r

  \  };\r

  \  var socket = io();\r

  \  socket.on('update_canvas', function (data) {\r

  \    let { x1, y1, x2, y2, color } = JSON.parse(data);\r

  \    drawLine(context, x1, y1, x2, y2, color, true);\r

  \  });\r

  \  function drawLine(context, x1, y1, x2, y2, color = selected_color,
  from_server = false) {\r

  \    if (!from_server)\r

  \      socket.emit('update_canvas', JSON.stringify({ x1, y1, x2, y2, color
  }));\r

  \    context.beginPath();\r

  \    context.strokeStyle = color;\r

  \    context.lineWidth = 5;\r

  \    context.lineCap = 'round'\r

  \    context.moveTo(x1, y1);\r

  \    context.lineTo(x2, y2);\r

  \    context.stroke();\r

  \    context.closePath();\r

  \  }\r

  }"
hand_select: "function hand_select() {\r

  \  let res = prompt('enter player names: ');\r

  \  let parts = splitAtAnyOf(res, ' ,');\r

  \  let list = [];\r

  \  for (const p of parts) {\r

  \    let name = p.toLowerCase().trim();\r

  \    if (isdef(DB.users[name])) addIf(list, name);\r

  \  }\r

  \  list.sort(); list.unshift(Session.cur_user);\r

  \  populate_players(list);\r

  }"
handLayout: "function handLayout(n, R) {\r

  \  let uis = n.children.map(x => R.uiNodes[x].ui);\r

  \  let area = n.uid;\r

  \  let ch0 = R.uiNodes[n.children[0]];\r

  \  let size = ch0.params.size;\r

  \  console.log('I am in handLayout!!!!!!!!!!!!!!')\r

  \  if (nundef(size)) size = { w: 70, h: 110 };\r

  \  let [w, h, gap] = [size.w, size.h, 4];\r

  \  if (isEmpty(uis)) return [0, 0];\r

  \  let x = y = gap;\r

  \  let ov = n.params.overlap;\r

  \  ov /= 100;\r

  \  if (nundef(ov) || isNaN(ov)) ov = .20;\r

  \  let overlap = ov * w;\r

  \  let dParent = mBy(area);\r

  \  dParent.style.position = 'relative';\r

  \  console.log('_______________', x, y, gap, w, ov)\r

  \  uis.map(d => {\r

  \    mAppend(dParent, d);\r

  \    d.style.position = 'absolute';\r

  \    d.style.borderRadius = '12px';\r

  \    d.style.padding = '4px';\r

  \    mPos(d, x, y);\r

  \    x += overlap;\r

  \  });\r

  \  let sz = { w: x - overlap + w + gap, h: y + h + gap };\r

  \  console.log('x', x, 'w', w, 'y', y, 'h', h, 'gap', gap, 'sz', sz)\r

  \  dParent.style.minHeight = (sz.h) + 'px';\r

  \  dParent.style.minWidth = (sz.w) + 'px';\r

  \  return sz;\r

  }"
handLayout_Wrapper: "function handLayout_Wrapper(n, R) {\r

  \  let uis = n.children.map(x => R.uiNodes[x].ui.parentNode);\r

  \  let area = n.uid;\r

  \  let ch0 = R.uiNodes[n.children[0]];\r

  \  let size = ch0.params.size;\r

  \  let [w, h, gap] = [size.w, size.h, 4];\r

  \  if (isEmpty(uis)) return [0, 0];\r

  \  let x = y = gap;\r

  \  let ov = n.params.overlap / 100;\r

  \  if (nundef(ov)) ov = .20;\r

  \  console.log('overlap', ov, n.params);\r

  \  let overlap = .1 * w;\r

  \  let dParent = mBy(area);\r

  \  dParent.style.position = 'relative';\r

  \  uis.map(d => {\r

  \    mAppend(dParent, d);\r

  \    d.style.position = 'absolute';\r

  \    mPos(d, x, y);\r

  \    x += overlap;\r

  \  });\r

  \  let sz = { w: x - overlap + w + gap, h: y + h + gap };\r

  \  console.log('x', x, 'w', w, 'y', y, 'h', h, 'gap', gap, 'sz', sz)\r

  \  dParent.style.minHeight = (sz.h) + 'px';\r

  \  dParent.style.minWidth = (sz.w) + 'px';\r

  \  return sz;\r

  }"
handle_bid: "function handle_bid() {\r

  \  let [z, A, fen, uplayer, ui] = [Z, Z.A, Z.fen, Z.uplayer, UI];\r

  \  let oldbid = jsCopy(fen.oldbid);\r

  \  let bid = jsCopy(fen.newbid);\r

  \  let ranks = '23456789TJQKA';\r

  \  bid = normalize_bid(bid);\r

  \  let higher = is_bid_higher_than(bid, oldbid);\r

  \  if (bid[2] == 0) bid[2] = '_';\r

  \  if (!higher) {\r

  \    select_error('the bid you entered is not high enough!');\r

  \  } else {\r

  \    fen.lastbid = fen.players[uplayer].lastbid = bid;\r

  \    fen.lastbidder = uplayer;\r

  \    delete fen.oldbid; delete fen.newbid;\r

  \    Z.turn = [get_next_player(Z, uplayer)];\r

  \    take_turn_fen();\r

  \  }\r

  }"
handle_command: "function handle_command(cmd) {\r

  \  switch (cmd) {\r

  \    case 'clear': G.selist = clear_select(G.selist); toolbar_check();
  break;\r

  \    case 'next': push_hist(); inc_g_index(); break;\r

  \    case 'back': pop_hist(); dec_g_index(); break;\r

  \    default: console.log('do not know how to handle ***', cmd, '***');
  break;\r

  \  }\r

  \  console.log('history', G.hist)\r

  \  console.log('current selection', G.selist.map(x => x.name));\r

  }"
handle_connect: function handle_connect(id) { console.log('connected', id);
  io.emit('message', 'someone logged in!'); }
handle_disconnect: function handle_disconnect(x) { console.log('disconnected',
  x); io.emit('message', x); }
handle_drag_and_drop: "function handle_drag_and_drop(e) {\r

  \  if (e.type == \"dragover\") {\r

  \    e.preventDefault();\r

  \    mClass(e.target, \"dragging\");\r

  \  } else if (e.type == \"dragleave\") {\r

  \    mClassRemove(e.target, \"dragging\");\r

  \  } else if (e.type == \"drop\") {\r

  \    let target = e.target;\r

  \    let id = target.id;\r

  \    mClassRemove(e.target, \"dragging\");\r

  \    console.log('===>dropped on target:', e.target);\r

  \    e.preventDefault();\r

  \    DA.imageChanged = true;\r

  \    mClassRemove(e.target, \"dragging\");\r

  \    mDropImage(e, e.target);\r

  \  } else {\r

  \    mClassRemove(e.target, \"dragging\");\r

  \  }\r

  }"
handle_gamestate: "function handle_gamestate(gamestate) {\r

  \  if (!in_game_screen) {\r

  \    return;\r

  \  }\r

  \  gamestate = JSON.parse(gamestate);\r

  \  requestAnimationFrame(() => paint_game(gamestate));\r

  }"
handle_gehtHoch: "function handle_gehtHoch() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  let [bid, bidder] = [fen.lastbid, fen.lastbidder];\r

  \  let diff = calc_bid_minus_cards(fen, bid);\r

  \  let aufheber = uplayer;\r

  \  let loser = diff > 0 ? bidder : aufheber;\r

  \  let war_drin = fen.war_drin = diff <= 0;\r

  \  let loser_handsize = inc_handsize(fen, loser);\r

  \  new_deal(fen);\r

  \  let nextplayer;\r

  \  if (loser_handsize > Z.options.max_handsize) {\r

  \    nextplayer = get_next_player(Z, loser)\r

  \    let plorder = fen.plorder = remove_player(fen, loser);\r

  \  } else {\r

  \    nextplayer = loser;\r

  \  }\r

  \  fen.loser = loser; fen.bidder = bidder; fen.aufheber = aufheber;\r

  \  bluff_change_to_ack_round(fen, nextplayer);\r

  \  take_turn_fen();\r

  }"
handle_message: "function handle_message(x) {\r

  \  console.log('from server:', x.msg);\r

  }"
handle_result: "function handle_result(result, cmd) {\r

  \  if (verbose) console.log('cmd', cmd, '\\nresult', result);\r

  \  if (result.trim() == \"\") return;\r

  \  let obj;\r

  \  try { obj = JSON.parse(result); } catch { console.log('ERROR:', result);
  }\r

  \  if (Clientdata.AUTORESET) { Clientdata.AUTORESET = false; if (result.auto
  == true) { console.log('message bounced'); return; } }\r

  \  DA.result = jsCopy(obj);\r

  \  processServerdata(obj, cmd);\r

  \  switch (cmd) {\r

  \    case \"assets\": load_assets(obj); start_with_assets(); break;\r

  \    case \"users\": show_users(); break;\r

  \    case \"tables\": show_tables(); break;\r

  \    case \"delete_table\":\r

  \    case \"delete_tables\": show_tables(); break;\r

  \    case \"table1\":\r

  \      update_table();\r

  \      console.log('cmd', cmd)\r

  \      console.log('obj', obj)\r

  \      for (const k in obj) { if (isLiteral(obj[k])) { console.log(k,
  obj[k]); } }\r

  \      clear_timeouts();\r

  \      gamestep();\r

  \      break;\r

  \    case \"gameover\":\r

  \    case \"table\":\r

  \    case \"startgame\":\r

  \      update_table();\r

  \      if (Z.skip_presentation) { Z.func.state_info(mBy('dTitleLeft'));
  autopoll(); return; }\r

  \      clear_timeouts();\r

  \      gamestep();\r

  \      break;\r

  \  }\r

  }"
handle_result_orig: "function handle_result_orig(result, type) {\r

  \  if (result.trim() == \"\") return;\r

  \  var obj = JSON.parse(result);\r

  \  if ('contacts chats games play account'.includes(type)) Session.cur_menu
  = type;\r

  \  switch (obj.data_type) {\r

  \    case \"user_info\":\r

  \      ensure_assets_old(obj);\r

  \      start_with_basic_assets();\r

  \      break;\r

  \    case \"contacts\":\r

  \      var inner_left_panel = mBy(\"inner_left_panel\");\r

  \      inner_left_panel.innerHTML = createContactsContent(obj.myusers,
  obj.msgs);\r

  \      Session.others = obj.myusers.map(x => x.id);\r

  \      for (const u of obj.myusers) { add_live_user(u); }\r

  \      break;\r

  \    case \"games\":\r

  \      ensure_assets(obj);\r

  \      mBy('inner_left_panel').innerHTML =
  createGamesContent(dict2list(DB.games), obj.tables);\r

  \      mCenterCenterFlex(mBy('game_menu'));\r

  \      break;\r

  \    case \"chats\":\r

  \      if (isEmpty(Session.cur_chatter)) Session.cur_chatter =
  obj.other.username;\r

  \      console.log('CURRENT_CHAT_USER', Session.cur_chatter);\r

  \      SEEN_STATUS = false;\r

  \      var inner_left_panel = mBy(\"inner_left_panel\");\r

  \      inner_left_panel.innerHTML = obj.mydata;\r

  \      inner_left_panel.innerHTML = createMessageContent(obj.messages,
  obj.me, obj.other);\r

  \      var messages_holder = mBy(\"messages_holder\");\r

  \      setTimeout(function () {\r

  \        messages_holder.scrollTo(0, messages_holder.scrollHeight);\r

  \        var message_text = mBy(\"message_text\");\r

  \        message_text.focus();\r

  \      }, 100);\r

  \      break;\r

  \    case \"play\":\r

  \      ensure_assets(obj);\r

  \      game_resume_or_start();\r

  \      break;\r

  \    case 'account':\r

  \      mBy(\"inner_left_panel\").innerHTML = is_online() ?
  createAccountContent(obj.message) : createAccountContentNoDD(obj.message);\r

  \      break;\r

  \    case \"send_message\":\r

  \      sent_audio.play();\r

  \      get_chat();\r

  \      break;\r

  \    case \"dbsave\":\r

  \      break;\r

  \    case \"send_image\":\r

  \      alert(obj.message);\r

  \      get_chat();\r

  \      break;\r

  \    case \"chats_refresh\":\r

  \      SEEN_STATUS = false;\r

  \      var messages_holder = mBy(\"messages_holder\");\r

  \      messages_holder.innerHTML = obj.messages;\r

  \      if (typeof obj.new_message != 'undefined') {\r

  \        if (obj.new_message) {\r

  \          received_audio.play();\r

  \          setTimeout(function () {\r

  \            messages_holder.scrollTo(0, messages_holder.scrollHeight);\r

  \            var message_text = mBy(\"message_text\");\r

  \            message_text.focus();\r

  \          }, 100);\r

  \        }\r

  \      }\r

  \      break;\r

  \    case 'save_account':\r

  \      throw (\"NEEEEEEEEEEEEEEEEEIIIIIIIIIIIIIIIIIIIIIIIIIN\");\r

  \      if (obj.changed) window.location = \"index.html?user=\" +
  obj.message.username;\r

  \      else console.log('STILL SAME USERNAME', obj.message.username);\r

  \      break;\r

  \  }\r

  }"
handle_settings: "function handle_settings(x) {\r

  \  console.log('message from server:', x.msg);\r

  \  settings = x.settings;\r

  \  defaults = x.defaults;\r

  \  console.log('settings:', settings);\r

  \  console.log('defaults:', defaults);\r

  }"
handle_update: function handle_update(x) { console.log('got update', x);
  io.emit('update', x); }
handleAction: "function handleAction(x) {\r

  \  return [[x]];\r

  }"
handleClientIdSendLogin: "function handleClientIdSendLogin(data) {\r

  \  logClientReceive('clientId', data);\r

  \  ClientId = data.clientId;\r

  \  sendLogin(valf(Username, 'hansi'));\r

  }"
handleDB: "function handleDB(data) {\r

  \  DB = data.DB;\r

  \  setUserData(Username);\r

  \  enterLobby();\r

  }"
handleDbUpdate: function handleDbUpdate(data) { logClientReceive('dbUpdate',
  data); DB.standardSettings = data.standardSettings; }
handleGameCode: "function handleGameCode(gameCode) {\r

  \  gameCodeDisplay.innerText = gameCode;\r

  }"
handleGameOver: "function handleGameOver(data) {\r

  \  if (!gameActive) {\r

  \    return;\r

  \  }\r

  \  data = JSON.parse(data);\r

  \  gameActive = false;\r

  \  if (data.winner === playerNumber) {\r

  \    alert('You Win!');\r

  \  } else {\r

  \    alert('You Lose :(');\r

  \  }\r

  }"
handleGameState: function handleGameState(data) { logClientReceive('gameState',
  data); G.presentGameState(data); }
handleHide: function handleHide(data) { hideMouseAvatar(data.username); }
handleInitialPosition: "function handleInitialPosition(data) {\r

  \  console.log('initial position:', data);\r

  }"
handleListOfConstants: "function handleListOfConstants(lst, n1, area, R) {\r

  \  for (const oid1 of lst) {\r

  \    let o1 = R.getO(oid1);\r

  \    let key = keysForOids[oid1];\r

  \    let ntree, nui;\r

  \    ntree = instantOidKey(oid1, key, n1.uid, R);\r

  \    nui = recUi(ntree, n1.uid, R, oid1, key);\r

  \  }\r

  }"
handleListOfObjectIds: "function handleListOfObjectIds(lst, n1, area, R) {\r

  \  createPanelParentOfObjects(lst, n1, area, R);\r

  \  let keysForOids = findOrCreateKeysForObjTypes(lst, R);\r

  \  for (const oid1 of lst) {\r

  \    let o1 = R.getO(oid1);\r

  \    let key = keysForOids[oid1];\r

  \    let ntree, nui;\r

  \    ntree = instantOidKey(oid1, key, n1.uid, R);\r

  \    nui = recUi(ntree, R, n1.uid, oid1, key);\r

  \  }\r

  }"
handleMessage: "function handleMessage(data) {\r

  \  if (isdef(data.data)) data = data.data;\r

  \  logClientReceive('userMessage', data);\r

  \  if (isString(data)) {\r

  \    data.type = messageTypes.LEFT;\r

  \  } else if (data.author === U.username) {\r

  \    data.type = messageTypes.RIGHT;\r

  \  } else {\r

  \    data.type = messageTypes.LEFT;\r

  \  }\r

  \  messages.push(data);\r

  \  displayMessages();\r

  \  let chatWindow = mBy('dLobby')\r

  \  chatWindow.scrollTop = chatWindow.scrollHeight;\r

  }"
handleMouse: "function handleMouse(data) {\r

  \  let [x, y] = [data.x, data.y];\r

  \  x += $('#dFieldArea').offset().left - $(window).scrollLeft();\r

  \  y += $('#dFieldArea').offset().top - $(window).scrollTop();\r

  \  moveAvatar(data.username, x, y);\r

  }"
handleSet: "function handleSet(x) {\r

  \  let irgend = x.map(expand1_99);\r

  \  let res = stripSet(irgend);\r

  \  return res;\r

  }"
handleShow: function handleShow(data) { showMouseAvatar(data.username); }
handleTooManyPlayers: "function handleTooManyPlayers() {\r

  \  reset();\r

  \  alert('This game is already in progress');\r

  }"
handleTuple: "function handleTuple(x) {\r

  \  let irgend = x.map(expand1_99);\r

  \  return multiCartesi(...irgend);\r

  }"
handleUnknownCode: "function handleUnknownCode() {\r

  \  reset();\r

  \  alert('Unknown Game Code')\r

  }"
handleUserJoined: "function handleUserJoined(data) {\r

  \  logClientReceive('userJoined', data.username)\r

  }"
handleUserLeft: "function handleUserLeft(data) {\r

  \  logClientReceive('userLeft', data.id)\r

  }"
handleUserMessage: "function handleUserMessage(data) {\r

  \  logClientReceive('userMessage', data.username);\r

  }"
has_at_most_n_jolly: function has_at_most_n_jolly(j, n = 1) { return j.filter(x
  => is_jolly(x)).length <= n; }
has_farm: function has_farm(uname) { return
  firstCond(UI.players[uname].buildinglist, x => x.type == 'farm'); }
has_jolly: function has_jolly(j) { return firstCond(j, x => is_jolly(x)); }
has_schweine: function has_schweine(fenbuilding) { return !isEmpty(fenbuilding.schweine); }
hasChildren: "function hasChildren(n) {\r

  \  let ch = RCONTAINERPROP[n.type];\r

  \  if (nundef(ch)) ch = 'ch';\r

  \  return isdef(n[ch]);\r

  }"
hasClickedUI: function hasClickedUI() { uiPaused |= hasClickedMask; }
hasDuplicate: "function hasDuplicate(arr, efunc) {\r

  \  let di = {};\r

  \  if (nundef(efunc)) efunc = x => { return x === ' ' };\r

  \  let i = -1;\r

  \  for (const a of arr) {\r

  \    i += 1;\r

  \    if (efunc(a)) continue;\r

  \    if (a in di) return { i: i, val: a };\r

  \    di[a] = true;\r

  \  }\r

  \  return false;\r

  }"
HASH_CA: function HASH_CA() { brd_posKey ^= CastleKeys[brd_castlePerm]; }
HASH_EP: function HASH_EP() { brd_posKey ^= PieceKeys[brd_enPas]; }
HASH_PCE: function HASH_PCE(pce, sq) { brd_posKey ^= PieceKeys[pce * 120 + sq]; }
HASH_SIDE: function HASH_SIDE() { brd_posKey ^= SideKey; }
hasId: function hasId(o) { return isdef(o._id); }
hasSameProps: "function hasSameProps(o1, o2) {\r

  \  let diff = propDiff(o1, o2);\r

  \  return !diff.hasChanged;\r

  }"
hasWhiteSpace: function hasWhiteSpace(s) { return /\s/g.test(s); }
helleFarbe: "function helleFarbe(contrastTo, minDiff = 25, mod = 30, start = 0)
  {\r

  \  let wheel = getHueWheel(contrastTo, minDiff, mod, start);\r

  \  let hue = chooseRandom(wheel);\r

  \  let hsl = colorHSLBuild(hue, 100, 50);\r

  \  return hsl;\r

  }"
hex1Board: "function hex1Board(dParent, rows, topcols, styles = {}) {\r

  \  let g = new UIGraph(dParent, styles);\r

  \  let [w, h] = [valf(lookup(styles, ['node', 'w']), 50),
  valf(lookup(styles, ['node', 'h']), 50)];\r

  \  let total = hex1Count(rows, topcols);\r

  \  let nids = g.addNodes(total);\r

  \  g.hex1(rows, topcols, w + 4, h + 4);\r

  \  let indices = hex1Indices(rows, topcols);\r

  \  let ids = g.getNodeIds();\r

  \  let di = {};\r

  \  for (let i = 0; i < ids.length; i++) {\r

  \    let [row, col] = [indices[i].row, indices[i].col];\r

  \    let id = ids[i];\r

  \    lookupSet(di, [row, col], id);\r

  \    g.setProp(id, 'row', row);\r

  \    g.setProp(id, 'col', col);\r

  \    g.setProp(id, 'label', `${row},${col}`);\r

  \  }\r

  \  for (let i = 0; i < ids.length; i++) {\r

  \    let [row, col] = [indices[i].row, indices[i].col];\r

  \    let id = ids[i];\r

  \    let nid2 = lookup(di, [row, col + 2]); if (nid2) g.addEdge(id, nid2);\r

  \    nid2 = lookup(di, [row + 1, col - 1]); if (nid2) g.addEdge(id, nid2);\r

  \    nid2 = lookup(di, [row + 1, col + 1]); if (nid2) g.addEdge(id, nid2);\r

  \  }\r

  \  let byrc = {};\r

  \  for (const r in di) {\r

  \    byrc[r] = {};\r

  \    for (const c in di[r]) {\r

  \      byrc[r][c] = g.getNode(di[r][c]).data();\r

  \    }\r

  \  }\r

  \  g.di = di;\r

  \  g.byrc = byrc;\r

  \  g.rc = (i, j, f) => (isdef(f)) ? f(g.getNode(di[i][j])) :
  g.getNode(di[i][j]);\r

  \  return g;\r

  }"
hex1Centers: "function hex1Centers(rows, cols, wCell = 100, hCell = null) {\r

  \  let colarr = _calc_hex_col_array(rows, cols);\r

  \  let maxcols = arrMax(colarr);\r

  \  if (nundef(hCell)) hCell = (hCell / .866);\r

  \  let hline = hCell * .75;\r

  \  let offX = wCell / 2, offY = hCell / 2;\r

  \  let centers = [];\r

  \  let x = 0; y = 0;\r

  \  for (let r = 0; r < colarr.length; r++) {\r

  \    let n = colarr[r];\r

  \    for (let c = 0; c < n; c++) {\r

  \      let dx = (maxcols - n) * wCell / 2;\r

  \      let dy = r * hline;\r

  \      let center = { x: dx + c * wCell + offX, y: dy + offY };\r

  \      centers.push(center);\r

  \    }\r

  \  }\r

  \  return [centers, wCell * maxcols, hCell / 4 + rows * hline];\r

  }"
hex1Count: "function hex1Count(rows, topcols) {\r

  \  let colarr = _calc_hex_col_array(rows, topcols);\r

  \  let total = 0;\r

  \  for (let r = 0; r < colarr.length; r++) { total += colarr[r]; }\r

  \  return total;\r

  }"
hex1Indices: "function hex1Indices(rows, topcols) {\r

  \  let colarr = _calc_hex_col_array(rows, topcols);\r

  \  let iStart = Math.floor(rows / 2);\r

  \  let inc = -1;\r

  \  let res = [];\r

  \  for (let r = 0; r < colarr.length; r++) {\r

  \    let n = colarr[r];\r

  \    for (let c = 0; c < n; c++) {\r

  \      let icol = iStart + 2 * c;\r

  \      let irow = r;\r

  \      res.push({ row: irow, col: icol });\r

  \    }\r

  \    if (iStart == 0) inc = 1;\r

  \    iStart += inc;\r

  \  }\r

  \  return res;\r

  }"
hex2rgb: "function hex2rgb(hex) {\r

  \  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r

  \  result = result\r

  \    ? {\r

  \      r: parseInt(result[1], 16),\r

  \      g: parseInt(result[2], 16),\r

  \      b: parseInt(result[3], 16)\r

  \    }\r

  \    : null;\r

  \  if (result) return `rgb(${result.r},${result.g},${result.b})`;\r

  \  else return 'rgb(0,0,0)';\r

  }"
hexAToHSLA: "function hexAToHSLA(H) {\r

  \  let ex = /^#([\\da-f]{4}){1,2}$/i;\r

  \  if (ex.test(H)) {\r

  \    let r = 0,\r

  \      g = 0,\r

  \      b = 0,\r

  \      a = 1;\r

  \    if (H.length == 5) {\r

  \      r = '0x' + H[1] + H[1];\r

  \      g = '0x' + H[2] + H[2];\r

  \      b = '0x' + H[3] + H[3];\r

  \      a = '0x' + H[4] + H[4];\r

  \    } else if (H.length == 9) {\r

  \      r = '0x' + H[1] + H[2];\r

  \      g = '0x' + H[3] + H[4];\r

  \      b = '0x' + H[5] + H[6];\r

  \      a = '0x' + H[7] + H[8];\r

  \    }\r

  \    r /= 255;\r

  \    g /= 255;\r

  \    b /= 255;\r

  \    let cmin = Math.min(r, g, b),\r

  \      cmax = Math.max(r, g, b),\r

  \      delta = cmax - cmin,\r

  \      h = 0,\r

  \      s = 0,\r

  \      l = 0;\r

  \    if (delta == 0) h = 0;\r

  \    else if (cmax == r) h = ((g - b) / delta) % 6;\r

  \    else if (cmax == g) h = (b - r) / delta + 2;\r

  \    else h = (r - g) / delta + 4;\r

  \    h = Math.round(h * 60);\r

  \    if (h < 0) h += 360;\r

  \    l = (cmax + cmin) / 2;\r

  \    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r

  \    s = +(s * 100).toFixed(1);\r

  \    l = +(l * 100).toFixed(1);\r

  \    a = (a / 255).toFixed(3);\r

  \    return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\r

  \  } else {\r

  \    return 'Invalid input color';\r

  \  }\r

  }"
hexBoard: "function hexBoard(dParent, rows = 13, cols = 5, wHex = 100) {\r

  \  let hline = (wHex / .866) * .75;\r

  \  dParent = mDiv(dParent, { position: 'relative', w: wHex * cols, h: hline
  * (rows + .5), display: 'inline-block' });\r

  \  let hlist = [];\r

  \  let xOffset = 0;\r

  \  for (let r = 0; r < rows; r++) {\r

  \    let curCols = r % 2 ? cols - 1 : cols;\r

  \    let dx = r % 2 ? wHex / 2 : 0;\r

  \    dx += xOffset;\r

  \    for (let c = 0; c < curCols; c++) {\r

  \      let [dOuter, dInner] = oneHex(dParent, wHex, wHex, '#ffffff10');\r

  \      mStyleX(dOuter, { position: 'absolute', left: dx + c * wHex, top: r *
  hline });\r

  \      hlist.push(dInner);\r

  \    }\r

  \  }\r

  \  function oneHex(dParent, w, h, bg) {\r

  \    let d1 = mDiv(dParent, { w: w, h: h, display: 'inline', position:
  'relative' });\r

  \    let d2 = mDiv(d1, { w: w, h: h, display: 'inline', position:
  'absolute', left: 0, top: 0 });\r

  \    let g = aSvgg(d2);\r

  \    let wgap = 8, hgap = 0;\r

  \    let hex1 = agShape(g, 'hex', w - 2 * wgap, h - 2 * hgap, bg);\r

  \    let offx = 16;\r

  \    let offy = 20;\r

  \    let d3 = mDiv(d1, { w: w, h: h, display: 'inline', position:
  'absolute', left: 0, top: 0 });\r

  \    let d4 = mDiv(d3, { left: `${offx / 2}%`, top: `${offy / 2}%`, w:
  `${100 - offx}%`, h: `${100 - offy}%`, rounding: '50%', display: 'inline',
  position: 'absolute' });\r

  \    return [d1, d4];\r

  \  }\r

  \  return hlist;\r

  }"
hexBoardNO: "function hexBoardNO(dParent, rows = 3, cols = 5, sz = 100) {\r

  \  let hline = (sz / .866) * .75;\r

  \  dParent = mDiv(dParent, { position: 'relative', w: sz * cols, h: hline *
  (rows + .5), display: 'inline-block' });\r

  \  let fields = [];\r

  \  for (let r = 0; r < rows; r++) {\r

  \    let curCols = r % 2 ? cols - 1 : cols;\r

  \    let dx = r % 2 ? sz / 2 : 0;\r

  \    for (let c = 0; c < curCols; c++) {\r

  \      let [dOuter, dInner] = oneHex(dParent, sz, sz, 'yellow');\r

  \      mStyleX(dOuter, { position: 'absolute', left: dx + c * sz, top: r *
  hline });\r

  \      fields.push(dInner);\r

  \    }\r

  \    return fields;\r

  \  }\r

  \  function oneHex(dParent, w, h, bg) {\r

  \    let d1 = mDiv(dParent, { w: w, h: h, display: 'inline', position:
  'relative' });\r

  \    let d2 = mDiv(d1, { w: w, h: h, display: 'inline', position:
  'absolute', left: 0, top: 0 });\r

  \    let g = aSvgg(d2);\r

  \    let wgap = 8, hgap = 0;\r

  \    let hex1 = agShape(g, 'hex', w - 2 * wgap, h - 2 * hgap, bg);\r

  \    let offx = 16;\r

  \    let offy = 20;\r

  \    let d3 = mDiv(d1, { w: w, h: h, rounding: '50%', display: 'inline',
  position: 'absolute', left: 0, top: 0 });\r

  \    let d4 = mDiv(d3, { left: `${offx / 2}%`, top: `${offy / 2}%`, w:
  `${100 - offx}%`, h: `${100 - offy}%`, rounding: '50%', bg: 'random', display:
  'inline', position: 'absolute' });\r

  \    return [d1, d4];\r

  \  }\r

  }"
hexBoardTests: "function hexBoardTests() {\r

  \  let w = window.innerWidth;\r

  \  let sz = 100;\r

  \  let cols = math.floor(w / 100);\r

  \  let dBoard = mDiv(dTable);\r

  \  mCenterFlex(dTable);\r

  \  hexBoard(dBoard, 5, cols - 1, 100);\r

  }"
hexCenters: "function hexCenters(rows, cols, wCell = 100, hCell) {\r

  \  if (nundef(hCell)) hCell = (hCell / .866);\r

  \  let hline = hCell * .75;\r

  \  let offX = wCell / 2, offY = hCell / 2;\r

  \  let centers = [];\r

  \  let startSmaller = Math.floor(rows / 2) % 2 == 1;\r

  \  let x = 0; y = 0;\r

  \  for (let r = 0; r < rows; r++) {\r

  \    let isSmaller = startSmaller && r % 2 == 0 || !startSmaller && r % 2 ==
  1;\r

  \    let curCols = isSmaller ? cols - 1 : cols;\r

  \    let dx = isSmaller ? wCell / 2 : 0;\r

  \    dx += offX;\r

  \    for (let c = 0; c < curCols; c++) {\r

  \      let center = { x: dx + c * wCell, y: offY + r * hline };\r

  \      centers.push(center);\r

  \    }\r

  \  }\r

  \  return [centers, wCell * cols, hCell / 4 + rows * hline];\r

  }"
hexCornerNodes: "function hexCornerNodes(g) {\r

  \  let nodes = g.getNodes();\r

  \  let centers = nodes.map(x => x.data('center'));\r

  \  let vertices = getCornerVertices(centers);\r

  \  for (const f of nodes) {\r

  \    let center = f.data('center');\r

  \    console.log('center', center)\r

  \  }\r

  }"
hexDigitToDecimal: "function hexDigitToDecimal(hex) {\r

  \  let n = firstNumber(hex);\r

  \  if (nundef(n)) {\r

  \    hex = hex.toLowerCase();\r

  \    return hex == 'f' ? 15 : hex == 'e' ? 14 : hex == 'd' ? 13 : hex == 'c'
  ? 12 : hex == 'b' ? 11 : 10;\r

  \  } else return n;\r

  }"
hexgrid: "function hexgrid(id, rows, topcols, wFieldTotal, wFieldGap = 4, ipal =
  2, visibility = ['board', 'fields'], interactivity = 'hover') {\r

  \  visualStructures[id] = [];\r

  \  rows = rows % 2 != 0 ? rows : rows + 1;\r

  \  let cols = topcols;\r

  \  let colarr = calc_hex_col_array(rows, cols);\r

  \  let maxcols = Math.max(...colarr);\r

  \  let wField = wFieldTotal;\r

  \  let hField = (2 * wField) / 1.73;\r

  \  let w = wField * maxcols;\r

  \  let h = hField * rows * 0.75 + hField / 4;\r

  \  let ilist = [];\r

  \  let clist = [];\r

  \  let fields = {};\r

  \  let imiddleRow = (rows - 1) / 2;\r

  \  for (let irow = 0; irow < colarr.length; irow++) {\r

  \    let colstart = maxcols - colarr[irow];\r

  \    fields[irow] = {};\r

  \    let y = hField * 0.75 * (irow - imiddleRow);\r

  \    for (let j = 0; j < colarr[irow]; j++) {\r

  \      var icol = colstart + 2 * j;\r

  \      let x = (icol * wField) / 2 + wField / 2 - w / 2;\r

  \      ilist.push({ row: irow, col: icol });\r

  \      clist.push({ x: x, y: y });\r

  \      fields[irow][icol] = { x: x, y: y };\r

  \      x += wField;\r

  \    }\r

  \  }\r

  \  for (option of visibility) {\r

  \    if (option == 'board') {\r

  \      let msField = new MS(id, 'g')\r

  \        .setbg(getpal(ipal))\r

  \        .rect({ w: w + 4, h: h + 4 })\r

  \        .draw();\r

  \      msField.tag('layout', 'hex');\r

  \      msField.tag('points', fields);\r

  \      visualStructures[id].push(msField);\r

  \    }\r

  \    ipal += 1;\r

  \    if (option == 'fields') {\r

  \      for (const r in fields) {\r

  \        let polyRow = fields[r];\r

  \        for (const c in polyRow) {\r

  \          let field = fields[r][c];\r

  \          let msField = visual('hex', { id: id + '_' + r + '_' + c, w:
  wField - wFieldGap, x: field.x, y: field.y }).setbg(getpal(ipal));\r

  \          msField.tag('row', r);\r

  \          msField.tag('col', c);\r

  \          fields[r][c].ms = msField;\r

  \          visualStructures[id].push(msField);\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  return (r, c) => {\r

  \    testHexgrid(r, c);\r

  \    return {\r

  \      x: fields[r][c] ? fields[r][c].x : null,\r

  \      y: fields[r][c] ? fields[r][c].y : null,\r

  \      id: id\r

  \    };\r

  \  };\r

  }"
hexGrid: "function hexGrid(soDict, loc, condList) {\r

  \  let [idBoard, sBoard] = findMatch(soDict, condList);\r

  \  return _hexGrid(loc, idBoard, sBoard, soDict);\r

  }"
hexGrid_old: "function hexGrid_old(soDict, loc, sBoard, idBoard) {\r

  \  let res = _hexGrid(loc, idBoard, sBoard, soDict);\r

  \  timit.showTime('old hexGrid done!');\r

  \  return res;\r

  }"
hexStringToDecimal: "function hexStringToDecimal(hex) {\r

  \  let len = hex.length;\r

  \  let fact = 1;\r

  \  let num = 0;\r

  \  for (let i = len - 1; i >= 0; i--) {\r

  \    num += hexDigitToDecimal(hex[i]) * fact;\r

  \    fact *= 16;\r

  \  }\r

  \  return num;\r

  }"
hextest: "function hextest() {\r

  \  let [centers, wCont, hCont] = hexCenters(5, 4, 100, 100);\r

  \  console.log('centers', centers);\r

  \  let dCont = mDiv(dMain, { position: 'relative', w: wCont, h: hCont });\r

  \  for (const pt of centers) {\r

  \    let d = drawShape('hex', dCont);\r

  \    mCenterAt(d, pt.x, pt.y);\r

  \  }\r

  \  return dCont;\r

  }"
hexTest00: "function hexTest00() {\r

  \  let dParent = dTable;\r

  \  let styles = { margin: 3 };\r

  \  styles = { padding: 4 };\r

  \  let h1 = mHex00(dParent, styles);\r

  }"
hexTest01: "function hexTest01() {\r

  \  let dParent = dTable;\r

  \  let styles = { margin: 3 };\r

  \  styles = { padding: 4 };\r

  \  let h1 = mHex01(dParent, styles);\r

  \  let h2 = mHex01(dParent, styles);\r

  }"
hexTest02: "function hexTest02() {\r

  \  let dParent = dTable;\r

  \  dParent = mDiv(dTable, { bg: 'random', w: 800, h: 500 });\r

  \  mCenterFlex(dParent);\r

  \  let whexBrut = 100;\r

  \  dParent = mDiv(dParent, { position: 'relative', w: whexBrut * 4, h: 300,
  bg: 'violet', display: 'inline-block' });\r

  \  let hlist = [];\r

  \  for (let i = 0; i < 4; i++) {\r

  \    let h = mHex02(dParent, whexBrut);\r

  \    mStyleX(h, { position: 'absolute', left: i * whexBrut, top: 0 });\r

  \    hlist.push(h);\r

  \  }\r

  }"
hexTest03: "function hexTest03() {\r

  \  let dParent = dTable;\r

  \  dParent = mDiv(dTable, { bg: 'random', w: 800, h: 500 });\r

  \  mCenterFlex(dParent);\r

  \  let whexBrut = 100;\r

  \  let hline = (whexBrut / .866) * .75;\r

  \  dParent = mDiv(dParent, { position: 'relative', w: whexBrut * 4, h: 300,
  bg: 'violet', display: 'inline-block' });\r

  \  let hlist = [];\r

  \  for (let i = 0; i < 4; i++) {\r

  \    let h = mHex03(dParent, whexBrut, 'yellow');\r

  \    mStyleX(h, { position: 'absolute', left: i * whexBrut, top: 0 });\r

  \    hlist.push(h);\r

  \  }\r

  \  for (let i = 0; i < 3; i++) {\r

  \    let h = mHex03(dParent, whexBrut, 'yellow');\r

  \    mStyleX(h, { position: 'absolute', left: whexBrut / 2 + i * whexBrut,
  top: hline });\r

  \    hlist.push(h);\r

  \  }\r

  }"
hexTest04: "function hexTest04() {\r

  \  let dParent = dTable;\r

  \  let rows = 5, cols = 5;\r

  \  let whexBrut = 100;\r

  \  let hline = (whexBrut / .866) * .75;\r

  \  dParent = mDiv(dParent, { position: 'relative', w: whexBrut * cols, h:
  hline * (rows + .5), display: 'inline-block' });\r

  \  let hlist = [];\r

  \  for (let r = 0; r < rows; r++) {\r

  \    let curCols = r % 2 ? cols - 1 : cols;\r

  \    let dx = r % 2 ? whexBrut / 2 : 0;\r

  \    for (let c = 0; c < curCols; c++) {\r

  \      let h = mHex04(dParent, whexBrut, 'yellow');\r

  \      mStyleX(h, { position: 'absolute', left: dx + c * whexBrut, top: r *
  hline });\r

  \      hlist.push(h);\r

  \    }\r

  \  }\r

  }"
hexTest05: "function hexTest05() {\r

  \  let dParent = dTable;\r

  \  let rows = 4, cols = 9;\r

  \  let whexBrut = 100;\r

  \  let hline = (whexBrut / .866) * .75;\r

  \  dParent = mDiv(dParent, { position: 'relative', w: whexBrut * cols, h:
  hline * (rows + .5), display: 'inline-block' });\r

  \  let hlist = [];\r

  \  for (let r = 0; r < rows; r++) {\r

  \    let curCols = r % 2 ? cols - 1 : cols;\r

  \    let dx = r % 2 ? whexBrut / 2 : 0;\r

  \    for (let c = 0; c < curCols; c++) {\r

  \      let h = mHex05(dParent, whexBrut, 'yellow');\r

  \      mStyleX(h, { position: 'absolute', left: dx + c * whexBrut, top: r *
  hline });\r

  \      hlist.push(h);\r

  \    }\r

  \  }\r

  }"
hexTest06: "function hexTest06() {\r

  \  let sz = 200;\r

  \  let d1 = mDiv(dTable, { w: sz, h: sz, bg: 'random', display: 'inline',
  position: 'relative' });\r

  \  let d2 = mDiv(d1, { w: 200, h: 200, bg: 'random', display: 'inline',
  position: 'absolute', left: 0, top: 0 });\r

  \  let g = aSvgg(d2);\r

  \  let gap = 2;\r

  \  let hex1 = agShape(g, 'hex', sz - 2 * gap, sz - 2 * gap, 'red');\r

  \  let offx = 10;\r

  \  let offy = 20;\r

  \  let d3 = mDiv(d1, { w: 200, h: 200, rounding: '50%', display: 'inline',
  position: 'absolute', left: 0, top: 0 });\r

  \  let d4 = mDiv(d3, { left: `${offx / 2}%`, top: `${offy / 2}%`, w: `${100
  - offx}%`, h: `${100 - offy}%`, rounding: '50%', bg: 'random', display:
  'inline', position: 'absolute' });\r

  \  return d4;\r

  }"
hexTest07: "function hexTest07() {\r

  \  let dParent = dTable;\r

  \  let rows = 4, cols = 5;\r

  \  let whexBrut = 100;\r

  \  let hline = (whexBrut / .866) * .75;\r

  \  dParent = mDiv(dParent, { position: 'relative', w: whexBrut * cols, h:
  hline * (rows + .5), display: 'inline-block' });\r

  \  let hlist = [];\r

  \  for (let r = 0; r < rows; r++) {\r

  \    let curCols = r % 2 ? cols - 1 : cols;\r

  \    let dx = r % 2 ? whexBrut / 2 : 0;\r

  \    for (let c = 0; c < curCols; c++) {\r

  \      let h = oneHex(dParent, whexBrut, whexBrut, 'yellow');\r

  \      mStyleX(h, { position: 'absolute', left: dx + c * whexBrut, top: r *
  hline });\r

  \      hlist.push(h);\r

  \    }\r

  \  }\r

  \  function oneHex(dParent, w, h, bg) {\r

  \    let d1 = mDiv(dParent, { w: w, h: h, display: 'inline', position:
  'relative' });\r

  \    let d2 = mDiv(d1, { w: w, h: h, display: 'inline', position:
  'absolute', left: 0, top: 0 });\r

  \    let g = aSvgg(d2);\r

  \    let wgap = 8, hgap = 0;\r

  \    let hex1 = agShape(g, 'hex', w - 2 * wgap, h - 2 * hgap, bg);\r

  \    let offx = 16;\r

  \    let offy = 20;\r

  \    let d3 = mDiv(d1, { w: w, h: h, rounding: '50%', display: 'inline',
  position: 'absolute', left: 0, top: 0 });\r

  \    let d4 = mDiv(d3, { left: `${offx / 2}%`, top: `${offy / 2}%`, w:
  `${100 - offx}%`, h: `${100 - offy}%`, rounding: '50%', bg: 'random', display:
  'inline', position: 'absolute' });\r

  \    return d1;\r

  \  }\r

  }"
hexTest08: "function hexTest08(dParent, rows = 13, cols = 5, wHex = 100) {\r

  \  let hline = (wHex / .866) * .75;\r

  \  dParent = mDiv(dParent, { position: 'relative', w: wHex * cols, h: hline
  * (rows + .5), display: 'inline-block' });\r

  \  let hlist = [];\r

  \  let xOffset = 0;\r

  \  for (let r = 0; r < rows; r++) {\r

  \    let curCols = r % 2 ? cols - 1 : cols;\r

  \    let dx = r % 2 ? wHex / 2 : 0;\r

  \    dx += xOffset;\r

  \    for (let c = 0; c < curCols; c++) {\r

  \      let [dOuter, dInner] = oneHex(dParent, wHex, wHex, '#ffffff10');\r

  \      mStyleX(dOuter, { position: 'absolute', left: dx + c * wHex, top: r *
  hline });\r

  \      hlist.push(dInner);\r

  \    }\r

  \  }\r

  \  function oneHex(dParent, w, h, bg) {\r

  \    let d1 = mDiv(dParent, { w: w, h: h, display: 'inline', position:
  'relative' });\r

  \    let d2 = mDiv(d1, { w: w, h: h, display: 'inline', position:
  'absolute', left: 0, top: 0 });\r

  \    let g = aSvgg(d2);\r

  \    let wgap = 8, hgap = 0;\r

  \    let hex1 = agShape(g, 'hex', w - 2 * wgap, h - 2 * hgap, bg);\r

  \    let offx = 16;\r

  \    let offy = 20;\r

  \    let d3 = mDiv(d1, { w: w, h: h, display: 'inline', position:
  'absolute', left: 0, top: 0 });\r

  \    let d4 = mDiv(d3, { left: `${offx / 2}%`, top: `${offy / 2}%`, w:
  `${100 - offx}%`, h: `${100 - offy}%`, rounding: '50%', display: 'inline',
  position: 'absolute' });\r

  \    return [d1, d4];\r

  \  }\r

  \  return hlist;\r

  }"
hextestNewBROKEN: "function hextestNewBROKEN() {\r

  \  let info = createHexboard2(3, 4, 50);\r

  \  console.log('info', info);\r

  \  let [centers, maxx, maxy] = [[], 0, 0];\r

  \  let [wCell, hCell] = [100, 100];\r

  \  for (const item of info.items) {\r

  \    if (item.isHexCenter) {\r

  \      let [x, y] = [item.x, item.y];\r

  \      maxx = Math.max(maxx, x); maxy = Math.max(maxy, y);\r

  \      centers.push({ x: x, y: y });\r

  \    }\r

  \  }\r

  \  let wCont = maxx + wCell / 2;\r

  \  let hCont = maxy + hCell / 2;\r

  \  let resultOfHexCenters = [centers, wCont, hCont];\r

  \  console.log('centers', centers);\r

  \  let dCont = mDiv(dMain, { position: 'relative', w: wCont, h: hCont, bg:
  'pink' });\r

  \  for (const pt of centers) {\r

  \    let d = drawShape('hex', dCont);\r

  \    mCenterAt(d, pt.x, pt.y);\r

  \  }\r

  }"
hexToHSL: "function hexToHSL(H) {\r

  \  let ex = /^#([\\da-f]{3}){1,2}$/i;\r

  \  if (ex.test(H)) {\r

  \    let r = 0,\r

  \      g = 0,\r

  \      b = 0;\r

  \    if (H.length == 4) {\r

  \      r = '0x' + H[1] + H[1];\r

  \      g = '0x' + H[2] + H[2];\r

  \      b = '0x' + H[3] + H[3];\r

  \    } else if (H.length == 7) {\r

  \      r = '0x' + H[1] + H[2];\r

  \      g = '0x' + H[3] + H[4];\r

  \      b = '0x' + H[5] + H[6];\r

  \    }\r

  \    r /= 255;\r

  \    g /= 255;\r

  \    b /= 255;\r

  \    let cmin = Math.min(r, g, b),\r

  \      cmax = Math.max(r, g, b),\r

  \      delta = cmax - cmin,\r

  \      h = 0,\r

  \      s = 0,\r

  \      l = 0;\r

  \    if (delta == 0) h = 0;\r

  \    else if (cmax == r) h = ((g - b) / delta) % 6;\r

  \    else if (cmax == g) h = (b - r) / delta + 2;\r

  \    else h = (r - g) / delta + 4;\r

  \    h = Math.round(h * 60);\r

  \    if (h < 0) h += 360;\r

  \    l = (cmax + cmin) / 2;\r

  \    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r

  \    s = +(s * 100).toFixed(1);\r

  \    l = +(l * 100).toFixed(1);\r

  \    return 'hsl(' + h + ',' + s + '%,' + l + '%)';\r

  \  } else {\r

  \    return 'Invalid input color';\r

  \  }\r

  }"
hexToRgb: "function hexToRgb(hex) {\r

  \  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r

  \  return result\r

  \    ? {\r

  \      r: parseInt(result[1], 16),\r

  \      g: parseInt(result[2], 16),\r

  \      b: parseInt(result[3], 16)\r

  \    }\r

  \    : null;\r

  }"
hFunc: "function hFunc(content, funcname, arg1, arg2, arg3) {\r

  \  let html = `<a style='color:blue'
  href=\"javascript:${funcname}('${arg1}','${arg2}','${arg3}');\">${content}</a\
  >`;\r

  \  return html;\r

  }"
hide: "function hide(elem) {\r

  \  if (isString(elem)) elem = document.getElementById(elem);\r

  \  if (nundef(elem)) return;\r

  \  if (isSvg(elem)) {\r

  \    elem.setAttribute('style', 'visibility:hidden;display:none');\r

  \  } else {\r

  \    elem.style.display = 'none';\r

  \  }\r

  }"
hide_buildings: "function hide_buildings() {\r

  \  let uplayer = Z.uplayer;\r

  \  let buildings = UI.players[uplayer].buildinglist;\r

  \  for (const b of buildings) {\r

  \    for (let i = 1; i < b.items.length; i++) {\r

  \      let card = b.items[i];\r

  \      if (b.schweine.includes(card)) continue;\r

  \      face_down(b.items[i]);\r

  \    }\r

  \  }\r

  }"
hide_history_popup: function hide_history_popup() { let d =
  mBy('dHistoryPopup'); if (isdef(d)) { mAppend(UI.dHistoryParent, UI.dHistory);
  mRemove(d); } }
hide_motto: function hide_motto() { mClear('dMotto') }
hide_options_popup: function hide_options_popup() { let d = mBy('dOptions'); if
  (isdef(d)) mRemove(d); }
hide0: function hide0(id) { mBy(id).style.display = "none"; }
hideBoat: function hideBoat(id) { let ms = UIS[id]; ms.hide(); ms.o.weg = true; }
hideCurrent: "function hideCurrent() {\r

  \  if (dCurrent) {\r

  \    if (dCurrent.id == 'dChat') disappear(mBy('dChatWindow'),
  DELAY_DISAPPEAR);\r

  \    disappear(dCurrent, DELAY_DISAPPEAR);\r

  \    dCurrent = null;\r

  \    return DELAY_DISAPPEAR;\r

  \  } else return 0;\r

  }"
hideElems: "function hideElems(idlist) {\r

  \  for (const id of idlist) {\r

  \    EID[id].ms.hide();\r

  \  }\r

  }"
hideEventList: function hideEventList() {
  document.getElementById('events').style.display = 'none'; }
hideGame: function hideGame() {
  document.getElementById('R_d_root').style.display = 'none'; }
hideGameConfig: function hideGameConfig() {
  document.getElementById('gameConfig').style.display = 'none'; }
hideInfobox: function hideInfobox(oid) { let id = makeIdInfobox(oid); if
  (UIS[id]) UIS[id].hide(); }
hideJoinConfig: function hideJoinConfig() { hide('joinConfig'); }
hideLoader: function hideLoader() { mBy('dLoader').style.display = "none"; }
hideLobby: function hideLobby() {
  document.getElementById('a_d_lobby').style.display = 'none'; }
hideLog: function hideLog(pl) { let d = LOG[pl]; if (d) hide(d); }
hideLogin: function hideLogin() {
  document.getElementById('a_d_login').style.display = 'none'; }
hideMenu: "function hideMenu(desc) {\r

  \  let d = mBy('div' + desc);\r

  \  if (isVisible(d)) {\r

  \    let b = mBy('b' + desc);\r

  \    hide(d);\r

  \    b.innerHTML = '+' + desc[0];\r

  \  }\r

  }"
hideMouse: "function hideMouse() {\r

  \  var x = dTable.getElementsByTagName(\"DIV\");\r

  \  for (const el of x) { el.prevCursor = el.style.cursor; }\r

  \  for (const p of Pictures) {\r

  \    mRemoveClass(iDiv(p), 'frameOnHover'); iDiv(p).style.cursor = 'none';\r

  \    for (const ch of iDiv(p).children) ch.style.cursor = 'none';\r

  \  }\r

  \  for (const el of x) { mClass(el, 'noCursor'); }\r

  }"
hideMouseAvatar: function hideMouseAvatar(username) { hide(getAvatar(username)); }
hideOuterDoors: "function hideOuterDoors(house) {\r

  \  for (const did of jsCopy(house.doors)) {\r

  \    let door = Items[did];\r

  \    hide(iDiv(door));\r

  \  }\r

  }"
hidePlayer: "function hidePlayer(i) {\r

  \  let id;\r

  \  id = getidNum(i); hide(id);\r

  \  id = getidSpan(i); hide(id);\r

  \  id = getidType(i); hide(id);\r

  }"
hideShield: function hideShield() { setTimeout(() => {
  mBy('dShield').style.display = 'none' }, 500); }
hideSvg: "function hideSvg(elem) {\r

  \  elem.setAttribute('style', 'visibility:hidden;display:none');\r

  }"
hideTooltip: "function hideTooltip() { $('div#tooltip').css({ display: 'none' }); }"
highAll: function highAll(oid) { mapSafe('high', getVisuals, oid); }
highAux: function highAux(oid) { mapSafe('high', getAuxVisuals, oid); }
highlight: "function highlight(x) {\r

  \  let msList = getVisuals(x);\r

  \  for (const ms of msList) {\r

  \    ms.high();\r

  \  }\r

  }"
highlight_player: function highlight_player(uname) { mHigh(`d_${uname}`);
  mHigh(iDiv(Items[uname])); }
highlightBoat: "function highlightBoat(id) {\r

  \  if (id === null) return;\r

  \  if (boatHighlighted) {\r

  \    if (boatHighlighted.id == id) return;\r

  \    else unhighlightBoat();\r

  \  }\r

  \  boatHighlighted = UIS[id];\r

  \  boatHighlighted.elem.scrollIntoView(false);\r

  \  highlightMsAndRelatives(null, boatHighlighted);\r

  \  openInfoboxesForBoatOids(boatHighlighted);\r

  }"
highlightContentIds: "function highlightContentIds(b) {\r

  \  let s = b.innerHTML;\r

  \  let ids = s.split(/[ ,:;]+/);\r

  \  for (const id of ids) {\r

  \    if (id == '_') continue;\r

  \    let msList = getVisuals(id);\r

  \    for (const ms of msList) ms.high();\r

  \  }\r

  }"
highlightMsAndRelatives: "function highlightMsAndRelatives(ev, mobj, partName)
  {\r

  \  let id = mobj.id;\r

  \  mobj.high(partName);\r

  \  if (mobj.isa.infobox) bringInfoboxToFront(mobj);\r

  \  let relativeIds = id2uids[id];\r

  \  if (nundef(relativeIds)) return;\r

  \  for (const idRel of relativeIds) {\r

  \    let msRel = UIS[idRel];\r

  \    msRel.high('title');\r

  \  }\r

  }"
highlightNextBoat: "function highlightNextBoat() {\r

  \  if (!boatHighlighted) highlightBoat(getFirstBoatId());\r

  \  else {\r

  \    let idx = boatHighlighted.o.iTuple + 1;\r

  \    highlightBoat(getBoatIdByIdx(boatHighlighted.o.iTuple + 1));\r

  \  }\r

  }"
highlightPrevBoat: "function highlightPrevBoat() {\r

  \  if (!boatHighlighted) highlightBoat(getLastBoatId()); else
  highlightBoat(getBoatIdByIdx(boatHighlighted.o.iTuple - 1));\r

  }"
highMain: function highMain(oid) { mapSafe('high', getVisual, oid); }
highSelfAndRelatives: "function highSelfAndRelatives(uid, R) {\r

  \  for (const oid of R.uid2oids[uid]) {\r

  \    for (const uid1 of R.oid2uids[oid]) {\r

  \      let ui = R.getUI(uid1);\r

  \      mHigh(ui);\r

  \    }\r

  \  }\r

  \  let n = R.uiNodes[uid];\r

  \  if (n.potentialOverlap) {\r

  \    let ui = R.getUI(uid);\r

  \    bringToFront(ui);\r

  \  }\r

  }"
HintAnimation: "function HintAnimation(sq, ms = 2000) {\r

  \  if (GameController.BoardFlipped == BOOL.TRUE) { sq = MIRROR120(sq); }\r

  \  $(\".Square\").each(function (index) {\r

  \    if ((RanksBrd[sq] == 7 - Math.round($(this).position().top / 60)) &&
  (FilesBrd[sq] == Math.round($(this).position().left / 60))) {\r

  \      animateProperty(this, 'opacity', '1', '0', '1', ms);\r

  \    }\r

  \  });\r

  }"
hintEngineStart: "function hintEngineStart(hintFunc, hintlist, initialDelay) {\r

  \  G.hintFunc = hintFunc;\r

  \  recShowHints(hintlist, QContextCounter, initialDelay, d => initialDelay +
  2000);\r

  }"
horLayout: "function horLayout(n, R) {\r

  \  console.log('n', n, n.ui);\r

  \  let uids = n.children;\r

  \  let dims = calcTotalDims(n, uids, R);\r

  \  let margin = dims.margin;\r

  \  console.log('dims', dims);\r

  \  let x = margin;\r

  \  let y = margin;\r

  \  let uiParent = n.ui;\r

  \  uiParent.style.position = 'relative';\r

  \  console.log(uiParent);\r

  \  for (const ch of uids) {\r

  \    let n = R.uiNodes[ch];\r

  \    let w = n.size.w;\r

  \    let h = n.size.h;\r

  \    n.pos = { x: x, y: y };\r

  \    let ui = n.ui;\r

  \    ui.style.position = 'absolute';\r

  \    ui.style.display = 'inline-block';\r

  \    ui.style.boxSizing = 'border-box';\r

  \    ui.style.left = x + 'px';\r

  \    ui.style.top = y + 'px';\r

  \    ui.style.margin = 'auto';\r

  \    x += w + 2;\r

  \  }\r

  \  uiParent.style.width = dims.w + 'px';\r

  \  uiParent.style.minHeight = dims.h + 'px';\r

  }"
host_update: "function host_update() {\r

  \  assertion(isdef(Z.fen), 'no fen');\r

  \  check_for_clicks();\r

  \  show_status();\r

  }"
houseTest00: "function houseTest00() {\r

  \  let s = '\"a a b c\" \"d d e c\" \"f g e h\"';
  console.log(getRandomLetterMapping(s)); console.log('_____\\n', s, '\\n',
  getLetterSwapEncoding(s));\r

  }"
howto_close: function howto_close(item) { toggle_fiddle(); }
howto_open: "function howto_open(item) {\r

  \  iClear('dTable')\r

  \  if (nundef(item)) item = DB.apps.howto;\r

  \  dSearch = mBy('dSearch'); mClear(dSearch);\r

  \  show_sidebar(Object.keys(CODE.justcode), show_code);\r

  \  mStyle(dSearch, { bg: item.color });\r

  \  mInputLineWithButtons(dSearch, { Code: filter_codebase, Signatures:
  filter_sig })\r

  }"
HPLayout: "function HPLayout() {\r

  \  if (isdef(UI.DRR)) UI.DRR.remove();\r

  \  mInsert(UI.dRechts, UI.dHistory);\r

  \  Clientdata.historyLayout = 'hp';\r

  }"
hRoute: "function hRoute(content, route, arg1, arg2, arg3) {\r

  \  let html = `<a href=\"/${route}\"`;\r

  \  if (isdef(arg1)) html += `/${arg1}`;\r

  \  if (isdef(arg2)) html += `/${arg2}`;\r

  \  if (isdef(arg3)) html += `/${arg3}`;\r

  \  html += `\">${content}</a>`;\r

  \  return html;\r

  }"
HRPLayout: "function HRPLayout() {\r

  \  let dr = UI.dRechts;\r

  \  dr.remove();\r

  \  let drr = UI.DRR = mDiv(dTable);\r

  \  mAppend(drr, UI.dHistory);\r

  \  mAppend(dTable, dr);\r

  \  Clientdata.historyLayout = 'hrp';\r

  }"
hsl2hsv: "function hsl2hsv(hue, sat, light) {\r

  \  sat *= light < 0.5 ? light : 1 - light;\r

  \  return [\r

  \    hue,\r

  \    (2 * sat) / (light + sat),\r

  \    light + sat\r

  \  ];\r

  }"
hsl2rgb: "function hsl2rgb(h, s, l) {\r

  \  let RGB = h2rgb(h);\r

  \  let C = (1 - Math.abs(2 * l - 1)) * s;\r

  \  return (RGB - 0.5) * C + l;\r

  }"
HSLAToRGBA: "function HSLAToRGBA(hsla, isPct) {\r

  \  let ex =
  /^hsla\\(((((([12]?[1-9]?\\d)|[12]0\\d|(3[0-5]\\d))(\\.\\d+)?)|(\\.\\d+))(deg\
  )?|(0|0?\\.\\d+)turn|(([0-6](\\.\\d+)?)|(\\.\\d+))rad)(((,\\s?(([1-9]?\\d(\\.\
  \\d+)?)|100|(\\.\\d+))%){2},\\s?)|((\\s(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%\
  ){2}\\s\\/\\s))((0?\\.\\d+)|[01]|(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%)\\)$/\
  i;\r

  \  if (ex.test(hsla)) {\r

  \    let sep = hsla.indexOf(',') > -1 ? ',' : ' ';\r

  \    hsla = hsla\r

  \      .substr(5)\r

  \      .split(')')[0]\r

  \      .split(sep);\r

  \    if (hsla.indexOf('/') > -1) hsla.splice(3, 1);\r

  \    isPct = isPct === true;\r

  \    let h = hsla[0],\r

  \      s = hsla[1].substr(0, hsla[1].length - 1) / 100,\r

  \      l = hsla[2].substr(0, hsla[2].length - 1) / 100,\r

  \      a = hsla[3];\r

  \    if (h.indexOf('deg') > -1) h = h.substr(0, h.length - 3);\r

  \    else if (h.indexOf('rad') > -1) h = Math.round((h.substr(0, h.length -
  3) / (2 * Math.PI)) * 360);\r

  \    else if (h.indexOf('turn') > -1) h = Math.round(h.substr(0, h.length -
  4) * 360);\r

  \    if (h >= 360) h %= 360;\r

  \    let c = (1 - Math.abs(2 * l - 1)) * s,\r

  \      x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\r

  \      m = l - c / 2,\r

  \      r = 0,\r

  \      g = 0,\r

  \      b = 0;\r

  \    if (0 <= h && h < 60) {\r

  \      r = c;\r

  \      g = x;\r

  \      b = 0;\r

  \    } else if (60 <= h && h < 120) {\r

  \      r = x;\r

  \      g = c;\r

  \      b = 0;\r

  \    } else if (120 <= h && h < 180) {\r

  \      r = 0;\r

  \      g = c;\r

  \      b = x;\r

  \    } else if (180 <= h && h < 240) {\r

  \      r = 0;\r

  \      g = x;\r

  \      b = c;\r

  \    } else if (240 <= h && h < 300) {\r

  \      r = x;\r

  \      g = 0;\r

  \      b = c;\r

  \    } else if (300 <= h && h < 360) {\r

  \      r = c;\r

  \      g = 0;\r

  \      b = x;\r

  \    }\r

  \    r = Math.round((r + m) * 255);\r

  \    g = Math.round((g + m) * 255);\r

  \    b = Math.round((b + m) * 255);\r

  \    let pctFound = a.indexOf('%') > -1;\r

  \    if (isPct) {\r

  \      r = +((r / 255) * 100).toFixed(1);\r

  \      g = +((g / 255) * 100).toFixed(1);\r

  \      b = +((b / 255) * 100).toFixed(1);\r

  \      if (!pctFound) {\r

  \        a *= 100;\r

  \      } else {\r

  \        a = a.substr(0, a.length - 1);\r

  \      }\r

  \    } else if (pctFound) {\r

  \      a = a.substr(0, a.length - 1) / 100;\r

  \    }\r

  \    return 'rgba(' + (isPct ? r + '%,' + g + '%,' + b + '%,' + a + '%' : +r
  + ',' + +g + ',' + +b + ',' + +a) + ')';\r

  \  } else {\r

  \    return 'Invalid input color';\r

  \  }\r

  }"
hslToHex: "function hslToHex(h, s, l) {\r

  \  l /= 100;\r

  \  const a = s * Math.min(l, 1 - l) / 100;\r

  \  const f = n => {\r

  \    const k = (n + h / 30) % 12;\r

  \    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\r

  \    return Math.round(255 * color).toString(16).padStart(2, '0');\r

  \  };\r

  \  return `#${f(0)}${f(8)}${f(4)}`;\r

  }"
hslToHslaString: "function hslToHslaString(h, s, l, a = 1) {\r

  \  return 'hsla(' + h + ', ' + s + '%, ' + l + '%, ' + a + ')';\r

  }"
hslToHsv: "function hslToHsv(h, s, l) {\r

  \  let newh = h;\r

  \  l /= 100.0;\r

  \  s /= 100.0;\r

  \  testHelpers(h, s, l);\r

  \  let newv = (2 * l + s * (1 - Math.abs(2 * l - 1))) / 2;\r

  \  let news = (2 * (newv - l)) / newv;\r

  \  testHelpers(newh, news, newv);\r

  \  let rgb = hsvToRgb(newh, news, newv);\r

  \  let result = [h, s, l, newh, news, newv];\r

  \  result.push(rgbToHex(rgb[0], rgb[1], rgb[2]));\r

  \  return result;\r

  }"
HSLToRGB: "function HSLToRGB(hsl, isPct) {\r

  \  let ex =
  /^hsl\\(((((([12]?[1-9]?\\d)|[12]0\\d|(3[0-5]\\d))(\\.\\d+)?)|(\\.\\d+))(deg)\
  ?|(0|0?\\.\\d+)turn|(([0-6](\\.\\d+)?)|(\\.\\d+))rad)((,\\s?(([1-9]?\\d(\\.\\\
  d+)?)|100|(\\.\\d+))%){2}|(\\s(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%){2})\\)$\
  /i;\r

  \  if (ex.test(hsl)) {\r

  \    let sep = hsl.indexOf(',') > -1 ? ',' : ' ';\r

  \    hsl = hsl\r

  \      .substr(4)\r

  \      .split(')')[0]\r

  \      .split(sep);\r

  \    isPct = isPct === true;\r

  \    let h = hsl[0],\r

  \      s = hsl[1].substr(0, hsl[1].length - 1) / 100,\r

  \      l = hsl[2].substr(0, hsl[2].length - 1) / 100;\r

  \    if (h.indexOf('deg') > -1) h = h.substr(0, h.length - 3);\r

  \    else if (h.indexOf('rad') > -1) h = Math.round((h.substr(0, h.length -
  3) / (2 * Math.PI)) * 360);\r

  \    else if (h.indexOf('turn') > -1) h = Math.round(h.substr(0, h.length -
  4) * 360);\r

  \    if (h >= 360) h %= 360;\r

  \    let c = (1 - Math.abs(2 * l - 1)) * s,\r

  \      x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\r

  \      m = l - c / 2,\r

  \      r = 0,\r

  \      g = 0,\r

  \      b = 0;\r

  \    if (0 <= h && h < 60) {\r

  \      r = c;\r

  \      g = x;\r

  \      b = 0;\r

  \    } else if (60 <= h && h < 120) {\r

  \      r = x;\r

  \      g = c;\r

  \      b = 0;\r

  \    } else if (120 <= h && h < 180) {\r

  \      r = 0;\r

  \      g = c;\r

  \      b = x;\r

  \    } else if (180 <= h && h < 240) {\r

  \      r = 0;\r

  \      g = x;\r

  \      b = c;\r

  \    } else if (240 <= h && h < 300) {\r

  \      r = x;\r

  \      g = 0;\r

  \      b = c;\r

  \    } else if (300 <= h && h < 360) {\r

  \      r = c;\r

  \      g = 0;\r

  \      b = x;\r

  \    }\r

  \    r = Math.round((r + m) * 255);\r

  \    g = Math.round((g + m) * 255);\r

  \    b = Math.round((b + m) * 255);\r

  \    if (isPct) {\r

  \      r = +((r / 255) * 100).toFixed(1);\r

  \      g = +((g / 255) * 100).toFixed(1);\r

  \      b = +((b / 255) * 100).toFixed(1);\r

  \    }\r

  \    return 'rgb(' + (isPct ? r + '%,' + g + '%,' + b + '%' : +r + ',' + +g
  + ',' + +b) + ')';\r

  \  } else {\r

  \    return 'Invalid input color';\r

  \  }\r

  }"
hsv2hsl: "function hsv2hsl(hue, sat, val) {\r

  \  return [\r

  \    hue,\r

  \    (sat * val) / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue),\r

  \    hue / 2\r

  \  ];\r

  }"
hsvToHsl: "function hsvToHsl(h, s, v) {\r

  \  let newh = h;\r

  \  s /= 100.0;\r

  \  v /= 100.0;\r

  \  testHelpers(h, s, v);\r

  \  let newl = 0.5 * v * (2 - s);\r

  \  let news = (v * s) / (1 - Math.abs(2 * s - 1));\r

  \  testHelpers(newh, news, newl);\r

  \  return {\r

  \    h: newh,\r

  \    s: news,\r

  \    l: newl\r

  \  };\r

  }"
hsvToRgb: "function hsvToRgb(h, s, v) {\r

  \  let f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 -
  k, 1), 0);\r

  \  return [Math.floor(f(5) * 255), Math.floor(f(3) * 255), Math.floor(f(1) *
  255)];\r

  }"
html_to_umlaut: "function html_to_umlaut(html) {\r

  \  console.log('html', html);\r

  \  if (html == 'u00c4') { return 'Ä'; }\r

  \  else return html;\r

  }"
hue: "function hue(h) {\r

  \  var r = Math.abs(h * 6 - 3) - 1;\r

  \  var g = 2 - Math.abs(h * 6 - 2);\r

  \  var b = 2 - Math.abs(h * 6 - 4);\r

  \  return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)];\r

  }"
i_am_acting_host: function i_am_acting_host() { return U.name == Z.fen.acting_host; }
i_am_host: function i_am_host() { return U.name == Z.host; }
i_am_trigger: function i_am_trigger() { return is_multi_trigger(U.name); }
i52: "function i52(i) { return isList(i) ? i.map(x => Card52.getItem(x)) :
  Card52.getItem(i); }"
iAdd: "function iAdd(item, liveprops, addprops) {\r

  \  let id, l;\r

  \  if (isString(item)) { id = item; item = valf(Items[id], {}); }\r

  \  let el = valf(liveprops.div, liveprops.ui, iDiv(item), null);\r

  \  id = valnwhite(item.id, (el ? el.id : getUID()), getUID());\r

  \  item.id = id; if (nundef(Items[id])) Items[id] = item; if (el) el.id =
  id;\r

  \  if (nundef(item.live)) item.live = {};\r

  \  l = item.live;\r

  \  for (const k in liveprops) {\r

  \    let val = liveprops[k];\r

  \    if (nundef(val)) { continue; }\r

  \    l[k] = val;\r

  \    if (isdef(val.id) && val.id != id) { lookupAddIfToList(val,
  ['memberOf'], id); }\r

  \  }\r

  \  if (isdef(addprops)) copyKeys(addprops, item);\r

  \  return item;\r

  }"
iAddContent: function iAddContent(item, d) { let dm = diContent(item); if
  (isdef(dm)) mAppend(dm, d); }
iAmInGame: "function iAmInGame() {\r

  \  let gc = S.gameConfig;\r

  \  let players = gc.players;\r

  \  let me = firstCond(players, x => startsWith(x.username, USERNAME));\r

  \  return me !== null;\r

  }"
iAmStarter: function iAmStarter() { return S.gameConfig.players[0].username == USERNAME; }
iAppend: function iAppend(dParent, i) { mAppend(iDiv(dParent), iDiv(i)); }
iAppend52: "function iAppend52(i, dParent, faceUp) {\r

  \  let item = i52(i);\r

  \  iFace(item, faceUp);\r

  \  mAppend(dParent, item.div);\r

  \  return item;\r

  }"
iBounds: "function iBounds(i, irel) {\r

  \  if (isdef(i.div)) i = i.div;\r

  \  if (isdef(irel) && isdef(irel.div)) irel = irel.div;\r

  \  isParent = (i.parentNode == irel);\r

  \  let b = getBounds(i, isParent, irel);\r

  \  let [x, y, w, h] = [Math.round(b.left), Math.round(b.top),
  Math.round(b.width), Math.round(b.height)];\r

  \  return { x: x, y: y, w: w, h: h };\r

  }"
iButtonSidebarDiv: "function iButtonSidebarDiv(dParent, bCaption = '☰', bStyles
  = { fz: 30 }, sbStyles = { bg: wpink }, divStyles = {}, outerStyles = { matop:
  4, bg: wgrey }) {\r

  \  let d0 = mDiv100(dParent);\r

  \  let b = mButton(bCaption, null, d0, bStyles, 'mybutton', getUID('b'));\r

  \  outerStyles.position = 'relative';\r

  \  let h = getRect(d0).h - (getRect(b).h + outerStyles.matop);\r

  \  outerStyles.h = h;\r

  \  let d = mDiv(d0, outerStyles);\r

  \  let dSide = mDiv(d, sbStyles);\r

  \  let dContent = mDiv(d, divStyles, getUID());\r

  \  let sb = iSidebar(dSide, dContent, b, 120, false);\r

  \  let item = mItem(getUID('comp'), { div: d0, button: b, sidebar: sb,
  dContent: dContent }, { type: 'component' });\r

  \  return item;\r

  }"
iCenter: function iCenter(item, offsetX, offsetY) { let d = iDiv(item);
  mCenterAbs(d, offsetX, offsetY); }
iClear: "function iClear(item) {\r

  \  if (nundef(item)) return;\r

  \  if (isString(item)) { let id = item; if (isdef(Items[id])) item =
  Items[id]; else item = toElem(id); }\r

  \  let d = iDiv(item);\r

  \  if (isdef(d)) {\r

  \    let desc = Array.from(d.querySelectorAll('[id]:not([id=\"\"])'));
  //'[id]:not([id]=\"\")');\r

  \    desc = desc.filter(x => isdef(Items[x.id]))\r

  \    for (const item1 of desc) iDelete(item1.id);\r

  \    mClear(d);\r

  \  }\r

  }"
iCollect: "function iCollect(tags = ['div']) {\r

  \  for (const t of tags) {\r

  \    let divs = Array.from(document.getElementsByTagName(t)).filter(d =>
  !isEmptyOrWhiteSpace(d.id) && !isEmpty(d.innerHTML));\r

  \    for (const d of divs) {\r

  \      iAdd({}, { div: d });\r

  \    }\r

  \  }\r

  }"
iContainer: "function iContainer(dParent, styles, classes, id, inner) {\r

  \  let item = { id: isdef(id) ? id : getUID(), type: 'plain' };\r

  \  let dOuter = mDiv(dParent);\r

  \  let dInner = mDiv100(dOuter);\r

  \  mCenterCenterFlex(dInner);\r

  \  if (isdef(inner)) d.innerHTML = inner;\r

  \  if (nundef(styles)) styles = {};\r

  \  styles.display = 'inline-block';\r

  \  mStyle(dOuter, styles);\r

  \  if (isdef(classes)) mClass(dOuter, classes);\r

  \  iAdd(item, { div: dOuter, dInner: dInner });\r

  \  item.add = elem => mAppend(dInner, elem);\r

  \  return item;\r

  }"
iconViewer: "function iconViewer(keys) {\r

  \  onclick = show100;\r

  \  IconSet = isdef(keys) ? keys : symKeysBySet['nosymbols'];\r

  \  lastIndex = 0;\r

  \  Pictures = [];\r

  \  show100();\r

  }"
iconViewerTestKeysets: "function iconViewerTestKeysets() {\r

  \  let allKeys = symKeysBySet.nosymbols;\r

  \  let keys = allKeys.filter(x => isdef(symbolDict[x].best100));\r

  \  let keys1 = allKeys.filter(x => isdef(symbolDict[x].best100) &&
  isdef(symbolDict[x].bestE));\r

  \  let keys2 = allKeys.filter(x => isdef(symbolDict[x].best50));\r

  \  let keys3 = allKeys.filter(x => isdef(symbolDict[x].best25));\r

  \  console.log(keys3);\r

  \  iconViewer(keys3);\r

  }"
id2name: function id2name(id) { id.substring(2).split('_').join(' '); }
idealFontDims: "function idealFontDims(txt, wmax, hmax, fz = 22, fzmin = 6,
  weight) {\r

  \  let tStyles = { fz: fz, family: 'arial' };\r

  \  if (isdef(weight)) tStyles.weight = weight;\r

  \  while (true) {\r

  \    let tSize = getSizeWithStyles(txt, tStyles);\r

  \    if (tSize.h <= hmax && tSize.w <= wmax || tStyles.fz <= fzmin) return {
  w: tSize.w, h: tSize.h, fz: tStyles.fz, family: 'arial' };\r

  \    else tStyles.fz -= 1;\r

  \  }\r

  }"
idealFontSize: function idealFontSize(txt, wmax, hmax, fz = 22, fzmin = 6,
  weight) { return idealFontDims(...arguments).fz; }
idealFontsize: "function idealFontsize(txt, wmax, hmax, fz, fzmin, weight) {\r

  \  let tStyles = { fz: fz, family: 'arial' };\r

  \  if (isdef(weight)) tStyles.weight = weight;\r

  \  while (true) {\r

  \    let tSize = getSizeWithStyles(txt, tStyles);\r

  \    if (tSize.h <= hmax && tSize.w <= wmax || tStyles.fz <= fzmin) return {
  w: tSize.w, h: tSize.h, fz: tStyles.fz, family: 'arial' };\r

  \    else tStyles.fz -= 1;\r

  \  }\r

  }"
idealFontsizeX: "function idealFontsizeX(elem, wmax, hmax, fz, fzmin) {\r

  \  let tStyles = { w: wmax, fz: fz, family: 'arial' };\r

  \  let i = 0;\r

  \  while (i < 100) {\r

  \    i += 1;\r

  \    mStyleX(elem, tStyles);\r

  \    let tSize = getElemSize(elem);\r

  \    if (tSize.h <= hmax || tStyles.fz <= fzmin) {\r

  \      return { w: tSize.w, h: tSize.h, fz: tStyles.fz };\r

  \    } else tStyles.fz -= 1;\r

  \  }\r

  }"
idealTextColor: "function idealTextColor(bg, grayPreferred = false) {\r

  \  const nThreshold = 105;\r

  \  if (bg.substring(0, 1) != '#') bg = colorNameToHexString(bg);\r

  \  rgb = hexToRgb(bg);\r

  \  r = rgb.r;\r

  \  g = rgb.g;\r

  \  b = rgb.b;\r

  \  var bgDelta = r * 0.299 + g * 0.587 + b * 0.114;\r

  \  var foreColor = 255 - bgDelta < nThreshold ? 'black' : 'white';\r

  \  if (grayPreferred) foreColor = 255 - bgDelta < nThreshold ? 'dimgray' :
  'snow';\r

  \  return foreColor;\r

  }"
iDelete: "function iDelete(id) {\r

  \  delete Items[id];\r

  }"
identifyCardByRank: "function identifyCardByRank(key, rank) {\r

  \  if (key == 'market') {\r

  \  }\r

  }"
iDetect: "function iDetect(itemInfoKey) {\r

  \  let item, info, key;\r

  \  if (isString(itemInfoKey)) { key = itemInfoKey; info = Syms[key]; item =
  infoToItem(info); }\r

  \  else if (isDict(itemInfoKey)) {\r

  \    if (isdef(itemInfoKey.info)) { item = itemInfoKey; info = item.info;
  key = item.info.key; }\r

  \    else { info = itemInfoKey; key = info.key; item = infoToItem(info); }\r

  \  }\r

  \  return [item, info, key];\r

  }"
iDiv: "function iDiv(i) { return isdef(i.live) ? i.live.div : isdef(i.div) ?
  i.div : i; }"
iDivs: "function iDivs(ilist) { return isEmpty(ilist) ? [] : isItem(ilist[0]) ?
  ilist.map(x => iDiv(x)) : ilist; }"
iDoor: "function iDoor(r1, dir, r2, styles = {}) {\r

  \  r1 = isString(r1) ? Items[r1] : r1;\r

  \  let house = Items[r1.house];\r

  \  r2 = isdef(r2) ? isString(r2) ? Items[r2] : r2 : null;\r

  \  let wall = r2 ? findWall(r1, r2) : isdef(dir) ? findFreeWall(r1,
  r1.walls[dir]) : findFreeWall(r1);\r

  \  if (wall.door) { errlog('there is already a door between', r1.id, 'and',
  r2); return; }\r

  \  let szDoor = valf(styles.szDoor, house.szDoor);\r

  \  let bg = valf(styles.bg, house.bg);\r

  \  let dParent = iDiv(house);\r

  \  let wr = wall.rect;\r

  \  if (nundef(r2) && wall.room) { r2 = Items[wall.room]; }\r

  \  let dr = jsCopy(wr);\r

  \  let or = wall.dir == 'e' || wall.dir == 'w' ? 'v' : 'h';\r

  \  if (or == 'v') {\r

  \    let len = wr.h;\r

  \    let offy = (len - szDoor) / 2;\r

  \    dr.y = dr.t = dr.t + offy;\r

  \    dr.h = szDoor;\r

  \  } else {\r

  \    let len = wr.w;\r

  \    let offx = (len - szDoor) / 2;\r

  \    dr.x = dr.l = dr.l + offx;\r

  \    dr.w = szDoor;\r

  \  }\r

  \  let id = getDoorId(r1.id, r2 ? r2.id : house.id);\r

  \  let door = { rooms: [r1.id], rect: dr, id: id, or: or };\r

  \  if (r2) { r2.doors.push(id); door.rooms.push(r2.id); } else {
  house.doors.push(id); }\r

  \  r1.doors.push(id);\r

  \  let stylesPlus = { position: 'absolute', left: dr.x, top: dr.y, w: dr.w,
  h: dr.h, bg: bg };\r

  \  copyKeys(stylesPlus, styles);\r

  \  d = mDiv(dParent, styles);\r

  \  iAdd(door, { div: d });\r

  \  return door;\r

  }"
iDov: "function iDov(item) { return isdef(item.live) ? item.live.overlay : null; }"
if_hotseat_autoswitch: "function if_hotseat_autoswitch(result) {\r

  \  if (isdef(result.table) && isdef(Z) && Z.mode == 'hotseat') {\r

  \    let turn = lookup(result, ['table', 'fen', 'turn']);\r

  \    assertion(isdef(turn), 'turn is NOT defined (_sendSIMSIM) !!!!');\r

  \    let uname = turn.length == 1 ? turn[0] : arrNext(turn, U.name);\r

  \    if (uname != U.name) switch_uname(uname);\r

  \  }\r

  }"
if_plural: "function if_plural(n) { return n == 1 ? '' : 's'; }"
if_stringified: "function if_stringified(obj) { return is_stringified(obj) ?
  JSON.parse(obj) : obj; }"
if_stringified_or_dict: "function if_stringified_or_dict(obj) { return
  nundef(obj) ? {} : is_stringified(obj) ? JSON.parse(obj) : obj; }"
if_stringified_or_list: "function if_stringified_or_list(obj) { return
  nundef(obj) ? [] : is_stringified(obj) ? JSON.parse(obj) : obj; }"
if_stringified_or_string: "function if_stringified_or_string(obj) { return
  nundef(obj) ? '' : is_stringified(obj) ? JSON.parse(obj) : obj; }"
iFace: "function iFace(item, faceUp) { if (isdef(faceUp)) faceUp ? iFaceUp(item)
  : iFaceDown(item); }"
iFaceDown: function iFaceDown(item) { Card52.turnFaceDown(item); }
iFaceUp: function iFaceUp(item) { Card52.turnFaceUp(item); }
iFromRowCol: function iFromRowCol(row, col, rows, cols) { return row * cols + col; }
iG: "function iG(i) { return isdef(i.live) ? i.live.g : isdef(i.g) ? i.g : i; }"
iGet: function iGet(item, key) { return item[key]; }
iGetl: function iGetl(item, key) { return item.live[key]; }
iGrid: "function iGrid(rows, cols, dParent, styles) {\r

  \  styles.display = 'inline-block';\r

  \  let items = [];\r

  \  let index = 0;\r

  \  for (let i = 0; i < rows; i++) {\r

  \    for (let j = 0; j < cols; j++) {\r

  \      let d = mDiv(dParent, styles);\r

  \      let item = { row: i, col: j, index: index };\r

  \      index += 1;\r

  \      iAdd(item, { div: d });\r

  \      items.push(item);\r

  \    }\r

  \    mLinebreak(dParent);\r

  \  }\r

  \  return items;\r

  }"
iH00: "function iH00(iarr, dParent, styles, id) {\r

  \  function iH00Zone(dTable, nmax = 7, padding = 10) {\r

  \    let sz = netHandSize(nmax);\r

  \    return mZone(dTable, { wmin: sz.w, h: sz.h, padding: padding });\r

  \  }\r

  \  let h = isdef(Items[id]) ? Items[id] : { arr: iarr, styles: styles, id:
  id };\r

  \  if (nundef(h.zone)) h.zone = iH00Zone(dParent); else
  clearElement(h.zone);\r

  \  let items = i52(iarr);\r

  \  h.iHand = iSplay(items, h.zone);\r

  \  return h;\r

  }"
iH00_dep: "function iH00_dep(iarr, dParent, styles, id) {\r

  \  function iH00Zone(dTable, nmax = 3, padding = 10) {\r

  \    let sz = netHandSize(nmax);\r

  \    return mZone(dTable, { wmin: sz.w, h: sz.h, padding: padding, rounding:
  10 });\r

  \  }\r

  \  let data = DA[id] = {};\r

  \  let h = data.deck = new DeckClass();\r

  \  h.init(iarr);\r

  \  h = data;\r

  \  if (nundef(h.zone)) h.zone = iH00Zone(dParent); else
  clearElement(h.zone);\r

  \  if (nundef(h.iHand)) {\r

  \    let items = i52(h.deck.cards());\r

  \    h.iHand = iSplay(items, h.zone);\r

  \  } else if (redo) {\r

  \    clearElement(h.zone);\r

  \    let items = i52(h.deck.cards());\r

  \    h.iHand = iSplay(items, h.zone);\r

  \  }\r

  \  return h;\r

  }"
iH01: "function iH01(iarr, dParent, styles, id, overlap) {\r

  \  function iH01Zone(dTable, nmax = 3, padding = 10) {\r

  \    let sz = netHandSize(nmax);\r

  \    return mZone(dTable, { wmin: sz.w, h: sz.h, padding: padding });\r

  \  }\r

  \  let h = isdef(Items[id]) ? Items[id] : { arr: iarr, styles: styles, id:
  id };\r

  \  if (nundef(h.zone)) h.zone = iH01Zone(dParent); else
  clearElement(h.zone);\r

  \  let items = i52(iarr);\r

  \  h.iHand = iSplay(items, h.zone, {}, 'right', overlap);\r

  \  return h;\r

  }"
iHand52: "function iHand52(i) {\r

  \  let hand = iSplay(i, dTable);\r

  }"
iHandZone: "function iHandZone(dParent, styles, nmax) {\r

  \  if (nundef(styles)) styles = { bg: 'random', rounding: 10 };\r

  \  if (isdef(nmax)) {\r

  \    console.log('nmax', nmax)\r

  \    let sz = netHandSize(nmax);\r

  \    styles.w = sz.w;\r

  \    styles.h = sz.h;\r

  \  }\r

  \  return mZone(dParent, styles);\r

  }"
iHandZone_test: "function iHandZone_test(dTable, nmax = 10, padding = 10) {\r

  \  let sz = netHandSize(nmax);\r

  \  return mZone(dTable, { wmin: sz.w, h: sz.h, bg: 'random', padding:
  padding, rounding: 10 });\r

  }"
iHexboard: "function iHexboard(cols = 3, rows = 3, a = 48) {\r

  \  let sq3 = Math.sqrt(3);\r

  \  let wp = a / 4, hp = a / 4, h = sq3 * a / 2;\r

  \  let [xoff, dx, yoff, dy] = [h + wp / 2, 2 * h, hp / 2, a / 2];\r

  \  let ys = 2 + 3 * rows;\r

  \  let xs = cols;\r

  \  let x = xoff, y = yoff;\r

  \  let pts = [];\r

  \  let infos = [];\r

  \  let idx = 0;\r

  \  let yEven = true;\r

  \  for (let i = 0; i < ys; i++) {\r

  \    let tcolOffset = yEven ? 1 : 0;\r

  \    let isCenterRow = i >= 2 && ((i - 2) % 3) == 0;\r

  \    for (let j = 0; j < xs + (1 - tcolOffset); j++) {\r

  \      let pt = { x: x, y: y };\r

  \      pts.push(pt);\r

  \      infos.push({ index: idx, tcol: tcolOffset + 2 * j, trow: i, x: x, y:
  y, pt: pt, isCenterRow: isCenterRow, isHexCenter: isCenterRow, isCenterCol: j
  % 2 == 1 });\r

  \      x += dx;\r

  \      idx += 1;\r

  \    }\r

  \    yEven = !yEven;\r

  \    y += dy; x = i % 2 ? xoff : wp / 2;\r

  \  }\r

  \  let byrc = {};\r

  \  for (const i of infos) {\r

  \    lookupSet(byrc, [i.trow, i.tcol], i.index);\r

  \  }\r

  \  let byxy = {};\r

  \  let adjList = [];\r

  \  let di = {};\r

  \  for (const info of infos) {\r

  \    let [r, c] = [info.trow, info.tcol];\r

  \    info.nodes = [\r

  \      lookup(byrc, [r - 2, c]),\r

  \      lookup(byrc, [r - 1, c + 1]),\r

  \      lookup(byrc, [r + 1, c + 1]),\r

  \      lookup(byrc, [r + 2, c]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \    ];\r

  \    for (let i = 0; i < 6; i++) {\r

  \      let n1 = info.nodes[i];\r

  \      if (n1 == null) continue;\r

  \      let n2 = info.nodes[(i + 1 % 6)];\r

  \      if (n2 == null) continue;\r

  \      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;\r

  \      lookupSet(di, [n1, n2], true);\r

  \      adjList.push([n1, n2]);\r

  \    }\r

  \    info.neighbors = [\r

  \      lookup(byrc, [r - 3, c + 1]),\r

  \      lookup(byrc, [r, c + 2]),\r

  \      lookup(byrc, [r + 3, c + 1]),\r

  \      lookup(byrc, [r + 3, c - 1]),\r

  \      lookup(byrc, [r, c - 2]),\r

  \      lookup(byrc, [r - 3, c - 1]),\r

  \    ];\r

  \  }\r

  \  let boardItem = { dx: dx, dy: dy, rows: rows, cols: cols, count:
  infos.length, adjList: adjList, byrc: byrc, pts: pts, items: infos };\r

  \  return boardItem;\r

  }"
iHigh: "function iHigh(item) { let d = iDiv(item); mStyle(d, { bg: 'darkgray' }); }"
iHighlight: function iHighlight(item) { let d = iDov(item); mClass(d, 'overlaySelected'); }
iHouse: "function iHouse(dParent, ns = 1, styles = { w: 500, h: 400 }) {\r

  \  let d = mDiv(dParent, { display: 'inline-grid', position: 'relative',
  box: true });\r

  \  ns = isNumber(ns) ? d.style.gridTemplateAreas = getLayoutSample(ns) : ns;
  //'\"z z d\" \"a a c\" \"a a c\"';// getLayoutSample(3);\r

  \  let s = d.style.gridTemplateAreas = ns;\r

  \  let letterList = filterDistinctLetters(s);\r

  \  let wallWidth = valf(styles.gap, 4);\r

  \  let lines = s.split('\"').filter(x => !isWhiteSpaceString(x));\r

  \  let cols = lines[0].split(' ').length;\r

  \  let rows = lines.length;\r

  \  let wHouse = Math.round(styles.w / cols) * cols + wallWidth * cols + 1;\r

  \  let hHouse = Math.round(styles.h / rows) * rows + wallWidth * rows + 1;\r

  \  d.style.gridTemplateRows = `repeat(${rows}, 1fr)`;\r

  \  d.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;\r

  \  let szDoor = valf(styles.szDoor, 40);\r

  \  let [wallColor, floorColor] = [valf(styles.fg, 'white'), valf(styles.bg,
  BLUE)];\r

  \  mStyleX(d, { bg: wallColor, w: wHouse, h: hHouse, gap: wallWidth,
  padding: wallWidth });\r

  \  let rooms = [];\r

  \  for (const ch of letterList) {\r

  \    let r = iRoom(d, ch, { bg: floorColor });\r

  \    rooms.push(r);\r

  \  }\r

  \  let house = { rect: getRect(d), fg: wallColor, bg: floorColor, doors: [],
  rooms: rooms.map(x => x.id), roomLetters: letterList, szDoor: szDoor,
  wallWidth: wallWidth };\r

  \  house.roomsByLetter = {};\r

  \  rooms.map(x => house.roomsByLetter[x.ch] = x.id);\r

  \  iAdd(house, { div: d });\r

  \  rooms.map(x => x.house = house.id);\r

  \  roomAdjacency(house);\r

  \  return house;\r

  }"
iInit: "function iInit(dParent, item) {\r

  \  if (is_canvas(dParent)) draw_on_canvas(dParent.cx, item);\r

  \  else draw_on_div(dParent, item);\r

  }"
iLabel: "function iLabel(i) { return isdef(i.live) ? i.live.dLabel :
  isdef(i.dLabel) ? i.dLabel : null; }"
iLabyrint: "function iLabyrint(dParent, cols, rows, styles = { w: 800, h: 400 })
  {\r

  \  let d = mDiv(dParent, { display: 'inline-grid', position: 'relative',
  box: true });\r

  \  ns = isNumber(ns) ? d.style.gridTemplateAreas = getLayoutSample(ns) : ns;
  //'\"z z d\" \"a a c\" \"a a c\"';// getLayoutSample(3);\r

  \  let s = d.style.gridTemplateAreas = ns;\r

  \  let letterList = filterDistinctLetters(s);\r

  \  let wallWidth = valf(styles.gap, 4);\r

  \  let lines = s.split('\"').filter(x => !isWhiteSpaceString(x));\r

  \  let wHouse = Math.round(styles.w / cols) * cols + wallWidth * cols + 1;\r

  \  let hHouse = Math.round(styles.h / rows) * rows + wallWidth * rows + 1;\r

  \  d.style.gridTemplateRows = `repeat(${rows}, 1fr)`;\r

  \  d.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;\r

  \  let szDoor = valf(styles.szDoor, 40);\r

  \  let [wallColor, floorColor] = [valf(styles.fg, 'white'), valf(styles.bg,
  BLUE)];\r

  \  mStyleX(d, { bg: wallColor, w: wHouse, h: hHouse, gap: wallWidth,
  padding: wallWidth });\r

  \  let rooms = [];\r

  \  for (const ch of letterList) {\r

  \    let r = iRoom(d, ch, { bg: floorColor });\r

  \    rooms.push(r);\r

  \  }\r

  \  let house = { rect: getRect(d), fg: wallColor, bg: floorColor, doors: [],
  rooms: rooms.map(x => x.id), roomLetters: letterList, szDoor: szDoor,
  wallWidth: wallWidth };\r

  \  house.roomsByLetter = {};\r

  \  rooms.map(x => house.roomsByLetter[x.ch] = x.id);\r

  \  iAdd(house, { div: d });\r

  \  rooms.map(x => x.house = house.id);\r

  \  roomAdjacency(house);\r

  \  return house;\r

  }"
iLetters: "function iLetters(s, dParent, style) {\r

  \  let d = mDiv(dParent);\r

  \  for (let i = 0; i < s.length; i++) {\r

  \    let d1 = mDiv(d);\r

  \    d1.innerHTML = s[i];\r

  \    mStyleX(d1, style);\r

  \  }\r

  \  return d;\r

  }"
image_show: "function image_show(e) {\r

  \  var image = e.target.src;\r

  \  var image_viewer = mBy(\"image_viewer\");\r

  \  image_viewer.innerHTML = \"<img src='\" + image + \"' style='width:100%'
  />\";\r

  \  image_viewer.className = \"image_on\";\r

  }"
imageFileTests: "function imageFileTests() {\r

  \  initTable(); Items = {};\r

  \  Socket = io(SERVERURL);\r

  \  let item = mFileInput(dTable);\r

  \  mLinebreak(dTable, 25);\r

  \  let btn = mButton('upload', () => mSocketUploadImage(item, Socket),
  dTable);\r

  }"
iMagnify: function iMagnify(perle) { mMagnify(null, perle); }
iMagnifyCancel: function iMagnifyCancel() { mCancelMagnify(); }
iMagnifyX: "function iMagnifyX(ui, item, pos) {\r

  \  let path = item.path;\r

  \  if (isdef(MAGNIFIER_IMAGE) && MAGNIFIER_IMAGE.src == path) {\r

  \    console.log('schon offen!!!')\r

  \    return;\r

  \  } else if (isdef(MAGNIFIER_IMAGE)) mCancelMagnify();\r

  \  let imgSize = 514, fontSize = 24;\r

  \  let [w, h, fz] = [imgSize, imgSize + fontSize + 10, fontSize];\r

  \  let dPresent = MAGNIFIER_IMAGE = mDiv(document.body, { bg: HeaderColor,
  position: 'absolute', left: 0, top: 0, w: w, h: h });\r

  \  let d = dPresent;\r

  \  let dText = mText(item.text, d, { color: 'white', fz: fz });\r

  \  let dImage = mDiv(d, { rounding: '50%', w: w, h: w });\r

  \  mCenterCenterFlex(dImage);\r

  \  let img1 = mImg(path, dImage, {});\r

  \  mCenterCenterFlex(dPresent);\r

  }"
iMakeHand: "function iMakeHand(iarr, dParent, styles, id) {\r

  \  let data = DA[id] = {};\r

  \  let h = data.deck = new DeckClass();\r

  \  h.init(iarr);\r

  \  iPresentHand(data, dParent, styles);\r

  \  return data;\r

  }"
iMakeHand_test: "function iMakeHand_test(dParent, iarr, id) {\r

  \  let data = DA[id] = {};\r

  \  let h = data.deck = new DeckClass();\r

  \  h.init(iarr);\r

  \  iPresentHand_test(dParent, data);\r

  \  return data;\r

  }"
iMeasure: "function iMeasure(item, sizingOptions) {\r

  \  if (nundef(iDiv(item))) return;\r

  \  setRect(iDiv(item), valf(sizingOptions, { hgrow: true, wgrow: true }));\r

  }"
iMenuLine: "function iMenuLine(dParent, styles) {\r

  \  let d = mRow(dParent, styles);\r

  \  console.log('d', d)\r

  \  let item = mItem('dMenu', { div: d }, { type: 'menu' });\r

  \  return item;\r

  }"
iMenuSidebarDiv: "function iMenuSidebarDiv(dParent, options) {\r

  \  let d0 = mDiv100(dParent, options.outerStyles);\r

  \  setRect(d0);\r

  \  let dMenu = mDiv(d0, options.menuStyles);\r

  \  let b = mButton(options.bCaption, null, dMenu, options.bStyles,
  'mybutton', getUID('b'));\r

  \  setRect(dMenu, { hfix: true, wgrow: true });\r

  \  let st = options.innerStyles;\r

  \  st.position = 'relative';\r

  \  st.h = d0.rect.h - dMenu.rect.h - valf(st.matop, 0);\r

  \  let d = mDiv(d0, options.innerStyles);\r

  \  let dSide = mDiv(d, options.sbStyles);\r

  \  let dContent = mDiv(d, options.divStyles, getUID());\r

  \  let sb = iSidebar(dSide, dContent, b, 120, false);\r

  \  let item = mItem(getUID('comp'), { div: d0, button: b, dMenu: dMenu,
  sidebar: sb, dContent: dContent }, { type: 'component' });\r

  \  return item;\r

  }"
iMessage: function iMessage(item, msg) { let dm = diMessage(item); if
  (isdef(dm)) dm.innerHTML = msg; }
img_html: "function img_html(filename, fulldim = 'height') {\r

  \  return `<img ${fulldim}='100%' src='../rechnung/images/${filename}'>`;\r

  }"
iMoveFromTo: "function iMoveFromTo(item, d1, d2, callback, offset) {\r

  \  let bi = iBounds(item);\r

  \  let b1 = iBounds(d1);\r

  \  let b2 = iBounds(d2);\r

  \  if (nundef(offset)) offset = { x: 0, y: 0 };\r

  \  let dist = { x: b2.x - b1.x + offset.x, y: b2.y - b1.y + offset.y };\r

  \  item.div.style.zIndex = 100;\r

  \  let a = aTranslateBy(item.div, dist.x, dist.y, 500);\r

  \  a.onfinish = () => { mAppend(d2, item.div); item.div.style.zIndex =
  item.z = iZMax(); if (isdef(callback)) callback(); };\r

  }"
iMoveFromToPure: "function iMoveFromToPure(item, d1, d2, callback, offset) {\r

  \  let bi = iBounds(item);\r

  \  let b1 = iBounds(d1);\r

  \  let b2 = iBounds(d2);\r

  \  if (nundef(offset)) offset = { x: 0, y: 0 };\r

  \  let dist = { x: b2.x - b1.x + offset.x, y: b2.y - b1.y + offset.y };\r

  \  item.div.style.zIndex = 100;\r

  \  let a = aTranslateBy(item.div, dist.x, dist.y, 500);\r

  \  a.onfinish = () => { if (isdef(callback)) callback(); };\r

  }"
in_game: function in_game() { return isdef(mBy('table')) && Session.in_game ==
  `${Session.cur_user} ${Session.cur_tid}`; }
in_game_off: function in_game_off() { Session.in_game = null; }
in_game_on: function in_game_on() { Session.in_game = `${Session.cur_user}
  ${Session.cur_tid}`; }
in_game_open_prompt: function in_game_open_prompt() { return uiActivated &&
  Session.in_prompt == `${Session.cur_user} ${Session.cur_tid}`; }
in_game_open_prompt_off: function in_game_open_prompt_off() { Session.in_prompt = null; }
in_game_open_prompt_on: function in_game_open_prompt_on() { Session.in_prompt =
  `${Session.cur_user} ${Session.cur_tid}`; }
inc_g_index: function inc_g_index() { set_g_index(G.i + 1); }
inc_handsize: "function inc_handsize(fen, uname) {\r

  \  let pl = fen.players[uname];\r

  \  pl.handsize = Number(pl.handsize) + 1;\r

  \  return pl.handsize;\r

  }"
inc_level_on_winstreak: "function inc_level_on_winstreak(winners, game) {\r

  \  for (const w of winners) {\r

  \    let o = lookup(DB.users, [w, 'games', game]);\r

  \    console.assert(isdef(o), 'no DB.users record for game', game);\r

  \    o.winstreak = DB.users[w].games[game].winstreak = isdef(o.winstreak) ?
  o.winstreak + 1 : 1;\r

  \    if (o.winstreak >= 1) {\r

  \      let currentlevel = get_startlevel(w, game);\r

  \      lookupSetOverride(DB.users, [w, 'games', game, 'startlevel'],
  Math.min(currentlevel + 1, Session.maxlevel));\r

  \      delete o.winstreak;\r

  \    }\r

  \  }\r

  }"
inc_player_score: function inc_player_score(plname) { ensure_score(plname);
  return Z.fen.players[plname].score += 1; }
incInput: "function incInput(inp, n = 1) {\r

  \  let val = Number(inp.innerHTML);\r

  \  val += n;\r

  \  inp.innerHTML = val;\r

  }"
includesAnyOf: function includesAnyOf(s, slist) { for (const l of slist) { if
  (s.includes(l)) return true; } return false; }
increase_handicap_if_losestreak: "function
  increase_handicap_if_losestreak(losers, game) {\r

  \  console.log('winners', losers);\r

  \  for (const w of losers) {\r

  \    let o = lookupSet(DB.users, [w, 'games', game], {});\r

  \    if (nundef(o.losestreak)) o.losestreak = 1; else o.losestreak += 1;\r

  \    if (o.losestreak >= 1) {\r

  \      lookupSetOverride(o, ['startlevel'], Math.max(o.startlevel - 1,
  0));\r

  \      o.losestreak = 0;\r

  \      console.log('...startlevel of', w, 'is decreased to',
  get_startlevel(w, game));\r

  \    }\r

  \  }\r

  }"
incrementSimulation: "function incrementSimulation() {\r

  \  if (mouse.down) {\r

  \    var dx = mouse.x - circle.x,\r

  \      dy = mouse.y - circle.y,\r

  \      distance = Math.sqrt(dx * dx + dy * dy),\r

  \      unitX = dx / distance,\r

  \      unitY = dy / distance,\r

  \      force = distance * mousePullStrength;\r

  \    circle.vx += unitX * force;\r

  \    circle.vy += unitY * force;\r

  \  }\r

  \  circle.vy += gravity;\r

  \  circle.vx *= dampening;\r

  \  circle.vy *= dampening;\r

  \  circle.x += circle.vx;\r

  \  circle.y += circle.vy;\r

  \  if (circle.y + radius > canvas.height) {\r

  \    circle.y = canvas.height - radius;\r

  \    circle.vy = - Math.abs(circle.vy);\r

  \  }\r

  \  else if (circle.y - radius < 0) {\r

  \    circle.y = radius;\r

  \    circle.vy = Math.abs(circle.vy);\r

  \  }\r

  \  if (circle.x + radius > canvas.width) {\r

  \    circle.x = canvas.width - radius;\r

  \    circle.vx = - Math.abs(circle.vx);\r

  \  }\r

  \  else if (circle.x - radius < 0) {\r

  \    circle.x = radius;\r

  \    circle.vx = Math.abs(circle.vx);\r

  \  }\r

  }"
indexDiff: "function indexDiff(a, b, s) {\r

  \  let ia = s.indexOf(a);\r

  \  let ib = s.indexOf(b);\r

  \  console.log('index of', a, 'is', ia)\r

  \  console.log('index of', b, 'is', ib)\r

  \  return ia - ib;\r

  }"
indexOfAny: "function indexOfAny(s, list, pos) {\r

  \  let min = 1000000;\r

  \  let match = null;\r

  \  for (const w of list) {\r

  \    let i = s.indexOf(w, pos);\r

  \    if (i >= 0 && i < min) { min = i; match = w; }\r

  \  }\r

  \  return match ? [min, match] : [-1, null];\r

  }"
indexOfFuncMax: "function indexOfFuncMax(arr, prop, f) {\r

  \  let max = null;\r

  \  let imax = null;\r

  \  for (const [i, v] of arr.entries()) {\r

  \    let val = isdef(prop) && isdef(v[prop]) ? v[prop] : v;\r

  \    if (isdef(f)) val = f(val);\r

  \    if (max == null || val > max) { max = val; imax = i }\r

  \  }\r

  \  return { i: imax, val: max };\r

  }"
indexOfFuncMin: "function indexOfFuncMin(arr, prop, f) {\r

  \  let min = null;\r

  \  let imax = null;\r

  \  for (const [i, v] of arr.entries()) {\r

  \    let val = isdef(prop) && isdef(v[prop]) ? v[prop] : v;\r

  \    if (isdef(f)) val = f(val);\r

  \    if (min == null || val < min) { min = val; imax = i }\r

  \  }\r

  \  return { i: imax, val: min };\r

  }"
indexOfMax: "function indexOfMax(arr, prop) {\r

  \  let max = null;\r

  \  let imax = null;\r

  \  for (const [i, v] of arr.entries()) {\r

  \    if (prop) {\r

  \      if (max == null || v[prop] > max) {\r

  \        max = v[prop];\r

  \        imax = i;\r

  \      } else {\r

  \        if (max == null || v > max) {\r

  \          max = v;\r

  \          imax = i;\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  return { i: imax, val: max };\r

  }"
indexOfMin: "function indexOfMin(arr, prop) {\r

  \  let min = null;\r

  \  let imin = null;\r

  \  for (const [i, v] of arr.entries()) {\r

  \    if (prop) {\r

  \      if (min == null || lookup(v, [prop]) < min) {\r

  \        min = v[prop];\r

  \        imin = i;\r

  \      }\r

  \    } else {\r

  \      if (min == null || v < min) {\r

  \        min = v;\r

  \        imin = i;\r

  \      }\r

  \    }\r

  \  }\r

  \  return { i: imin, val: min };\r

  }"
inferPlayerColorFromNameOrInit: "function inferPlayerColorFromNameOrInit(plid,
  index) {\r

  \  let cname = plid.toLowerCase();\r

  \  if (cname in playerColors) return playerColors[cname];\r

  \  if (nundef(index)) index = 0;\r

  \  let ckeys = getKeys(playerColors);\r

  \  return playerColors[ckeys[index] % playerColors.length];\r

  }"
inferType: "function inferType(val) {\r

  \  for (const t of ['region', 'power', 'unit', 'faction']) {\r

  \    if (isType(t, val)) {\r

  \      return t;\r

  \    }\r

  \  }\r

  \  return 'unknown';\r

  }"
info_from_fen: "function info_from_fen(fen) {\r

  \  let all_attrs = gSet_attributes();\r

  \  let keys = get_keys(all_attrs);\r

  \  let info = {};\r

  \  for (let i = 0; i < fen.length; i++) {\r

  \    let prop = keys[i];\r

  \    let val = all_attrs[prop][Number(fen[i])];\r

  \    info[prop] = val;\r

  \  }\r

  \  return info;\r

  }"
infoHasNumber: "function infoHasNumber(info) {\r

  \  let ws = info.words;\r

  \  return firstCond(ws, x => isNumber(x));\r

  }"
infoHasNumberOrTimeString: "function infoHasNumberOrTimeString(info) {\r

  \  return infoHasNumber(info) || infoHasTimeString(info);\r

  }"
infoHasTimeString: "function infoHasTimeString(info) {\r

  \  let ws = info.words;\r

  \  return firstCond(ws, x => isTimeString(x));\r

  }"
infoLayout: "function infoLayout(n, R) {\r\n}"
infoToItem: "function infoToItem(x) { let item = { info: x, key: x.key };
  item.id = iRegister(item); return item; }"
init: "function init() {\r

  \  createPeeps()\r

  \  resize()\r

  \  gsap.ticker.add(render)\r

  \  window.addEventListener('resize', resize)\r

  }"
init_internet: function init_internet() { DA.internet = navigator.onLine; }
init_keyhandlers: "function init_keyhandlers() {\r

  \  onkeyup = onkeyupHandler;\r

  }"
init_table: "function init_table() {\r

  \  dTable = mBy('dTable'); mStyle(dTable, { box: true, padding: 10, hmin:
  500, w: '100%' });\r

  }"
initActionPanel: "function initActionPanel() {\r

  \  show('dLeftSide');\r

  \  let dParent = mBy('dLeftSide');\r

  \  clearElement(dParent);\r

  \  dLeiste = mDiv(dParent);\r

  \  mStyle(dLeiste, { wmin: 70, hmin: '100%', display: 'flex', 'flex-flow':
  'column wrap' });\r

  }"
initAutoplayToActionButtons: "function initAutoplayToActionButtons() {\r

  \  if (S.settings.game == 'catan') setKeys(S.settings, ['dev', 'keywords',
  'action'], { buy: 'buy devcard', hex: 'place robber', Corner: 'settlement or
  city', Edge: 'road' })\r

  \  else setKeys(S.settings, ['dev', 'keywords', 'action'], {});\r

  \  let d = document.getElementById('a_d_autoplay_buttons');\r

  \  let buttons = [...d.children];\r

  \  let defaultIds = ['c_b_NextPlayer', 'c_b_NextTurn'];\r

  \  let kws = lookup(S.settings, ['dev', 'keywords', 'action']);\r

  \  if (!kws) kws = {};\r

  \  let kwKeys = getKeys(kws);\r

  \  let requiredButtonIds = kwKeys.map(x => 'c_b_RTA_' +
  x).concat(defaultIds);\r

  \  let actualButtons = buttons.filter(x => x.id).map(x => x.id);\r

  \  for (const id of arrMinus(actualButtons, requiredButtonIds)) $('#' +
  id).remove();\r

  \  for (const id of arrMinus(requiredButtonIds, actualButtons)) {\r

  \    let b = document.createElement('button');\r

  \    let key = id.substring(8);\r

  \    b.innerHTML = kws[key];\r

  \    b.id = id;\r

  \    b.onclick = () => onClickRunToAction(b.id, id);\r

  \    d.appendChild(b);\r

  \  }\r

  }"
initAux: "function initAux() {\r

  \  dAux = mBy('dAux');\r

  }"
InitBoardSquares: "function InitBoardSquares() {\r

  \  var light = 0;\r

  \  var rankName;\r

  \  var fileName;\r

  \  var divString;\r

  \  var lightString;\r

  \  var lastLight = 0;\r

  \  for (rankIter = RANKS.RANK_8; rankIter >= RANKS.RANK_1; rankIter--) {\r

  \    light = lastLight ^ 1;\r

  \    lastLight ^= 1;\r

  \    rankName = \"rank\" + (rankIter + 1);\r

  \    for (fileIter = FILES.FILE_A; fileIter <= FILES.FILE_H; fileIter++) {\r

  \      fileName = \"file\" + (fileIter + 1);\r

  \      if (light == 0) lightString = \"Light\";\r

  \      else lightString = \"Dark\";\r

  \      divString = \"<div class=\\\"Square clickElement \" + rankName + \"
  \" + fileName + \" \" + lightString + \"\\\"/>\";\r

  \      light ^= 1;\r

  \      $(\"#ChessBoard\").append(divString);\r

  \    }\r

  \  }\r

  }"
initBoardSquares: "function initBoardSquares() {\r

  \  var light = 0;\r

  \  var rowName;\r

  \  var colName;\r

  \  var divString;\r

  \  var lightString;\r

  \  var lastLight = 0;\r

  \  for (rowIter = ROWS.ROW_8; rowIter >= ROWS.ROW_1; rowIter--) {\r

  \    light = lastLight ^ 1;\r

  \    lastLight ^= 1;\r

  \    rowName = \"row\" + (rowIter + 1);\r

  \    for (colIter = COLUMNS.COL_A; colIter <= COLUMNS.COL_H; colIter++) {\r

  \      colName = \"col\" + (colIter + 1);\r

  \      if (light == 0) lightString = \"Light\";\r

  \      else lightString = \"Dark\";\r

  \      divString = \"<div class=\\\"Square clickElement \" + rowName + \" \"
  + colName + \" \" + lightString + \"\\\"/>\";\r

  \      light ^= 1;\r

  \      $(\"#Board\").append(divString);\r

  \    }\r

  \  }\r

  }"
InitBoardVars: "function InitBoardVars() {\r

  \  var index = 0;\r

  \  for (index = 0; index < MAXGAMEMOVES; index++) {\r

  \    brd_history.push({\r

  \      move: NOMOVE,\r

  \      castlePerm: 0,\r

  \      enPas: 0,\r

  \      fiftyMove: 0,\r

  \      posKey: 0\r

  \    });\r

  \  }\r

  \  for (index = 0; index < PVENTRIES; index++) {\r

  \    brd_PvTable.push({\r

  \      move: NOMOVE,\r

  \      posKey: 0\r

  \    });\r

  \  }\r

  }"
InitColsRowsBrd: "function InitColsRowsBrd() {\r

  \  var index = 0;\r

  \  var col = COLUMNS.COL_A;\r

  \  var row = ROWS.ROW_1;\r

  \  var sq = SQUARES.A1;\r

  \  var sq64 = 0;\r

  \  for (index = 0; index < BRD_SQ_NUM; ++index) {\r

  \    ColBrd[index] = SQUARES.OFFBOARD;\r

  \    RowBrd[index] = SQUARES.OFFBOARD;\r

  \  }\r

  \  for (row = ROWS.ROW_1; row <= ROWS.ROW_8; ++row) {\r

  \    for (col = COLUMNS.COL_A; col <= COLUMNS.COL_H; ++col) {\r

  \      sq = fromRCMxToNumArrSq(col, row);\r

  \      ColBrd[sq] = col;\r

  \      RowBrd[sq] = row;\r

  \    }\r

  \  }\r

  }"
initCrowd: "function initCrowd() {\r

  \  while (availablePeeps.length) {\r

  \    addPeepToCrowd().walk.progress(Math.random())\r

  \  }\r

  }"
initDom: "function initDom() {\r

  \  ROOT = makeRoot();\r

  \  createMSTree(ROOT);\r

  \  simpleColors(S.settings.color.theme);\r

  \  measureMSTree(ROOT);\r

  \  if (!firstDomLoad) {\r

  \    initZoom();\r

  \    zoom_on_resize('a_d_header');\r

  \    zoom_on_wheel_alt();\r

  \    firstDomLoad = true;\r

  \  }\r

  }"
InitFilesRanksBrd: "function InitFilesRanksBrd() {\r

  \  var index = 0;\r

  \  var file = FILES.FILE_A;\r

  \  var rank = RANKS.RANK_1;\r

  \  var sq = SQUARES.A1;\r

  \  var sq64 = 0;\r

  \  for (index = 0; index < BRD_SQ_NUM; ++index) {\r

  \    FilesBrd[index] = SQUARES.OFFBOARD;\r

  \    RanksBrd[index] = SQUARES.OFFBOARD;\r

  \  }\r

  \  for (rank = RANKS.RANK_1; rank <= RANKS.RANK_8; ++rank) {\r

  \    for (file = FILES.FILE_A; file <= FILES.FILE_H; ++file) {\r

  \      sq = FR2SQ(file, rank);\r

  \      FilesBrd[sq] = file;\r

  \      RanksBrd[sq] = rank;\r

  \    }\r

  \  }\r

  }"
initGameScreen: "function initGameScreen() {\r

  \  console.log('IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII!!!!!!!!!!')\r

  \  hide('dMainContent'); hide('dHeader'); show('dButtons');\r

  \  show('dGameScreen');\r

  \  console.log('game should be starting!!!');\r

  \  if (isdef(G)) {\r

  \    console.log('should just go back to game!');\r

  \  } else {\r

  \    _start();\r

  \  }\r

  }"
InitHashKeys: "function InitHashKeys() {\r

  \  var index = 0;\r

  \  for (index = 0; index < 13 * 120; ++index) {\r

  \    PieceKeys[index] = RAND_32();\r

  \  }\r

  \  SideKey = RAND_32();\r

  \  for (index = 0; index < 16; ++index) {\r

  \    CastleKeys[index] = RAND_32();\r

  \  }\r

  }"
initialize_state: "function initialize_state() {\r

  \  let dpop = mBy('dPopup'); dpop.onclick = ev => evNoBubble(ev);\r

  \  onclick = close_popup;\r

  \  onkeyup = keyhandler;\r

  \  let state = localStorage.getItem('boa');\r

  \  if (state) S = JSON.parse(state);\r

  \  else S = { location: null, boa_state: null, bw_state: null,
  master_password: null, score: 0, };\r

  \  S.location = 'home';\r

  \  S.bw_state = 'loggedin';\r

  \  S.boa_state = null;\r

  }"
initLineBottom: "function initLineBottom() {\r

  \  dLineBottomOuter = mDiv(table); dLineBottomOuter.id =
  'lineBottomOuter';\r

  \  dLineBottom = mDiv(dLineBottomOuter); dLineBottom.id = 'lineBottom';\r

  \  dLineBottomLeft = mDiv(dLineBottom); dLineBottomLeft.id =
  'lineBottomLeft';\r

  \  dLineBottomRight = mDiv(dLineBottom); dLineBottomRight.id =
  'lineBottomRight';\r

  \  dLineBottom = mDiv(dLineBottom); dLineBottom.id = 'lineBottomMiddle';\r

  \  mLinebreak(table);\r

  }"
initLineNavi: "function initLineNavi() {\r

  \  dNavi = mBy('freezer');\r

  \  mStyleX(dNavi, { bg: 'navy', margin: 0, padding: 0, pabottom: 4, paleft:
  4 })\r

  \  dLineNaviOuter = mDiv(dNavi); dLineNaviOuter.id = 'lineNaviOuter';\r

  \  dLineNavi = mDiv(dLineNaviOuter); dLineNavi.id = 'lineNavi';\r

  \  dLineNaviLeft = mDiv(dLineNavi); dLineNaviLeft.id = 'lineNaviLeft';\r

  \  dLineNaviRight = mDiv(dLineNavi); dLineNaviRight.id = 'lineNaviRight';\r

  \  dLineNaviMiddle = mDiv(dLineNavi); dLineNaviMiddle.id =
  'lineNaviMiddle';\r

  \  mLinebreak(table);\r

  }"
initLineTable: "function initLineTable() {\r

  \  dLineTableOuter = mDiv(table); dLineTableOuter.id = 'lineTableOuter';\r

  \  dLineTable = mDiv(dLineTableOuter); dLineTable.id = 'lineTable';\r

  \  dLineTableLeft = mDiv(dLineTable); dLineTableLeft.id = 'lineTableLeft';\r

  \  dLineTableMiddle = mDiv(dLineTable); dLineTableMiddle.id =
  'lineTableMiddle';\r

  \  mClass(dLineTableMiddle, 'flexWrap');\r

  \  dLineTableRight = mDiv(dLineTable); dLineTableRight.id =
  'lineTableRight';\r

  \  mLinebreak(table);\r

  }"
initLineTitle: "function initLineTitle() {\r

  \  dLineTitleOuter = mDiv(table); dLineTitleOuter.id = 'lineTitleOuter';\r

  \  dLineTitle = mDiv(dLineTitleOuter); dLineTitle.id = 'lineTitle';\r

  \  if (PROJECTNAME != 'belinda') mStyle(dLineTitle, { matop: 5 });\r

  \  dLineTitleLeft = mDiv(dLineTitle); dLineTitleLeft.id = 'lineTitleLeft';\r

  \  dLineTitleRight = mDiv(dLineTitle); dLineTitleRight.id =
  'lineTitleRight';\r

  \  dLineTitleMiddle = mDiv(dLineTitle); dLineTitleMiddle.id =
  'lineTitleMiddle';\r

  \  mLinebreak(table);\r

  }"
initLineTop: "function initLineTop() {\r

  \  dLineTopOuter = mDiv(table); dLineTopOuter.id = 'lineTopOuter';\r

  \  dLineTop = mDiv(dLineTopOuter); dLineTop.id = 'lineTop';\r

  \  dLineTopLeft = mDiv(dLineTop); dLineTopLeft.id = 'lineTopLeft';\r

  \  dLineTopRight = mDiv(dLineTop); dLineTopRight.id = 'lineTopRight';\r

  \  dLineTopMiddle = mDiv(dLineTop); dLineTopMiddle.id = 'lineTopMiddle';\r

  \  dScore = mDiv(dLineTopMiddle);\r

  \  dScore.id = 'dScore';\r

  \  dLevel = mDiv(dLineTopLeft);\r

  \  dLevel.id = 'dLevel';\r

  \  dGameTitle = mDiv(dLineTopRight);\r

  \  dGameTitle.id = 'dGameTitle';\r

  \  let d = mDiv(dLineTopRight);\r

  \  d.id = 'time';\r

  \  mLinebreak(table);\r

  }"
initLive: function initLive() { Live = {}; }
initLobby: "function initLobby(username) {\r

  \  hide('dGameScreen'); hide('dButtons');\r

  \  show('dMainContent'); show('dLobby'); show('dHeader');
  show('dTempleLobby');\r

  \  setTitle('Welcome to the Lobby');\r

  \  if (isString(username)) { sendLogin(username); console.log('...',
  username) }\r

  \  else username = U.name;\r

  \  sendBtn.onclick = e => {\r

  \    e.preventDefault();\r

  \    if (!messageInput.value) {\r

  \      if (GENERATE_EMPTY_MESSAGES) messageInput.value = 'hallo';\r

  \      else return console.log('must supply a message');\r

  \    }\r

  \    const message = { author: username, date: formatDate(new Date()),
  content: messageInput.value };\r

  \    console.log('sending message', message)\r

  \    sendUserMessage(message);\r

  \    messageInput.value = '';\r

  \  };\r

  }"
initLocalClocks: "function initLocalClocks() {\r

  \  var date = new Date;\r

  \  var seconds = date.getSeconds();\r

  \  var minutes = date.getMinutes();\r

  \  var hours = date.getHours();\r

  \  var hands = [\r

  \    {\r

  \      hand: 'hours',\r

  \      angle: (hours * 30) + (minutes / 2)\r

  \    },\r

  \    {\r

  \      hand: 'minutes',\r

  \      angle: (minutes * 6)\r

  \    },\r

  \    {\r

  \      hand: 'seconds',\r

  \      angle: (seconds * 6)\r

  \    }\r

  \  ];\r

  \  for (var j = 0; j < hands.length; j++) {\r

  \    var elements = document.querySelectorAll('.' + hands[j].hand);\r

  \    for (var k = 0; k < elements.length; k++) {\r

  \      elements[k].style.webkitTransform = 'rotateZ(' + hands[j].angle +
  'deg)';\r

  \      elements[k].style.transform = 'rotateZ(' + hands[j].angle + 'deg)';\r

  \      if (hands[j].hand === 'minutes') {\r

  \        elements[k].parentNode.setAttribute('data-second-angle', hands[j +
  1].angle);\r

  \      }\r

  \    }\r

  \  }\r

  }"
InitMvvLva: "function InitMvvLva() {\r

  \  var Attacker;\r

  \  var Victim;\r

  \  for (Attacker = PIECES.wP; Attacker <= PIECES.bK; ++Attacker) {\r

  \    for (Victim = PIECES.wP; Victim <= PIECES.bK; ++Victim) {\r

  \      MvvLvaScores[Victim * 14 + Attacker] = VictimScore[Victim] + 6 -
  (VictimScore[Attacker] / 100);\r

  \    }\r

  \  }\r

  }"
initOptions: "function initOptions() {\r

  \  setDefaultOptions();\r

  \  S.options.colors = getColors(3);\r

  \  S.options.clickToSelect = true;\r

  \  S.options.tooltips =
  document.getElementById('bTTip').textContent.includes('ON');\r

  \  setPlayMode(S_playMode);\r

  \  if (isdef(S.user.spec)) {\r

  \    for (const k in S.user.spec.OPTIONS) {\r

  \      S.options[k] = S.user.spec.OPTIONS[k];\r

  \    }\r

  \  }\r

  \  initAutoplayToActionButtons();\r

  \  initTextures();\r

  \  setColorPalette(S.options.colors);\r

  }"
initPage: "function initPage() {\r

  \  let colors = ['#27344b', '#485b6c', '#383e48', '#f2f7f8'];\r

  \  mStyle(dMain, { padding: 0, margin: 0 });\r

  \  let dLeft = mDiv(dMain, { hmin: 500, bg: colors[0], flex: 1 },
  'dLeft');\r

  \  let dRight = mDiv(dMain, { hmin: 500, flex: 4 }, 'dRight');\r

  \  let dHeader = mDiv(dRight, { bg: colors[1], align: 'center', h: 70, fz:
  40, family: 'summervibes', position: 'relative' }, 'dHeader', 'My Chat');\r

  \  let dContainer = mDiv(dRight, { display: 'flex' });\r

  \  let dInnerLeft = mDiv(dContainer, { position: 'relative', hmin: 430, bg:
  colors[2], flex: 1 }, 'dInnerLeft');\r

  \  mCenterCenterFlex(dInnerLeft);\r

  \  let dInnerRight = mDiv(dContainer, { transition: `all ${DELAY_PANE}ms
  ease`, hmin: 430, bg: colors[3], flex: 2, align: 'center' }, 'dInnerRight');\r

  \  let dChatWindow = mDiv(dInnerRight, { display: 'none', 'overflow-x':
  'hidden', 'overflow-y': 'auto', padding: 10, fg: 'black', align: 'left' },
  'dChatWindow');\r

  \  let dGameWindow = mDiv(dInnerRight, { display: 'none', overflow: 'hidden'
  }, 'dGameWindow');\r

  \  let dUserInfo = mDiv(dLeft, { padding: 10, align: 'center' },
  'dUserInfo');\r

  \  let dToolbar = mDiv(dLeft, { matop: 40, align: 'center' });\r

  \  for (const t of ['Games', 'Tables', 'Chat', 'Contacts', 'Account']) {\r

  \    let text = t + ` <img src=\"../base/assets/images/icons/${t}.png\"
  height=\"90%\" style=\"float:right\"/>`;\r

  \    let dLabel = mLabel(text, dToolbar, { padding: 5, cursor: 'pointer', w:
  '100%', h: 30, display: 'block', 'border-bottom': 'solid thin #ffffff55' });\r

  \    dLabel.onclick = () => window['onClickMenu'](t.toLowerCase());\r

  \    let d = mDiv(dInnerLeft, { position: 'absolute', w: '100%', h: '100%',
  display: 'none' }, 'd' + t);\r

  \  }\r

  }"
initPageHeader: "function initPageHeader() {\r

  \  pageHeaderSetGame();\r

  \  pageHeaderSetPlayers();\r

  }"
initPlayers: "function initPlayers() {\r

  \  S.players = {};\r

  \  G.players = {};\r

  \  let ckeys = Object.keys(playerColors);\r

  \  let i = 0;\r

  \  for (const id in G.serverData.players) {\r

  \    let pl = G.serverData.players[id];\r

  \    let colorName = isdef(pl.color) ? pl.color : ckeys[i];\r

  \    colorName = colorName.toLowerCase();\r

  \    let altName = capitalize(colorName);\r

  \    let color = isdef(playerColors[colorName]) ? playerColors[colorName] :
  colorName;\r

  \    let username = isdef(S.gameInfo.userList) ? S.gameInfo.userList[i]\r

  \      : isdef(S.plAddedByMe) && S.plAddedByMe[id] ? S.plAddedByMe[id] :
  'unknown' + i;\r

  \    S.players[id] = { username: username, id: id, color: color, altName:
  altName, index: i };\r

  \    i += 1;\r

  \  }\r

  }"
initRSGData: "function initRSGData() {\r

  \  S.user = {};\r

  \  G = { table: {}, players: {} };\r

  \  UIS = {};\r

  \  IdOwner = {};\r

  \  id2oids = {};\r

  \  oid2ids = {};\r

  \  id2uids = {};\r

  \  DELETED_IDS = [];\r

  }"
initScore: function initScore() { resetScore(); }
initServerPool: "function initServerPool(settings, state, perlenDict) {\r

  \  let pool = {};\r

  \  let poolArr = [];\r

  \  let maxPoolIndex = 0;\r

  \  addKeys(settings, { poolSelection: 'random', numPool: 20 });\r

  \  let n = settings.poolSelection != 'player' ? settings.numPool : 0;\r

  \  let keys = getRandomPerlenKeys(perlenDict, n);\r

  \  for (const k of keys) {\r

  \    addToPool(pool, poolArr, perlenDict[k], maxPoolIndex);\r

  \    maxPoolIndex += 1;\r

  \  }\r

  \  state.pool = pool;\r

  \  state.poolArr = poolArr;\r

  \  return maxPoolIndex;\r

  }"
initSETTINGS: "function initSETTINGS() {\r

  \  setDefaultRSGSettings();\r

  \  setPlaymode(S.settings.playmode, true);\r

  \  S.settings.dev = {};\r

  \  if (S.settings.userSettings) _mergeOptions();\r

  \  _initAutoplayToActionButtons();\r

  \  _initCheatButtons();\r

  \  _initScenarioButtons();\r

  }"
initSettings: "function initSettings(game) {\r

  \  Settings = deepmergeOverride(DB.settings, U.settings);\r

  \  delete Settings.games;\r

  \  let gsSettings = lookup(U, ['games', game, 'settings']);\r

  \  if (isdef(gsSettings)) Settings = deepmergeOverride(Settings,
  gsSettings);\r

  \  updateSettings();\r

  }"
initSettingsP0: "function initSettingsP0() {\r

  \  let iLanguage = mBy('input' + currentLanguage);\r

  \  iLanguage.checked = true;\r

  \  let iPicsPerLevel = mBy('inputPicsPerLevel');\r

  \  iPicsPerLevel.value = PICS_PER_LEVEL;\r

  }"
initSidebar: "function initSidebar() {\r

  \  show('dLeftSide');\r

  \  let dParent = mBy('dLeftSide');\r

  \  clearElement(dParent);\r

  \  dLeiste = mDiv(dParent);\r

  \  mStyle(dLeiste, { wmin: 70, hmax: '100vh', display: 'flex', 'flex-flow':
  'column wrap' });\r

  }"
initSidebar1: "function initSidebar1() {\r

  \  show(dSidebar);\r

  \  clearElement(dSidebar);\r

  \  mDiv(dSidebar, { 'min-width': 50, 'max-height': '100vh', display: 'flex',
  'flex-flow': 'column wrap', 'align-content': 'center' }, 'dLeiste');\r

  }"
initSocket: "function initSocket() {\r

  \  Socket = io();\r

  \  Socket.on('clientId', handleClientIdSendLogin);\r

  \  Socket.on('db', handleDB);\r

  \  Socket.on('userJoined', handleUserJoined);\r

  \  Socket.on('userLeft', handleUserLeft);\r

  \  Socket.on('userMessage', handleUserMessage);\r

  \  Socket.on('gameState', handleGameState);\r

  \  Socket.on('dbUpdate', handleDbUpdate);\r

  \  Socket.on('mouse', handleMouse);\r

  \  Socket.on('show', handleShow);\r

  \  Socket.on('hide', handleHide);\r

  }"
InitSq120To64: "function InitSq120To64() {\r

  \  var index = 0;\r

  \  var file = FILES.FILE_A;\r

  \  var rank = RANKS.RANK_1;\r

  \  var sq = SQUARES.A1;\r

  \  var sq64 = 0;\r

  \  for (index = 0; index < BRD_SQ_NUM; ++index) {\r

  \    Sq120ToSq64[index] = 65;\r

  \  }\r

  \  for (index = 0; index < 64; ++index) {\r

  \    Sq64ToSq120[index] = 120;\r

  \  }\r

  \  for (rank = RANKS.RANK_1; rank <= RANKS.RANK_8; ++rank) {\r

  \    for (file = FILES.FILE_A; file <= FILES.FILE_H; ++file) {\r

  \      sq = FR2SQ(file, rank);\r

  \      Sq64ToSq120[sq64] = sq;\r

  \      Sq120ToSq64[sq] = sq64;\r

  \      sq64++;\r

  \    }\r

  \  }\r

  }"
initSTRUCTURES: "function initSTRUCTURES() {\r

  \  let data = S.user.spec.STRUCTURES;\r

  \  if (nundef(data)) return;\r

  \  BINDINGS = {};\r

  \  let hasStructure = false;\r

  \  for (const areaName in data) {\r

  \    reqs = data[areaName];\r

  \    let mobj = makeArea(areaName, reqs.location);\r

  \    let areaId = mobj.id;\r

  \    for (const prop in reqs) {\r

  \      let val = reqs[prop];\r

  \      if (prop == 'location') continue;\r

  \      if (prop == 'structure') {\r

  \        hasStructure = true;\r

  \        let info = reqs.structure;\r

  \        let func = info.type;\r

  \        let odict = parseDictionaryName(info.object_pool);\r

  \        if (!odict) odict = G.table;\r

  \        let boardInfo = info.cond;\r

  \        let structObject = window[func](odict, areaId, boardInfo);\r

  \        timit.showTime('*** board end ***')\r

  \      } else if (prop == 'binding') {\r

  \        BINDINGS[areaId] = val;\r

  \      } else {\r

  \        let lst = jsCopy(val);\r

  \        let func = 'set' + capitalize(prop);\r

  \        let params = lst;\r

  \        if (!Array.isArray(params)) params = params.split(',');\r

  \        if (mobj[func] !== null) mobj[func](...params);\r

  \      }\r

  \    }\r

  \  }\r

  \  return hasStructure;\r

  }"
initSymbolTableForGamesAddons: "function initSymbolTableForGamesAddons() {\r

  \  Daat.GameClasses = {\r

  \    gTouchPic: GTouchPic, gNamit: GNamit, gStory: GStory,\r

  \    gTouchColors: GTouchColors, gPremem: GPremem, gMem: GMem,
  gMissingLetter: GMissingLetter,\r

  \    gMissingNumber: GMissingNumber, gWritePic: GWritePic, gSayPic: GSayPic,
  gSteps: GSteps, gElim: GElim,\r

  \    gAnagram: GAnagram, gAbacus: GAbacus, gPasscode: GPasscode, gCats:
  GCats,\r

  \  }\r

  }"
initSyms: "async function initSyms() {\r

  \  console.log('haloooooooooooooooo');\r

  }"
initTable: "function initTable() {\r

  \  clearElement(dTableBackground);\r

  \  setTableBackground(RED, 'white', true);\r

  \  let ltitle = get3ColLineName(dTableBackground, 'title', { hmin: 30 });\r

  \  mStyleX(dTitle, { maleft: -50 })\r

  \  let ltable = get3ColLineName(dTableBackground, 'table', {});\r

  \  let lbottom = get3ColLineName(dTableBackground, 'bottom', { position:
  'absolute', bottom: 30 });\r

  }"
initTableOptions: "function initTableOptions(playMode) {\r

  \  if (playMode == 'play') {\r

  \    S.options.table = {\r

  \      showComplexVals: false,\r

  \      optIn: null,\r

  \      optOut: { visible: -1, obj_type: -1, row: -1, col: -1, rows: -1,
  cols: -1, neighbors: -1, corners: -1, edges: -1, fields: -1, id: -1, name: -1
  },\r

  \      showProps: false,\r

  \      sysprop: { player: presentPlayer },\r

  \      fontSize: M.game == 'catan' ? 12 : 60\r

  \    };\r

  \  } else {\r

  \    S.options.table = {\r

  \      showComplexVals: true,\r

  \      optin: null,\r

  \      optOut: { row: -1, col: -1, neighbors: -1, corners: -1, edges: -1,
  obj_type: -1, name: -1, id: -1 },\r

  \      showProps: true,\r

  \      sysprop: M.game == 'catan' ? null : { visible: presentVisible },\r

  \      fontSize: 12\r

  \    };\r

  \  }\r

  }"
initTABLES: "function initTABLES() {\r

  \  let tables = {\r

  \    a_d_game: S.settings.gameAreaSize,\r

  \  };\r

  \  document.getElementById('c_d_statusInHeaderText').innerHTML = ''\r

  \  if (isPlain()) {\r

  \    let space = 400;\r

  \    let pmainSpace = space;\r

  \    let pothersSpace = (space - 100) * (S.gameConfig.numPlayers - 1);\r

  \    setCSSVariable('--wPlayers', '' + pothersSpace + 'px');\r

  \    S.settings.table.defaultArea = 'a_d_objects';\r

  \    S.settings.player.defaultArea = 'a_d_player'; //'a_d_options';\r

  \    S.settings.player.defaultMainArea = 'a_d_game';\r

  \    tables.a_d_game = [pmainSpace, 800];\r

  \    document.getElementById('c_d_statusText').innerHTML = 'Me'\r

  \  } else {\r

  \    document.getElementById('a_d_player_header').innerHTML =
  '<p>players</p>';\r

  \    setCSSVariable('--wPlayers', '400px');\r

  \    S.settings.table.defaultArea = 'a_d_objects';\r

  \    S.settings.player.defaultArea = 'a_d_player'; //'a_d_options';\r

  \    S.settings.player.defaultMainArea = null;\r

  \    let d = document.getElementById('a_d_game');\r

  \    d.style.overflow = 'visible';\r

  \    d.classList.remove('flexWrap');\r

  \  }\r

  \  for (const areaName of [S.settings.table.defaultArea,
  S.settings.player.defaultArea, S.settings.player.defaultMainArea]) {\r

  \    if (areaName === null) continue;\r

  \    let d = document.getElementById(areaName);\r

  \    if (d.id != 'a_d_player') { d.style.overflowY = 'auto'; }\r

  \    d.style.overflowX = 'hidden';\r

  \    d.classList.add('flexWrap');\r

  \  }\r

  \  for (const areaName in tables) {\r

  \    setAreaWidth(areaName, tables[areaName][0]);\r

  \    setAreaHeight(areaName, tables[areaName][1]);\r

  \  }\r

  }"
initTextures: "function initTextures() {\r

  \  let textures = lookup(S.options, ['assets', 'textures']);\r

  \  if (!textures) return;\r

  \  console.log(S.options.assets.textures)\r

  \  for (const s of S.options.assets.textures) {\r

  \    let key, val;\r

  \    if (isList(s)) { key = s[0]; val = s[1]; } else { key = s; val = s; }\r

  \  }\r

  }"
initUI: "function initUI() {\r

  \  document.title = 'HA!';\r

  \  divMain = d3.select('#MAIN');\r

  \  divPlayer = d3.select('#PLAYER');\r

  \  divOpps = {};\r

  \  let dOpps = d3.select('#OPPS');\r

  \  for (const plid in playerConfig[GAME].players) {\r

  \    let dPlid = dOpps.append('div').attr('id', plid);\r

  \    divOpps[plid] = dPlid;\r

  \  }\r

  \  colors = ['blue', 'red', 'green', 'purple', 'black', 'white'];\r

  \  iColor = 0;\r

  }"
initZoom: "function initZoom() {\r

  \  let bz = localStorage.getItem('bodyZoom');\r

  \  if (bz) bz = Math.max(Number(bz), .2);\r

  \  else bz = 1.0;\r

  \  zoom(bz);\r

  }"
initZoomToFit: function initZoomToFit() { justExpand = true; zoom_on_resize(...arguments); }
inno_action_achieve: "function inno_action_achieve(otree, uname) {\r

  \  return [];\r

  }"
inno_action_draw: "function inno_action_draw(otree, uname) {\r

  \  let [age, letter] = inno_get_deck_info_for_player(otree, uname);\r

  \  let res = `draw.decks.${letter}.${age}`;\r

  \  return [res];\r

  }"
inno_action_meld: "function inno_action_meld(otree, uname) {\r

  \  return otree[uname].hand.map(x => `${uname}.hand.${x}`);\r

  }"
inno_action_topcard: "function inno_action_topcard(otree, uname) {\r

  \  let top2 = inno_get_top_card_actions(otree, uname);\r

  \  return top2;\r

  }"
inno_activate: "function inno_activate(otree, r, uname, cardname) {\r

  \  let fname = `inno_${cardname}_todo`;\r

  \  if (nundef(window[fname])) { console.log('activate', cardname, 'NOT
  IMPLEMENTED!!!!'); return; }\r

  \  let todo = window[fname](otree, uname);\r

  \  let todo_incl_sharing = inno_add_sharing_players(otree, uname, cardname,
  todo);\r

  \  let idx = otree.todo.indexOf(r);\r

  \  console.assert(idx == otree.itask, 'inno_activate: itask does NOT point
  to r!!!!!');\r

  \  otree.todo.splice(idx, 1, ...todo_incl_sharing);\r

  }"
inno_add_sharing_players: "function inno_add_sharing_players(otree, uname,
  cardname, todo) {\r

  \  otree.pl_sharing = inno_calc_sharing(otree, uname, cardname);\r

  \  let task_list = jsCopy(todo);\r

  \  todo = [];\r

  \  for (const plname of otree.pl_sharing) {\r

  \    let new_task_list = [];\r

  \    for (const t of task_list) { let t1 = {}; t1.uname = plname; t1.id =
  getUID('r'); addKeys(t, t1); new_task_list.push(t1); }\r

  \    todo = todo.concat(new_task_list);\r

  \  }\r

  \  todo = todo.concat(task_list);\r

  \  return todo;\r

  }"
inno_agriculture_post: "function inno_agriculture_post(otree, r, uname, action,
  item) {\r

  \  if (action != 'pass') {\r

  \    let card = inno_get_cardinfo(stringAfterLast(action, '.'));\r

  \    let deck = otree.decks[card.exp[0]][card.age];\r

  \    return_elem_to_deck_from(card.key, otree[uname].hand, deck);\r

  \    let n = card.age + 1;\r

  \    let pl = otree[uname];\r

  \    draw_from_deck_to(otree.decks.B[n], pl.scored);\r

  \  }\r

  \  next_task(otree, r);\r

  \  turn_send_move_update(otree, uname);\r

  }"
inno_agriculture_pre: "function inno_agriculture_pre(otree, r, uname) {\r

  \  r.actions = inno_get_hand_actions(otree, uname);\r

  \  r.actions.push('pass');\r

  \  activate_actions(r, uname);\r

  }"
inno_agriculture_todo: "function inno_agriculture_todo(otree, uname) {\r

  \  let r1 = {\r

  \    id: getUID('r'),\r

  \    uname: uname,\r

  \    key: 'inno_agriculture',\r

  \    actions: [],\r

  \    selected: null,\r

  \  };\r

  \  let list = [r1];\r

  \  return list;\r

  }"
inno_branch: "function inno_branch(obj, otree, rtree) {\r

  \  ui_present_stats(otree);\r

  \  let uitree = ui_present_table(rtree, dTable);\r

  \  if (nundef(otree.todo)) { otree.todo = inno_todo_init(otree); }\r

  \  let req = otree.todo[otree.itask];\r

  \  console.log('____________', ITER);\r

  \  let my_turn = true;\r

  \  window[req.key + '_pre'](otree, req, req.uname);\r

  }"
inno_calc_sharing: "function inno_calc_sharing(otree, uname, ckey) {\r

  \  let ci = inno_get_cardinfo(ckey);\r

  \  let sym = ci.type;\r

  \  let n = otree[uname].totals[sym];\r

  \  let pl_sharing = otree.plorder.filter(x => x != uname &&
  otree[x].totals[sym] >= n);\r

  \  return pl_sharing;\r

  }"
inno_calc_visible_syms: "function inno_calc_visible_syms(board, splays = {}) {\r

  \  let res = {};\r

  \  INNO.symNames.map(x => res[x] = 0);\r

  \  for (const color in board) {\r

  \    let res_color = inno_calc_visible_syms_pile(board[color],
  splays[color]);\r

  \    for (const k in res) { res[k] += res_color[k]; }\r

  \  }\r

  \  return res;\r

  }"
inno_calc_visible_syms_pile: "function inno_calc_visible_syms_pile(keys, dir)
  {\r

  \  let [cards, totals] = [keys.map(x => InnoById[x]), {}];\r

  \  INNO.symNames.map(x => totals[x] = 0);\r

  \  if (isEmpty(keys)) return totals;\r

  \  let top = cards.shift();\r

  \  for (const k of top.resources) {\r

  \    if (isdef(totals[k])) totals[k] += 1;\r

  \  }\r

  \  if (nundef(dir) || dir == 0) return totals;\r

  \  if (dir == 1) {\r

  \  } else if (dir == 2) {\r

  \    for (const c of cards) {\r

  \      for (const k in totals) {\r

  \        if (c.resources[0] == k) totals[k]++;\r

  \        if (c.resources[1] == k) totals[k]++;\r

  \      }\r

  \    }\r

  \  }\r

  \  return totals;\r

  }"
inno_card: "function inno_card(dParent, keyOrName) {\r

  \  if (nundef(keyOrName)) keyOrName = chooseRandom(get_keys(InnoById));\r

  \  let cardInfo, name, key, id;\r

  \  if (isdef(InnoById[keyOrName])) { id = key = keyOrName; cardInfo =
  InnoById[id]; name = cardInfo.name; }\r

  \  else if (isdef(InnoByName[keyOrName])) { name = keyOrName; cardInfo =
  InnoByName[name]; id = key = cardInfo.id; };\r

  \  let sym = INNO.sym[cardInfo.type];\r

  \  let info = Syms[sym.key];\r

  \  let card = cBlank(dParent, { fg: 'black', bg: INNO.color[cardInfo.color],
  w: Card.sz, h: Card.sz * .65, margin: 10 });\r

  \  let [dCard, sz, szTitle, margin] = [iDiv(card), Card.sz / 5,
  cardInfo.exp[0] == 'A' ? Card.sz / 12 : Card.sz / 8, 4];\r

  \  let [dTitle, dMain] = cTitleArea(card, szTitle);\r

  \  let d = mAddContent(dTitle, name, {\r

  \    patop: 4, bg: sym.bg, fg: 'white', h: szTitle, fz: szTitle * .7, align:
  'center',\r

  \    position: 'relative'\r

  \  });\r

  \  mAddContent(d, cardInfo.age, { hpadding: szTitle / 4, float: 'right'
  });\r

  \  let s = mSym(sym.key, d, { hpadding: szTitle / 4, h: szTitle * .7, fg:
  sym.fg, float: 'left' });\r

  \  let positions = ['tl', 'bl', 'bc', 'br'];\r

  \  for (let i = 0; i < 4; i++) {\r

  \    let r = cardInfo.resources[i];\r

  \    let pos = positions[i];\r

  \    if (r in INNO.sym) { innoSym(r, dMain, sz, pos, margin); }\r

  \    else if (r == 'None') { innoAgeNumber(cardInfo.age, dMain, sz, pos,
  margin); }\r

  \    else if (isNumber(r)) { innoBonusNumber(r, dMain, sz, pos, margin); }\r

  \    else if (r == 'echo') { innoEcho(cardInfo.echo, dMain, sz, pos,
  margin); }\r

  \    else if (r == 'inspire') { innoInspire(cardInfo.inspire, dMain, sz,
  pos, margin); }\r

  \  }\r

  \  if (isdef(cardInfo.dogmas)) {\r

  \    let box = mBoxFromMargins(dMain, 10, margin, sz + margin, sz + 2 *
  margin);\r

  \    mStyle(box, { align: 'left' });\r

  \    let text = '';\r

  \    for (const dog of cardInfo.dogmas) {\r

  \      let t = startsWith(dog, 'I demand') ? ('I <b>demand</b>' +
  dog.substring(8)) : startsWith(dog, 'I compell') ? ('I <b>compell</b>' +
  dog.substring(8)) : dog;\r

  \      text += `<span
  style=\"color:${sym.bg};font-family:${info.family}\">${info.text}</span>` +
  '&nbsp;' + t + '<br>';\r

  \    }\r

  \    let t2 = innoText(text);\r

  \    mFillText(t2, box);\r

  \  } else if (isdef(cardInfo.res_city)) {\r

  \    let positions = ['tc', 'tr'];\r

  \    for (let i = 0; i < 2; i++) {\r

  \      let r = cardInfo.res_city[i];\r

  \      let pos = positions[i];\r

  \      if (r == 'flag') { innoFlag(cardInfo.type, dMain, sz, pos, margin);
  }\r

  \      else if (r in INNO.sym) { innoSym(r, dMain, sz, pos, margin); }\r

  \      else if (r == 'None') { innoAgeNumber(cardInfo.age, dMain, sz, pos,
  margin); }\r

  \      else if (isNumber(r)) { innoBonusNumber(r, dMain, sz, pos, margin);
  }\r

  \      else if (r == 'echo') { innoEcho(cardInfo.echo, dMain, sz, pos,
  margin); }\r

  \      else if (r == 'inspire') { innoInspire(cardInfo.inspire, dMain, sz,
  pos, margin); }\r

  \    }\r

  \  }\r

  \  card.info = cardInfo;\r

  \  return card;\r

  }"
inno_card_fixed_font: "function inno_card_fixed_font(dParent, keyOrName) {\r

  \  if (nundef(keyOrName)) keyOrName = chooseRandom(get_keys(InnoById));\r

  \  let cardInfo, name, key, id;\r

  \  if (isdef(InnoById[keyOrName])) { id = key = keyOrName; cardInfo =
  InnoById[id]; name = cardInfo.name; }\r

  \  else if (isdef(InnoByName[keyOrName])) { name = keyOrName; cardInfo =
  InnoByName[name]; id = key = cardInfo.id; };\r

  \  let sym = INNO.sym[cardInfo.type];\r

  \  let info = Syms[sym.key];\r

  \  let card = cBlank(dParent, { fg: 'black', bg: INNO.color[cardInfo.color],
  w: Card.sz, h: Card.sz * .65, margin: 10 });\r

  \  let [dCard, sz, szTitle, margin] = [iDiv(card), Card.sz / 5,
  cardInfo.exp[0] == 'A' ? Card.sz / 12 : Card.sz / 8, 4];\r

  \  let [dTitle, dMain] = cTitleArea(card, szTitle);\r

  \  let d = mAddContent(dTitle, name, {\r

  \    patop: 4, bg: sym.bg, fg: 'white', h: szTitle, fz: szTitle * .7, align:
  'center',\r

  \    position: 'relative'\r

  \  });\r

  \  mAddContent(d, cardInfo.age, { hpadding: szTitle / 4, float: 'right'
  });\r

  \  let s = mSym(sym.key, d, { hpadding: szTitle / 4, h: szTitle * .7, fg:
  sym.fg, float: 'left' });\r

  \  let positions = ['tl', 'bl', 'bc', 'br'];\r

  \  for (let i = 0; i < 4; i++) {\r

  \    let r = cardInfo.resources[i];\r

  \    let pos = positions[i];\r

  \    if (r in INNO.sym) { innoSym(r, dMain, sz, pos, margin); }\r

  \    else if (r == 'None') { innoAgeNumber(cardInfo.age, dMain, sz, pos,
  margin); }\r

  \    else if (isNumber(r)) { innoBonusNumber(r, dMain, sz, pos, margin); }\r

  \    else if (r == 'echo') { innoEcho(cardInfo.echo, dMain, sz, pos,
  margin); }\r

  \  }\r

  \  let box = mBoxFromMargins(dMain, 10, margin, sz + margin, sz + 2 *
  margin);\r

  \  console.log('box', box);\r

  \  mStyle(box, { align: 'left', padding: 4 });\r

  \  let text = '';\r

  \  for (const dog of cardInfo.dogmas) {\r

  \    let t = startsWith(dog, 'I demand') ? ('I <b>demand</b>' +
  dog.substring(8)) : startsWith(dog, 'I compell') ? ('I <b>compell</b>' +
  dog.substring(8)) : dog;\r

  \    text += `<span
  style=\"color:${sym.bg};font-family:${info.family}\">${info.text}</span>` +
  '&nbsp;' + t + '<br>';\r

  \  }\r

  \  let t2 = innoText(text);\r

  \  mText(t2, box, { fz: 10 });\r

  \  card.info = cardInfo;\r

  \  return card;\r

  }"
inno_code_of_laws_post: "function inno_code_of_laws_post(otree, r, uname,
  action, item) {\r

  \  if (action != 'pass') {\r

  \    let card = inno_get_cardinfo(stringAfterLast(action, '.'));\r

  \    elem_from_to(card.key, otree[uname].hand,
  otree[uname].board[card.color]);\r

  \    let splay = inno_get_splay(otree, `${uname}.board.${card.color}`);\r

  \    if (splay == 0 && otree[uname].board[card.color].length > 1)
  otree[uname].splays[card.color] = 1;\r

  \  }\r

  \  next_task(otree, r);\r

  \  turn_send_move_update(otree, uname);\r

  }"
inno_code_of_laws_pre: "function inno_code_of_laws_pre(otree, r, uname) {\r

  \  r.actions = inno_get_hand_actions(otree, uname);\r

  \  r.actions.push('pass');\r

  \  activate_actions(r, uname);\r

  }"
inno_code_of_laws_todo: "function inno_code_of_laws_todo(otree, uname) {\r

  \  console.log('making todolist for code_of_laws!!!');\r

  \  let r1 = {\r

  \    id: getUID('r'),\r

  \    uname: uname,\r

  \    key: 'inno_code_of_laws',\r

  \    actions: [],\r

  \    selected: null,\r

  \  };\r

  \  let list = [r1];\r

  \  return list;\r

  }"
inno_create_card_assets: "function inno_create_card_assets() {\r

  \  Dinno = { A: {}, B: {}, C: {}, E: {}, F: {} };\r

  \  InnoById = {};\r

  \  InnoByName = {};\r

  \  for (const exp in Cinno) {\r

  \    for (const name in Cinno[exp]) {\r

  \      let c = Cinno[exp][name];\r

  \      c.name = name;\r

  \      c.exp = exp;\r

  \      let id = inno_get_id(c);\r

  \      c.id = c.key = id;\r

  \      if (isdef(InnoById[id])) { console.log('duplicate id', id,
  InnoById[id].name, c.name); }\r

  \      InnoById[id] = c;\r

  \      let key_name = name.toLowerCase().trim();\r

  \      if (isdef(InnoByName[key_name])) console.log('duplicate name',
  name);\r

  \      InnoByName[key_name] = c;\r

  \      lookupAddToList(Dinno, [exp[0], c.age], c.id);\r

  \    }\r

  \  }\r

  }"
inno_create_ui_tree: "function inno_create_ui_tree(n, dParent, r) {\r

  \  let d;\r

  \  if (n.path.includes('splays')) {\r

  \  } else if (n.path.includes('achievements')) {\r

  \    let id = getUID('u');\r

  \    d = mDiv(dParent, { bg: 'sienna', fg: 'white', w: '100%' }, id,
  n.path);\r

  \    mFlexWrap(d);\r

  \    for (const cont of n.content) {\r

  \      let card = InnoById[cont];\r

  \      let d1 = mDiv(d, { bg: 'sienna', margin: 4, border: 'blue', wmin: 25
  }, null, isdef(card) ? card.age : cont);\r

  \    }\r

  \    r.add_ui_node(d, id, n.oid);\r

  \  } else if (startsWith(n.path, 'deck')) {\r

  \    mFlexWrap(dParent);\r

  \    let id = getUID('u');\r

  \    let styles = isNumber(stringAfterLast(n.path, '.')) ? { bg: 'beige',
  fg: 'black', margin: 4, border: 'red', wmin: 25 } : { bg: 'beige', fg: 'black'
  };\r

  \    d = mDiv(dParent, styles, id, n.path);\r

  \    r.add_ui_node(d, id, n.oid);\r

  \  } else if (r.otree.player_names.includes(n.content)) {\r

  \    let id = getUID('u');\r

  \    let bg = r.otree[n.content].color;\r

  \    let styles = { bg: bg, fg: 'contrast', w: '100%' };\r

  \    d = mDiv(dParent, styles, id, n.path);\r

  \    r.add_ui_node(d, id, n.oid);\r

  \  } else if (n.type == 'cardlist' && !n.path.includes('board')) {\r

  \    let id = getUID('u');\r

  \    d = mDiv(dParent, { bg: '#00000080', gap: 10, padding: 10 }, id,
  stringAfterLast(n.path, '.'));\r

  \    mCenterFlex(d);\r

  \    r.add_ui_node(d, id, n.oid);\r

  \  } else if (n.type == 'string' && !endsWith(n.path, 'board')) {\r

  \    let id = getUID('u');\r

  \    d = mDiv(dParent, { bg: 'inherit' }, id, n.content);\r

  \    r.add_ui_node(d, id, n.oid);\r

  \  } else if (endsWith(n.path, 'board')) {\r

  \    let id = getUID('u');\r

  \    d = mDiv(dParent, { bg: 'inherit' }, id, n.content);\r

  \    mFlexWrap(d);\r

  \    r.add_ui_node(d, id, n.oid);\r

  \  } else if (n.type == 'cardlist' && n.path.includes('board')) {\r

  \    let id = getUID('u');\r

  \    d = mDiv(dParent, {}, id);\r

  \    let splay = inno_get_splay(r.otree, n.path);\r

  \    let [num, wcard, hcard, ov] = [n.content.length, 300, 200, 78];\r

  \    mContainerSplay(d, splay, wcard, hcard, num, ov);\r

  \    r.add_ui_node(d, id, n.oid);\r

  \  } else if (n.type == 'card') {\r

  \    let c;\r

  \    if (n.path.includes('board')) {\r

  \      c = inno_present_card(dParent, n.content);\r

  \      let list = lookup(Session.otree, stringBeforeLast(n.path,
  '.').split('.'));\r

  \      let splay = inno_get_splay(r.otree, n.path);\r

  \      mItemSplay(c, list, splay);\r

  \    } else {\r

  \      c = inno_present_card(dParent, n.content);\r

  \      let d = iDiv(c);\r

  \    }\r

  \    r.add_ui_node(iDiv(c), c.id, n.oid);\r

  \  }\r

  \  if (nundef(d)) return;\r

  \  for (const ch of n.children) {\r

  \    inno_create_ui_tree(r.nodes[ch], d, r);\r

  \  }\r

  }"
inno_draw_action: "function inno_draw_action(otree, r, uname, exp, age) {\r

  \  draw_from_deck_to(otree.decks[exp][age], otree[uname].hand);\r

  \  next_task(otree, r);\r

  }"
inno_get_all_actions: "function inno_get_all_actions(otree, uname) {\r

  \  let actions = [];\r

  \  let ameld = inno_action_meld(otree, uname);\r

  \  let atop = inno_action_topcard(otree, uname);\r

  \  let achieve = inno_action_achieve(otree, uname);\r

  \  let adraw = inno_action_draw(otree, uname);\r

  \  actions = atop.concat(ameld, achieve, adraw);\r

  \  return actions;\r

  }"
inno_get_basic_deck_age: "function inno_get_basic_deck_age(otree, min_age) {\r

  \  for (let i = min_age; i <= 10; i++) {\r

  \    let deck = otree.decks.B[i];\r

  \    let len = deck.length;\r

  \    if (len > 0) return i;\r

  \  }\r

  \  return 11;\r

  }"
inno_get_cardinfo: function inno_get_cardinfo(key) { return InnoById[key]; }
inno_get_deck_age: "function inno_get_deck_age(otree, deck_letter, min_age = 1)
  {\r

  \  let deck_age = inno_get_basic_deck_age(otree, min_age);\r

  \  if (deck_letter == 'B') return deck_age;\r

  \  let deck = otree.decks[deck_letter][deck_age];\r

  \  while (deck_age <= 10 && isEmpty(deck)) { deck_age += 1; deck =
  otree.decks[deck_letter][deck_age]; }\r

  \  return deck_age;\r

  }"
inno_get_deck_info_for_player: "function inno_get_deck_info_for_player(otree,
  uname) {\r

  \  let has_echo = inno_has_echo(otree, uname);\r

  \  let letter = has_echo || isEmpty(otree[uname].hand) ? 'B' : 'E';\r

  \  let min_age = inno_get_player_age(otree, uname);\r

  \  let age = inno_get_deck_age(otree, letter, min_age);\r

  \  return [age, letter];\r

  }"
inno_get_hand_actions: "function inno_get_hand_actions(otree, uname) {\r

  \  let actions = [];\r

  \  otree[uname].hand.map(x => actions.push(`${uname}.hand.${x}`));\r

  \  return actions;\r

  }"
inno_get_id: function inno_get_id(c) { return normalize_string(c.name); }
inno_get_object_keys: "function inno_get_object_keys(otree) {\r

  \  let keys = {}; for (const k in InnoById) keys[k] = true;\r

  \  for (const k of otree.plorder) keys[k] = true;\r

  \  for (const k of ['decks', 'board', 'splays', 'hand', 'green', 'purple',
  'blue', 'red', 'yellow', 'forecast', 'scored', 'artifact',
  'special_achievements', 'achievements']) keys[k] = true;\r

  \  let decknames = 'ABCEF';\r

  \  for (let i = 0; i < decknames.length; i++) { keys[decknames[i]] = true;
  }\r

  \  for (let age = 1; age <= 10; age++) { keys['' + age] = true; }\r

  \  return keys;\r

  }"
inno_get_phase: function inno_get_phase(iphase) { return INNO.phases[iphase].key; }
inno_get_player_age: "function inno_get_player_age(otree, uname) {\r

  \  let top = inno_get_top_card_info(otree, uname);\r

  \  let maxage = arrMinMax(top, x => x.age).max;\r

  \  return maxage;\r

  }"
inno_get_splay: "function inno_get_splay(otree, path) {\r

  \  let [uname, x, color, y] = path.split('.');\r

  \  let splay = otree[uname].splays[color];\r

  \  return splay;\r

  }"
inno_get_top_card_actions: "function inno_get_top_card_actions(otree, uname) {\r

  \  let keys = inno_get_top_card_keys(otree, uname);\r

  \  let res = keys.map(x =>
  `${uname}.board.${inno_get_cardinfo(x).color}.${x}`);\r

  \  return res;\r

  }"
inno_get_top_card_info: function inno_get_top_card_info(otree, uname) { return
  inno_get_top_card_keys(otree, uname).map(x => inno_get_cardinfo(x)); }
inno_get_top_card_keys: "function inno_get_top_card_keys(otree, uname) {\r

  \  let pl = otree[uname];\r

  \  let board = pl.board;\r

  \  let top = [];\r

  \  for (const k in board) { if (!isEmpty(board[k]))
  top.push(arrFirst(board[k])); }\r

  \  return top;\r

  }"
inno_has_echo: "function inno_has_echo(otree, uname) {\r

  \  let handcardinfo = otree[uname].hand.map(x => inno_get_cardinfo(x));\r

  \  let has_echo = firstCond(handcardinfo, x => x.exp[0] == 'E');\r

  \  return has_echo;\r

  }"
inno_has_towers: function inno_has_towers(cardinfo) { return
  cardinfo.resources.includes('tower'); }
inno_init_post: "function inno_init_post(otree, r, uname, action, item) {\r

  \  let path = r.selected;\r

  \  let cardname = stringAfterLast(path, '.');\r

  \  let card = inno_get_cardinfo(cardname);\r

  \  let pl = otree[uname];\r

  \  lookupAddToList(otree, ['progress'], { name: uname, key: cardname });\r

  \  elem_from_to(cardname, pl.hand, pl.board[card.color]);\r

  \  let i = otree.itask + 1;\r

  \  if (i >= get_num_players(otree)) {\r

  \    otree.plorder = sortBy(otree.progress, 'key').map(x => x.name);\r

  \    otree.history = otree.todo;\r

  \    otree.progress = null;\r

  \    otree.todo = inno_todo_justone(otree);\r

  \  } else {\r

  \    otree.itask = i;\r

  \  }\r

  \  turn_send_move_update(otree, uname);\r

  }"
inno_init_pre: "function inno_init_pre(otree, r, uname) {\r

  \  r.actions = inno_get_hand_actions(otree, uname);\r

  \  activate_actions(r, uname);\r

  }"
inno_is_artifact: function inno_is_artifact(cardinfo) { return cardinfo.exp[0] == 'A'; }
inno_is_basic: function inno_is_basic(cardinfo) { return cardinfo.exp[0] == 'B'; }
inno_is_echoes: function inno_is_echoes(cardinfo) { return cardinfo.exp[0] == 'E'; }
inno_is_figure: function inno_is_figure(cardinfo) { return cardinfo.exp[0] == 'F'; }
inno_justone_post: "function inno_justone_post(otree, r, uname, action, item)
  {\r

  \  inno_perform_action(otree, r, uname, action, item);\r

  \  turn_send_move_update(otree, uname);\r

  }"
inno_justone_pre: "function inno_justone_pre(otree, r, uname) {\r

  \  r.actions = inno_get_all_actions(otree, uname);\r

  \  activate_actions(r, uname);\r

  }"
inno_meld: "function inno_meld(otree, r, uname, cardname) {\r

  \  let ci = inno_get_cardinfo(cardname);\r

  \  let pl = otree[uname];\r

  \  elem_from_to_top(cardname, pl.hand, pl.board[ci.color]);\r

  \  next_task(otree, r);\r

  }"
inno_metalworking_post: "function inno_metalworking_post(otree, r, uname,
  action, item) {\r

  \  next_task(otree, r);\r

  \  turn_send_move_update(otree, uname);\r

  }"
inno_metalworking_pre: "function inno_metalworking_pre(otree, r, uname) {\r

  \  let deck_letter = inno_has_echo(otree, uname) ? 'E' : 'B';\r

  \  let card = null;\r

  \  while (nundef(card) || inno_has_towers(card)) {\r

  \    let deck_age = inno_get_deck_age(otree, deck_letter);\r

  \    let deck = otree.decks[deck_letter][deck_age];\r

  \    let peek = deck[0];\r

  \    ckey = deck.shift();\r

  \    console.log('age', deck_age, 'deck length', deck.length)\r

  \    console.assert(isdef(ckey) && peek == ckey, 'metalworking: not drawing
  top card!!!!!!!');\r

  \    card = inno_get_cardinfo(ckey);\r

  \    console.log('draw card', ckey, inno_has_towers(card));\r

  \    if (inno_has_towers(card)) otree[uname].scored.push(ckey); else
  otree[uname].hand.push(ckey);\r

  \  }\r

  \  console.log('metalworking is *DONE*');\r

  \  inno_metalworking_post(otree, r, uname);\r

  }"
inno_metalworking_todo: "function inno_metalworking_todo(otree, uname) {\r

  \  console.log('making todolist for metalworking!!!');\r

  \  let r1 = {\r

  \    id: getUID('r'),\r

  \    uname: uname,\r

  \    key: 'inno_metalworking',\r

  \    actions: [],\r

  \    selected: null,\r

  \  };\r

  \  let list = [r1];\r

  \  return list;\r

  }"
inno_perform_action: "function inno_perform_action(otree, r, uname, action,
  item) {\r

  \  console.log('inno_perform_action', otree, r, uname, action, item);\r

  \  let a = action;\r

  \  console.assert(r.selected == action, 'r.selected NOT SAME AS
  action!!!!!!!!!!!!!!!!!!!!!!!!');\r

  \  let parts = a.split('.');\r

  \  if (parts.length == 3) {\r

  \    let [x, obj, cardname] = parts;\r

  \    if (obj == 'hand' && x == uname) {\r

  \      inno_meld(otree, r, uname, cardname);\r

  \    }\r

  \    let [deck, exp, age] = parts;\r

  \    if (deck == 'decks') {\r

  \      console.assert(false, 'SHOULD NOT GET HERE HAPPEN!!!!
  inno_perform_action draw mit a=draw.decks...!!!!!!!!!!!!!!!');\r

  \    }\r

  \  } else if (parts.length == 4) {\r

  \    let [x, obj, color, cardname] = parts;\r

  \    if (obj == 'board' && x == uname) {\r

  \      inno_activate(otree, r, uname, cardname);\r

  \    }\r

  \    let [action, deck, exp, age] = parts;\r

  \    if (action == 'draw' && deck == 'decks') {\r

  \      inno_draw_action(otree, r, uname, exp, age);\r

  \    }\r

  \  }\r

  }"
inno_perform_initial_selections: "function inno_perform_initial_selections(r,
  otree) {\r

  \  let pl_order = [];\r

  \  for (const uname of otree.turn) {\r

  \    let path = r.selected[uname][0];\r

  \    let cardname = stringAfterLast(path, '.');\r

  \    let card = inno_get_cardinfo(cardname);\r

  \    let pl = otree[uname];\r

  \    pl_order.push({ name: uname, key: cardname });\r

  \    elem_from_to(cardname, pl.hand, pl.board[card.color]);\r

  \  }\r

  \  return pl_order;\r

  }"
inno_present_board: "function inno_present_board(dParent, board) {\r

  \  let dBoard = mDiv(dParent, {}, null, 'board');\r

  \  mFlex(dBoard);\r

  \  let boardItemLists = [];\r

  \  for (const color in board) {\r

  \    let cardlist = board[color];\r

  \    let d = mDiv(dBoard);\r

  \    let items = inno_present_cards(d, cardlist);\r

  \    boardItemLists.push(items);\r

  \  }\r

  \  return boardItemLists;\r

  }"
inno_present_card: function inno_present_card(dParent, k) { let card =
  inno_card(dParent, k); card.key = card.info.key; return card; }
inno_present_cards: "function inno_present_cards(dParent, keys) {\r

  \  let items = [];\r

  \  for (const k of keys) {\r

  \    let card = inno_present_card(dParent, k);\r

  \    items.push(card);\r

  \  }\r

  \  return items;\r

  }"
inno_present_hand: "function inno_present_hand(dParent, hand) {\r

  \  let dHand = mDiv(dParent, {}, null, 'hand');\r

  \  mFlexWrap(dHand); mLinebreak(dHand);\r

  \  let handItems = inno_present_cards(dHand, hand);\r

  \  return handItems;\r

  }"
inno_regular_pre: function inno_regular_pre(otree, r, uname) {
  inno_justone_pre(otree, r, uname); }
inno_setup: "function inno_setup(player_names) {\r

  \  inno_shuffle_decks();\r

  \  let pre_fen = {};\r

  \  let decks = pre_fen.decks = jsCopy(Dinno);\r

  \  pre_fen.achievements = [];\r

  \  for (const age in decks.B) { last_elem_from_to(decks.B[age],
  pre_fen.achievements); }\r

  \  pre_fen.special_achievements = ['monument', 'empire', 'world', 'wonder',
  'universe', 'legend', 'repute', 'fame', 'glory', 'victory', 'supremacy',
  'destiny', 'wealth', 'heritage', 'history'];\r

  \  let pls = pre_fen.players = {};\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  for (const plname of player_names) {\r

  \    let pl = pls[plname] = {\r

  \      hand: [],\r

  \      board: { blue: [], red: [], green: [], yellow: [], purple: [] },\r

  \      splays: { blue: 0, red: 0, green: 0, yellow: 0, purple: 0 },\r

  \      achievements: [],\r

  \      scored: [],\r

  \      forecast: [],\r

  \      artifact: null\r

  \    };\r

  \    last_elem_from_to(deck1, pl.hand); last_elem_from_to(deck2, pl.hand);\r

  \  }\r

  \  pre_fen.plorder = jsCopy(player_names);\r

  \  let fen = {\r

  \    players: pre_fen.players,\r

  \    decks: pre_fen.decks,\r

  \  };\r

  \  addKeys(pre_fen, fen);\r

  \  return fen;\r

  }"
inno_show_other_player_info: "function inno_show_other_player_info(ev) {\r

  \  console.log('enter', ev.target);\r

  \  let id = evToId(ev);\r

  \  let g = Session;\r

  \  let plname = stringAfter(id, '_');\r

  \  let pl = firstCond(g.players, x => x.name == plname);\r

  \  console.log('player info for', pl);\r

  }"
inno_shuffle_decks: "function inno_shuffle_decks() {\r

  \  for (const exp in Dinno) {\r

  \    for (const age in Dinno[exp]) {\r

  \      shuffle(Dinno[exp][age]);\r

  \    }\r

  \  }\r

  }"
inno_stat_sym: "function inno_stat_sym(key, n, dParent, sz) {\r

  \  let d = mDiv(dParent, { display: 'flex', dir: 'c', fz: sz });\r

  \  let s = mSym(INNO.sym[key].key, d, { h: sz, fz: sz, fg: INNO.sym[key].fg
  });\r

  \  d.innerHTML += `<span>${n}</span>`;\r

  \  return d;\r

  }"
inno_todo_init: "function inno_todo_init(otree) {\r

  \  let r = {\r

  \    key: 'inno_init',\r

  \    actions: [],\r

  \    selected: null,\r

  \  };\r

  \  let list = [];\r

  \  for (const uname of otree.plorder) {\r

  \    let task = jsCopy(r);\r

  \    task.id = getUID('r');\r

  \    task.uname = uname;\r

  \    list.push(task);\r

  \  };\r

  \  otree.itask = 0;\r

  \  return list;\r

  }"
inno_todo_justone: "function inno_todo_justone(otree) {\r

  \  let r = {\r

  \    key: 'inno_justone',\r

  \    actions: [],\r

  \    selected: null,\r

  \  };\r

  \  let list = otree.todo = [];\r

  \  for (const uname of otree.plorder) {\r

  \    let i = get_index_in_plorder(otree, uname);\r

  \    if (i >= otree.plorder.length / 2) break;\r

  \    let task = jsCopy(r);\r

  \    task.id = getUID('r');\r

  \    task.uname = uname;\r

  \    list.push(task);\r

  \  };\r

  \  otree.itask = 0;\r

  \  return list;\r

  }"
inno_todo_regular: "function inno_todo_regular(otree, uname) {\r

  \  let r = {\r

  \    key: 'inno_regular',\r

  \    uname: uname,\r

  \    actions: [],\r

  \    selected: null,\r

  \  };\r

  \  let r1 = jsCopy(r); r1.id = getUID('r');\r

  \  let r2 = jsCopy(r); r2.id = getUID('r');\r

  \  let list = [r1, r2];\r

  \  otree.itask = 0;\r

  \  return list;\r

  }"
inno_undo_random_deal: "function inno_undo_random_deal(fen) {\r

  \  for (const uname in fen.players) {\r

  \    let pl = fen.players[uname];\r

  \    last_elem_from_to(pl.hand, fen.decks.E[1]);\r

  \    last_elem_from_to(pl.hand, fen.decks.B[1]);\r

  \  }\r

  }"
inno_ut0_create_staged: "function inno_ut0_create_staged() {\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = inno_setup(player_names);\r

  \  console.log('fen', fen)\r

  \  let [decks, mimi, leo] = [fen.decks, fen.players.mimi,
  fen.players.leo];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('agriculture', deck1, mimi.hand);\r

  \  elem_from_to('comb', deck2, mimi.hand);\r

  \  elem_from_to('metalworking', deck1, leo.hand);\r

  \  elem_from_to('soap', deck2, leo.hand);\r

  \  DA.staged_moves = ['mimi.hand.agriculture', 'leo.hand.metalworking',
  'mimi.board.yellow.agriculture', 'mimi.hand.comb',\r

  \    'leo.board.red.metalworking', 'leo.board.red.metalworking',
  'mimi.board.yellow.agriculture', 'pass', 'mimi.board.yellow.agriculture',
  'pass'];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
inno_ut1_create_staged: "function inno_ut1_create_staged() {\r

  \  console.log('*** TEST: activate agriculture ***');\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = inno_setup(player_names);\r

  \  let [decks, mimi, leo] = [fen.decks, fen.players.mimi,
  fen.players.leo];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('agriculture', deck1, mimi.hand);\r

  \  elem_from_to('comb', deck2, mimi.hand);\r

  \  elem_from_to('metalworking', deck1, leo.hand);\r

  \  elem_from_to('soap', deck2, leo.hand);\r

  \  DA.staged_moves = ['mimi.hand.agriculture', 'leo.hand.metalworking',
  'mimi.board.yellow.agriculture', 'mimi.hand.comb'];\r

  \  DA.iter = 13;\r

  \  return [fen, player_names];\r

  }"
inno_ut10_create_staged: "function inno_ut10_create_staged() {\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = inno_setup(player_names);\r

  \  let [decks, mimi, leo] = [fen.decks, fen.players.mimi,
  fen.players.leo];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('agriculture', deck1, mimi.hand);\r

  \  elem_from_to('comb', deck2, mimi.hand);\r

  \  elem_from_to('metalworking', deck1, leo.hand);\r

  \  elem_from_to('soap', deck2, leo.hand);\r

  \  DA.staged_moves = ['mimi.hand.agriculture', 'leo.hand.metalworking',
  'draw', 'draw', 'draw', 'draw'];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
inno_ut11_create_staged: "function inno_ut11_create_staged() {\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = inno_setup(player_names);\r

  \  let [decks, mimi, leo] = [fen.decks, fen.players.mimi,
  fen.players.leo];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('agriculture', deck1, mimi.hand);\r

  \  elem_from_to('comb', deck2, mimi.hand);\r

  \  elem_from_to('metalworking', deck1, leo.hand);\r

  \  elem_from_to('soap', deck2, leo.hand);\r

  \  DA.staged_moves = ['mimi.hand.agriculture', 'leo.hand.metalworking',
  'draw', 'draw', 'draw', 'draw', 'meld', 'meld', 'draw', 'draw', 'meld',
  'meld'];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
inno_ut12_create_staged: "function inno_ut12_create_staged() {\r

  \  console.log('*** TEST: activate code_of_laws ***');\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = inno_setup(player_names);\r

  \  let [decks, mimi, leo] = [fen.decks, fen.players.mimi,
  fen.players.leo];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('code_of_laws', deck1, mimi.hand);\r

  \  elem_from_to('puppet', deck2, mimi.hand);\r

  \  elem_from_to('sailing', deck1, leo.hand);\r

  \  elem_from_to('soap', deck2, leo.hand);\r

  \  DA.staged_moves = ['mimi.hand.code_of_laws', 'leo.hand.sailing',
  'mimi.board.purple.code_of_laws', 'leo.hand.soap', 'mimi.hand.puppet'];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
inno_ut2_create_staged: "function inno_ut2_create_staged() {\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = inno_setup(player_names);\r

  \  let [decks, mimi, leo] = [fen.decks, fen.players.mimi,
  fen.players.leo];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('agriculture', deck1, mimi.hand);\r

  \  elem_from_to('comb', deck2, mimi.hand);\r

  \  elem_from_to('metalworking', deck1, leo.hand);\r

  \  elem_from_to('soap', deck2, leo.hand);\r

  \  DA.staged_moves = ['mimi.hand.agriculture', 'leo.hand.metalworking'];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
inno_ut3_create_staged: "function inno_ut3_create_staged() {\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo', 'felix', 'amanda'];\r

  \  let fen = inno_setup(player_names);\r

  \  let [decks, mimi, leo, felix, amanda] = [fen.decks, fen.players.mimi,
  fen.players.leo, fen.players.felix, fen.players.amanda];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('wheel', deck1, mimi.hand);\r

  \  elem_from_to('comb', deck2, mimi.hand);\r

  \  elem_from_to('metalworking', deck1, leo.hand);\r

  \  elem_from_to('soap', deck2, leo.hand);\r

  \  elem_from_to('agriculture', deck1, felix.hand);\r

  \  elem_from_to('chopsticks', deck2, felix.hand);\r

  \  elem_from_to('pottery', deck1, amanda.hand);\r

  \  elem_from_to('dice', deck2, amanda.hand);\r

  \  DA.staged_moves = ['mimi.hand.wheel', 'leo.hand.metalworking',
  'felix.hand.agriculture', 'amanda.hand.dice'];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
inno_ut4_create_staged: "function inno_ut4_create_staged() {\r

  \  console.log('*** TEST: sharing agriculture ***');\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo', 'felix'];\r

  \  let fen = inno_setup(player_names);\r

  \  let [decks, mimi, leo, felix] = [fen.decks, fen.players.mimi,
  fen.players.leo, fen.players.felix];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('pottery', deck1, mimi.hand);\r

  \  elem_from_to('comb', deck2, mimi.hand);\r

  \  elem_from_to('metalworking', deck1, leo.hand);\r

  \  elem_from_to('soap', deck2, leo.hand);\r

  \  elem_from_to('agriculture', deck1, felix.hand);\r

  \  elem_from_to('chopsticks', deck2, felix.hand);\r

  \  DA.staged_moves = ['mimi.hand.pottery', 'leo.hand.soap',
  'felix.hand.agriculture'];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
inno_ut5_create_staged: "function inno_ut5_create_staged() {\r

  \  console.log('*** TEST: sharing metalworking ***');\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo', 'felix'];\r

  \  let fen = inno_setup(player_names);\r

  \  let [decks, mimi, leo, felix] = [fen.decks, fen.players.mimi,
  fen.players.leo, fen.players.felix];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('wheel', deck1, mimi.hand);\r

  \  elem_from_to('comb', deck2, mimi.hand);\r

  \  elem_from_to('metalworking', deck1, leo.hand);\r

  \  elem_from_to('soap', deck2, leo.hand);\r

  \  elem_from_to('agriculture', deck1, felix.hand);\r

  \  elem_from_to('chopsticks', deck2, felix.hand);\r

  \  DA.staged_moves = ['mimi.hand.wheel', 'leo.hand.metalworking',
  'felix.hand.agriculture', 'draw.decks.B.1'];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
inno_ut6_create_staged: "function inno_ut6_create_staged() {\r

  \  console.log('*** TEST: draw ***');\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = inno_setup(player_names);\r

  \  let [decks, mimi, leo] = [fen.decks, fen.players.mimi,
  fen.players.leo];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('wheel', deck1, mimi.hand);\r

  \  elem_from_to('comb', deck2, mimi.hand);\r

  \  elem_from_to('metalworking', deck1, leo.hand);\r

  \  elem_from_to('soap', deck2, leo.hand);\r

  \  DA.staged_moves = ['mimi.hand.wheel', 'leo.hand.soap'];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
inno_ut7_create_staged: "function inno_ut7_create_staged() {\r

  \  console.log('*** TEST: draw 2 ***');\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = inno_setup(player_names);\r

  \  let [decks, mimi, leo] = [fen.decks, fen.players.mimi,
  fen.players.leo];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('wheel', deck1, mimi.hand);\r

  \  elem_from_to('comb', deck2, mimi.hand);\r

  \  elem_from_to('metalworking', deck1, leo.hand);\r

  \  elem_from_to('soap', deck2, leo.hand);\r

  \  DA.staged_moves = ['mimi.hand.wheel', 'leo.hand.soap', 'decks.E.1',
  'decks.B.1', 'decks.B.1'];\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
inno_ut8_create_staged: "function inno_ut8_create_staged() {\r

  \  console.log('*** TEST: splay up ***');\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = inno_setup(player_names);\r

  \  let [decks, mimi, leo] = [fen.decks, fen.players.mimi,
  fen.players.leo];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('agriculture', deck1, mimi.hand);\r

  \  elem_from_to('comb', deck2, mimi.hand);\r

  \  elem_from_to('metalworking', deck1, leo.hand);\r

  \  elem_from_to('puppet', deck2, leo.hand);\r

  \  elem_from_to('chopsticks', deck2, mimi.board.yellow);\r

  \  elem_from_to('soap', deck2, mimi.board.yellow);\r

  \  elem_from_to('fermenting', decks.B[2], mimi.board.yellow);\r

  \  fen.players.mimi.splays.yellow = 3;\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
inno_ut9_create_staged: "function inno_ut9_create_staged() {\r

  \  console.log('*** TEST: splay complex ***');\r

  \  Session.cur_game = 'gPreinno';\r

  \  let player_names = ['mimi', 'leo'];\r

  \  let fen = inno_setup(player_names);\r

  \  let [decks, mimi, leo] = [fen.decks, fen.players.mimi,
  fen.players.leo];\r

  \  let deck1 = decks.B[1]; let deck2 = decks.E[1];\r

  \  inno_undo_random_deal(fen);\r

  \  elem_from_to('agriculture', deck1, mimi.hand);\r

  \  elem_from_to('comb', deck2, mimi.hand);\r

  \  elem_from_to('metalworking', deck1, leo.hand);\r

  \  elem_from_to('puppet', deck2, leo.hand);\r

  \  let mydeck1 = decks.B[1].map(x => ({ key: x, deck: decks.B[1] }));\r

  \  let mydeck2 = decks.B[2].map(x => ({ key: x, deck: decks.B[2] }));\r

  \  let mydeck3 = decks.B[3].map(x => ({ key: x, deck: decks.B[3] }));\r

  \  let mydecks = mydeck1.concat(mydeck2).concat(mydeck3);\r

  \  for (const x of mydecks) { elem_from_to(x.key, x.deck,
  mimi.board[inno_get_cardinfo(x.key).color]); }\r

  \  fen.players.mimi.splays.blue = 3;\r

  \  fen.players.mimi.splays.red = 0;\r

  \  fen.players.mimi.splays.green = 1;\r

  \  fen.players.mimi.splays.yellow = 2;\r

  \  fen.players.mimi.splays.purple = 2;\r

  \  DA.iter = 100;\r

  \  return [fen, player_names];\r

  }"
innoAgeNumber: "function innoAgeNumber(n, dParent, sz, pos, margin = 10) {\r

  \  let x = Card.sz * .04; sz -= x;\r

  \  let hOff = 0;\r

  \  let styles = { wmin: sz * 1.1, h: sz, bg: '#131313', align: 'center' };\r

  \  let box = mShape('hexFlat', dParent, styles); mPlace(box, pos, margin,
  margin - hOff / 2);\r

  \  s = mDiv(box, { fz: sz * .6, fg: 'white', display: 'inline-block' },
  null, n);\r

  \  mPlace(s, 'cc');\r

  \  return box;\r

  }"
innoBonusNumber: "function innoBonusNumber(n, dParent, sz, pos, margin = 10) {\r

  \  let hOff = margin / 2;\r

  \  let styles = { w: sz, h: sz - hOff, bg: 'brown', box: true, align:
  'center' };\r

  \  let box = mShape('circle', dParent, styles); mPlace(box, pos, margin +
  hOff / 2, margin);\r

  \  let dText = mDiv(box, { fz: sz * .1, fg: 'black', 'line-height': sz * .1,
  matop: sz * .05 }, null, 'bonus');\r

  \  let dNum = mDiv(box, { fz: sz * .7, fg: 'black', 'line-height': sz * .65
  }, null, n);\r

  \  return box;\r

  }"
innoEcho: "function innoEcho(text, dParent, sz, pos, margin = 10) {\r

  \  if (isList(text)) text = text.join('<br>');\r

  \  margin /= 2;\r

  \  sz += margin / 4;\r

  \  let box = mDiv(dParent, { w: sz, h: sz, bg: 'black', fg: 'white',
  rounding: 10 });\r

  \  mPlace(box, pos, margin);\r

  \  box.onclick = (ev) => makeInfobox(ev, box, 3);\r

  \  let t2 = innoText(text);\r

  \  mFillText(t2, box);\r

  \  return box;\r

  }"
innoFlag: "function innoFlag(cardType, dParent, sz, pos, margin = 10) {\r

  \  let box = mDiv(dParent, { w: sz, h: sz, bg: INNO.sym.flag.bg, rounding:
  10 }); if (isdef(pos)) mPlace(box, pos, margin);\r

  \  s = mSym(INNO.sym.flag.key, box, { sz: sz * .75, fg:
  INNO.sym[cardType].bg }, 'cc');\r

  \  return box;\r

  }"
innoInspire: "function innoInspire(text, dParent, sz, pos, margin = 10) {\r

  \  if (isList(text)) text = text.join('<br>');\r

  \  margin /= 2;\r

  \  sz += margin / 4;\r

  \  let box = mDiv(dParent, { w: sz, h: sz, bg: '#ffffff80', fg: 'black',
  rounding: 10 });\r

  \  mPlace(box, pos, margin);\r

  \  box.onclick = (ev) => makeInfobox(ev, box, 3);\r

  \  let t2 = innoText(text);\r

  \  mFillText(t2, box);\r

  \  return box;\r

  }"
innoSym: "function innoSym(key, dParent, sz, pos, margin = 10) {\r

  \  let box = mDiv(dParent, { w: sz, h: sz, bg: INNO.sym[key].bg, rounding:
  10 }); if (isdef(pos)) mPlace(box, pos, margin);\r

  \  s = mSym(INNO.sym[key].key, box, { sz: sz * .75, fg: INNO.sym[key].fg },
  'cc');\r

  \  return box;\r

  }"
innoSymInline: "function innoSymInline(key, dParent) {\r

  \  s = mSymInline(INNO.sym[key].key, dParent, { fg: INNO.sym[key].fg, bg:
  INNO.sym[key].bg, rounding: 10 });\r

  \  return s;\r

  }"
innoText: "function innoText(text) {\r

  \  for (const s in INNO.sym) { INNO.sym[s].sym = Syms[INNO.sym[s].key]; }\r

  \  let parts = text.split('[');\r

  \  let s = parts[0];\r

  \  for (let i = 1; i < parts.length; i++) {\r

  \    let part = parts[i];\r

  \    let kw = stringBefore(part, ']');\r

  \    let sp;\r

  \    let fz = Card.sz * .04;\r

  \    if (Object.keys(INNO.sym).includes(kw)) { let o = INNO.sym[kw]; sp =
  makeSymbolSpan(o.sym, o.bg, o.fg, fz * .9, '20%'); }\r

  \    else if (isNumber(kw)) { sp = makeNumberSpan(kw, '#232323', 'white', fz
  * .9, '20%'); }\r

  \    s += sp + stringAfter(part, ']');\r

  \  }\r

  \  return s;\r

  }"
innovation_get_card: "function innovation_get_card(ckey, index, h = 200) {\r

  \  let filename = `${Basepath}assets/games/innovation/img${ckey}.jpg`;\r

  \  let clip = 50;\r

  \  let html = `<img src='${filename}' height='${h + clip}'
  style='clip-path:inset(0px 0px ${clip}px 0px)'></img>`;\r

  \  let d = mDiv(null, { rounding: 8, bg: 'blue', margin: 10, h: h, w: h *
  141 / 200, overflow: 'hidden' }, null, html, 'card');\r

  \  mMagnifyOnHoverControl(d)\r

  \  let item = { key: ckey, index: index, div: d, html: html, h: h, faceUp:
  true };\r

  \  d.onclick = () => { face_up(item); };\r

  \  return item;\r

  }"
innovation_present: "function innovation_present(fen, d_table) {\r

  \  G = {};\r

  \  G.deck = ui_generic_deck(d_table, fen.deck);\r

  \  let pls = G.players = {};\r

  \  for (const uname in fen.players) {\r

  \    let pl = pls[uname] = {};\r

  \    let fpl = fen.players[uname];\r

  \    let user = firstCond(Users, x => x.name == uname);\r

  \    copyKeys(user, pl)\r

  \    console.log('pl', uname, pl)\r

  \    let d = mDiv(d_table, { bg: user.color }, null, uname); mFlexWrap(d)\r

  \    pl.div = d;\r

  \    let i = 0; let items = pl.hand = fpl.hand.map(x => { i++; return
  innovation_get_card(x, i) });\r

  \    for (const item of items) mAppend(d, iDiv(item));\r

  \  }\r

  }"
innovation_setup: "function innovation_setup(players) {\r

  \  let fen = {};\r

  \  let deck = fen.deck = shuffle(range(0, 435));\r

  \  let pls = fen.players = {};\r

  \  for (const uname of players) {\r

  \    let pl = pls[uname] = {};\r

  \    pl.hand = deck_deal(deck, 7);\r

  \  }\r

  \  let plturn = fen.plturn = rChoose(players);\r

  \  let phase = fen.phase = 'create';\r

  \  return fen;\r

  }"
input_to_anzeige1: "function input_to_anzeige1(caption, index) {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  const di = { '3': 'three', '4': 'four', '5': 'five', '6': 'six', '7':
  'seven', '8': 'eight', '9': 'nine', T: 'ten', J: 'jack', Q: 'queen', K:
  'king', A: 'ace' };\r

  \  let bid = fen.newbid;\r

  \  if (index == 0) {\r

  \    bid[0] = Number(caption);\r

  \    if (bid[0] == 0) {\r

  \      bid[0] = '_'; bid[1] = '_';\r

  \    } else if (bid[1] == '_') {\r

  \      let hand = fen.players[uplayer].hand;\r

  \      let c1 = arrLast(hand);\r

  \      let r = c1[0];\r

  \      if (r == '2') r = bid[3] == 'ace' ? 'K' : 'A';\r

  \      if (di[r] == bid[3]) bid[1] = bid[3] == 'three' ? 'four' : 'three';
  else bid[1] = di[r];\r

  \    }\r

  \  } else if (index == 1) {\r

  \    bid[1] = di[caption];\r

  \    if (bid[0] == '_') bid[0] = 1;\r

  \    if (bid[3] == bid[1]) { bid[0] = bid[0] + bid[2]; bid[2] = bid[3] =
  '_'; }\r

  \  } else if (index == 2) {\r

  \    bid[2] = Number(caption);\r

  \    if (bid[2] == 0) {\r

  \      bid[2] = '_'; bid[3] = '_';\r

  \    } else if (bid[3] == '_') {\r

  \      let hand = fen.players[uplayer].hand;\r

  \      let c1 = hand[0];\r

  \      let r = c1[0];\r

  \      if (r == '2') r = bid[1] == 'ace' ? 'K' : 'A';\r

  \      if (di[r] == bid[1]) bid[3] = bid[1] == 'three' ? 'four' : 'three';
  else bid[3] = di[r];\r

  \    }\r

  \  } else {\r

  \    bid[3] = di[caption];\r

  \    if (bid[2] == '_') bid[2] = 1;\r

  \    if (bid[3] == bid[1]) { bid[0] = bid[0] + bid[2]; bid[1] = bid[3];
  bid[2] = bid[3] = '_'; }\r

  \  }\r

  \  for (let i = 0; i < 4; i++)  iDiv(UI.panelItems[i]).innerHTML = bid[i];\r

  }"
insertColNew: function insertColNew(board, cClick) { return expandBoard(board,
  board.rows, board.cols + 1, cClick + 1); }
insertHere: "function insertHere() {\r

  \  var thisScript = document.scripts[document.scripts.length - 1];\r

  \  var parent = thisScript.parentElement;\r

  \  for (let i = 0; i < arguments.length; i++) {\r

  \    const el = arguments[i];\r

  \    if (typeof el == 'string') {\r

  \      thisScript.nextSibling.insertAdjacentHTML('beforebegin', el);\r

  \    } else {\r

  \      parent.insertBefore(el, thisScript.nextSibling);\r

  \    }\r

  \  }\r

  }"
insertRowNew: function insertRowNew(board, cClick) { return expandBoard(board,
  board.rows + 1, board.cols, cClick + 1); }
instanceOf: "function instanceOf(o, className) {\r

  \  let otype = o.obj_type;\r

  \  switch (className) {\r

  \    case '_player':\r

  \    case 'player': return ['GamePlayer', 'me', '_me', 'player', '_player',
  'opp', 'opponent', '_opponent'].includes(otype); break;\r

  \    case 'building': return otype == 'farm' || otype == 'estate' || otype
  == 'chateau' || otype == 'settlement' || otype == 'city' || otype == 'road';
  break;\r

  \  }\r

  }"
instantiateFractions: "function instantiateFractions(wp) {\r

  \  let text = wp.text;\r

  \  let parts = text.split('{');\r

  \  console.log('parts', parts);\r

  \  let tnew = '';\r

  \  if (!startsWith(text, '{')) { tnew += parts[0]; parts = parts.slice(1);
  }\r

  \  let denom;\r

  \  for (const part of parts) {\r

  \    let textPart = stringAfter(part, '}');\r

  \    let key = part.substring(0, 2);\r

  \    console.log('key', key);\r

  \    if (part[0] == 'F') {\r

  \      let numer = part[1] == 'a' ? 1 : isdef(denom) ? denom :
  randomNumber(2, 8);\r

  \      if (nundef(denom)) {\r

  \        denom = numer <= 2 ? randomNumber(numer + 1, 9) :\r

  \          numer < 9 ? coin() ? randomNumber(2, numer - 1) :
  randomNumber(numer + 1, 9) : randomNumber(2, number - 1);\r

  \      }\r

  \      tnew += ' ' + getTextForFraction(numer, denom);\r

  \      operands.push(numer / denom);\r

  \    }\r

  \    tnew += ' ' + textPart.trim();\r

  \  }\r

  \  wp.text = tnew.trim();\r

  }"
instantiateNames: "function instantiateNames(wp) {\r

  \  let text = wp.text;\r

  \  let parts = text.split('@P');\r

  \  let diNames = wp.diNames = {};\r

  \  let tnew = '';\r

  \  let allNames = jsCopy(arrPlus(GirlNames, BoyNames));\r

  \  let gNames = jsCopy(GirlNames);\r

  \  let bNames = jsCopy(BoyNames);\r

  \  if (!startsWith(text, '@P')) { tnew += parts[0]; parts = parts.slice(1);
  }\r

  \  for (const part of parts) {\r

  \    let textPart = stringAfter(part, ' ');\r

  \    let hasDot = part[2] == '.';\r

  \    let key = part.substring(0, 2);\r

  \    if (['G', 'B', 'P'].includes(part[0])) {\r

  \      let nlist = part[0] == 'P' ? allNames : part[0] == 'B' ? bNames :
  gNames;\r

  \      if (isdef(diNames[key])) {\r

  \        tnew += ' ' + diNames[key];\r

  \      } else {\r

  \        diNames[key] = chooseRandom(nlist);\r

  \        removeInPlace(nlist, diNames[key]);\r

  \        removeInPlace(allNames, diNames[key]);\r

  \        tnew += ' ' + diNames[key];\r

  \      }\r

  \    }\r

  \    tnew += (hasDot ? '. ' : ' ') + textPart.trim();\r

  \  }\r

  \  wp.text = tnew.trim();\r

  \  if (wp.sol[0] == 'p') {\r

  \    let k = wp.sol.trim().substring(3);\r

  \    wp.result = { number: 0, text: diNames[k] };\r

  \    return true;\r

  \  } else { return false; }\r

  }"
instantiateNumbers: "function instantiateNumbers(wp) {\r

  \  let text = wp.text;\r

  \  if (wp.sol[0] == 's') { wp.result = { number: 0, text:
  wp.sol.substring(1) }; return [{}, '']; }\r

  \  let diop = wp.diop = {}, res, result = [], eq;\r

  \  let solist = wp.sol.split('=>');\r

  \  for (const sol of solist) {\r

  \    [res, eq] = replaceSol(sol, diop);\r

  \    result.push(res);\r

  \  }\r

  \  result = arrLast(result).res;\r

  \  wp.result = { number: isdef(diop.R) ? diop.R : result };\r

  \  wp.result.text = '' + wp.result.number;\r

  \  for (const k in diop) {\r

  \    if (k == 'R') continue;\r

  \    text = replaceAll(text, '@' + k, valToString(diop[k]));\r

  \  }\r

  \  wp.text = text;\r

  \  fractionConvert(wp, diop);\r

  \  return [diop, eq];\r

  }"
instantiateNumbers_dep: "function instantiateNumbers_dep(wp) {\r

  \  let text = wp.text;\r

  \  let diop = {};\r

  \  let sol = wp.sol;\r

  \  let rhs = stringBefore(sol, '=');\r

  \  let type = rhs.includes('*') ? rhs.includes('R') ? 'div' : 'mult' :
  rhs.includes('R') ? 'minus' : 'plus';\r

  \  let i = 0;\r

  \  while (i < rhs.length) {\r

  \    if (rhs[i] == 'R') { diop.R = getOperand(type); i += 1; }\r

  \    else if (rhs[i] == 'N') {\r

  \      i += 1;\r

  \      let inum = Number(rhs[i]);\r

  \      let k = 'N' + inum;\r

  \      diop[k] = getOperand(type);\r

  \      i += 1;\r

  \    } else i += 1;\r

  \  }\r

  \  i = 0;\r

  \  while (i < rhs.length) {\r

  \    if (rhs[i] == 'n') {\r

  \      i += 1;\r

  \      let inum = Number(rhs[i]);\r

  \      let k = 'n' + inum;\r

  \      let kN = 'N' + inum;\r

  \      let x = diop[kN];\r

  \      diop[k] = randomNumber(1, x - 1);\r

  \      i += 1;\r

  \    } else i += 1;\r

  \  }\r

  \  let eq = rhs;\r

  \  for (const k in diop) {\r

  \    eq = eq.replace(k, diop[k]);\r

  \  }\r

  \  let result = eval(eq);\r

  \  let lhs = stringAfter(sol, '=');\r

  \  diop[lhs] = result;\r

  \  wp.result = { number: isdef(diop.R) ? diop.R : result };\r

  \  wp.result.text = '' + wp.result.number;\r

  \  for (const k in diop) {\r

  \    if (k == 'R') continue;\r

  \    text = text.replace('@' + k, diop[k]);\r

  \  }\r

  \  wp.text = text;\r

  \  return [diop, eq];\r

  }"
instantiateNumbersIncludingFractions: "function
  instantiateNumbersIncludingFractions(wp) {\r

  \  let sol = wp.sol;\r

  \  console.log('________________sol', sol)\r

  \  let parts = sol.split('{');\r

  \  let di = {};\r

  \  let newSol = '';\r

  \  for (const p of parts) {\r

  \    if (p[0] == 'N') {\r

  \      let key = p.substring(0, 2);\r

  \      let n;\r

  \      console.log('p', p)\r

  \      if (p[2] == '(') {\r

  \        let nums = stringBetween(p, '(', ')');\r

  \        let lst = allNumbers(nums);\r

  \        if (lst.length <= 3 && lst[0] <= lst[1]) {\r

  \          n = randomNumber(...lst);\r

  \        } else {\r

  \          n = chooseRandom(lst);\r

  \        }\r

  \      } else {\r

  \        n = randomNumber(2, 9);\r

  \      }\r

  \      let rest = stringAfter(p, '}');\r

  \      newSol += '' + n + rest;\r

  \      di[key] = n;\r

  \    } else newSol += p;\r

  \  }\r

  \  console.log('newSol', newSol);\r

  \  let res = eval(newSol);\r

  \  console.log('res of simplify', res);\r

  \  let numResult = res[0] / res[1];\r

  \  let textResult = numResult == Math.round(numResult) ? numResult : '' +
  res[0] + '/' + res[1];\r

  \  wp.result = { number: numResult, text: textResult };\r

  \  let text = wp.text;\r

  \  for (const k in di) {\r

  \    if (k == 'R') continue;\r

  \    text = replaceAll(text, '{' + k + '}', di[k]);\r

  \  }\r

  \  console.log('_________ text', text);\r

  \  parts = text.split('{');\r

  \  let tnew = '';\r

  \  for (const p of parts) {\r

  \    if (p[0] == 'F') {\r

  \      let s = stringBefore(p, '}');\r

  \      console.log('s', s)\r

  \      let [n, d] = allNumbers(s);\r

  \      tnew += getTextForFraction(n, d);\r

  \      tnew += '; ' + stringAfter(p, '}');\r

  \    } else tnew += p;\r

  \  }\r

  \  text = tnew;\r

  \  wp.text = text;\r

  \  mText(wp.text, dTable)\r

  }"
instantiateOidKeyAtParent: "function instantiateOidKeyAtParent(oid, key,
  uidParent, R) {\r

  \  console.log('>>>>>instantiate', oid, 'using', key, 'at', uidParent,
  '\\nrParent', R.rNodes[uidParent], '\\nuiParent', R.uiNodes[uidParent]);\r

  \  let rtreeParent = R.rNodes[uidParent];\r

  \  if (nundef(rtreeParent.children)) {\r

  \    if (isdef(R.uiNodes[uidParent]))
  change_parent_type_if_needed(rtreeParent, R);\r

  \    rtreeParent.children = [];\r

  \  }\r

  \  let index = rtreeParent.children.length;\r

  \  let newPath = isdef(rtreeParent.sub) ? extendPath(rtreeParent.path,
  index) : '.';\r

  \  let nsp = R.lastSpec[key];\r

  \  let n1 = recBuildRTree(nsp, key, '.', rtreeParent, R.lastSpec, R, oid);\r

  \  R.rNodes[n1.uid] = n1;\r

  \  lookupAddToList(R.rNodesOidKey, [oid, key], n1.uid);\r

  \  rtreeParent.children.push(n1.uid);\r

  \  if (isdef(R.uiNodes) && isdef(R.uiNodes[uidParent])) {\r

  \    let parent = R.uiNodes[uidParent];\r

  \    parent.adirty = true;\r

  \    recBuildUiFromNode(n1, uidParent, R, parent.defParams, oid);\r

  \    parent.children = rtreeParent.children;\r

  \  } else {\r

  \    console.log('UI not creatable! No suitable parent found! uidParent',
  uidParent, 'oid', oid, 'key', key, R.uiNodes);\r

  \  }\r

  }"
instantiateWP: "function instantiateWP(wp) {\r

  \  if (wp.title.includes('Fractions'))
  instantiateNumbersIncludingFractions(wp); else instantiateNumbers(wp);\r

  \  instantiateNames(wp);\r

  \  console.log('wp', wp.text, wp.result);\r

  }"
instantOidKey: "function instantOidKey(oid, key, uidParent, R) {\r

  \  let rtreeParent = R.rNodes[uidParent];\r

  \  if (nundef(rtreeParent.children)) {\r

  \    rtreeParent.children = [];\r

  \  }\r

  \  let n1 = recTree(R.lastSpec[key], rtreeParent, R, oid, key);\r

  \  R.rNodes[n1.uid] = n1;\r

  \  rtreeParent.children.push(n1.uid);\r

  \  if (rtreeParent.children.length == 2 && rtreeParent.type == 'invisible'
  && lookup(rtreeParent, ['params', 'bg'])) {\r

  \    let uiParent = R.uiNodes[rtreeParent.uid];\r

  \    if (isdef(uiParent)) {\r

  \      rtreeParent.type = uiParent.type = 'panel';\r

  \      decodeParams(uiParent, R, {});\r

  \      uiParent.adirty = true;\r

  \      applyCssStyles(uiParent.ui, uiParent.cssParams);\r

  \    }\r

  \  }\r

  \  return n1;\r

  }"
intDiv: "function intDiv(n, q) {\r

  \  return Math.floor(n / q);\r

  }"
interaction: "function interaction(fen, plname, func) {\r

  \  if (!uiActivated) return;\r

  \  uiActivate = false;\r

  \  pollStop();\r

  \  func(fen, plname);\r

  }"
interrupt: "function interrupt() {\r

  \  STOPAUS = true;\r

  \  uiActivated = aiActivated = false;\r

  \  clearTimeouts();\r

  \  if (isdef(G.clear)) G.clear();\r

  \  TOMan.clear();\r

  \  clearMarkers();\r

  }"
intersection: "function intersection(arr1, arr2) {\r

  \  let res = [];\r

  \  for (const a of arr1) {\r

  \    if (arr2.includes(a)) {\r

  \      addIf(res, a);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
intro_create_score_table: "function intro_create_score_table(fen) {\r

  \  let dParent = mBy('dIntro');\r

  \  let d = mDiv(dParent, { margin: 'auto', w: 300 });\r

  \  html = `<div style='text-align:center;margin-top:100px'>\r

  \  <table id='customers'><tr><th>player</th><th>score</th></tr>\r

  \  `;\r

  \  let plparts = fen.split(',');\r

  \  for (const pl of plparts) {\r

  \    html += `<tr><td>${stringBefore(pl, ':')}</td><td>${stringAfter(pl,
  ':')}</td></tr>`\r

  \  }\r

  \  html += '</table></div>';\r

  \  d.innerHTML = html;\r

  }"
intro_show_user_image: "function intro_show_user_image(uname) {\r

  \  let dParent = mBy('dIntro');\r

  \  let d = mDiv(dParent, { margin: 'auto', w: 300 });\r

  \  let html = `\r

  \  <div style='text-align:center;margin-top:100px'>\r

  \    <img src='../base/assets/images/${uname}.jpg' class=\"img_person\"
  height=200 />\r

  \  </div>\r

  \  `;\r

  \  d.innerHTML = html;\r

  }"
ipadd: "function ipadd(elem) {\r

  \  elem.setAttribute('draggable', true);\r

  \  function OnDragOver(ev) {\r

  \    elem.setAttribute('DragOver', true);\r

  \    ev.stopPropagation();\r

  \    ev.preventDefault();\r

  \    ev.dataTransfer.dropEffect = 'copy';\r

  \  }\r

  \  function OnDragLeave(ev) {\r

  \    elem.removeAttribute('DragOver');\r

  \  }\r

  \  function OnDrop(ev) {\r

  \    elem.removeAttribute('DragOver');\r

  \    ev.preventDefault();\r

  \    ev.stopPropagation();\r

  \    elem.innerHTML = ev.dataTransfer.getData('text/plain');\r

  \  }\r

  \  function OnDragStart(ev) {\r

  \    console.log('insane!!!');\r

  \    ev.stopPropagation();\r

  \    ev.dataTransfer.dropEffect = 'move';\r

  \    ev.dataTransfer.setData('text/plain', this.innerHTML);\r

  \  }\r

  \  function OnClickClick(ev) {\r

  \    ev.preventDefault();\r

  \    ev.stopPropagation();\r

  \    let aname = 'data_transport';\r

  \    let source = DA[aname];\r

  \    if (isdef(source)) {\r

  \      elem.innerHTML = source.innerHTML;\r

  \      toggleSelectionOfPicture(source);\r

  \      DA[aname] = null;\r

  \    } else {\r

  \      toggleSelectionOfPicture(elem);\r

  \      DA[aname] = elem;\r

  \    }\r

  \  }\r

  \  elem.addEventListener('dragstart', OnDragStart);\r

  \  elem.addEventListener('dragover', OnDragOver);\r

  \  elem.addEventListener('dragleave', OnDragLeave);\r

  \  elem.addEventListener('drop', OnDrop);\r

  \  elem.onclick = OnClickClick;\r

  \  DA.data_transport = null;\r

  }"
ipaddX: "function ipaddX(elem, role) {\r

  \  let isSource = role != 'target';\r

  \  let isTarget = role != 'source';\r

  \  if (isSource) elem.setAttribute('draggable', true);\r

  \  function OnDragOver(ev) {\r

  \    elem.setAttribute('DragOver', true);\r

  \    ev.stopPropagation();\r

  \    ev.preventDefault();\r

  \    ev.dataTransfer.dropEffect = 'copy';\r

  \  }\r

  \  function OnDragLeave(ev) {\r

  \    elem.removeAttribute('DragOver');\r

  \  }\r

  \  function OnDrop(ev) {\r

  \    elem.removeAttribute('DragOver');\r

  \    ev.preventDefault();\r

  \    ev.stopPropagation();\r

  \    if (isTarget) elem.innerHTML = ev.dataTransfer.getData('text/plain');\r

  \  }\r

  \  function OnDragStart(ev) {\r

  \    ev.stopPropagation();\r

  \    ev.dataTransfer.dropEffect = 'move';\r

  \    ev.dataTransfer.setData('text/plain', this.innerHTML);\r

  \  }\r

  \  function OnClickClick(ev) {\r

  \    ev.preventDefault();\r

  \    ev.stopPropagation();\r

  \    let aname = 'data_transport';\r

  \    let source = DA[aname];\r

  \    if (nundef(source) && isSource) {\r

  \      toggleSelectionOfPicture(elem);\r

  \      DA[aname] = elem;\r

  \    } else if (isdef(source)) {\r

  \      if (isTarget) {\r

  \        if (source == elem) {\r

  \          console.log('INPUT');\r

  \          elem.innerHTML = '_';\r

  \        } else {\r

  \          elem.innerHTML = source.innerHTML;\r

  \        }\r

  \        toggleSelectionOfPicture(source);\r

  \        DA[aname] = null;\r

  \      }\r

  \      else if (isSource) {\r

  \        toggleSelectionOfPicture(source);\r

  \        if (source != elem) { toggleSelectionOfPicture(elem); DA[aname] =
  elem; }\r

  \        else {\r

  \          let is_letter = !isTarget;\r

  \          if (is_letter) {\r

  \            let l = elem.innerHTML;\r

  \            let inp_empty;\r

  \            for (const inp of Goal.inputs) {\r

  \              let di = iDiv(inp);\r

  \              let inner = di.innerHTML;\r

  \              if (iDiv(inp).innerHTML == '_') { inp_empty = inp; break; }\r

  \            }\r

  \            if (isdef(inp_empty)) iDiv(inp_empty).innerHTML = l;\r

  \          }\r

  \          DA[aname] = null;\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  if (isSource) elem.addEventListener('dragstart', OnDragStart);\r

  \  elem.addEventListener('dragover', OnDragOver);\r

  \  elem.addEventListener('dragleave', OnDragLeave);\r

  \  elem.addEventListener('drop', OnDrop);\r

  \  elem.onclick = OnClickClick;\r

  \  DA.data_transport = null;\r

  }"
ipaddX_orig: "function ipaddX_orig(elem, role) {\r

  \  let isSource = role != 'target';\r

  \  let isTarget = role != 'source';\r

  \  if (isSource) elem.setAttribute('draggable', true);\r

  \  function OnDragOver(ev) {\r

  \    elem.setAttribute('DragOver', true);\r

  \    ev.stopPropagation();\r

  \    ev.preventDefault();\r

  \    ev.dataTransfer.dropEffect = 'copy';\r

  \  }\r

  \  function OnDragLeave(ev) {\r

  \    elem.removeAttribute('DragOver');\r

  \  }\r

  \  function OnDrop(ev) {\r

  \    elem.removeAttribute('DragOver');\r

  \    ev.preventDefault();\r

  \    ev.stopPropagation();\r

  \    if (isTarget) elem.innerHTML = ev.dataTransfer.getData('text/plain');\r

  \  }\r

  \  function OnDragStart(ev) {\r

  \    ev.stopPropagation();\r

  \    ev.dataTransfer.dropEffect = 'move';\r

  \    ev.dataTransfer.setData('text/plain', this.innerHTML);\r

  \  }\r

  \  function OnClickClick(ev) {\r

  \    ev.preventDefault();\r

  \    ev.stopPropagation();\r

  \    let aname = 'data_transport';\r

  \    let source = DA[aname];\r

  \    if (nundef(source) && isSource) {\r

  \      toggleSelectionOfPicture(elem);\r

  \      DA[aname] = elem;\r

  \    } else if (isdef(source)) {\r

  \      if (isTarget) { elem.innerHTML = source.innerHTML;
  toggleSelectionOfPicture(source); DA[aname] = null; }\r

  \      else if (isSource) {\r

  \        toggleSelectionOfPicture(source);\r

  \        if (source != elem) { toggleSelectionOfPicture(elem); DA[aname] =
  elem; }\r

  \        else { DA[aname] = null; }\r

  \      }\r

  \    }\r

  \  }\r

  \  if (isSource) elem.addEventListener('dragstart', OnDragStart);\r

  \  elem.addEventListener('dragover', OnDragOver);\r

  \  elem.addEventListener('dragleave', OnDragLeave);\r

  \  elem.addEventListener('drop', OnDrop);\r

  \  elem.onclick = OnClickClick;\r

  \  DA.data_transport = null;\r

  }"
ipaddX_v1: "function ipaddX_v1(elem, role) {\r

  \  let isSource = role != 'target';\r

  \  let isTarget = role != 'source';\r

  \  if (isSource) elem.setAttribute('draggable', true);\r

  \  function OnDragOver(ev) {\r

  \    elem.setAttribute('DragOver', true);\r

  \    ev.stopPropagation();\r

  \    ev.preventDefault();\r

  \    ev.dataTransfer.dropEffect = 'copy';\r

  \  }\r

  \  function OnDragLeave(ev) {\r

  \    elem.removeAttribute('DragOver');\r

  \  }\r

  \  function OnDrop(ev) {\r

  \    elem.removeAttribute('DragOver');\r

  \    ev.preventDefault();\r

  \    ev.stopPropagation();\r

  \    if (isTarget) elem.innerHTML = ev.dataTransfer.getData('text/plain');\r

  \  }\r

  \  function OnDragStart(ev) {\r

  \    ev.stopPropagation();\r

  \    ev.dataTransfer.dropEffect = 'move';\r

  \    ev.dataTransfer.setData('text/plain', this.innerHTML);\r

  \  }\r

  \  function OnClickClick(ev) {\r

  \    ev.preventDefault();\r

  \    ev.stopPropagation();\r

  \    let aname = 'data_transport';\r

  \    let source = DA[aname];\r

  \    if (nundef(source) && isSource) {\r

  \      toggleSelectionOfPicture(elem);\r

  \      DA[aname] = elem;\r

  \    } else if (isdef(source)) {\r

  \      if (isTarget) {\r

  \        if (source == elem) {\r

  \          console.log('INPUT');\r

  \          elem.innerHTML = '_';\r

  \        } else {\r

  \          elem.innerHTML = source.innerHTML;\r

  \        }\r

  \        toggleSelectionOfPicture(source);\r

  \        DA[aname] = null;\r

  \      }\r

  \      else if (isSource) {\r

  \        toggleSelectionOfPicture(source);\r

  \        if (source != elem) { toggleSelectionOfPicture(elem); DA[aname] =
  elem; }\r

  \        else {\r

  \          let is_letter = !isTarget;\r

  \          if (is_letter) {\r

  \            let l = elem.innerHTML;\r

  \            let inp_empty;\r

  \            for (const inp of Goal.inputs) {\r

  \              let di = iDiv(inp);\r

  \              let inner = di.innerHTML;\r

  \              if (iDiv(inp).innerHTML == '_') { inp_empty = inp; break; }\r

  \            }\r

  \            if (isdef(inp_empty)) iDiv(inp_empty).innerHTML = l;\r

  \          }\r

  \          DA[aname] = null;\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  if (isSource) elem.addEventListener('dragstart', OnDragStart);\r

  \  elem.addEventListener('dragover', OnDragOver);\r

  \  elem.addEventListener('dragleave', OnDragLeave);\r

  \  elem.addEventListener('drop', OnDrop);\r

  \  elem.onclick = OnClickClick;\r

  \  DA.data_transport = null;\r

  }"
iPanel: "function iPanel(dParent, styles, classes, id, inner) {\r

  \  let item = { id: isdef(id) ? id : getUID(), type: 'plain' };\r

  \  let dOuter = mDiv(dParent);\r

  \  mCenterCenterFlex(dOuter);\r

  \  let d = mDiv(dOuter);\r

  \  if (isdef(inner)) d.innerHTML = inner;\r

  \  if (nundef(styles)) styles = {};\r

  \  let picStyles = { fz: valf(styles.fz, valf(styles.h / 2, 25)), display:
  'inline-block' };\r

  \  mStyle(dOuter, styles);\r

  \  mStyle(d, picStyles);\r

  \  if (isdef(classes)) mClass(dOuter, classes);\r

  \  iAdd(item, { div: dOuter, dPic: d });\r

  \  return item;\r

  }"
iParentBounds: "function iParentBounds(i) {\r

  \  if (isdef(i.div)) i = i.div;\r

  \  let b = getBounds(i);\r

  \  let [x, y, w, h] = [Math.round(b.left), Math.round(b.top),
  Math.round(b.width), Math.round(b.height)];\r

  \  return { x: x, y: y, w: w, h: h };\r

  }"
iPic: "function iPic(i) { return isdef(i.live) ? i.live.dPic : isdef(i.dPic) ?
  i.dPic : null; }"
iPrepper: "async function iPrepper() {\r

  \  symbolDict = Syms = await localOrRoute('syms',
  '../assets/allSyms.yaml');\r

  \  SymKeys = Object.keys(Syms);\r

  \  initTable();\r

  }"
iPresentHand: "function iPresentHand(h, dParent, styles, redo = true) {\r

  \  if (nundef(h.zone)) h.zone = iHandZone(dParent, styles); else
  clearElement(h.zone);\r

  \  if (nundef(h.iHand)) {\r

  \    let items = i52(h.deck.cards());\r

  \    h.iHand = iSplay(items, h.zone);\r

  \  } else if (redo) {\r

  \    clearElement(h.zone);\r

  \    let items = i52(h.deck.cards());\r

  \    h.iHand = iSplay(items, h.zone);\r

  \  }\r

  \  return h;\r

  }"
iPresentHand_test: "function iPresentHand_test(dParent, h, redo = true) {\r

  \  if (nundef(h.zone)) h.zone = iHandZone_test(dParent); else
  clearElement(h.zone);\r

  \  if (nundef(h.iHand)) {\r

  \    let items = i52(h.deck.cards());\r

  \    h.iHand = iSplay(items, h.zone);\r

  \  } else if (redo) {\r

  \    clearElement(h.zone);\r

  \    let items = i52(h.deck.cards());\r

  \    h.iHand = iSplay(items, h.zone);\r

  \  }\r

  \  return h;\r

  }"
iReg: "function iReg(item, liveprops, addprops) {\r

  \  iRepair(item);\r

  \  if (isdef(liveprops)) for (const k in liveprops) {
  lookupSetOverride(item, ['live', k], liveprops[k]) }\r

  \  if (isdef(addprops)) copyKeys(addprops, item);\r

  \  let umain = iDiv(item); if (nundef(umain) && isdef(item.live)) { umain =
  get_values(item.live)[0]; }\r

  \  let id = item.id;\r

  \  if (nundef(id) && umain) { id = valnwhite(umain.id, getUID()); item.id =
  id; }\r

  \  else if (nundef(id)) { id = getUID(); item.id = id; }\r

  \  if (umain) { umain.id = id; }\r

  \  if (nundef(Items[id])) Items[id] = item;\r

  \  return item;\r

  }"
iRegister: "function iRegister(item, id) { let uid = isdef(id) ? id : getUID();
  Items[uid] = item; return uid; }"
iRegisterX: "function iRegisterX(item, keyProp, id) {\r

  \  let uid = isdef(id) ? id : getUID(); Items[uid] = item;\r

  \  if (isdef(item[keyProp])) ItemsByKey[item[keyProp]] = uid; return uid;\r

  }"
iRemakeHand: "function iRemakeHand(data) {\r

  \  let zone = data.zone;\r

  \  let deck = data.deck;\r

  \  let items = i52(deck.cards());\r

  \  clearElement(zone);\r

  \  data.iHand = iSplay(items, zone);\r

  \  return data;\r

  }"
iRemoveFromLive: "function iRemoveFromLive(pid, id) {\r

  \  if (pid == id) { console.log('!!!!!!!!!!!!!!!!!!!!', id, 'member of
  itself!!!'); return; }\r

  \  let comp = Items[pid];\r

  \  let l = comp.live;\r

  \  let tbr = null;\r

  \  for (const k in l) {\r

  \    let el = l[k];\r

  \    if (el.id == id) { tbr = k; break; }\r

  \  }\r

  \  if (tbr) delete l[tbr];\r

  }"
iRepair: "function iRepair(item) {\r

  \  let todelete = [];\r

  \  delete item.funcs;\r

  \  for (const k in item) {\r

  \    let val = item[k];\r

  \    if (isDOM(val) || k == 'cx') {\r

  \      lookupSetOverride(item, ['live', k], val);\r

  \      todelete.push(k);\r

  \    } else if (typeof val == 'function') {\r

  \      lookupSet(item, ['funcs', k], true);\r

  \    }\r

  \  }\r

  \  for (const k of todelete) delete item[k];\r

  \  return item;\r

  }"
iResize: "function iResize(i, w, h) { return isList(i) ? i.map(x => iSize(x, w,
  h)) : iSize(i, w, h); }"
iResize52: function iResize52(i, h) { let w = h * .7; return iResize(i, w, h); }
iRoom: "function iRoom(dParent, ch, styles) {\r

  \  let def = { 'grid-area': ch, position: 'relative' };\r

  \  copyKeys(def, styles);\r

  \  let dCell = mDiv(dParent, styles);\r

  \  let rect = getRect(dCell);\r

  \  let size = Math.round(rect.w * rect.h / 1000);\r

  \  let room = { id: ch, ch: ch, bg: dCell.style.backgroundColor, rect: rect,
  size: size };\r

  \  delete Items[ch];\r

  \  iAdd(room, { div: dCell });\r

  \  room.doors = [];\r

  \  room.furniture = [];\r

  \  room.hasDoor = () => !isEmpty(room.doors)\r

  \  room.hasPassThrough = () => room.doors.length >= 2;\r

  \  return room;\r

  }"
is_a_word: function is_a_word(w, lang) { return lookup(Dictionary, [lang, w]) != null; }
is_admin: "function is_admin(name) { return ['mimi'].includes(isdef(name) ? name
  : Session.cur_user); }"
is_advanced_user: "function is_advanced_user() {\r

  \  let advancedUsers = ['mimi', 'bob', 'buddy', 'minnow', 'nimble',
  'leo'];\r

  \  return isdef(U) && ((advancedUsers.includes(DA.secretuser) ||
  advancedUsers.includes(U.name)));\r

  }"
is_ai_player: "function is_ai_player(plname) {\r

  \  let [fen, name] = [Z.fen, valf(plname, Z.uplayer)];\r

  \  return lookup(fen, ['players', name, 'playmode']) == 'bot';\r

  }"
is_bid_higher_than: "function is_bid_higher_than(bid, oldbid) {\r

  \  bid = jsCopy(bid);\r

  \  if (bid[0] == '_') bid[0] = 0;\r

  \  if (bid[2] == '_') bid[2] = 0;\r

  \  if (oldbid[0] == '_') oldbid[0] = 0;\r

  \  if (oldbid[2] == '_') oldbid[2] = 0;\r

  \  let higher = bid[0] > oldbid[0]\r

  \    || bid[0] == oldbid[0] && is_higher_ranked_name(bid[1], oldbid[1])\r

  \    || bid[0] == oldbid[0] && bid[1] == oldbid[1] && bid[2] > oldbid[2]\r

  \    || bid[0] == oldbid[0] && bid[1] == oldbid[1] && bid[2] == oldbid[2] &&
  is_higher_ranked_name(bid[3], oldbid[3]);\r

  \  return higher;\r

  }"
is_bw_loggedin: "function is_bw_loggedin() {\r

  \  let bw_state = S.bw_state;\r

  \  return bw_state == 'loggedin';\r

  }"
is_canvas: function is_canvas(item) { return isdef(item.cx) && isdef(item.cv); }
is_card: function is_card(o) { return isdef(o.rank) || isdef(o.o) && isdef(o.o.rank); }
is_card_key: function is_card_key(ckey, rankstr = '*A23456789TJQK', suitstr =
  'SHCD') { return rankstr.includes(ckey[0]) && suitstr.includes(ckey[1]); }
is_collect_mode: function is_collect_mode() { return Z.turn.length > 1; }
is_correct_group: function is_correct_group(j, n = 3) { let r = j[0][0]; return
  j.length >= n && has_at_most_n_jolly(j, Z.options.jokers_per_group) &&
  j.every(x => is_jolly(x) || x[0] == r); }
is_correct_group_illegal: "function is_correct_group_illegal(cards) {\r

  \  let keys = cards.map(x => x.key);\r

  \  let isgroup = is_group(keys);\r

  \  if (isgroup) return false;\r

  \  if (is_fixed_goal() && get_round_goal() != '7R') {\r

  \    return `the goal for this round is ${get_round_goal()}!`;\r

  \  }\r

  \  let [fen, uplayer] = [Z.fen, Z.uplayer];\r

  \  let pl = fen.players[uplayer];\r

  \  if (!is_fixed_goal() && pl.goals['7R'] == true) return `you can only have
  one sequence of 7!`;\r

  \  if (pl.journeys.find(x => is_sequence(x))) return `you can only have one
  sequence of 7!`;\r

  \  if (pl.roundgoal) return `row of 7 NOT allowed except if it is the round
  goal!`;\r

  \  return false;\r

  }"
is_current_player_bot: "function is_current_player_bot() {\r

  \  let [fen, uplayer, turn] = [Z.fen, Z.uplayer, Z.turn];\r

  \  let curplayer = Z.turn[0];\r

  \  if (fen.players[curplayer].playmode == 'bot') return true; else return
  false;\r

  }"
is_fixed_goal: function is_fixed_goal() { return Z.options.phase_order == 'fixed'; }
is_game_card: function is_game_card(k) { return isdef(Session.cards[k]); }
is_game_host: function is_game_host() { return Session.cur_table.host == Session.cur_user; }
is_group: "function is_group(j) {\r

  \  if (j.length < 3) return false;\r

  \  let rank = firstCond(j, x => !is_jolly(x))[0];\r

  \  return j.every(x => is_jolly(x) || x[0] == rank);\r

  }"
is_higher_ranked_name: "function is_higher_ranked_name(f1, f2) {\r

  \  let di2 = { _: 0, three: 3, four: 4, five: 5, six: 6, seven: 7, eight: 8,
  nine: 9, ten: 10, jack: 11, queen: 12, king: 13, ace: 14 };\r

  \  return di2[f1] > di2[f2];\r

  }"
is_human_player: "function is_human_player(plname) {\r

  \  let [fen, name] = [Z.fen, valf(plname, Z.uplayer)];\r

  \  return lookup(fen, ['players', name, 'playmode']) == 'human';\r

  }"
is_in_middle_of_church: "function is_in_middle_of_church() {\r

  \  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];\r

  \  return isdef(fen.players[uplayer].tithes);\r

  }"
is_it_my_turn: function is_it_my_turn(r, uname) { return r.uname == uname; }
is_joker: function is_joker(card) { return is_jolly(card.key); }
is_jolly: function is_jolly(ckey) { return ckey[0] == '*'; }
is_journey: "function is_journey(cards) {\r

  \  let jlist = find_sequences(cards, cards.length, 'A23456789TJQK');\r

  \  let j = firstCond(jlist, x => x.length == cards.length);\r

  \  return j;\r

  }"
is_just_my_turn: "function is_just_my_turn() {\r

  \  return isEmpty(Z.turn.filter(x => x != Z.uplayer));\r

  }"
is_key_down: "function is_key_down(key) {\r

  \  if (nundef(DA.keystate)) {\r

  \    DA.keystate = {};\r

  \    window.addEventListener('keyup', (e) => DA.keystate[e.key] = false);\r

  \    window.addEventListener('keydown', (e) => { DA.keystate[e.key] = true;
  });\r

  \  }\r

  \  return DA.keystate.hasOwnProperty(key) && DA.keystate[key] || false;\r

  }"
is_lat_lng: function is_lat_lng(p) { return isdef(p.lat); }
is_lat_long: function is_lat_long(p) { return is_lat_lng(p); }
is_legal_if_7R: "function is_legal_if_7R(cards) {\r

  \  let keys = cards.map(x => x.key);\r

  \  let isgroup = is_group(keys);\r

  \  if (isgroup) return true;\r

  \  if (is_fixed_goal() && get_round_goal() != '7R') {\r

  \    return false;\r

  \  }\r

  \  let [fen, uplayer] = [Z.fen, Z.uplayer];\r

  \  let pl = fen.players[uplayer];\r

  \  if (!is_fixed_goal() && pl.goals['7R'] == true) return false;\r

  \  if (pl.journeys.find(x => is_sequence(x))) return false;\r

  \  return true;\r

  }"
is_map: function is_map(o) { return isdef(o.map) || isdef(o._panes); }
is_multi_stage: function is_multi_stage() { return isdef(Z.fen.trigger); }
is_multi_trigger: function is_multi_trigger(plname) { return lookup(Z, ['fen',
  'trigger']) == plname; }
is_online: function is_online() { return lookup(DA, ['internet']); }
is_overlapping_set: "function is_overlapping_set(cards, max_jollies_allowed = 1,
  seqlen = 7, group_same_suit_allowed = true) {\r

  \  let istart = 0;\r

  \  let inextstart = 0;\r

  \  let lmin = 3;\r

  \  let legal = true;\r

  \  if (cards.length < lmin) return false;\r

  \  while (legal && istart <= cards.length - lmin) {\r

  \    let cl = cards.slice(istart, istart + lmin);\r

  \    let set = ferro_is_set(cl, max_jollies_allowed, seqlen,
  group_same_suit_allowed);\r

  \    if (set) { istart++; inextstart = Math.min(istart + lmin, cards.length
  - 3); }\r

  \    else if (!set && inextstart == istart) return false;\r

  \    else istart++;\r

  \  }\r

  \  return cards.map(x => x.key);\r

  }"
is_playerdata_set: "function is_playerdata_set(plname) {\r

  \  return isdef(Z.playerdata) && !isEmpty(Z.playerdata) &&
  !isEmpty(Z.playerdata.find(x => x.name == plname).state);\r

  }"
is_playing: "function is_playing(pl, fen) {\r

  \  return isList(fen.plorder) && fen.plorder.includes(pl) ||
  isList(fen.roundorder) && fen.roundorder.includes(pl) || Z.game == 'feedback'
  && isdef(Z.fen.players[pl]);\r

  }"
is_polling_on: function is_polling_on() { return IS_POLLING_ALLOWED; }
is_race_game: function is_race_game(gname) { return DB.games[gname].game_type == 'race'; }
is_really_online: function is_really_online() { return navigator.onLine; }
is_round_over: function is_round_over(otree) { return otree.round.length >=
  otree.plorder.length; }
is_sequence: function is_sequence(j) { return !is_group(j); }
is_Set: "function is_Set(x) {\r

  \  return '_set' in x;\r

  }"
is_setup_commissions_complete: "function is_setup_commissions_complete() {\r

  \  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];\r

  \  let next = get_next_player(Z, uplayer);\r

  \  return next == plorder[0] && fen.comm_setup_num == 1;\r

  }"
is_shield_mode: "function is_shield_mode() {\r

  \  return Z.role == 'spectator'\r

  \    || Z.mode == 'multi' && Z.role == 'inactive' && Z.host != Z.uname\r

  \    || Z.mode == 'multi' && Z.role == 'inactive' && Z.pl.playmode !=
  'bot'\r

  }"
is_solved: "function is_solved(board) {\r

  \  let expected = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r

  \  let valid = true\r

  \  for (r = 0; r < 9 && valid == true; r++) {\r

  \    if (!compare(expected, get_row(board, r))) {\r

  \      valid = false\r

  \    }\r

  \  }\r

  \  for (c = 0; c < 9 && valid == true; c++) {\r

  \    if (!compare(expected, get_column(board, c))) {\r

  \      valid = false\r

  \    }\r

  \  }\r

  \  for (q = 1; q < 9 && valid == true; q++) {\r

  \    if (!compare(expected, get_square(board, q))) {\r

  \      valid = false\r

  \    }\r

  \  }\r

  \  return valid\r

  }"
is_stall_selection_complete: function is_stall_selection_complete() { return
  Z.fen.stallSelected.length == Z.fen.plorder.length; }
is_stringified: "function is_stringified(obj) {\r

  \  if (isString(obj)) {\r

  \    return '\"\\'{[('.includes(obj[0]);\r

  \  }\r

  \  return false;\r

  }"
is_Tuple: "function is_Tuple(x) {\r

  \  return isDict(x) && ('_tuple' in x);\r

  }"
is_turn_counter_clockwise: "function is_turn_counter_clockwise(a1, a2) {\r

  \  let diff = Math.abs(a2 - a1);\r

  \  let q1 = get_quadrant(a1);\r

  \  let q2 = get_quadrant(a2);\r

  \  let cclock = false;\r

  \  if (q1 == q2) { cclock = a2 < a1; }\r

  \  else {\r

  \    if (a2 > a1 && diff > 180) cclock = true;\r

  \    if (a2 < a1 && diff < 180) cclock = true;\r

  \  }\r

  \  return cclock;\r

  }"
is_user_spectating: function is_user_spectating(g) { return isdef(U) &&
  !g.plorder.includes(U.name); }
is_visible: function is_visible(id) { return !mBy(id).classList.includes('d-block'); }
isAcceptableAnswerButNewSound: "function isAcceptableAnswerButNewSound(info,
  reqAnswer, s) {\r

  \  let sParts = s.split(' ');\r

  \  let aParts = reqAnswer.split(' ');\r

  \  if (isTimeString(s)) s = convertTimesAndNumbersToWords(s);\r

  \  if (isTimeString(reqAnswer)) reqAnswer =
  convertTimesAndNumbersToWords(reqAnswer);\r

  \  if (sParts.length != aParts.length) return false;\r

  \  for (let i = 0; i < sParts.length; i++) {\r

  \    if (!soundsSimilar(sParts[i], aParts[i])) return false;\r

  \  }\r

  \  return true;\r

  }"
isActionElement: "function isActionElement(x) {\r

  \  return typeof x == 'object' && 'type' in x;\r

  }"
isAlphaNum: function isAlphaNum(s) { query = /^[a-zA-Z0-9]+$/; return query.test(s); }
isAlphaNumeric: "function isAlphaNumeric(str) {\r

  \  var code, i, len;\r

  \  for (i = 0, len = str.length; i < len; i++) {\r

  \    code = str.charCodeAt(i);\r

  \    if (!(code > 47 && code < 58) &&\r

  \      !(code > 64 && code < 91) &&\r

  \      !(code > 96 && code < 123) && str[i] != '_') {\r

  \      return false;\r

  \    }\r

  \  }\r

  \  return true;\r

  };"
isANS: "function isANS(unitType) {\r

  \  return ['AirForce', 'Submarine', 'Carrier',
  'Fleet'].includes(unitType);\r

  }"
isBoard: "function isBoard(uid, R) {\r

  \  if (!uid) return false;\r

  \  let n = R.uiNodes[uid];\r

  \  return isdef(n) && isdef(n.bi) && isdef(n.bi.boardDiv);\r

  }"
isBoardElement: function isBoardElement(oid) { let mobj = getVisual(oid); return
  mobj && mobj.idParent[2] == 's'; }
isBoardElementObject: function isBoardElementObject(o) { return o.edges || o.corners; }
isBoardMember: "function isBoardMember(uid, R) {\r

  \  let n = R.uiNodes[uid];\r

  \  return isdef(n) ? isBoard(n.uidParent, R) : false;\r

  }"
isBoardObject: function isBoardObject(o) { return o.map && o.fields; }
isCapitalLetter: function isCapitalLetter(s) { return /^[A-Z]$/i.test(s); }
isCapitalLetterOrDigit: function isCapitalLetterOrDigit(s) { return /^[A-Z0-9ÖÄÜ]$/i.test(s); }
isCardSet: "function isCardSet(o) {\r

  \  if (nundef(o)) return false;\r

  \  if (nundef(o._set)) return false;\r

  \  let arr = o._set;\r

  \  if (!isList(arr)) return false;\r

  \  for (const el of arr) {\r

  \    if (nundef(el)) return false;\r

  \    if (nundef(el._obj)) return false;\r

  \    let card = G.table[el._obj];\r

  \    if (nundef(card) || card.generic_type != 'card') return false;\r

  \  }\r

  \  return true;\r

  }"
isCardType: "function isCardType(o) {\r

  \  return 'obj_type' in o && endsWith(o.obj_type, 'card');\r

  }"
isCloseTo: function isCloseTo(n, m, acc = 10) { return Math.abs(n - m) <= acc + 1; }
isColorName: function isColorName(s) { ensureColorNames(); return
  (isdef(ColorNames[s.toLowerCase()])); }
isComplexColor: function isComplexColor(x) { return isString(x) && x.includes('('); }
isContainerType: function isContainerType(t) { return t == 'panel' || t ==
  'list' || t == 'hand'; }
isCornerRoom: "function isCornerRoom(house, room) {\r

  \  let rr = room.rect;\r

  \  let rh = house.rect;\r

  \  let w = house.wallWidth;\r

  \  let isHorSide = isCloseTo(rr.x, rh.x, w) || isCloseTo(rr.r, rh.r, w);\r

  \  let isVertSide = isCloseTo(rr.y, rh.y, w) || isCloseTo(rr.b, rh.b, w);\r

  \  return isHorSide && isVertSide;\r

  }"
isDeckObject: "function isDeckObject(o) {\r

  \  if (nundef(o)) console.log(getFunctionsNameThatCalledThisFunction(),
  'undefined object checked for is deck!!!')\r

  \  return isdef(o.deck_count);\r

  }"
isdef: function isdef(x) { return x !== null && x !== undefined; }
isDetection: function isDetection() { return (S.settings.boardDetection ||
  S.settings.deckDetection) && !S.settings.userStructures }
isDict: function isDict(d) { let res = (d !== null) && (typeof (d) == 'object')
  && !isList(d); return res; }
isDictOrList: function isDictOrList(d) { return typeof (d) == 'object'; }
isDigit: function isDigit(s) { return /^[0-9]$/i.test(s); }
isDOM: "function isDOM(x) { let c = lookup(x, ['constructor', 'name']); return c
  ? startsWith(c, 'HTML') || startsWith(c, 'SVG') : false; }"
isDynamic: function isDynamic(x) { let t = lookup(x, ['meta', 'type']); return t
  == 'dynamic'; }
isEastRoom: function isEastRoom(house, room) { return isCloseTo(room.rect.r,
  house.rect.r, house.wallWidth); }
isEmosetMember: function isEmosetMember(name, info) { return emoSets[name].f(info); }
isEmpty: "function isEmpty(arr) {\r

  \  return arr === undefined || !arr\r

  \    || (isString(arr) && (arr == 'undefined' || arr == ''))\r

  \    || (Array.isArray(arr) && arr.length == 0)\r

  \    || Object.entries(arr).length === 0;\r

  }"
isEmptyDict: function isEmptyDict(x) { return isDict(x) && isEmpty(Object.keys(x)); }
isEmptyOrWhiteSpace: function isEmptyOrWhiteSpace(s) { return isEmpty(s.trim()); }
isEnglish: function isEnglish(lang) { return startsWith(lang.toLowerCase(), 'e'); }
isEnglishKeyboardGermanEquivalent: "function
  isEnglishKeyboardGermanEquivalent(wreq, w) {\r

  \  wreq = fromUmlaut(wreq)\r

  \  w = fromUmlaut(w);\r

  \  return allLettersContained(wreq, w);\r

  }"
isError: "function isError(d) {\r

  \  let kathastrophicError = !(typeof d == 'object');\r

  \  let someErrorOccurred = 'error' in d;\r

  \  if (kathastrophicError) {\r

  \    error('KATHASTROPHIC ERROR!!!!!', d)\r

  \    alert('KATHASTROPHIC ERROR!!!!! data type ' + (typeof d));\r

  \    return true;\r

  \  } else if (someErrorOccurred) {\r

  \    switch (d.type) {\r

  \      case 'parse': return false;\r

  \      case 'ajax': return true;\r

  \      default: return true;\r

  \    }\r

  \  }\r

  \  return false;\r

  }"
isEvent: function isEvent(param) { return getTypeOf(param) == 'event'; }
isFaceUp: function isFaceUp(oCard) { return oCard.obj_type; }
isFarbPerle: function isFarbPerle(perle) { return isGermanColorName(perle.key); }
isField: function isField(o) { return o.neighbors; }
isFractionType: function isFractionType(x) { return isDict(x) && isdef(x.n) && isdef(x.d); }
isFrontAIPlayer: "function isFrontAIPlayer(id) {\r

  \  if (USE_BACKEND_AI) return false;\r

  \  let players = S.gameConfig.players;\r

  \  let pl = firstCond(players, x => x.id == id);\r

  \  let playerType = pl.playerType;\r

  \  return playerType == 'AI';\r

  }"
isGameWithSpeechRecognition: function isGameWithSpeechRecognition() { return
  ['gSayPic', 'gSayPicAuto'].includes(currentGame); }
isGermanColorName: function isGermanColorName(s) { return isColorName(s) ||
  isdef(GermanToEnglish[s]) && isColorName(GermanToEnglish[s]); }
isGermanString: function isGermanString(x) { return currentLanguage == 'D' &&
  !isNumber(x) && !isTimeString(x); }
isGridType: function isGridType(t) { return t == 'grid'; }
iSidebar: "function iSidebar(d1, d2, dToggle = null, w = 100, startOpen = true,
  id) {\r

  \  mStyle(d1, { h: '100%', w: startOpen == true ? w : 0, position:
  'absolute', z: 1, top: 0, left: 0, 'overflow': 'hidden' });\r

  \  mStyle(d2, { h: '100%', maleft: startOpen == true ? w : '0px', box: true
  }, null, null);\r

  \  d1.isOpen = startOpen;\r

  \  d1.wNeeded = w;\r

  \  let tell = () => console.log('sidebar is', d1.isOpen ? 'OPEN' :
  'CLOSED');\r

  \  let fToggle = (ev, animate = true) => {\r

  \    d1.isOpen = !d1.isOpen;\r

  \    let val = d1.isOpen ? d1.wNeeded : 0;\r

  \    if (animate) multiStyleAnimation([[d1, { w: val }], [d2, { maleft: val
  }]], 500, tell);\r

  \    else { mStyle(d1, { w: val }); mStyle(d2, { maleft: val }); tell(); }\r

  \  }\r

  \  let fOpen = (ev, animate = true) => {\r

  \    if (d1.isOpen) return;\r

  \    fToggle(ev, animate);\r

  \  }\r

  \  let fClose = (ev, animate = true) => {\r

  \    if (!d1.isOpen) return;\r

  \    fToggle(ev, animate);\r

  \  }\r

  \  let fAddContent = (cont, styles) => {\r

  \    mAddContent(d1, cont, styles, { keepInLine: true, replace: false });\r

  \    let sz = getSizeNeeded(d1);\r

  \    d1.wNeeded = sz.w;\r

  \    if (d1.isOpen) { mStyle(d1, { w: d1.wNeeded }); mStyle(d2, { maleft:
  d1.wNeeded }); }\r

  \  };\r

  \  let fReplaceContent = (cont, styles) => { clearElement(d1);
  fAddContent(cont, styles); };\r

  \  id = isdef(id) ? id : !isEmpty(d1.id) ? d1.id : getUID('sb');\r

  \  let item = mItem(id, { div: d1 }, { type: 'sidebar', w: w, toggle:
  fToggle, open: fOpen, close: fClose, addContent: fAddContent, replaceContent:
  fReplaceContent }, true);\r

  \  if (!isEmpty(d2.id)) item.idContent = d2.id;\r

  \  if (isdef(dToggle)) { iAdd(item, { dToggle: dToggle }); dToggle.onclick =
  fToggle; }\r

  \  return item;\r

  }"
iSidebar01: "function iSidebar01(d, d1, d2, dToggle = null, w = 100) {\r

  \  mStyleX(d1, { h: '100%', w: 100, position: 'absolute', z: 1, top: 0,
  left: 0, overflow: 'hidden', transition: '0.5s' });\r

  \  mStyleX(d2, { maleft: 100, h: '100%', box: true, transition: '0.5s' },
  null, null)\r

  \  let fToggle = () => {\r

  \    mToggle(d1, 'width', 0, w); mToggle(d2, 'margin-left', 0, w);\r

  \  }\r

  \  let item = mItem({ div: d1, dParent: d, dSibling: d2 });\r

  \  item.fToggle = fToggle;\r

  \  item.w = w;\r

  \  if (isdef(dToggle)) { item.dToggle = dToggle; dToggle.onclick = fToggle;
  }\r

  \  return item;\r

  }"
iSidebar04: "function iSidebar04(d, d1, d2, dToggle = null, w = 100, startOpen =
  true) {\r

  \  mStyleX(d1, { h: '100%', w: startOpen ? w : 0, position: 'absolute', z:
  1, top: 0, left: 0, overflow: 'hidden', transition: '0.5s' });\r

  \  mStyleX(d2, { h: '100%', maleft: startOpen ? w : 0, box: true,
  transition: '0.5s' }, null, null);\r

  \  d1.isOpen = startOpen;\r

  \  let fToggle = () => {\r

  \    d1.isOpen = !d1.isOpen;\r

  \    let wOpen = valf(d1.wNeeded, w)\r

  \    mToggle(d1, 'width', 0, wOpen);\r

  \    mToggle(d2, 'margin-left', 0, wOpen);\r

  \  }\r

  \  let fOpen = () => {\r

  \    if (d1.isOpen) return;\r

  \    fToggle();\r

  \  }\r

  \  let fClose = () => {\r

  \    if (!d1.isOpen) return;\r

  \    fToggle();\r

  \  }\r

  \  let fReplaceContent = cont => {\r

  \    d1.style.width = 'auto';\r

  \    d1.innerHTML = cont;\r

  \    let wNeeded = d1.wNeeded = getRect(d1).w;\r

  \    d1.wCurrent = d1.style.width = makeUnitString(wNeeded);\r

  \    console.log('now wNeeded is', d1.wNeeded);\r

  \    if (!d1.isOpen) d1.style.width = 0;\r

  \  };\r

  \  let fAddContent = cont => {\r

  \    d1.style.width = 'auto';\r

  \    mAppend(d1, isString(cont) ? mText(cont, d1) : cont);\r

  \    let wNeeded = d1.wNeeded = getRect(d1).w;\r

  \    d1.wCurrent = d1.style.width = makeUnitString(wNeeded);\r

  \    console.log('now wNeeded is', d1.wNeeded);\r

  \    if (!d1.isOpen) d1.style.width = 0;\r

  \  };\r

  \  let item = mItem({ div: d1, dParent: d, dSibling: d2 });\r

  \  d1.item = item; d1.id = item.id;\r

  \  item.toggle = fToggle;\r

  \  item.open = fOpen;\r

  \  item.close = fClose;\r

  \  item.addContent = fAddContent;\r

  \  item.replaceContent = fReplaceContent;\r

  \  item.w = w;\r

  \  if (isdef(dToggle)) { item.dToggle = dToggle; dToggle.onclick = fToggle;
  }\r

  \  return item;\r

  }"
isItem: function isItem(i) { return isdef(i.div); }
iSize: function iSize(i, w, h) { i.w = w; i.h = h; mSize(i.div, w, h); }
isJoinMenuOpen: "function isJoinMenuOpen() {\r

  \  return isVisible(document.getElementById('bLobbyJoinOk'));\r

  }"
isLabelVisible: function isLabelVisible(id) { return isVisible(mBy(id).children[1]); }
isLastTestOfSeries: "function isLastTestOfSeries() {\r

  \  let tests = ALLTESTS[iTESTSERIES];\r

  \  let numtests = Object.keys(tests).length;\r

  \  return iTEST >= numtests;\r

  }"
isLeafType: function isLeafType(t) { return t == 'info' || t == 'title' || t ==
  'card' || t == 'picto'; }
isLetter: function isLetter(s) { return /^[a-zA-Z]$/i.test(s); }
isLetterElement: function isLetterElement(elem) { return
  isCapitalLetterOrDigit(elem.innerHTML); }
isList: function isList(arr) { return Array.isArray(arr); }
isListOf: function isListOf(arr, predfunc) { return Array.isArray(arr) &&
  !firstCond(arr, x => !predfunc(x)); }
isListOf_Obj: "function isListOf_Obj(x) {\r

  \  return isList(x) && !empty(x) &&
  atleastOneElementOfXIsDictWithKey_obj(x);\r

  }"
isListOfActionElements: "function isListOfActionElements(lst) {\r

  \  if (!isList(lst)) return false;\r

  \  for (const el of lst) {\r

  \    if (isList(el)) return false;\r

  \  }\r

  \  return true;\r

  }"
isListOfActions: "function isListOfActions(l) {\r

  \  return isList(l) && !empty(l) && isActionElement(l[0]);\r

  }"
isListOfListOfActions: "function isListOfListOfActions(x) {\r

  \  return isList(x) && x.length > 0 && isList(x[0]) && x[0].length > 0 &&
  isActionElement(x[0][0]);\r

  }"
isListOfLists: "function isListOfLists(lst) {\r

  \  return isList(lst) && !isEmpty(lst) && isList(lst[0]);\r

  }"
isListOfLiterals: "function isListOfLiterals(lst) {\r

  \  if (!isList(lst)) return false;\r

  \  for (const el of lst) {\r

  \    if (!isLiteral(el)) return false;\r

  \  }\r

  \  return true;\r

  }"
isListOfServerObjects: "function isListOfServerObjects(x) {\r

  \  let oids = getElements(x);\r

  \  console.log('getElements returns', oids);\r

  \  return false;\r

  }"
isLiteral: function isLiteral(x) { return isString(x) || isNumber(x); }
isll: "function isll(ll) {\r

  \  if (!isList(ll)) {\r

  \    testHelpers('NOT a list', ll);\r

  \    return false;\r

  \  }\r

  \  for (const l of ll) {\r

  \    if (!isList(l)) {\r

  \      testHelpers('element', l, 'NOT a list!');\r

  \      return false;\r

  \    }\r

  \    for (const el of l) {\r

  \      if (!isString(el) && !isNumeric(el)) return false;\r

  \    }\r

  \  }\r

  \  return true;\r

  }"
isllPlus: "function isllPlus(ll) {\r

  \  if (!isList(ll)) {\r

  \    testHelpers('NOT a list', ll);\r

  \    return false;\r

  \  }\r

  \  for (const l of ll) {\r

  \    if (!isList(l)) {\r

  \      testHelpers('element', l, 'NOT a list!');\r

  \      return false;\r

  \    }\r

  \  }\r

  \  return true;\r

  }"
isMap: function isMap(x) { let t = lookup(x, ['meta', 'type']); return t == 'map'; }
isMergeableObject: "function isMergeableObject(val) {\r

  \  var nonNullObject = val && typeof val === 'object'\r

  \  return nonNullObject\r

  \    && Object.prototype.toString.call(val) !== '[object RegExp]'\r

  \    && Object.prototype.toString.call(val) !== '[object Date]'\r

  }"
isMS: "function isMS(param) {\r

  \  return getTypeOf(param) == 'MS';\r

  }"
isMyPlayer: "function isMyPlayer(id) {\r

  \  let uname = getUsernameForPlayer(id);\r

  \  return startsWith(uname, USERNAME);\r

  }"
isMyTurn: "function isMyTurn() {\r

  \  disableButton('c_b_PollStatus');\r

  }"
isNorthRoom: function isNorthRoom(house, room) { return isCloseTo(room.rect.t,
  house.rect.t, house.wallWidth); }
isNumber: function isNumber(x) { return x !== ' ' && x !== true && x !== false
  && isdef(x) && (x == 0 || !isNaN(+x)); }
isNumberOrTimeString: function isNumberOrTimeString(w) { return isNumber(w) || isTimeString(w); }
isNumeric: function isNumeric(x) { return !isNaN(+x); }
isObject: "function isObject(v) {\r

  \  return '[object Object]' === Object.prototype.toString.call(v);\r

  };"
isOppPiece: function isOppPiece(sym, plSym) { return sym && sym != plSym; }
iSortHand: "function iSortHand(dParent, h) {\r

  \  let d = h.deck;\r

  \  d.sort();\r

  \  iPresentHand(dParent, h);\r

  }"
iSortHand_test: "function iSortHand_test(dParent, h) {\r

  \  let d = h.deck;\r

  \  d.sort();\r

  \  iPresentHand_test(dParent, h);\r

  }"
isOverflown: "function isOverflown(element) {\r

  \  return element.scrollHeight > element.clientHeight || element.scrollWidth
  > element.clientWidth;\r

  }"
isPlain: function isPlain() { return !S.settings.boardDetection &&
  !S.settings.deckDetection && !S.settings.userStructures }
iSplay: "function iSplay(items, iContainer, containerStyles, splay = 'right', ov
  = 20, ovUnit = '%', createHand = true, rememberFunc = true) {\r

  \  if (!isList(items)) items = [items];\r

  \  if (isEmpty(items)) return { w: 0, h: 0 };\r

  \  let [w, h] = [items[0].w, items[0].h];\r

  \  let isHorizontal = splay == 'right' || splay == 'left';\r

  \  for (let i = 0; i < items.length; i++) {\r

  \    let item = items[i];\r

  \    item.col = isHorizontal ? i : 0;\r

  \    item.row = isHorizontal ? 0 : i;\r

  \    item.index = item.z = i;\r

  \  }\r

  \  if (nundef(containerStyles)) containerStyles = {};\r

  \  let dContainer = iDiv(iContainer);\r

  \  let dParent, iParent;\r

  \  if (createHand) {\r

  \    dParent = mDiv(dContainer);\r

  \    iParent = { div: dParent };\r

  \  } else if (isItem(iContainer)) {\r

  \    dParent = iContainer.div;\r

  \    iParent = iContainer;\r

  \  } else dParent = iContainer;\r

  \  mStyleX(dParent, containerStyles);\r

  \  let gap = isdef(containerStyles.padding) ? containerStyles.padding : 0;\r

  \  let overlap = ov;\r

  \  if (ovUnit == '%') overlap = ov == 0 ? .5 : (isHorizontal ? w : h) * ov /
  100;\r

  \  let x = y = gap;\r

  \  let sz = splayout(items.map(x => x.div), dParent, w, h, x, y, overlap,
  splay);\r

  \  dParent.style.width = '' + sz.w + 'px';\r

  \  dParent.style.height = '' + sz.h + 'px';\r

  \  if (isdef(iParent)) { iParent.w = sz.w; iParent.h = sz.h; iParent.items =
  items; }\r

  \  return isdef(iParent) ? iParent : dParent;\r

  }"
iSplay52: "function iSplay52(i, iContainer, splay = 'right', ov = 20, ovUnit =
  '%', createiHand = true, rememberFunc = true) {\r

  \  let ilist = !isList(i) ? i : [i];\r

  \  let items = isNumber(i[0]) ? i52(ilist) : ilist;\r

  \  let res = iSplay(items, iContainer, null, 'right', 20, '%', true);\r

  \  return res;\r

  }"
isPlayerChecked: "function isPlayerChecked(i) {\r

  \  id = getidNum(i); return document.getElementById(id).checked == true;\r

  }"
IsRepetition: "function IsRepetition() {\r

  \  var index = 0;\r

  \  for (index = brd_hisPly - brd_fiftyMove; index < brd_hisPly - 1; ++index)
  {\r

  \    if (brd_posKey == brd_history[index].posKey) {\r

  \      return BOOL.TRUE;\r

  \    }\r

  \  }\r

  \  return BOOL.FALSE;\r

  }"
isSeason: "function isSeason(ph) {\r

  \  return ['Spring', 'Summer', 'Fall', 'Winter'].includes(ph);\r

  }"
isSet: function isSet(x) { return (isDict(x) && (x.set || x._set)); }
isSimilar: "function isSimilar(reqAnswer, answer, lang) {\r

  \  if (answer == reqAnswer) return true;\r

  \  else if (replaceAll(answer, ' ', '') == replaceAll(reqAnswer, ' ', ''))
  return true;\r

  \  else if (differInAtMost(reqAnswer, answer, 1)) return true;\r

  \  else if (isSimilarSound(reqAnswer, answer, lang)) return true;\r

  \  else return false;\r

  }"
isSimilarSound: "function isSimilarSound(reqAnswer, s, lang) {\r

  \  let sParts = s.split(' ');\r

  \  let aParts = reqAnswer.split(' ');\r

  \  if (isNumber(s) || isTimeString(s, lang)) s =
  convertTimesAndNumbersToWords(s);\r

  \  if (isNumber(reqAnswer) || isTimeString(reqAnswer, lang)) reqAnswer =
  convertTimesAndNumbersToWords(reqAnswer);\r

  \  if (sParts.length != aParts.length) return false;\r

  \  for (let i = 0; i < sParts.length; i++) {\r

  \    if (!soundsSimilar(sParts[i], aParts[i], lang)) return false;\r

  \  }\r

  \  return true;\r

  }"
isSimple: function isSimple(x) { return isString(x) || isNumeric(x); }
isSimpleType: function isSimpleType(type) { return !['list', 'object'].includes(type); }
isSingleDigit: function isSingleDigit(s) { return /^[0-9]$/i.test(s); }
isSingleton: "function isSingleton(x) {\r

  \  return (isSet(x) &&\r

  \    ('set' in x && x.set.length == 1 || '_set' in x && x._set.length ==
  1))\r

  \    ||\r

  \    (isTuple(x) &&\r

  \      ('tuple' in x && x.tuple.length == 1 || '_tuple' in x &&
  x._tuple.length == 1));\r

  }"
isSizedNode: function isSizedNode(n) { return isdef(n.params.size) ||
  isdef(n.params.width) || isdef(n.params.height); }
isSouthRoom: function isSouthRoom(house, room) { return isCloseTo(room.rect.b,
  house.rect.b, house.wallWidth); }
isSpecType: function isSpecType(t) { return isdef(R.lastSpec[t]); }
isStatic: function isStatic(x) { let t = lookup(x, ['meta', 'type']); return t
  == 'static'; }
isString: function isString(param) { return typeof param == 'string'; }
isStructuralElement: function isStructuralElement(oid) { if (nundef(G.table) ||
  !(oid in G.table)) return false; return 'map' in G.table[oid]; }
isSvg: function isSvg(elem) { return startsWith(elem.constructor.name, 'SVG'); }
isTimeForAddon: "function isTimeForAddon() {\r

  \  if (nundef(ADS)) return false;\r

  \  if (isEmpty(U.avAddons)) return false;\r

  \  if (isdef(AD) && AD.running && AD.checkEndCondition()) {\r

  \    console.log('END!')\r

  \    AD.die();\r

  \    U.addons[AD.key].open = false;\r

  \    AD = null;\r

  \  }\r

  \  if (isdef(AD)) return AD.isTimeForAddon();\r

  \  let open = allCondDict(U.addons, x => x.open == true);\r

  \  if (isEmpty(open)) {\r

  \    console.log('open is empty! choosing a random addon!')\r

  \    let k = chooseRandom(U.avAddons);\r

  \    AD = new ADS[k].cl(k, ADS[k], {});\r

  \  } else if (open.length == 1) {\r

  \    let k = open[0];\r

  \    AD = new ADS[k].cl(k, ADS[k], U.addons[k]);\r

  \  } else {\r

  \    let k = chooseRandom(open);\r

  \    AD = new ADS[k].cl(k, ADS[k], U.addons[k]);\r

  \  }\r

  \  return AD.isTimeForAddon();\r

  }"
isTimeString: "function isTimeString(w, lang) {\r

  \  let res1 = (w.includes(':') && w.length >= 4 && w.length <= 5);\r

  \  let res2 = (lang == 'D' && stringAfterLast(w.toLowerCase(), ' ') ==
  'uhr');\r

  \  return res1 || res2;\r

  }"
isTooEarly: "function isTooEarly(optYear, curYear, optStep, curStep) {\r

  \  return Number(curYear) < optYear || curStep < optStep;\r

  }"
iStrip: function iStrip(item) { delete item.live; return item; }
isTuple: "function isTuple(x) {\r

  \  return Array.isArray(x);\r

  }"
iStyle: function iStyle(i, styles) { mStyleX(iDiv(i), styles); }
isType: "function isType(sType, val) {\r

  \  switch (sType) {\r

  \    case 'region':\r

  \      return val in regions;\r

  \    case 'power':\r

  \      return val in unitsPerPower;\r

  \    case 'unit':\r

  \      return val in units;\r

  \    case 'faction':\r

  \      return val in ['Axis', 'West', 'USSR'];\r

  \  }\r

  \  return false;\r

  }"
isVariableColor: function isVariableColor(c) { return c == 'random' || c ==
  'randPastel' || c == 'randDark' || c == 'randLight' || isList(c); }
iSvg: "function iSvg(i) { return isdef(i.live) ? i.live.svg : isdef(i.svg) ?
  i.svg : i; }"
isVisible: "function isVisible(elem) {\r

  \  if (isString(elem)) elem = document.getElementById(elem);\r

  \  let x = elem.style.flex;\r

  \  return (elem.style.display != 'none' || elem.offsetParent !== null) &&
  (nundef(elem.style.flex) || !endsWith(elem.style.flex, '0%'));\r

  }"
isVisible2: "function isVisible2(elem) {\r

  \  if (isString(elem)) elem = document.getElementById(elem);\r

  \  return (elem.style.display != 'none' || elem.offsetParent !== null);\r

  }"
isVisibleToPlayer: "function isVisibleToPlayer(o, player) {\r

  \  let vis = getVisibleSet(o);\r

  \  if (vis && vis.includes(player)) return true;\r

  }"
isWestRoom: function isWestRoom(house, room) { return isCloseTo(room.rect.l,
  house.rect.l, house.wallWidth); }
isWhiteSpace: function isWhiteSpace(ch) { return /\s/.test(ch) }
isWhiteSpace1: function isWhiteSpace1(s) { let white = new RegExp(/^\s$/);
  return white.test(s.charAt(0)); }
isWhiteSpace2: "function isWhiteSpace2(ch) {\r

  \  const alphanum =
  '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_';\r

  \  return !alphanum.includes(ch);\r

  }"
isWhiteSpaceString: function isWhiteSpaceString(s) { return isEmptyOrWhiteSpace(s); }
isWord: function isWord(w) { return lookup(Dictionary, [G.language, w]); }
isWrongPhase: "function isWrongPhase(optPhase, curPhase) {\r

  \  return optPhase != 'any' && !startsWithCaseIn(curPhase, optPhase);\r

  }"
isWrongPlayer: "function isWrongPlayer(optPlayer, curPlayer) {\r

  \  return optPlayer != 'any' && !startsWithCaseIn(curPlayer, optPlayer);\r

  }"
isYesNo: function isYesNo(choices) { return !firstCond(choices, x => !(['yes',
  'no'].includes(x.text))); }
iSym: "function iSym(kItem, dParent, styles, classes) {\r

  \  let item;\r

  \  if (isString(kItem)) { item = { id: getUID(), key: kItem, info:
  Syms[kItem] }; }\r

  \  else if (nundef(kItem.info)) { item = { id: getUID(), key: kItem.key,
  info: kItem }; }\r

  \  else item = kItem;\r

  \  let info = item.info;\r

  \  let dOuter = mDiv(dParent);\r

  \  mCenterCenterFlex(dOuter);\r

  \  let d = mDiv(dOuter);\r

  \  d.innerHTML = info.text;\r

  \  if (nundef(styles)) styles = {};\r

  \  let picStyles = { family: info.family, fz: valf(styles.fz, valf(styles.h
  / 2, 25)), display: 'inline-block' };\r

  \  mStyle(dOuter, styles);\r

  \  mStyle(d, picStyles);\r

  \  if (isdef(classes)) mClass(dOuter, classes);\r

  \  iAdd(item, { div: dOuter, dPic: d });\r

  \  return item;\r

  }"
iTableBounds: function iTableBounds(i) { return iBounds(i, dTable); }
iTag: "function iTag(tags = ['canvas', 'textarea', 'a'], ignore_empty = true)
  {\r

  \  for (const t of tags) {\r

  \    let uis = Array.from(document.getElementsByTagName(t));\r

  \    if (ignore_empty) uis = uis.filter(d => !isEmpty(d.innerHTML));\r

  \    for (const ui of uis) {\r

  \      if (isEmptyOrWhiteSpace(ui.id)) ui.id = getUID();\r

  \      iAdd({}, { div: ui });\r

  \    }\r

  \  }\r

  \  setTimeout(show_tagged, 100);\r

  }"
iTest00: "async function iTest00() {\r

  \  await iPrepper();\r

  \  let keys = SymKeys;\r

  \  let k = chooseRandom(keys);\r

  \  let item = miPic(k, dTable, { w: 100, h: 100, fz: 80, bg: 'blue' });\r

  }"
iTitle: function iTitle(item, msg) { let dm = diTitle(item); if (isdef(dm))
  dm.innerHTML = msg; }
iToggleMultipleSelection: "function iToggleMultipleSelection(item, items) {\r

  \  let ui = iDiv(item);\r

  \  item.isSelected = !item.isSelected;\r

  \  if (item.isSelected) mClass(ui, 'framedPicture'); else mRemoveClass(ui,
  'framedPicture');\r

  \  if (isdef(items)) {\r

  \    for (const i1 of items) {\r

  \      if (i1.isSelected) {\r

  \        console.assert(!items.includes(i1), 'UNSELECTED PIC IN
  PICLIST!!!!!!!!!!!!')\r

  \        items.push(i1);\r

  \      } else {\r

  \        console.assert(items.includes(i1), 'PIC NOT IN PICLIST BUT HAS BEEN
  SELECTED!!!!!!!!!!!!')\r

  \        removeInPlace(items, i1);\r

  \      }\r

  \    }\r

  \  }\r

  }"
iToggleSingleSelection: "function iToggleSingleSelection(item, items) {\r

  \  let ui = iDiv(item);\r

  \  let selItem = null;\r

  \  item.isSelected = !item.isSelected;\r

  \  if (item.isSelected) { mClass(ui, 'framedPicture'); selItem = item; }\r

  \  else { mRemoveClass(ui, 'framedPicture'); selItem = null; }\r

  \  if (isdef(items) && selItem) {\r

  \    for (const i1 of items) {\r

  \      if (i1.isSelected && i1 != item) {\r

  \        i1.isSelected = false;\r

  \        mRemoveClass(iDiv(i1), 'framedPicture');\r

  \        break;\r

  \      }\r

  \    }\r

  \  }\r

  \  return selItem;\r

  }"
iToRowCol: function iToRowCol(idx, rows, cols) { let c = idx % cols; let r =
  (idx - c) / rows; return [r, c]; }
iToSuit52_G: "function iToSuit52_G(suit) {\r

  \  return suit === 0 ? 'spades' : suit === 1 ? 'hearts' : suit === 2 ?
  'clubs' : suit === 3 ? 'diamonds' : 'joker';\r

  }"
iToValue: "function iToValue(l) { if (isdef(l)) l = l % 13; return isdef(l) ? l
  == 0 ? 13 : l : null; }"
iTrim: "function iTrim(item, serialize = true) {\r

  \  let todelete = [];\r

  \  for (const k in item) {\r

  \    let val = item[k];\r

  \    if (isDOM(val)) {\r

  \      if (!serialize) { if (isEmptyOrWhiteSpace(val.id)) val.id = getUID();
  lookupSetOverride(item, ['live', val.id], val); }\r

  \      todelete.push(k);\r

  \    } else if (typeof val == 'function') {\r

  \      console.log('funcname', val.name);\r

  \      if (serialize) item[k] = val.name;\r

  \      else { lookupSetOverride(item, ['funcs', val.name], val);
  todelete.push(k); }\r

  \    }\r

  \  }\r

  \  if (serialize) { delete item.live; delete item.funcs };\r

  \  for (const k of todelete) delete item[k];\r

  \  return item;\r

  }"
iUnhigh: "function iUnhigh(item) { let d = iDiv(item); mStyle(d, { bg:
  'transparent' }); }"
iZMax: function iZMax(n) { if (isdef(n)) ZMax = n; ZMax += 1; return ZMax; }
join_table: "function join_table(user, tid) { to_server({ uname: user, tid: tid
  }, 'join_table'); }"
joinMultiplayerGame: "function joinMultiplayerGame() {\r\n}"
jolly_matches: "function jolly_matches(key, j, rankstr = 'A23456789TJQKA') {\r

  \  let jolly_idx = find_index_of_jolly(j);\r

  \  if (jolly_idx == -1) return false;\r

  \  if (is_group(j)) {\r

  \    let r = get_group_rank(j);\r

  \    if (key[0] == r) return true;\r

  \  } else if (jolly_idx > 0) {\r

  \    let rank_before_index = j[jolly_idx - 1][0];\r

  \    let suit_needed = j[jolly_idx - 1][1];\r

  \    let rank_needed = rankstr[rankstr.indexOf(rank_before_index) + 1];\r

  \    if (key[0] == rank_needed && key[1] == suit_needed) return true;\r

  \  } else {\r

  \    let rank_after_index = j[jolly_idx + 1][0];\r

  \    let suit_needed = j[jolly_idx + 1][1];\r

  \    let rank_needed = rank_after_index == 'A' ? 'K' :
  rankstr[rankstr.indexOf(rank_after_index) - 1];\r

  \    if (key[0] == rank_needed && key[1] == suit_needed) return true;\r

  \  }\r

  \  return false;\r

  }"
Joy: "function Joy() {\r

  \  this.SENSITIVITY = 50;\r

  \  this.diffX = 0;\r

  \  this.diffY = 0;\r

  \  var touches = [];\r

  \  var startX;\r

  \  var startY;\r

  \  this.onTouchStart = function (event) {\r

  \    result = \"touch: \";\r

  \    touches = event.touches;\r

  \    startX = touches[0].screenX;\r

  \    startY = touches[0].screenY;\r

  \    result += \"x: \" + startX + \", y: \" + startY;\r

  \    console.log(result);\r

  \  }\r

  \  this.onTouchMove = function (event) {\r

  \    result = \"move: \"\r

  \    event.preventDefault();\r

  \    touches = event.touches;\r

  \    this.diffX = touches[0].screenX - startX;\r

  \    this.diffY = touches[0].screenY - startY;\r

  \    result += \"dx: \" + this.diffX + \", dy: \" + this.diffY;\r

  \    console.log(result);\r

  \  }\r

  \  this.onTouchEnd = function (event) {\r

  \    result = \"no touch\";\r

  \    touches = event.touches;\r

  \    this.diffX = 0;\r

  \    this.diffY = 0;\r

  \  }\r

  \  touchable = 'createTouch' in document;\r

  \  if (touchable) {\r

  \    document.addEventListener('touchstart', this.onTouchStart, false);\r

  \    document.addEventListener('touchmove', this.onTouchMove, false);\r

  \    document.addEventListener('touchend', this.onTouchEnd, false);\r

  \  }\r

  \  this.getDX = function () {\r

  \    return \"At least I work...\";\r

  \    return this.diffX;\r

  \  }\r

  \  this.getDY = function () {\r

  \    return this.diffY;\r

  \  }\r

  }"
jsClean: "function jsClean(o) {\r

  \  if (nundef(o)) return o;\r

  \  else if (isDOM(o)) return null;\r

  \  else if (isLiteral(o)) return o;\r

  \  else if (isList(o)) {\r

  \    let onew = o.map(x => jsClean(x));\r

  \    return onew.filter(x => x !== null);\r

  \  } else if (isDict(o)) {\r

  \    for (const k in o) o[k] = jsClean(o[k]);\r

  \    let onew = {};\r

  \    for (const k in o) if (o[k] !== null) onew[k] = o[k];\r

  \    return onew;\r

  \  }\r

  }"
jsCopy: function jsCopy(o) { return JSON.parse(JSON.stringify(o)); }
jsCopyMinus: "function jsCopyMinus(o) {\r

  \  let lstOmit = [...arguments].slice(1);\r

  \  let oNew = {};\r

  \  for (const k in o) {\r

  \    if (lstOmit.includes(k)) continue;\r

  \    oNew[k] = o[k];\r

  \  }\r

  \  return oNew;\r

  }"
jsCopySafe: function jsCopySafe(o) { return JSON.parse(JSON.stringify(jsClean(o))); }
jsonToYaml: function jsonToYaml(o) { let y = jsyaml.dump(o); return y; }
jsSafeStringify: "function jsSafeStringify(obj, indent = 2) {\r

  \  let cache = [];\r

  \  const retVal = JSON.stringify(\r

  \    obj,\r

  \    (key, value) =>\r

  \      typeof value === \"object\" && value !== null\r

  \        ? cache.includes(value)\r

  \          ? undefined\r

  \          : cache.push(value) && value\r

  \        : value,\r

  \    indent\r

  \  );\r

  \  cache = null;\r

  \  return retVal;\r

  };"
just_map: "function just_map() {\r

  \  var map = L.map('map');\r

  \  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r

  \    attribution: '© OpenStreetMap contributors'\r

  \  }).addTo(map);\r

  \  return map;\r

  }"
just_message: "function just_message(msg, styles = {}) {\r

  \  alert(msg);\r

  }"
just_points: "function just_points(map) {\r

  \  console.log('geo', Geo)\r

  \  let [p1, p2] = [Geo.places.tuerkenschanzpark, Geo.places.vegagasse];\r

  \  return [p1, p2];\r

  }"
justClick: function justClick(ev) { console.log('click', ev.target, 'item',
  evToItemC(ev)); }
justIds: "function justIds(o) {\r

  \  return Object.keys(o);\r

  }"
keepOnlyElements: "function keepOnlyElements(func, lst) {\r

  \  return lst.filter(func);\r

  }"
keyDownHandler: "function keyDownHandler(ev) {\r

  \  checkArrowKeys(ev);\r

  }"
keyhandler: "function keyhandler(ev) {\r

  \  if (ev.key == 'Enter') { }\r

  \  else if (ev.key == 'Escape') { close_popup(); }\r

  }"
keyUpHandler: "function keyUpHandler(ev) {\r

  \  checkControlKey(ev);\r

  }"
kriegTest00: "function kriegTest00(game) {\r

  \  game.load({ pl1: { hand: ['TH', 'KH'] }, pl2: { hand: ['9C', 'QC'] } });
  game.deck.sort(); game.print_state();\r

  \  for (let i = 0; i < 2; i++) { game.make_random_move();
  game.make_random_move(); game.print_state(); if (game.is_out_of_cards()) {
  console.log('game over!'); break; } }\r

  }"
kriegTest00UI: "function kriegTest00UI() {\r

  \  setBackgroundColor(null, 'random');\r

  \  clearElement(dTable)\r

  \  let back = new GKriegBack();\r

  \  back.load({ pl1: { name: 'felix', hand: ['TH', 'KH'] }, pl2: { name:
  'tom', hand: ['9C', 'QC'] } }); back.deck.sort(); back.print_state();\r

  \  let front = new GKriegFront(130, dTable);\r

  \  front.presentState(back.get_state(), dTable);\r

  \  mLinebreak(dTable, 50);\r

  \  mButton('Move!', () => kriegTest00UI_engine(back, front), dTable, { fz:
  28, matop: 10, rounding: 10, padding: 16, border: 8 }, ['buttonClass']);\r

  }"
kriegTest00UI_engine: "function kriegTest00UI_engine(back, front) {\r

  \  if (back.is_out_of_cards()) { console.log('!!!!!!!!!!!!!!!!');
  front.presentGameover(back.winner(), kriegTest00UI); return; }\r

  \  clearTable(dTable);\r

  \  back.make_random_moveX();\r

  \  back.make_random_moveX();\r

  \  back.print_state();\r

  \  front.presentState(back.get_state(), dTable);\r

  \  if (back.is_out_of_cards()) { console.log('game over!');
  front.presentGameover(back.winner(), kriegTest00UI); return; }\r

  \  mLinebreak(dTable, 50);\r

  \  mButton('Move!', () => kriegTest00UI_engine(back, front), dTable, { fz:
  28, matop: 10, rounding: 10, padding: 16, border: 8 }, ['buttonClass']);\r

  }"
kriegTest01: "function kriegTest01(game) {\r

  \  game.load({ pl1: { hand: ['TH', 'QH'] }, pl2: { hand: ['9C', 'KC'] } });
  game.deck.sort();\r

  \  game.print_state();\r

  \  for (let i = 0; i < 8; i++) {\r

  \    game.make_random_moveX();\r

  \    game.print_state();\r

  \    if (game.is_out_of_cards()) { console.log('game over!'); break; }\r

  \  }\r

  }"
kriegTest02: "function kriegTest02(game) {\r

  \  game.load({ pl1: { hand: ['TH'], trick: [['2H']] }, pl2: { hand: ['9C',
  'KC'] } }); game.deck.sort();\r

  \  game.print_state('start:');\r

  \  for (let i = 0; i < 12; i++) {\r

  \    game.make_random_move();\r

  \    game.print_state('move:');\r

  \    game.resolve();\r

  \    game.swap_turn();\r

  \    if (i % 2 == 0) game.print_state('after resolve:');\r

  \    if (game.is_out_of_cards()) { console.log('game over!'); break; }\r

  \  }\r

  }"
kriegTest03: "function kriegTest03(game) {\r

  \  game.load({ pl1: { hand: ['TH'], trick: [['2H']] }, pl2: { hand: ['9C'],
  trick: [['KC']] } }); game.deck.sort();\r

  \  game.print_state('start:');\r

  \  for (let i = 0; i < 10; i++) {\r

  \    game.make_random_move();\r

  \    game.print_state('move:');\r

  \    game.resolve();\r

  \    game.swap_turn();\r

  \    if (i % 2 == 1) game.print_state('after resolve:');\r

  \    if (game.is_out_of_cards()) { console.log('game over!'); break; }\r

  \  }\r

  }"
kriegTest04: "function kriegTest04(game) {\r

  \  game.load({ pl1: { name: 'felix', hand: ['TH'], trick: [['2H']] }, pl2: {
  name: 'max', hand: ['9C'], trick: [['2C']] } }); game.deck.sort();\r

  \  game.print_state('start:');\r

  \  for (let i = 0; i < 2; i++) {\r

  \    game.make_random_move();\r

  \    game.print_state('move:');\r

  \    console.log('turn', game.iturn)\r

  \    if (game.iturn == 1) {\r

  \      game.resolve();\r

  \      game.swap_turn();\r

  \      game.print_state('after resolve:');\r

  \    } else game.swap_turn();\r

  \    if (game.is_out_of_cards()) { console.log('game over! winner',
  game.winner().name); break; }\r

  \  }\r

  }"
kriegTest05: "function kriegTest05(game) {\r

  \  game.load();\r

  \  game.print_state('start:');\r

  \  for (let i = 0; i < 25; i++) {\r

  \    game.make_random_move();\r

  \    game.print_state('move:');\r

  \    console.log('turn', game.iturn)\r

  \    if (game.iturn == 1) {\r

  \      game.resolve();\r

  \      game.swap_turn();\r

  \      game.print_state('after resolve:');\r

  \    } else game.swap_turn();\r

  \    if (game.is_out_of_cards()) { console.log('game over! winner',
  game.winner().index); break; }\r

  \  }\r

  }"
kriegTest06: "function kriegTest06(game) {\r

  \  game.load();\r

  \  game.print_state('start:');\r

  \  let front = new GKriegFront(130, dTable);\r

  \  front.presentState(game.get_state(), dTable);\r

  \  return;\r

  \  for (let i = 0; i < 25; i++) {\r

  \    game.make_random_move();\r

  \    game.print_state('move:');\r

  \    console.log('turn', game.iturn)\r

  \    if (game.iturn == 1) {\r

  \      game.resolve();\r

  \      game.swap_turn();\r

  \      game.print_state('after resolve:');\r

  \    } else game.swap_turn();\r

  \    if (game.is_out_of_cards()) { console.log('game over! winner',
  game.winner().index); break; }\r

  \  }\r

  }"
labelDiv: "function labelDiv(label, color, w, h) {\r

  \  let d = mDiv();\r

  \  let dText = mAppendText(d, label);\r

  \  dText.classList.add('truncate');\r

  \  dText.classList.add('centerCentered');\r

  \  mColor(d, color);\r

  \  mSize(d, w, h);\r

  \  return d;\r

  }"
labelPrepper: function labelPrepper(val) { return `<b>${val.toUpperCase()}</b>`; }
labelToggler: "function labelToggler(ev) {\r

  \  let id = evToClosestId(ev);\r

  \  let info = symbolDict[id.substring(1)];\r

  \  if (isLabelVisible(id)) maHideLabel(id, info); else maShowLabel(id,
  info);\r

  \  mBy('dummy').focus();\r

  }"
landing: function landing() { if (isdef(DA.landing)) DA.landing(); }
last: "function last(arr) {\r

  \  return arr.length > 0 ? arr[arr.length - 1] : null;\r

  }"
last_elem_from_to: function last_elem_from_to(arr1, arr2) { arr2.push(arr1.pop()); }
last_n_digits: "function last_n_digits(number, n = 2) {\r

  \  return number % Math.pow(10, n);\r

  }"
lastCond: "function lastCond(arr, func) {\r

  \  if (nundef(arr)) return null;\r

  \  for (let i = arr.length - 1; i >= 0; i--) { let a = arr[i]; if (func(a))
  return a; }\r

  \  return null;\r

  }"
lastCondDict: "function lastCondDict(dict, func) {\r

  \  let keys = Object.keys(dict);\r

  \  for (let i = keys.length - 1; i >= 0; i--) {\r

  \    if (func(dict[i])) return dict[i];\r

  \  }\r

  \  return null;\r

  }"
lastCondDictPlusKey: "function lastCondDictPlusKey(dict, func) {\r

  \  let keys = Object.keys(dict);\r

  \  for (let i = keys.length - 1; i >= 0; i--) {\r

  \    let key = keys[i];\r

  \    if (func(dict[key])) return [key, dict[key]];\r

  \  }\r

  \  return null;\r

  }"
lastCondX: "function lastCondX(ad, func, keysSorted) {\r

  \  if (nundef(ad)) return null;\r

  \  else if (isDict(ad)) {\r

  \    if (isdef(keysSorted)) {\r

  \      for (let i = keysSorted.length - 1; i >= 0; i--) {\r

  \        let k = keysSorted[i];\r

  \        let v = ad[k];\r

  \        if (func(v)) { if (nundef(v.key)) v.key = k; return v; }\r

  \      }\r

  \    } else {\r

  \      for (const k in ad) {\r

  \        let v = ad[k];\r

  \        if (func(v)) { if (nundef(v.key)) v.key = k; return v; }\r

  \      }\r

  \    }\r

  \  } else {\r

  \    for (let i = ad.length - 1; i >= 0; i--) { if (func(ad[i])) return
  ad[i]; }\r

  \  }\r

  \  return null;\r

  }"
lastDescendantOfType: "function lastDescendantOfType(type, parent) {\r

  \  if (getTypeOf(parent) == type) return parent;\r

  \  let children = arrChildren(parent);\r

  \  if (isEmpty(children)) return null;\r

  \  for (const ch of children.reverse()) {\r

  \    let res = lastDescendantOfType(type, ch);\r

  \    if (res) return res;\r

  \  }\r

  \  return null;\r

  }"
lastIndexOfAny: "function lastIndexOfAny(s, list, pos) {\r

  \  let min = -1;\r

  \  let match = null;\r

  \  for (const w of list) {\r

  \    let i = s.lastIndexOf(w, pos);\r

  \    if (i >= 0 && i > min) { min = i; match = w; }\r

  \  }\r

  \  return match ? [min, match] : [-1, null];\r

  }"
lastOfLanguage: "function lastOfLanguage(key, language) {\r

  \  let y = symbolDict[key];\r

  \  let w = y[language];\r

  \  let last = stringAfterLast(w, '|');\r

  \  return last.trim();\r

  }"
lastStreakCorrect: "function lastStreakCorrect(items) {\r

  \  let n = G.incrementLevelOnPositiveStreak;\r

  \  let iFrom = items.length - 1;\r

  \  let iTo = iFrom - n;\r

  \  for (let i = iFrom; i > iTo; i--) {\r

  \    if (i < 0) return false;\r

  \    else if (!items[i].isCorrect) return false;\r

  \  }\r

  \  return true;\r

  }"
lastStreakFalse: "function lastStreakFalse(items) {\r

  \  let n = G.decrementLevelOnNegativeStreak;\r

  \  let iFrom = items.length - 1;\r

  \  let iTo = iFrom - n;\r

  \  for (let i = iFrom; i > iTo; i--) {\r

  \    if (i < 0) return false;\r

  \    else if (items[i].isCorrect) return false;\r

  \  }\r

  \  return true;\r

  }"
lastWord: function lastWord(s) { return stringAfterLast(s, ' '); }
layoutCardsOverlapping: "function layoutCardsOverlapping(mkHand, mkCardList) {\r

  \  let dHand = mkHand.elem;\r

  \  let cardContainer = mkHand.parts.body;\r

  \  let bds = getBounds(cardContainer);\r

  \  if (bds.height < 10) {\r

  \    console.log('>>')\r

  \  }\r

  \  let gap = 2;\r

  \  let hCard = mkHand.hCard;\r

  \  if (!PREFERRED_CARD_HEIGHT) PREFERRED_CARD_HEIGHT = hCard;\r

  \  let wCard = hCard * .7;\r

  \  mkCardList.map(x => mStyle(x.elem, { height: hCard, width: wCard,
  position: 'absolute' }, 'px'));\r

  \  let ovl = wCard / 4;\r

  \  let numCards = mkCardList.length;\r

  \  let wHand = (numCards - 1) * ovl + wCard + gap;\r

  \  cardContainer.style.setProperty('width', wHand + 'px');\r

  \  cardContainer.style.setProperty('position', 'relative');\r

  \  let x = gap; let y = gap;\r

  \  for (const card of mkCardList) {\r

  \    card.setPos(x, y);\r

  \    x += ovl;\r

  \  }\r

  \  let iz = 10;\r

  \  for (const card of mkCardList) {\r

  \    card.loc = mkHand.id;\r

  \    card.attach('body');\r

  \    card.zIndex = card.elem.style.zIndex = iz;\r

  \    iz += 1;\r

  \    mkMan.setDone(card.oid);\r

  \  }\r

  }"
layoutFlex: "function layoutFlex(elist, dGrid, containerStyles, { rows, cols,
  isInline = false } = {}) {\r

  \  console.log(elist, elist.length)\r

  \  let dims = calcRowsCols(elist.length, rows, cols);\r

  \  console.log('dims', dims);\r

  \  let parentStyle = jsCopy(containerStyles);\r

  \  if (containerStyles.orientation == 'v') {\r

  \    parentStyle['writing-mode'] = 'vertical-lr';\r

  \  }\r

  \  parentStyle.display = 'flex';\r

  \  parentStyle.flex = '0 0 auto';\r

  \  parentStyle['flex-wrap'] = 'wrap';\r

  \  mStyleX(dGrid, parentStyle);\r

  \  let b = getRect(dGrid);\r

  \  return { w: b.w, h: b.h };\r

  }"
layoutGrid: "function layoutGrid(elist, dGrid, containerStyles, { rows, cols,
  isInline = false } = {}) {\r

  \  console.log('layoutGrid in _legacy!')\r

  \  let dims = calcRowsCols(elist.length, rows, cols);\r

  \  let parentStyle = jsCopy(containerStyles);\r

  \  parentStyle.display = isInline ? 'inline-grid' : 'grid';\r

  \  parentStyle['grid-template-columns'] = `repeat(${dims.cols}, auto)`;\r

  \  parentStyle['box-sizing'] = 'border-box';\r

  \  mStyleX(dGrid, parentStyle);\r

  \  let b = getRect(dGrid);\r

  \  return { w: b.w, h: b.h };\r

  }"
layoutGridInfo: "function layoutGridInfo(gContainer, fields, corners, edges, fw,
  fh) {\r

  \  for (const [id, f] of Object.entries(fields)) {\r

  \    gContainer.appendChild(f.ui);\r

  \    gPos(f.ui, fw * f.info.x, fh * f.info.y);\r

  \  }\r

  \  for (const [id, f] of Object.entries(edges)) {\r

  \    agLine(f.ui, f.info.x1 * fw, f.info.y1 * fw, f.info.x2 * fw, f.info.y2
  * fw);\r

  \    gContainer.appendChild(f.ui);\r

  \  }\r

  \  for (const [id, f] of Object.entries(corners)) {\r

  \    gContainer.appendChild(f.ui);\r

  \    gPos(f.ui, fw * f.info.x, fh * f.info.y);\r

  \  }\r

  }"
layoutHand: "function layoutHand(n) {\r

  \  if (isdef(n.params.overlap) && n.children.length > 1) {\r

  \    let cards = n.children.map(x => x.ui);\r

  \    let clast = arrLast(cards);\r

  \    let b = getBounds(clast);\r

  \    let wIs = b.width;\r

  \    let overlap = firstNumber(n.params.overlap);\r

  \    let sOverlap = '' + overlap;\r

  \    let unit = stringAfter(n.params.overlap, sOverlap);\r

  \    let wSoll = 0;\r

  \    if (unit == '%') {\r

  \      overlap /= 100;\r

  \      wSoll = wIs - wIs * overlap;\r

  \    } else { wSoll = wIs - overlap; }\r

  \    let wTotal = wIs + wSoll * (cards.length - 1);\r

  \    n.ui.style.maxWidth = '' + (wTotal + 2) + 'px';\r

  \  }\r

  }"
layoutRow: "function layoutRow(uis, area, w, h, gap) {\r

  \  if (isEmpty(uis)) return [0, 0];\r

  \  let x = y = gap;\r

  \  uis.map(d => {\r

  \    mAppend(area, d);\r

  \    mPos(d, x, y);\r

  \    x += w + gap;\r

  \  });\r

  \  return [x, y + h + gap];\r

  }"
layRow: "function layRow(olist, area, size = 50, gap = 4) {\r

  \  let res = [];\r

  \  let w = size, x = gap;\r

  \  olist.map(o => {\r

  \    let d = showPictoDiv(o.key, area, o.color, x, gap, w);\r

  \    res.push(d);\r

  \    x += w + gap;\r

  \  });\r

  \  return res;\r

  }"
leaf_draw: "function leaf_draw(o) {\r

  \  let [x, y] = [o.p.x, o.p.y];\r

  \  let [w, h] = [o.len * 1.5, o.len];\r

  \  cEllipse(x, y, w, h, { bg: o.color }, o.angle);\r

  }"
length_of_each_array: "function length_of_each_array(arr) {\r

  \  let res = []\r

  \  for (const a of arr) {\r

  \    res.push(a.length);\r

  \  }\r

  \  return res.sort((a, b) => b - a);\r

  }"
lerp: function lerp(a, b, t) { return a + (b - a) * t; }
lerpoint: "function lerpoint(i1, i2, frac = .5) {\r

  \  let o = { draw: i1.draw, update: i1.update };\r

  \  addKeys(i1, o);\r

  \  let pos = lerpos(i1, i2, frac);\r

  \  o.x = pos.x; o.y = pos.y;\r

  \  o.color = colorMix(i1.color, i2.color, frac * 100);\r

  \  if (isdef(i1.label)) o.label = `${(o.x / i1.ppp).toFixed(1)},${(o.y /
  i1.ppp).toFixed(1)}`;\r

  \  return o;\r

  }"
lerpos: "function lerpos(i1, i2, frac = .5) { return { x: lerp(i1.x, i2.x,
  frac), y: lerp(i1.y, i2.y, frac) }; }"
lettersToArray: function lettersToArray(s) { return toLetterList(s); }
levDist: "function levDist(s, t) {\r

  \  var d = [];\r

  \  var n = s.length;\r

  \  var m = t.length;\r

  \  if (n == 0) return m;\r

  \  if (m == 0) return n;\r

  \  for (var i = n; i >= 0; i--) d[i] = [];\r

  \  for (var i = n; i >= 0; i--) d[i][0] = i;\r

  \  for (var j = m; j >= 0; j--) d[0][j] = j;\r

  \  for (var i = 1; i <= n; i++) {\r

  \    var s_i = s.charAt(i - 1);\r

  \    for (var j = 1; j <= m; j++) {\r

  \      if (i == j && d[i][j] > 4) return n;\r

  \      var t_j = t.charAt(j - 1);\r

  \      var cost = (s_i == t_j) ? 0 : 1;\r

  \      var mi = d[i - 1][j] + 1;\r

  \      var b = d[i][j - 1] + 1;\r

  \      var c = d[i - 1][j - 1] + cost;\r

  \      if (b < mi) mi = b;\r

  \      if (c < mi) mi = c;\r

  \      d[i][j] = mi;\r

  \      if (i > 1 && j > 1 && s_i == t.charAt(j - 2) && s.charAt(i - 2) ==
  t_j) {\r

  \        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\r

  \      }\r

  \    }\r

  \  }\r

  \  return d[n][m];\r

  }"
levelML: "function levelML() {\r

  \  let levelInfo = LevelsML[currentLevel];\r

  \  MaxNumTrials = levelInfo.MaxNumTrials;\r

  \  MaxWordLength = levelInfo.MaxWordLength;\r

  \  MinWordLength = levelInfo.MinWordLength;\r

  \  setKeys();\r

  \  NumPics = levelInfo.NumPics;\r

  \  NumLabels = levelInfo.NumLabels;\r

  \  NumMissingLetters = levelInfo.NumMissingLetters;\r

  \  MaxPosMissing = levelInfo.MaxPosMissing;\r

  }"
levelSP: "function levelSP() {\r

  \  let levelInfo = LevelsSP[currentLevel];\r

  \  MaxNumTrials = levelInfo.MaxNumTrials;\r

  \  MaxWordLength = levelInfo.MaxWordLength;\r

  \  MinWordLength = levelInfo.MinWordLength;\r

  \  setKeys(currentCategories, false, x => lastOfLanguage(x,
  currentLanguage), true, true);\r

  \  NumPics = levelInfo.NumPics;\r

  \  NumLabels = levelInfo.NumLabels;\r

  }"
levelSPA: "function levelSPA() {\r

  \  let levelInfo = LevelsSPA[currentLevel];\r

  \  MaxNumTrials = levelInfo.MaxNumTrials;\r

  \  MaxWordLength = levelInfo.MaxWordLength;\r

  \  MinWordLength = levelInfo.MinWordLength;\r

  \  setKeys(currentCategories, true, (k) => lastOfLanguage(k,
  currentLanguage));\r

  \  boundary = currentKeys.length - 1;\r

  \  NextPictureIndex = 0;\r

  \  NumPics = levelInfo.NumPics;\r

  \  NumLabels = levelInfo.NumLabels;\r

  }"
levelStep10: "function levelStep10() {\r

  \  mClass(document.body, 'aniFadeOutIn');\r

  \  hide('dLevelComplete');\r

  \  setTimeout(levelStep11, 500);\r

  }"
levelStep11: "function levelStep11() {\r

  \  clearTable();\r

  \  setTimeout(levelStep12, 500);\r

  }"
levelStep12: "function levelStep12() {\r

  \  addBadge(dLeiste, currentLevel);\r

  \  hide('dLevelComplete');\r

  \  clearTable();\r

  \  setTimeout(playRubberBandSound, 500);\r

  \  setBackgroundColor();\r

  \  showLevel();\r

  \  setTimeout(levelStep13, 2000);\r

  }"
levelStep13: "function levelStep13() {\r

  \  mRemoveClass(document.body, 'aniFadeOutIn');\r

  \  proceedIfNotStepByStep();\r

  }"
levelTC: "function levelTC() {\r

  \  let levelInfo = LevelsTC[currentLevel];\r

  \  MaxNumTrials = levelInfo.MaxNumTrials;\r

  \  MaxWordLength = levelInfo.MaxWordLength;\r

  \  MinWordLength = levelInfo.MinWordLength;\r

  \  setKeys(['life'], true);\r

  \  NumPics = levelInfo.NumPics;\r

  \  NumLabels = levelInfo.NumLabels;\r

  \  NumColors = levelInfo.NumColors;\r

  }"
levelTP: "function levelTP() {\r

  \  let levelInfo = LevelsTP[currentLevel];\r

  \  MaxNumTrials = levelInfo.MaxNumTrials;\r

  \  MaxWordLength = levelInfo.MaxWordLength;\r

  \  MinWordLength = levelInfo.MinWordLength;\r

  \  setKeys();\r

  \  NumPics = levelInfo.NumPics;\r

  \  NumLabels = levelInfo.NumLabels;\r

  }"
levelWP: "function levelWP() {\r

  \  let levelInfo = LevelsWP[currentLevel];\r

  \  MaxNumTrials = levelInfo.MaxNumTrials;\r

  \  MaxWordLength = levelInfo.MaxWordLength;\r

  \  MinWordLength = levelInfo.MinWordLength;\r

  \  setKeys();\r

  \  NumPics = levelInfo.NumPics;\r

  \  NumLabels = levelInfo.NumLabels;\r

  }"
lGrid: "function lGrid(n, R) {\r

  \  resizeBoard(n, R);\r

  \  for (const uidMember of n.children) {\r

  \    let tile = R.uiNodes[uidMember];\r

  \    if (nundef(tile.children)) continue;\r

  \    wrapLayoutPosition(n, tile, R);\r

  \  }\r

  \  return { w: n.wTotal, h: n.hTotal };\r

  }"
lHand: function lHand(n, R) { return handLayout(n, R) }
lighterColor: "function lighterColor(r, g, b) {\r

  \  let hsv = rgbToHsv(r, g, b);\r

  \  testHelpers(hsv);\r

  \  let h = hsv.h;\r

  \  let s = hsv.s;\r

  \  let v = hsv.v * 1.5;\r

  \  let hsl = hsvToHsl(h, s, v);\r

  \  h = hsl.h;\r

  \  s = hsl.s * 100;\r

  \  let l = hsl.l * 100;\r

  \  testHelpers('hsl:', h, s, l);\r

  \  return hslToHslaString(h, s, l);\r

  }"
LineMatch: "function LineMatch(BookLine, gameline) {\r

  \  for (var len = 0; len < gameline.length; ++len) {\r

  \    if (len >= BookLine.length) { return BOOL.FALSE; }\r

  \    if (gameline[len] != BookLine[len]) { return BOOL.FALSE; }\r

  \  }\r

  \  return BOOL.TRUE;\r

  }"
lineStyleFunction: "function lineStyleFunction(feature, resolution) {\r

  \  return new Style({\r

  \    stroke: new Stroke({\r

  \      color: 'green',\r

  \      width: 2,\r

  \    }),\r

  \    text: createTextStyle(feature, resolution, myDom.lines),\r

  \  });\r

  }"
lineupDecks: "function lineupDecks(msDecks, deckArea) {\r

  \  let x = 0;\r

  \  let ysign = 1;\r

  \  let yfactor = 0;\r

  \  let yheight = 140;\r

  \  let y = yfactor * yheight * ysign;\r

  \  let areaCenter = { x: deckArea.w / 2, y: deckArea.h / 2 };\r

  \  let topLeftOffset = { x: areaCenter.x - 78 / 2, y: areaCenter.y - 110 / 2
  };\r

  \  for (const mobj of msDecks) {\r

  \    mobj.attach();\r

  \    mobj.setPos(x + topLeftOffset.x, y + topLeftOffset.y);\r

  \    if (ysign > 0) { yfactor += 1; }\r

  \    ysign = -ysign;\r

  \    y = yfactor * yheight * ysign;\r

  \  }\r

  }"
linkElement: "function linkElement(s) {\r

  \  let el = document.createElement('div');\r

  \  el.style.backgroundColor = 'dimgray';\r

  \  el.innerHTML = s;\r

  \  el.onmouseenter = () => highlightContentIds(el);\r

  \  el.onmouseleave = () => unhighlightContentIds(el);\r

  \  return el;\r

  }"
linkObjects: "function linkObjects(id, oid) {\r

  \  _addRelatives(id, oid);\r

  \  listKey(id2oids, id, oid);\r

  \  listKey(oid2ids, oid, id);\r

  \  //#region testcode\r

  \  //#endregion\r

  }"
list2dict: "function list2dict(arr, keyprop = 'id', uniqueKeys = true) {\r

  \  let di = {};\r

  \  for (const a of arr) {\r

  \    if (uniqueKeys) lookupSet(di, [a[keyprop]], a);\r

  \    else lookupAddToList(di, [a[keyprop]], a);\r

  \  }\r

  \  return di;\r

  }"
liste: "function liste(areaName, oSpec, oid, o) {\r

  \  let [num, or, split, bg, fg, id, panels, parent] = getParams(areaName,
  oSpec, oid);\r

  \  parent.style.display = 'inline-grid';\r

  \  return parent;\r

  }"
listFromString: "function listFromString(s) {\r

  \  let words = s.split(',');\r

  \  return words.map(x => x.replace('\"', '').trim());\r

  }"
listKey: "function listKey(d, key, val, uniqueValues = true) {\r

  \  if (nundef(d[key])) { d[key] = []; }\r

  \  if (uniqueValues) { addIf(d[key], val); } else { d[key].push(val); }\r

  \  return d[key];\r

  }"
listKeys: "function listKeys(dict, keys, val, uniqueValues = true) {\r

  \  let d = dict;\r

  \  keysCopy = jsCopy(keys);\r

  \  let lastKey = keysCopy.pop();\r

  \  for (const k of keysCopy) {\r

  \    if (!(k in d)) {\r

  \      d[k] = {};\r

  \    }\r

  \    d = d[k];\r

  \  }\r

  \  return listKey(d, lastKey, val, uniqueValues);\r

  }"
listToString: "function listToString(lst) { return isEmpty(lst) ? lst : lst.join(' '); }"
load_all: "async function load_all() {\r

  \  let o = await route_path_yaml_dict('../y/page.yaml');\r

  \  for (const item of o) { add_edit(item.x, item.y - 41, item.text); }\r

  }"
load_assets: "function load_assets(obj) {\r

  \  Config = jsyaml.load(obj.config);\r

  \  Syms = jsyaml.load(obj.syms);\r

  \  SymKeys = Object.keys(Syms);\r

  \  ByGroupSubgroup = jsyaml.load(obj.symGSG);\r

  \  C52 = jsyaml.load(obj.c52);\r

  \  Cinno = jsyaml.load(obj.cinno);\r

  \  Info = jsyaml.load(obj.info);\r

  \  Sayings = jsyaml.load(obj.sayings);\r

  \  create_card_assets_c52();\r

  \  KeySets = getKeySets();\r

  \  assertion(isdef(Config), 'NO Config!!!!!!!!!!!!!!!!!!!!!!!!');\r

  }"
load_assets_direct: "function load_assets_direct(obj) {\r

  \  Config = jsyaml.load(obj.config);\r

  \  Syms = jsyaml.load(obj.syms);\r

  \  SymKeys = Object.keys(Syms);\r

  \  ByGroupSubgroup = jsyaml.load(obj.symGSG);\r

  \  Info = jsyaml.load(obj.info);\r

  \  KeySets = getKeySets();\r

  \  console.assert(isdef(Config), 'NO Config!!!!!!!!!!!!!!!!!!!!!!!!');\r

  }"
load_assets_fetch: "async function load_assets_fetch(basepath, baseminpath) {\r

  \  let path = basepath + 'assets/';\r

  \  Config = await route_path_yaml_dict(baseminpath + 'config.yaml');\r

  \  DB = await route_path_yaml_dict(basepath + 'DB.yaml');\r

  \  Syms = await route_path_yaml_dict(path + 'allSyms.yaml');\r

  \  SymKeys = Object.keys(Syms);\r

  \  ByGroupSubgroup = await route_path_yaml_dict(path + 'symGSG.yaml');\r

  \  C52 = await route_path_yaml_dict(path + 'c52.yaml');\r

  \  Cinno = await route_path_yaml_dict(path + 'fe/inno.yaml');\r

  \  Info = await route_path_yaml_dict(path + 'lists/info.yaml');\r

  \  create_card_assets_c52();\r

  \  KeySets = getKeySets();\r

  \  console.assert(isdef(Config), 'NO Config!!!!!!!!!!!!!!!!!!!!!!!!');\r

  \  return { users: dict2list(DB.users, 'name'), games:
  dict2list(Config.games, 'name'), tables: [] };\r

  }"
load_coassets: "function load_coassets(obj) {\r

  \  Config = jsyaml.load(obj.config);\r

  \  Syms = jsyaml.load(obj.syms);\r

  \  SymKeys = Object.keys(Syms);\r

  \  ByGroupSubgroup = jsyaml.load(obj.symGSG);\r

  \  Info = jsyaml.load(obj.info);\r

  \  KeySets = getKeySets();\r

  \  console.assert(isdef(Config), 'NO Config!!!!!!!!!!!!!!!!!!!!!!!!');\r

  }"
load_codebase: "async function load_codebase(paths, preserveRegionNames = false)
  {\r

  \  if (nundef(paths)) {\r

  \    paths = ['basemin', 'board', 'cards', 'gamehelpers', 'select'];\r

  \    paths = paths.map(f => `../basejs/${f}.js`);\r

  \  }\r

  \  let superdi = { cla: {}, func: {}, const: {}, var: {} };\r

  \  for (const f of paths) {\r

  \    console.log('...processing file', f);\r

  \    let current_file = stringBefore(stringAfterLast(f, '/'), '.');\r

  \    let base = await route_path_text(f);\r

  \    let res = parseCodefile(base, current_file, preserveRegionNames, {},
  superdi);\r

  \  }\r

  \  return superdi;\r

  }"
load_config: "async function load_config(port = 3000, apps = true, tables =
  false) {\r

  \  Config = await route_path_yaml_dict('../y/config.yaml');\r

  \  let server = 'http:/' + '/localhost:' + port;\r

  \  if (apps) {\r

  \    let files = await route_path_json(server + '/files?dir=appdata');\r

  \    console.log('apps', files)\r

  \    for (const f of files) {\r

  \      let appname = stringBefore(f, '.');\r

  \      Config.apps[appname].data = await
  route_path_yaml_dict(`../y/appdata/${appname}.yaml`);\r

  \    }\r

  \  }\r

  \  if (tables) {\r

  \    let files = await route_path_json(server + '/files?dir=tables');\r

  \    console.log('tables', files)\r

  \    Tables = {};\r

  \    for (const f of files) {\r

  \      let id = stringBefore(f, '.');\r

  \      Tables[id] = await route_path_yaml_dict(`../y/tables/${id}.yaml`);\r

  \    }\r

  \  }\r

  }"
load_config_fast: "async function load_config_fast(applist = [], tablelist = [])
  {\r

  \  Config = await route_path_yaml_dict('../y/config.yaml');\r

  \  for (const appname of applist) {\r

  \    Config.apps[appname].data = await
  route_path_yaml_dict(`../y/appdata/${appname}.yaml`);\r

  \    Config.apps[appname].name = appname;\r

  \  }\r

  \  Tables = {};\r

  \  for (const tableid of tablelist) {\r

  \    Tables[tableid] = await
  route_path_yaml_dict(`../y/tables/${tableid}.yaml`);\r

  \    Tables[tableid].name = tableid;\r

  \  }\r

  }"
load_config_new: "async function load_config_new() {\r

  \  Config = await route_path_yaml_dict('../y/config.yaml');\r

  \  let data = await route_path_yaml_dict('../y/appdata.yaml');\r

  \  for (const k in data) {\r

  \    Config.apps[k].data = data[k];\r

  \  }\r

  }"
load_db: async function load_db() { DB = await
  route_path_yaml_dict('../y/db.yaml'); Config = DB; }
load_syms: "async function load_syms(path) {\r

  \  if (nundef(path)) path = '../base/assets/';\r

  \  Syms = await route_path_yaml_dict(path + 'allSyms.yaml');\r

  \  SymKeys = Object.keys(Syms);\r

  \  ByGroupSubgroup = await route_path_yaml_dict(path + 'symGSG.yaml');\r

  \  KeySets = getKeySets();\r

  \  Info = await route_path_yaml_dict(path + 'lists/info.yaml');\r

  \  C52 = await route_path_yaml_dict(path + 'c52.yaml');\r

  \  create_card_assets_c52();\r

  \  assertion(Syms, 'Syms undefined!');\r

  }"
load_user: "function load_user(name, display_ui = true) {\r

  \  if (nundef(name)) name = 'guest';\r

  \  let udata = lookup(DB, ['users', name]);\r

  \  if (!udata) udata = add_new_user({ name: name, color: randomColor(),
  motto: random_motto(), image: false, games: {}, tables: {} });\r

  \  Session.cur_user = name;\r

  \  if (!is_admin(name)) localStorage.setItem('user', name);\r

  \  if (display_ui) show_user(udata);\r

  \  if (name == 'mimi') show('dAdminButtons'); else hide('dAdminButtons');\r

  \  return udata;\r

  }"
load_yt_in_iframe: "function load_yt_in_iframe(dParent) {\r

  \  var div = document.createElement('iframe');\r

  \  div.id = 'iframe1';\r

  \  mStyle(div, { w: 500, h: 300 });\r

  \  mAppend(dParent, div);\r

  \  div.src = \"https://www.youtube.com/embed/3pNpHZ1yv3I\"; //YES!\r

  \  //iDiv.src = \"https://www.youtube.com/embed/3pNpHZ1yv3I?autoplay=1\";\r

  }"
loadAllGames_dep: "async function loadAllGames_dep() {\r

  \  if (allGames) return;\r

  \  allGames = vidCache_dep.load('allGames');\r

  \  if (!allGames) {\r

  \    allGames = await route_allGames();\r

  \    console.log(allGames)\r

  \  }\r

  }"
loadAsset: "async function loadAsset() {\r

  \  let response = await
  fetch('/frontend/static/rsg/assets/gameIconCodes.yml');\r

  \  console.log(response);\r

  }"
loadAssets: "async function loadAssets() {\r

  \  vidCache = new LazyCache(!USE_LOCAL_STORAGE);\r

  \  testCardsC = await vidCache.load('testCards', async () => await
  route_rsg_asset('testCards', 'yaml'));\r

  \  testCards = vidCache.asDict('testCards');\r

  \  iconCharsC = await vidCache.load('iconChars', route_iconChars);\r

  \  iconChars = vidCache.asDict('iconChars');\r

  \  allGamesC = await vidCache.load('allGames', route_allGames);\r

  \  allGames = vidCache.asDict('allGames');\r

  \  playerConfig = stubPlayerConfig(allGames);\r

  }"
loadassets: "async function loadassets() {\r

  \  C52 = await localOrRoute('C52', '../base/assets/c52.yaml');\r

  \  symbolDict = Syms = await localOrRoute('syms',
  '../base/assets/allSyms.yaml');\r

  \  SymKeys = Object.keys(Syms);\r

  \  ByGroupSubgroup = await localOrRoute('gsg',
  '../base/assets/symGSG.yaml');\r

  \  WordP = await route_path_yaml_dict('../base/assets/math/allWP.yaml');\r

  \  DB = await route_path_yaml_dict('../DB.yaml');\r

  \  start();\r

  }"
loadAssetsSIMA: "async function loadAssetsSIMA(assetsPath) {\r

  \  timit.show('assets*')\r

  \  c52 = await localOrRoute('c52', assetsPath + 'c52_blackBorder.yaml');\r

  \  cinno = await localOrRoute('cinno', assetsPath + 'fe/inno.yaml');\r

  \  symbolDict = await localOrRoute('symbolDict', assetsPath +
  'symbolDict.yaml');\r

  \  symbolKeys = Object.keys(symbolDict);\r

  \  symbolList = dict2list(symbolDict);\r

  \  ensureSymBySet(); makeHigherOrderGroups();\r

  \  svgDict = await localOrRoute('svgDict', assetsPath + 'svgDict.yaml');\r

  \  svgKeys = Object.keys(svgDict);\r

  \  svgList = dict2list(svgDict);\r

  \  Syms = await localOrRoute('syms', assetsPath + 'syms.yaml');\r

  \  SymKeys = Object.keys(Syms);\r

  \  timit.show('assets done')\r

  }"
loadAsText: "async function loadAsText(url) {\r

  \  let f = await fetch(url);\r

  \  let txt = await f.text();\r

  \  return txt;\r

  }"
loadAutoState: "function loadAutoState() {\r

  \  if ('auto' in HistoryOfStates) Socket.emit('state',
  HistoryOfStates.auto);\r

  }"
loadBasicAssets: "async function loadBasicAssets(assetsPath) {\r

  \  c52 = await localOrRoute('c52', assetsPath + 'c52_blackBorder.yaml');\r

  \  cinno = await localOrRoute('cinno', assetsPath + 'fe/inno.yaml');\r

  \  symbolDict = await localOrRoute('symbolDict', assetsPath +
  'symbolDict.yaml');\r

  \  symbolKeys = Object.keys(symbolDict);\r

  \  symbolList = dict2list(symbolDict);\r

  \  ensureSymBySet(); makeHigherOrderGroups();\r

  \  svgDict = await localOrRoute('svgDict', assetsPath + 'svgDict.yaml');\r

  \  svgKeys = Object.keys(svgDict);\r

  \  svgList = dict2list(svgDict);\r

  }"
loadBestKeys: "async function loadBestKeys() {\r

  \  BestKeySets = await loadYamlDict('/assets/speech/keysets.yaml');\r

  \  BestKeysD = await loadYamlDict('/assets/speech/bestKeysD.yaml');\r

  \  BestKeysE = await loadYamlDict('/assets/speech/bestKeysE.yaml');\r

  \  for (const e of BestKeysD) {\r

  \    let info = symbolDict[e.k];\r

  \    info.bestD = e.r;\r

  \    info.bestDConf = e.c;\r

  \  }\r

  \  for (const e of BestKeysE) {\r

  \    let info = symbolDict[e.k];\r

  \    info.bestE = e.r;\r

  \    info.bestEConf = e.c;\r

  \  }\r

  \  for (const setname in BestKeySets) {\r

  \    for (const k of BestKeySets[setname]) {\r

  \      let info = symbolDict[k];\r

  \      if (nundef(info.bestE)) info.bestE = lastOfLanguage(k, 'E');\r

  \      if (nundef(info.bestD)) info.bestD = lastOfLanguage(k, 'D');\r

  \      info[setname] = { E: info.bestE, D: info.bestD };\r

  \    }\r

  \  }\r

  }"
loadBoardImage: "function loadBoardImage(dOneBoard, s, b, scale, useCornerColor
  = false) {\r

  \  let boardFilename = s.boardFilename;\r

  \  if (boardFilename == 'none') { return; }\r

  \  let path = getBoardImagePath(boardFilename);\r

  \  var img = mCreate('img');\r

  \  img.onload = ev => {\r

  \    let sz = s.naturalImageSize = b.imgSize = { w: img.naturalWidth, h:
  img.naturalHeight };\r

  \    let szi = s.backgroundSize;\r

  \    if (szi == 'initial' && scale != 1) szi = getScaledSizeCss(sz,
  scale);\r

  \    b.dOuter.style.backgroundImage = `url(${img.src})`;\r

  \    mStyleX(b.dOuter, { 'background-size': szi, 'background-repeat':
  'no-repeat', 'background-position': 'center center' });\r

  \    let [wb, hb] = [Math.max(sz.w * scale, b.wNeeded), Math.max(sz.h *
  scale, b.hNeeded)];\r

  \    mStyleX(b.dOuter, { wmin: wb, hmin: hb });\r

  \    if (useCornerColor) setLinearBackground(b.d0, s.baseColor, 10);\r

  \    b.img = img;\r

  \  }\r

  \  img.src = path;\r

  }"
loadCode: "async function loadCode() {\r

  \  if (TESTING && !CODE_VERSION) return;\r

  \  let url = TESTING && !USE_NON_TESTING_DATA ? TEST_PATH + GAME + '/code' +
  CODE_VERSION + '.js'\r

  \    : '/games/' + GAME + '/_rsg/' + GAME + VERSION + '.js';\r

  \  let loader = new ScriptLoader();\r

  \  await loader.load(SERVER + url);\r

  \  if (TESTING) userCodeC = await vidCache.load('userCode', async () =>
  await route_path_asText_dict(url), true, false);\r

  \  else userCodeC = await vidCache.load('userCode', async () => await
  route_userCode(GAME, GAME + VERSION), !CACHE_CODE, CACHE_CODE);\r

  \  userCode = vidCache.asDict('userCode');\r

  \  let d = mBy('OLDCODE');\r

  \  if (d && SHOW_CODE) { d.innerHTML = '<pre>' + userCode.asText + '</pre>';
  }\r

  }"
loadCode_dep: "function loadCode_dep(text) {\r

  \  if (isdef(text)) text = text.trim();\r

  \  if (isEmpty(text)) {\r

  \    return;\r

  \  }\r

  \  var scriptTag = document.createElement(\"script\");\r

  \  scriptTag.onload = () => console.log('code loaded.....');\r

  \  scriptTag.setAttribute(\"type\", \"text/javascript\");\r

  \  scriptTag.innerHTML = text;\r

  \  document.getElementsByTagName(\"body\")[0].appendChild(scriptTag);\r

  }"
loadCode0: "function loadCode0(text, codeToRunWhenScriptLoaded = null, callback
  = null) {\r

  \  if (isdef(text)) text = text.trim();\r

  \  if (isEmpty(text)) {\r

  \    console.log('code is empty!!! no script loaded!');\r

  \    if (callback) callback();\r

  \    return;\r

  \  }\r

  \  var scriptTag = document.createElement(\"script\");\r

  \  scriptTag.setAttribute(\"type\", \"text/javascript\");\r

  \  scriptTag.text = callback ? [text, codeToRunWhenScriptLoaded].join('\\n')
  : text;\r

  \  document.getElementsByTagName(\"body\")[0].appendChild(scriptTag);\r

  }"
loadCodebase: "async function loadCodebase(dir) {\r

  \  let path_js=isdef(dir)?(dir+'/z_all.js'):'../allcode.js';\r

  \  dir = isdef(dir)?dir:'../basejs';\r

  \  let text = CODE.text = await route_path_text(path_js);\r

  \  let keysSorted = [];\r

  \  let lines = text.split('\\r\\n');\r

  \  for (const l of lines) {\r

  \    if (['var', 'const', 'cla', 'func'].some(x => l.startsWith(x))) {\r

  \      let key = firstWordAfter(l, ' ', true);\r

  \      keysSorted.push(key);\r

  \    }\r

  \  }\r

  \  CODE.keysSorted = keysSorted;\r

  \  CODE.di = await route_path_yaml_dict(dir+'/z_all.yaml');\r

  \  CODE.justcode = await route_path_yaml_dict(dir+'/z_allcode.yaml');\r

  \  CODE.codelist=dict2list(CODE.justcode,'key');\r

  \  CODE.history = await route_path_yaml_dict(dir+'/z_allhistory.yaml');\r

  \  let keys = {};\r

  \  for (const k in CODE.di) { for (const k1 in CODE.di[k]) keys[k1] =
  CODE.di[k][k1]; }\r

  \  CODE.all = keys;\r

  \  CODE.keylist = Object.keys(keys)\r

  }"
loadCorrectWords: "async function loadCorrectWords() {\r

  \  CorrectKeysByLanguage = { E: [], EB: [], D: [] };\r

  \  CorrectByKey = {};\r

  \  let speechZira = await loadYamlDict('/assets/speech/speechZira.yaml');\r

  \  for (const k in speechZira) {\r

  \    let e = lookup(speechZira, [k, 'E', 'zira']);\r

  \    if (e && e.correct) {\r

  \      let c = Math.round(e.conf * 100);\r

  \      lookupSet(CorrectByKey, [k, 'E'], { r: e.req, c: c });\r

  \      addIf(CorrectKeysByLanguage.E, k);\r

  \    }\r

  \  }\r

  \  let speechBritish = await
  loadYamlDict('/assets/speech/speechBritish.yaml');\r

  \  for (const k in speechBritish) {\r

  \    let e = lookup(speechBritish, [k, 'E', 'ukMale']);\r

  \    if (e && e.correct) {\r

  \      let c = Math.round(e.conf * 100);\r

  \      lookupSet(CorrectByKey, [k, 'EB'], { r: e.req, c: c });\r

  \      addIf(CorrectKeysByLanguage.EB, k);\r

  \    }\r

  \  }\r

  \  let speechDeutsch = await
  loadYamlDict('/assets/speech/speechDeutsch.yaml');\r

  \  for (const k in speechDeutsch) {\r

  \    let e = lookup(speechDeutsch, [k, 'D', 'deutsch']);\r

  \    if (e && e.correct) {\r

  \      let c = Math.round(e.conf * 100);\r

  \      lookupSet(CorrectByKey, [k, 'D'], { r: e.req, c: c });\r

  \      addIf(CorrectKeysByLanguage.D, k);\r

  \    }\r

  \  }\r

  }"
loadCorrectWords_dep: "async function loadCorrectWords_dep() {\r

  \  CorrectWords = await loadYamlDict('/assets/correctWordsX.yaml');\r

  \  CorrectWordsCorrect = { E: {}, D: {} };\r

  \  CorrectWordsExact = { E: {}, D: {} };\r

  \  CorrectWordsFailed = { E: {}, D: {} };\r

  \  if (isdef(CorrectWords) && isdef(CorrectWords.data)) {\r

  \    for (const cwentry of CorrectWords.data) {\r

  \      let key = cwentry.key;\r

  \      for (const lang of ['E', 'D']) {\r

  \        let cw = cwentry[lang];\r

  \        if (cw.isCorrect) {\r

  \          if (cw.answer == cw.req && !(cw.danger == true))
  CorrectWordsExact[lang][key] = cw;\r

  \          else CorrectWordsCorrect[lang][key] = cw;\r

  \        } else CorrectWordsFailed[lang][key] = cw;\r

  \      }\r

  \    }\r

  \  }\r

  }"
loader_off: function loader_off() { let d = mBy('loader_holder'); if (isdef(d))
  d.className = 'loader_off'; }
loader_on: function loader_on() { let d = mBy('loader_holder'); if (isdef(d))
  d.className = 'loader_on'; }
loadExerciser: "function loadExerciser(dParent, row, col) {\r

  \  loadPic('exercises', 100, 100, dParent, { row: row, col: col, scale: 1.5
  }, 'gif');\r

  }"
loadGame: "function loadGame(id) {\r

  \  if (nundef(id)) id = localStorage.getItem('game');\r

  \  if (nundef(id)) id = Object.keys(DB.games)[0];\r

  \  G = lookup(DB, ['games', id]);\r

  \  G.color = getColorDictColor(G.color);\r

  \  G.id = Gamename = id;\r

  \  updateGamenameUi(id, G.color);\r

  }"
loadGameInfo: "async function loadGameInfo(useAllGamesStub = true) {\r

  \  if (useAllGamesStub) {\r

  \    allGames = {\r

  \      ttt: {\r

  \        name: 'TicTacToe',\r

  \        long_name: 'Tic-Tac-Toe',\r

  \        short_name: 'ttt',\r

  \        num_players: [2],\r

  \        player_names: ['Player1', 'Player2'],\r

  \      },\r

  \      s1: {\r

  \        name: 's1',\r

  \        long_name: 's1',\r

  \        short_name: 's1',\r

  \        num_players: [2, 3, 4, 5],\r

  \        player_names: ['Player1', 'Player2', 'Player3', 'Player4',
  'Player5'],\r

  \      },\r

  \      starter: {\r

  \        name: 'Starter',\r

  \        long_name: 'Starter',\r

  \        short_name: 'starter',\r

  \        num_players: [2],\r

  \        player_names: ['Player1', 'Player2'],\r

  \      },\r

  \      catan: {\r

  \        name: 'Catan',\r

  \        long_name: 'The Settlers of Catan',\r

  \        short_name: 'catan',\r

  \        num_players: [3, 4],\r

  \        player_names: ['White', 'Red', 'Blue', 'Orange'],\r

  \      },\r

  \      aristocracy: {\r

  \        name: 'Aristocracy',\r

  \        long_name: 'Aristocracy',\r

  \        short_name: 'aristocracy',\r

  \        num_players: [2, 3, 4, 5],\r

  \        player_names: ['Player1', 'Player2', 'Player3', 'Player4',
  'Player5'],\r

  \      }\r

  \    };\r

  \  } else {\r

  \    allGamesC = await vidCache.load('allGames', route_allGames);\r

  \    allGames = vidCache.asDict('allGames');\r

  \  }\r

  \  playerConfig = stubPlayerConfig(allGames);\r

  }"
loadGerman: "async function loadGerman(justNouns = false) {\r

  \  let root = justNouns ? 'Nouns' : 'Dict';\r

  \  let ed = await route_path_yaml_dict('../assets/speech/ed' + root +
  '.yaml');\r

  \  let de = await route_path_yaml_dict('../assets/speech/de' + root +
  '.yaml');\r

  \  return [ed, de];\r

  }"
loadHistoryExp: "function loadHistoryExp() {\r

  \  let hist = localStorage.getItem('history');\r

  \  if (isdef(hist)) {\r

  \    HistoryOfStates = JSON.parse(hist);\r

  \    console.log('history loaded successfully...', HistoryOfStates);\r

  \  } else {\r

  \    console.log('no history found!!!');\r

  \  }\r

  }"
loadIcon_dep: "async function loadIcon_dep(key) {\r

  \  if (!iconChars) iconChars = await route_iconChars();\r

  \  return iconChars[key];\r

  }"
loadIconChars: "function loadIconChars(callbacks = []) {\r

  \  loadYML('/frontend/static/rsg/assets/gameIconCodes.yml', dga => {\r

  \    gaChars = dga;\r

  \    loadYML('/frontend/static/rsg/assets/faIconCodes.yml', dfa => {\r

  \      faChars = dfa;\r

  \      iconChars = {};\r

  \      faKeys = [];\r

  \      for (const k in faChars) {\r

  \        iconChars[k] = faChars[k];\r

  \      }\r

  \      for (const k in gaChars) {\r

  \        if (isdef(faChars[k])) faKeys.push(k);\r

  \        iconChars[k] = gaChars[k];\r

  \      }\r

  \      timit.showTime('loaded icons codes')\r

  \      if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));\r

  \    });\r

  \  });\r

  }"
loadIcons: "function loadIcons(callback) {\r

  \  let faChars, gaChars;\r

  \  loadYML('/_lib/assets/icons/gameIconCodes.yml', dga => {\r

  \    gaChars = dga;\r

  \    loadYML('/_lib/assets/icons/faIconCodes.yml', dfa => {\r

  \      faChars = dfa;\r

  \      iconChars = {};\r

  \      for (const k in faChars) {\r

  \        iconChars[k] = faChars[k];\r

  \      }\r

  \      for (const k in gaChars) {\r

  \        iconChars[k] = gaChars[k];\r

  \      }\r

  \      timit.showTime('loaded icons codes');\r

  \      callback();\r

  \    });\r

  \  });\r

  }"
loadInitialServerData: "async function loadInitialServerData(unameStarts) {\r

  \  let initialPath = GAME + (USE_MAX_PLAYER_NUM ? '_max' : '');\r

  \  _syncUsernameOfSender(unameStarts);\r

  \  if (TESTING) {\r

  \    let url = SERVERDATA_PATH + '.yaml';\r

  \    serverDataC = initialDataC[GAME] = await vidCache.load('_initial_' +
  initialPath, async () => await route_path_yaml_dict(url), true, false);\r

  \  } else {\r

  \    serverDataC = initialDataC[GAME] = await vidCache.load('_initial_' +
  initialPath, async () => await route_initGame(GAME, playerConfig[GAME],
  Username), !CACHE_INITDATA, CACHE_INITDATA);\r

  \  }\r

  \  serverData = vidCache.asDict('_initial_' + initialPath);\r

  \  return serverData;\r

  }"
loadInitialServerDatafe: "async function loadInitialServerDatafe(unameStarts)
  {\r

  \  _syncUsernameOfSender(unameStarts);\r

  \  let url = SERVERDATA_PATH;\r

  \  serverDataC = initialDataC[GAME] = await vidCache.load('serverData',
  async () => await route_path_yaml_dict(url), true, false);\r

  \  serverData = vidCache.asDict('serverData');\r

  \  return serverData;\r

  }"
loadJSON: "function loadJSON(path, callback) {\r

  \  //usage:
  https://stackoverflow.com/questions/48073151/read-local-json-file-into-variab\
  le\r

  \  var xobj = new XMLHttpRequest();\r

  \  xobj.overrideMimeType('application/json');\r

  \  xobj.open('GET', path, true);\r

  \  xobj.onreadystatechange = function () {\r

  \    if (xobj.readyState == 4 && xobj.status == '200') {\r

  \      callback(JSON.parse(xobj.responseText));\r

  \    }\r

  \  };\r

  \  xobj.send(null);\r

  }"
loadJsonDict: async function loadJsonDict(url) { return await route_path_json_dict(url); }
loadObject: function loadObject(name) { return JSON.parse(localStorage.getItem(name)); }
loadPic: "function loadPic(filename, w, h, dParent, { x, y, row, col, scale } =
  {}, ext = 'jpg', dir = '../assets/images/postures/') {\r

  \  let dPic = mDiv(dParent);\r

  \  dPic.style.width = '' + w + 'px';\r

  \  dPic.style.height = '' + h + 'px';\r

  \  if (isdef(row)) row *= w;\r

  \  if (isdef(col)) col *= h;\r

  \  if (isdef(x)) col = x;\r

  \  if (isdef(y)) row = y;\r

  \  if (nundef(row)) row = 0;\r

  \  if (nundef(col)) col = 0;\r

  \  dPic.style.background = `url(${dir}${filename}.${ext}) -${col}px
  -${row}px`;\r

  \  if (isdef(scale)) dPic.style.transform = `scale(${scale})`;\r

  }"
loadRandomExerciser: "function loadRandomExerciser(dParent) {\r

  \  mLinebreak(dParent, 75);\r

  \  loadExerciser(dParent, randomNumber(0, 5), randomNumber(0, 7));\r

  \  mLinebreak(dParent, 25);\r

  }"
loadRandomExerciser2: "function loadRandomExerciser2(dParent, i) {\r

  \  let w = 280;\r

  \  let h = 240;\r

  \  let filename = 'exercises2';\r

  \  let table = [[30, 30], [30, 260], [30, 480], [30, 730], [20, 940],\r

  \  [350, 30], [350, 245], [350, 450], [350, 650], [330, 890],\r

  \  [620, 0], [620, 245], [620, 460], [620, 700], [560, 920],\r

  \  [880, 0], [900, 245], [890, 460], [860, 700], [870, 920],\r

  \  [1150, 0], [1170, 320], [1150, 620], [1120, 900],\r

  \  [1350, 30], [1400, 330], [1380, 630], [1350, 890]\r

  \  ];\r

  \  if (nundef(i)) i = randomNumber(0, table.length - 1);\r

  \  i = i % table.length;\r

  \  let x = table[i][0];\r

  \  let y = table[i][1];\r

  \  if (i == 9) { w = 240; h = 280; }\r

  \  else if (i == 13) { w = 240; h = 200; }\r

  \  else if (i == 14) { w = 260; h = 260; }\r

  \  else if (i == 20 || i == 21 || i == 22) { w = 240; h = 260; }\r

  \  else if (i == 24) { w = 280; h = 280; }\r

  \  else if (i == 25) { w = 200; h = 290; }\r

  \  else if (i == 26) { w = 230; h = 260; }\r

  \  else if (i == 27) { w = 240; h = 250; }\r

  \  console.log('i' + i, x, y)\r

  \  loadPic(filename, w, h, dParent, { x: x, y: y }, 'gif');\r

  }"
loadRandomTaeOrPosturePic: "function loadRandomTaeOrPosturePic(dpics) {\r

  \  let imgs = ['tae', 'posture'];\r

  \  mImage(`../assets/images/postures/${chooseRandom(imgs)}0${randomNumber(1,
  8)}.jpg`, dpics, 200, 200);\r

  }"
loadScript: "function loadScript(path, callback) {\r

  \  var script = document.createElement('script');\r

  \  script.onload = function () {\r

  \    if (callback) callback(path);\r

  \  };\r

  \  script.src = path;\r

  \  document.head.appendChild(script);\r

  }"
loadServerDataForTestSeries: "async function loadServerDataForTestSeries(series)
  {\r

  \  let path = '/assetsTEST/' + series + '/server.yaml';\r

  \  await loadTestServerData(path);\r

  \  preProcessData();\r

  \  sData = makeDefaultPool(jsCopy(serverData));\r

  \  return sData;\r

  }"
loadSIMA: "async function loadSIMA(callback) {\r

  \  let url = SERVERURL;\r

  \  fetch(url, {\r

  \    method: 'GET',\r

  \    headers: {\r

  \      'Accept': 'application/json',\r

  \      'Content-Type': 'application/json'\r

  \    },\r

  \  }).then(async data => {\r

  \    let sData = await data.json();\r

  \    DB = sData[0];\r

  \    if (CLEAR_LOCAL_STORAGE) localStorage.clear();\r

  \    await loadAssetsSIMA('../assets/');\r

  \    if (isdef(callback)) callback();\r

  \  });\r

  }"
loadSolutions: "async function loadSolutions(series) {\r

  \  let solFilename = 'sol';\r

  \  let sol = await loadJsonDict('/assetsTEST/' + series + '/' + solFilename
  + '.json');\r

  \  let sol1 = {};\r

  \  for (const k in sol) { sol1[firstNumber(k)] = sol[k]; }\r

  \  let solutions = sol1;\r

  \  return solutions;\r

  }"
loadSpec: "async function loadSpec(path) {\r

  \  if (TESTING) {\r

  \    let url = DSPEC_PATH + '.yaml';\r

  \    defaultSpecC = await vidCache.load('defaultSpec', async () => await
  route_path_yaml_dict(url), true, false);\r

  \    url = (isdef(path) ? path : SPEC_PATH) + '.yaml';\r

  \    if (USE_NON_TESTING_DATA) url = '/games/' + GAME + '/_rsg/' + GAME +
  VERSION + '.yaml';\r

  \    userSpecC = await vidCache.load('userSpec', async () => await
  route_test_userSpec(url), true, false);\r

  \  } else {\r

  \    url = DSPEC_PATH + '.yaml';\r

  \    defaultSpecC = await vidCache.load('defaultSpec', async () => await
  route_path_yaml_dict(url), !CACHE_DEFAULTSPEC, CACHE_DEFAULTSPEC);\r

  \    userSpecC = await vidCache.load('userSpec', async () => await
  route_userSpec(GAME, GAME + VERSION), !CACHE_USERSPEC, CACHE_USERSPEC);\r

  \  }\r

  \  defaultSpec = vidCache.asDict('defaultSpec');\r

  \  userSpec = vidCache.asDict('userSpec');\r

  \  SPEC = deepmerge(defaultSpec, userSpec);\r

  \  DEFS = SPEC.defaults;\r

  \  delete SPEC.defaults;\r

  \  if (userSpec.layout_alias) { SPEC.areas = userSpec.layout_alias; }\r

  \  if (userSpec.areas) { SPEC.areas = userSpec.areas; }\r

  \  delete SPEC.layout_alias;\r

  \  delete SPEC.asText;\r

  }"
loadSpecAndCode: "async function loadSpecAndCode() {\r

  \  let initialPath = GAME + (USE_MAX_PLAYER_NUM ? '_max' : '');\r

  \  if (TESTING) {\r

  \    let url = TEST_PATH + 'defaultSpec' + DSPEC_VERSION + '.yaml';\r

  \    defaultSpecC = await vidCache.load('defaultSpec', async () => await
  route_path_yaml_dict(url), true, false);\r

  \    url = TEST_PATH + GAME + '/uspec' + USPEC_VERSION + '.yaml';\r

  \    if (USE_NON_TESTING_DATA) url = '/games/' + GAME + '/_rsg/' + GAME +
  VERSION + '.yaml';\r

  \    userSpecC = await vidCache.load('userSpec', async () => await
  route_test_userSpec(url), true, false);\r

  \    url = TEST_PATH + GAME + '/code' + CODE_VERSION + '.js';\r

  \    if (USE_NON_TESTING_DATA) url = '/games/' + GAME + '/_rsg/' + GAME +
  VERSION + '.js';\r

  \    userCodeC = await vidCache.load('userCode', async () => await
  route_path_asText_dict(url), true, false);\r

  \    url = TEST_PATH + GAME + '/data' + SERVERDATA_VERSION + '_' +
  initialPath + '.yaml';\r

  \    serverDataC = initialDataC[GAME] = await vidCache.load('_initial_' +
  initialPath, async () => await route_path_yaml_dict(url), true, false);\r

  \    serverData = vidCache.asDict('_initial_' + initialPath);\r

  \  } else {\r

  \    url = TEST_PATH + 'defaultSpec' + DSPEC_VERSION + '.yaml';\r

  \    defaultSpecC = await vidCache.load('defaultSpec', async () => await
  route_path_yaml_dict(url), !CACHE_DEFAULTSPEC, CACHE_DEFAULTSPEC);\r

  \    userSpecC = await vidCache.load('userSpec', async () => await
  route_userSpec(GAME, GAME + VERSION), !CACHE_USERSPEC, CACHE_USERSPEC);\r

  \    let fname = userSpecC['CODE'];\r

  \    userCodeC = await vidCache.load('userCode', async () => await
  route_userCode(GAME, GAME + VERSION), !CACHE_CODE, CACHE_CODE);\r

  \    serverDataC = initialDataC[GAME] = await vidCache.load('_initial_' +
  initialPath, async () => await route_initGame(GAME, playerConfig[GAME],
  USERNAME), !CACHE_INITDATA, CACHE_INITDATA);\r

  \  }\r

  \  defaultSpec = vidCache.asDict('defaultSpec');\r

  \  userSpec = vidCache.asDict('userSpec');\r

  \  userCode = vidCache.asDict('userCode');\r

  \  loadCode0(userCode.asText, 'setUserSpecAndCode();', () => {\r

  \    setUserSpecAndCode();\r

  \  });\r

  \  serverData = vidCache.asDict('_initial_' + initialPath);\r

  }"
loadSpecfe: "async function loadSpecfe() {\r

  \  let url = DSPEC_PATH + DSPEC_VERSION + '.yaml';\r

  \  defaultSpecC = await vidCache.load('defaultSpec', async () => await
  route_path_yaml_dict(url), true, false);\r

  \  url = SPEC_PATH;\r

  \  let staticSpecC = await vidCache.load('staticSpec', async () => await
  route_test_userSpec(url), true, false);\r

  \  defaultSpec = vidCache.asDict('defaultSpec');\r

  \  staticSpec = vidCache.asDict('staticSpec');\r

  \  SPEC = deepmerge(defaultSpec, staticSpec, { arrayMerge: overwriteMerge
  });\r

  \  delete SPEC.asText;\r

  \  let d = mBy('SPEC');\r

  \  if (d && SHOW_SPEC) { d.innerHTML = '<pre>' + jsonToYaml(SPEC) +
  '</pre>'; }\r

  }"
loadStyle: "function loadStyle(href, callback) {\r

  \  let style = document.createElement('link');\r

  \  style.rel = href == 'favicon' ? 'shortcut icon' : 'stylesheet';\r

  \  style.onload = function () {\r

  \    if (callback) callback(href);\r

  \  };\r

  \  style.href = href;\r

  \  document.head.appendChild(style);\r

  }"
loadTable: "function loadTable(id) {\r

  \  if (nundef(id)) id = localStorage.getItem('table');\r

  \  if (nundef(id)) id = findTable(true);\r

  \  T = lookup(DB, ['tables', id]);\r

  \  Tablename = id;\r

  \  logTable();\r

  \  updateTablenameUi(id, G.color);\r

  }"
loadTestServerData: "async function loadTestServerData(url) {\r

  \  let initial = 'testServerData';\r

  \  serverDataC = initialDataC[GAME] = await vidCache.load(initial, async ()
  => await route_path_yaml_dict(url), true, false);\r

  \  serverData = vidCache.asDict(initial);\r

  \  return serverData;\r

  }"
loadText: "function loadText(path, callback) {\r

  \  $.ajax({\r

  \    url: path,\r

  \    type: 'GET',\r

  \    success: response => {\r

  \      if (callback) {\r

  \        callback(response);\r

  \      }\r

  \    },\r

  \    error: err => {\r

  \      error(err);\r

  \    }\r

  \  });\r

  \  return 'ok';\r

  }"
loadUrlToJSON: function loadUrlToJSON(url, callback) { }
loadUser: "function loadUser(newUser) {\r

  \  cleanupOldGame();\r

  \  Username = isdef(newUser) ? newUser : localStorage.getItem('user');\r

  \  if (nundef(Username)) Username = DEFAULTUSERNAME;\r

  \  let uData = lookupSet(DB, ['users', Username]);\r

  \  if (!uData) {\r

  \    if (startsWith(newUser, 'test')) { uData = DB.users[Username] =
  jsCopy(DB.users.test0); uData.id = Username; }\r

  \    else { uData = DB.users[Username] = jsCopy(DB.users.guest0); uData.id =
  Username; }\r

  \  }\r

  \  U = DB.users[Username];\r

  \  let uiName = 'spUser';\r

  \  let dUser = mBy(uiName);\r

  \  if (nundef(dUser)) { dUser = editableUsernameUi(dLineTopLeft); dUser.id =
  uiName; }\r

  \  let game = !window.navigator.onLine && U.lastGame == 'gSayPic' ?
  'gTouchPic' : U.lastGame;\r

  \  if (nundef(game)) game = U.avGames[0];\r

  \  setGame(game);\r

  }"
loadUserCode: "function loadUserCode(callbacks = []) {\r

  \  let fname = S.user.spec ? S.user.spec.CODE : null;\r

  \  if (nundef(fname)) {\r

  \    S.user.script = 'no code';\r

  \    if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));\r

  \  } else {\r

  \    S.path.script = '/games/' + S.settings.game + '/_rsg/' + fname +
  '.js';\r

  \    loadScript(S.path.script, dScript => {\r

  \      loadText(S.path.script, code => {\r

  \        console.log('script.onload DOES WORK!!!!!!!!!!!!')\r

  \        S.user.script = code;\r

  \        if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks,
  1));\r

  \      });\r

  \    });\r

  \  }\r

  }"
loadUserSpec: "function loadUserSpec(callbacks = []) {\r

  \  sendRoute('/get_UI_spec/' + GAME, d1 => {\r

  \    try {\r

  \      S.user.spec = JSON.parse(d1);\r

  \      sendRoute('/spec/' + GAME, d2 => {\r

  \        S.user.specText = d2;\r

  \        if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks,
  1));\r

  \      });\r

  \    } catch {\r

  \      S.user.spec = null;\r

  \      S.user.specText = 'null';\r

  \      if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));\r

  \    }\r

  \  });\r

  }"
loadWalker: function loadWalker(dParent) { loadExerciser(dParent, 3, 2); }
loadYamlDict: async function loadYamlDict(url) { return await route_path_yaml_dict(url); }
loadYML: "function loadYML(path, callback) {\r

  \  res = undefined;\r

  \  $.get(path)\r

  \    .done(function (data) {\r

  \      var yml = jsyaml.load(data);\r

  \      var jsonString = JSON.stringify(data);\r

  \      var json = $.parseJSON(jsonString);\r

  \      callback(yml);\r

  \    });\r

  }"
lobbyView: "function lobbyView() {\r

  \  //document.body.style.transform = null; //'scale('+1+')'; //.5)';
  //+(percent/100)+\")\";\r

  \  view = 'lobby';\r

  \  hideLogin();\r

  \  showLobby();\r

  \  hideGame();\r

  \  updateLoginHeader();\r

  \  removeAllGlobalHandlers();\r

  \  addLobbyViewHandlers();\r

  \  if (isPlaying) enableResumeButton(); else disableResumeButton();\r

  \  enableCreateButton();\r

  \  enableJoinButton();\r

  \  if (!USE_SOCKETIO) hideEventList();\r

  }"
localOrRoute: "async function localOrRoute(key, url) {\r

  \  if (USE_LOCAL_STORAGE) {\r

  \    let x = localStorage.getItem(key);\r

  \    if (isdef(x)) return JSON.parse(x);\r

  \    else {\r

  \      let data = await route_path_yaml_dict(url);\r

  \      if (key != 'svgDict') localStorage.setItem(key,
  JSON.stringify(data));\r

  \      return data;\r

  \    }\r

  \  } else return await route_path_yaml_dict(url);\r

  }"
localUpdate: "function localUpdate() {\r

  \  update();\r

  }"
log_array: "function log_array(arr) {\r

  \  arr.map(x => console.log(x));\r

  }"
log_object: "function log_object(o = {}, msg = '', props = [], indent = 0) {\r

  \  console.log(indent ? '.'.repeat(indent) : '____', msg, indent ? '' :
  `(caller:${getFunctionsNameThatCalledThisFunction()})`);\r

  \  let keys = get_keys(o); keys.sort();\r

  \  for (const k of keys) {\r

  \    if (isEmpty(props) || props.includes(k)) {\r

  \      if (isDict(o[k])) { log_object(o[k], k, get_keys(o[k]).join(' '),
  indent + 1); console.log(); }\r

  \      else if (isListOf(o[k], isLiteral)) console.log(' '.repeat(indent), k
  + ':', o[k].join(','));\r

  \      else console.log(' '.repeat(indent), k + ':', o[k]);\r

  \    }\r

  \  }\r

  }"
log_objectX: function log_objectX(o, props, msg) { console.log('___',
  getFunctionsNameThatCalledThisFunction(), msg); let keys = get_keys(o);
  keys.sort(); for (const k of props.split(' ')) { console.log('', k + ':',
  o[k]); } }
logAddLine: function logAddLine(div) { LOGDIVS.push(div); }
logClearAll: function logClearAll() { LOG = {}; clearElement('logDiv'); LOGDIVS = []; }
logClientReceive: "function logClientReceive(type, data) {\r

  \  MessageCounter++;\r

  \  if (VerboseSocket) console.log('#' + MessageCounter, 'receive', type,
  data)\r

  }"
logClientSend: "function logClientSend(type, data) {\r

  \  MessageCounter++;\r

  \  if (VerboseSocket) console.log('#' + MessageCounter, 'send', type,
  data)\r

  }"
logFormattedData: "function logFormattedData(data, n, msgAfter = '') {\r

  \  let s = makeStrings(data, ['game', 'actions', 'waiting_for',
  'created']);\r

  }"
logGetDiv: "function logGetDiv(plid) {\r

  \  let d = LOG[plid];\r

  \  if (!d) {\r

  \    let idParent = 'logDiv';\r

  \    let id = idParent + '_' + plid;\r

  \    d = mDiv(mBy(idParent));\r

  \    mStyle(d, { position: 'relative', left: 0, top: 0, width: 100, height:
  100 }, '%');\r

  \    d.id = id;\r

  \    LOG[plid] = d;\r

  \  }\r

  \  d.style.maxHeight = getBounds('areaTable').height + 'px';\r

  \  return d;\r

  }"
logicCheck: "function logicCheck(pic) {\r\n}"
logicFilter: "function logicFilter(allPics, exceptProps) {\r

  \  let props = { label: { vals: getDistinctVals(allPics, 'label'), friendly:
  '' } };\r

  \  if (G.numColors > 1) props.colorKey = { vals: getDistinctVals(allPics,
  'colorKey'), friendly: 'color' };\r

  \  if (G.numRepeat > 1) props.iRepeat = { vals: getDistinctVals(allPics,
  'iRepeat'), friendly: 'number' };\r

  \  if (sameList(Object.keys(props), exceptProps)) return ['no props left',
  'no', [], 'unknown'];\r

  \  let lstSpoken, lstWritten, piclist = [];\r

  \  let prop = chooseRandom(arrWithout(Object.keys(props), exceptProps));\r

  \  let val = chooseRandom(props[prop].vals);\r

  \  lstSpoken = [];\r

  \  if (prop == 'label') {\r

  \    lstSpoken.push(val);\r

  \    lstWritten = [labelPrepper(val)];\r

  \    piclist = allPics.filter(x => x.label == val);\r

  \  } else if (prop == 'colorKey') {\r

  \    lstSpoken = lstSpoken.concat(['with', props[prop].friendly,
  ColorDict[val][G.language]]);\r

  \    lstWritten = ['with', props[prop].friendly, colorPrepper(val)];\r

  \    piclist = allPics.filter(x => x[prop] == val);\r

  \  } else if (prop == 'iRepeat') {\r

  \    let op = (G.level > 2 && G.numRepeat > 2 && val > 1 && val <
  G.numRepeat) ? chooseRandom(['leq', 'geq', 'eq']) : 'eq';\r

  \    let oop = OPS[op];\r

  \    lstSpoken = lstSpoken.concat(['with', props[prop].friendly, oop.sp,
  val]);\r

  \    lstWritten = ['with', props[prop].friendly, oop.wr, val];\r

  \    piclist = allPics.filter(x => oop.f(x[prop], val));\r

  \  }\r

  \  if (nundef(lstWritten)) lstWritten = lstSpoken;\r

  \  let s = lstSpoken.join(' ');\r

  \  let w = lstWritten.join(' ');\r

  \  if (G.language == 'D') {\r

  \    s = s.split(' ').map(x => translateToGerman(x)).join(' ');\r

  \    w = w.split(' ').map(x => translateToGerman(x)).join(' ');\r

  \  }\r

  \  return [s, w, piclist, prop];\r

  }"
logicMulti: "function logicMulti(n) {\r

  \  let allPics = Pictures;\r

  \  let maxPics = 4;\r

  \  let [s1, w1, pics1, prop1] = logicFilter(allPics, []);\r

  \  let [s, w, pics, prop] = [s1, w1, pics1, prop1];\r

  \  let maxloop = 3; cntloop = 0; let propsUsed = [prop1];\r

  \  while (pics.length > maxPics && cntloop < maxloop) {\r

  \    cntloop += 1;\r

  \    let opp = arrMinus(allPics, pics);\r

  \    if (opp.length <= maxPics) {\r

  \      let lst = ['eliminate', 'all', 'EXCEPT'];\r

  \      if (G.language == 'D') lst = lst.map(x => DD[x]);\r

  \      let prefix = lst.join(' ');\r

  \      s = prefix + ' ' + s;\r

  \      w = prefix + ' ' + w;\r

  \      return [s, w, opp];\r

  \    }\r

  \    [s1, w1, pics1, prop1] = logicFilter(pics, propsUsed);\r

  \    if (isEmpty(pics1)) return [s, w, pics];\r

  \    else {\r

  \      pics = pics1;\r

  \      prop = prop1;\r

  \      if (prop1 == 'label') {\r

  \        s = s1 + ' ' + s;\r

  \        w = w1 + ' ' + w;\r

  \      } else if (arrLast(propsUsed) == 'label') {\r

  \        let conn = G.language == 'E' ? ' with ' : ' mit ';\r

  \        s1 = s1.substring(s1.indexOf(' '));\r

  \        w1 = w1.substring(w1.indexOf(' '));\r

  \        s = s + conn + s1; w = w + conn + w1;\r

  \      } else {\r

  \        let conn = G.language == 'E' ? ' and ' : ' und ';\r

  \        s1 = s1.substring(s1.indexOf(' '));\r

  \        w1 = w1.substring(w1.indexOf(' '));\r

  \        s = s + conn + s1; w = w + conn + w1;\r

  \      }\r

  \      propsUsed.push(prop1);\r

  \    }\r

  \  }\r

  \  let lst1 = ['click', 'all'];\r

  \  if (G.language == 'D') lst1 = lst1.map(x => DD[x]);\r

  \  let prefix = lst1.join(' ');\r

  \  s = prefix + ' ' + s;\r

  \  w = prefix + ' ' + w;\r

  \  return [s, w, pics];\r

  }"
logicReset: "function logicReset() {\r\n}"
login: "function login(username) {\r

  \  sendRoute('/login/' + username, d => {\r

  \    if (d != username) {\r

  \      alert('ERROR: ' + d);\r

  \    } else {\r

  \      USERNAME = clientData.name = d;\r

  \      document.title = 'RSG: ' + USERNAME;\r

  \      loggedIn = true;\r

  \      openSocket();\r

  \      lobbyView();\r

  \    }\r

  \  });\r

  }"
loginView: "function loginView() {\r

  \  view = 'login'; hideLobby(); showLogin(); hideGame(); clearChat();
  clearMessages();\r

  \  removeAllGlobalHandlers();\r

  \  addLoginViewHandlers();\r

  }"
logout: "function logout() {\r

  \  closeSocket();\r

  \  sendRoute('/logout/' + clientData.name, d => {\r

  \    clientData.name = null;\r

  \    loggedIn = false;\r

  \    loginView();\r

  \  });\r

  }"
logRenew: function logRenew() { for (const d of LOGDIVS) { makeSimpleString(d); } }
logTable: "function logTable() { console.log('T: game', T.game, '\\nplayers',
  T.players.map(x => x.id), '\\nstate', T.uiState) }"
logUpdateVisibility: function logUpdateVisibility(plid, players) { for (const pl
  in players) { if (pl != plid) hideLog(pl); else showLog(pl); } }
logVals: "function logVals(title, o) {\r

  \  let s = title + ':  ';\r

  \  for (const k in o) { s += k + ':' + o[k] + ' '; }\r

  \  console.log(s);\r

  }"
long_polling_shield_on: "function long_polling_shield_on() {\r

  \  DA.long_polling = { type: 'table_status', data: Session.cur_tid, tid:
  Session.cur_tid, table: Session.cur_table, polling: true, waiting_for_prop:
  'status', waiting_for_val: 'started' };\r

  \  polling_shield_on('waiting for host to start game...');\r

  \  TOMain = setTimeout(() => {\r

  \    check_poll_orig();\r

  \  }, 5000);\r

  }"
longest_array: "function longest_array(arr) {\r

  \  let max = 0;\r

  \  for (const a of arr) {\r

  \    if (a.length > max) max = a.length;\r

  \  }\r

  \  return max;\r

  }"
lookup: "function lookup(dict, keys) {\r

  \  let d = dict;\r

  \  let ilast = keys.length - 1;\r

  \  let i = 0;\r

  \  for (const k of keys) {\r

  \    if (k === undefined) break;\r

  \    let e = d[k];\r

  \    if (e === undefined || e === null) return null;\r

  \    d = d[k];\r

  \    if (i == ilast) return d;\r

  \    i += 1;\r

  \  }\r

  \  return d;\r

  }"
lookupAddIfToList: "function lookupAddIfToList(dict, keys, val) {\r

  \  let lst = lookup(dict, keys);\r

  \  if (isList(lst) && lst.includes(val)) return;\r

  \  lookupAddToList(dict, keys, val);\r

  }"
lookupAddToList: "function lookupAddToList(dict, keys, val) {\r

  \  let d = dict;\r

  \  let ilast = keys.length - 1;\r

  \  let i = 0;\r

  \  for (const k of keys) {\r

  \    if (i == ilast) {\r

  \      if (nundef(k)) {\r

  \        console.assert(false, 'lookupAddToList: last key indefined!' +
  keys.join(' '));\r

  \        return null;\r

  \      } else if (isList(d[k])) {\r

  \        d[k].push(val);\r

  \      } else {\r

  \        d[k] = [val];\r

  \      }\r

  \      return d[k];\r

  \    }\r

  \    if (nundef(k)) continue;\r

  \    if (d[k] === undefined) d[k] = {};\r

  \    d = d[k];\r

  \    i += 1;\r

  \  }\r

  \  return d;\r

  }"
lookupAsIdList: "function lookupAsIdList(dict, keys) {\r

  \  let d = dict;\r

  \  let last = keys[keys.length - 1];\r

  \  for (const k of keys) {\r

  \    if (k in d) {\r

  \      d = d[k];\r

  \      if (k == last) return dict2list(d, 'id');\r

  \    } else return null;\r

  \  }\r

  }"
lookupDef: function lookupDef(o, proplist, def) { return lookup(o, proplist) || def; }
lookupRemoveFromList: "function lookupRemoveFromList(dict, keys, val,
  deleteIfEmpty = false) {\r

  \  let d = dict;\r

  \  let ilast = keys.length - 1;\r

  \  let i = 0;\r

  \  for (const k of keys) {\r

  \    if (i == ilast) {\r

  \      if (nundef(k)) {\r

  \        alert('lookupRemoveFromList: last key indefined!' + keys.join('
  '));\r

  \        return null;\r

  \      } else if (isList(d[k])) {\r

  \        removeInPlace(d[k], val);\r

  \        if (deleteIfEmpty && isEmpty(d[k])) delete d[k];\r

  \      } else {\r

  \        if (d[k] === undefined) {\r

  \          error('lookupRemoveFromList not a list ' + d[k]);\r

  \          return null;\r

  \        }\r

  \      }\r

  \      return d[k];\r

  \    }\r

  \    if (nundef(k)) continue;\r

  \    if (d[k] === undefined) {\r

  \      error('lookupRemoveFromList key not found ' + k);\r

  \      return null;\r

  \    }\r

  \    d = d[k];\r

  \    i += 1;\r

  \  }\r

  \  return d;\r

  }"
lookupSet: "function lookupSet(dict, keys, val) {\r

  \  let d = dict;\r

  \  let ilast = keys.length - 1;\r

  \  let i = 0;\r

  \  for (const k of keys) {\r

  \    if (nundef(k)) continue;\r

  \    if (d[k] === undefined) d[k] = (i == ilast ? val : {});\r

  \    if (nundef(d[k])) d[k] = (i == ilast ? val : {});\r

  \    d = d[k];\r

  \    if (i == ilast) return d;\r

  \    i += 1;\r

  \  }\r

  \  return d;\r

  }"
lookupSetOverride: "function lookupSetOverride(dict, keys, val) {\r

  \  let d = dict;\r

  \  let ilast = keys.length - 1;\r

  \  let i = 0;\r

  \  for (const k of keys) {\r

  \    if (i == ilast) {\r

  \      if (nundef(k)) {\r

  \        return null;\r

  \      } else {\r

  \        d[k] = val;\r

  \      }\r

  \      return d[k];\r

  \    }\r

  \    if (nundef(k)) continue;\r

  \    if (nundef(d[k])) d[k] = {};\r

  \    d = d[k];\r

  \    i += 1;\r

  \  }\r

  \  return d;\r

  }"
loop: function loop(n) { return range(1, n); }
lPicto: function lPicto() { }
lsys_add: "function lsys_add() {\r

  \  C.items = {};\r

  \  let root = C.root; root.gen++;\r

  \  let [stack, gen, b, sentence, x, y, angle, len, id] = [[], root.gen,
  root, root.sentence, root.p2.x, root.p2.y, root.angle, root.len, root.id++];\r

  \  for (let i = 0; i < gen; i++) { len *= root.dlen; sentence =
  generate(sentence); }\r

  \  let step = 0;\r

  \  for (var i = 0; i < sentence.length; i++) {\r

  \    var ch = sentence[i];\r

  \    if ('ABCFVWXYZ'.includes(ch)) {\r

  \      b = create_branch(b, angle, len, b.color); lookupAddToList(C.items,
  ['branch'], b); b.id = id++;\r

  \    } else if (ch == '+') {\r

  \      angle -= root.dangle;\r

  \    } else if (ch == '-') {\r

  \      angle += root.dangle;\r

  \    } else if (ch == '[') {\r

  \      stack.push({ x: b.p2.x, y: b.p2.y, angle: angle, b: b });\r

  \    } else if (ch == ']') {\r

  \      let o = stack.pop();\r

  \      angle = o.angle; x = o.x; y = o.y; b = o.b;\r

  \    }\r

  \  }\r

  \  C.changed = true;\r

  \  if (root.gen < root.depth) TO.iv1 = setTimeout(lsys_add, 100); else
  TO.iv1 = setTimeout(() => G_init('lsys'), 5000);\r

  }"
lsys_init: "function lsys_init(offx = 0, offy = 0, options = {}) {\r

  \  let n = NATURE.lsystems.length;\r

  \  let i = DA.isystem = (DA.isystem + 1) % n;\r

  \  let system = NATURE.lsystems[i];\r

  \  let maxdepth = calc_maxdepth(12000, system.rules);\r

  \  let root = {\r

  \    axiom: system.axiom, //'F',\r

  \    sentence: system.axiom,\r

  \    rules: system.rules,\r

  \    t: 'root',\r

  \    p2: { x: CV.width / valf(system.xstart, 2), y: CV.height },\r

  \    angle: toRadian(90),\r

  \    len: valf(system.len, 100),\r

  \    age: 0,\r

  \    gen: 0,\r

  \    id: 0,\r

  \    dangle: toRadian(valf(system.angle, 25)),\r

  \    dlen: valf(system.dlen, .5),\r

  \    thickness: valf(options.thick, 1),\r

  \    dthickness: 1,\r

  \    color: rColor(70), //'seagreen',\r

  \    depth: Math.min(valf(system.depth, NATURE.depth), maxdepth),\r

  \    animated: false,\r

  \    jitter: false,\r

  \    done: true,\r

  \  };\r

  \  return root;\r

  }"
ltest_aristo_simple: "function ltest_aristo_simple() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'gul', 'amanda', 'lauren'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { commission: 'no' });\r

  }"
ltest0: "function ltest0() {\r

  \  let centers = cCircle({ x: 300, y: 300 }, 400, 6);\r

  \  for (const c of centers) {\r

  \    let item = mPic('bee', dMain, { fz: 40, bg: 'skyblue', rounding: '50%',
  padding: 10 });\r

  \    mPos(iDiv(item), c.x, c.y);\r

  \  }\r

  }"
ltest0_card: function ltest0_card() { let c = ari_get_card('QSn');
  mAppend(dTable, iDiv(c)); }
ltest1_card: "function ltest1_card() { let c = cLandscape(dTable, { margin: 12 }); }"
ltest1_hex: "function ltest1_hex(chex = { x: 200, y: 200 }) {\r

  \  let centers = cCircle(chex, 400, 6);\r

  \  for (const c of centers) {\r

  \    let item = mPic('bee', dMain, { fz: 40, bg: 'skyblue', rounding: '50%',
  padding: 10 });\r

  \    mPos(iDiv(item), c.x, c.y);\r

  \  }\r

  \  let item = mPic('bee', dMain, { fz: 40, bg: 'skyblue', rounding: '50%',
  padding: 10 });\r

  \  mPos(iDiv(item), chex.x, chex.y);\r

  }"
ltest10_ferro_sim: "function ltest10_ferro_sim() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_one_player_0_coins], iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [0] };\r

  \  DA.auto_moves = [['random']];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'felix',
  playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat'
  });\r

  }"
ltest100_auction: "function ltest100_auction() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [set_auction_phase],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat', commission: 'no', rumors: 'no' });\r

  }"
ltest101_commission: "function ltest101_commission() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [set_queen_phase,
  give_player_multiple_commission_cards], iter: 0, maxiter: 200, running: false,
  step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat', commission: 'yes', rumors: 'no' });\r

  }"
ltest102_luxurycard: "function ltest102_luxurycard() {\r

  \  let dTable = mBy('dTable'); clearElement(dTable); mStyle(dTable, { hmin:
  400 });\r

  \  drawcard('AHl', dTable, 300);\r

  \  drawcard('AHl', dTable, 200);\r

  \  drawcard('AHl', dTable, 100);\r

  }"
ltest103_aristo_journey: "function ltest103_aristo_journey() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_player_luxury_cards], iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat', commission: 'no', rumors: 'no' });\r

  }"
ltest105_aristo_church: "function ltest105_aristo_church() {\r

  \  TESTING = true; DA.testing = true;\r

  \  DA.test = { mods: [give_players_stalls, make_church], iter: 0, maxiter:
  200, running: false, step: true, suiteRunning: false, number: 0, list: [0]
  };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest106_aristo_build: "function ltest106_aristo_build() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [set_king_phase,
  give_player_only_4_cards], iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest107_aristo_build: "function ltest107_aristo_build() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [set_king_phase,
  give_players_schweine_variety], iter: 0, maxiter: 200, running: false, step:
  true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })));\r

  }"
ltest107_aristo_inspect_schwein: "function ltest107_aristo_inspect_schwein() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_schwein, set_queen_phase], iter: 0, maxiter: 200, running:
  false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest108_animate_coin: "function ltest108_animate_coin() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [set_king_phase,
  give_players_schweine_variety], iter: 0, maxiter: 200, running: false, step:
  true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  DA.landing = () => {\r

  \    d = UI.player_stat_items[Z.uplayer].dCoin;\r

  \    anim1(d);\r

  \  };\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest108_aristo_inspect_schwein: "function ltest108_aristo_inspect_schwein() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_schweine_variety, set_queen_phase], iter: 0, maxiter: 200,
  running: false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest109_ferro: "function ltest109_ferro() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_player_achieve_5], iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = ['mimi', 'felix', 'gul'];\r

  \  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest109_spotit: "function ltest109_spotit() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('spotit', playernames.map(x => ({ name: x, playmode: 'human'
  })), {});\r

  }"
ltest11_ferro_discard: "function ltest11_ferro_discard() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { console.log('discard:', Z.fen.deck_discard); }\r

  \  DA.auto_moves = [['random'], [1], [1], ['random']];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest110_auction: "function ltest110_auction() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [set_auction_phase],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat', commission: 'no', rumors: 'no' });\r

  }"
ltest110_fritz: "function ltest110_fritz() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('fritz', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest111_start: "function ltest111_start() {\r

  \  show_home_logo();\r

  \  if (nundef(U)) { show_users(); return; } show_username();\r

  \  if (DA.TEST0) show('dTestButtons');\r

  }"
ltest12_ferro_buy: "function ltest12_ferro_buy() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { console.log('discard:', Z.fen.deck_discard); }\r

  \  DA.auto_moves = [['random']];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest2: "function ltest2() {\r

  \  let boardInfo = iHexboard(2, 3, 35);\r

  \  mFlex(dMain);\r

  \  console.log('HALLO');\r

  \  let dParent = mPanel(dMain);\r

  \  let board = mItem(null, { div: dParent }, boardInfo);\r

  \  console.log('board', board, '\\nboard panel', iDiv(board));\r

  \  console.log('------------------')\r

  \  let sym = chooseRandom(getAnimals());\r

  \  let items = [];\r

  \  for (const info of boardInfo.items) {\r

  \    let d = mDiv(dParent, { bg: 'random', w: board.dx / 2, h: board.dy * 2
  });\r

  \    mPos(d, info.pt.y, info.pt.x);\r

  \    let item = mItem(null, { div: d }, info);\r

  \    items.push(item);\r

  \  }\r

  }"
ltest2_card: "function ltest2_card() {\r

  \  let c = cPortrait(dTable, { margin: 12, border: 'solid 4px lime', bg:
  'lightgreen' });\r

  \  let d = iDiv(c);\r

  \  console.log('d', d)\r

  \  let ds = mSym('red apple', d, { sz: 30 }, 'tl');\r

  \  ds = mSymText(2, d, { sz: 25, rounding: '50%', bg: 'gold', margin: 3 },
  'tr');\r

  \  ds = mText('APPLES', d, { family: 'Algerian', w: '100%', fz: 12, align:
  'center', position: 'absolute', bottom: 0 });\r

  \  ds = mSymText(2, d, { sz: 25, rounding: '50%', bg: 'crimson', margin: 3
  }, 'br');\r

  \  ds = mSym('green apple', d, { sz: 70 }, 'cc');\r

  }"
ltest2_hextest: "function ltest2_hextest() {\r

  \  let [centers, wCont, hCont] = hexCenters(5, 4, 100, 100);\r

  \  console.log('centers', centers);\r

  \  let dCont = mDiv(dMain, { position: 'relative', w: wCont, h: hCont });\r

  \  for (const pt of centers) {\r

  \    let d = drawShape('hex', dCont);\r

  \    mCenterAt(d, pt.x, pt.y);\r

  \  }\r

  \  return dCont;\r

  }"
ltest2_iHexboard: "function ltest2_iHexboard() {\r

  \  let boardInfo = iHexboard(2, 3, 35);\r

  \  mFlex(dMain);\r

  \  console.log('HALLO');\r

  \  let dParent = mPanel(dMain);\r

  \  let board = mItem(null, { div: dParent }, boardInfo);\r

  \  console.log('board', board, '\\nboard panel', iDiv(board));\r

  \  console.log('------------------')\r

  \  let sym = chooseRandom(getAnimals());\r

  \  let items = [];\r

  \  for (const info of boardInfo.items) {\r

  \    let d = mDiv(dParent, { bg: 'random', w: board.dx / 2, h: board.dy * 2
  });\r

  \    mPos(d, info.pt.y, info.pt.x);\r

  \    let item = mItem(null, { div: d }, info);\r

  \    items.push(item);\r

  \  }\r

  }"
ltest20_spotit_adaptive: "function ltest20_spotit_adaptive() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { console.log('discard:', Z.fen); }\r

  \  DA.auto_moves = [];\r

  \  startgame('spotit', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest21_spotit: "function ltest21_spotit() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { console.log('discard:', Z.fen); }\r

  \  DA.auto_moves = [];\r

  \  startgame('spotit', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat', adaptive: false });\r

  }"
ltest22_ferro_action1: "function ltest22_ferro_action1() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest23_aristo_building_downgrade: "function ltest23_aristo_building_downgrade()
  {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_buildings], iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest24_ferro_jolly: "function ltest24_ferro_jolly() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_other_jolly_group], iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest25_ferro_jolly: "function ltest25_ferro_jolly() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_each_jolly_group], iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest26_ferro_endgame: "function ltest26_ferro_endgame() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [each_hand_of_one],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest27_ferro_commands: "function ltest27_ferro_commands() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [['random']];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest28_ferro_jolly_complex: "function ltest28_ferro_jolly_complex() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_other_jolly_group], iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest29_ferro_play: "function ltest29_ferro_play() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_player_hand_group, o => o.round = 2], iter: 0, maxiter: 200, running:
  false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [[0, 1, 2], [1]];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest3_card: "function ltest3_card() {\r

  \  let di = SHERIFF.cards;\r

  \  for (const name in di) {\r

  \    let c = sheriff_card(name);\r

  \    mAppend(dTable, iDiv(c));\r

  \  }\r

  }"
ltest3_catan: "function ltest3_catan() {\r

  \  let [rows, cols, wCell, hCell, wCorner, hCorner, cover] = [5, 5, 100,
  100, 25, 25, true];\r

  \  let [centers, wCont, hCont] = cover ? hexCenters(rows, cols, wCell,
  hCell) : hex1Centers(rows, cols, wCell, hCell);\r

  \  let dBoard = mDiv(dMain, { position: 'relative', w: wCont, h: hCont,
  margin: 25 });\r

  \  for (const pt of centers) {\r

  \    let d = drawShape('hex', dBoard, { w: wCell - 4, h: hCell - 4 });\r

  \    mClass(d, 'field');\r

  \    mCenterAt(d, pt.x, pt.y);\r

  \  }\r

  \  let vertices = getCornerVertices(centers, wCell, hCell);\r

  \  for (const pt of vertices) {\r

  \    let d = mDiv(dBoard, { rounding: '50%', w: wCorner, h: hCorner });\r

  \    mClass(d, 'corner');\r

  \    mCenterAt(d, pt.x, pt.y);\r

  \  }\r

  \  mButton('mod colors', modifyColor, dMain);\r

  \  let items = [];\r

  \  centers.map(x => items.push({ x: x.x, y: x.y, type: 'field' }));\r

  \  vertices.map(x => items.push({ x: x.x, y: x.y, type: 'corner' }));\r

  \  let byrc = addRowsCols(items);\r

  \  console.log(byrc);\r

  \  console.log(items);\r

  }"
ltest30_ferro_jolly_jolly: "function ltest30_ferro_jolly_jolly() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_each_jolly_group, give_player_jolly], iter: 0, maxiter: 200, running:
  false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest31_ferro_rollback: "function ltest31_ferro_rollback() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [small_hands,
  give_other_jolly_group, o => o.round = 1], iter: 0, maxiter: 200, running:
  false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest32_select_error: "function ltest32_select_error() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [small_hands,
  give_other_jolly_group, o => o.round = 4], iter: 0, maxiter: 200, running:
  false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => ferro_transaction_error(['44', '5', '55', '7R'],
  ['jolly', 'anlegen'], 'take_turn_single');\r

  \  DA.auto_moves = [];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest33_ferro_sequence: "function ltest33_ferro_sequence() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_player_sequence, give_other_jolly_group, o => o.round = 1], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [[2, 3, 6, 9, 10, 11, 12]];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest34_ferro_anlegen: "function ltest34_ferro_anlegen() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_other_jolly_group, o => o.round = 1], iter: 0, maxiter: 200, running:
  false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [[0, 14]];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest35_ferro_sequence_anlegen: "function ltest35_ferro_sequence_anlegen() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_other_jolly_sequence, o => o.round = 1], iter: 0, maxiter: 200, running:
  false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest36_ferro_two_sequence: "function ltest36_ferro_two_sequence() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_player_jolly_sequence, give_player_sequence, o => o.round = 1], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [[0, 1, 2, 3, 4, 5, 6, 7, 8]];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest37_ferro_4_players: "function ltest37_ferro_4_players() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name:
  'gul', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest38_ferro_end_of_round: "function ltest38_ferro_end_of_round() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_group,
  give_player_only_one_card], iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'nasi',
  playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name: 'gul',
  playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest39_ferro_7R: "function ltest39_ferro_7R() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_7R],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [[0, 1, 2, 3, 4, 5, 6, 7]];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name:
  'gul', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest4_catan_1hex: "function ltest4_catan_1hex() {\r

  \  let [rows, cols, wCell, hCell, wCorner, hCorner, cover] = [1, 1, 400,
  400, 100, 50 * Math.sqrt(3), true];\r

  \  let [centers, wCont, hCont] = cover ? hexCenters(rows, cols, wCell,
  hCell) : hex1Centers(rows, cols, wCell, hCell);\r

  \  let dBoard = mDiv(dMain, { position: 'relative', w: wCont, h: hCont,
  margin: 100 });\r

  \  for (const pt of centers) {\r

  \    let d = drawShape('hex', dBoard, { w: wCell - 4, h: hCell - 4 });\r

  \    mClass(d, 'field');\r

  \    mCenterAt(d, pt.x, pt.y);\r

  \  }\r

  \  let vertices = getCornerVertices(centers, wCell, hCell);\r

  \  for (const pt of vertices) {\r

  \    let d = drawShape('hexF', dBoard, { w: wCorner, h: hCorner });\r

  \    mClass(d, 'corner');\r

  \    mCenterAt(d, pt.x, pt.y);\r

  \  }\r

  \  setCssVar('--color1', YELLOW);\r

  \  setCSSVariable('--color2', GREEN);\r

  \  mButton('mod colors', modifyColor, dMain);\r

  \  let items = [];\r

  \  centers.map(x => items.push({ x: x.x, y: x.y, type: 'field' }));\r

  \  vertices.map(x => items.push({ x: x.x, y: x.y, type: 'corner' }));\r

  \  let byrc = addRowsCols(items);\r

  \  addIds(items);\r

  \  neighborhood(items, byrc);\r

  \  console.log('items', items);\r

  \  let di = {};\r

  \  let edges = [];\r

  \  for (const item of items) {\r

  \    if (item.type != 'field') continue;\r

  \    for (let i = 0; i < 6; i++) {\r

  \      let v1 = item.nodes[i];\r

  \      let v2 = item.nodes[(i + 1) % 6];\r

  \      if (lookup(di, [v1, v2]) || lookup(di, [v2, v1])) continue;\r

  \      let e = makeEdge(dBoard, Items[v1], Items[v2], hCorner / 2);\r

  \      edges.push(e);\r

  \      lookupSet(di, [v1, v2], e);\r

  \    }\r

  \  }\r

  }"
ltest4_sheriff: "function ltest4_sheriff() {\r

  \  let di = SHERIFF.cards;\r

  \  for (const name in di) { let c = sheriff_card(name); mAppend(dTable,
  iDiv(c)); }\r

  }"
ltest40_ferro_7R_anlegen: "function ltest40_ferro_7R_anlegen() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_7R],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [[0, 1, 2, 3, 4, 5, 6, 7]];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name:
  'gul', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest41_frenzy_DD: "function ltest41_frenzy_DD() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest42_aristo: "function ltest42_aristo() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest43_fritz_discard_pile: "function ltest43_fritz_discard_pile() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [make_deck_discard],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest44_ferro_7R: "function ltest44_ferro_7R() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_7R],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name:
  'gul', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest45_fritz: "function ltest45_fritz() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest46_fritz_endgame: "function ltest46_fritz_endgame() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = {\r

  \    mods: [o => { let pl = o.fen.players[o.fen.turn[0]].hand = ['4Hn',
  '2Cn', '3Cn']; }], iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [0]\r

  \  };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest47_aristo: "function ltest47_aristo() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'gul', 'amanda', 'lauren'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest48_aristo_church: "function ltest48_aristo_church() {\r

  \  TESTING = true; DA.testing = true; DA.test = {\r

  \    mods: [give_players_stalls], iter: 0, maxiter: 200, running: false,
  step: true, suiteRunning: false, number: 0, list: [0]\r

  \  };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'gul', 'amanda', 'lauren'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest49_aristo_church: "function ltest49_aristo_church() {\r

  \  TESTING = true; DA.testing = true; DA.test = {\r

  \    mods: [give_players_stalls, make_church, set_player_tithes], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0]\r

  \  };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest5_catan: "function ltest5_catan() {\r

  \  let [rows, cols, wCell, hCell, wCorner, hCorner, cover] = [10, 10, 80,
  80, 20, 10 * Math.sqrt(3), true];\r

  \  let [centers, wCont, hCont] = cover ? hexCenters(rows, cols, wCell,
  hCell) : hex1Centers(rows, cols, wCell, hCell);\r

  \  let dBoard = mDiv(dMain, { position: 'relative', w: wCont, h: hCont,
  margin: 100 });\r

  \  for (const pt of centers) {\r

  \    let d = drawShape('hex', dBoard, { w: wCell - 4, h: hCell - 4 });\r

  \    mClass(d, 'field');\r

  \    mCenterAt(d, pt.x, pt.y);\r

  \  }\r

  \  let vertices = getCornerVertices(centers, wCell, hCell);\r

  \  for (const pt of vertices) {\r

  \    let d = drawShape('hexF', dBoard, { w: wCorner, h: hCorner });\r

  \    mClass(d, 'corner');\r

  \    mCenterAt(d, pt.x, pt.y);\r

  \  }\r

  \  let items = [];\r

  \  centers.map(x => items.push({ x: x.x, y: x.y, type: 'field' }));\r

  \  vertices.map(x => items.push({ x: x.x, y: x.y, type: 'corner' }));\r

  \  let byrc = addRowsCols(items);\r

  \  addIds(items);\r

  \  neighborhood(items, byrc);\r

  \  console.log('items', items);\r

  \  let di = {};\r

  \  let edges = [];\r

  \  for (const item of items) {\r

  \    if (item.type != 'field') continue;\r

  \    for (let i = 0; i < 6; i++) {\r

  \      let v1 = item.nodes[i];\r

  \      let v2 = item.nodes[(i + 1) % 6];\r

  \      if (lookup(di, [v1, v2]) || lookup(di, [v2, v1])) continue;\r

  \      let e = makeEdge(dBoard, Items[v1], Items[v2], hCorner / 2, 10);\r

  \      edges.push(e);\r

  \      lookupSet(di, [v1, v2], e);\r

  \    }\r

  \  }\r

  }"
ltest5_jokerhtml: "function ltest5_jokerhtml() {\r

  \  let html = `\r

  \    <div style=\"position: absolute; top: 0px; left: 0px; width: 200px;
  height: 300px; background: blue\">\r

  \      HALLLLLLLLLLLLLLLLLLLLOOOOOOOOOOOOOOOOOOO\r

  \      <!-- joker svg orig -->\r

  \      <svg\r

  \        xmlns=\"http://www.w3.org/2000/svg\"\r

  \        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r

  \        class=\"card\"\r

  \        face=\"0J\"\r

  \        height=\"100%\"\r

  \        preserveAspectRatio=\"none\"\r

  \        viewBox=\"-120 -168 240 336\"\r

  \        width=\"100%\"\r

  \      >\r

  \        <symbol id=\"J11\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \          <path fill=\"#FC4\" d=\"M1095,1000A445,445 0 0 1 650,1445 445,445
  0 0 1 205,1000 445,445 0 0 1 650,555 445,445 0 0 1 1095,1000Z\"></path>\r

  \        </symbol>\r

  \        <symbol id=\"J12\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \          <path\r

  \            fill=\"red\"\r

  \            d=\"M317.05664,1294.416 100,1620l220,-60 40,240 140,-200
  160,200 40,-200 180,180 60,-220 260,60 -236.67969,-304.3027A445,445 0 0 1
  650,1445 445,445 0 0 1
  317.05664,1294.416ZM831.71484,249.10742C687.94378,262.65874 542.4812,256.33752
  420,520 369.08062,331.38331 278.61481,370.61289 187.77148,412.01367a75,75 0 0
  1 2.52344,19.12695 75,75 0 0 1 -16.78515,47.19532c66.827,55.25537
  117.57478,127.8247 155.77539,213.90429A445,445 0 0 1 650,555 445,445 0 0 1
  924.33984,650.26562c42.39917,-50.4556 91.60026,-93.34711
  167.51176,-106.5332a75,75 0 0 1 -0.6524,-9.14258 75,75 0 0 1
  14.6172,-44.3457C1026.3517,437.47479 931.12146,446.83238 840,440
  761.98041,388.07638 804.10248,338.17898 853.51758,288.4043a75,75 0 0 1
  -21.80274,-39.29688z\"\r

  \          ></path>\r

  \        </symbol>\r

  \        <symbol id=\"J13\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \          <path\r

  \            fill=\"#44F\"\r

  \            d=\"M879.65521,937.6026a40,40 0 0 1 -40,40 40,40 0 0 1 -40,-40
  40,40 0 0 1 40,-40 40,40 0 0 1 40,40zm-379.31039,0a40,40 0 0 1 -40,40 40,40 0
  0 1 -40,-40 40,40 0 0 1 40,-40 40,40 0 0 1 40,40z\"\r

  \          ></path>\r

  \        </symbol>\r

  \        <symbol id=\"J14\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \          <path\r

  \            stroke=\"#44F\"\r

  \            stroke-linecap=\"round\"\r

  \            stroke-linejoin=\"round\"\r

  \            stroke-width=\"6\"\r

  \            fill=\"none\"\r

  \            d=\"M317.05664,1294.416 100,1620l220,-60 40,240 140,-200
  160,200 40,-200 180,180 60,-220 260,60
  -236.67969,-304.3027M1241.1987,534.58948a75,75 0 0 1 -75,75 75,75 0 0 1
  -75,-75 75,75 0 0 1 75,-75 75,75 0 0 1 75,75zM980.11493,234.09686a75,75 0 0 1
  -75,75 75,75 0 0 1 -75,-75 75,75 0 0 1 75,-75 75,75 0 0 1
  75,75zM190.29556,431.1412a75,75 0 0 1 -75,75 75,75 0 0 1 -74.999997,-75 75,75
  0 0 1 74.999997,-75 75,75 0 0 1 75,75zM924.3457,650.27148c42.40088,-50.45397
  91.5936,-93.35356 167.5059,-106.53906 -0.4037,-3.03138 -0.6215,-6.0846
  -0.6524,-9.14258 0.03,-15.96068 5.1503,-31.4957
  14.6172,-44.3457C1026.3517,437.47479 931.12146,446.83238 840,440
  761.98041,388.07638 804.10248,338.17898 853.51758,288.4043 842.40414,277.84182
  834.79487,264.12701 831.71484,249.10742 687.94378,262.65874 542.4812,256.33752
  420,520 369.08062,331.38331 278.61481,370.61289
  187.77148,412.01367c1.66108,6.24042 2.50924,12.66925 2.52344,19.12695
  -0.0209,17.1896 -5.94587,33.85038 -16.7832,47.19336 66.82714,55.25532
  117.5686,127.8306 155.76953,213.91016M384.88867,1140c51.89013,98.343
  153.91815,159.9189 265.11133,160 111.19809,-0.076 213.23257,-61.6527
  265.125,-160M1095,1000A445,445 0 0 1 650,1445 445,445 0 0 1 205,1000 445,445 0
  0 1 650,555 445,445 0 0 1 1095,1000Z\"\r

  \          ></path>\r

  \        </symbol>\r

  \        <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"black\"></rect>\r

  \        <text x=\"-110\" y=\"-115\" fill=\"red\" stroke=\"red\"
  style=\"font:bold 60px sans-serif\">*</text>\r

  \        <use width=\"202.8\" height=\"312\" x=\"-101.4\" y=\"-156\"
  xlink:href=\"#J11\"></use>\r

  \        <use width=\"202.8\" height=\"312\" x=\"-101.4\" y=\"-156\"
  xlink:href=\"#J12\"></use>\r

  \        <use width=\"202.8\" height=\"312\" x=\"-101.4\" y=\"-156\"
  xlink:href=\"#J13\"></use>\r

  \        <use width=\"202.8\" height=\"312\" x=\"-101.4\" y=\"-156\"
  xlink:href=\"#J14\"></use>\r

  \      </svg>\r

  \    </div>\r

  \  `;\r

  \  document.body.appendChild(mCreateFrom(html));\r

  }"
ltest50_aristo_church: "function ltest50_aristo_church() {\r

  \  TESTING = true; DA.testing = true; DA.test = {\r

  \    mods: [give_players_stalls, make_church], iter: 0, maxiter: 200,
  running: false, step: true, suiteRunning: false, number: 0, list: [0]\r

  \  };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest51_aristo_church_downgrade: "function ltest51_aristo_church_downgrade() {\r

  \  TESTING = true; DA.testing = true; DA.test = {\r

  \    mods: [give_players_stalls, prep_for_church_downgrade], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0]\r

  \  };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest52_aristo_church_empty: "function ltest52_aristo_church_empty() {\r

  \  TESTING = true; DA.testing = true; DA.test = {\r

  \    mods: [give_players_empty_stalls], iter: 0, maxiter: 200, running:
  false, step: true, suiteRunning: false, number: 0, list: [0]\r

  \  };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest53_fritz_endround: "function ltest53_fritz_endround() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = {\r

  \    mods: [o => { let pl = o.fen.players[o.fen.turn[0]].hand = ['4Hn']; }],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0]\r

  \  };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest54_fritz_outoftime: "function ltest54_fritz_outoftime() {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = {\r

  \    mods: [make_both_run_out_of_time], iter: 0, maxiter: 200, running:
  false, step: true, suiteRunning: false, number: 0, list: [0]\r

  \  };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest55_fritz_set_with_same_suits: "function ltest55_fritz_set_with_same_suits()
  {\r

  \  DA.magnify_on_select = true;\r

  \  TESTING = true; DA.testing = true; DA.test = {\r

  \    mods: [give_player_hand_groups], iter: 0, maxiter: 200, running: false,
  step: true, suiteRunning: false, number: 0, list: [0]\r

  \  };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest56_algo_overlapping_sets: "function ltest56_algo_overlapping_sets() {\r

  \  let cards = ['2Hn', '3Hn', '4Hn', '5Hn', '6Hn', '7Hn', '7Cn', '7Dn',
  '7Hn'].map(x => fritz_get_card(x));\r

  \  let res = is_overlapping_set(cards, 1, 3, false);\r

  \  console.log('res:', res);\r

  \  res = is_overlapping_set(['2Hn', '3Hn', '4Hn', '3Hn', '2Hn'].map(x =>
  fritz_get_card(x)), 1, 3, false);\r

  \  console.log('res:', res);\r

  \  res = is_overlapping_set(['2Hn', '3Hn', '4Hn', '3Hn'].map(x =>
  fritz_get_card(x)), 1, 3, false);\r

  \  console.log('res:', res);\r

  \  res = is_overlapping_set(['2Hn', '3Hn', '3Hn', '3Cn'].map(x =>
  fritz_get_card(x)), 1, 3, false);\r

  \  console.log('res:', res);\r

  \  res = is_overlapping_set(['2Hn', '3Hn', '4Hn', '5Hn', '5Cn', '5Dn',
  '5Cn', '5Hn'].map(x => fritz_get_card(x)), 1, 3, false);\r

  \  console.log('res:', res);\r

  \  res = is_overlapping_set(['2Hn', '3Hn', '4Hn', '5Hn', '5Cn', '5Cn',
  '5Cn', '5Hn', '6Hn', '7Hn'].map(x => fritz_get_card(x)), 1, 3, false);\r

  \  console.log('res:', res);\r

  \  res = is_overlapping_set(['2Hn', '*Hn', '2Cn', '3Hn', '4Cn'].map(x =>
  fritz_get_card(x)), 1, 3, false);\r

  \  console.log('res:', res);\r

  \  res = is_overlapping_set(['2Hn', '*Hn', '2Cn', '3Cn', '4Cn'].map(x =>
  fritz_get_card(x)), 1, 3, false);\r

  \  console.log('res:', res);\r

  \  res = is_overlapping_set(['4Hn', '3Hn', '2Hn', '2Cn', '2Sn', '3Sn',
  '4Sn'].map(x => fritz_get_card(x)), 1, 3, false);\r

  \  console.log('res:', res);\r

  \  res = is_overlapping_set(['4Hn', '3Hn'].map(x => fritz_get_card(x)), 1,
  3, false);\r

  \  console.log('res:', res);\r

  \  res = is_overlapping_set(['4Hn'].map(x => fritz_get_card(x)), 1, 3,
  false);\r

  \  console.log('res:', res);\r

  }"
ltest57_aristo: "function ltest57_aristo() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest58_aristo_building_rumor_harvest: "function
  ltest58_aristo_building_rumor_harvest() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_buildings_plus, add_rumors_to_buildings, give_player_queen],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest59_arrTakeLast: "function ltest59_arrTakeLast() {\r

  \  let x = arrTakeLast([0, 1, 2, 3, 4, 5], 3, 2); console.log('x', x);\r

  \  x = arrTakeLast({ blue: 1, red: 2, green: 3 }, 2, 2); console.log('x',
  x);\r

  \  x = arrTakeLast([0, 1, 2, 3, 4, 5], 10, 0); console.log('x', x);\r

  }"
ltest6_bluff_skin: "function ltest6_bluff_skin() {\r

  \  startgame('bluff', [{ name: 'valerie', playmode: 'human' }, { name:
  'felix', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest60_aristo_inspect_schwein: "function ltest60_aristo_inspect_schwein() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_schwein, add_rumors_to_buildings], iter: 0, maxiter: 200,
  running: false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest61_aristo_inspect_correct: "function ltest61_aristo_inspect_correct() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_buildings, add_rumors_to_buildings], iter: 0, maxiter: 200,
  running: false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest62_aristo_inspect_closed_schwein: "function
  ltest62_aristo_inspect_closed_schwein() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [x =>
  give_players_schwein(x, false), add_rumors_to_buildings], iter: 0, maxiter:
  200, running: false, step: true, suiteRunning: false, number: 0, list: [0]
  };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest63_aristo_blackmail: "function ltest63_aristo_blackmail() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_other_various_buildings, set_queen_phase], iter: 0, maxiter: 200,
  running: false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest64_aristo_blackmailed_building: "function
  ltest64_aristo_blackmailed_building() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_other_blackmailed_building], iter: 0, maxiter: 200, running: false,
  step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest65_stamp: "function ltest65_stamp() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest66_stamp_style: "function ltest66_stamp_style() {\r

  \  dTable = mBy('dTable'); mClass('dTexture', 'wood');
  mCenterFlex(dTable);\r

  \  let hand = ['2Hn', '3Hn', '4Hn', '5Hn', '6Hn', '7Hn', '8Hn', '9Hn',
  'THn', 'JHn', 'QHn', 'KHn', 'AHn'];\r

  \  let ui = ui_type_hand(hand, dTable);\r

  \  mStamp(ui.container, 'blackmail');\r

  }"
ltest67_aristo_blackmail_owner: "function ltest67_aristo_blackmail_owner() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [set_blackmail_owner_stage], iter: 0, maxiter: 200, running: false, step:
  true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest68_aristo_blackmail_owner_defend: "function
  ltest68_aristo_blackmail_owner_defend() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [set_blackmail_owner_stage_defend], iter: 0, maxiter: 200, running: false,
  step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name:
  'amanda', playmode: 'human' }], { mode: 'hotseat' });\r

  }"
ltest69_ferro_is_group: "function ltest69_ferro_is_group() {\r

  \  let j = ['*Hn', '8Dn', '8Hn'];\r

  \  let x = is_group(j);\r

  \  console.log('is_group', x);\r

  \  j = ['8Hn', '*Dn', '8Hn'];\r

  \  x = is_group(j);\r

  \  console.log('is_group', x);\r

  }"
ltest7_ferro_skin: "function ltest7_ferro_skin() {\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'felix',
  playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat'
  });\r

  }"
ltest70_aristo_church: "function ltest70_aristo_church() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_stalls, make_church], iter: 0, maxiter: 200, running: false,
  step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'leo', 'gul'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest71_ferro: "function ltest71_ferro() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'leo', 'gul'];\r

  \  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest72_ferro: "function ltest72_ferro() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'gul', 'amanda', 'lauren', 'valerie',
  'guest', 'nimble', 'sheeba', 'sarah'];\r

  \  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest73_ferro_deck_empty: "function ltest73_ferro_deck_empty() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [make_deck_empty],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'gul', 'amanda', 'lauren', 'valerie',
  'guest', 'nimble', 'sheeba', 'sarah'];\r

  \  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest74_ferro_scroll_history: "function ltest74_ferro_scroll_history() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = ['mimi', 'felix', 'gul', 'amanda', 'lauren', 'valerie',
  'guest', 'nimble', 'sheeba', 'sarah'];\r

  \  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest75_ferro_multi: "function ltest75_ferro_multi() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [['random']];\r

  \  let playernames = ['mimi', 'felix', 'gul', 'amanda', 'lauren', 'valerie',
  'guest', 'nimble', 'sheeba', 'sarah'];\r

  \  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'multi' });\r

  }"
ltest76_aristo_multi: "function ltest76_aristo_multi() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = ['mimi', 'felix', 'gul'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'multi', rumors: 'no', commission: 'no', journey: 'no' });\r

  }"
ltest77_aristo_church: "function ltest77_aristo_church() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_stalls, make_church], iter: 0, maxiter: 200, running: false,
  step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'leo', 'gul'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest78_aristo_church: "function ltest78_aristo_church() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_stalls, make_church], iter: 0, maxiter: 200, running: false,
  step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [['random'], ['random']];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest79_bluff_multi: "function ltest79_bluff_multi() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = ['mimi', 'felix'];\r

  \  startgame('bluff', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'multi' });\r

  }"
ltest8_ferro_sim: "function ltest8_ferro_sim() {\r

  \  TESTING = true; DA.testing = true; DA.test = { iter: 0, maxiter: 200,
  running: false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.auto_moves = [['last']];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'felix',
  playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat'
  });\r

  }"
ltest80_fritz_multi: "function ltest80_fritz_multi() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = ['mimi', 'felix'];\r

  \  startgame('fritz', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'multi' });\r

  }"
ltest81_spotit_multi: "function ltest81_spotit_multi() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = ['mimi', 'felix'];\r

  \  startgame('spotit', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'multi' });\r

  }"
ltest82_ferro: "function ltest82_ferro() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = ['mimi', 'felix', 'gul'];\r

  \  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest83_ferro_multi: "function ltest83_ferro_multi() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = ['mimi', 'felix'];\r

  \  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'multi' });\r

  }"
ltest83_svg: "function ltest83_svg() {\r

  \  dTable = mBy('dTexture'); mCenterFlex(dTable); mStyle(dTable, { hmin: 500
  }); mClass(dTable, 'wood');\r

  \  mStyle(dTable, { gap: 10 });\r

  \  let card;\r

  \  card = cBlankSvg(dTable);\r

  \  console.log('card', card);\r

  \  let g = iG(card);\r

  \  let x = mgSuit('Pik');\r

  \  mgSize(x, 40);\r

  \  mgPos(card, x);\r

  }"
ltest84_svg: "function ltest84_svg() {\r

  \  let dTable = mBy('dTable'); clearElement(dTable); mStyle(dTable, { hmin:
  400 })\r

  \  let card = cBlank(dTable); let d = iDiv(card); let sz = card.h / 6;\r

  \  let i = 0;\r

  \  for (let suit of ['H', 'S', 'D', 'C']) {\r

  \    let s1 = mSuit(suit, d, { w: sz, h: sz });\r

  \    mPos(s1, sz * i, 0); i++;\r

  \  }\r

  }"
ltest85_card_short_text: "function ltest85_card_short_text() {\r

  \  let dTable = mBy('dTable'); clearElement(dTable); mStyle(dTable, { hmin:
  400 });\r

  \  let ckey = 'KCn';\r

  \  let sz = 20;\r

  \  let d = mDiv(dTable, {}, null, `hallo das ist ein
  ${mCardText(ckey)}.`);\r

  \  return;\r

  }"
ltest86_ferro: "function ltest86_ferro() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_player_two_ferro_sets, make_long_history], iter: 0, maxiter: 200,
  running: false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = ['mimi', 'felix', 'gul'];\r

  \  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest87_aristo: "function ltest87_aristo() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest88_aristo_market: "function ltest88_aristo_market() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_stalls], iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest89_aristo_journey: "function ltest89_aristo_journey() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'amanda', 'lauren'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat', commission: 'no', rumors: 'no' });\r

  }"
ltest9_ferro_sim: "function ltest9_ferro_sim() {\r

  \  TESTING = true; DA.testing = true; DA.test = { iter: 0, maxiter: 200,
  running: false, step: true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.auto_moves = [['random']];\r

  \  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'felix',
  playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat'
  });\r

  }"
ltest90_bluff: "function ltest90_bluff() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'amanda', 'lauren'];\r

  \  startgame('bluff', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest90_bluff_ueberbiete: "function ltest90_bluff_ueberbiete() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [bluff_start_bid],
  iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false,
  number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'amanda', 'lauren'];\r

  \  startgame('bluff', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest91_bluff_strategy: "function ltest91_bluff_strategy() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = ['mimi', 'lauren', 'felix'];\r

  \  let playmodes = ['human', 'bot', 'bot'];\r

  \  let strategy = ['', 'random', 'clairvoyant'];\r

  \  let i = 0; let players = playernames.map(x => ({ name: x, strategy:
  strategy[i], playmode: playmodes[i++] }));\r

  \  let options = { mode: 'hotseat' };\r

  \  startgame('bluff', players, options);\r

  }"
ltest92_bluff_bots: "function ltest92_bluff_bots() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = ['mimi', 'lauren', 'felix'];\r

  \  let playmodes = ['bot', 'bot', 'bot'];\r

  \  let strategy = ['random', 'perfect', 'clairvoyant'];\r

  \  let i = 0; let players = playernames.map(x => ({ name: x, strategy:
  strategy[i], playmode: playmodes[i++] }));\r

  \  let options = { mode: 'hotseat' };\r

  \  startgame('bluff', players, options);\r

  }"
ltest93_bluff: "function ltest93_bluff() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'amanda', 'lauren'];\r

  \  startgame('bluff', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest94_aristo_journey: "function ltest94_aristo_journey() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_hand_journey], iter: 0, maxiter: 200, running: false, step:
  true, suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat', commission: 'no', rumors: 'no' });\r

  }"
ltest95_aristo_rumor_action: "function ltest95_aristo_rumor_action() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_buildings_plus, set_queen_phase, give_player_king], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'amanda', 'lauren'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat' });\r

  }"
ltest96_aristo_visit: "function ltest96_aristo_visit() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_schwein, set_queen_phase, give_player_queen], iter: 0, maxiter:
  200, running: false, step: true, suiteRunning: false, number: 0, list: [0]
  };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix', 'amanda', 'lauren'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat', commission: 'no', rumors: 'no' });\r

  }"
ltest97_find_sequences: "function ltest97_find_sequences() {\r

  \  let x = follows_in_rank('ACn', '2Cn', 'A23456789TJQK');\r

  \  console.log('follows', x);\r

  \  x = find_sequences(['ACn', '2Cn', '3Hn', '5Hn', '7Hn', '7Sn', '7Cn',
  '7Dn'], 2, 'A23456789TJQK');\r

  \  console.log('follows', x);\r

  }"
ltest98_weired_blatt_aendern: "function ltest98_weired_blatt_aendern() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods:
  [give_players_hand_A2], iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat', commission: 'no', rumors: 'no' });\r

  }"
ltest99_fritz: "function ltest99_fritz() {\r

  \  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0,
  maxiter: 200, running: false, step: true, suiteRunning: false, number: 0,
  list: [0] };\r

  \  DA.test.end = () => { };\r

  \  DA.auto_moves = [];\r

  \  let playernames = [U.name, 'felix'];\r

  \  startgame('fritz', playernames.map(x => ({ name: x, playmode: 'human'
  })), { mode: 'hotseat', commission: 'no', rumors: 'no' });\r

  }"
luminance: "function luminance(r, g, b) {\r

  \  var a = [r, g, b].map(function (v) {\r

  \    v /= 255;\r

  \    return v <= 0.03928\r

  \      ? v / 12.92\r

  \      : Math.pow((v + 0.055) / 1.055, 2.4);\r

  \  });\r

  \  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\r

  }"
luxury_card_deco: "function luxury_card_deco(card) {\r

  \  let d = iDiv(card); mStyle(d, { position: 'relative' });\r

  \  let d1 = mDiv(d, { fg: 'dimgray', fz: 11, family: 'tangerine', position:
  'absolute', left: 0, top: 0, 'writing-mode': 'vertical-rl', transform:
  'scale(-1)', top: '35%' }, null, 'Luxury');\r

  \  let html = `<img height=${18} src=\"../base/assets/icons/deco0.svg\"
  style=\"transform:scaleX(-1);\">`;\r

  \  d1 = mDiv(d, { position: 'absolute', bottom: -2, left: 3, opacity: .25 },
  null, html);\r

  }"
maButton: "function maButton(caption, handler, dParent, styles) {\r

  \  let a = mLink(\"javascript:void(0)\", dParent, {}, null, caption, 'a');\r

  \  a.onclick = handler;\r

  \  if (isdef(styles)) mStyle(a, styles);\r

  \  return a;\r

  }"
mAddBehavior: "function mAddBehavior(ui, beh, params) {\r

  \  switch (beh) {\r

  \    case 'magnifyOnHover': addMagnifyOnHover(ui, ...params); break;\r

  \    case 'selectOnClick': addSelectOnClick(ui, ...params); break;\r

  \  }\r

  }"
mAddContent: function mAddContent(d, content, styles, opt) { return
  mAddContentAndMeasure(d, content, styles, opt, false, false); }
mAddContentAndMeasure: "function mAddContentAndMeasure(d, content, styles, opts
  = {}, wNeeded = true, hNeeded = true) {\r

  \  let keepInLine = valf(opts.keepInLine, false);\r

  \  let replace = valf(opts.replace, false);\r

  \  let newline = valf(opts.newline, false);\r

  \  let d1 = content;\r

  \  if (isDOM(content)) mAppend(d, content);\r

  \  else if (isDict(content)) {\r

  \    d1 = iDiv(content);\r

  \    if (isDOM(d1)) {\r

  \      mAppend(d, d1);\r

  \    } else if (nundef(d1)) {\r

  \      d1 = mDiv(d, { bg: 'random' });\r

  \      mNode(content, d1);\r

  \    } else {\r

  \      doms = recFindDOMs(content);\r

  \      d1 = mDiv(d, { bg: 'random' });\r

  \      for (const dom of doms) { mAppend(d1, dom); }\r

  \    }\r

  \  } else if (isList(content)) {\r

  \    d1 = mDiv(d, { bg: 'random' });\r

  \    content = content.join(',');\r

  \    d1.innerHTML = content;\r

  \  } else if (isString(content) && content[0] === '<') {\r

  \    d1 = createElementFromHtml(cont);\r

  \    mAppend(d, d1);\r

  \  } else {\r

  \    d1 = mText(content, d);\r

  \  }\r

  \  if (replace) clearElement(d);\r

  \  if (keepInLine) styles['white-space'] = 'nowrap';\r

  \  if (newline) styles.display = 'block';\r

  \  if (isdef(styles)) mStyle(d1, styles);\r

  \  if (wNeeded && hNeeded) setSizeNeeded(d);\r

  \  else if (wNeeded) setWNeeded(d);\r

  \  else if (hNeeded) setHNeeded(d);\r

  \  return d1;\r

  }"
mAddContentAndMeasureH: function mAddContentAndMeasureH(d, content, styles, opt)
  { return mAddContentAndMeasure(d, content, styles, opt, false, true); }
mAddContentAndMeasureW: function mAddContentAndMeasureW(d, content, styles, opt)
  { return mAddContentAndMeasure(d, content, styles, opt, true, false); }
magnifyFront: "function magnifyFront(id) {\r

  \  let card = UIS[id];\r

  \  let hand = UIS[card.hand];\r

  \  if (hand.scale != 1) {\r

  \    card.setScale(1);\r

  \  }\r

  \  _bringCardToFront(id)\r

  }"
maHideLabel: "function maHideLabel(id, info) {\r

  \  let d = mBy(id);\r

  \  let dPic = d.children[0];\r

  \  let dText = d.children[1];\r

  \  dText.style.display = 'none';\r

  \  let dPicText = dPic.children[0];\r

  \  let family = dPicText.style.fontFamily;\r

  \  let i = (family == info.family) ? 0 : EMOFONTLIST.indexOf(family) + 1;\r

  \  let wInfo = info.w[i];\r

  \  let hInfo = info.h[i];\r

  \  let b = getBounds(d);\r

  \  let styles = { w: b.width, h: b.height };\r

  \  let [ptop, pbottom] = [firstNumber(d.style.paddingTop),
  firstNumber(d.style.paddingBottom)];\r

  \  let p = (isdef(ptop) && isdef(pbottom)) ? Math.min(ptop, pbottom) :\r

  \    isdef(ptop) ? ptop : isdef(pbottom) ? pbottom / 2 : 0;\r

  \  let [padw, padh] = [p, p];\r

  \  let [wtotal, htotal] = [styles.w, styles.h];\r

  \  let [wpic, hpic] = [wtotal - 2 * padw, htotal - 2 * padh];\r

  \  let fw = wpic / wInfo;\r

  \  let fh = hpic / hInfo;\r

  \  f = Math.min(fw, fh);\r

  \  fzreal = f * info.fz;\r

  \  wreal = f * wInfo;\r

  \  hreal = f * hInfo;\r

  \  padw += isdef(styles.w) ? (wpic - wreal) / 2 : 0;\r

  \  padh += isdef(styles.h) ? (hpic - hreal) / 2 : 0;\r

  \  if (!(padw >= 0 && padh >= 0)) { console.log(info); }\r

  \  let innerStyles = {};\r

  \  innerStyles.fz = fzreal;\r

  \  innerStyles.weight = 900;\r

  \  info.fzOrig = dPicText.style.fontSize;\r

  \  info.textColorOrig = dPicText.style.color;\r

  \  dPicText.style.fontSize = fzreal + 'px';\r

  \  info.wOrig = dPic.style.width;\r

  \  info.hOrig = dPic.style.height;\r

  \  innerStyles.w = wreal;\r

  \  innerStyles.h = hreal + 2 * padh;\r

  \  mStyleX(dPic, innerStyles);\r

  \  let outerStyles = {};\r

  \  info.paddingOrig = d.style.padding;\r

  \  info.paddingTopOrig = d.style.paddingTop;\r

  \  info.paddingBottomOrig = d.style.paddingBottom;\r

  \  outerStyles.padding = '' + 2 * padh + 'px ' + padw + 'px' + '0' + 'px ' +
  padw + 'px';\r

  \  mStyleX(d, outerStyles);\r

  }"
main_menu_off: function main_menu_off() { close_sidebar(); open_mini_user_info(); }
main_menu_on: function main_menu_on() { open_sidebar(); close_mini_user_info(); }
mainVisualExists: "function mainVisualExists(oid) {\r

  \  return firstCond(oid2ids[oid], x => x[0] == 'm');\r

  }"
make_both_run_out_of_time: "function make_both_run_out_of_time(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  for (const plname in fen.players) {\r

  \    let pl = fen.players[plname];\r

  \    pl.time_left = 100;\r

  \  }\r

  }"
make_card_selectable: function make_card_selectable(item) { let d =
  iDiv(item.o); mClass(d, 'selectable'); if (Z.game != 'aristo') {
  spread_hand(item.path, .3); } mClass(d.parentNode, 'selectable_parent'); }
make_card_selected: "function make_card_selected(item) {\r

  \  let color = isdef(Z.func.get_selection_color) ?
  Z.func.get_selection_color(item) : 'red';\r

  \  set_card_border(item, 13, color);\r

  \  if (DA.magnify_on_select) mClass(iDiv(item.o), 'mag');\r

  }"
make_card_unselectable: function make_card_unselectable(item) { let d =
  iDiv(item.o); d.onclick = null; mClassRemove(d, 'selectable');
  mClassRemove(d.parentNode, 'selectable_parent'); spread_hand(item.path); }
make_card_unselected: function make_card_unselected(item) {
  set_card_border(item); if (DA.magnify_on_select) mClassRemove(iDiv(item.o),
  'mag'); }
make_church: "function make_church(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  fen.stage = 1004;\r

  \  fen.market = ['JHn', 'QSn'];\r

  }"
make_container_selectable: function make_container_selectable(item) { let d =
  iDiv(item); mClass(d, 'selectable'); mClass(d, 'selectable_parent'); }
make_container_selected: function make_container_selected(item) { let d =
  iDiv(item); mClass(d, 'selected_parent'); }
make_container_unselectable: function make_container_unselectable(item) { let d
  = iDiv(item); d.onclick = null; mClassRemove(d, 'selectable'); mClassRemove(d,
  'selectable_parent'); }
make_container_unselected: function make_container_unselected(item) { let d =
  iDiv(item); mClassRemove(d, 'selected_parent'); }
make_csv_for_rankings: "function make_csv_for_rankings() {\r

  \  let csv = 'players,';\r

  \  let games = get_values(DB.games);\r

  \  let gamenames = games.map(x => x.friendly).join(',');\r

  \  csv += gamenames;\r

  \  for (const name in DB.users) {\r

  \    let [dbuser, values, usergames] = [DB.users[name], [], []];\r

  \    for (const gname in dbuser.games) {\r

  \      let rec = dbuser.games[gname];\r

  \      if (isdef(rec.total) && rec.total > 0) usergames.push(gname);\r

  \    }\r

  \    if (isEmpty(usergames)) continue;\r

  \    for (const gname in DB.games) {\r

  \      let info = lookupSet(DB.users, [name, 'games', gname], {});\r

  \      if (nundef(info.total)) values.push('0/0'); else
  values.push(`${info.wins}/${info.total}`);\r

  \    }\r

  \    if (!isEmpty(values)) csv += `\\n${name},` + values.join(',');\r

  \  }\r

  \  return csv;\r

  }"
make_deck_discard: "function make_deck_discard(o) {\r

  \  let fen = o.fen;\r

  \  let uplayer = o.uplayer;\r

  \  fen.deck_discard = ['2Sn', '3Sn', '4Sn', '5Sn', '6Sn', '7Sn', '8Sn',
  '9Sn', 'TSn'];\r

  \  fen.journeys = [['2Dn', '3Dn', '4Dn'], ['5Sn', '6Sn', '7Sn']];\r

  }"
make_deck_empty: "function make_deck_empty(o) {\r

  \  let fen = o.fen;\r

  \  fen.deck_discard = fen.deck;\r

  \  output_arr_short(fen.deck);\r

  \  fen.deck = [];\r

  }"
make_deck_selectable: function make_deck_selectable(item) { }
make_deck_selected: function make_deck_selected(item) { }
make_deck_unselectable: function make_deck_unselectable(item) { }
make_deck_unselected: function make_deck_unselected(item) { }
make_favicon: "function make_favicon(key) {\r

  \  let url = valf(Emicons[key], Emicons.maus);\r

  \  var link = document.querySelector(\"link[rel*='icon']\") ||
  document.createElement('link');\r

  \  link.type = 'image/png';\r

  \  link.rel = 'shortcut icon';\r

  \  link.href = url;
  //'https://ssl.gstatic.com/docs/doclist/images/infinite_arrow_favicon_5.ico';\
  \r

  \  document.getElementsByTagName('head')[0].appendChild(link);\r

  }"
make_goal_set: "function make_goal_set(deck, prob_different) {\r

  \  let [fen1, fen2, fen3] = [deck[0], '', ''];\r

  \  let n = fen1.length;\r

  \  let different = randomNumber(0, n - 1);\r

  \  for (let i = 0; i < n; i++) {\r

  \    let l1 = fen1[i];\r

  \    let same = i == different ? false : coin(prob_different);\r

  \    let inc = coin() ? 1 : -1;\r

  \    let [l2, l3] = same ? [l1, l1] : ['' + (3 + Number(l1) + inc * 1) % 3,
  '' + (3 + Number(l1) + inc * 2) % 3];\r

  \    fen2 += l2; fen3 += l3;\r

  \  }\r

  \  return [fen1, fen2, fen3];\r

  }"
make_hand_selectable: function make_hand_selectable(item) { }
make_hand_selected: function make_hand_selected(item) { }
make_hand_unselectable: function make_hand_unselectable(item) { }
make_hand_unselected: function make_hand_unselected(item) { }
make_long_history: "function make_long_history(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  fen.history = [];\r

  \  for (let i = 0; i < 100; i++) {\r

  \    let lines = [`${rChoose(get_keys(fen.players))} discards
  ${rCard()}`];\r

  \    let title = 'discard';\r

  \    fen.history.push({ title: title, lines: lines });\r

  \  }\r

  }"
make_market_selectable: function make_market_selectable(item) { }
make_market_selected: function make_market_selected(item) { }
make_market_unselectable: function make_market_unselectable(item) { }
make_market_unselected: function make_market_unselected(item) { }
make_payments_challenge_eval: "function make_payments_challenge_eval(inp) {\r

  \  let val = inp.value;\r

  \  let solution = { amount: DA.bill.nums.balance, index: DA.bill.acc.index
  };\r

  \  let answer = { amount: Number(val.substring(1).trim()), index:
  Number(inp.id.substring(3)) };\r

  \  let correct = solution.amount.toFixed(2) == answer.amount.toFixed(2) &&
  solution.index == answer.index;\r

  \  show_eval_message(correct, null, correct ? onclick_home : null);\r

  }"
make_players: "function make_players(playernames) {\r

  \  let o = Session.cur_players = {};\r

  \  for (const plname of playernames) {\r

  \    o[plname] = { name: plname, color:
  getColorDictColor(DB.users[plname].color), imgPath:
  `../base/assets/images/${plname}.jpg`, score: 0 };\r

  \  }\r

  \  Session.cur_me = o[Session.cur_user];\r

  \  Session.cur_others = get_values(o).filter(x => x.name !=
  Session.cur_user);\r

  }"
make_set_deck: "function make_set_deck(n_or_attr_list) {\r

  \  let all_attrs = gSet_attributes();\r

  \  let keys = get_keys(all_attrs);\r

  \  let n = isNumber(n_or_attr_list) ? n_or_attr_list :
  n_or_attr_list.length;\r

  \  let attrs = isNumber(n_or_attr_list) ? arrTake(keys, n) :
  n_or_attr_list;\r

  \  let list = ['0', '1', '2'];\r

  \  let i = 1;\r

  \  while (i < n) {\r

  \    let [l1, l2, l3] = [jsCopy(list), jsCopy(list), jsCopy(list)];\r

  \    l1 = l1.map(x => '0' + x); l2 = l2.map(x => '1' + x); l3 = l3.map(x =>
  '2' + x);\r

  \    list = l1.concat(l2).concat(l3);\r

  \    i++;\r

  \  }\r

  \  return list;\r

  }"
make_string_selectable: function make_string_selectable(item) { let d =
  mBy(item.id); mClass(d, 'selectable_button'); }
make_string_selected: "function make_string_selected(item) { let d =
  mBy(item.id); item.bg = mGetStyle(d, 'bg'); item.fg = mGetStyle(d, 'fg');
  mStyle(d, { bg: 'yellow', fg: 'black' }); }"
make_string_unselectable: function make_string_unselectable(item) { let d =
  mBy(item.id); d.onclick = null; mClassRemove(d, 'selectable_button'); }
make_string_unselected: "function make_string_unselected(item) { let d =
  mBy(item.id); mStyle(d, { bg: item.bg, fg: item.fg }); }"
makeArea: "function makeArea(areaName, idParent) {\r

  \  let mobj = new MOBJ();\r

  \  let id = 'm_A_' + areaName;\r

  \  mobj.id = id;\r

  \  let domel = document.createElement('div');\r

  \  domel.style.position = 'absolute';\r

  \  mobj.elem = domel;\r

  \  mobj.elem.id = id;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(mobj.elem);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  mobj.idParent = idParent;\r

  \  let parent = UIS[idParent];\r

  \  parent.children.push(id);\r

  \  mobj.attach();\r

  \  UIS[id] = mobj;\r

  \  linkObjects(id, areaName);\r

  \  listKey(IdOwner, id[2], id);\r

  \  return mobj;\r

  }"
makeAreaNameDomel: function makeAreaNameDomel(areaName) { return `<div
  style='width:100%'>${areaName}</div>`; }
makeAreas: "function makeAreas(dParent, layout) {\r

  \  let dGrid = mDiv(dParent, { gap: 10, bg: 'white', w: '90%', padding: 10,
  display: 'inline-grid', rounding: 10 }, 'dGrid');\r

  \  if (nundef(layout)) layout = ['T', 'H A'];\r

  \  let x = createGridLayout(dGrid, layout);\r

  \  let areaStyles = { bg: 'green', rounding: 6 };\r

  \  let contentStyles = { lowerRounding: 6 };\r

  \  let messageStyles = { fg: 'yellow' };\r

  \  let titleStyles = { bg: 'dimgray', family: 'AlgerianRegular',
  upperRounding: 6 };\r

  \  let areas = {\r

  \    T: { title: 'table', id: 'dTrick', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles, titleOnTop: true },\r

  \    H: { title: 'YOU', id: 'dHuman', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles, titleOnTop: false },\r

  \    A: { title: 'opponent', id: 'dAI', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles, titleOnTop: false },\r

  \  };\r

  \  let items = [];\r

  \  for (const k in areas) {\r

  \    let item = areas[k];\r

  \    item.areaStyles['grid-area'] = k;\r

  \    let dCell = mTitledMessageDiv(item.title, dGrid, item.id,
  item.areaStyles, item.contentStyles, item.titleStyles, item.messageStyles,
  item.titleOnTop)\r

  \    iRegister(item, item.id);\r

  \    if (item.titleOnTop) iAdd(item, { div: dCell, dTitle:
  dCell.children[0], dMessage: dCell.children[1], dContent: dCell.children[2]
  });\r

  \    else iAdd(item, { div: dCell, dTitle: dCell.children[2], dMessage:
  dCell.children[0], dContent: dCell.children[1] });\r

  \    mCenterCenterFlex(diContent(item));\r

  \    mStyleX(diContent(item), { gap: 10 });\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
makeAreasKrieg: "function makeAreasKrieg(dParent) {\r

  \  let dGrid = mDiv(dParent, { gap: 10, bg: 'white', w: '90%', padding: 10,
  display: 'inline-grid', rounding: 10 }, 'dGrid');\r

  \  let layout = ['T', 'H A'];\r

  \  let x = createGridLayout(dGrid, layout);\r

  \  let areaStyles = { bg: 'green', rounding: 6 };\r

  \  let contentStyles = { lowerRounding: 6 };\r

  \  let messageStyles = { fg: 'yellow' };\r

  \  let titleStyles = { bg: 'dimgray', family: 'AlgerianRegular',
  upperRounding: 6 };\r

  \  let areas = {\r

  \    T: { title: 'table', id: 'dTrick', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles, titleOnTop: true },\r

  \    H: { title: 'YOU', id: 'dHuman', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles, titleOnTop: false },\r

  \    A: { title: 'opponent', id: 'dAI', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles, titleOnTop: false },\r

  \  };\r

  \  let items = [];\r

  \  for (const k in areas) {\r

  \    let item = areas[k];\r

  \    item.areaStyles['grid-area'] = k;\r

  \    let dCell = mTitledMessageDiv(item.title, dGrid, item.id,
  item.areaStyles, item.contentStyles, item.titleStyles, item.messageStyles,
  item.titleOnTop)\r

  \    iRegister(item, item.id);\r

  \    if (item.titleOnTop) iAdd(item, { div: dCell, dTitle:
  dCell.children[0], dMessage: dCell.children[1], dContent: dCell.children[2]
  });\r

  \    else iAdd(item, { div: dCell, dTitle: dCell.children[2], dMessage:
  dCell.children[0], dContent: dCell.children[1] });\r

  \    mCenterCenterFlex(diContent(item));\r

  \    mStyleX(diContent(item), { gap: 10 });\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
makeAux: "function makeAux(s, oid, areaName, directParent) {\r

  \  let id = 'x_l_' + getUID() + '@' + oid;\r

  \  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
  return; }\r

  \  let mobj = new MOBJ();\r

  \  mobj.id = id;\r

  \  let domel = document.createElement('div');\r

  \  domel.classList.add('hallo');\r

  \  domel.innerHTML = s;\r

  \  mobj.elem = domel;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(domel);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  let idParent = areaName;\r

  \  mobj.idParent = idParent;\r

  \  let parent = UIS[idParent];\r

  \  parent.children.push(id);\r

  \  mobj.isa.aux = true;\r

  \  linkObjects(id, oid);\r

  \  listKey(IdOwner, id[2], id);\r

  \  UIS[id] = mobj;\r

  \  if (isdef(directParent)) { mobj.isAttached = true;
  directParent.appendChild(mobj.elem) } else mobj.attach();\r

  \  return mobj;\r

  }"
makeBestMove: "function makeBestMove(color) {\r

  \  if (color === 'b') {\r

  \    var move = getBestMove(G.game, color, globalSum)[0];\r

  \    return move;\r

  \  } else {\r

  \    var move = getBestMove(G.game, color, -globalSum)[0];\r

  \  }\r

  \  globalSum = evaluateBoard(move, globalSum, 'b');\r

  \  G.game.move(move);\r

  \  G.board.position(G.game.fen());\r

  }"
makeBoard: "function makeBoard(idBoard, o, areaName) {\r

  \  let id = 'm_s_' + idBoard;\r

  \  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
  return; }\r

  \  let mobj = new MOBJ();\r

  \  mobj.id = id;\r

  \  let domel = addSvgg(UIS[areaName].elem, id, { originInCenter: true });\r

  \  mobj.elem = domel;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(domel);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  let idParent = areaName;\r

  \  mobj.idParent = areaName;\r

  \  let parent = UIS[idParent];\r

  \  parent.children.push(id);\r

  \  mobj.o = o;\r

  \  mobj.isa.board = true;\r

  \  linkObjects(id, idBoard);\r

  \  listKey(IdOwner, id[2], id);\r

  \  UIS[id] = mobj;\r

  \  mobj.isAttached = true;\r

  \  return mobj;\r

  }"
makeBoardElement: "function makeBoardElement(oid, o, idBoard, elType) {\r

  \  let id = 'm_t_' + oid;\r

  \  if (isdef(UIS[id])) {\r

  \    error('CANNOT create ' + id + ' TWICE!!!!!!!!!');\r

  \    return;\r

  \  }\r

  \  let mobj = new MOBJ();\r

  \  mobj.id = id;\r

  \  let domel = document.createElementNS('http://www.w3.org/2000/svg',
  'g');\r

  \  mobj.elem = domel;\r

  \  mobj.elem.id = id;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(domel);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  let idParent = idBoard;\r

  \  mobj.idParent = idParent;\r

  \  let parent = UIS[idParent];\r

  \  parent.children.push(id);\r

  \  mobj.o = o;\r

  \  mobj.isa[elType] = true;\r

  \  linkObjects(id, oid);\r

  \  listKey(IdOwner, id[2], id);\r

  \  UIS[id] = mobj;\r

  \  return mobj;\r

  }"
makeCadreTable: "function makeCadreTable(powers) {\r

  \  let cadreTypes = ['Infantry', 'Fortress', 'Tank', 'AirForce', 'Fleet',
  'Carrier', 'Submarine'];\r

  \  let table = makeTable('AvailableCadres', cadreTypes, powers);\r

  \  addTableTo(table);\r

  }"
makeCanvas: "function makeCanvas(d) {\r

  \  let canvas = mCreate('canvas');\r

  \  mAppend(d, canvas);\r

  \  canvas.id = 'sheet';\r

  \  return canvas;\r

  }"
makeCard: "function makeCard(oid, o, areaName) {\r

  \  let idArea = getIdArea(areaName);\r

  \  let id = 'm_t_' + oid;\r

  \  if (isdef(UIS[id])) {\r

  \    error('CANNOT create ' + id + ' TWICE!!!!!!!!!');\r

  \    return;\r

  \  }\r

  \  let mobj = new MOBJ();\r

  \  mobj.id = id;\r

  \  let cardName = isdef(o.name) ? o.name : 'King';\r

  \  let domel;\r

  \  if (GAME == 'catan') domel = _makeCardDivCatan(oid, o);\r

  \  else if (GAME == 'aristocracy') domel = _makeCardDivAristocracy(oid,
  o);\r

  \  else domel = _makeCardDivDefault(oid, o);\r

  \  domel.id = id;\r

  \  mobj.elem = domel;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(domel);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  let parent = UIS[idArea];\r

  \  let idParent = parent.id;\r

  \  mobj.idParent = idParent;\r

  \  parent.children.push(id);\r

  \  mobj.o = o;\r

  \  mobj.isa.card = true;\r

  \  linkObjects(id, oid);\r

  \  listKey(IdOwner, id[2], id);\r

  \  UIS[id] = mobj;\r

  \  return mobj;\r

  }"
makeCard_dep: "function makeCard_dep(oid, o, areaName) {\r

  \  let idArea = getIdArea(areaName);\r

  \  let id = 'm_t_' + oid;\r

  \  if (isdef(UIS[id])) {\r

  \    error('CANNOT create ' + id + ' TWICE!!!!!!!!!');\r

  \    return;\r

  \  }\r

  \  let mk = new MK();\r

  \  mk.id = id;\r

  \  let cardName = isdef(o.name) ? o.name : 'King';\r

  \  let domel;\r

  \  if (GAME == 'catan') domel = _makeCardDivCatan(oid, o);\r

  \  else if (GAME == 'aristocracy') domel = _makeCardDivAristocracy(oid,
  o);\r

  \  else domel = _makeCardDivDefault(oid, o);\r

  \  domel.id = id;\r

  \  mk.elem = domel;\r

  \  mk.parts.elem = mk.elem;\r

  \  mk.domType = getTypeOf(domel);\r

  \  mk.cat = DOMCATS[mk.domType];\r

  \  let parent = UIS[idArea];\r

  \  let idParent = parent.id;\r

  \  mk.loc = idParent;\r

  \  parent.children.push(id);\r

  \  mk.o = o;\r

  \  mk.isa.card = true;\r

  \  linkObjects(id, oid);\r

  \  listKey(IdOwner, id[2], id);\r

  \  UIS[id] = mk;\r

  \  return mk;\r

  }"
makeCard123: "function makeCard123(oid, o) {\r

  \  let mk = new MK();\r

  \  let id = getIdForOid(oid);\r

  \  mk.id = id;\r

  \  let domel = makeCardDomel(o);\r

  \  evAddCounter += 1;\r

  \  domel.style.position = 'absolute';\r

  \  mk.elem = domel;\r

  \  mk.elem.id = id;\r

  \  mk.parts.elem = mk.elem;\r

  \  mk.domType = getTypeOf(mk.elem);\r

  \  mk.cat = DOMCATS[mk.domType];\r

  \  mk.o = o;\r

  \  mk.oid = oid;\r

  \  mk.isa.card = true;\r

  \  UIS[id] = mk;\r

  \  linkObjects(id, oid);\r

  \  listKey(IdOwner, id[2], id);\r

  \  return mk;\r

  }"
makeCardDomel: "function makeCardDomel(oCard) {\r

  \  if (lookup(SPEC, ['typeMappings', 'card'])) {\r

  \    for (const k in SPEC.typeMappings.card) {\r

  \      oCard[k] = oCard[SPEC.typeMappings.card[k]];\r

  \    }\r

  \  }\r

  \  let el = cardFace(oCard);\r

  \  return el;\r

  }"
makeCategories: "function makeCategories() {\r

  \  let keys = Categories = {\r

  \    animal: getGSGElements(g => g == 'Animals & Nature', s => startsWith(s,
  'animal')),\r

  \    clothing: getGSGElements(g => g == 'Objects', s => s == 'clothing'),\r

  \    emotion: getGSGElements(g => g == 'Smileys & Emotion', s =>
  startsWith(s, 'face') && !['face-costume', 'face-hat'].includes(s)),\r

  \    food: getGSGElements(g => g == 'Food & Drink', s => startsWith(s,
  'food')),\r

  \    'game/toy': (['sparkler', 'firecracker', 'artist palette', 'balloon',
  'confetti ball'].concat(ByGroupSubgroup['Activities']['game'])).sort(),\r

  \    gesture: getGSGElements(g => g == 'People & Body', s => startsWith(s,
  'hand')),\r

  \    job: ByGroupSubgroup['People & Body']['job'],\r

  \    mammal: ByGroupSubgroup['Animals & Nature']['animal-mammal'],\r

  \    music: getGSGElements(g => g == 'Objects', s => startsWith(s,
  'musi')),\r

  \    object: getGSGElements(g => g == 'Objects', s => true),\r

  \    place: getGSGElements(g => g == 'Travel & Places', s => startsWith(s,
  'place')),\r

  \    plant: getGSGElements(g => g == 'Animals & Nature' || g == 'Food &
  Drink', s => startsWith(s, 'plant') || s == 'food-vegetable' || s ==
  'food-fruit'),\r

  \    sport: ByGroupSubgroup['Activities']['sport'],\r

  \    tool: getGSGElements(g => g == 'Objects', s => s == 'tool'),\r

  \    transport: getGSGElements(g => g == 'Travel & Places', s =>
  startsWith(s, 'transport')),\r

  \  };\r

  \  let incompatible = DA.incompatibleCats = {\r

  \    animal: ['mammal'],\r

  \    clothing: ['object'],\r

  \    emotion: ['gesture'],\r

  \    food: ['plant', 'animal'],\r

  \    'game/toy': ['object', 'music'],\r

  \    gesture: ['emotion'],\r

  \    job: ['sport'],\r

  \    mammal: ['animal'],\r

  \    music: ['object', 'game/toy'],\r

  \    object: ['music', 'clothing', 'game/toy', 'tool'],\r

  \    place: [],\r

  \    plant: ['food'],\r

  \    sport: ['job'],\r

  \    tool: ['object'],\r

  \    transport: [],\r

  \  }\r

  }"
makeCells: "function makeCells(d, rows, cols, gap = '2px') {\r

  \  d.style.setProperty('--grid-rows', rows);\r

  \  d.style.setProperty('--grid-cols', cols);\r

  \  d.style.setProperty('--grid-gap', gap);\r

  \  let cells = [];\r

  \  for (rows = 0; rows < rows; rows++) {\r

  \    cells[rows] = [];\r

  \    for (cols = 0; cols < cols; cols++) {\r

  \      let cell = document.createElement(\"div\");\r

  \      cell.innerText = (rows + ',' + cols);\r

  \      d.appendChild(cell).className = \"grid-item\";\r

  \      cells[rows].push(cell);\r

  \    }\r

  \  }\r

  \  return cells;\r

  }"
makeCollectionArea: "function makeCollectionArea(key, parentAreaId) {\r

  \  let parentArea = UIS[parentAreaId];\r

  \  let handAreaName = key;\r

  \  if (isdef(parentArea)) {\r

  \    let mobj = makeArea(handAreaName, parentAreaId);\r

  \    mobj.setBg(randomColor());\r

  \    mobj.title(stringAfter(key, '.'));\r

  \    let bTitle = getBounds(mobj.parts.title);\r

  \    mobj.parts['title'].fontSize = '12px';\r

  \    mobj.elem.style.minWidth = bTitle.width + 'px'; //'90px';\r

  \    mobj.elem.style.minHeight = '146px';\r

  \    mobj.body('hand');\r

  \    let div = mobj.parts['hand'];\r

  \    div.style.position = 'relative';\r

  \    div.style.left = '10px';\r

  \    div.style.top = '10px';\r

  \    div.style.width = 'auto';\r

  \    div.style.height = 'auto';\r

  \    mobj.collectionKey = key;\r

  \    mobj.adjustSize = true;\r

  \    let divCollection = mobj.elem;\r

  \    divCollection.style.position = null;\r

  \    return mobj;\r

  \  }\r

  }"
makeColumns: "function makeColumns(dParent, divList, wFit, hFit, yStart) {\r

  \  let h = maxFit(divList, 'offsetHeight', 0, hFit);\r

  \  let wmax = maxFit(divList, 'offsetWidth', 0, wFit);\r

  \  let w = sumProp(divList, 'offsetWidth');\r

  \  if (w > wFit) {\r

  \    h = Math.min(h + 20, hFit);\r

  \    dParent.style.overflow = 'auto';\r

  \  }\r

  \  let hPlus = hFit - h;\r

  \  let margin = '5';\r

  \  let wIdeal = (wFit / divList.length) - (divList.length + 1) * margin;\r

  \  if (wIdeal >= wmax) wmax = wIdeal;\r

  \  let wPlus = wFit - (wmax * divList.length);\r

  \  let dy = hPlus / 3;\r

  \  let dx = wPlus / (divList.length + 1);\r

  \  let x = dx;\r

  \  let y = dy + yStart;\r

  \  for (const div of divList) {\r

  \    div.style =
  `height:${h}px;width:${wmax}px;background-color:dimgrey;position:absolute;lef\
  t:${x}px;top:${y}px`;\r

  \    x += dx + wmax;\r

  \  }\r

  }"
makeCorners: "function makeCorners(pool, board, serverBoard) {\r

  \  let serverFieldIds = _setToList(serverBoard.fields).map(x => x._obj);\r

  \  board.structInfo.corners = _setToList(serverBoard.corners).map(x =>
  x._obj);\r

  \  let dhelp = {};\r

  \  for (const fid of serverFieldIds) {\r

  \    let sfield = pool[fid];\r

  \    let ffield = getVisual(fid);\r

  \    if (nundef(sfield.corners)) continue;\r

  \    let iPoly = 0;\r

  \    let cornerIds = sfield.corners.map(x => x._obj);\r

  \    for (const cid of cornerIds) {\r

  \      if (!cid) {\r

  \        iPoly += 1;\r

  \        continue;\r

  \      } else if (isdef(dhelp[cid])) {\r

  \        iPoly += 1;\r

  \        continue;\r

  \      } else {\r

  \        let corner = makeBoardElement(cid, pool[cid], board.id,
  'corner');\r

  \        let poly = ffield.memInfo.poly[iPoly];\r

  \        corner.memInfo = { shape: 'circle', memType: 'corner', x: poly.x,
  y: poly.y, w: 1, h: 1 };\r

  \        dhelp[cid] = corner;\r

  \        iPoly += 1;\r

  \      }\r

  \    }\r

  \  }\r

  }"
makeDeck: "function makeDeck({ kind, N, nJokers, fPrep, fDraw, bDraw, x, y, w, h
  } = {}) {\r

  \  if (nundef(kind)) kind = 'deck52';\r

  \  let params = {\r

  \    kind: kind,\r

  \    fPrepFace: isdef(fPrep) ? fPrep : window[kind + 'Prep'],\r

  \    fUpdateFace: isdef(fDraw) ? fDraw : window[kind + 'Update'],\r

  \    fPrepBack: isdef(bDraw) ? bDraw : window[kind + 'Back'],\r

  \    fUpdateBack: isdef(bDraw) ? bDraw : window[kind + 'Back'],\r

  \    size: { w: 78, h: 110 },\r

  \    orientation: 'portrait',\r

  \    repeat: 1,\r

  \    numJokers: isdef(nJokers) ? nJokers : 0,\r

  \  };\r

  \  let defStyle = { deck52: { n: 52 }, catan: { n: 20 }, free: {},
  deckEmpty: { n: 0 } };\r

  \  N = isdef(N) ? N : defStyle[params.kind].n;\r

  \  params.N = N;\r

  \  params.NTotal = N + (isdef(nJokers) ? nJokers : 0);\r

  \  return DeckB.fDeck(params);\r

  }"
makeDeckArea: "function makeDeckArea(areaName, numDecks) {\r

  \  let parentOfDeckArea = UIS[areaName];\r

  \  let deckHeight = 140;\r

  \  let deckHeightNeeded = numDecks * deckHeight;\r

  \  if (deckHeightNeeded > parentOfDeckArea.h) setAreaHeight(areaName,
  deckHeightNeeded);\r

  \  else deckHeightNeeded = parentOfDeckArea.h;\r

  \  let deckAreaName = 'deckArea';\r

  \  let mobj = makeArea(deckAreaName, areaName);\r

  \  mobj.setBg('seagreen');\r

  \  mobj.setBounds(0, 0, 200, deckHeightNeeded, 'px');\r

  \  return mobj;\r

  }"
makeDeckMS: "function makeDeckMS(oid, o, deck1, areaName, x, y) {\r

  \  let id = 'm_t_' + oid;\r

  \  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
  return; }\r

  \  let mobj = new MOBJ();\r

  \  mobj.id = id;\r

  \  mobj.o = o;\r

  \  mobj.deck = deck1;\r

  \  mobj.oid = oid;\r

  \  mobj.elem = document.createElement('div');\r

  \  mobj.elem.id = id;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(mobj.elem);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  mobj.idParent = areaName;\r

  \  UIS[areaName].children.push(id);\r

  \  mobj.isa.deck = true;\r

  \  listKey(IdOwner, id[2], id);\r

  \  linkObjects(id, oid);\r

  \  UIS[id] = mobj;\r

  \  return mobj;\r

  }"
makeDeckSuccess: "function makeDeckSuccess(oid, o, areaName) {\r

  \  let id = 'm_t_' + oid;\r

  \  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
  return; }\r

  \  let mobj = new MOBJ();\r

  \  mobj.id = id;\r

  \  mobj.oid = oid;\r

  \  mobj.o = o;\r

  \  mobj.isa.deck = true;\r

  \  mobj.elem = document.createElement('div');\r

  \  mobj.elem.id = id;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(mobj.elem);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  mobj.idParent = areaName;\r

  \  UIS[areaName].children.push(id);\r

  \  listKey(IdOwner, id[2], id);\r

  \  linkObjects(id, oid);\r

  \  UIS[id] = mobj;\r

  \  mobj.elem.classList.add('deckBase');\r

  \  let num = o.deck_count == 0 ? 0 : o.deck_count / 2 + 1;\r

  \  let topmost = makeStapel(mobj.elem, num);\r

  \  mobj.topmost = topmost;\r

  \  if (topmost != mobj.elem) mobj.parts['topmost'] = topmost;\r

  \  return mobj;\r

  }"
makeDefaultAction: "function makeDefaultAction(boat, areaName) {\r

  \  let mobj = new MOBJ();\r

  \  let id = 'd_a_' + boat.iTuple;\r

  \  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
  return null; }\r

  \  mobj.id = id;\r

  \  let domel = document.createElement('div');\r

  \  domel.textContent = boat.text;\r

  \  domel.style.cursor = 'pointer';\r

  \  mobj.elem = domel;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(domel);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  let idParent = areaName;\r

  \  mobj.idParent = idParent;\r

  \  let parent = UIS[idParent];\r

  \  parent.children.push(id);\r

  \  mobj.o = boat;\r

  \  mobj.isa.boat = true;\r

  \  for (const tupleEl of boat.tuple) {\r

  \    if (tupleEl.type == 'obj' && isdef(tupleEl.ID)) {\r

  \      let oid = tupleEl.ID;\r

  \      boat.oids.push(oid);\r

  \      linkObjects(id, oid);\r

  \    }\r

  \  }\r

  \  listKey(IdOwner, id[2], id);\r

  \  UIS[id] = mobj;\r

  \  mobj.attach();\r

  \  return mobj;\r

  }"
makeDefaultObject: "function makeDefaultObject(oid, o, areaName) { return
  _makeDefault(makeIdDefaultObject(oid), oid, o, areaName, oid + ': ' +
  o.obj_type); }"
makeDefaultPlayer: "function makeDefaultPlayer(oid, o, areaName) { return
  _makeDefault(makeIdDefaultPlayer(oid), oid, o, areaName, 'player: ' + oid +
  '(' + getPlayerColorString(oid) + ', ' + getUser(oid) + ')'); }"
makeDefaultPool: "function makeDefaultPool(fromData) {\r

  \  if (nundef(fromData) || isEmpty(fromData.table) &&
  isEmpty(fromData.players)) return {};\r

  \  if (nundef(fromData.table)) fromData.table = {};\r

  \  let data = jsCopy(fromData.table);\r

  \  for (const k in fromData.players) {\r

  \    data[k] = jsCopy(fromData.players[k]);\r

  \  }\r

  \  return data;\r

  }"
makeDictionaries: "async function makeDictionaries() {\r

  \  let ddd = await route_path_text('../assets/speech/ddAlles.txt');\r

  \  console.log(ddd)\r

  \  let lines = ddd.split('\\n');\r

  \  console.log(lines);\r

  \  let newLines = [];\r

  \  let deDict = {};\r

  \  let deNouns = {};\r

  \  let edDict = {};\r

  \  let edNouns = {};\r

  \  for (let i = 0; i < lines.length; i++) {\r

  \    let l = lines[i];\r

  \    if (startsWith(l, 'German')) console.log(l);\r

  \    else if (startsWith(l, 'A ')) console.log(l);\r

  \    else {\r

  \      newLines.push(l);\r

  \      let d = stringBefore(l, ' :');\r

  \      let gen = null;\r

  \      if (d.includes('{')) {\r

  \        let parts = d.split('{');\r

  \        d = parts[0].trim();\r

  \        gen = stringBefore(parts[1], '}').trim();\r

  \        lookupSet(deDict, [d, 'gen'], gen);\r

  \        lookupSet(deNouns, [d, 'gen'], gen);\r

  \      }\r

  \      let elist = stringAfter(l, ': ').split(',').map(x => x.trim());\r

  \      for (const e of elist) {\r

  \        lookupAddIfToList(deDict, [d, 'e'], e);\r

  \        lookupAddIfToList(edDict, [e, 'd'], d);\r

  \        if (isdef(gen)) {\r

  \          lookupAddIfToList(edNouns, [e, 'd'], d);\r

  \          lookupAddIfToList(deNouns, [d, 'e'], e);\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  console.log(deDict);\r

  \  console.log(edDict);\r

  \  downloadTextFile(newLines.join('\\n'), 'ddText', ext = 'txt')\r

  \  downloadAsYaml(deDict, 'deDict');\r

  \  downloadAsYaml(edDict, 'edDict');\r

  \  downloadAsYaml(deNouns, 'deNouns');\r

  \  downloadAsYaml(edNouns, 'edNouns');\r

  }"
makeDomArea: "function makeDomArea(domel) {\r

  \  if (nundef(domel.id)) return;\r

  \  let mobj = new MOBJ();\r

  \  let id = domel.id;\r

  \  mobj.id = id;\r

  \  mobj.elem = domel;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(domel);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  let idParent = domel.parentNode.id;\r

  \  mobj.idParent = idParent;\r

  \  let parent = UIS[idParent];\r

  \  parent.children.push(id);\r

  \  mobj.isAttached = true;\r

  \  UIS[id] = mobj;\r

  \  listKey(IdOwner, id[2], id);\r

  \  return mobj;\r

  }"
makeDragDrop: "function makeDragDrop(objElems, dropzoneElems) {\r

  \  let dropzones = document.querySelectorAll('.dropzone');\r

  \  let droppable = new Draggable.Droppable(\r

  \    dropzones,\r

  \    {\r

  \      draggable: '.draggable',\r

  \      dropzone: '.dropzone',\r

  \      mirror: { constrainDimensions: true }\r

  \    }\r

  \  );\r

  \  return;\r

  \  let droppableOrigin;\r

  \  droppable.on('drag:start', (ev) => {\r

  \    console.log('drag', droppableOrigin, ev)\r

  \  });\r

  \  droppable.on('droppable:dropped', (ev) => {\r

  \    console.log('drop!', droppableOrigin, ev);\r

  \  });\r

  \  return droppable;\r

  }"
makeDraggable: "function makeDraggable(elem, dropPos) {\r

  \  elem.draggable = true;\r

  \  elem.ondragstart = drag;\r

  \  if (isdef(dropPos)) elem.dropPosition = dropPos;\r

  }"
makeDraggableInner: "function makeDraggableInner(elem) {\r

  \  elem.setAttribute('draggable', true);\r

  \  elem.ondragstart = ev => {\r

  \    if (!canAct()) return;\r

  \    let id = evToClosestId(ev);\r

  \    let source = mBy(id);\r

  \    if (isLetterElement(source)) {\r

  \      ev.dataTransfer.setData(\"Text\", source.innerHTML);\r

  \    }\r

  \  }\r

  \  mClass(elem, 'draggable');\r

  }"
makeDraggableX: "function makeDraggableX(elem, dropPos) {\r

  \  elem.draggable = true;\r

  \  elem.ondragstart = dragX;\r

  \  if (isdef(dropPos)) elem.dropPosition = dropPos;\r

  }"
makeDraggableX2: "function makeDraggableX2(elem, dropPos) {\r

  \  elem.draggable = true;\r

  \  elem.ondragstart = dragX2;\r

  \  if (isdef(dropPos)) elem.dropPosition = dropPos;\r

  }"
makeDrawingArea: "function makeDrawingArea(id, idArea, addToUIS = false) {\r

  \  if (addToUIS && isdef(UIS[id])) { error('CANNOT create ' + id + '
  TWICE!!!!!!!!!'); return; }\r

  \  let mobj = new MOBJ();\r

  \  mobj.id = id;\r

  \  let idParent = idArea;\r

  \  mobj.idParent = idArea;\r

  \  let parent = UIS[idParent];\r

  \  if (parent) parent.children.push(id);\r

  \  let parentElem = parent ? parent.elem :
  document.getElementById(idArea);\r

  \  let domel = addSvgg(parentElem, id, { originInCenter: true });\r

  \  mobj.w = parent.w;\r

  \  mobj.h = parent.h;\r

  \  mobj.isAttached = true;\r

  \  mobj.elem = domel;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(domel);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  mobj.isa.drawingArea = true;\r

  \  if (addToUIS) {\r

  \    listKey(IdOwner, id[2], id);\r

  \    UIS[id] = mobj;\r

  \  }\r

  \  return mobj;\r

  }"
makeDrawingElement: "function makeDrawingElement(id, idDrawingArea, addToUIS =
  false) {\r

  \  if (isdef(UIS[id])) {\r

  \    error('CANNOT create ' + id + ' TWICE!!!!!!!!!');\r

  \    return;\r

  \  }\r

  \  let mobj = new MOBJ();\r

  \  mobj.id = id;\r

  \  let domel = document.createElementNS('http://www.w3.org/2000/svg',
  'g');\r

  \  mobj.elem = domel;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(domel);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  let idParent = idDrawingArea;\r

  \  mobj.idParent = idParent;\r

  \  let parent = UIS[idParent];\r

  \  if (parent) parent.children.push(id);\r

  \  if (addToUIS) {\r

  \    listKey(IdOwner, id[2], id);\r

  \    UIS[id] = mobj;\r

  \  }\r

  \  return mobj;\r

  }"
makeDroppable: "function makeDroppable(target) {\r

  \  target.ondragover = allowDrop;\r

  \  target.ondrop = drop;\r

  }"
makeDroppableX: "function makeDroppableX(target) {\r

  \  target.ondragover = allowDrop;\r

  \  target.ondrop = dropX;\r

  }"
makeDroppableX2: "function makeDroppableX2(target) {\r

  \  target.ondragover = allowDrop;\r

  \  target.ondrop = dropX2;\r

  }"
makeEdge: "function makeEdge(dParent, v1, v2, dFromEdge, ew = 20) {\r

  \  let switched = false;\r

  \  if (v1.x == v2.x) {\r

  \    if (v1.y > v2.y) { let h = v2; v2 = v1; v1 = h; switched = true; }\r

  \    let w = ew / 2;\r

  \    let sp = `polygon(${v1.x - w + ew}px ${v1.y + dFromEdge + ew}px, ${v1.x
  + w + ew}px ${v1.y + dFromEdge + ew}px, ${v2.x + w + ew}px ${v2.y - dFromEdge
  + ew}px, ${v2.x - w + ew}px ${v2.y - dFromEdge + ew}px)`;\r

  \    let de = mDiv(dParent, { position: 'absolute', left: -ew, top: -ew, w:
  '120%', h: '120%' });\r

  \    mClass(de, 'edge');\r

  \    mStyle(de, { 'clip-path': sp });\r

  \    return mItem(null, { div: de }, { type: 'edge' }, true);\r

  \  }\r

  \  if (v1.x > v2.x) { let h = v2; v2 = v1; v1 = h; switched = true; }\r

  \  let dx = v2.x - v1.x;\r

  \  let dy = v2.y - v1.y;\r

  \  let m = dy / dx;\r

  \  let [x1, y1, x2, y2] = [v1.x, v1.y, v2.x, v2.y];\r

  \  let alpha = Math.atan(m);\r

  \  let xa = x1 + dFromEdge * Math.cos(alpha);\r

  \  let ya = y1 + dFromEdge * Math.sin(alpha);\r

  \  let xe = x2 - dFromEdge * Math.cos(alpha);\r

  \  let ye = y2 - dFromEdge * Math.sin(alpha);\r

  \  let m2 = -1 / m;\r

  \  let beta = Math.atan(m2);\r

  \  let w = ew / 2;\r

  \  let x1t = xa + w * Math.cos(beta);\r

  \  let y1t = ya + w * Math.sin(beta);\r

  \  let x1b = xa - w * Math.cos(beta);\r

  \  let y1b = ya - w * Math.sin(beta);\r

  \  let x2t = xe + w * Math.cos(beta);\r

  \  let y2t = ye + w * Math.sin(beta);\r

  \  let x2b = xe - w * Math.cos(beta);\r

  \  let y2b = ye - w * Math.sin(beta);\r

  \  let de = mDiv(dParent, { position: 'absolute', left: 0, top: 0, w:
  '120%', h: '120%' });\r

  \  mStyle(de, { 'clip-path': `polygon(${x1t}px ${y1t}px, ${x2t}px ${y2t}px,
  ${x2b}px ${y2b}px, ${x1b}px ${y1b}px)` });\r

  \  mClass(de, 'edge');\r

  \  return mItem(null, { div: de }, { type: 'edge' }, true);\r

  }"
makeEdge1: "function makeEdge1(dParent, v1, v2) {\r

  \  let poly = get2Points(v1, v2);\r

  \  let minx = 100000, miny = 100000, maxx = -100000, maxy = -100000;\r

  \  for (const k in poly) {\r

  \    let pt = poly[k];\r

  \    minx = Math.min(pt.x, minx);\r

  \    miny = Math.min(pt.y, miny);\r

  \    maxx = Math.max(pt.x, maxx);\r

  \    maxy = Math.max(pt.y, maxy);\r

  \  }\r

  \  let bb = { x: minx, y: miny, w: maxx - minx, h: maxy - miny };\r

  \  let de = mDiv(dParent, { position: 'absolute', left: minx, top: miny, w:
  bb.w, h: bb.h, bg: 'red' });\r

  \  let [x1, y1, x2, y2] = [v1.x, v1.y, v2.x, v2.y];\r

  \  let stroke = 10;\r

  \  let sp = '';\r

  \  if (x1 == x2) {\r

  \    if (y1 < y2) sp = 'polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)';\r

  \    else sp = 'polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)';\r

  \  } else if (y1 == y2) {\r

  \    sp = 'polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)';\r

  \  } else if (x1 < x2 && y1 < y2) {\r

  \    sp = `polygon(0% 0%, 0% 20%, 100% 100%, 100% 80%)`;\r

  \  } else if (x1 < x2 && y1 > y2) {\r

  \    sp = `polygon(0% 100%, 0% 80%, 100% 0%, 100% 20%)`;\r

  \  } else if (x1 > x2 && y1 < y2) {\r

  \    sp = `polygon(0% 100%, 0% 80%, 100% 0%, 100% 20%)`;\r

  \  } else {\r

  \    sp = `polygon(0% 0%, 0% 20%, 100% 100%, 100% 80%)`;\r

  \  }\r

  \  mStyle(de, { 'clip-path': sp });\r

  \  let e = mItem(null, { div: de }, { type: 'edge', nodes: [v1.id, v2.id]
  });\r

  \  return e;\r

  }"
makeEdges: "function makeEdges(pool, board, serverBoard) {\r

  \  let serverFieldIds = _setToList(serverBoard.fields).map(x => x._obj);\r

  \  board.structInfo.edges = _setToList(serverBoard.edges).map(x =>
  x._obj);\r

  \  dhelp = {};\r

  \  for (const fid of serverFieldIds) {\r

  \    let sfield = pool[fid];\r

  \    if (nundef(sfield.edges)) continue;\r

  \    let edgeIds = sfield.edges.map(x => x._obj);\r

  \    for (const eid of edgeIds) {\r

  \      if (!eid) {\r

  \        continue;\r

  \      } else if (isdef(dhelp[eid])) {\r

  \        continue;\r

  \      } else {\r

  \        let edge = makeBoardElement(eid, pool[eid], board.id, 'edge');\r

  \        let el = G.table[eid];\r

  \        let n1 = getVisual(el.corners[0]._obj);\r

  \        let n2 = getVisual(el.corners[1]._obj);\r

  \        edge.memInfo = {\r

  \          shape: 'line',\r

  \          memType: 'edge',\r

  \          x1: n1.memInfo.x,\r

  \          y1: n1.memInfo.y,\r

  \          x2: n2.memInfo.x,\r

  \          y2: n2.memInfo.y,\r

  \          x: (n1.x + n2.x) / 2,\r

  \          y: (n1.y + n2.y) / 2,\r

  \          thickness: 1,\r

  \          w: 1,\r

  \          h: 1,\r

  \        };\r

  \        dhelp[eid] = edge;\r

  \      }\r

  \    }\r

  \  }\r

  }"
makeEdgeW: "function makeEdgeW(dParent, v1, v2, dFromEdge, ew = 20) {\r

  \  mCircle(dParent, v1.x, v1.y, 5, 'red');\r

  \  let switched = false;\r

  \  if (v1.x == v2.x) {\r

  \    if (v1.y > v2.y) { let h = v2; v2 = v1; v1 = h; switched = true; }\r

  \    let w = ew / 2;\r

  \    let sp = `polygon(${v1.x - w + ew}px ${v1.y + dFromEdge + ew}px, ${v1.x
  + w + ew}px ${v1.y + dFromEdge + ew}px, ${v2.x + w + ew}px ${v2.y - dFromEdge
  + ew}px, ${v2.x - w + ew}px ${v2.y - dFromEdge + ew}px)`;\r

  \    console.log('sp', sp)\r

  \    let de = mDiv(dParent, { position: 'absolute', left: -ew, top: -ew, w:
  '120%', h: '120%', bg: 'random' });\r

  \    mStyle(de, { 'clip-path': sp });\r

  \    return de;\r

  \  }\r

  \  if (v1.x > v2.x) { let h = v2; v2 = v1; v1 = h; switched = true; }\r

  \  let dx = v2.x - v1.x;\r

  \  let dy = v2.y - v1.y;\r

  \  let m = dy / dx;\r

  \  let [x1, y1, x2, y2] = [v1.x, v1.y, v2.x, v2.y];\r

  \  let alpha = Math.atan(m);\r

  \  let xa = x1 + dFromEdge * Math.cos(alpha);\r

  \  let ya = y1 + dFromEdge * Math.sin(alpha);\r

  \  mCircle(dParent, xa, ya, 10, 'orange');\r

  \  let xe = x2 - dFromEdge * Math.cos(alpha);\r

  \  let ye = y2 - dFromEdge * Math.sin(alpha);\r

  \  mCircle(dParent, xe, ye, 10, 'orange');\r

  \  let m2 = -1 / m;\r

  \  let beta = Math.atan(m2);\r

  \  let w = ew / 2;\r

  \  let x1t = xa + w * Math.cos(beta);\r

  \  let y1t = ya + w * Math.sin(beta);\r

  \  mCircle(dParent, x1t, y1t, 5, 'green');\r

  \  let x1b = xa - w * Math.cos(beta);\r

  \  let y1b = ya - w * Math.sin(beta);\r

  \  mCircle(dParent, x1b, y1b, 5, 'green');\r

  \  let x2t = xe + w * Math.cos(beta);\r

  \  let y2t = ye + w * Math.sin(beta);\r

  \  mCircle(dParent, x2t, y2t, 5, 'violet');\r

  \  let x2b = xe - w * Math.cos(beta);\r

  \  let y2b = ye - w * Math.sin(beta);\r

  \  mCircle(dParent, x2b, y2b, 5, 'violet');\r

  \  let de = mDiv(dParent, { position: 'absolute', left: 0, top: 0, w:
  '120%', h: '120%', bg: 'random' });\r

  \  mStyle(de, { 'clip-path': `polygon(${x1t}px ${y1t}px, ${x2t}px ${y2t}px,
  ${x2b}px ${y2b}px, ${x1b}px ${y1b}px)` });\r

  \  return de;\r

  }"
makeElemDraggableTo: "function makeElemDraggableTo(elem, target, key) {\r

  \  if (isdef(key)) {\r

  \    if (nundef(target.ddKeys)) target.ddKeys = [];\r

  \    if (nundef(elem.ddKeys)) elem.ddKeys = [];\r

  \    addIf(target.ddKeys, key);\r

  \    addIf(elem.ddKeys, key);\r

  \  }\r

  \  if (nundef(elem.id)) elem.id = getUID();\r

  \  elem.draggable = true;\r

  \  elem.ondragstart = isdef(key) ? dragKey : drag;\r

  \  target.ondragover = isdef(key) ? allowDropKey : allowDrop;\r

  \  target.ondrop = isdef(key) ? dropKey : drop;\r

  }"
makeElemY: "function makeElemY(type, idParent, gName, level, { row = undefined,
  col = undefined, w = 0, h = 0, x = 0, y = 0, x1 = 0, y1 = 0, x2 = 0, y2 = 0,
  gap = 0, ipal = 0, bg = 0, fg = 0, shape = 'rect', border = 0, thickness = 0
  }) {\r

  \  let uid = getUID();\r

  \  let elem = { id: uid, type: type, parent: idParent, gName: gName, level:
  level };\r

  \  if (row !== undefined) {\r

  \    elem.row = row;\r

  \  }\r

  \  if (col !== undefined) {\r

  \    elem.col = col;\r

  \  }\r

  \  register(elem, uid, type, x, y);\r

  \  if (level > 1) {\r

  \    elem.w = w - gap;\r

  \    elem.h = h - gap;\r

  \    elem.x = x;\r

  \    elem.y = y;\r

  \  }\r

  \  if (level > 2) {\r

  \    elem.ms = new MS(uid, gName);\r

  \  }\r

  \  if (level > 3) {\r

  \    let ms = elem.ms;\r

  \    if (ipal) {\r

  \      ms.setbg(getpal(ipal));\r

  \    }\r

  \    if (bg) ms.setbg(bg);\r

  \    if (fg) ms.setfg(fg);\r

  \    switch (shape) {\r

  \      case 'circle':\r

  \        ms.ellipse({ w: elem.w, h: elem.h });\r

  \        break;\r

  \      case 'hex':\r

  \        ms.hex({ w: elem.w, h: elem.h });\r

  \        break;\r

  \      case 'line':\r

  \        let fill = ipal ? getpal(ipal) : fg ? fg : border;\r

  \        ms.line({ x1: x1, y1: y1, x2: x2, y2: y2, fill: fill, thickness:
  thickness });\r

  \        break;\r

  \      default:\r

  \        ms.rect({ w: elem.w, h: elem.h });\r

  \        break;\r

  \    }\r

  \  }\r

  \  if (level > 4) {\r

  \    let ms = elem.ms;\r

  \    switch (shape) {\r

  \      case 'circle':\r

  \        ms.ellipse({ className: 'overlay', w: elem.w, h: elem.h });\r

  \        break;\r

  \      case 'hex':\r

  \        ms.hex({ className: 'overlay', w: elem.w, h: elem.h });\r

  \        break;\r

  \      case 'line':\r

  \        let fill = ipal ? getpal(ipal) : fg ? fg : border;\r

  \        ms.line({ className: 'overlay', x1: x1, y1: y1, x2: x2, y2: y2,
  thickness: thickness });\r

  \        break;\r

  \      default:\r

  \        ms.rect({ className: 'overlay', w: elem.w, h: elem.h });\r

  \        break;\r

  \    }\r

  \  }\r

  \  if (elem.ms && type != 'edge') {\r

  \    elem.ms.setPos(x, y);\r

  \  }\r

  \  return elem;\r

  }"
makeEmoSetIndex: "function makeEmoSetIndex() {\r

  \  if (isdef(symBySet)) return;\r

  \  symBySet = {}; symKeysBySet = {}; symListBySet = {};\r

  \  for (const k in emoSets) {\r

  \    let set = emoSets[k];\r

  \    let name = set.name;\r

  \    let f = set.f;\r

  \    symBySet[name] = [];\r

  \    for (const k1 in symbolDict) {\r

  \      let info = symbolDict[k1];\r

  \      if (info.type == 'icon') continue;\r

  \      let o = info;\r

  \      if (nundef(o.group) || nundef(o.subgroups)) continue;\r

  \      let passt = f(o);\r

  \      if (!passt) continue;\r

  \      if (passt) {\r

  \        lookupSet(symBySet, [name, k1], info);\r

  \        lookupAddToList(symKeysBySet, [name], k1);\r

  \        lookupAddToList(symListBySet, [name], info);\r

  \      }\r

  \    }\r

  \  }\r

  \  makeGroupSub();\r

  }"
makeExpSequence: "function makeExpSequence() {\r

  \  G.operand = randomNumber(G.minNum, G.maxNum);\r

  \  G.op = chooseRandom(G.ops);\r

  \  G.step = G.op == 'minus' ? randomNumber(0, G.operand) :
  randomNumber(G.minFactor, G.maxFactor);\r

  \  G.oop = OPS[G.op];\r

  \  G.result = G.oop.f(G.operand, G.step);\r

  \  G.seq = [G.operand, G.oop.wr, G.step, '=', G.result];\r

  \  return G.seq;\r

  }"
makeFields: "function makeFields(pool, board, serverBoard, shape) {\r

  \  let serverFieldIds = _setToList(serverBoard.fields).map(x => x._obj);\r

  \  board.structInfo.fields = serverFieldIds;\r

  \  for (const fid of serverFieldIds) {\r

  \    let sField = pool[fid];\r

  \    let r = sField.row;\r

  \    let c = sField.col;\r

  \    let field = makeBoardElement(fid, sField, board.id, 'field');\r

  \    field.memInfo = shape == 'hex' ? getHexFieldInfo(board.structInfo, r,
  c) : getQuadFieldInfo(board.structInfo, r, c);\r

  \  }\r

  \  board.structInfo.vertices = correctPolys(board.structInfo.fields.map(x =>
  getVisual(x).memInfo.poly), 1);\r

  }"
makeGreyTransparent: "function makeGreyTransparent(ctx, color = 'white', sz =
  200) {\r

  \  var image = ctx.getImageData(0, 0, sz, sz);\r

  \  var imageData = image.data, length = imageData.length;\r

  \  let im = imageData;\r

  \  const x = 245;\r

  \  for (var i = 0; i < length; i += 4) {\r

  \    if (im[i] > x && im[i + 1] > x && im[i + 2] > x) {\r

  \      im[i + 3] = 0;\r

  \    }\r

  \  }\r

  \  image.data = imageData;\r

  \  ctx.putImageData(image, 0, 0);\r

  }"
makeGrid9: "function makeGrid9(d, centerW = '3fr', centerH = '3fr', gap = '2px')
  {\r

  \  d.style.setProperty('--grid_center_w', makeUnitString(centerW, 'fr'));\r

  \  d.style.setProperty('--grid_center_h', makeUnitString(centerH, 'fr'));\r

  \  d.style.setProperty('--grid-gap', gap);\r

  \  d.classList.add('grid9');\r

  \  let cells = [];\r

  \  for (rows1 = 0; rows1 < 3; rows1++) {\r

  \    cells[rows1] = [];\r

  \    for (cols1 = 0; cols1 < 3; cols1++) {\r

  \      let cell = document.createElement(\"div\");\r

  \      cell.innerText = (rows1 + ',' + cols1);\r

  \      d.appendChild(cell).className = \"grid-item\";\r

  \      cells[rows1].push(cell);\r

  \    }\r

  \  }\r

  \  return cells;\r

  }"
makeGroupSub: "function makeGroupSub() {\r

  \  symKeysByGroupSub = {};\r

  \  for (const k of symKeysBySet['all']) {\r

  \    let info = symbolDict[k];\r

  \    if (isEmpty(info.E) || isEmpty(info.D))
  lookupAddIfToList(symKeysByGroupSub, ['NA', info.group + '-' +
  info.subgroups], k);\r

  \    else lookupAddIfToList(symKeysByGroupSub, [info.group, info.subgroups],
  k);\r

  \  }\r

  }"
makeHand: "function makeHand(key, idParent, color, padding = 4, margin = 4) {\r

  \  let mk = makeArea(key, idParent);\r

  \  if (SPEC.showCardHandBackground) mk.setBg(isdef(color) ? color :
  randomColor());\r

  \  let dParent = mById(idParent);\r

  \  let bParent = getBounds(dParent);\r

  \  let areaTitleHeight = SPEC.showAreaNames ? getTextSize('happy',
  dParent).h : 0;\r

  \  let clearBoth = bParent.height > bParent.width;\r

  \  let zusatz = 2 * (padding + margin) + areaTitleHeight;\r

  \  let hCard = PREFERRED_CARD_HEIGHT ? PREFERRED_CARD_HEIGHT\r

  \    : bParent.height ? bParent.height - zusatz\r

  \      : 100;\r

  \  if (hCard < MIN_CARD_HEIGHT) hCard = MIN_CARD_HEIGHT;\r

  \  if (hCard > MAX_CARD_HEIGHT) hCard = MAX_CARD_HEIGHT;\r

  \  hParent = hCard + zusatz;\r

  \  let hTotal = hParent - 2 * (padding + margin) - areaTitleHeight;\r

  \  h = hTotal - 2 * padding;\r

  \  if (h > MAX_CARD_HEIGHT) {\r

  \    h = MAX_CARD_HEIGHT;\r

  \    hTotal = h + 2 * padding;\r

  \  }\r

  \  let bTitle = { height: 0 };\r

  \  if (SPEC.showCardHandName) {\r

  \    mk.title(stringAfter(key, '.'));\r

  \    bTitle = getBounds(mk.parts.title);\r

  \    mk.parts.title.style.setProperty('width', bTitle.width + 'px');\r

  \  }\r

  \  let hBody = h - bTitle.height;\r

  \  mk.body();\r

  \  let dBody = mk.parts.body;\r

  \  dBody.style.setProperty('height', hBody + 'px');\r

  \  let d = mk.elem;\r

  \  d.style.setProperty('padding', padding + 'px');\r

  \  d.style.setProperty('border-radius', padding + 'px');\r

  \  d.style.setProperty('margin', margin + 'px');\r

  \  d.style.setProperty('position', 'relative');\r

  \  d.style.setProperty('float', 'left');\r

  \  if (clearBoth) d.style.setProperty('clear', 'both');\r

  \  mk.hCard = hCard;\r

  \  mk.collectionKey = key;\r

  \  mk.adjustSize = true;\r

  \  return mk;\r

  }"
makeHigherOrderGroups: "function makeHigherOrderGroups() {\r

  \  for (const honame in higherOrderEmoSetNames) {\r

  \    for (const name of (higherOrderEmoSetNames[honame])) {\r

  \      for (const k in symBySet[name]) {\r

  \        let info = symbolDict[k];\r

  \        lookupSet(symBySet, [honame, k], info);\r

  \        lookupAddToList(symKeysBySet, [honame], k);\r

  \        lookupAddToList(symListBySet, [honame], info);\r

  \      }\r

  \    }\r

  \  }\r

  \  let s = '';\r

  \  for (const k in symKeysBySet) {\r

  \    s += k + ':' + symKeysBySet[k].length + ', ';\r

  \  }\r

  \  ensureSymByType();\r

  }"
makeHugeBoardInBoard: "function makeHugeBoardInBoard(num, rowsPerBoard) {\r

  \  let r = makeTreeNNEach(num, num);\r

  \  let params = { contentwalign: 'center', contenthalign: 'center',
  orientation: 'w', rows: rowsPerBoard, cols: num / rowsPerBoard };\r

  \  let uidRoot = r.tree.uid;\r

  \  let root = r.rNodes[uidRoot];\r

  \  root.params = params;\r

  \  for (const ch of root.children) {\r

  \    let n = r.rNodes[ch];\r

  \    n.params = params;\r

  \  }\r

  \  return r;\r

  }"
makeHugeBoardInBoardOld: "function makeHugeBoardInBoardOld(num, rowsPerBoard)
  {\r

  \  let r = makeTreeNNEach(num, num);\r

  \  return r;\r

  \  let params = { contentwalign: 'center', contenthalign: 'center',
  orientation: 'w', rows: rowsPerBoard, cols: num / rowsPerBoard };\r

  \  let uidRoot = r.tree.uid;\r

  \  let root = r.rNodes[uidRoot];\r

  \  root.params = params;\r

  \  for (const ch of root.children) {\r

  \    let n = r.rNodes[ch];\r

  \    n.params = params;\r

  \  }\r

  \  return r;\r

  }"
makeIdDefaultObject: function makeIdDefaultObject(oid) { return 'd_t_' + oid; }
makeIdDefaultPlayer: function makeIdDefaultPlayer(oid) { return 'd_p_' + oid; }
makeIdInfobox: function makeIdInfobox(oid) { return 'i_i_' + oid; }
makeInfobox: "function makeInfobox(ev, elem, scale) {\r

  \  let t = ev.target; while (isdef(t) && t != elem) t = t.parentNode; if
  (nundef(t)) { console.log('WRONG click', ev.target); return; }\r

  \  let di = DA.infobox; if (isdef(di)) {\r

  \    let inner = di.innerHTML;\r

  \    di.remove();\r

  \    DA.infobox = null;\r

  \    if (inner == elem.innerHTML) return;\r

  \  }\r

  \  let r = getRectInt(elem, dTable);\r

  \  let d = DA.infobox = mDiv(dTable, {\r

  \    bg: 'black', rounding: 10, fz: 24, position: 'absolute',\r

  \    w: r.w, h: r.h, left: r.l, top: r.t, transform: `scale(${scale})`\r

  \  }, 'dInfoBox', elem.innerHTML);\r

  \  d.innerHTML += '<div style=\"font-size:6px\">click to close</div><br>';\r

  \  d.onclick = () => { d.remove(); DA.infobox = null; }\r

  }"
makeInnoNumberDiv: "function makeInnoNumberDiv(n, fz) {\r

  \  return `<span style='background:white;color:black;padding:2px
  10px;border-radius:50%'>${n}</span>`;\r

  }"
makeInnoSymbolDiv: "function makeInnoSymbolDiv(info, bg, fz = 20) {\r

  \  return `<div
  style='text-align:center;display:inline;background-color:${bg};width:40px;pad\
  ding:2px ${fz / 2}px;\r

  \  font-size:${fz}px;font-family:${info.family}'>${info.text}</div>`;\r

  }"
makeItemDiv: "function makeItemDiv(item, options) {\r

  \  if (isdef(options.outerStyles) && isdef(options.ifs)) copyKeys(item,
  options.outerStyles, {}, Object.keys(options.ifs));\r

  \  let dOuter = mCreate('div', options.outerStyles, item.id);\r

  \  if (isdef(item.textShadowColor)) {\r

  \    let sShade = '0 0 0 ' + item.textShadowColor;\r

  \    if (options.showPic) {\r

  \      options.picStyles['text-shadow'] = sShade;\r

  \      options.picStyles.fg = colorFrom('black', options.contrast);
  //'#00000080' '#00000030' \r

  \    } else {\r

  \      options.labelStyles['text-shadow'] = sShade;\r

  \      options.labelStyles.fg = colorFrom('black', options.contrast);
  //'#00000080' '#00000030' \r

  \    }\r

  \  }\r

  \  let dLabel;\r

  \  if (options.showLabels && options.labelTop == true) { dLabel =
  mText(item.label, dOuter, options.labelStyles); }\r

  \  let dPic;\r

  \  if (options.showPic) {\r

  \    dPic = mDiv(dOuter, { family: item.info.family });\r

  \    dPic.innerHTML = item.info.text;\r

  \    if (isdef(options.picStyles)) mStyleX(dPic, options.picStyles);\r

  \  }\r

  \  if (options.showLabels && options.labelBottom == true) { dLabel =
  mText(item.label, dOuter, options.labelStyles); }\r

  \  if (isdef(options.handler)) dOuter.onclick = options.handler;\r

  \  iAdd(item, { options: options, div: dOuter, dLabel: dLabel, dPic: dPic
  });\r

  \  if (isdef(item.textShadowColor)) { applyColorkey(item, options); }\r

  \  return dOuter;\r

  }"
makeItemDivs: function makeItemDivs(items, options) { for (let i = 0; i <
  items.length; i++) { makeItemDiv(items[i], options) } }
makeItemHintable: "function makeItemHintable(item) {\r

  \  let d = iDiv(item);\r

  \  let dov = mDiv100(d);\r

  \  let rect = getRect(d);\r

  \  mStyleX(dov, { position: 'absolute', w: rect.w, h: rect.h })\r

  \  iAdd(item, { overlay: dov });\r

  \  dov.style.userSelect = 'none';\r

  }"
makeKeyValueTable: "function makeKeyValueTable(data) {\r

  \  let cols = 2;\r

  \  let rows = data.length;\r

  \  let res = `<table>`;\r

  \  for (const k in data) {\r

  \    res += `<tr><th>${k}</th><td>${data[k]}</td></tr>`;\r

  \  }\r

  \  res += `</table>`;\r

  \  let res1 = (elem = new DOMParser().parseFromString(res,
  'text/html').body.firstChild);\r

  \  return res1;\r

  }"
makeLineSegment: "function makeLineSegment(mobj, o, msLoc, sz, color) {\r

  \  let [x1, y1, x2, y2] = msLoc.getEndPointsOfLineSegmentOfLength(sz);\r

  \  mobj.line({ cap: 'round', thickness: msLoc.thickness, x1: x1, y1: y1, x2:
  x2, y2: y2 }).setBg(color).attach();\r

  \  mobj.line({ className: 'overlay', cap: 'round', thickness:
  msLoc.thickness, x1: x1, y1: y1, x2: x2, y2: y2 });\r

  }"
makeLogArea: "function makeLogArea(plid) {\r

  \  let mobj = new MOBJ();\r

  \  let idParent = 'a_d_log';\r

  \  let id = idParent + '_' + plid;\r

  \  mobj.id = id;\r

  \  let el = document.createElement('div');\r

  \  el.style.position = 'absolute';\r

  \  el.style.left = '0px';\r

  \  el.style.top = '0px';\r

  \  el.style.width = '100%';\r

  \  el.style.height = '100%';\r

  \  el.style.overflowY = 'auto';\r

  \  mobj.elem = el;\r

  \  mobj.elem.id = id;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(mobj.elem);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  mobj.idParent = idParent;\r

  \  let parent = UIS[idParent];\r

  \  parent.children.push(id);\r

  \  mobj.attach();\r

  \  UIS[id] = mobj;\r

  \  listKey(IdOwner, id[2], id);\r

  \  return mobj;\r

  }"
makeMainBoardElementVisual: "function makeMainBoardElementVisual(oid, o) {\r

  \  let id = 'm_t_' + oid;\r

  \  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
  return; }\r

  \  let mobj = new MOBJ();\r

  \  mobj.id = id;\r

  \  let domel = document.createElementNS('http://www.w3.org/2000/svg',
  'g');\r

  \  mobj.elem = domel;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(domel);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  let locElem = getVisual(o.loc._obj);\r

  \  let parent = UIS[locElem.idParent];\r

  \  let idParent = parent.id;\r

  \  mobj.idParent = idParent;\r

  \  parent.children.push(id);\r

  \  mobj.o = o;\r

  \  mobj.isa.movable = 'loc';\r

  \  linkObjects(id, oid);\r

  \  listKey(IdOwner, id[2], id);\r

  \  UIS[id] = mobj;\r

  \  let color = S.settings.useColorHintForObjects ? getColorHint(o) :
  randomColor();\r

  \  if (nundef(color)) color = 'black';\r

  \  let boardElemType = getBoardElementStandardType(locElem);\r

  \  let sizeInfo = S.settings.pieceSizeRelativeToLoc[boardElemType];\r

  \  let baseValue = locElem[sizeInfo[0]];\r

  \  let percent = Number(sizeInfo[1]);\r

  \  let sz = (baseValue * percent) / 100;\r

  \  if (boardElemType != 'edge') {\r

  \    makePictoPiece(mobj, o, sz, color)\r

  \    mobj.setPos(locElem.x, locElem.y);\r

  \  } else {\r

  \    makeLineSegment(mobj, o, locElem, sz, color);\r

  \  }\r

  \  mobj.attach();\r

  \  return mobj;\r

  }"
makeMainPlayer: "function makeMainPlayer(oid, o, areaName) {\r

  \  let id = 'm_p_' + oid;\r

  \  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
  return; }\r

  \  let mobj = new MOBJ();\r

  \  mobj.id = id;\r

  \  let title = 'player: ' + oid + '(' + getPlayerColorString(oid) + ', ' +
  getUser(oid) + ')';\r

  \  let domel = document.createElement('div');\r

  \  domel.style.cursor = 'default';\r

  \  mobj.elem = domel;\r

  \  mobj.parts.elem = mobj.elem;\r

  \  mobj.domType = getTypeOf(domel);\r

  \  mobj.cat = DOMCATS[mobj.domType];\r

  \  let idParent = areaName;\r

  \  mobj.idParent = idParent;\r

  \  let parent = UIS[idParent];\r

  \  parent.children.push(id);\r

  \  let sTitle = title;\r

  \  let color = G.playersAugmented[oid].color;\r

  \  mobj.title(sTitle, 'title', color);\r

  \  mobj.o = o;\r

  \  mobj.isa.player = true;\r

  \  linkObjects(id, oid);\r

  \  listKey(IdOwner, id[2], id);\r

  \  UIS[id] = mobj;\r

  \  mobj.attach();\r

  \  return mobj;\r

  }"
makeMainVisual: "function makeMainVisual(oid, o) {\r

  \  if (!('loc' in o) || !isBoardElement(o.loc._obj)) return null;\r

  \  let id = 'm_t_' + oid;\r

  \  if (isdef(UIS[id])) { console.log('CANNOT create ' + id + '
  TWICE!!!!!!!!!'); return; }\r

  \  let ms = new RSG();\r

  \  ms.id = id;\r

  \  let domel = document.createElementNS('http://www.w3.org/2000/svg',
  'g');\r

  \  ms.elem = domel;\r

  \  ms.parts.elem = ms.elem;\r

  \  ms.domType = getTypeOf(domel);\r

  \  ms.cat = DOMCATS[ms.domType];\r

  \  let locElem = getVisual(o.loc._obj);\r

  \  let parent = UIS[locElem.idParent];\r

  \  let idParent = parent.id;\r

  \  ms.idParent = idParent;\r

  \  parent.children.push(id);\r

  \  ms.o = o;\r

  \  ms.isa.movable = 'loc';\r

  \  linkObjects(id, oid);\r

  \  listKey(IdOwner, id[2], id);\r

  \  UIS[id] = ms;\r

  \  let color = getColorHint(o);\r

  \  let [w, h] = locElem.isa.corner ? [locElem.w / 2, locElem.h / 2]\r

  \    : locElem.isa.field ? [locElem.w / 4, locElem.h / 4] :
  [locElem.thickness + 2, locElem.thickness + 2];\r

  \  let [x, y] = [locElem.x, locElem.y];\r

  \  ms.ellipse({ w: w, h: h, fill: color }); ms.setPos(x, y); ms.attach();\r

  \  return ms;\r

  }"
MakeMove: "function MakeMove(move) {\r

  \  var from = FROMSQ(move);\r

  \  var to = TOSQ(move);\r

  \  var side = brd_side;\r

  \  brd_history[brd_hisPly].posKey = brd_posKey;\r

  \  if ((move & MFLAGEP) != 0) {\r

  \    if (side == COLOURS.WHITE) {\r

  \      ClearPiece(to - 10);\r

  \    } else {\r

  \      ClearPiece(to + 10);\r

  \    }\r

  \  } else if ((move & MFLAGCA) != 0) {\r

  \    switch (to) {\r

  \      case SQUARES.C1:\r

  \        MovePiece(SQUARES.A1, SQUARES.D1);\r

  \        break;\r

  \      case SQUARES.C8:\r

  \        MovePiece(SQUARES.A8, SQUARES.D8);\r

  \        break;\r

  \      case SQUARES.G1:\r

  \        MovePiece(SQUARES.H1, SQUARES.F1);\r

  \        break;\r

  \      case SQUARES.G8:\r

  \        MovePiece(SQUARES.H8, SQUARES.F8);\r

  \        break;\r

  \      default: break;\r

  \    }\r

  \  }\r

  \  if (brd_enPas != SQUARES.NO_SQ) HASH_EP();\r

  \  HASH_CA();\r

  \  brd_history[brd_hisPly].move = move;\r

  \  brd_history[brd_hisPly].fiftyMove = brd_fiftyMove;\r

  \  brd_history[brd_hisPly].enPas = brd_enPas;\r

  \  brd_history[brd_hisPly].castlePerm = brd_castlePerm;\r

  \  brd_castlePerm &= CastlePerm[from];\r

  \  brd_castlePerm &= CastlePerm[to];\r

  \  brd_enPas = SQUARES.NO_SQ;\r

  \  HASH_CA();\r

  \  var captured = CAPTURED(move);\r

  \  brd_fiftyMove++;\r

  \  if (captured != PIECES.EMPTY) {\r

  \    ClearPiece(to);\r

  \    brd_fiftyMove = 0;\r

  \  }\r

  \  brd_hisPly++;\r

  \  brd_ply++;\r

  \  if (PiecePawn[brd_pieces[from]] == BOOL.TRUE) {\r

  \    brd_fiftyMove = 0;\r

  \    if ((move & MFLAGPS) != 0) {\r

  \      if (side == COLOURS.WHITE) {\r

  \        brd_enPas = from + 10;\r

  \      } else {\r

  \        brd_enPas = from - 10;\r

  \      }\r

  \      HASH_EP();\r

  \    }\r

  \  }\r

  \  MovePiece(from, to);\r

  \  var prPce = PROMOTED(move);\r

  \  if (prPce != PIECES.EMPTY) {\r

  \    ClearPiece(to);\r

  \    AddPiece(to, prPce);\r

  \  }\r

  \  brd_side ^= 1;\r

  \  HASH_SIDE();\r

  \  if (SqAttacked(brd_pList[PCEINDEX(Kings[side], 0)], brd_side)) {\r

  \    TakeMove();\r

  \    return BOOL.FALSE;\r

  \  }\r

  \  return BOOL.TRUE;\r

  }"
makemove: "function makemove(t) {\r

  \  let myMoves = t.moves[Session.cur_user];\r

  \  Session.cur_step = myMoves.length + 1;\r

  \  myMoves.push(randomNumber(1000, 2000));\r

  \  Session.cur_move = arrLast(myMoves);\r

  \  DA.next = get_play_dep(Session.cur_step, Session.cur_move);\r

  \  save_tables();\r

  }"
makeNewLayout: "function makeNewLayout(g1) {\r

  \  let nodes = g1.getNodes();\r

  \  let x = 10; let y = 10;\r

  \  for (n of nodes) {\r

  \    n.position({ x: x, y: y });\r

  \    x += 50; y += 50; if (y > 250) { y = 10; } if (x > 550) { x = 10; }\r

  \  }\r

  }"
makeNewSyms: "async function makeNewSyms() {\r

  \  let etext = await route_path_text('../assets/speech/di/_wE.txt');\r

  \  let ew = etext.split('\\n');\r

  \  console.log('eng', ew);\r

  \  let dtext = await route_path_text('../assets/speech/di/_wD.txt');\r

  \  let ftext = await route_path_text('../assets/speech/di/_wF.txt');\r

  \  let stext = await route_path_text('../assets/speech/di/_wS.txt');\r

  \  let ctext = await route_path_text('../assets/speech/di/_wC.txt');\r

  \  let dw = dtext.split('\\n');\r

  \  let fw = ftext.split('\\n');\r

  \  let sw = stext.split('\\n');\r

  \  let cw = ctext.split('\\n');\r

  \  let edict = {};\r

  \  for (let i = 0; i < ew.length; i++) {\r

  \    edict[ew[i]] = { E: ew[i], D: dw[i], F: fw[i], S: sw[i], C: cw[i] };\r

  \  }\r

  \  let symNew = {};\r

  \  for (const k in symbolDict) {\r

  \    let info = symbolDict[k];\r

  \    let inew = {};\r

  \    for (const k1 of ['key', 'hexcode', 'hex', 'family', 'text', 'type',
  'isDuplicate']) {\r

  \      if (isdef(info[k1])) inew[k1] = info[k1];\r

  \    }\r

  \    inew.w = info.w;\r

  \    inew.h = info.h;\r

  \    let wk = inew.E = isdef(info.bestE) ? info.bestE : k;\r

  \    let e = edict[wk];\r

  \    if (isdef(e)) {\r

  \      inew.D = e.D;\r

  \      inew.F = e.F;\r

  \      inew.S = e.S;\r

  \      inew.C = e.C;\r

  \    }\r

  \    if (nundef(inew.D) && isdef(info.bestD)) inew.D = info.bestD;\r

  \    symNew[k] = inew;\r

  \    console.log('key', k, inew)\r

  \  }\r

  \  return symNew;\r

  }"
makeNumberSpan: "function makeNumberSpan(n, bg, fg, fz, rounding = '50%') {\r

  \  return `<span
  style='font-size:${fz}px;background:${bg};color:${fg};padding:0px
  5px;border-radius:${rounding}'>${n}</span>`;\r

  }"
makePage: "function makePage() {\r

  \  var dMain = document.getElementById('dMain');\r

  \  mStyle(dMain, { bg: 'indigo' });\r

  \  let [dHeaderLeft, dTitle, dHeaderRight] = std3title(dMain, 'Aristocracy',
  { family: 'AlgerianRegular' });\r

  \  let [dLeft, dMiddle, dRight] = std3fold(dMain);\r

  \  let dFooter = mDiv(dMain, { bg: '#00000050' }, 'dFooter', 'footer');\r

  \  let bMenuLeft = stdMenuButton(dHeaderLeft);\r

  \  stdSidebarController(bMenuLeft, 'dLeft');\r

  \  let bMenuRight = stdMenuButton(dHeaderRight);\r

  \  stdSidebarController(bMenuRight, 'dRight');\r

  \  return dMiddle;\r

  }"
makePerleDiv: "function makePerleDiv(item, outerStyles, imgStyles, labelStyles,
  labelPos = null, magnify = true, handler = null, useNewImage = false) {\r

  \  let defOuterStyles = {\r

  \    display: 'inline-flex', 'flex-direction': 'column',\r

  \    'justify-content': 'center', 'align-items': 'center', 'vertical-align':
  'top',\r

  \    padding: 0, box: true\r

  \  };\r

  \  addKeys(defOuterStyles, outerStyles);\r

  \  let dOuter = mCreate('div', outerStyles);\r

  \  if (labelPos && nundef(item.label)) { item.label =
  item.text.toLowerCase(); }\r

  \  let dLabel;\r

  \  let [w, h, fz] = [labelStyles.wmax, labelStyles.hmax, labelStyles.fz];\r

  \  let sz = simpleFit(item.label, w, h, fz);\r

  \  labelStyles = sz;\r

  \  dLabel = mTextFit(item.label, { wmax: w, hmax: h }, null, labelStyles);\r

  \  if (labelPos[0] == 't') dLabel = mText(item.label, dOuter,
  labelStyles);\r

  \  let x;\r

  \  imgStyles.rounding = '50%';\r

  \  if (useNewImage) {\r

  \    imgStyles.rounding = '50%';\r

  \    x = mAppend(dOuter, NEWLY_CREATED_IMAGE);\r

  \    mStyleX(x, imgStyles);\r

  \  } else {\r

  \    x = mImg(item.path, dOuter, imgStyles);\r

  \  }\r

  \  if (magnify) {\r

  \    x.onmouseenter = ev => { if (ev.ctrlKey) mMagnify(x, item); }\r

  \    x.onmouseleave = ev => mCancelMagnify(x, item.path);\r

  \  }\r

  \  if (labelPos[0] == 'b') dLabel = mText(item.label, dOuter,
  labelStyles);\r

  \  if (isdef(handler)) dOuter.onclick = ev => handler(ev, item);\r

  \  item.type = 'perle'; dOuter.id = iRegister(item);\r

  \  iAdd(item, { div: dOuter, dLabel: dLabel, dImg: x });\r

  \  return dOuter;\r

  }"
makePictoCard: "function makePictoCard(oid, o) {\r

  \  let symbolKeyPropName = 'name';\r

  \  let key = _getSymbolKey(o[symbolKeyPropName]);\r

  \  let symbol = symbols[key];\r

  \  let color = symbolColors[key];\r

  \  let d = document.createElement('div');\r

  \  $(d).on(\"mouseenter\", function () { magnifyFront(this.id); });\r

  \  $(d).on(\"mouseleave\", function () { minifyBack(this.id); });\r

  \  d.innerHTML = 'hallo';\r

  \  d.style.position = 'absolute';\r

  \  let dx = 0;\r

  \  d.style.left = '' + dx + 'px';\r

  \  d.style.top = '0px';\r

  \  let ch = iconChars[symbol];\r

  \  let text = String.fromCharCode('0x' + ch);\r

  \  let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';\r

  \  d.innerHTML = `\r

  \    <div class=\"cardCatan\">\r

  \      <p style='font-size:22px;'>${o.name}</p>\r

  \      <div class=\"cardCenter\">\r

  \        <div class=\"circular\" style='background:${color}'><span
  style='color:white;font-size:70px;font-weight:900;font-family:${family}'>${te\
  xt}</span></div>\r

  \      </div>\r

  \      <hr>\r

  \      <p style='font-size:20px;'>${o.desc}</p>\r

  \      <div
  style='color:${color};position:absolute;left:8px;top:8px;width:35px;height:35\
  px'>\r

  \        <span style='font-family:${family}'>${text}</span>\r

  \      </div>\r

  \    </div>\r

  \  `;\r

  \  return d;\r

  }"
makePictoCardDomel: "function makePictoCardDomel(oCard) {\r

  \  if (lookup(SPEC, ['typeMappings', 'card'])) {\r

  \    for (const k in SPEC.typeMappings.card) {\r

  \      oCard[k] = oCard[SPEC.typeMappings.card[k]];\r

  \    }\r

  \  }\r

  \  let el = cardFace(oCard);\r

  \  return el;\r

  }"
makePictoPiece: "function makePictoPiece(mobj, o, sz, color) {\r

  \  let [w, h] = [sz, sz];\r

  \  let sym = o.obj_type;\r

  \  if (sym in S.settings.symbols) { sym = S.settings.symbols[sym]; }\r

  \  if (!(sym in iconChars)) {\r

  \    symNew = Object.keys(iconChars)[randomNumber(5, 120)];\r

  \    S.settings.symbols[sym] = symNew;\r

  \    sym = symNew;\r

  \  }\r

  \  mobj.ellipse({ w: w, h: h, fill: color, alpha: .3 });\r

  \  let pictoColor = color == 'black' ? randomColor() : color;\r

  \  mobj.pictoImage(sym, pictoColor, sz * 2 / 3);\r

  }"
makePlayermodeReadOnly: "function makePlayermodeReadOnly(mode) {\r

  \  let el = getPlayermodeRadio(mode);\r

  \  el = document.getElementById('c_b_mm_' + mode);\r

  \  $(el).attr({ 'disabled': true, });\r

  \  document.getElementById('span_' + mode).style.color = 'silver';\r

  }"
makePlayerReadOnly: "function makePlayerReadOnly(i) {\r

  \  let el = getPlayerRadio(i);\r

  \  $(el).attr({ 'disabled': true, });\r

  }"
makePlayerTypeReadOnlyX: "function makePlayerTypeReadOnlyX(i) {\r

  \  let prefixPl = 'c_b_mm_pl';\r

  \  let pltId = prefixPl + 't' + i;\r

  \  document.getElementById(pltId).readOnly = true;\r

  }"
makePlayerTypesReadOnly: "function makePlayerTypesReadOnly() {\r

  \  for (let i = 1; i <= 8; i += 1) {\r

  \    makePlayerTypeReadOnly(i);\r

  \  }\r

  }"
makePool: "function makePool(cond, source, R) {\r

  \  if (nundef(cond)) return [];\r

  \  else if (cond == 'all') return source;\r

  \  let pool = [];\r

  \  for (const oid of source) {\r

  \    let o = R.getO(oid);\r

  \    if (!evalConds(o, cond)) continue;\r

  \    pool.push(oid);\r

  \  }\r

  \  return pool;\r

  }"
makeRandomElement: "function makeRandomElement() {\r

  \  let domel = document.createElement('div');\r

  \  mStyle(domel, { width: 100, height: 100, 'background-color': 'red',
  position: 'fixed', left: 0, top: 0 });\r

  \  return domel;\r

  }"
makeRandomTree: "function makeRandomTree() {\r

  \  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };\r

  \  let n = r.tree = addManual00Node(null, r);\r

  \  recPopulateTree(n, r, 3);\r

  \  return r;\r

  }"
makeRect: "function makeRect(x, y, w, h) { let r = { x: x, y: y, w: w, h: h };
  extendRect(r); return r; }"
makeRefLinkDiv: "function makeRefLinkDiv(val, refs, prop, prefix) {\r

  \  let cl = prefix + '_r_' + getUID(); let ref = { oids: [val[prop]], id: cl
  }; refs.push(ref);\r

  \  let sval = `<div id=${cl} class='up10
  hallo'>${val[prop].toString()}</div>`;\r

  \  return sval;\r

  }"
makeRefLinkDiv4_obj: function makeRefLinkDiv4_obj(val, refs) { return
  makeRefLinkDiv(val, refs, '_obj', 't'); }
makeRefLinkDiv4_player: function makeRefLinkDiv4_player(val, refs) { return
  makeRefLinkDiv(val, refs, '_player', 'p'); }
makeRefLinkDiv4ListOf_obj: "function makeRefLinkDiv4ListOf_obj(val, refs,
  className = 'up10 hallo') {\r

  \  return makeRefLinkDivList(val, refs, '_obj', 't', className);\r

  }"
makeRefLinkDiv4ListOf_player: "function makeRefLinkDiv4ListOf_player(val, refs,
  className = 'up10 hallo') {\r

  \  return makeRefLinkDivList(val, refs, '_player', 'p', className);\r

  }"
makeRefLinkDiv4MatrixOf_obj: "function makeRefLinkDiv4MatrixOf_obj(val, refs)
  {\r

  \  let rows = val._ndarray;\r

  \  let sval = `<div>`;\r

  \  let rowClass = 'up2 hallo';\r

  \  for (const row of rows) {\r

  \    sval += makeRefLinkDiv4ListOf_obj(row, refs, rowClass) + '<br>';\r

  \    rowClass = 'hallo';\r

  \  }\r

  \  sval += '</div>';\r

  \  return sval;\r

  }"
makeRefLinkDivList: "function makeRefLinkDivList(val, refs, prop, prefix,
  className = 'up10 hallo') {\r

  \  let cl = prefix + '_r_' + getUID(); let ref = { oids: val.filter(x =>
  isdef(x)).map(x => x[prop]), id: cl }; refs.push(ref);\r

  \  let sval = `<div id=${cl} class='${className}'>${val.map(x => !x ? '_' :
  x[prop]).toString()}</div>`;\r

  \  return sval;\r

  }"
makeRefs: "function makeRefs(idParent, refs) {\r

  \  for (const ref of refs) {\r

  \    let id = ref.id;\r

  \    let oids = ref.oids;\r

  \    if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
  return; }\r

  \    let mobj = new MOBJ();\r

  \    mobj.id = id;\r

  \    let domel = document.getElementById(id);\r

  \    mobj.elem = domel;\r

  \    mobj.parts.elem = mobj.elem;\r

  \    mobj.domType = getTypeOf(domel);\r

  \    mobj.cat = DOMCATS[mobj.domType];\r

  \    mobj.idParent = idParent;\r

  \    let parent = UIS[idParent];\r

  \    parent.children.push(id);\r

  \    mobj.isAttached = true;\r

  \    mobj.isa.ref = true;\r

  \    mobj.o = ref.oids;\r

  \    for (const oid of ref.oids) linkObjects(id, oid);\r

  \    listKey(IdOwner, id[2], id);\r

  \    UIS[id] = mobj;\r

  \  }\r

  }"
makeRoot: "function makeRoot() {\r

  \  let mobj = new MOBJ();\r

  \  let id = 'R_d_root';\r

  \  mobj.id = id;\r

  \  mobj.elem = document.getElementById(id);\r

  \  mobj.domType = getTypeOf(mobj.elem);\r

  \  mobj.IdParent = null;\r

  \  mobj.isAttached = true;\r

  \  UIS[id] = mobj;\r

  \  return mobj;\r

  }"
makeRows: "function makeRows(d, rows, cols, gap = '2px') {\r

  \  d.style.setProperty('--grid-rows', rows);\r

  \  d.style.setProperty('--grid-cols', cols);\r

  \  d.style.setProperty('--grid-gap', gap);\r

  \  for (cols = 0; cols < (rows * cols); cols++) {\r

  \    let cell = document.createElement(\"div\");\r

  \    cell.innerText = (cols + 1);\r

  \    d.appendChild(cell).className = \"grid-item\";\r

  \  };\r

  };"
makeSidebar00: "function makeSidebar00(d, d1, d2) {\r

  \  mStyleX(d1, { h: '100%', w: 100, position: 'absolute', z: 1, top: 0,
  left: 0, overflow: 'hidden', transition: '0.5s' });\r

  \  mStyleX(d2, { maleft: 100, h: '100%', box: true, transition: '0.5s' },
  null, null)\r

  \  d2.onclick = () => {\r

  \    mToggle(d1, 'width', 0, 100); mToggle(d2, 'margin-left', 0, 100);\r

  \  }\r

  }"
makeSimpleString: "function makeSimpleString(d) {\r

  \  show(d);\r

  \  let html = '';\r

  \  for (const node of d.childNodes) { if (isdef(node.innerHTML)) html +=
  node.innerHTML; else html += node.nodeValue; }\r

  \  d.innerHTML = html;\r

  }"
makeSimplestTree: "function makeSimplestTree() {\r

  \  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };\r

  \  let n = r.tree = addManual00Node(null, r);\r

  \  addManual00Node(n, r);\r

  \  return r;\r

  }"
makeSimpleTree: "function makeSimpleTree(numChildren = 2) {\r

  \  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };\r

  \  let n = r.tree = addManual00Node(null, r);\r

  \  for (let i = 0; i < numChildren; i++) addManual00Node(n, r);\r

  \  return r;\r

  }"
makeStapel: "function makeStapel(elem, n) {\r

  \  let parent = elem;\r

  \  for (let i = 1; i <= n; i++) {\r

  \    let dummy = document.createElement('div');\r

  \    elem.appendChild(dummy);\r

  \    dummy.classList.add('cardBack');\r

  \    elem = dummy;\r

  \  }\r

  \  return elem;\r

  }"
makeString: "function makeString(obj, prop, maxlen = 50, isStart = true) {\r

  \  let s = prop + ':';\r

  \  if (prop in obj) {\r

  \    let s1 = JSON.stringify(obj[prop]);\r

  \    if (maxlen > 0) {\r

  \      s += isStart ? s1.substring(0, maxlen) : s1.substring(s.length -
  maxlen);\r

  \    } else {\r

  \      s += s1;\r

  \    }\r

  \  } else {\r

  \    s += ' not present';\r

  \  }\r

  \  return s;\r

  }"
makeStrings: "function makeStrings(obj, props, maxlen = 50, isStart = true) {\r

  \  strs = props.map(x => makeString(obj, x)).join('\\n');\r

  \  return strs;\r

  }"
makeSurePlayerColorsAreContrasting: "function
  makeSurePlayerColorsAreContrasting(human, ai) {\r

  \  ai.color = RED;\r

  }"
makeSvg: "function makeSvg(w, h) {\r

  \  const svg1 = document.createElementNS('http://www.w3.org/2000/svg',
  'svg');\r

  \  svg1.setAttribute('width', w);\r

  \  svg1.setAttribute('height', h);\r

  \  return svg1;\r

  }"
makeSymbolSpan: "function makeSymbolSpan(info, bg, fg, fz, rounding = '50%') {\r

  \  let patop = Math.min(2, fz * .2);\r

  \  let pad = '5% 10%'; pad = '3px 5px'; pad = `${patop}px ${patop * 2}px`;\r

  \  if (info.key == 'queen-crown') pad = `${patop}px ${patop}px ${1}px
  ${patop}px`;\r

  \  else if (info.key == 'leaf') pad = `${1}px ${patop}px ${patop}px
  ${patop}px`;\r

  \  else if (info.key == 'white-tower') pad = `${patop}px ${patop * 2}px
  ${patop - 1}px ${patop * 2}px`;\r

  \  return `<div style='box-sizing:border-box;padding:${pad};min-height:${fz
  +
  3}px;display:inline-block;font-family:${info.family};font-size:${fz}px;backgr\
  ound:${bg};color:${fg};border-radius:${rounding}'>${info.text}</div>`;\r

  }"
makeTable: "function makeTable(tableName, rowHeaders, colHeaders) {\r

  \  let cols = colHeaders.length + 1;\r

  \  let rows = rowHeaders.length + 1;\r

  \  let sh = `<table id='${tableName}'><tr><th></th>`;\r

  \  for (const ch of colHeaders) {\r

  \    sh += `<th id='${ch}Header'>${ch}</th>`;\r

  \  }\r

  \  sh += `</tr>`;\r

  \  for (const rh of rowHeaders) {\r

  \    sh += `<tr id='${rh}${tableName}'><th>${rh}</th>`;\r

  \    for (const ch of colHeaders) {\r

  \      sh += `<td id='${rh}${ch}'>0</td>`;\r

  \    }\r

  \    sh += `</tr>`;\r

  \  }\r

  \  sh += `</table>`;\r

  \  let res = (elem = new DOMParser().parseFromString(sh,
  'text/html').body.firstChild);\r

  \  return res;\r

  }"
makeTableTreeX: "function makeTableTreeX(fStruct, { presentationStrategy,
  fContent, fType, autoType, positioning = 'none', params } = {}) {\r

  \  R = fStruct();\r

  \  if (isdef(params)) { for (const uid in params) { R.rNodes[uid].params =
  params[uid]; } }\r

  \  if (isdef(autoType)) {\r

  \    for (const uid in R.rNodes) {\r

  \      let v = R.rNodes[uid];\r

  \      let val = autoType;\r

  \      if (!val) delete v.type; else v.type = val;\r

  \    }\r

  \  }\r

  \  if (isdef(fType)) {\r

  \    for (const uid in R.rNodes) {\r

  \      let v = R.rNodes[uid];\r

  \      let val = fType(v, R);\r

  \      if (!val) delete v.type; else v.type = val;\r

  \    }\r

  \  }\r

  \  if (isdef(fContent)) {\r

  \    for (const uid in R.rNodes) {\r

  \      let v = R.rNodes[uid];\r

  \      let val = fContent(v, R);\r

  \      if (!val) delete v.content; else v.content = val;\r

  \    }\r

  \  }\r

  \  let d = mBy('table');\r

  \  d.style.position = 'relative';\r

  \  R.baseArea = 'table';\r

  \  recUiTestX(R.tree, R);\r

  \  let root = R.uiNodes[R.tree.uid];\r

  \  if (positioning == 'random') {\r

  \    recPosRandomUiTreeX(R.tree.uid, R, { wmax: 6, hmax: 4, xmax: 50, ymax:
  25, granularity: 10 });\r

  \    delete root.params.size;\r

  \    delete root.params.pos;\r

  \  } else if (positioning == 'regular') {\r

  \    recPosRegularUiTree(R.tree.uid, R);\r

  \    delete root.params.size;\r

  \    delete root.params.pos;\r

  \  } else {\r

  \  }\r

  \  R.presentationStrategy = isdef(presentationStrategy) ?
  presentationStrategy : R.defs.defaultPresentationStrategy;\r

  \  return R;\r

  }"
makeTestButton: "function makeTestButton(caption, func, container) {\r

  \  let b = document.createElement('button')\r

  \  b.textContent = capitalize(caption);\r

  \  container.appendChild(b)\r

  \  b.addEventListener('click', func);\r

  \  return b;\r

  }"
makeTree33: "function makeTree33() {\r

  \  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };\r

  \  let n = r.tree = addManual00Node(null, r);\r

  \  let n1;\r

  \  for (let i = 0; i < 3; i++) {\r

  \    n1 = addManual00Node(n, r);\r

  \  }\r

  \  for (let i = 0; i < 3; i++) {\r

  \    addManual00Node(n1, r);\r

  \  }\r

  \  return r;\r

  }"
makeTree332x2: "function makeTree332x2() {\r

  \  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };\r

  \  let n = r.tree = addManual00Node(null, r);\r

  \  let n1;\r

  \  for (let i = 0; i < 3; i++) {\r

  \    n1 = addManual00Node(n, r);\r

  \  }\r

  \  let n2, n3;\r

  \  for (let i = 0; i < 3; i++) {\r

  \    let nChild = addManual00Node(n1, r);\r

  \    if (i == 0) n2 = nChild;\r

  \    else if (i == 2) n3 = nChild;\r

  \  }\r

  \  for (let i = 0; i < 2; i++) { addManual00Node(n2, r); }\r

  \  for (let i = 0; i < 2; i++) { addManual00Node(n3, r); }\r

  \  return r;\r

  }"
makeTreeNN: "function makeTreeNN(num1, num2) {\r

  \  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };\r

  \  let n = r.tree = addManual00Node(null, r);\r

  \  let n1;\r

  \  for (let i = 0; i < num1; i++) {\r

  \    n1 = addManual00Node(n, r);\r

  \  }\r

  \  for (let i = 0; i < num2; i++) {\r

  \    addManual00Node(n1, r);\r

  \  }\r

  \  return r;\r

  }"
makeTreeNNEach: "function makeTreeNNEach(num1, num2) {\r

  \  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };\r

  \  let n = r.tree = addManual00Node(null, r);\r

  \  for (let i = 0; i < num1; i++) {\r

  \    let n1 = addManual00Node(n, r);\r

  \    for (let j = 0; j < num2; j++) {\r

  \      addManual00Node(n1, r);\r

  \    }\r

  \  }\r

  \  return r;\r

  }"
makeUnitString: "function makeUnitString(nOrString, unit = 'px', defaultVal =
  '100%') {\r

  \  if (nundef(nOrString)) return defaultVal;\r

  \  if (isNumber(nOrString)) nOrString = '' + nOrString + unit;\r

  \  return nOrString;\r

  }"
makeUserAvatar: "function makeUserAvatar(username) {\r

  \  let a = { username: username };\r

  \  let d = mDiv(document.body, { rounding: '50%', align: 'center', position:
  'fixed', w: 30, h: 30, fz: 25, bg: 'random', fg: 'contrast' }, 'd' +
  username);\r

  \  d.innerHTML = username[0];\r

  \  d.style.zIndex = 20;\r

  \  Avatars[username] = d;\r

  \  return d;\r

  }"
MakeUserMove: "function MakeUserMove() {\r

  \  if (UserMove.from != SQUARES.NO_SQ && UserMove.to != SQUARES.NO_SQ) {\r

  \    console.log(\"User Move:\" + PrSq(UserMove.from) +
  PrSq(UserMove.to));\r

  \    var parsed = ParseMove(UserMove.from, UserMove.to);\r

  \    DeselectSq(UserMove.from);\r

  \    DeselectSq(UserMove.to);\r

  \    console.log(\"Parsed:\" + parsed);\r

  \    if (parsed != NOMOVE) {\r

  \      MakeMove(parsed);\r

  \      MoveGUIPiece(parsed);\r

  \      CheckAndSet();\r

  \      PreSearch();\r

  \    } else {\r

  \      ShowChessMessage('illegal move!', 1000);\r

  \    }\r

  \    UserMove.from = SQUARES.NO_SQ;\r

  \    UserMove.to = SQUARES.NO_SQ;\r

  \  }\r

  }"
makeVisual: "function makeVisual(mobj, x, y, w, h, color, shape, { x1, y1, x2,
  y2 } = {}) {\r

  \  if (shape == 'circle') {\r

  \    mobj.ellipse({ w: w, h: h }).ellipse({ className: 'overlay', w: w, h: h
  });\r

  \    mobj.setPos(x, y);\r

  \  } else if (shape == 'hex') {\r

  \    mobj.hex({ w: w, h: h }).hex({ className: 'overlay', w: w, h: h });\r

  \    mobj.setPos(x, y);\r

  \  } else if (shape == 'quad' || shape == 'rect') {\r

  \    mobj.rect({ w: w, h: h }).rect({ className: 'overlay', w: w, h: h });\r

  \    mobj.setPos(x, y);\r

  \  } else if (shape == 'triangle') {\r

  \    mobj.triangle({ w: w, h: h }).triangle({ className: 'overlay', w: w, h:
  h });\r

  \    mobj.setPos(x, y);\r

  \  } else if (shape == 'line') {\r

  \    let thickness = w;\r

  \    let fill = color;\r

  \    mobj.line({ className: 'ground', x1: x1, y1: y1, x2: x2, y2: y2, fill:
  fill, thickness: thickness })\r

  \      .line({ className: 'overlay', x1: x1, y1: y1, x2: x2, y2: y2,
  thickness: thickness, });\r

  \  } else {\r

  \    mobj[shape]({ className: 'ground', w: w, h: h });\r

  \    mobj[shape]({ className: 'overlay', w: w, h: h });\r

  \    mobj.setPos(x, y);\r

  \  }\r

  \  mobj.setBg(color, shape != 'line');\r

  \  mobj.orig.bg = color;\r

  \  mobj.originalBg = color;\r

  \  mobj.orig.shape = shape;\r

  \  mobj.originalSize = { w: w, h: h };\r

  \  mobj.orig.w = w;\r

  \  mobj.orig.h = h;\r

  \  return mobj;\r

  }"
makeVisualsForHexboard: "function makeVisualsForHexboard(boardInfo) {\r

  \  let infos = boardInfo.items;\r

  \  let sym = chooseRandom(getAnimals());\r

  \  let items = [];\r

  \  for (const info of infos) {\r

  \    let item = drawText(info.trow + ',' + info.tcol, info.pt);\r

  \    if (info.isHexCenter) mStyle(iDiv(item), { bg: 'pink' })\r

  \    items.push(item);\r

  \  }\r

  }"
makeWordProblemsDict: "async function makeWordProblemsDict() {\r

  \  let wp = await route_path_text('../assets/math/hallo.txt');\r

  \  wp = wp.split('*');\r

  \  wp.splice(0, 1);\r

  \  let wpDict = {}; let wpList = [];\r

  \  for (const line of wp) {\r

  \    let index = firstNumber(line);\r

  \    let rest = stringAfter(line, '.');\r

  \    let title = stringBefore(rest, ':').trim();\r

  \    let sol = firstNumber(stringAfter(rest, '@'));\r

  \    let text = stringBetween(rest, ':', '@').trim();\r

  \    let nums = allNumbers(text);\r

  \    let inum = 0;\r

  \    let ersetzer = { a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9
  };\r

  \    let kers = Object.keys(ersetzer);\r

  \    if (nums) {\r

  \      for (const n of nums) {\r

  \        let s = n.toString();\r

  \        let i = s.indexOf(text);\r

  \        let len = s.length;\r

  \        text = text.replace(s, '{N' + kers[inum] + '}');\r

  \        inum += 1;\r

  \      }\r

  \    }\r

  \    for (let j = 0; j < inum; j++) {\r

  \      let s = '{N' + kers[j];\r

  \      let by = '{N' + ersetzer[kers[j]];\r

  \      text = replaceAllSpecialChars(text, s, by);\r

  \    }\r

  \    let iname = 1;\r

  \    for (const name of PersonNames) {\r

  \      if (text.includes(name)) {\r

  \        text = replaceAll(text, name, '{P' + iname + '}');\r

  \        iname += 1;\r

  \      }\r

  \    }\r

  \    let p = { index: index, title: title, sol: sol, text: text };\r

  \    wpList.push(p);\r

  \    if (startsWith(title, 'Adding')) {\r

  \      lookupAddIfToList(wpDict, ['plus'], p);\r

  \      delete p.sol;\r

  \    }\r

  \  }\r

  \  downloadAsYaml(wpList, 'wp');\r

  \  console.log('dict', wpDict);\r

  \  downloadAsYaml(wpDict, 'wp');\r

  \  return wpDict;\r

  }"
maLayout: "function maLayout(pics, dParent) {\r

  \  mClass(dParent, 'flexWrap');\r

  \  let numPics = pics.length;\r

  \  let rows = Math.sqrt(numPics);\r

  \  rows = Math.floor(rows);\r

  \  let cols = Math.ceil(numPics / rows);\r

  \  let [pictureSize, picsPerLine] = calcDimsAndSize(cols, rows);\r

  \  clearElement(dParent);\r

  \  let i = 0;\r

  \  for (let r = 0; r < rows; r++) {\r

  \    for (let c = 0; c < cols; c++) {\r

  \      maResizePic(pics[i], dParent, pictureSize)\r

  \      i += 1;\r

  \      if (i >= pics.length) return;\r

  \    }\r

  \    mLinebreak(dParent);\r

  \  }\r

  }"
mAnimate: "function mAnimate(elem, prop, valist, callback, msDuration = 1000,
  easing = 'cubic-bezier(1,-0.03,.86,.68)', delay = 0, forwards = 'none') {\r

  \  let kflist = [];\r

  \  for (const perc in valist) {\r

  \    let o = {};\r

  \    let val = valist[perc];\r

  \    o[prop] = isString(val) || prop == 'opacity' ? val : '' + val + 'px';\r

  \    kflist.push(o);\r

  \  }\r

  \  let opts = { duration: msDuration, fill: forwards, easing: easing, delay:
  delay };\r

  \  let a = toElem(elem).animate(kflist, opts);\r

  \  if (isdef(callback)) { a.onfinish = callback; }\r

  \  return a;\r

  }"
mAnimateList: "function mAnimateList(elem, ogoal, callback, msDuration = 1000,
  easing = 'cubic-bezier(1,-0.03,.86,.68)', delay = 0) {\r

  \  for (const k in ogoal) {\r

  \    ogoal[k] = isString(ogoal[k]) || k == 'opacity' ? ogoal[k] : '' +
  ogoal[k] + 'px';\r

  \  }\r

  \  let kflist = [ogoal];\r

  \  let opts = { duration: msDuration, fill: 'forwards', easing: easing,
  delay: delay };\r

  \  let a = toElem(elem).animate(kflist, opts);\r

  \  if (isdef(callback)) { a.onfinish = callback; }\r

  \  return a;\r

  }"
mAnimateTo: "function mAnimateTo(elem, prop, val, callback, msDuration = 1000,
  easing = 'cubic-bezier(1,-0.03,.86,.68)', delay = 0) {\r

  \  let o = {};\r

  \  o[prop] = isString(val) || prop == 'opacity' ? val : '' + val + 'px';\r

  \  let kflist = [o];\r

  \  let opts = { duration: msDuration, fill: 'forwards', easing: easing,
  delay: delay };\r

  \  let a = toElem(elem).animate(kflist, opts);\r

  \  if (isdef(callback)) { a.onfinish = callback; }\r

  \  return a;\r

  }"
map_add_layer: "function map_add_layer(key = 'osm') {\r

  \  let layer;\r

  \  if (key == 'osm') {\r

  \    layer = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '&copy; <a
  href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>',
  subdomains: ['a', 'b', 'c'] });\r

  \  } else if (key == 'watercolor') {\r

  \    let url =
  'https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.jpg';\r

  \  } else if (startsWith(key, 'mb')) {\r

  \    let url =
  'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1\
  IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6\
  B5aw';\r

  \    let id = key.includes('sat') ? 'mapbox/satellite-v9' :
  'mapbox/streets-v11';\r

  \    layer = L.tileLayer(url, { id: id, tileSize: 512, zoomOffset: -1,
  attribution: 'Map data &copy; <a
  href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>
  contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>' });\r

  \  } else if (key.includes('top')) {\r

  \    layer = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
  {\r

  \      maxZoom: 22,\r

  \      attribution: 'Map data: &copy; <a
  href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>
  contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style:
  &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a
  href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\r

  \    });\r

  \  }\r

  \  layer.addTo(M.map);\r

  \  return layer;\r

  }"
map_init: "function map_init(dParent, city, zoom) {\r

  \  let o = M.cities[city];\r

  \  let center = [o.lat, o.lon];\r

  \  var map = L.map(dParent, { center: center, minZoom: 2, zoom: zoom });\r

  \  return map;\r

  }"
map_moveby: "function map_moveby(pin, fx, fy) {\r

  \  let pos = pin.getLatLng();\r

  \  let lat = fx(pos.lat);\r

  \  let lng = fy(pos.lng);\r

  \  pin.setLatLng([lat, lng]);\r

  }"
map_moveto: function map_moveto(pin, center) { pin.setLatLng(center); }
map_range: function map_range(x, min1, max1, min2, max2) { return
  convert_to_range(x, min1, max1, min2, max2); }
maPic: "function maPic(infokey, dParent, styles, isText = true, isOmoji = false)
  {\r

  \  let info = isString(infokey) ? picInfo(infokey) : infokey;\r

  \  if (!isText && info.type == 'emo') {\r

  \    let dir = isOmoji ? 'openmoji' : 'twemoji';\r

  \    let hex = info.hexcode;\r

  \    if (isOmoji && hex.indexOf('-') == 2) hex = '00' + hex;\r

  \    let ui = mImg('/assets/svg/' + dir + '/' + hex + '.svg', dParent);\r

  \    if (isdef(styles)) mStyleX(ui, styles);\r

  \    return ui;\r

  \  }\r

  \  let outerStyles = isdef(styles) ? jsCopy(styles) : {};\r

  \  outerStyles.display = 'inline-block';\r

  \  let family = info.type == 'emo' && isString(isOmoji) ? isOmoji : isOmoji
  == true ? 'emoOpen' : info.family;\r

  \  let i = (family == info.family) ? 0 : EMOFONTLIST.indexOf(family) + 1;\r

  \  if (i < 0) {\r

  \    i = 1; console.log('iiiiiii', i, family, info.family);\r

  \  }\r

  \  let wInfo = info.w[i];\r

  \  let hInfo = info.h[i];\r

  \  let innerStyles = { family: family };\r

  \  let [padw, padh] = isdef(styles.padding) ? [styles.padding,
  styles.padding] : [0, 0];\r

  \  let dOuter = isdef(dParent) ? mDiv(dParent) : mDiv();\r

  \  let d = mDiv(dOuter);\r

  \  d.innerHTML = info.text;\r

  \  let wdes, hdes, fzdes, wreal, hreal, fzreal, f;\r

  \  if (isdef(styles.w) && isdef(styles.h) && isdef(styles.fz)) {\r

  \    [wdes, hdes, fzdes] = [styles.w, styles.h, styles.fz];\r

  \    let fw = wdes / wInfo;\r

  \    let fh = hdes / hInfo;\r

  \    let ffz = fzdes / info.fz;\r

  \    f = Math.min(fw, fh, ffz);\r

  \  } else if (isdef(styles.w) && isdef(styles.h)) {\r

  \    [wdes, hdes] = [styles.w, styles.h];\r

  \    let fw = wdes / wInfo;\r

  \    let fh = hdes / hInfo;\r

  \    f = Math.min(fw, fh);\r

  \  } else if (isdef(styles.w) && isdef(styles.fz)) {\r

  \    [wdes, fzdes] = [styles.w, styles.fz];\r

  \    let fw = wdes / wInfo;\r

  \    let ffz = fzdes / info.fz;\r

  \    f = Math.min(fw, ffz);\r

  \  } else if (isdef(styles.h) && isdef(styles.fz)) {\r

  \    [hdes, fzdes] = [styles.h, styles.fz];\r

  \    let fh = hdes / hInfo;\r

  \    let ffz = fzdes / info.fz;\r

  \    f = Math.min(fh, ffz);\r

  \  } else if (isdef(styles.h)) {\r

  \    hdes = styles.h;\r

  \    f = hdes / hInfo;\r

  \  } else if (isdef(styles.w)) {\r

  \    wdes = styles.w;\r

  \    f = wdes / wInfo;\r

  \  } else {\r

  \    mStyleX(d, innerStyles);\r

  \    mStyleX(dOuter, outerStyles);\r

  \    return dOuter;\r

  \  }\r

  \  fzreal = f * info.fz;\r

  \  wreal = Math.round(f * wInfo);\r

  \  hreal = Math.round(f * hInfo);\r

  \  wdes = Math.round(wdes);\r

  \  hdes = Math.round(hdes);\r

  \  padw += isdef(styles.w) ? (wdes - wreal) / 2 : 0;\r

  \  padh += isdef(styles.h) ? (hdes - hreal) / 2 : 0;\r

  \  if (!(padw >= 0 && padh >= 0)) {\r

  \    console.log(info)\r

  \    console.log('\\nstyles.w', styles.w, '\\nstyles.h', styles.h,
  '\\nstyles.fz', styles.fz, '\\nstyles.padding', styles.padding, '\\nwInfo',
  wInfo, '\\nhInfo', hInfo, '\\nfzreal', fzreal, '\\nwreal', wreal, '\\nhreal',
  hreal, '\\npadw', padw, '\\npadh', padh);\r

  \  }\r

  \  innerStyles.fz = fzreal;\r

  \  innerStyles.weight = 900;\r

  \  innerStyles.w = wreal;\r

  \  innerStyles.h = hreal;\r

  \  mStyleX(d, innerStyles);\r

  \  outerStyles.padding = '' + padh + 'px ' + padw + 'px';\r

  \  outerStyles.w = wreal;\r

  \  outerStyles.h = hreal;\r

  \  mStyleX(dOuter, outerStyles);\r

  \  return dOuter;\r

  }"
maPic4: "function maPic4(info, dParent, styles) {\r

  \  mStyleX(dParent, { display: 'flex', 'flex-flow': 'row wrap' });\r

  \  maPic(info, table, styles, true);\r

  \  maPic(info, table, styles, true, 'segoe ui emoji');\r

  \  maPic(info, table, styles, false);\r

  \  maPic(info, table, styles, false, true);\r

  \  mLinebreak(table);\r

  }"
maPicButton: "function maPicButton(key, handler, dParent, styles, classes =
  'picButton', isText, isOmoji) {\r

  \  let x = maPic(key, dParent, styles, isText, isOmoji);\r

  \  if (isdef(handler)) x.onclick = handler;\r

  \  mClass(x, classes);\r

  \  return x;\r

  }"
maPicFrame: "function maPicFrame(info, dParent, containerStyles, picStyles,
  isText = true, isOmoji = false) {\r

  \  let d = mDiv(dParent);\r

  \  maPic(info, d, picStyles, isText, isOmoji);\r

  \  mStyleX(d, containerStyles);\r

  \  return d;\r

  }"
maPicLabel: "function maPicLabel(info, dParent, containerStyles, picStyles,
  textStyles, isText = true, isOmoji = false) {\r

  \  let d = mDiv(dParent);\r

  \  let dPic = maPic(info, d, picStyles, isText, isOmoji);\r

  \  let dText = mText(info.annotation, d, textStyles, ['might-overflow']);\r

  \  mStyleX(d, containerStyles);\r

  \  return d;\r

  }"
maPicLabel_dep: "function maPicLabel_dep(info, dParent, styles, isText = true,
  isOmoji = false) {\r

  \  let d = mDiv(dParent, { bg: 'random', fg: 'contrast', padding: 4, margin:
  2 });\r

  \  maPic(info, d, styles, isText, isOmoji);\r

  \  mText(info.annotation, d);\r

  \  d.style.textAlign = 'center';\r

  \  return d;\r

  }"
maPicLabelButton: "function maPicLabelButton(info, label, handler, dParent,
  styles, classes = 'picButton', isText, isOmoji) {\r

  \  let sz = isdef(styles) && isdef(styles.w) ? styles.w : 200;\r

  \  let [g, p, t] = getHarmoniousStyles1(styles.w, styles.h, 10, 'arial',
  'random', 'random', true);\r

  \  g.display = 'inline-block';\r

  \  for (const k in styles) {\r

  \    g[k] = styles[k];\r

  \    if (k == 'rounding') p.rounding = styles.rounding;\r

  \  }\r

  \  console.log('g', g, '\\np', p, '\\nt', t)\r

  \  let x = maPicLabelX(info, label, dParent, g, p, t, isText, isOmoji);\r

  \  if (isdef(handler)) x.onclick = handler;\r

  \  mClass(x, classes);\r

  \  return x;\r

  }"
maPicLabelButtonFitText: "function maPicLabelButtonFitText(info, label, { w, h,
  bgPic, textShadowColor, contrast, sPic = {} }, handler, dParent, styles,
  classes = 'picButton', isText, isOmoji, focusElement) {\r

  \  let picLabelStyles = getHarmoniousStylesPlusPlus(styles, sPic, {}, w, h,
  65, 0, 'arial', bgPic, 'transparent', null, null, true);\r

  \  let x = maPicLabelFitX(info, label.toUpperCase(), { wmax: w,
  textShadowColor: textShadowColor, contrast: contrast }, dParent,
  picLabelStyles[0], picLabelStyles[1], picLabelStyles[2], isText, isOmoji);\r

  \  x.id = 'd' + info.key;\r

  \  if (isdef(handler)) x.onclick = handler;\r

  \  x.style.cursor = 'pointer';\r

  \  x.lastChild.style.cursor = 'pointer';\r

  \  x.style.userSelect = 'none';\r

  \  mClass(x, classes);\r

  \  return x;\r

  }"
maPicLabelButtonX: "function maPicLabelButtonX(info, label, handler, dParent,
  styles, classes = 'picButton', isText, isOmoji) {\r

  \  let handler1 = (ev) => {\r

  \    let id = evToClosestId(ev);\r

  \    let info = symbolDict[id.substring(1)];\r

  \    if (isLabelVisible(id)) maHideLabel(id, info); else maShowLabel(id,
  info);\r

  \    mBy('dummy').focus();\r

  \  }\r

  \  let picLabelStyles = getHarmoniousStylesPlus(styles, {}, {}, 200, 200, 0,
  'arial', 'random', 'transparent', true);\r

  \  let x = maPicLabelX(info, label.toUpperCase(), dParent,
  picLabelStyles[0], picLabelStyles[1], picLabelStyles[2], true, false);\r

  \  x.id = 'd' + label;\r

  \  x.onclick = handler;\r

  \  x.style.cursor = 'pointer';\r

  \  x.lastChild.style.cursor = 'pointer';\r

  \  x.style.userSelect = 'none';\r

  \  return x;\r

  }"
maPicLabelButtonXX: "function maPicLabelButtonXX(info, label, handler, dParent,
  styles, classes = 'picButton', isText, isOmoji) {\r

  \  let handler1 = (ev) => {\r

  \    let id = evToClosestId(ev);\r

  \    let info = infoDictionary[id.substring(1)];\r

  \    if (isLabelVisible(id)) maHideLabel(id, info); else maShowLabel(id,
  info);\r

  \    mBy('dummy').focus();\r

  \  }\r

  \  let picLabelStyles = getHarmoniousStylesPlusPlus(styles, {}, {}, 200,
  200, 65, 0, 'arial', 'random', 'transparent', null, null, true);\r

  \  let x = maPicLabelFit(info, label.toUpperCase(), dParent,
  picLabelStyles[0], picLabelStyles[1], picLabelStyles[2], true, false);\r

  \  x.id = 'd' + label;\r

  \  x.onclick = handler;\r

  \  x.style.cursor = 'pointer';\r

  \  x.lastChild.style.cursor = 'pointer';\r

  \  x.style.userSelect = 'none';\r

  \  return x;\r

  }"
maPicLabelFit: "function maPicLabelFit(info, label, dParent, containerStyles,
  picStyles, textStyles, isText = true, isOmoji = false) {\r

  \  let d = mDiv(dParent);\r

  \  let dPic = maPic(info, d, picStyles, isText, isOmoji);\r

  \  let maxchars = 15; let maxlines = 1;\r

  \  console.log(containerStyles, picStyles, textStyles);\r

  \  let hAvail = containerStyles.h -\r

  \    (containerStyles.patop + picStyles.h + containerStyles.pabottom);\r

  \  let wAvail = containerStyles.w;\r

  \  let fz = textStyles.fz;\r

  \  console.log('_ avail:', wAvail, hAvail)\r

  \  let styles1 = textStyles;\r

  \  let size = getSizeWithStylesX(label, styles1, wAvail);\r

  \  console.log('__', size);\r

  \  let dText = mTextFit(label, maxchars, maxlines, d, textStyles,
  ['truncate']);\r

  \  mStyleX(d, containerStyles);\r

  \  return d;\r

  }"
maPicLabelFitX: "function maPicLabelFitX(info, label, { wmax, hmax,
  textShadowColor, contrast = .35 }, dParent, containerStyles, picStyles,
  textStyles, isText = true, isOmoji = false) {\r

  \  let d = mDiv(dParent);\r

  \  if (isdef(textShadowColor)) {\r

  \    let sShade = '0 0 0 ' + textShadowColor;\r

  \    picStyles['text-shadow'] = sShade;\r

  \    picStyles.fg = colorFrom('black', contrast); //'#00000080' '#00000030'
  \r

  \  }\r

  \  let dPic = maPic(info, d, picStyles, isText, isOmoji);\r

  \  let maxchars = 15; let maxlines = 1;\r

  \  let wAvail, hAvail;\r

  \  hAvail = containerStyles.h - (containerStyles.patop + picStyles.h);\r

  \  wAvail = containerStyles.w;\r

  \  if (isdef(hmax)) {\r

  \    hAvail = containerStyles.h - (containerStyles.patop + picStyles.h);\r

  \    if (hmax != 'auto') {\r

  \      hAvail = Math.min(hAvail, hmax);\r

  \    }\r

  \  }\r

  \  if (isdef(wmax)) {\r

  \    wAvail = containerStyles.w;\r

  \    if (wmax != 'auto') {\r

  \      wAvail = Math.min(wAvail, wmax);\r

  \    }\r

  \  }\r

  \  let fz = textStyles.fz;\r

  \  let styles1 = textStyles;\r

  \  let size = getSizeWithStylesX(label, styles1, isdef(wmax) ? wAvail :
  undefined, isdef(hmax) ? hAvail : undefined);\r

  \  let size1 = getSizeWithStylesX(label, styles1);\r

  \  let f1 = wAvail / size1.w;\r

  \  let isTextOverflow = f1 < 1;\r

  \  if (f1 < 1) {\r

  \    textStyles.fz *= f1;\r

  \    textStyles.fz = Math.floor(textStyles.fz);\r

  \  }\r

  \  let [wBound, hBound] = [isdef(wmax) ? size.w : undefined, isdef(hmax) ?
  size.h : undefined];\r

  \  let isOverflow = isdef(wBound) && size.w > wAvail || isdef(hBound) &&
  size.h > hAvail;\r

  \  let dText = mTextFit(label, { wmax: wBound, hmax: hBound }, d,
  textStyles, isTextOverflow ? ['truncate'] : null);\r

  \  mStyleX(d, containerStyles);\r

  \  dText.style.margin = 'auto';\r

  \  return d;\r

  }"
maPicLabelShowHideHandler: "function maPicLabelShowHideHandler(ev) {\r

  \  let id = evToClosestId(ev);\r

  \  let info = symbolDict[id.substring(1)];\r

  \  if (isLabelVisible(id)) maHideLabel(id, info); else maShowLabel(id,
  info);\r

  \  if (isdef(mBy('dummy'))) mBy('dummy').focus();\r

  }"
maPicLabelX: "function maPicLabelX(info, label, dParent, containerStyles,
  picStyles, textStyles, isText = true, isOmoji = false) {\r

  \  let d = mDiv(dParent);\r

  \  let dPic = maPic(info, d, picStyles, isText, isOmoji);\r

  \  let dText = mText(label, d, textStyles, ['might-overflow']);\r

  \  mStyleX(d, containerStyles);\r

  \  return d;\r

  }"
maPicOver: "function maPicOver(d, dParent, fz, color, picStyle) {\r

  \  let b = getBounds(dParent);\r

  \  d.style.top = picStyle == 'segoeBlack' ? (b.y + 60 - fz / 2 + 'px') :
  (b.y + 100 - fz / 2 + 'px');\r

  \  d.style.left = picStyle == 'segoeBlack' ? (b.x + 120 - fz / 2 + 'px') :
  (b.x + 100 - fz / 2 + 'px');\r

  \  d.style.color = color;\r

  \  d.style.fontSize = fz + 'px';\r

  \  d.style.display = 'block';\r

  \  let { isText, isOmoji } = getParamsForMaPicStyle(picStyle);\r

  \  d.style.fontFamily = isString(isOmoji) ? isOmoji : isOmoji ? 'emoOpen' :
  'emoNoto';\r

  \  return d;\r

  }"
maPicSimple: "function maPicSimple(key) {\r

  \  let info = picInfo(key);\r

  \  let d = mText(info.text);\r

  \  d.style.setProperty('font-family', info.family);\r

  \  return d;\r

  }"
maPicSimpleEmoHexText: "function maPicSimpleEmoHexText(hex, parent, fontSize)
  {\r

  \  if (isString(parent)) parent = mBy(parent);\r

  \  let d = mDiv(parent);\r

  \  let s1 = '&#' + hex + ';'; //'\\u{1F436}';\r

  \  d.innerHTML = s1;\r

  \  d.style.fontSize = fontSize + 'pt';\r

  \  return d;\r

  }"
mapOMap: "function mapOMap(omap, pool) {\r

  \  let olist = [];\r

  \  let ids = omap ? getElements(omap) : [];\r

  \  if (!isEmpty(ids)) {\r

  \    for (const id of ids) {\r

  \      let o = pool[id];\r

  \      o.id = id;\r

  \      olist.push(o);\r

  \    }\r

  \  } else {\r

  \    for (const k in omap) {\r

  \      let item = { key: k, value: omap[k] };\r

  \      olist.push(item);\r

  \    }\r

  \  }\r

  \  return olist;\r

  }"
mAppear: function mAppear(d, ms = 800, callback = null) { return mAnimateTo(d,
  'opacity', 1, callback, ms); }
mAppend: function mAppend(d, child) { toElem(d).appendChild(child); return child; }
mAppendS: function mAppendS(d, child) { d = mEnsure(d); if (d)
  d.appendChild(child); return child; }
mAppendText: function mAppendText(d, text) { let dText = mCreate('div');
  dText.innerHTML = text; d.appendChild(dText); return dText; }
mAppendTextS: function mAppendTextS(d, text) { let dText = mCreate('div');
  dText.innerHTML = text; mAppendS(d, dText); return dText; }
mappingsClear: "function mappingsClear() {\r

  \  mappingTypes = {};\r

  \  mappingsInitialized = {};\r

  }"
mAppPos: function mAppPos(d, child) { d.style.position = 'relative'; return
  mAppend(d, child); }
mAppPosS: function mAppPosS(d, child) { d = ensure(d); d.style.position =
  'relative'; return mAppend(d, child); }
mapSafe: "function mapSafe(func, listFunc, oid) {\r

  \  let uis = listFunc(oid);\r

  \  if (!isdef(uis)) return;\r

  \  if (!isList(uis)) uis = [uis];\r

  \  uis.map(x => x[func]());\r

  }"
mapValues: "function mapValues(o, p, pdef, spec) {\r

  \  let oNew = {};\r

  \  for (const k in p) {\r

  \    if (nundef(p[k])) continue;\r

  \    if (nundef(p[k]._map)) { oNew[k] = p[k]; continue; }\r

  \    let p1 = p[k];\r

  \    let m = p1._map;\r

  \    let mapName = m.map;\r

  \    let _map = spec[mapName];\r

  \    let propPath = m.key;\r

  \    let _key = decodePropertyPath(o, propPath);\r

  \    let val = _map[_key];\r

  \    let valKey = isdef(m.value) ? m.value : k;\r

  \    if (isdef(val) && isdef(val[valKey])) { oNew[k] = val[valKey]; }\r

  \    else if (isdef(m.default)) { oNew[k] = m.default; }\r

  \    else if (isdef(pdef[k])) { oNew[k] = pdef[k]; }\r

  \  }\r

  \  return oNew;\r

  }"
mapzeug_sample_code: "function mapzeug_sample_code() {\r

  \  //#region sample code marker, circle and on drag handler\r

  \  M.markers.nasi = get_marker(map, center, { user: 'nasi', draggable: true
  });\r

  \  M.shapes = {};\r

  \  M.shapes.nasi = get_circle(center, { sz: 1000, bg: GREEN }).addTo(map);\r

  \  M.markers.nasi.on('drag', function (e) {\r

  \    var d = map.distance(e.latlng, M.shapes.nasi.getLatLng());\r

  \    var isInside = d < M.shapes.nasi.getRadius();\r

  \    console.log('inside?', isInside ? 'YES' : 'NO');\r

  \    M.shapes.nasi.setStyle({ fillColor: isInside ? 'green' : '#f03' });\r

  \  });\r

  \  //#endregion\r

  }"
maResizePic: "function maResizePic(p, dParent, pictureSize) {\r

  \  let d = p.div;\r

  \  mAppend(dParent, d);\r

  \  let oldSize = p.sz;\r

  \  if (oldSize >= 200) return;\r

  \  let x = pictureSize / oldSize;\r

  \  if (Math.abs(x - 1) <= .1) return;\r

  \  let dpic = d.children[0];\r

  \  let bpic = getBounds(dpic);\r

  \  let wPicOld = bpic.width;\r

  \  let wPicNew = bpic.width * x;\r

  \  let hPicOld = bpic.height;\r

  \  let hPicNew = bpic.height * x;\r

  \  console.log('pic will be resized from', wPicOld, hPicOld, 'to', wPicNew,
  hPicNew)\r

  \  console.log('info.hOrig', p.info.hOrig)\r

  \  console.log('info', p.info)\r

  \  mSize(d, pictureSize, pictureSize);\r

  \  let dsym = dpic.children[0];\r

  \  let fzPicOld = firstNumber(dsym.style.fontSize);\r

  \  let fzPicNew = fzPicOld * x;\r

  \  let hNew = fzPicNew * p.info.h[0] / 100;\r

  \  console.log('new h should be', hNew, 'but is', hPicNew)\r

  \  mStyleX(dpic, { w: wPicNew, h: hNew });\r

  \  mStyleX(dsym, { fz: fzPicNew });\r

  \  let dtext = d.children[1];\r

  \  let fzTextOld = firstNumber(dtext.style.fontSize);\r

  \  let fzTextNew = Math.round(fzTextOld * x);\r

  \  mStyleX(dtext, { fz: fzTextNew, w: 'auto', h: 'auto' });\r

  \  d.style.padding = '0px';\r

  \  p.sz = pictureSize;\r

  \  let htext = p.isLabelVisible ? getBounds(dtext).height : 0;\r

  \  let hpic = getBounds(dpic).height;\r

  \  d.style.paddingTop = '' + ((pictureSize - (htext + hpic)) / 2) + 'px';\r

  \  for (let i = 2; i < d.children.length; i++) {\r

  \    let dOrdinal = d.children[i];\r

  \    let fzOld = firstNumber(dOrdinal.style.fontSize);\r

  \    let fzNew = fzOld * x;\r

  \    let leftOld = firstNumber(dOrdinal.style.left);\r

  \    let leftNew = Math.floor(leftOld * x);\r

  \    let topOld = firstNumber(dOrdinal.style.top);\r

  \    let topNew = Math.floor(topOld * x);\r

  \    mStyleX(dOrdinal, { fz: fzNew, left: leftNew, top: topNew });\r

  \  }\r

  }"
markerFail: function markerFail() { return createMarker(MarkerId.FAIL); }
markerSuccess: function markerSuccess() { return createMarker(MarkerId.SUCCESS); }
markerSuccessNew: "function markerSuccessNew(ui, sz) {\r

  \  let d = createMarker(MarkerId.SUCCESS);\r

  \  if (nundef(ui)) return d;\r

  \  if (nundef(sz)) sz = getRect(ui).h;\r

  \  let top = (cy - sz * 2 / 3);\r

  \  let left = (cx - sz / 3);\r

  \  sz *= 4 / 5;\r

  \  mpOver(d, ui, sz, 'limegreen', 'segoeBlack');\r

  \  return d;\r

  }"
maShowLabel: "function maShowLabel(id, info) {\r

  \  let d = mBy(id);\r

  \  let dPic = d.children[0];\r

  \  let dText = d.children[1];\r

  \  let dPicText = dPic.children[0];\r

  \  dPicText.style.fontSize = info.fzOrig;\r

  \  dPicText.style.color = info.textColorOrig;\r

  \  dPic.style.width = info.wOrig;\r

  \  dPic.style.height = info.hOrig;\r

  \  d.style.paddingTop = info.paddingTopOrig;\r

  \  d.style.paddingBottom = info.paddingBottomOrig;\r

  \  dText.style.display = 'block';\r

  \  dText.style.width = 'auto'\r

  }"
maShowPictures: "function maShowPictures(keys, labels, dParent,
  onClickPictureHandler,\r

  \  { showRepeat, container, lang, border, picSize, bgs, colorKeys, contrast,
  repeat = 1,\r

  \    sameBackground, shufflePositions = true } = {}, { sCont, sPic, sText }
  = {}) {\r

  \  let pics = [];\r

  \  //#region prelim\r

  \  let numPics = keys.length * repeat;\r

  \  let items = [];\r

  \  for (let i = 0; i < keys.length; i++) {\r

  \    let k = keys[i];\r

  \    let info = isdef(lang) ? getRandomSetItem(lang, k) : symbolDict[k];\r

  \    let bg = isList(bgs) ? bgs[i] : isdef(colorKeys) ? 'white' :
  sameBackground ? computeColor('random') : 'random';\r

  \    let label = isList(labels) ? labels[i] : isdef(lang) ? info.best : k;\r

  \    items.push({ key: k, info: info, label: label, bg: bg, iRepeat: 1 });\r

  \  }\r

  \  let items1 = jsCopy(items);\r

  \  for (let i = 0; i < repeat - 1; i++) {\r

  \    items = items.concat(items1);\r

  \  }\r

  \  let isText = true;\r

  \  let isOmoji = false;\r

  \  if (isdef(lang)) {\r

  \    let textStyle = getParamsForMaPicStyle('twitterText');\r

  \    isText = textStyle.isText;\r

  \    isOmoji = textStyle.isOmoji;\r

  \  }\r

  \  numPics = items.length;\r

  \  if (shufflePositions) { shuffle(items); }\r

  \  //#endregion prelim\r

  \  let lines = isdef(colorKeys) ? colorKeys.length : 1;\r

  \  let [pictureSize, picsPerLine] = calcDimsAndSize(numPics, lines,
  container);\r

  \  let stylesForLabelButton = { rounding: 10, margin: pictureSize / 8 };\r

  \  if (isdef(border)) stylesForLabelButton.border = border;\r

  \  if (isdef(picSize)) pictureSize = picSize;\r

  \  let labelRepeat = {};\r

  \  for (let line = 0; line < lines; line++) {\r

  \    let textShadowColor, colorKey;\r

  \    if (isdef(colorKeys)) { colorKey = colorKeys[line]; textShadowColor =
  ColorDict[colorKey].c; labelRepeat = {}; }\r

  \    for (let i = 0; i < numPics; i++) {\r

  \      let item = items[i];\r

  \      let info = item.info;\r

  \      let label = item.label;\r

  \      let iRepeat = labelRepeat[label];\r

  \      if (nundef(iRepeat)) iRepeat = 1; else iRepeat += 1;\r

  \      labelRepeat[label] = iRepeat;\r

  \      let bg = item.bg;\r

  \      let ipic = (line * picsPerLine + i);\r

  \      if (ipic % picsPerLine == 0 && ipic > 0) { mLinebreak(dParent); }\r

  \      let id = 'pic' + ipic;\r

  \      let d1 = maPicLabelButtonFitText(info, label,\r

  \        { w: pictureSize, h: pictureSize, bgPic: bg, textShadowColor:
  textShadowColor, contrast: contrast, sPic: sPic },\r

  \        onClickPictureHandler, dParent, stylesForLabelButton,
  'frameOnHover', isText, isOmoji);\r

  \      d1.id = id;\r

  \      if (showRepeat) addRepeatInfo(d1, iRepeat, pictureSize);\r

  \      let fzPic = firstNumber(d1.children[0].children[0].style.fontSize);\r

  \      pics.push({\r

  \        textShadowColor: textShadowColor, color: ColorDict[colorKey],
  colorKey: colorKey, key: info.key, info: info,\r

  \        bg: bg, div: d1, id: id, sz: pictureSize, fzPic: fzPic,\r

  \        index: ipic, row: line, col: i, iRepeat: iRepeat, label: label,
  isLabelVisible: true, isSelected: false\r

  \      });\r

  \    }\r

  \  }\r

  \  return pics;\r

  }"
matchAllUnits_dep: "function matchAllUnits_dep(arr, pl, tile, type) {\r

  \  let units = arr.filter(x => x.obj_type == 'unit' &&
  getUnitOwner(x.nationality) == pl && x.tile == tile && x.type == type);\r

  \  if (units.length > 1) {\r

  \    msg = 'matchSingleUnit: MULTIPLE UNITS MATCH EXACTLY!!!';\r

  \    alert(msg);\r

  \  } else if (units.length == 1) {\r

  \    return units[0];\r

  \  }\r

  \  return null;\r

  }"
matches_on_either_end: "function matches_on_either_end(card, j) {\r

  \  let key = card.key;\r

  \  let jfirst = arrFirst(j.o.list);\r

  \  let jlast = arrLast(j.o.list);\r

  \  rankstr = 'A23456789TJQK';\r

  \  let [s, s1, s2] = [key[1], jfirst[1], jlast[1]];\r

  \  let anfang = s == s1 && follows_in_rank(key, jfirst, rankstr);\r

  \  let ende = s == s2 && follows_in_rank(jlast, key, rankstr);\r

  \  return anfang || ende;\r

  }"
matchesAnyWordOrSound: "function matchesAnyWordOrSound(info, s) {\r

  \  if (!isEnglish(currentLanguage)) return false;\r

  \  for (const w of info.words) {\r

  \    if (isTimeString(w)) return soundsSimilar(w, s);\r

  \  }\r

  \  return false;\r

  }"
matchingNumberOrTime: "function matchingNumberOrTime(info, answer) {\r

  \  if (infoHasNumberOrTimeString(info) && isNumberOrTimeString(answer)) {\r

  \    if (isNumber(answer) && infoHasNumber(info)) {\r

  \      let best1 = firstCond(info.words, x => isNumber(x));\r

  \      return best1 == answer;\r

  \    } else if (isTimeString(answer) && infoHasTimeString(info)) {\r

  \      let ts = firstCond(info.words, x => isTimeString(x));\r

  \      let x1 = convertGermanUhrzeitToNumbers(answer);\r

  \      let x2 = convertTimeStringToNumbers(ts);\r

  \      removeInPlace(x1, 0);\r

  \      removeInPlace(x2, 0);\r

  \      return sameList(x1, x2);\r

  \    } else if (infoHasTimeString(info)) {\r

  \      let best1 = firstCond(info.words, x => isTimeString(x));\r

  \      let x1 = convertTimesAndNumbersToWords(best1);\r

  \      let x2 = convertTimesAndNumbersToWords(answer);\r

  \      return x1 == x2;\r

  \    }\r

  \  }\r

  }"
matchSingleUnit_dep: "function matchSingleUnit_dep(idDict, pl, tile, type) {\r

  \  let arr = dict2list(idDict, 'id');\r

  \  let units = arr.filter(x => x.obj_type == 'unit' &&
  getUnitOwner(x.nationality) == pl && x.tile == tile && x.type == type);\r

  \  if (units.length > 1) {\r

  \    msg = 'matchSingleUnit: MULTIPLE UNITS MATCH EXACTLY!!!';\r

  \    alert(msg);\r

  \  } else if (units.length == 1) {\r

  \    return units[0];\r

  \  }\r

  \  return null;\r

  }"
matchUnits: "function matchUnits(darr, option, pl = null, tile = null, type =
  null, cv = null) {\r

  \  let arr = null;\r

  \  if (typeof darr === 'object' && darr.constructor == Object) {\r

  \    arr = dict2list(darr, 'id');\r

  \  } else arr = darr;\r

  \  let result = [];\r

  \  for (const o of arr) {\r

  \    if (o.obj_type != 'unit') continue;\r

  \    if (pl && getUnitOwner(o.nationality) != pl) continue;\r

  \    if (tile && o.tile != tile) continue;\r

  \    if (type && (o.type != 'Convoy' && o.type != type || o.type == 'Convoy'
  && o.carrying != type)) {\r

  \      continue;\r

  \    }\r

  \    if (cv && o.cv != cv) continue;\r

  \    if (option == 'first') {\r

  \      return o;\r

  \    }\r

  \    result.push(o);\r

  \  }\r

  \  if (result.length == 0) return option == 'all' ? [] : null;\r

  \  return option == 'all' ? result : option == 'last' ? result[result.length
  - 1] : (result[0], result[result.length - 1]);\r

  }"
MaterialDraw: "function MaterialDraw() {\r

  \  if (0 == brd_pceNum[PIECES.wR] && 0 == brd_pceNum[PIECES.bR] && 0 ==
  brd_pceNum[PIECES.wQ] && 0 == brd_pceNum[PIECES.bQ]) {\r

  \    if (0 == brd_pceNum[PIECES.bB] && 0 == brd_pceNum[PIECES.wB]) {\r

  \      if (brd_pceNum[PIECES.wN] < 3 && brd_pceNum[PIECES.bN] < 3) { return
  BOOL.TRUE; }\r

  \    } else if (0 == brd_pceNum[PIECES.wN] && 0 == brd_pceNum[PIECES.bN])
  {\r

  \      if (Math.abs(brd_pceNum[PIECES.wB] - brd_pceNum[PIECES.bB]) < 2) {
  return BOOL.TRUE; }\r

  \    } else if ((brd_pceNum[PIECES.wN] < 3 && 0 == brd_pceNum[PIECES.wB]) ||
  (brd_pceNum[PIECES.wB] == 1 && 0 == brd_pceNum[PIECES.wN])) {\r

  \      if ((brd_pceNum[PIECES.bN] < 3 && 0 == brd_pceNum[PIECES.bB]) ||
  (brd_pceNum[PIECES.bB] == 1 && 0 == brd_pceNum[PIECES.bN])) { return
  BOOL.TRUE; }\r

  \    }\r

  \  } else if (0 == brd_pceNum[PIECES.wQ] && 0 == brd_pceNum[PIECES.bQ]) {\r

  \    if (brd_pceNum[PIECES.wR] == 1 && brd_pceNum[PIECES.bR] == 1) {\r

  \      if ((brd_pceNum[PIECES.wN] + brd_pceNum[PIECES.wB]) < 2 &&
  (brd_pceNum[PIECES.bN] + brd_pceNum[PIECES.bB]) < 2) { return BOOL.TRUE; }\r

  \    } else if (brd_pceNum[PIECES.wR] == 1 && 0 == brd_pceNum[PIECES.bR])
  {\r

  \      if ((brd_pceNum[PIECES.wN] + brd_pceNum[PIECES.wB] == 0) &&
  (((brd_pceNum[PIECES.bN] + brd_pceNum[PIECES.bB]) == 1) ||
  ((brd_pceNum[PIECES.bN] + brd_pceNum[PIECES.bB]) == 2))) { return BOOL.TRUE;
  }\r

  \    } else if (brd_pceNum[PIECES.bR] == 1 && 0 == brd_pceNum[PIECES.wR])
  {\r

  \      if ((brd_pceNum[PIECES.bN] + brd_pceNum[PIECES.bB] == 0) &&
  (((brd_pceNum[PIECES.wN] + brd_pceNum[PIECES.wB]) == 1) ||
  ((brd_pceNum[PIECES.wN] + brd_pceNum[PIECES.wB]) == 2))) { return BOOL.TRUE;
  }\r

  \    }\r

  \  }\r

  \  return BOOL.FALSE;\r

  }"
mAttrs: function mAttrs(elem, attrs) { for (const k in attrs) {
  elem.setAttribute(k, attrs[k]); } }
mAutocomplete: "function mAutocomplete(dParent) {\r

  \  let form = mCreateFrom(`\r

  \    <form class='form' autocomplete=\"off\"
  action=\"javascript:void(0);\">\r

  \      <div class=\"autocomplete\" style=\"width: 200px\">\r

  \        <input id=\"myInput\" type=\"text\" name=\"myCity\"
  placeholder=\"City\" onclick=\"select()\" />\r

  \      </div>\r

  \      <input style=\"margin-left:-15px\" type=\"submit\" value=\"Go!\" />\r

  \    </form>\r

  \  `  );\r

  \  form.onsubmit = () => {\r

  \    let c = mBy('myInput').value.toLowerCase();\r

  \    let o = Geo.cities[c];\r

  \    if (nundef(o)) { c = toUmlaut(c); o = Geo.cities[c]; }\r

  \    console.log('c', c);\r

  \    let center = o.center;\r

  \    M.map.flyTo(center, M.map.getZoom(), { animate: false })\r

  \  }\r

  \  let d = mAppend(dParent, form);\r

  \  autocomplete('myInput', get_values(Geo.cities).map(x => x.name));\r

  }"
maxFit: "function maxFit(olist, prop, min, max) {\r

  \  let res = 0;\r

  \  for (const d of olist) {\r

  \    res = Math.max(res, d[prop]);\r

  \  }\r

  \  if (res < min) res = min; else if (res > max) res = max;\r

  \  return res;\r

  }"
mBackground: "function mBackground(bg, fg) { mStyle(document.body, { bg: bg, fg: fg }); }"
mBare: "function mBare(n, R, uidParent) {\r

  \  let ui;\r

  \  let dParent = mBy(n.idUiParent);\r

  \  ui = mDiv(dParent);\r

  \  if (isdef(n.content)) { mNode(n.content, ui) }\r

  \  return ui;\r

  }"
mBg: function mBg(d, color) { d.style.backgroundColor = color; }
mBox: "function mBox(w, h, color, dParent = null) { let d = mDiv(dParent);
  return mStyle(d, { 'background-color': color, position: 'absolute', display:
  'inline', width: w, height: h }); }"
mBoxFromMargins: "function mBoxFromMargins(dParent, t, r, b, l, styles, id,
  inner, classes) {\r

  \  let d = mDiv(dParent, { position: 'absolute', top: t, right: r, bottom:
  b, left: l }, id, inner, classes);\r

  \  let pos = dParent.style.position;\r

  \  if (pos != 'absolute') dParent.style.position = 'relative';\r

  \  if (isdef(styles)) mStyle(d, styles);\r

  \  return d;\r

  }"
mButton: "function mButton(caption, handler, dParent, styles, classes, id) {\r

  \  let x = mCreate('button');\r

  \  x.innerHTML = caption;\r

  \  if (isdef(handler)) x.onclick = handler;\r

  \  if (isdef(dParent)) toElem(dParent).appendChild(x);\r

  \  if (isdef(styles)) mStyle(x, styles);\r

  \  if (isdef(classes)) mClass(x, classes);\r

  \  if (isdef(id)) x.id = id;\r

  \  return x;\r

  }"
mButtonX: "function mButtonX(dParent, handler, pos = 'tr', sz = 25, color =
  'white') {\r

  \  let d2 = mDiv(dParent, { fg: color, w: sz, h: sz, cursor: 'pointer' },
  null, `<i class=\"fa fa-times\" style=\"font-size:${sz}px;\"></i>`, 'btnX');\r

  \  mPlace(d2, pos, 2);\r

  \  d2.onclick = handler;\r

  \  return d2;\r

  }"
mBy: function mBy(id) { return document.getElementById(id); }
mById: function mById(id) { return document.getElementById(id); }
mCancelMagnify: "function mCancelMagnify(img, path) {\r

  \  if (isdef(MAGNIFIER_IMAGE)) { MAGNIFIER_IMAGE.remove(); MAGNIFIER_IMAGE =
  null; }\r

  }"
mCanvas: "function mCanvas(dParent, styles = {}, bstyles = {}, play = null,
  pause = null, origin = 'tl') {\r

  \  let cv = mCreate('canvas');\r

  \  mAppend(toElem(dParent), cv);\r

  \  addKeys({ w: 500, h: 500, bg: '#222', rounding: 10 }, styles);\r

  \  mStyle(cv, styles);\r

  \  let [w, h] = [cv.width, cv.height] = [styles.w, styles.h];\r

  \  let cx = cv.getContext('2d');\r

  \  let [x, y] = posToPoint(origin, w, h);\r

  \  cx.translate(x, y);\r

  \  if (!play) return { cv: cv, cx: cx, origin: { x: x, y: y }, x: 0, y: 0,
  w: w, h: h };\r

  \  mLinebreak(dParent)\r

  \  addKeys({ fz: 28, fg: 'skyblue', display: 'flex', ajcenter: true, w:
  styles.w }, bstyles)\r

  \  let controls = mPlayPause(dParent, bstyles, play, pause);\r

  \  return { cv: cv, cx: cx, origin: { x: x, y: y }, x: 0, y: 0, w: w, h: h,
  controls: controls.ui, play: controls.play, pause: controls.pause, stop:
  controls.play, stop: controls.pause };\r

  }"
mCanvas100: "function mCanvas100(dParent) { let d = mDiv(dParent); mStyleX(d, {
  position: 'absolute', w: '100%', h: '100%' }); return d; }"
mCard: "function mCard(dParent, styles, classtr = '', id = null) {\r

  \  let classes = toWords(\"card300 wb \" + classtr);\r

  \  return mDiv(dParent, styles, id, null, classes);\r

  }"
mCard52: "function mCard52(n, R, uidParent) {\r

  \  let dParent = mBy(n.idUiParent);\r

  \  console.log('...MCARD52')\r

  \  let ui;\r

  \  let w, h;\r

  \  if (n.params.size) { w = n.params.size.w; h = n.params.size.h; }\r

  \  else[w, h] = [70, 110];\r

  \  if (nundef(n.content)) ui = cardFace({}, w, h);\r

  \  else {\r

  \    if (isDict(n.content)) {\r

  \      let o = n.content;\r

  \      let rank = isdef(o.rank) ? o.rank : null;\r

  \      let key = isdef(o.key) ? o.key : null;\r

  \      let suit = isdef(o.suit) ? o.suit : null;\r

  \      let cardKey = isdef(o.cardKey) ? o.cardKey : null;\r

  \      ui = cardFace({ rank: rank, suit: suit, key: key, cardKey: cardKey },
  w, h);\r

  \    } else if (isString(n.content)) {\r

  \      let s = n.content;\r

  \      let len = s.length;\r

  \      if (len == 1) ui = cardFace({ rank: s }, w, h);\r

  \      else if (len == 2) {\r

  \        ui = cardFace({ cardKey: s }, w, h);\r

  \      } else ui = cardFace({ key: s }, w, h);\r

  \    }\r

  \  }\r

  \  mAppend(dParent, ui);\r

  \  n.potentialOverlap = true;\r

  \  return ui;\r

  }"
mCard52_Wrapper: "function mCard52_Wrapper(n, R, uidParent) {\r

  \  let dParent = mBy(n.idUiParent);\r

  \  let uiWrapper = mDiv(dParent);\r

  \  addClass(uiWrapper, 'cardWrapper');\r

  \  let ui;\r

  \  let w, h;\r

  \  if (n.params.size) { w = n.params.size.w; h = n.params.size.h; }\r

  \  else[w, h] = [70, 110];\r

  \  if (nundef(n.content)) ui = cardFace({}, w, h);\r

  \  else {\r

  \    if (isDict(n.content)) {\r

  \      let o = n.content;\r

  \      let rank = isdef(o.rank) ? o.rank : null;\r

  \      let key = isdef(o.key) ? o.key : null;\r

  \      let suit = isdef(o.suit) ? o.suit : null;\r

  \      let cardKey = isdef(o.cardKey) ? o.cardKey : null;\r

  \      ui = cardFace({ rank: rank, suit: suit, key: key, cardKey: cardKey },
  w, h);\r

  \    } else if (isString(n.content)) {\r

  \      let s = n.content;\r

  \      let len = s.length;\r

  \      if (len == 1) ui = cardFace({ rank: s }, w, h);\r

  \      else if (len == 2) {\r

  \        ui = cardFace({ cardKey: s }, w, h);\r

  \      } else ui = cardFace({ key: s }, w, h);\r

  \    }\r

  \  }\r

  \  mAppend(uiWrapper, ui);\r

  \  return ui;\r

  }"
mCardButton: "function mCardButton(caption, handler, dParent, styles, classtr =
  '', id = null) {\r

  \  let classes = toWords(\"card300 wb fett no_outline btn\" + classtr);\r

  \  return mButton(caption, handler, dParent, styles, classes, id);\r

  }"
mCardText: "function mCardText(ckey, sz, color) { return is_jolly(ckey) ? '<span
  style=\"font-family:Algerian\">jolly</span>' : `${ckey[0]}${mSuit(ckey, sz,
  color)}`; }"
mCellContent: "function mCellContent(dCell, styles, html) {\r

  \  clearElement(dCell);\r

  \  let d = mDiv(dCell, { w: '100%', h: '100%' });\r

  \  mCenterCenterFlex(d);\r

  \  let d1 = mDiv(d, styles, null, html);\r

  \  mCenterCenterFlex(d1);\r

  \  return d1;\r

  }"
mCenter: function mCenter(d, gap) { mCenterFlex(d, true, false, true, gap); }
mCenterAbs: "function mCenterAbs(d, offsetX = 0, offsetY = 0) {\r

  \  let dParent = d.parentNode;\r

  \  if (nundef(dParent)) return;\r

  \  let b = getBounds(dParent);\r

  \  let b1 = getBounds(d);\r

  \  let h = b.height;\r

  \  let h1 = b1.height;\r

  \  let hdiff = h - h1;\r

  \  d.style.top = (offsetY + hdiff / 2) + 'px';\r

  \  let w = b.width;\r

  \  let w1 = b1.width;\r

  \  let wdiff = w - w1;\r

  \  d.style.left = (offsetX + wdiff / 2) + 'px';\r

  \  d.style.position = 'absolute';\r

  \  if (isEmpty(dParent.style.position)) dParent.style.position =
  'relative';\r

  }"
mCenterAbs_v0: "function mCenterAbs_v0(d) {\r

  \  let dParent = d.parentNode;\r

  \  if (nundef(dParent)) return;\r

  \  let b = getBounds(dParent);\r

  \  let b1 = getBounds(d);\r

  \  let h = b.height;\r

  \  let h1 = b1.height;\r

  \  let hdiff = h - h1;\r

  \  d.style.top = (hdiff / 2) + 'px';\r

  \  let w = b.width;\r

  \  let w1 = b1.width;\r

  \  console.log('zone w:', w, 'item w:', w1);\r

  \  let wdiff = w - w1;\r

  \  d.style.left = (wdiff / 2) + 'px';\r

  \  d.style.position = 'absolute';\r

  \  console.log('parent position', dParent.style.position)\r

  \  if (isEmpty(dParent.style.position)) dParent.style.position =
  'relative';\r

  \  console.log('d', d)\r

  }"
mCenterAt: "function mCenterAt(d, x, y) {\r

  \  let rect = getRect(d);\r

  \  mPos(d, x - rect.w / 2, y - rect.h / 2);\r

  }"
mCenterCenter: function mCenterCenter(d, gap) { mCenterCenterFlex(d, gap); }
mCenterCenterFlex: function mCenterCenterFlex(d, gap) { mCenterFlex(d, true, true, true, gap); }
mCenteredNode: "function mCenteredNode(content) {\r

  \  let d = mNode(content);\r

  \  return d;\r

  }"
mCenterFlex: "function mCenterFlex(d, hCenter = true, vCenter = false, wrap =
  true, gap = null) {\r

  \  let styles = { display: 'flex' };\r

  \  if (hCenter) styles['justify-content'] = 'center';\r

  \  styles['align-content'] = vCenter ? 'center' : 'flex-start';\r

  \  if (wrap) styles['flex-wrap'] = 'wrap';\r

  \  if (gap) styles.gap = gap;\r

  \  mStyle(d, styles);\r

  }"
mCenterFlexNowrap: function mCenterFlexNowrap(d) { mCenterFlex(d, true, true, false); }
mCenterH: "function mCenterH(d) {\r

  \  let dParent = d.parentNode;\r

  \  let b = getBounds(dParent);\r

  \  let h = b.width;\r

  \  let b1 = getBounds(d);\r

  \  let h1 = b1.width;\r

  \  let diff = h - h1;\r

  \  d.style.marginleft = (diff / 2) + 'px';\r

  }"
mCenterText: function mCenterText(d) { d.style.textAlign = 'center'; }
mCenterV: "function mCenterV(d) {\r

  \  let dParent = d.parentNode;\r

  \  let b = getBounds(dParent);\r

  \  let h = b.height;\r

  \  let b1 = getBounds(d);\r

  \  let h1 = b1.height;\r

  \  let diff = h - h1;\r

  \  d.style.marginTop = (diff / 2) + 'px';\r

  }"
mCheckbox: "function mCheckbox(label, val, dParent, handler, styles) {\r

  \  styles.align = 'left';\r

  \  let d = mDiv(dParent, styles);\r

  \  let hpad = valf(styles.hpadding, 4);\r

  \  let dLabel = mDiv(d, { w: '40%', align: 'right', hpadding: hpad, display:
  'inline-block' }, null, label);\r

  \  let d2 = mDiv(d, { display: 'inline', w: '50%', hpadding: hpad });\r

  \  let inp = createElementFromHTML(\r

  \    `<input type=\"checkbox\" class=\"checkbox\" ` + (val === true ?
  'checked=true' : '') + ` >`);\r

  \  mAppend(d2, inp);\r

  \  inp.onchange = (ev) => { handler(inp.checked, ev); };\r

  \  return inp;\r

  }"
mCheckbox_dep: "function mCheckbox_dep(label, val, dParent, styles = {}, id) {\r

  \  let d = mDiv(dParent, { display: 'inline-block', align: 'left' });\r

  \  let inp = createElementFromHTML(\r

  \    `<input type=\"checkbox\" class=\"checkbox\" ${(val === true ?
  'checked=true' : '')} >`\r

  \  );\r

  \  if (isdef(id)) inp.id = id;\r

  \  let labelui = createElementFromHTML(`<label>${label}</label>`);\r

  \  mAppend(d, labelui);\r

  \  mAppend(labelui, inp);\r

  \  mStyleX(inp, styles);\r

  \  mClass(inp, 'input');\r

  \  return inp;\r

  }"
mCheckit: "function mCheckit(elem, sz = 50) {\r

  \  if (nundef(sz)) sz = getRect(elem).h;\r

  \  let d = markerSuccess();\r

  \  mpOver(d, elem, sz * (4 / 5), 'limegreen', 'segoeBlack');\r

  \  mMoveBy(d, 0, -4);\r

  \  return d;\r

  }"
mCircle: "function mCircle(dParent, x, y, rad, color) {\r

  \  let d = mDiv(dParent, { w: 2 * rad, h: 2 * rad, bg: color, rounding:
  '50%' });\r

  \  mCenterAt(d, x, y);\r

  \  return d;\r

  }"
mClass: "function mClass(d) {\r

  \  d = toElem(d);\r

  \  if (arguments.length == 2) {\r

  \    let arg = arguments[1];\r

  \    if (isString(arg) && arg.indexOf(' ') > 0) { arg = [toWords(arg)]; }\r

  \    else if (isString(arg)) arg = [arg];\r

  \    if (isList(arg)) {\r

  \      for (let i = 0; i < arg.length; i++) {\r

  \        d.classList.add(arg[i]);\r

  \      }\r

  \    }\r

  \  } else for (let i = 1; i < arguments.length; i++)
  d.classList.add(arguments[i]);\r

  }"
mClass0: function mClass0(d) { d = toElem(d); d.className = ''; }
mClasses: function mClasses(d, lst) { for (let i = 1; i < lst.length; i++)
  d.classList.add(lst[i]); }
mClassOnly: function mClassOnly(d, s) { d.className = s; }
mClassRemove: function mClassRemove(d) { d = toElem(d); for (let i = 1; i <
  arguments.length; i++) d.classList.remove(arguments[i]); }
mClassReplace: function mClassReplace(d, weg, her) { mClassRemove(d, weg); mClass(d, her); }
mClassToggle: "function mClassToggle(d, classes) {\r

  \  let wlist = toWords(classes);\r

  \  d = toElem(d);\r

  \  for (const c of wlist) if (d.classList.contains(c)) mClassRemove(d, c);
  else mClass(d, c);\r

  }"
mClear: function mClear(d) { clearElement(toElem(d)); }
mColFlex: "function mColFlex(dParent, chflex = [1, 5, 1], bgs) {\r

  \  let styles = { opacity: 1, display: 'flex', aitems: 'stretch',
  'flex-flow': 'nowrap' };\r

  \  mStyle(dParent, styles);\r

  \  let res = [];\r

  \  for (let i = 0; i < chflex.length; i++) {\r

  \    let bg = isdef(bgs) ? bgs[i] : null;\r

  \    let d1 = mDiv(dParent, { flex: chflex[i], bg: bg });\r

  \    res.push(d1);\r

  \  }\r

  \  return res;\r

  }"
mColor: "function mColor(d, bg, fg) { return mStyle(d, { 'background-color': bg,
  'color': fg }); }"
mColorLetters: "function mColorLetters(s, brightness) {\r

  \  return toLetters(s).map(x => `<div
  style='display:inline-block;transform:rotate(${rChoose([10, 5, -10,
  -5])}deg);color:${rColor(brightness)}'>${x == ' ' ? '&nbsp;' :
  x}</div>`).join('');\r

  }"
mColorPicker0: "function mColorPicker0(dParent, palette, onColor) {\r

  \  let dPalette = mDiv(dParent, { margin: 4 }); mFlex(dPalette);\r

  \  let items = [];\r

  \  for (const c of palette) {\r

  \    dColor = mDiv(dPalette, { display: 'inline-block', w: 50, h: 50, bg: c,
  rounding: 4, margin: 4 });\r

  \    let item = { color: c, isSelected: false };\r

  \    iAdd(item, { div: dColor });\r

  \    items.push(item);\r

  \  }\r

  \  let picker = { div: dPalette, selected: null, items: items };\r

  \  for (const item of items) {\r

  \    iDiv(item).onclick = (ev) => {\r

  \      console.log('click!!!', ev.target);\r

  \      picker.selectedItem = iToggleSingleSelection(item, items);\r

  \      onColor(item.color);\r

  \    }\r

  \  }\r

  \  return picker;\r

  }"
mColorPicker1: "function mColorPicker1(dParent, palette, onColor) {\r

  \  let dPalette = mDiv(dParent, { margin: 4 }); mFlex(dPalette);\r

  \  let items = [];\r

  \  for (const c of palette) {\r

  \    dColor = mDiv(dPalette, { display: 'inline-block', w: 50, h: 50, bg: c,
  rounding: 4, margin: 4 });\r

  \    let item = { color: c, isSelected: false };\r

  \    iAdd(item, { div: dColor });\r

  \    items.push(item);\r

  \  }\r

  \  let picker = { div: dPalette, selected: null, items: items };\r

  \  for (const item of items) {\r

  \    iDiv(item).onclick = (ev) => {\r

  \      console.log('click!!!', ev.target);\r

  \      picker.selectedItem = iToggleSingleSelection(item, items);\r

  \      onColor(item.color);\r

  \    }\r

  \  }\r

  \  let elem = mCreate('input'); mAppend(dPalette, elem);\r

  \  let alphaPicker = new JSColor(elem, {});\r

  \  let alphaItem = { isSelected: false };\r

  \  alphaPicker.onChange = () => { alphaItem.color = elem.value;
  onColor(elem.value); }\r

  \  alphaItem.picker = alphaPicker;\r

  \  iAdd(alphaItem, { div: elem });\r

  \  items.push(alphaItem);\r

  \  return picker;\r

  }"
mColorPicker2: "function mColorPicker2(dParent, palette, onColor, initialColor)
  {\r

  \  let elem = mDiv(dParent, { w: 50, h: 50, display: 'inline-block' });\r

  \  let picker = new JSColor(elem, {\r

  \    alpha: 'ff',\r

  \    closeButton: true,\r

  \    value: initialColor,\r

  \    palette: palette,\r

  \  });\r

  \  picker.onInput = () => { let c = picker.toHEXAString(); onColor(c);
  console.log('picked', c); }\r

  \  return picker;\r

  }"
mColorPicker3: "function mColorPicker3(elem, palette, onColor, initialColor) {\r

  \  let picker = new JSColor(elem, {\r

  \    alpha: 'ff',\r

  \    closeButton: true,\r

  \    value: initialColor,\r

  \    palette: palette,\r

  \  });\r

  \  picker.onInput = () => { let c = picker.toHEXAString(); onColor(c);
  console.log('picked', c); }\r

  \  return picker;\r

  }"
mColorPickerBehavior: "function mColorPickerBehavior(value, targetImage, elem,
  handler) {\r

  \  let hues = arrTake(colorHueWheel(value), 10);\r

  \  let colorPalette = hues.map(x => colorFrom(colorHSLBuild(x)));\r

  \  let palette = isdef(targetImage) ? colorPaletteFromImage(targetImage) :
  colorPalette;\r

  \  mStyle(elem, { bg: value });\r

  \  let inp = new JSColor(elem, { alpha: 'ff', closeButton: true, value:
  value, palette: palette, });\r

  \  inp.onInput = () => { let c = inp.toHEXAString(); handler(c); }\r

  \  return inp;\r

  }"
mColorPickerControl: "function mColorPickerControl(label, value, targetImage,
  dParent, handler, styles = { hpadding: 25 }) {\r

  \  let d = mDiv(dParent, styles);\r

  \  let hpad = valf(styles.hpadding, 6);\r

  \  let dLabel = mDiv(d, { 'vertical-align': 'top', w: '35%', align: 'right',
  hpadding: hpad, display: 'inline-block' }, null, label);\r

  \  let hues = arrTake(colorHueWheel(value), 10);\r

  \  let colorPalette = hues.map(x => colorFrom(colorHSLBuild(x)));\r

  \  let palette = isdef(targetImage) ? colorPaletteFromImage(targetImage) :
  colorPalette;\r

  \  let elem = mDiv(d, { w: '55%', hpadding: hpad, h: 24, rounding: hpad,
  display: 'inline-block' });\r

  \  let inp = new JSColor(elem, {\r

  \    alpha: 'ff',\r

  \    closeButton: true,\r

  \    value: value,\r

  \    palette: palette,\r

  \  });\r

  \  inp.onInput = () => { let c = inp.toHEXAString(); handler(c); }\r

  \  return inp;\r

  }"
mColorX: "function mColorX(d, bg, fg) {\r

  \  [bg, fg] = getExtendedColors(bg, fg);\r

  \  return mColor(d, bg, fg);\r

  }"
mCols: "function mCols(dParent, arr, itemStyles = { bg: 'random' }, rowStyles,
  colStyles, akku) {\r

  \  let d0 = mDiv100(dParent, { display: 'flex', 'justify-content':
  'space-between' });\r

  \  if (isdef(colStyles)) mStyle(d0, colStyles);\r

  \  for (let i = 0; i < arr.length; i++) {\r

  \    let content = arr[i];\r

  \    if (isList(content)) {\r

  \      d1 = mDiv(d0);\r

  \      mRows(d1, content, itemStyles, rowStyles, colStyles, akku);\r

  \    } else {\r

  \      d1 = mContent(content, d0, itemStyles);\r

  \      akku.push(d1);\r

  \    }\r

  \  }\r

  }"
mColsX: "function mColsX(dParent, arr, itemStyles = { bg: 'random' }, rowStyles,
  colStyles, akku) {\r

  \  let d0 = mDiv100(dParent, { display: 'flex', 'justify-content':
  'space-between' });\r

  \  if (isdef(colStyles)) mStyle(d0, colStyles);\r

  \  for (let i = 0; i < arr.length; i++) {\r

  \    let content = arr[i];\r

  \    if (isList(content)) {\r

  \      d1 = mDiv(d0);\r

  \      mRowsX(d1, content, itemStyles, rowStyles, colStyles, akku);\r

  \    } else {\r

  \      d1 = mContentX(content, d0, itemStyles);\r

  \      akku.push(d1);\r

  \    }\r

  \  }\r

  }"
mConfine: "function mConfine(n, modul, min, max) {\r

  \  rem = n % modul; n = n - rem;\r

  \  while (n < min) n += modul;\r

  \  while (n > max) n -= modul;\r

  \  return n;\r

  }"
mContainer: "function mContainer(d, styles = {}) {\r

  \  let defOuterStyles = {\r

  \    display: 'inline-flex', 'flex-direction': 'column',\r

  \    'justify-content': 'center', 'align-items': 'center', 'vertical-align':
  'top',\r

  \    padding: 0, box: true\r

  \  };\r

  \  addKeys(d, defOuterStyles);\r

  \  mStyleX(d, styles);\r

  }"
mContainerSplay: "function mContainerSplay(d, splay, w, h, num, ov) {\r

  \  if (nundef(splay)) splay = 2;\r

  \  if (!isNumber(splay)) splay = get_splay_number(splay);\r

  \  if (isString(ov) && ov[ov.length - 1] == '%') ov = splay == 0 ? 1 : splay
  == 3 ? Number(ov) * h / 100 : Number(ov) * w / 100;\r

  \  if (splay == 3) {\r

  \    d.style.display = 'grid';\r

  \    d.style.gridTemplateRows = `repeat(${num},${ov}px)`;\r

  \    console.log('HAAAAAAAAAAAALLLLLLLLLLLLLLLLLLLLLLLLLLOOOOOOOOOOOOOOOOOO\
  OOOOOOO')\r

  \    d.style.minHeight = `${h + (num - 1) * (ov * 1.1)}px`;\r

  \  } else if (splay == 2 || splay == 1) {\r

  \    d.style.display = 'grid';\r

  \    d.style.gridTemplateColumns = `repeat(${num},${ov}px)`;\r

  \    let wnew = w + (num - 1) * (ov * 1.1);\r

  \    d.style.minWidth = `${w + (num - 1) * (ov * 1.1)}px`;\r

  \  } else if (splay == 0) {\r

  \    d.style.display = 'grid'; ov = .5\r

  \    d.style.gridTemplateColumns = `repeat(${num},${ov}px)`;\r

  \    d.style.minWidth = `${w + (num - 1) * (ov * 1.1)}px`;\r

  \  } else if (splay == 5) {\r

  \    d.style.display = 'grid';\r

  \    d.style.gridTemplateColumns = `${ov}px repeat(${num - 1},${ov /
  2}px)`;\r

  \    d.style.minWidth = `${w + (num) * (ov / 2 * 1.1)}px`;\r

  \  } else if (splay == 4) {\r

  \    d.style.position = 'relative';\r

  \    if (nundef(ov)) ov = .5;\r

  \    d.style.minWidth = `${w + (num - 1) * (ov * 1.1)}px`;\r

  \    d.style.minHeight = `${h + (num - 1) * (ov * 1.1)}px`;\r

  \  }\r

  }"
mContainerSplay_WORKS: "function mContainerSplay_WORKS(d, splay, w, h, num, ov)
  {\r

  \  if (!isNumber(splay)) splay = get_splay_number(splay);\r

  \  if (isString(ov) && ov[ov.length - 1] == '%') ov = splay == 0 ? 1 : splay
  == 3 ? Number(ov) * h / 100 : Number(ov) * w / 100;\r

  \  if (splay == 3) {\r

  \    d.style.display = 'grid';\r

  \    d.style.gridTemplateRows = `repeat(${num},${ov}px)`;\r

  \    d.style.height = `${h + (num - 1) * (ov * 1.1)}px`;\r

  \  } else if (splay == 2 || splay == 1) {\r

  \    d.style.display = 'grid';\r

  \    d.style.gridTemplateColumns = `repeat(${num},${ov}px)`;\r

  \    d.style.width = `${w + (num - 1) * (ov * 1.1)}px`;\r

  \  } else if (splay == 0) {\r

  \    d.style.display = 'grid'; ov = .5\r

  \    d.style.gridTemplateColumns = `repeat(${num},${ov}px)`;\r

  \    d.style.width = `${w + (num - 1) * (ov * 1.1)}px`;\r

  \  } else if (splay == 4) {\r

  \    d.style.position = 'relative';\r

  \    if (nundef(ov)) ov = .5;\r

  \    d.style.width = `${w + (num - 1) * (ov * 1.1)}px`;\r

  \    d.style.height = `${h + (num - 1) * (ov * 1.1)}px`;\r

  \  }\r

  }"
mContent: "function mContent(content, dParent, styles) {\r

  \  let d1 = isdef(Syms[content]) ? mSymInDivShrink(content, dParent, styles)
  : mDiv(dParent, styles, null, content);\r

  \  return d1;\r

  }"
mContentX: "function mContentX(content, dParent, styles = { sz: Card.sz / 5, fg:
  'random' }) {\r

  \  let [key, scale] = isDict(content) ? [content.key, content.scale] :
  [content, 1];\r

  \  if (scale != 1) { styles.transform =
  `scale(${scale},${Math.abs(scale)})`; }\r

  \  let dResult = mDiv(dParent);\r

  \  let ds = isdef(Syms[key]) ? mSym(key, dResult, styles) : mDiv(dResult,
  styles, null, key);\r

  \  return dResult;\r

  }"
mCreate: function mCreate(tag, styles, id) { let d =
  document.createElement(tag); if (isdef(id)) d.id = id; if (isdef(styles))
  mStyle(d, styles); return d; }
mcreate_map: "function mcreate_map(opts) {\r

  \  let center = M.center = valf(opts.center,
  Geo.places.tuerkenschanzpark);\r

  \  let zoom = M.zoom = valf(opts.zoom, 19);\r

  \  let [minzoom, maxzoom] = [M.minzoom, M.maxzoom] = [2, 19];\r

  \  let map = mget_map(center, zoom);\r

  \  mset_bounds(minzoom, maxzoom);\r

  \  mset_layers(opts.base, opts.overlay);\r

  \  return map;\r

  }"
mCreateFrom: "function mCreateFrom(htmlString) {\r

  \  var div = document.createElement('div');\r

  \  div.innerHTML = htmlString.trim();\r

  \  return div.firstChild;\r

  }"
mDataTable: "function mDataTable(reclist, dParent, rowstylefunc, headers, id,
  showheaders = true) {\r

  \  if (nundef(headers)) headers = get_keys(reclist[0]);\r

  \  let t = mTable(dParent, headers, showheaders);\r

  \  if (isdef(id)) t.id = `t${id}`;\r

  \  let rowitems = [];\r

  \  let i = 0;\r

  \  for (const u of reclist) {\r

  \    let rid = isdef(id) ? `r${id}_${i}` : null;\r

  \    r = mTableRow(t, u, headers, rid);\r

  \    if (isdef(rowstylefunc)) mStyle(r.div, rowstylefunc(u));\r

  \    rowitems.push({ div: r.div, colitems: r.colitems, o: u, id: rid, index:
  i });\r

  \    i++;\r

  \  }\r

  \  return { div: t, rowitems: rowitems };\r

  }"
mDefault: "function mDefault(n, R, area) {\r

  \  let ui;\r

  \  let dParent = mBy(n.idUiParent);\r

  \  ui = mDiv(dParent);\r

  \  if (isdef(n.content)) {\r

  \    let d;\r

  \    if (n.type != 'manual00') d = mNode(n.content, ui, n.title,
  isSizedNode(n));\r

  \    else d = mNode(n.content, ui, n.title);\r

  \    if (isdef(n.params['text-align'])) d.style.textAlign =
  n.params['text-align'];\r

  \  }\r

  \  if (n.type != 'manual00') addClassInfo(ui, n);\r

  \  return ui;\r

  }"
mDestroy: function mDestroy(elem) { if (isString(elem)) elem = mById(elem);
  purge(elem); }
mDictionary: "function mDictionary(o, { dParent, title, flattenLists = true,
  className = 'node', omitEmpty = false } = {}) {\r

  \  let oCopy = jsCopy(o);\r

  \  let d = mCreate('div');\r

  \  if (isdef(className)) mClass(d, className);\r

  \  mYaml(d, oCopy);\r

  \  let pre = d.getElementsByTagName('pre')[0];\r

  \  pre.style.fontFamily = 'inherit';\r

  \  if (isdef(title)) mInsert(d, mText(title));\r

  \  if (isdef(dParent)) mAppend(dParent, d);\r

  \  return d;\r

  }"
mDictionary_dep: "function mDictionary_dep(o, { dParent, title, flattenLists =
  true, className = 'node', omitEmpty = false } = {}) {\r

  \  let oCopy = jsCopy(o);\r

  \  if (flattenLists) { recFlattenLists(oCopy); }\r

  \  let d = mCreate('div');\r

  \  if (isdef(className)) mClass(d, className);\r

  \  mYaml(d, oCopy);\r

  \  let pre = d.getElementsByTagName('pre')[0];\r

  \  pre.style.fontFamily = 'inherit';\r

  \  if (isdef(title)) mInsert(d, mText(title));\r

  \  if (isdef(dParent)) mAppend(dParent, d);\r

  \  return d;\r

  }"
mDisable: "function mDisable(elem) { elem = toElem(elem); mStyle(elem, { cursor:
  'default', opacity: 0 }); }"
mDiv: "function mDiv(dParent, styles, id, inner, classes, sizing) {\r

  \  dParent = toElem(dParent);\r

  \  let d = mCreate('div');\r

  \  if (dParent) mAppend(dParent, d);\r

  \  if (isdef(styles)) mStyle(d, styles);\r

  \  if (isdef(classes)) mClass(d, classes);\r

  \  if (isdef(id)) d.id = id;\r

  \  if (isdef(inner)) d.innerHTML = inner;\r

  \  if (isdef(sizing)) { setRect(d, sizing); }\r

  \  return d;\r

  }"
mDiv100: function mDiv100(dParent, styles, id, sizing = false) { let d =
  mDiv(dParent, styles, id); mSize(d, 100, 100, '%', sizing); return d; }
mDivCenteredAt: "function mDivCenteredAt(pt, dParent, styles = {}, id, inner,
  classes) {\r

  \  [w, h] = detect_size_from_styles(styles);\r

  \  addKeys({ position: 'relative' }, dParent);\r

  \  copyKeys({ position: 'absolute', x: w / 2, y: h / 2 }, styles);\r

  \  return mDiv(dParent, styles, id, inner, classes);\r

  }"
mDivG: "function mDivG(area, w, h, color) {\r

  \  let d = mDiv(mBy('table'));\r

  \  if (isdef(w)) mSize(d, w, h);\r

  \  if (isdef(color)) mColor(d, color);\r

  \  let g = aSvgg(d);\r

  \  return g;\r

  }"
mDivItem: "function mDivItem(dParent, styles, id, content) {\r

  \  if (nundef(id)) id = getUID();\r

  \  let d = mDiv(dParent, styles, id, content);\r

  \  return mItem(id, { div: d });\r

  }"
mDivLine: "function mDivLine(dParent, styles = {}, id = null, innerlist = ['',
  '', ''], classes = null) {\r

  \  addKeys({ w: '100%', box: true, padding: 4 }, styles);\r

  \  let d = mDiv(dParent, styles, id,
  `<div>${innerlist[0]}</div><div>${innerlist[1]}</div><div>${innerlist[2]}</di\
  v>`, classes);\r

  \  mStyle(d, { display: 'flex', 'justify-content': 'space-between',
  'align-items': 'center' });\r

  \  return d;\r

  }"
mDivLR: "function mDivLR(dParent, styles, id, innerlist, classes) {\r

  \  let d = mDiv(dParent, styles, id,
  `<div>${innerlist[0]}</div><div>${innerlist[1]}</div>`, classes);\r

  \  mStyle(d, { display: 'flex', 'justify-content': 'space-between',
  'align-items': 'center' });\r

  \  return d;\r

  }"
mDivPosAbs: function mDivPosAbs(x = 0, y = 0, dParent = null) { let d =
  mCreate('div'); if (dParent) mAppend(dParent, d); mPos(d, x, y); return d; }
mDivPosRel: function mDivPosRel(x = 0, y = 0, dParent = null) { let d =
  mCreate('div'); if (dParent) mAppend(dParent, d); mPosRel(d, x, y); return d;
  }
mDivRestOfPage: "function mDivRestOfPage(dParent, dAbove, styles, id, inner,
  classes, sizing) {\r

  \  let d = mDiv(dParent, styles, id, inner, classes, sizing);\r

  \  let fSize = () => {\r

  \    let top = getRect(dAbove).h;\r

  \    console.log('top', top, '?');\r

  \    let h = window.innerHeight - (isNumber(top) ? top : 31);\r

  \    mSize(d, '100%', h);\r

  \    setRect(d);\r

  \    console.log('d', d);\r

  \  };\r

  \  new ResizeObserver(() => {\r

  \    let r = getRect(dAbove);\r

  \    console.log('haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaar', r);\r

  \    fSize();\r

  \  }).observe(dAbove);\r

  \  window.onresize = fSize;\r

  \  return d;\r

  }"
mDivSvg: "function mDivSvg(area, w, h, color) {\r

  \  let d = mDiv(mBy('table'));\r

  \  if (isdef(w)) mSize(d, w, h);\r

  \  if (isdef(color)) mColor(d, color);\r

  \  let g = aSvgg(d);\r

  \  return g;\r

  }"
mdo: "function mdo(o, p, d) {\r

  \  p = { x: p.x, y: p.y + d };\r

  \  if (o) o.setPos(p.x, p.y);\r

  \  return p;\r

  }"
mDom: "function mDom(dParent, styles = {}, opts = {}) {\r

  \  let tag = valf(opts.tag, 'div');\r

  \  let d = document.createElement(tag);\r

  \  mAppend(dParent, d);\r

  \  if (tag == 'textarea') styles.wrap = 'hard';\r

  \  const aliases = {\r

  \    classes: 'className',\r

  \    inner: 'innerHTML',\r

  \    html: 'innerHTML',\r

  \  };\r

  \  for (const opt in opts) { d[valf(aliases[opt], opt)] = opts[opt] };\r

  \  mStyle(d, styles);\r

  \  return d;\r

  }"
mDom100: "function mDom100(dParent, styles, opts) {\r

  \  if (nundef(styles.w) && nundef(styles.wrest)) addKeys({ w100: true },
  styles);\r

  \  if (nundef(styles.h) && nundef(styles.hrest)) addKeys({ h100: true },
  styles);\r

  \  return mDom(dParent, styles, opts);\r

  }"
mDomRest: "function mDomRest(dParent, styles, opts) {\r

  \  if (nundef(styles.w) && nundef(styles.w100)) addKeys({ wrest: true },
  styles);\r

  \  if (nundef(styles.h) && nundef(styles.h100)) addKeys({ hrest: true },
  styles);\r

  \  return mDom(dParent, styles, opts);\r

  }"
mDover: "function mDover(dParent, styles = {}, sizing = true) {\r

  \  let d = mDiv(dParent, styles);\r

  \  mIfNotRelative(dParent);\r

  \  mStyle(d, { position: 'absolute', left: 0, top: 0, w: '100%', h: '100%'
  });\r

  \  setRect(d, sizing);\r

  \  return d;\r

  }"
mDraggable: "function mDraggable(item) {\r

  \  let d = iDiv(item);\r

  \  d.draggable = true;\r

  \  d.ondragstart = drag;\r

  }"
mDropImage: "function mDropImage(e, img) {\r

  \  var dt = e.dataTransfer;\r

  \  console.log('dropped', dt)\r

  \  var files = dt.files;\r

  \  if (files.length) {\r

  \    let imgFile = files[0];\r

  \    var reader = new FileReader();\r

  \    reader.onload = function (e) {\r

  \      img.src = e.target.result;\r

  \      imgFile.data = e.target.result;\r

  \    }\r

  \    reader.readAsDataURL(imgFile);\r

  \  } else {\r

  \    console.log('dropped on', e.target, 'img', img);\r

  \    clearElement(img);\r

  \    var html = dt.getData('text/html');\r

  \    console.log('__________dataTransfer', html);\r

  \    let match = html && /\\bsrc=\"?([^\"\\s]+)\"?\\s*/.exec(html);\r

  \    let url = match && match[1];\r

  \    if (url) {\r

  \      console.log('JA!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\r

  \      img.onerror = function () {\r

  \        alert(\"Error in uploading\");\r

  \      }\r

  \      img.crossOrigin = \"\";\r

  \      img.src = url;\r

  \    }\r

  \  }\r

  }"
mDroppable: "function mDroppable(item, handler, dragoverhandler) {\r

  \  let d = iDiv(item);\r

  \  d.ondragover = isdef(dragoverhandler) ? dragoverhandler :
  default_allowDrop;\r

  \  d.ondrop = handler;\r

  }"
measure_fieldset: "function measure_fieldset(fs) {\r

  \  let legend = fs.firstChild;\r

  \  let r = getRect(legend);\r

  \  let labels = fs.getElementsByTagName('label');\r

  \  let wmax = 0;\r

  \  for (const l of labels) {\r

  \    let r1 = getRect(l);\r

  \    wmax = Math.max(wmax, r1.w);\r

  \  }\r

  \  let wt = r.w;\r

  \  let wo = wmax + 24;\r

  \  let diff = wt - wo;\r

  \  if (diff >= 10) {\r

  \    for (const l of labels) { let d = l.parentNode; mStyle(d, { maleft:
  diff / 2 }); }\r

  \  }\r

  \  let wneeded = Math.max(wt, wo) + 10;\r

  \  mStyle(fs, { wmin: wneeded });\r

  \  for (const l of labels) { let d = l.parentNode; mStyle(l, { display:
  'inline-block', wmin: 50 }); mStyle(d, { wmin: wneeded - 40 }); }\r

  }"
measureDefaultPlayerElement: "function measureDefaultPlayerElement(plms) {\r

  \  let elem = plms.elem;\r

  \  let w = $(elem).width();\r

  \  if (nundef(S.vars.wDefaultPlayer)) S.vars.wDefaultPlayer = w;\r

  \  else if (w > S.vars.wDefaultPlayer) S.vars.wDefaultPlayer = w;\r

  }"
measureDomel: "function measureDomel(mobj) {\r

  \  let el = mobj.elem;\r

  \  let info = window.getComputedStyle(el, null);\r

  \  mobj.x = getAsInt(mobj, info, 'left');\r

  \  mobj.y = getAsInt(mobj, info, 'top');\r

  \  mobj.w = getAsInt(mobj, info, 'width');\r

  \  mobj.h = getAsInt(mobj, info, 'height');\r

  \  mobj.bg = info.backgroundColor;\r

  \  mobj.fg = info.color;\r

  \  return [mobj.x, mobj.y, mobj.w, mobj.h];\r

  }"
measureElem: "function measureElem(ms) {\r

  \  let el = ms.elem;\r

  \  ms.w = el.offsetWidth; ms.h = el.offsetHeight; ms.x = el.offsetLeft; ms.y
  = el.offsetTop;\r

  \  return [ms.x, ms.y, ms.w, ms.h];\r

  }"
measureMSTree: "function measureMSTree(root) {\r

  \  let divs = root.elem.getElementsByTagName('div');\r

  \  let divNames = [...divs].map(x => x.id);\r

  \  divNames = divNames.filter(x => !isEmpty(x));\r

  \  divNames.map(x => { measureDomel(UIS[x]) });\r

  \  let tabDivs =
  document.getElementById('a_d_testing').getElementsByClassName('divInTab');\r

  \  let correctTabName = 'a_d_objects';\r

  \  let correctMS = UIS[correctTabName];\r

  \  for (const div of [...tabDivs]) {\r

  \    let id = div.id;\r

  \    if (id == correctTabName) continue;\r

  \    let mobj = UIS[id];\r

  \    mobj.x = correctMS.x; mobj.y = correctMS.y; mobj.w = correctMS.w;
  mobj.h = correctMS.h;\r

  \  }\r

  }"
measureText: "function measureText(text, styles = {}, cx = null) {\r

  \  if (!cx) {\r

  \    var canvas = getTextWidth.canvas || (getTextWidth.canvas =
  document.createElement('canvas'));\r

  \    cx = canvas.getContext('2d');\r

  \  }\r

  \  cx.font = isdef(styles.font) ? styles.font : `${styles.fz}px
  ${styles.family}`;\r

  \  var metrics = cx.measureText(text);\r

  \  return { w: metrics.width, h: metrics.actualBoundingBoxAscent +
  metrics.actualBoundingBoxDescent };\r

  }"
measureText1: "function measureText1(text, fz, family, weight = 900) {\r

  \  console.log(text, fz, family)\r

  \  let sFont = '' + weight + ' ' + fz + 'px ' + family;\r

  \  sFont = sFont.trim();\r

  \  var canvas = document.createElement('canvas');\r

  \  var context = canvas.getContext('2d');\r

  \  context.font = sFont;\r

  \  var metrics = context.measureText(text);\r

  \  let actualHeight = metrics.actualBoundingBoxAscent +
  metrics.actualBoundingBoxDescent;\r

  \  return { w: metrics.width, h: actualHeight };\r

  }"
measureTextX: "function measureTextX(text, fz, family, weight = 900) {\r

  \  let sFont = '' + weight + ' ' + fz + 'px ' + family;\r

  \  sFont = sFont.trim();\r

  \  var canvas = getTextWidth.canvas || (getTextWidth.canvas =
  document.createElement('canvas'));\r

  \  var context = canvas.getContext('2d');\r

  \  context.font = sFont;\r

  \  var metrics = context.measureText(text);\r

  \  let actualHeight = metrics.actualBoundingBoxAscent +
  metrics.actualBoundingBoxDescent;\r

  \  console.log(metrics.width, actualHeight, fz)\r

  \  return { w: metrics.width, h: actualHeight, fz: fz };\r

  }"
measureWord: "function measureWord(w, fz) { let styles = { fz: fz, family:
  'arial' }; return getSizeWithStyles(w, styles); }"
mEdit: "function mEdit(label, value, dParent, handler, styles, classes, id) {\r

  \  let d = mDiv(dParent, styles);\r

  \  let hpad = valf(styles.hpadding, 4);\r

  \  let dLabel = mDiv(d, { w: '50%', align: 'right', hpadding: hpad, display:
  'inline-block' }, null, label);\r

  \  let inp = mCreateFrom(`<div contenteditable=\"true\"
  spellcheck=\"false\">${value}</div>  `)\r

  \  mAppend(d, inp);\r

  \  mStyle(inp, { display: 'inline-block', w: '50%', align: 'left', hpadding:
  hpad });\r

  \  inp.addEventListener('keydown', unfocusOnEnter);\r

  \  inp.addEventListener('focusout', ev => { handler(inp.innerHTML, ev);
  });\r

  \  inp.onclick = ev => selectText(ev.target);\r

  \  if (isdef(classes)) mClass(inp, classes);\r

  \  if (isdef(id)) inp.id = id;\r

  \  return inp;\r

  }"
mEditableInput: "function mEditableInput(dParent, label, val, styles, classes,
  id) {\r

  \  let labelElem = mCreateFrom(`<span>${label}</span>  `)\r

  \  let elem = mCreateFrom(`<span contenteditable=\"true\"
  spellcheck=\"false\">${val}</span>  `)\r

  \  elem.addEventListener('keydown', (ev) => {\r

  \    if (ev.key === 'Enter') {\r

  \      ev.preventDefault();\r

  \      mBy('dummy').focus();\r

  \    }\r

  \  });\r

  \  let dui = mDiv(dParent, { margin: 2 });\r

  \  mAppend(dui, labelElem);\r

  \  mAppend(dui, elem);\r

  \  if (isdef(styles)) {\r

  \    if (isdef(styles.wInput)) mStyle(elem, { wmin: styles.wInput });\r

  \    mStyle(elem, styles);\r

  \  }\r

  \  if (isdef(classes)) mStyle(elem, classes);\r

  \  if (isdef(id)) elem.id = id;\r

  \  return elem;\r

  }"
mEditableOnEdited: "function mEditableOnEdited(id, dParent, label, initialVal,
  onEdited, onOpening, styles, classes) {\r

  \  let inp = mEditableInput(dParent, label, initialVal, styles, classes);\r

  \  inp.id = id;\r

  \  if (isdef(onOpening)) { inp.addEventListener('focus', ev =>
  onOpening(ev)); }\r

  \  inp.addEventListener('focusout', ev => {\r

  \    window.getSelection().removeAllRanges();\r

  \    if (isdef(onEdited)) onEdited(inp.innerHTML, ev);\r

  \  });\r

  \  return inp;\r

  }"
mEditNumber: "function mEditNumber(label, value, dParent, handler, styles,
  classes, id, triggerOnChange = false) {\r

  \  let d = mDiv(dParent, styles);\r

  \  let hpad = valf(styles.hpadding, 4);\r

  \  let dLabel = mDiv(d, { w: '50%', align: 'right', hpadding: hpad, display:
  'inline-block' }, null, label);\r

  \  if (nundef(handler)) handler = x => console.log(x);\r

  \  let inp = mCreateFrom(`<div contenteditable=\"true\"
  spellcheck=\"false\">${value}</div>  `)\r

  \  mAppend(d, inp);\r

  \  mStyle(inp, { display: 'inline-block', w: '40%', align: 'left', hpadding:
  hpad });\r

  \  inp.addEventListener('keydown', unfocusOnEnter);\r

  \  inp.addEventListener('focusout', ev => { handler(inp.innerHTML, ev);
  });\r

  \  inp.onclick = ev => selectText(ev.target);\r

  \  if (isdef(classes)) mClass(inp, classes);\r

  \  if (isdef(id)) inp.id = id;\r

  \  return inp;\r

  }"
mEditRange: "function mEditRange(label, value, min, max, step, dParent, handler,
  styles, classes, id, triggerOnChange = true) {\r

  \  let d = mDiv(dParent, styles);\r

  \  let hpad = valf(styles.hpadding, 4);\r

  \  let dLabel = mDiv(d, { w: '30%', align: 'right', hpadding: hpad, display:
  'inline-block' }, null, label);\r

  \  let inpText = mCreateFrom(`<input type='number'  step=${step}
  min=\"${min}\" max=\"${max}\" value=\"${value}\" ></input>`);\r

  \  let inp = mCreateFrom(`<input type=\"range\" step=${step} min=\"${min}\"
  max=\"${max}\" value=\"${value}\" ></input>`);\r

  \  mAppend(d, inpText);\r

  \  mAppend(d, inp);\r

  \  mStyle(inpText, { display: 'inline', w: '20%', align: 'left', hpadding:
  hpad });\r

  \  mStyle(inp, { display: 'inline', w: '40%', hpadding: hpad });\r

  \  inpText.onchange = (ev) => { inp.value = inpText.value;
  handler(inpText.value, ev); };\r

  \  inpText.onclick = ev => selectText(ev.target);\r

  \  inp.onchange = (ev) => { inpText.value = inp.value;
  handler(inpText.value, ev); };\r

  \  if (isdef(classes)) mClass(inp, classes);\r

  \  if (isdef(id)) inp.id = id;\r

  \  return inpText;\r

  }"
mEditX: "function mEditX(label, val, dParent, styles, classes, handler, id, opt
  = {}) {\r

  \  let defOptions = {\r

  \    alignLabel: 'right',\r

  \    fgLabel: 'silver',\r

  \    wminLabel: 120,\r

  \    alignInput: 'left',\r

  \    fgInput: 'white',\r

  \    wminInput: 50,\r

  \    wminRight: 120,\r

  \    align: 'center',\r

  \  }\r

  \  addKeys(defOptions, opt);\r

  \  let wminTotal = wminLabel + wminRight;\r

  \  if (nundef(styles)) styles = {};\r

  \  if (nundef(styles.wmin)) styles.wmin = 0;\r

  \  styles.wmin = Math.max(styles.wmin, wminTotal);\r

  \  styles.align = opt.align;\r

  \  let dOuter = mDiv(dParent, styles, id, null, classes);\r

  \  let dLabel = mDiv(dOuter, { fg: opt.fgLabel, wmin: opt.wminLabel, align:
  opt.alignLabel }, null, label);\r

  \  let dInput = mDiv(dOuter, { contenteditable: true, spellcheck: false, fg:
  opt.fgInput, wmin: opt.wminInput, align: opt.alignInput }, null, val);\r

  \  dInput.onfocusout = ev => handler(dInput.innerHTML, ev);\r

  \  dInput.onkeydown = (ev) => {\r

  \    if (ev.key === 'Enter') {\r

  \      ev.preventDefault();\r

  \      mBy('dummy').focus();\r

  \    }\r

  \  }\r

  \  return dInput;\r

  }"
mEnable: "function mEnable(elem) { elem = toElem(elem); mStyle(elem, { cursor:
  'pointer', opacity: 1 }); }"
mEnsure: "function mEnsure(d) { return isString(d) ? mById(d) : d; }"
menu_disable: "function menu_disable(key, elem) {\r

  \  let d = menu_find_elem(key, elem);\r

  \  if (d) {\r

  \    mClassRemove(d, 'enabled');\r

  \    mClass(d, 'disabled');\r

  \    d.setAttribute('enabled', false);\r

  \  }\r

  }"
menu_enable: "function menu_enable(key, elem) {\r

  \  let d = menu_find_elem(key, elem);\r

  \  if (d) {\r

  \    mClassRemove(d, 'disabled');\r

  \    mClass(d, 'enabled');\r

  \    d.setAttribute('enabled', true);\r

  \  }\r

  }"
menu_enabled: "function menu_enabled(key, elem) {\r

  \  let d = menu_find_elem(key, elem);\r

  \  return d ? mHasClass(d, 'enabled') : false;\r

  }"
menu_find_elem: "function menu_find_elem(key, elem) {\r

  \  elem = isdef(elem) ? elem : isdef(mBy('label_' + key)) ? mBy('label_' +
  key) : isdef(mBy(key)) ? mBy(key) : isdef(Items[key]) ? iDiv(Items[key]) :
  null;\r

  \  if (nundef(elem)) { console.log('no menu with key', key); return null;
  }\r

  \  return elem;\r

  }"
merge1: "function merge1(sp1, sp2, { dataMerge } = {}) {\r

  \  let options = {\r

  \    sub: (a, b, opt) => b.concat(a),\r

  \    data: (a, b, opt) => isLiteral(a) && isLiteral(b) ?\r

  \      nundef(dataMerge) || dataMerge == 'concat' ? a + ' ' + b\r

  \        : dataMerge == 'reverse' ? b + ' ' + a\r

  \          : b\r

  \      : dm1(a, b, opt),\r

  \  };\r

  \  return dm1(sp1, sp2, options);\r

  }"
mergeAllRefsToIdIntoNode: "function mergeAllRefsToIdIntoNode(n, R) {\r

  \  let loc = n._id;\r

  \  let refDictBySpecNodeName = R.refs[loc];\r

  \  let nNew = jsCopy(n);\r

  \  for (const spNodeName in refDictBySpecNodeName) {\r

  \    let reflist = refDictBySpecNodeName[spNodeName];\r

  \    for (const ref of reflist) {\r

  \      nNew = deepmergeOverride(nNew, ref);\r

  \    }\r

  \  }\r

  \  return nNew;\r

  }"
mergeArr: "function mergeArr(a, b, opt) {\r

  \  var res = a.slice()\r

  \  b.forEach(function (e, i) {\r

  \    if (typeof res[i] === 'undefined') {\r

  \      res[i] = cloneIfNecessary(e, opt)\r

  \    } else if (isDictOrList(e)) {\r

  \      res[i] = dm1(a[i], e, opt);\r

  \    } else if (a.indexOf(e) === -1) {\r

  \      res.push(cloneIfNecessary(e, opt));\r

  \    }\r

  \  })\r

  \  return res\r

  }"
mergeChildrenWithRefs: "function mergeChildrenWithRefs(n, R) {\r

  \  for (const k in n) {\r

  \    let ch = n[k];\r

  \    if (nundef(ch._id)) continue;\r

  \    let loc = ch._id;\r

  \    let refs = R.refs[loc];\r

  \    if (nundef(refs)) continue;\r

  \    let spKey = Object.keys(refs)[0];\r

  \    let nSpec = R.lastSpec[spKey];\r

  \    let oNew = deepmerge(n[k], nSpec);\r

  \    n[k] = oNew;\r

  \  }\r

  }"
mergeCombine: function mergeCombine(base, drueber) { return _deepMerge(base, drueber); }
mergeCombineArrays: "function mergeCombineArrays(base, drueber) {\r

  \  return deepmerge(base, drueber);\r

  }"
mergeCreatedAndUpdated: "function mergeCreatedAndUpdated(data) {\r

  \  if (!('created' in data)) data.created = {};\r

  \  data.created = extend(true, data.created, data.updated);\r

  \  let mergeFailed = false;\r

  \  let d = {};\r

  \  if ('created' in data && 'updated' in data) {\r

  \    for (const id in data.updated) {\r

  \      if (!(id in data.created)) {\r

  \        d.summary = 'missing id in data.created ' + id;\r

  \      } else {\r

  \        for (const key in data.updated[id]) {\r

  \          if (!(key in data.created[id]) || data.created[id][key] !=
  data.updated[id][key]) {\r

  \            if (key == 'visible') {\r

  \              let set1 = getVisibleSet(data.created[id]);\r

  \              let set2 = getVisibleSet(data.updated[id]);\r

  \              if (sameList(set1, set2)) continue;\r

  \              if (empty(set1) && empty(set2)) continue;\r

  \            }\r

  \          }\r

  \        }\r

  \      }\r

  \      if (mergeFailed) {\r

  \        console.log('MERGE FAILED!!!', id, d.summary.toString(), data);\r

  \      }\r

  \    }\r

  \  }\r

  }"
mergedSpecNode: "function mergedSpecNode(n1, n2) {\r

  \  if (nundef(n1.cond) && nundef(n2.cond)) {\r

  \    return merge1(n1, n2);\r

  \  } else {\r

  \    return deepmerge(n1, n2);\r

  \  }\r

  }"
mergeDynSetNodes: "function mergeDynSetNodes(o) {\r

  \  let merged = {};\r

  \  let interpool = null;\r

  \  for (const nodeId in o.RSG) {\r

  \    let node = jsCopy(dynSpec[nodeId]);\r

  \    let pool = node.pool;\r

  \    if (pool) {\r

  \      if (!interpool) interpool = pool;\r

  \      else interpool = intersection(interpool, pool);\r

  \    }\r

  \    merged = deepmerge(merged, node);\r

  \  }\r

  \  merged.pool = interpool;\r

  \  return merged;\r

  }"
mergeIncludingPrototype: "function mergeIncludingPrototype(oid, o) {\r

  \  let merged = mergeDynSetNodes(o);\r

  \  merged.oid = oid;\r

  \  let t = merged.type;\r

  \  let info;\r

  \  if (t && PROTO[t]) {\r

  \    info = deepmerge(merged, jsCopy(PROTO[t]));\r

  \  } else info = merged;\r

  \  return info;\r

  }"
mergeObj: "function mergeObj(a, b, opt) {\r

  \  var res = {}\r

  \  if (nundef(a)) return b;\r

  \  else if (nundef(b)) return a;\r

  \  else if (isLiteral(a)) return b;\r

  \  else if (isLiteral(b)) return a;\r

  \  else if (isDictOrList(a)) {\r

  \    Object.keys(a).forEach(function (key) {\r

  \      res[key] = cloneIfNecessary(a[key], opt);\r

  \    })\r

  \  };\r

  \  Object.keys(b).forEach(function (key) {\r

  \    let func = opt[key];\r

  \    if (!res[key]) {\r

  \      res[key] = isLiteral(b[key]) ? b[key] : jsCopy(b[key]);\r

  \    } else if (func) {\r

  \      res[key] = func(a[key], b[key], opt);\r

  \    } else if (isLiteral(a[key])) {\r

  \      res[key] = cloneIfNecessary(b[key], opt);\r

  \    } else {\r

  \      res[key] = dm1(a[key], b[key], opt);\r

  \    }\r

  \  })\r

  \  return res;\r

  }"
mergeObject: "function mergeObject(target, source, optionsArgument) {\r

  \  var destination = {}\r

  \  if (isMergeableObject(target)) {\r

  \    Object.keys(target).forEach(function (key) {\r

  \      destination[key] = cloneIfNecessary(target[key], optionsArgument)\r

  \    })\r

  \  }\r

  \  Object.keys(source).forEach(function (key) {\r

  \    if (!isMergeableObject(source[key]) || !target[key]) {\r

  \      destination[key] = cloneIfNecessary(source[key], optionsArgument)\r

  \    } else {\r

  \      destination[key] = deepmerge(target[key], source[key],
  optionsArgument)\r

  \    }\r

  \  })\r

  \  return destination;\r

  }"
mergeOverride: "function mergeOverride(base, drueber) { return _deepMerge(base,
  drueber, { arrayMerge: _overwriteMerge }); }"
mergeOverrideArrays: "function mergeOverrideArrays(base, drueber) {\r

  \  return deepmerge(base, drueber, { arrayMerge: overwriteMerge });\r

  }"
message_controls: "function message_controls() {\r

  \  return `\r

  \  </div>\r

  \  <div
  style='display:flex;gap:10px;padding:10px;box-sizing:border-box;width:100%;he\
  ight:60px;'>\r

  \    <label for='message_file'><img
  src='../base/assets/images/icons/clip.png'
  style='opacity:0.8;width:30px;cursor:pointer;' ></label>\r

  \    <input type='file' id='message_file' name='file' style='display:none'
  onchange='send_image(this.files)' />\r

  \    <input id='message_text' onkeyup='enter_pressed(event)'
  style='flex:6;border:solid thin
  #ccc;border-bottom:none;font-size:14px;padding:4px;outline:none;' type='text'
  placeHolder='type your message'/>\r

  \    <input style='flex:1;cursor:pointer;outline:none;' type='button'
  value='send' onclick='send_message(event)'/>\r

  \  </div>\r

  \  <span onclick='delete_thread(event)'
  style='color:white;cursor:pointer;'>Delete this thread </span>\r

  \  </div>`;\r

  }"
message_left: "function message_left(msg, sender) {\r

  \  image = sender.imagePath;\r

  \  $a = `\r

  \  <div id='message_left'>\r

  \  <div></div>\r

  \    <img  id='prof_img' src='${image}' class='img_person sz50'
  style='float: left;margin:2px;'>\r

  \    <b>${sender.username}</b><br>\r

  \    ${msg.message}<br><br>`;\r

  \  if (msg.files != \"\") {\r

  \    $a += `<img src='${msg.files}' style='margin:30px;cursor:pointer;'
  onclick='image_show(event)' /> <br>`;\r

  \  }\r

  \  $a += `<span style='font-size:11px;color:white;'>${msg.date}<span>\r

  \  <img id='trash' src='../base/assets/images/icons/trash.png'
  onclick='delete_message(event)' msgid='${msg.id}' />\r

  \  </div>`;\r

  \  return $a;\r

  }"
message_right: "function message_right(msg, sender) {\r

  \  image = sender.imagePath;\r

  \  $a = `\r

  \  <div id='message_right'>\r

  \  <div>`;\r

  \  if (msg.seen) {\r

  \    $a += \"<img src='../base/assets/images/tick.png' style=''/>\";\r

  \  } else if (msg.received) {\r

  \    $a += \"<img src='../base/assets/images/tick_grey.png' style=''/>\";\r

  \  }\r

  \  $a += `</div>\r

  \    <img id='prof_img' src='${image}' style='float:right;margin:2px;'
  class='img_person sz50'>\r

  \    <b>${sender.username}</b><br>\r

  \    ${msg.message}<br><br>`;\r

  \  if (msg.files != \"\") {\r

  \    $a += `<img src='${msg.files}' style='margin:30px;cursor:pointer;'
  onclick='image_show(event)' /> <br>`;\r

  \  }\r

  \  $a += `<span style='font-size:11px;color:#888;'>${msg.date}<span>\r

  \    <img id='trash' src='../base/assets/images/icons/trash.png'
  onclick='delete_message(event)' msgid='${msg.id}' />\r

  \  </div>`;\r

  \  return $a;\r

  }"
mFade: function mFade(d, ms = 800, callback = null) { return mAnimateTo(d,
  'opacity', 0, callback, ms); }
mFadeClear: function mFadeClear(d, ms = 800, callback = null) { return
  mAnimateTo(d, 'opacity', 0, () => { mClear(d); if (callback) callback(); },
  ms); }
mFadeClearShow: function mFadeClearShow(d, ms = 800, callback = null) { return
  mAnimate(d, 'opacity', [1, 0], () => { mClear(d); if (callback) callback(); },
  ms); }
mFadeRemove: function mFadeRemove(d, ms = 800, callback = null) { return
  mAnimateTo(d, 'opacity', 0, () => { mRemove(d); if (callback) callback(); },
  ms); }
mFall: "function mFall(d, ms = 800, dist = 50) { toElem(d).animate([{ opacity:
  0, transform: `translateY(-${dist}px)` }, { opacity: 1, transform:
  'translateY(0px)' },], { fill: 'both', duration: ms, easing: 'ease' }); }"
mFg: function mFg(d, color) { d.style.color = color; }
mFileInput: "function mFileInput(dParent, dPreviewParent) {\r

  \  let dInput = mDiv(dParent, { padding: 4, h: 100, bg: '#fff', align:
  'center', cursor: 'pointer', fg: 'gray' });\r

  \  let dMessage = mDiv(dInput, {}, null, 'click to browse');\r

  \  let dPreview = mDiv(dInput);\r

  \  var fakeInput = document.createElement(\"input\");\r

  \  fakeInput.type = \"file\";\r

  \  fakeInput.accept = \"image/*\";\r

  \  fakeInput.multiple = false;\r

  \  dInput.onclick = () => { fakeInput.click(); };\r

  \  let item = { fileObject: null, filename: null, imgData: null, img: null,
  loaded: false };\r

  \  iAdd(item, { div: dInput, dPreview: dPreview });\r

  \  var img = mCreate(\"img\"); mAppend(dPreview, img);\r

  \  mStyleX(img, { wmax: 100, hmax: 70, mabottom: 4 })\r

  \  fakeInput.onchange = function () {\r

  \    const reader = new FileReader();\r

  \    reader.onload = function () {\r

  \      img.src = this.result;\r

  \      const base64 = this.result.replace(/.*base64,/, '');\r

  \      Socket.emit('image2', base64);\r

  \    };\r

  \    reader.readAsDataURL(this.files[0]);\r

  \  };\r

  \  return item;\r

  }"
mFilePreview: "function mFilePreview(item, dParent, allowMultipleChildren =
  true) {\r

  \  let imgFile = item.fileObject;\r

  \  if (!allowMultipleChildren) clearElement(dParent);\r

  \  var img = mCreate(\"img\"); mAppend(dParent, img);\r

  \  mStyleX(img, { wmax: 100, hmax: 70, mabottom: 4 })\r

  \  var reader = new FileReader();\r

  \  reader.onload = function (e) {\r

  \    img.src = e.target.result;\r

  \    let bytes = item.bytes = new Uint8Array(e.target.result);\r

  \    Socket.emit('image1', bytes);\r

  \    item.filenameWithExt = imgFile.name;\r

  \    item.filename = stringBefore(imgFile.name, '.');\r

  \    item.ext = stringAfter(imgFile.name, '.');\r

  \    item.img = img;\r

  \    item.previewParent = dParent;\r

  \    item.loaded = true;\r

  \    console.log('item', item);\r

  \  }\r

  \  reader.readAsArrayBuffer(imgFile);\r

  }"
mFillText: "function mFillText(text, box, padding = 10, perleft = 10, pertop =
  20) {\r

  \  let r = mMeasure(box);\r

  \  let [fz, w, h] = fitFont(text, 14, r.w - padding, r.h - padding);\r

  \  let dText = mDiv(box, {\r

  \    w: w, h: h, fz: fz,\r

  \    position: 'absolute', transform: `translate(-${perleft}%,-${pertop}%)`,
  top: `${pertop}%`, left: `${perleft}%`\r

  \  }, null, text);\r

  \  return dText;\r

  }"
mFleeting: "function mFleeting(inner, d, ms = 3000, styles = {}, classes = null)
  {\r

  \  d = toElem(d);\r

  \  addKeys({ transition: 'all .5s ease', padding: 10, box: true, fg: 'red'
  }, styles)\r

  \  if (isdef(styles)) mStyle(d, styles);\r

  \  if (isdef(classes)) mClass(d, classes);\r

  \  d.innerHTML = inner;\r

  \  TO.fleeting = setTimeout(() => mClear(d), ms);\r

  }"
mFlex: "function mFlex(d, or = 'h') {\r

  \  d = toElem(d);\r

  \  d.style.display = 'flex';\r

  \  d.style.flexFlow = (or == 'v' ? 'column' : 'row') + ' ' + (or == 'w' ?
  'wrap' : 'nowrap');\r

  }"
mFlex1: function mFlex1(d) { d.style.display = 'flex'; d.style.flexWrap =
  'wrap'; d.style.flex = 1; }
mFlexCenterContent: "function mFlexCenterContent(d) { mStyle(d, {
  'justify-content': 'center', 'align-items': 'center' }); }"
mFlexChild: "function mFlexChild(d, grow = 1, shrink = 0, base = 'auto') {\r

  \  d.style.flex = '' + grow + ' ' + shrink + ' ' + base;\r

  }"
mFlexChildSplit: "function mFlexChildSplit(d, split) {\r

  \  if (split != 1) { split *= 10; if (split % 2 == 0) split /= 2; }\r

  \  d.style.flex = '' + split + ' 0 auto';\r

  }"
mFlexColumn: "function mFlexColumn(d, or = 'h') {\r

  \  d = toElem(d);\r

  \  d.style.display = 'flex';\r

  \  d.style.flexFlow = (or == 'v' ? 'column' : 'row') + ' ' + (or == 'w' ?
  'wrap' : 'nowrap');\r

  \  d.style.alignItems = 'stretch';\r

  \  d.style.alignContent = 'stretch';\r

  \  d.style.justiifyItems = 'stretch';\r

  \  d.style.justifyContent = 'stretch';\r

  }"
mFlexColumnWrap: "function mFlexColumnWrap(d) { mStyle(d, { display: 'flex',
  'flex-flow': 'column wrap' }); }"
mFlexEvenly: "function mFlexEvenly(d) {\r

  \  let styles = { display: 'flex' };\r

  \  styles['justify-content'] = 'space-evenly';\r

  \  mStyle(d, styles);\r

  }"
mFlexLinebreak: function mFlexLinebreak(d) { if (isString(d)) d = mBy(d); let lb
  = mDiv(d); mClass(lb, 'linebreak'); return lb; }
mFlexLR: "function mFlexLR(d) { mStyle(d, { display: 'flex', 'justify-content':
  'space-between', 'align-items': 'center' }); }"
mFlexSpacebetween: function mFlexSpacebetween(d) { mFlexLR(d); }
mFlexWrap: function mFlexWrap(d) { mFlex(d, 'w'); }
mFlexWrapGrow: function mFlexWrapGrow(d) { d.style.display = 'flex';
  d.style.flexWrap = 'wrap'; d.style.flex = 1; }
mFlip: "function mFlip(card, ms, callback) {\r

  \  let a = mAnimate(iDiv(card), 'transform', [`scale(1,1)`, `scale(0,1)`],\r

  \    () => {\r

  \      if (card.faceUp) face_down(card); else face_up(card);\r

  \      mAnimate(iDiv(card), 'transform', [`scale(0,1)`, `scale(1,1)`],
  callback, ms / 2, 'ease-in', 0, 'both');\r

  \    },\r

  \    ms / 2, 'ease-out', 0, 'both');\r

  }"
mFont: function mFont(d, fz) { d.style.setProperty('font-size',
  makeUnitString(fz, 'px')); }
mForm: "function mForm(dParent) {\r

  \  return mAppend(dParent, mCreate('form'));\r

  }"
mFromPoint: "function mFromPoint(x, y) {\r

  \  var element, elements = [];\r

  \  var old_visibility = [];\r

  \  while (true) {\r

  \    element = document.elementFromPoint(x, y);\r

  \    if (!element || element === document.documentElement) {\r

  \      break;\r

  \    }\r

  \    elements.push(element);\r

  \    old_visibility.push(element.style.visibility);\r

  \    element.style.visibility = 'hidden';\r

  \  }\r

  \  for (var k = 0; k < elements.length; k++) {\r

  \    elements[k].style.visibility = old_visibility[k];\r

  \  }\r

  \  elements.reverse();\r

  \  return elements;\r

  }"
mGap: function mGap(d, gap) { d.style.setProperty('margin', gap + 'px'); }
mget_map: "function mget_map(center = Geo.places.tuerkenschanzpark, zoom = 17)
  {\r

  \  M.center = center;\r

  \  M.zoom = zoom;\r

  \  let map = M.map = L.map('map').setView(center, zoom);\r

  \  return map;\r

  }"
mGetStyle: "function mGetStyle(elem, prop) {\r

  \  let val;\r

  \  elem = toElem(elem);\r

  \  if (prop == 'bg') { val = getStyleProp(elem, 'background-color'); if
  (isEmpty(val)) return getStyleProp(elem, 'background'); }\r

  \  else if (isdef(STYLE_PARAMS[prop])) { val = getStyleProp(elem,
  STYLE_PARAMS[prop]); }\r

  \  else {\r

  \    switch (prop) {\r

  \      case 'vmargin': val = stringBefore(elem.style.margin, ' '); break;\r

  \      case 'hmargin': val = stringAfter(elem.style.margin, ' '); break;\r

  \      case 'vpadding': val = stringBefore(elem.style.padding, ' ');
  break;\r

  \      case 'hpadding': val = stringAfter(elem.style.padding, ' '); break;\r

  \      case 'box': val = elem.style.boxSizing; break;\r

  \      case 'dir': val = elem.style.flexDirection; break;\r

  \    }\r

  \  }\r

  \  if (nundef(val)) val = getStyleProp(elem, prop);\r

  \  if (val.endsWith('px')) return firstNumber(val); else return val;\r

  }"
mGetStyleX: "function mGetStyleX(elem, prop) {\r

  \  let val;\r

  \  if (isdef(STYLE_PARAMS[prop])) { val = elem.style[STYLE_PARAMS[prop]];
  }\r

  \  else {\r

  \    switch (prop) {\r

  \      case 'vmargin': val = stringBefore(elem.style.margin, ' '); break;\r

  \      case 'hmargin': val = stringAfter(elem.style.margin, ' '); break;\r

  \      case 'vpadding': val = stringBefore(elem.style.padding, ' ');
  break;\r

  \      case 'hpadding': val = stringAfter(elem.style.padding, ' '); break;\r

  \      case 'box': val = elem.style.boxSizing; break;\r

  \      case 'dir': val = elem.style.flexDirection; break;\r

  \    }\r

  \  }\r

  \  if (nundef(val)) val = elem.style[prop];\r

  \  if (val.endsWith('px')) return firstNumber(val); else return val;\r

  }"
mgPos: "function mgPos(card, el, x = 0, y = 0, unit = '%', anchor = 'center')
  {\r

  \  mAppend(iG(card), el);\r

  \  let box = el.getBBox();\r

  \  console.log('rect', box);\r

  \  el.setAttribute('x', x);\r

  \  el.setAttribute('y', y);\r

  }"
mGrid: "function mGrid(rows, cols, dParent, styles = {}) {\r

  \  let d = mDiv(dParent, styles);\r

  \  d.style.gridTemplateColumns = 'repeat(' + cols + ',1fr)';\r

  \  d.style.gridTemplateRows = 'repeat(' + rows + ',1fr)';\r

  \  d.style.display = 'inline-grid';\r

  \  d.style.padding = valf(styles.padding, styles.gap) + 'px';\r

  \  return d;\r

  }"
mGridFrom: "function mGridFrom(d, m, cols, rows, cellstyles = {}) {\r

  \  let gta = '';\r

  \  let words = [];\r

  \  for (const line of m) {\r

  \    gta = gta + `'${line}' `;\r

  \    let warr = toWords(line);\r

  \    for (const w of warr) if (!words.includes(w)) words.push(w);\r

  \  }\r

  \  let dParent = mDom100(d, { display: 'grid', 'grid-template-areas': gta
  });\r

  \  dParent.style.gridTemplateColumns = cols;\r

  \  dParent.style.gridTemplateRows = rows;\r

  \  for (const w of words) {\r

  \    let st = copyKeys({ 'grid-area': w, bg: rColor(50) }, cellstyles);\r

  \    let cell = window[w] = mDom(dParent, st, { id: w });\r

  \  }\r

  \  return dParent;\r

  }"
mgShape: "function mgShape(key) {\r\n}"
mgSize: "function mgSize(el, h, w) {\r

  \  el.setAttribute('height', h);\r

  \  if (isdef(w)) el.setAttribute('width', w);\r

  }"
mgSuit: "function mgSuit(key) {\r

  \  let el = gCreate('use');\r

  \  el.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', '#' +
  key);\r

  \  return el;\r

  }"
mgSuit1: "function mgSuit1(card, key, h, x, y) {\r

  \  el = document.createElementNS('http://www.w3.org/2000/svg', 'use');\r

  \  el.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href',
  `#${key}`);\r

  \  el.setAttribute('height', h);\r

  \  el.setAttribute('width', h);\r

  \  el.setAttribute('x', x);\r

  \  el.setAttribute('y', y);\r

  \  mAppend(iG(card), el);\r

  \  return el;\r

  }"
mgSvg: function mgSvg(dParent, attrs) { return mgTag('svg', dParent, attrs); }
mgSym: "function mgSym(key) {\r

  \  let el = gCreate('text');\r

  \  let info = Syms[key];\r

  \  mStyle(el, { family: info.family });\r

  \  el.innerHTML = info.text;\r

  \  return el;\r

  }"
mgTag: "function mgTag(tag, dParent, attrs, styles = {}, innerHTML) {\r

  \  let elem = gCreate(tag);\r

  \  mStyle(elem, styles);\r

  \  mAttrs(elem, attrs);\r

  \  if (isdef(innerHTML)) elem.innerHTML = innerHTML;\r

  \  if (isdef(dParent)) mAppend(dParent, elem);\r

  \  return elem;\r

  }"
mgText: function mgText(text, dParent, attrs, styles) { return mgTag('text',
  dParent, attrs, styles, text); }
mHand: "function mHand(n, R, uidParent) {\r

  \  let dParent = mBy(n.idUiParent);\r

  \  let ui = mDiv(dParent);\r

  \  addClass(ui, 'handStyle');\r

  \  return ui;\r

  }"
mHasClass: "function mHasClass(el, className) {\r

  \  if (el.classList) return el.classList.contains(className);\r

  \  else return !!el.className.match(new RegExp('(\\\\s|^)' + className +
  '(\\\\s|$)'));\r

  }"
mHeading: "function mHeading(msg, dParent, level, id) {\r

  \  let p = mCreate('h' + level);\r

  \  if (!isEmpty(msg)) p.innerHTML = msg;\r

  \  if (isdef(id)) p.id = id;\r

  \  mAppend(dParent, p);\r

  \  return p;\r

  }"
mHex00: "function mHex00(dParent, styles, id) {\r

  \  let ui = gShape('hex', 100, 100, 'blue', 4);\r

  \  let gParent = findAncestorElemWithParentOfType(dParent, 'svg');\r

  \  gParent.appendChild(ui);\r

  \  return ui;\r

  }"
mHex01: "function mHex01(dParent, styles = {}, sz = 100) {\r

  \  let szNet = (isdef(styles.padding)) ? sz - 2 * styles.padding : sz;\r

  \  let h = sz; w = h * 0.866;\r

  \  let d = mDiv(dParent, { w: w, h: h });\r

  \  let g = asvg(d);\r

  \  let hh = szNet + sz; wh = hh * 0.866;\r

  \  let colors = ['yellow', 'orange', 'red', 'green', 'violet']\r

  \  let hex1 = agShape(g, 'hex', wh, hh, chooseRandom(colors));\r

  \  if (isdef(styles)) mStyleX(d, styles)\r

  \  return d;\r

  }"
mHex02: "function mHex02(dParent, w) {\r

  \  let gap = 4;\r

  \  let whex = w - gap;\r

  \  let wcont = w;\r

  \  let hbrut = w / .866;\r

  \  let hhex = hbrut - gap;\r

  \  let hcont = hbrut * .75;\r

  \  let d = mDiv(dParent, { w: wcont, h: hcont, display: 'inline-block' });\r

  \  let g = asvg(d);\r

  \  let hex1 = agShape(g, 'hex', whex, hhex, randomColor());\r

  \  return d;\r

  \  function asvg(dParent, sz, originInCenter = true) {\r

  \    if (!dParent.style.position) dParent.style.position = 'relative';\r

  \    let svg1 = gSvg();\r

  \    svg1.setAttribute('width', '100%');\r

  \    svg1.setAttribute('height', '150%');\r

  \    let style =
  'margin:0;padding:0;position:absolute;top:0px;left:0px;background:transparent\
  ';\r

  \    svg1.setAttribute('style', style);\r

  \    dParent.appendChild(svg1);\r

  \    let g1 = document.createElementNS('http://www.w3.org/2000/svg', 'g');\r

  \    svg1.appendChild(g1);\r

  \    if (originInCenter) { g1.style.transform = \"translate(50%, 50%)\"; }\r

  \    return g1;\r

  \  }\r

  }"
mHex03: "function mHex03(dParent, w, bg) {\r

  \  let gap = 4;\r

  \  let whex = w - gap;\r

  \  let wcont = w;\r

  \  let hbrut = w / .866;\r

  \  let hhex = hbrut - gap;\r

  \  let hcont = hbrut * .75;\r

  \  let d = mDiv(dParent, { w: wcont, h: hcont, display: 'inline-block' });\r

  \  let g = asvg(d);\r

  \  let hex1 = agShape(g, 'hex', whex, hhex, bg);\r

  \  return d;\r

  \  function asvg(dParent, sz, originInCenter = true) {\r

  \    if (!dParent.style.position) dParent.style.position = 'relative';\r

  \    let svg1 = gSvg();\r

  \    svg1.setAttribute('width', '100%');\r

  \    svg1.setAttribute('height', '150%');\r

  \    let style =
  'margin:0;padding:0;position:absolute;top:0px;left:0px;background:transparent\
  ';\r

  \    svg1.setAttribute('style', style);\r

  \    dParent.appendChild(svg1);\r

  \    let g1 = document.createElementNS('http://www.w3.org/2000/svg', 'g');\r

  \    svg1.appendChild(g1);\r

  \    if (originInCenter) { g1.style.transform = \"translate(50%, 50%)\"; }\r

  \    return g1;\r

  \  }\r

  }"
mHex04: "function mHex04(dParent, w, bg) {\r

  \  let gap = 4;\r

  \  let whex = w - gap;\r

  \  let wcont = w;\r

  \  let hbrut = w / .866;\r

  \  let hhex = hbrut - gap;\r

  \  let hcont = hbrut * .75;\r

  \  let d = mDiv(dParent, { w: wcont, h: hcont, display: 'inline-block' });\r

  \  let g = asvg(d);\r

  \  let hex1 = agShape(g, 'hex', whex, hhex, bg);\r

  \  return d;\r

  \  function asvg(dParent, sz, originInCenter = true) {\r

  \    if (!dParent.style.position) dParent.style.position = 'relative';\r

  \    let svg1 = gSvg();\r

  \    svg1.setAttribute('width', '100%');\r

  \    svg1.setAttribute('height', '150%');\r

  \    let style =
  'margin:0;padding:0;position:absolute;top:0px;left:0px;background:transparent\
  ';\r

  \    svg1.setAttribute('style', style);\r

  \    dParent.appendChild(svg1);\r

  \    let g1 = document.createElementNS('http://www.w3.org/2000/svg', 'g');\r

  \    svg1.appendChild(g1);\r

  \    if (originInCenter) { g1.style.transform = \"translate(50%, 50%)\"; }\r

  \    return g1;\r

  \  }\r

  }"
mHex05: "function mHex05(dParent, w, bg) {\r

  \  let gap = 4;\r

  \  let whex = w - gap;\r

  \  let wcont = w;\r

  \  let hbrut = w / .866;\r

  \  let hhex = hbrut - gap;\r

  \  let hcont = hbrut * .75;\r

  \  let d = mDiv(dParent, { w: wcont, h: hcont, display: 'inline-block' });\r

  \  let d1 = mDiv100(d, { position: 'absolute', top: -15, 'z-index': -1 });\r

  \  let g = asvg(d1);\r

  \  let hex1 = agShape(g, 'hex', whex, hhex, bg);\r

  \  let dField = mDiv100(d, { padding: '0%', 'z-index': 100 });\r

  \  let dInnerField = mDiv(dField, { w: '99%', h: '113%', bg: 'blue',
  rounding: '50%' });\r

  \  return d;\r

  \  function asvg(dParent, sz, originInCenter = true) {\r

  \    if (!dParent.style.position) dParent.style.position = 'relative';\r

  \    let svg1 = gSvg();\r

  \    svg1.setAttribute('width', '100%');\r

  \    svg1.setAttribute('height', '150%');\r

  \    let style =
  'margin:0;padding:0;position:absolute;top:0px;left:0px;background:transparent\
  ';\r

  \    svg1.setAttribute('style', style);\r

  \    dParent.appendChild(svg1);\r

  \    let g1 = document.createElementNS('http://www.w3.org/2000/svg', 'g');\r

  \    svg1.appendChild(g1);\r

  \    if (originInCenter) { g1.style.transform = \"translate(50%, 50%)\"; }\r

  \    return g1;\r

  \  }\r

  }"
mHexWeissNicht: "function mHexWeissNicht(dParent, styles = {}, sz = 100) {\r

  \  let szNet = (isdef(styles.padding)) ? sz - 2 * styles.padding : sz;\r

  \  let h = sz; w = h * 0.866;\r

  \  let d = mDiv(dParent, { w: 2 * w, h: h * 1.5 });\r

  \  let g = asvg(d);\r

  \  let hh = szNet + sz; wh = hh * 0.866;\r

  \  let colors = ['yellow', 'orange', 'red', 'green', 'violet']\r

  \  let hex1 = agShape(g, 'hex', wh, hh, chooseRandom(colors));\r

  \  if (isdef(styles)) mStyleX(d, styles)\r

  \  return d;\r

  }"
mHide: "function mHide(d, ms = 0) { if (ms > 0) mFade(d, ms); else mStyle(d, {
  opacity: 0 }); }"
mHigh: function mHigh(ui) { mClass(ui, 'high'); }
miAddLabel: "function miAddLabel(item, styles) {\r

  \  let d = iDiv(item);\r

  \  if (getTypeOf(d.firstChild) == 'Text') {\r

  \    let handler = d.onmousedown;\r

  \    d.onmousedown = null;\r

  \    let dPic = d;\r

  \    let dParent = d.parentNode;\r

  \    let outerStyles = jsCopy(styles);\r

  \    addKeys({\r

  \      display: 'inline-flex', 'flex-direction': 'column',\r

  \      'justify-content': 'center', 'align-items': 'center',
  'vertical-align': 'top',\r

  \    }, outerStyles);\r

  \    d = mDiv(dParent, outerStyles);\r

  \    mAppend(d, dPic);\r

  \    d.onmousedown = handler;\r

  \    let dLabel = mText(item.label, d, { fz: valf(styles.fz, 20) });\r

  \    iAdd(item, { div: d, dPic: dPic, dLabel: dLabel, options: outerStyles
  });\r

  \  } else if (nundef(iLabel(item))) {\r

  \    let dLabel = mText(item.label, d, { fz: valf(styles.fz, 20) });\r

  \    iAdd(item, { dLabel: dLabel });\r

  \  }\r

  \  return d;\r

  }"
MicrophoneHide: "function MicrophoneHide() {\r

  \  if (nundef(MicrophoneUi)) return;\r

  \  if (RecogOutput) console.log('* mic end')\r

  \  MicrophoneUi.style.opacity = .31;\r

  }"
MicrophoneShow: "function MicrophoneShow() {\r

  \  if (nundef(MicrophoneUi)) return;\r

  \  if (RecogOutput) console.log('* mic start')\r

  \  MicrophoneUi.style.opacity = 1;\r

  }"
MicrophoneStart: "function MicrophoneStart() {\r

  \  if (RecogOutput) console.log('* mic start')\r

  \  MicrophoneUi.style.opacity = 1;\r

  }"
MicrophoneStop: "function MicrophoneStop() {\r

  \  if (RecogOutput) console.log('* mic end')\r

  \  MicrophoneUi.style.opacity = .31;\r

  }"
mIfNotRelative: function mIfNotRelative(d) { if (isEmpty(d.style.position))
  d.style.position = 'relative'; }
mImage: function mImage() { return mImg(...arguments); }
mImg: "function mImg(path, dParent, styles, classes, callback) {\r

  \  let d = mCreate('img');\r

  \  if (isdef(callback)) d.onload = callback;\r

  \  d.src = path;\r

  \  if (isdef(dParent)) mAppend(dParent, d);\r

  \  if (isdef(styles)) mStyle(d, styles);\r

  \  if (isdef(classes)) mClass(d, classes);\r

  \  if (isdef(styles.w)) d.setAttribute('width', styles.w + 'px');\r

  \  if (isdef(styles.h)) d.setAttribute('height', styles.h + 'px');\r

  \  return d;\r

  }"
mInfo: "function mInfo(n, R, uidParent) {\r

  \  let ui;\r

  \  let dParent = mBy(n.idUiParent);\r

  \  if (getTypeOf(dParent) == 'g') {\r

  \    return gInfo(n, R, uidParent);\r

  \  } else if (isdef(n.content)) {\r

  \    ui = mNode(n.content, dParent);\r

  \    mClass(ui, 'node');\r

  \  } else {\r

  \    ui = mDiv(dParent);\r

  \    ui.style.display = 'hidden';\r

  \  }\r

  \  return ui;\r

  }"
minifyBack: "function minifyBack(id) {\r

  \  let card = UIS[id];\r

  \  let hand = UIS[card.hand];\r

  \  if (hand.scale != 1) {\r

  \    card.setScale(hand.scale);\r

  \  }\r

  \  _sendCardToBack(id)\r

  }"
minimax: "function minimax(game, depth, alpha, beta, isMaximizingPlayer, sum,
  color) {\r

  \  if (G.id != 'gChess' || !aiActivated) return;\r

  \  positionCount++;\r

  \  var children = game.ugly_moves({ verbose: true });\r

  \  children.sort(function (a, b) { return 0.5 - Math.random() });\r

  \  var currMove;\r

  \  if (depth === 0 || children.length === 0) {\r

  \    return [null, sum]\r

  \  }\r

  \  var maxValue = Number.NEGATIVE_INFINITY;\r

  \  var minValue = Number.POSITIVE_INFINITY;\r

  \  var bestMove;\r

  \  for (var i = 0; i < children.length; i++) {\r

  \    currMove = children[i];\r

  \    var currPrettyMove = game.ugly_move(currMove);\r

  \    var newSum = evaluateBoard(currPrettyMove, sum, color);\r

  \    var [childBestMove, childValue] = minimax(game, depth - 1, alpha, beta,
  !isMaximizingPlayer, newSum, color);\r

  \    game.undo();\r

  \    if (isMaximizingPlayer) {\r

  \      if (childValue > maxValue) {\r

  \        maxValue = childValue;\r

  \        bestMove = currPrettyMove;\r

  \      }\r

  \      if (childValue > alpha) {\r

  \        alpha = childValue;\r

  \      }\r

  \    }\r

  \    else {\r

  \      if (childValue < minValue) {\r

  \        minValue = childValue;\r

  \        bestMove = currPrettyMove;\r

  \      }\r

  \      if (childValue < beta) {\r

  \        beta = childValue;\r

  \      }\r

  \    }\r

  \    if (alpha >= beta) {\r

  \      break;\r

  \    }\r

  \  }\r

  \  if (isMaximizingPlayer) {\r

  \    return [bestMove, maxValue]\r

  \  }\r

  \  else {\r

  \    return [bestMove, minValue];\r

  \  }\r

  }"
minimaxCopy: "function minimaxCopy(node, depth, alpha, beta, maxDepth, maxim)
  {\r

  \  CCC += 1;\r

  \  if (depth >= maxDepth) return F_HEURISTIC(node, MAXIMIZER, MINIMIZER);\r

  \  let ec = F_END(node, depth); if (ec.reached) return ec.val;\r

  \  depth += 1;\r

  \  var move, result;\r

  \  var availableMoves = F_MOVES(node);\r

  \  let player = maxim ? MAXIMIZER : MINIMIZER;\r

  \  let nodeSafe = jsCopy(node);\r

  \  for (var i = 0; i < availableMoves.length; i++) {\r

  \    move = availableMoves[i];\r

  \    let node1 = jsCopy(node);\r

  \    console.assert(sameList(nodeSafe, node), 'HA!');\r

  \    F_APPLYMOVE(node1, move, player);\r

  \    result = minimaxCopy(node1, depth, alpha, beta, maxDepth, !maxim);\r

  \    if (maxim) {\r

  \      if (result > alpha) {\r

  \        alpha = result;\r

  \        if (depth == 1) SelectedMove = move;\r

  \      } else if (alpha >= beta) { return alpha; }\r

  \    } else {\r

  \      if (result < beta) {\r

  \        beta = result;\r

  \        if (depth == 1) SelectedMove = move;\r

  \      } else if (beta <= alpha) { return beta; }\r

  \    }\r

  \  }\r

  \  return maxim ? alpha : beta;\r

  }"
minimizeObjects: function minimizeObjects() { let ids = getDefaultObjectIds();
  ids.map(x => UIS[x].minimize()); }
mInner: function mInner(html, dParent, styles) { dParent.innerHTML = html; if
  (isdef(styles)) mStyle(dParent, styles); }
mInput: "function mInput(dParent, styles, id, placeholder, classtr = 'input',
  tabindex = null, value = '') {\r

  \  let html = `<input type=\"text\" id=${id} class=\"${classtr}\"
  placeholder=\"${valf(placeholder, '')}\" tabindex=\"${tabindex}\"
  value=\"${value}\">`;\r

  \  let d = mAppend(dParent, mCreateFrom(html));\r

  \  if (isdef(styles)) mStyle(d, styles);\r

  \  return d;\r

  }"
mInputGroup: "function mInputGroup(dParent, styles) {\r

  \  let baseStyles = { display: 'inline-block', align: 'right', bg:
  '#00000080', rounding: 10, padding: 20, margin: 12 };\r

  \  if (isdef(styles)) styles = deepmergeOverride(baseStyles, styles); else
  styles = baseStyles;\r

  \  return mDiv(dParent, styles);\r

  }"
mInputLineWithButtons: "function mInputLineWithButtons(dParent, opts, val = '')
  {\r

  \  let html = `\r

  \    <form id=\"fSearch\" action=\"javascript:void(0);\" class='form'
  autocomplete='off'>\r

  \      <label>Keywords:</label>\r

  \      <input id=\"iKeywords\" type=\"text\" name=\"keywords\"
  style=\"flex-grow:1\" value=\"${val}\" />\r

  \    </form>\r

  \    `;\r

  \  let elem = mCreateFrom(html);\r

  \  mAppend(dParent, elem);\r

  \  let handler;\r

  \  for (const cap in opts) {\r

  \    handler = opts[cap];\r

  \    mButton(cap, opts[cap], elem, {}, 'hop1');\r

  \  }\r

  \  elem.onsubmit = (ev) => { ev.preventDefault(); };\r

  \  return elem;\r

  }"
mInputX: "function mInputX(dParent, styles, { textPadding, label, value,
  submitOnEnter, autoComplete, autoFocus, autoSelect, handler, createContainer }
  = {}) {\r

  \  let d;\r

  \  if (createContainer) {\r

  \    d = mDiv(dParent, { align: 'center' });\r

  \    mAppend(dParent, d);\r

  \  } else if (isdef(label)) {\r

  \    d = createElementFromHTML(`<label>${isdef(label) ? label :
  ''}</label>`);\r

  \    mAppend(dParent, d);\r

  \  } else d = dParent;\r

  \  let inp = createElementFromHTML(`<input type=\"text\" class=\"input\"
  value=\"${isdef(value) ? value : ''}\" />`);\r

  \  mAppend(d, inp);\r

  \  if (isdef(autoComplete)) inp.autoComplete = autoComplete ? 'on' :
  'off';\r

  \  if (isdef(submitOnEnter))\r

  \    inp.onkeydown = (ev) => {\r

  \      if (ev.key === 'Enter') {\r

  \        ev.preventDefault();\r

  \        mBy('dummy').focus();\r

  \        if (isdef(handler)) handler(inp.value);\r

  \      }\r

  \    };\r

  \  if (isdef(styles)) { mStyleX(d, styles); }\r

  \  let inpStyles = isdef(styles) ? jsCopy(styles) : {};\r

  \  delete inpStyles.padding;\r

  \  if (isdef(textPadding)) inpStyles.padding = textPadding;\r

  \  if (isdef(inpStyles.w)) inpStyles.w = '100%';\r

  \  mStyleX(inp, inpStyles);\r

  \  if (isdef(autoFocus)) inp.focus();\r

  \  if (autoSelect == true) inp.select();\r

  \  return inp;\r

  }"
mInsert: function mInsert(dParent, el, index = 0) { dParent.insertBefore(el,
  dParent.childNodes[index]); return el; }
mInsertAfter: "function mInsertAfter(dParent, el, index = 0) {\r

  \  if (dParent.childNodes.length == index) mAppend(dParent, el);\r

  \  else mInsert(dParent, el, index + 1);\r

  }"
mInsertAt: function mInsertAt(dParent, el, index = 0) { mInsert(dParent, el, index); }
mInsertFirst: function mInsertFirst(dParent, el) { mInsert(dParent, el, 0); }
mInstruction: "function mInstruction(msg, dParent, hasExclamation = true) {\r

  \  let p = mCreate('h2');\r

  \  p.innerHTML = msg + (hasExclamation ? '!' : '');\r

  \  mAppend(dParent, p);\r

  \  return p;\r

  }"
mInvisible: "function mInvisible(n, R, uidParent) {\r

  \  let dParent = mBy(n.idUiParent);\r

  \  let d = mDiv(dParent);\r

  \  if (n.content) {\r

  \    mText(n.content, d);\r

  \  }\r

  \  return d;\r

  }"
miPic: "function miPic(item, dParent, styles, classes) {\r

  \  let info = isString(item) ? Syms[item] : isdef(item.info) ? item.info :
  item;\r

  \  let d = mDiv(dParent);\r

  \  d.innerHTML = info.text;\r

  \  if (nundef(styles)) styles = {};\r

  \  let family = info.family;\r

  \  addKeys({ family: family, fz: 50, display: 'inline-block' }, styles);\r

  \  mStyle(d, styles);\r

  \  if (isdef(classes)) mClass(d, classes);\r

  \  mCenterCenterFlex(d);\r

  \  return d;\r

  }"
MIRROR120: "function MIRROR120(sq) {\r

  \  var file = MirrorFiles[FilesBrd[sq]];\r

  \  var rank = MirrorRanks[RanksBrd[sq]];\r

  \  return FR2SQ(file, rank);\r

  }"
MIRROR64: function MIRROR64(sq) { return Mirror64[sq]; }
mist: "function mist() {\r

  \  var map = L.map('map', {\r

  \    minZoom: 0,\r

  \    maxZoom: 20\r

  \  });\r

  \  var cartodbAttribution = '&copy; <a
  href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>
  contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>';\r

  \  //maps: http://bl.ocks.org/Xatpy/raw/854297419bd7eb3421d0/\r

  \  // var layer =
  L.tileLayer('https://cartocdn_{s}.global.ssl.fastly.net/base-antique/{z}/{x}/\
  {y}.png', { attribution: cartodbAttribution }).addTo(map);\r

  \  // var layer =
  L.tileLayer('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {
  attribution: cartodbAttribution }).addTo(map);\r

  \  var layer =
  L.tileLayer('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {
  attribution: cartodbAttribution }).addTo(map);\r

  \  //var layer =
  L.tileLayer('http://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}.png',
  { attribution: cartodbAttribution }).addTo(map);\r

  \  //var layer =
  L.tileLayer('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', {
  attribution: cartodbAttribution }).addTo(map);\r

  \  //var layer =
  L.tileLayer('https://cartocdn_{s}.global.ssl.fastly.net/base-eco/{z}/{x}/{y}.\
  png', { attribution: cartodbAttribution }).addTo(map);\r

  \  //var layer =
  L.tileLayer('https://cartocdn_{s}.global.ssl.fastly.net/base-midnight/{z}/{x}\
  /{y}.png', { attribution: cartodbAttribution }).addTo(map);\r

  \  map.setView([0, 0], 0);\r

  \  return;\r

  \  setView(center, zoom);\r

  \  flyTo(center, zoom);\r

  \  zoomIn() / zoomIn(delta);\r

  \  zoomOut() / zoomOut(delta);\r

  \  setZoomAround(fixedPoint, zoom);\r

  \  fitBounds(bounds);\r

  }"
mItem: "function mItem(id, diDOM, di = {}, addSizing = false) {\r

  \  let item = di;\r

  \  id = isdef(id) ? id : isdef(diDOM) && isdef(diDOM.div) &&
  !isEmpty(diDOM.div.id) ? diDOM.div.id : getUID();\r

  \  item.id = iRegister(item, id);\r

  \  if (isdef(diDOM) && isdef(diDOM.div)) { diDOM.div.id = id; iAdd(item,
  diDOM); }\r

  \  if (addSizing) {\r

  \    if (nundef(item.sizing)) item.sizing = 'sizeToContent';\r

  \    if (nundef(item.positioning)) { item.positioning = 'absolute'; }\r

  \    if (nundef(item.posType)) { item.posType = 'center'; }\r

  \    if (isdef(diDOM) && item.sizing == 'sizeToContent') iMeasure(item,
  item.sizingOptions);\r

  \  }\r

  \  return item;\r

  }"
mItemSplay: "function mItemSplay(item, list, splay, ov = .5) {\r

  \  if (!isNumber(splay)) splay = get_splay_number(splay);\r

  \  let d = iDiv(item);\r

  \  let idx = list.indexOf(item.key);\r

  \  if (splay == 4) {\r

  \    let offset = (list.length - idx) * ov;\r

  \    mStyle(d, { position: 'absolute', left: offset, top: offset });\r

  \    d.style.zIndex = list.length - idx;\r

  \  } else {\r

  \    d.style.zIndex = splay != 2 ? list.length - idx : 0;\r

  \  }\r

  }"
mixinChannel: "function mixinChannel(n, rParent, R) {\r

  \  let chanav = buildChanav(n, rParent);\r

  \  chanavList = isList(chanav) ? chanav : isString(chanav) ? [chanav] :
  [];\r

  \  let chanimpl = n.channels;\r

  \  chanimpl = isDict(chanimpl) ? Object.keys(chanimpl) : isList(chanimpl) ?
  chanimpl : isString(chanimpl) ? [chanimpl] : [];\r

  \  let activeChannelKey = null; let activeChannel = null;\r

  \  for (const ch of chanimpl) {\r

  \    let k = Object.keys(ch)[0];\r

  \    let val = ch[k];\r

  \    if (chanavList.includes(k)) { activeChannelKey = k; activeChannel =
  val; }\r

  \  }\r

  \  if (activeChannel) {\r

  \    n = deepmerge(n, activeChannel);\r

  \  }\r

  \  return [n, chanav];\r

  }"
mLabel: function mLabel(label) { return mText(label); }
mle: "function mle(o, p, d) {\r

  \  p = { x: p.x - d, y: p.y };\r

  \  if (o) o.setPos(p.x, p.y);\r

  \  return p;\r

  }"
mLeft: "function mLeft(dParent, d, margin = 0) {\r

  \  mStyle(dParent, { display: 'flex', 'justify-content': 'space-between',
  'align-items': 'center' });\r

  \  mInsertFirst(dParent, d);\r

  \  mStyle(d, { margin: margin, 'align-self': 'flex-start' });\r

  \  return d;\r

  }"
mLine: function mLine(dParent, styles) { return mDiv(dParent, styles, null, '<hr>'); }
mLine3: "function mLine3(dParent, index, ids, styles) {\r

  \  let html = `<div class=\"lineOuter\">\r

  \    <div>\r

  \      <div id=\"${ids[0]}\" class=\"lineLeft\"> </div>\r

  \      <div id=\"${ids[1]}\" class=\"lineMiddle\"> </div>\r

  \      <div id=\"${ids[2]}\" class=\"lineRight\"> </div>\r

  \    </div>\r

  \  </div>\r

  \  `;\r

  \  let x = createElementFromHTML(html);\r

  \  mInsert(dParent, x, index);\r

  \  return [mBy(ids[0]), mBy(ids[1]), mBy(ids[2])];\r

  }"
mLinebreak: "function mLinebreak(dParent, gap) {\r

  \  dParent = toElem(dParent);\r

  \  let d;\r

  \  let display = getComputedStyle(dParent).display;\r

  \  if (display == 'flex') {\r

  \    d = mDiv(dParent, { fz: 2, 'flex-basis': '100%', h: 0, w: '100%' },
  null, ' &nbsp; ');\r

  \  } else {\r

  \    d = mDiv(dParent, {}, null, '<br>');\r

  \  }\r

  \  if (isdef(gap)) { d.style.minHeight = gap + 'px'; d.innerHTML = ' &nbsp;
  '; d.style.opacity = .2; }\r

  \  return d;\r

  }"
mLinebreakFlex: "function mLinebreakFlex(dParent, gap) {\r

  \  dParent = toElem(dParent);\r

  \  let d = mDiv(dParent, { fz: 2, 'flex-basis': '100%', h: 0, w: '100%' },
  null, ' &nbsp; ');\r

  \  if (isdef(gap)) { d.style.minHeight = gap + 'px'; d.innerHTML = ' &nbsp;
  '; d.style.opacity = .2; }\r

  \  return d;\r

  }"
mLinebreakNew: function mLinebreakNew(d, gap) { mGap(d, gap); }
mLink: "function mLink(href, dParent, styles, id, inner, classes, sizing) {\r

  \  let d = mCreate('a');\r

  \  if (dParent) mAppend(dParent, d);\r

  \  d.href = valf(href, '#');\r

  \  if (isdef(styles)) mStyle(d, styles);\r

  \  if (isdef(classes)) mClass(d, classes);\r

  \  if (isdef(id)) d.id = id;\r

  \  if (isdef(inner)) d.innerHTML = inner;\r

  \  if (isdef(sizing)) { setRect(d, sizing); }\r

  \  return d;\r

  }"
mList: "function mList(n, R, uidParent) {\r

  \  let dParent = mBy(n.idUiParent);\r

  \  let ui = mDiv(dParent);\r

  \  return ui;\r

  }"
mMagnify: "function mMagnify(img, item) {\r

  \  let path = item.path;\r

  \  if (isdef(MAGNIFIER_IMAGE) && MAGNIFIER_IMAGE.src == path) {\r

  \    console.log('schon offen!!!')\r

  \    return;\r

  \  } else if (isdef(MAGNIFIER_IMAGE)) mCancelMagnify();\r

  \  let imgSize = 514, fontSize = 24;\r

  \  let [w, h, fz] = [imgSize, imgSize + fontSize + 10, fontSize];\r

  \  let dPresent = MAGNIFIER_IMAGE = mDiv(document.body, { bg: HeaderColor,
  position: 'absolute', left: 0, top: 0, w: w, h: h });\r

  \  let d = dPresent;\r

  \  d.style.zIndex = 100000;\r

  \  let dText = mText(item.text, d, { color: 'white', fz: fz });\r

  \  let dImage = mDiv(d, { rounding: '50%', w: w, h: w });\r

  \  mCenterCenterFlex(dImage);\r

  \  let img1 = mImg(path, dImage, {});\r

  \  mCenterCenterFlex(dPresent);\r

  }"
mMagnifyOnHoverControl: "function mMagnifyOnHoverControl(elem) {\r

  \  elem.onmouseenter = ev => { if (ev.ctrlKey) mClass(elem,
  'magnify_on_hover'); }\r

  \  elem.onmouseleave = ev => mClassRemove(elem, 'magnify_on_hover');\r

  }"
mMagnifyOnHoverControlPopup: "function mMagnifyOnHoverControlPopup(elem) {\r

  \  elem.onmouseenter = ev => {\r

  \    if (ev.ctrlKey) {\r

  \      let r = getRect(elem, document.body);\r

  \      let popup = mDiv(document.body, { rounding: 4, position: 'absolute',
  top: r.y, left: r.x }, 'popup');\r

  \      let clone = elem.cloneNode(true);\r

  \      popup.appendChild(clone);\r

  \      mClass(popup, 'doublesize')\r

  \      popup.onmouseleave = () => popup.remove();\r

  \    }\r

  \  }\r

  }"
mMagnifyOnHoverControlRemove: "function mMagnifyOnHoverControlRemove(elem) {\r

  \  elem.onmouseenter = elem.onmouseleave = null;\r

  \  mClassRemove(elem, 'magnify_on_hover');\r

  }"
mManual00: "function mManual00(n, R, area) {\r

  \  let ui = mDefault(n, R, area);\r

  \  if (isdef(n.idUiParent)) {\r

  \    let dParent = mBy(n.idUiParent);\r

  \    if (dParent && nundef(dParent.style.position)) dParent.style.position =
  'relative';\r

  \  }\r

  \  return ui;\r

  }"
mMarginAuto: function mMarginAuto(d) { d.style.setProperty('margin', 'auto'); }
mMeasure: "function mMeasure(d) { let r = getRect(d); mStyle(d, { w: r.w, h: r.h
  }); return r; }"
mMenuButton: "function mMenuButton(dParent, caption, styles) {\r

  \  caption = valf(caption, UnicodeSymbols.menu);\r

  \  styles = valf(styles, { fz: 30, margin: 4 });\r

  \  let b = mButton(caption, null, dParent, styles, 'mybutton',
  getUID('b'));\r

  \  return b;\r

  }"
mMenuLine: "function mMenuLine(dParent, styles) {\r

  \  let menuStyles = isdef(styles) ? styles : { bg: wblack, alpha: .65 };\r

  \  let dMenu = mDiv(dParent, menuStyles);\r

  \  return dMenu;\r

  }"
mMicrophone: "function mMicrophone(dParent, color) {\r

  \  let d = mDiv(dParent);\r

  \  d.innerHTML = '🎤';\r

  \  let c = bestContrastingColor(color, ['yellow', 'orange', 'red']);\r

  \  let bg = c;\r

  \  let style = { bg: bg, rounding: '50%', fz: 50, padding: 5, transition:
  'opacity .35s ease-in-out' };\r

  \  mStyle(d, style);\r

  \  mLinebreak(dParent);\r

  \  return d;\r

  }"
mMinBounds: "function mMinBounds(d) {\r

  \  let b = getBounds(d);\r

  \  mStyle(d, { 'min-width': b.width, 'min-height': b.height }, 'px');\r

  }"
mMinSize: "function mMinSize(d, w, h, unit = 'px') { mStyle(d, { 'min-width': w,
  'min-height': h }, unit); }"
mMoveBy: function mMoveBy(elem, dx, dy) { let rect = getRect(elem); mPos(elem,
  rect.x + dx, rect.y + dy); }
mMultiline: "function mMultiline(s, tabvalue, dParent, styles, classes) {\r

  \  let spc = '&nbsp;';\r

  \  let lines = s.split('\\n');\r

  \  let html = '';\r

  \  for (let i = 0; i < lines.length; i += 1) {\r

  \    let line = lines[i];\r

  \    let n = countIndent(line, tabvalue);\r

  \    let x = spc.repeat(n) + line;\r

  \    html += x + '<br>';\r

  \  }\r

  \  let d1 = mText(html, dParent);\r

  \  if (isdef(styles)) mStyle(d1, styles);\r

  \  if (isdef(classes)) mClass(d1, ...classes);\r

  \  return d1;\r

  }"
mNode: "function mNode(o, dParent, title) {\r

  \  recConvertLists(o);\r

  \  console.log('mNode o', o);\r

  \  let d = mCreate('div');\r

  \  mYaml(d, o);\r

  \  let pre = d.getElementsByTagName('pre')[0];\r

  \  pre.style.fontFamily = 'inherit';\r

  \  if (isdef(title)) mInsert(d, mText(title));\r

  \  if (isdef(dParent)) mAppend(dParent, d);\r

  \  if (isDict(o)) d.style.textAlign = 'left';\r

  \  return d;\r

  }"
mNodeChangeContent: "function mNodeChangeContent(ui, content) {\r

  \  let domel = ui.getElementsByTagName('pre')[0];\r

  \  domel.innerHTML = jsonToYaml(content);\r

  }"
mNodeFilter: "function mNodeFilter(o, { sort, dParent, title, lstFlatten,
  lstOmit, lstShow, className = 'node', omitEmpty = false } = {}) {\r

  \  let oCopy = isList(lstShow) ? filterByKey(o, lstShow) : jsCopySafe(o);\r

  \  if (isList(lstFlatten)) recConvertToSimpleList(oCopy, lstFlatten);\r

  \  if (nundef(lstOmit)) lstOmit = [];\r

  \  if (omitEmpty || !isEmpty(lstOmit)) oCopy = recDeleteKeys(oCopy,
  omitEmpty, lstOmit);\r

  \  let d = mCreate('div');\r

  \  if (isdef(className)) mClass(d, className);\r

  \  switch (sort) {\r

  \    case 'keys': oCopy = sortKeys(oCopy); break;\r

  \    case 'all': oCopy = JSON.sort(oCopy); break;\r

  \  }\r

  \  mYaml(d, oCopy);\r

  \  let pre = d.getElementsByTagName('pre')[0];\r

  \  pre.style.fontFamily = 'inherit';\r

  \  if (isdef(title)) mInsert(d, mText(title));\r

  \  if (isdef(dParent)) mAppend(dParent, d);\r

  \  return d;\r

  }"
mNull: function mNull(d, attr) { d.removeAttribute(attr); }
modal_off: function modal_off() { let d = mBy('dModal'); d.innerHTML = '';
  d.style.display = 'none'; }
modal_on: function modal_on() { let d = mBy('dModal'); return d; }
modify_def_players: "function modify_def_players(list) {\r

  \  console.log('list', list);\r

  \  return;\r

  \  let uname = Session.cur_user;\r

  \  Session.def_players = list;\r

  \  newlist = get_def_players_for_user(uname);\r

  \  populate_players(newlist);\r

  }"
modify_item_for_adaptive: "function modify_item_for_adaptive(item, items, n) {\r

  \  item.numSyms = n;\r

  \  [item.rows, item.cols, item.colarr] = calc_syms(item.numSyms);\r

  \  let other_items = items.filter(x => x != item);\r

  \  let shared_syms = find_shared_keys(item.keys, other_items.map(x =>
  x.keys));\r

  \  let other_symbols = item.keys.filter(x => !shared_syms.includes(x));\r

  \  item.keys = shared_syms;\r

  \  let num_missing = item.numSyms - item.keys.length;\r

  \  item.keys = item.keys.concat(rChoose(other_symbols, num_missing));\r

  \  shuffle(item.keys);\r

  \  item.scales = item.keys.map(x => rChoose([1, .75, 1.2, .9, .8]));\r

  }"
modify_table: "function modify_table() {\r

  \  let uname = Session.cur_user;\r

  \  let table = Session.cur_table;\r

  \  if (nundef(table)) { alert('no table available!'); return; }\r

  \  let game = Session.cur_game = table.game;\r

  \  let tid = Session.cur_tid = table.id;\r

  \  let t = {};\r

  \  t.id = Session.cur_tid;\r

  \  t.players = valf(lookup(Session, ['game_options', 'players']),
  table.players);\r

  \  t.options = valf(lookup(Session, ['game_options', 'game']),
  table.options);\r

  \  t.pl_options = get_player_options(t.players, game);\r

  \  console.log('settings to table:\\nnew players', t.players, '\\nnew
  options', t.options);\r

  \  t.player_init = {};\r

  \  return t;\r

  }"
modifyColor: "function modifyColor() {\r

  \  const colors = [YELLOW, 'skyblue', \"green\", \"purple\", \"yellow\"];\r

  \  document.body.style.setProperty('--corner-color',
  colors[Math.floor(Math.random() * colors.length)]);\r

  \  document.body.style.setProperty('--color1',
  colors[Math.floor(Math.random() * colors.length)]);\r

  \  document.body.style.setProperty('--color2',
  colors[Math.floor(Math.random() * colors.length)]);\r

  }"
modifyColorkey: "function modifyColorkey(item) {\r

  \  let colorkey = chooseRandom(Object.keys(ColorDict));\r

  \  let textShadowColor = ColorDict[colorkey].c;\r

  \  item.textShadowColor = textShadowColor;\r

  \  item.color = ColorDict[colorkey];\r

  \  item.colorKey = colorkey;\r

  \  applyColorkey(item);\r

  }"
modifyServerData: "function modifyServerData() {\r

  \  let pl = serverData.players[GAMEPLID];\r

  \  let o = GAME == 'catan' ? pl.devcards : pl.hand;\r

  \  if (!o) {\r

  \    for (const plid in serverData.players) {\r

  \      serverData.players[plid].hand = { _set: [] };\r

  \    }\r

  \    o = pl.hand;\r

  \  }\r

  \  let cards = getElements(o);\r

  \  if (cards.length > 5) resetPlayerCards(); else addCardsToPlayers();\r

  \  let opt = serverData.options;\r

  \  if (opt) {\r

  \    let keys = Object.keys(opt);\r

  \    let firstKey = keys[0];\r

  \    let actions = opt[firstKey].actions._set[0]._tuple[0]._set;\r

  \    if (actions.length > 50) removedActions = actions.splice(0, 8);\r

  \    else if (actions.length > 33) removedActions =
  removedActions.concat(actions.splice(0, 30));\r

  \    else removedActions.map(x => actions.push(x));\r

  \  }\r

  }"
modifyServerDataRandom: "function modifyServerDataRandom(username) {\r

  \  _syncUsernameOfSender(username);\r

  \  prevServerData = jsCopy(serverData);\r

  \  let ranks = ['2', '3', '4', 'Q', 'J', 'T', 'A', '9'];\r

  \  let dModify = serverData.table ? serverData.table : serverData;\r

  \  let keys = Object.keys(dModify);\r

  \  let nChange = randomNumber(1, keys.length);\r

  \  shuffle(keys);\r

  \  console.log('>>>change', nChange, 'items!')\r

  \  for (let i = 0; i < nChange; i++) {\r

  \    let id = keys[i];\r

  \    let val = dModify[id];\r

  \    if (isLiteral(val)) dModify[id] = { id: id, value: val };\r

  \    dModify[id].rank = chooseRandom(ranks);\r

  \  }\r

  }"
modLabel: "function modLabel(item, newLabel, styles) {\r

  \  let dLabel = iLabel(item);\r

  \  dLabel.innerHTML = newLabel;\r

  \  mStyleX(dLabel, styles);\r

  \  item.label = newLabel;\r

  \  return dLabel;\r

  }"
more: "function more() {\r

  \  let sz = measureText(text, styles, cx);\r

  \  console.log('sz', sz)\r

  \  let [v, h] = [pos[0], pos[1]];\r

  \  let offy = v == 't' ? -sz.h : 'c' ? -sz.h / 2 : 0;\r

  \  let offx = h == 'l' ? -sz.w : 'c' ? -sz.w / 2 : 0;\r

  \  let [x, y] = [styles.x + offx, styles.y + offy];\r

  \  console.log('pos', pos, styles.x, styles.y, x, y)\r

  \  cx.fillText(text, x, y);\r

  \  return;\r

  \  if (pos[1] == 'c') cx.textAlign = 'center';\r

  \  cx.font = `16px Arial`;\r

  \  cx.fillStyle = color;\r

  \  cx.fillText(`${label}`, x, y + (pos[0] == 'b' ? 20 : -10));\r

  }"
MOVE: function MOVE(from, to, captured, promoted, flag) { return (from | (to <<
  7) | (captured << 14) | (promoted << 20) | flag); }
move_down: function move_down(canvas, item) { item.y += 1; canvas.clamp(item);
  return true; }
move_probs: "function move_probs(canvas, item) {\r

  \  let pinc = get_with_prob(item.probs);\r

  \  item.x += pinc.x; item.y += pinc.y;\r

  \  canvas.clamp(item);\r

  \  return true;\r

  }"
move_random: function move_random(canvas, item) { item.x += rFloat(-1, 1);
  item.y += rFloat(-1, 1); canvas.clamp(item); return true; }
move_todo_to_history: "function move_todo_to_history(otree) {\r

  \  otree.history = otree.history.concat(otree.todo);\r

  }"
Move2FromTo: "function Move2FromTo(move) {\r

  \  var ff = FilesBrd[FROMSQ(move)];\r

  \  var rf = RanksBrd[FROMSQ(move)];\r

  \  var ft = FilesBrd[TOSQ(move)];\r

  \  var rt = RanksBrd[TOSQ(move)];\r

  \  return { from: { sq: FROMSQ(move), file: ff, rank: rf }, to: { sq:
  TOSQ(move), file: ft, rank: rt } };\r

  }"
moveAvatar: "function moveAvatar(username, x, y) { mStyleX(getAvatar(username),
  { left: x, top: y }); }"
moveCardsFromTo: "function moveCardsFromTo(cards, from, to) {\r

  }"
MoveExists: "function MoveExists(move) {\r

  \  GenerateMoves();\r

  \  var index;\r

  \  var moveFound = NOMOVE;\r

  \  for (index = brd_moveListStart[brd_ply]; index <
  brd_moveListStart[brd_ply + 1]; ++index) {\r

  \    moveFound = brd_moveList[index];\r

  \    if (MakeMove(moveFound) == BOOL.FALSE) {\r

  \      continue;\r

  \    }\r

  \    TakeMove();\r

  \    if (move == moveFound) {\r

  \      return BOOL.TRUE;\r

  \    }\r

  \  }\r

  \  return BOOL.FALSE;\r

  }"
moveFromTo_v0: "function moveFromTo_v0(item, d1, d2) {\r

  \  let bi = iTableBounds(item);\r

  \  let b1 = iTableBounds(d1);\r

  \  let b2 = iTableBounds(d2);\r

  \  console.log('item', bi);\r

  \  console.log('d1', b1);\r

  \  console.log('d2', b2);\r

  \  mStyleX(dTable, { bg: 'yellow' });\r

  \  let dist = { x: b2.x - b1.x, y: b2.y - b1.y };\r

  \  item.div.style.zIndex = 100;\r

  \  let a = aTranslateBy(item.div, dist.x, dist.y, 500);\r

  \  a.onfinish = () => { mAppend(d2, item.div); item.div.style.zIndex =
  item.z = iZMax(); };\r

  \  return;\r

  \  setTimeout(() => {\r

  \    console.log(item.div);\r

  \    let d = item.div;\r

  \    mRemove(d);\r

  \  }, 1500);\r

  \  setTimeout(() => {\r

  \    let item = iAppend52(28, d2);\r

  \    mCenterAbs(item.div);\r

  \  }, 1500);\r

  }"
MoveGUIPiece: "function MoveGUIPiece(move) {\r

  \  var from = FROMSQ(move);\r

  \  var to = TOSQ(move);\r

  \  var flippedFrom = from;\r

  \  var flippedTo = to;\r

  \  var epWhite = -10;\r

  \  var epBlack = 10;\r

  \  if (GameController.BoardFlipped == BOOL.TRUE) {\r

  \    flippedFrom = MIRROR120(from);\r

  \    flippedTo = MIRROR120(to);\r

  \    epWhite = 10;\r

  \    epBlack = -10;\r

  \  }\r

  \  if (move & MFLAGEP) {\r

  \    var epRemove;\r

  \    if (brd_side == COLOURS.BLACK) {\r

  \      epRemove = flippedTo + epWhite;\r

  \    } else {\r

  \      epRemove = flippedTo + epBlack;\r

  \    }\r

  \    console.log(\"en pas removing from \" + PrSq(epRemove));\r

  \    RemoveGUIPiece(epRemove);\r

  \  } else if (CAPTURED(move)) {\r

  \    RemoveGUIPiece(flippedTo);\r

  \  }\r

  \  var rank = RanksBrd[flippedTo];\r

  \  var file = FilesBrd[flippedTo];\r

  \  var rankName = \"rank\" + (rank + 1);\r

  \  var fileName = \"file\" + (file + 1);\r

  \  $(\".Piece\").each(function (index) {\r

  \    if ((RanksBrd[flippedFrom] == 7 - Math.round($(this).position().top /
  60)) && (FilesBrd[flippedFrom] == Math.round($(this).position().left / 60)))
  {\r

  \      $(this).removeClass();\r

  \      $(this).addClass(\"Piece clickElement \" + rankName + \" \" +
  fileName);\r

  \    }\r

  \  });\r

  \  if (move & MFLAGCA) {\r

  \    if (GameController.BoardFlipped == BOOL.TRUE) {\r

  \      switch (to) {\r

  \        case SQUARES.G1: RemoveGUIPiece(MIRROR120(SQUARES.H1));
  AddGUIPiece(MIRROR120(SQUARES.F1), PIECES.wR); break;\r

  \        case SQUARES.C1: RemoveGUIPiece(MIRROR120(SQUARES.A1));
  AddGUIPiece(MIRROR120(SQUARES.D1), PIECES.wR); break;\r

  \        case SQUARES.G8: RemoveGUIPiece(MIRROR120(SQUARES.H8));
  AddGUIPiece(MIRROR120(SQUARES.F8), PIECES.bR); break;\r

  \        case SQUARES.C8: RemoveGUIPiece(MIRROR120(SQUARES.A8));
  AddGUIPiece(MIRROR120(SQUARES.D8), PIECES.bR); break;\r

  \      }\r

  \    } else {\r

  \      switch (to) {\r

  \        case SQUARES.G1: RemoveGUIPiece(SQUARES.H1);
  AddGUIPiece(SQUARES.F1, PIECES.wR); break;\r

  \        case SQUARES.C1: RemoveGUIPiece(SQUARES.A1);
  AddGUIPiece(SQUARES.D1, PIECES.wR); break;\r

  \        case SQUARES.G8: RemoveGUIPiece(SQUARES.H8);
  AddGUIPiece(SQUARES.F8, PIECES.bR); break;\r

  \        case SQUARES.C8: RemoveGUIPiece(SQUARES.A8);
  AddGUIPiece(SQUARES.D8, PIECES.bR); break;\r

  \      }\r

  \    }\r

  \  }\r

  \  var prom = PROMOTED(move);\r

  \  console.log(\"PromPce:\" + prom);\r

  \  if (prom != PIECES.EMPTY) {\r

  \    console.log(\"prom removing from \" + PrSq(flippedTo));\r

  \    RemoveGUIPiece(flippedTo);\r

  \    AddGUIPiece(flippedTo, prom);\r

  \  }\r

  \  printGameLine();\r

  }"
moveMinuteHands: "function moveMinuteHands(containers) {\r

  \  for (var i = 0; i < containers.length; i++) {\r

  \    containers[i].style.webkitTransform = 'rotateZ(6deg)';\r

  \    containers[i].style.transform = 'rotateZ(6deg)';\r

  \  }\r

  \  setInterval(function () {\r

  \    for (var i = 0; i < containers.length; i++) {\r

  \      if (containers[i].angle === undefined) {\r

  \        containers[i].angle = 12;\r

  \      } else {\r

  \        containers[i].angle += 6;\r

  \      }\r

  \      containers[i].style.webkitTransform = 'rotateZ(' +
  containers[i].angle + 'deg)';\r

  \      containers[i].style.transform = 'rotateZ(' + containers[i].angle +
  'deg)';\r

  \    }\r

  \  }, 60000);\r

  }"
MovePiece: "function MovePiece(from, to) {\r

  \  var index = 0;\r

  \  var pce = brd_pieces[from];\r

  \  var col = PieceCol[pce];\r

  \  HASH_PCE(pce, from);\r

  \  brd_pieces[from] = PIECES.EMPTY;\r

  \  HASH_PCE(pce, to);\r

  \  brd_pieces[to] = pce;\r

  \  for (index = 0; index < brd_pceNum[pce]; ++index) {\r

  \    if (brd_pList[PCEINDEX(pce, index)] == from) {\r

  \      brd_pList[PCEINDEX(pce, index)] = to;\r

  \      break;\r

  \    }\r

  \  }\r

  }"
moveSecondHands: "function moveSecondHands() {\r

  \  var containers = document.querySelectorAll('.seconds-container');\r

  \  setInterval(function () {\r

  \    for (var i = 0; i < containers.length; i++) {\r

  \      if (containers[i].angle === undefined) {\r

  \        containers[i].angle = 6;\r

  \      } else {\r

  \        containers[i].angle += 6;\r

  \      }\r

  \      containers[i].style.webkitTransform = 'rotateZ(' +
  containers[i].angle + 'deg)';\r

  \      containers[i].style.transform = 'rotateZ(' + containers[i].angle +
  'deg)';\r

  \    }\r

  \  }, 1000);\r

  }"
moveTo: "function moveTo(card, dx, dy) { card.animateTo({ delay: 1000, duration:
  500, ease: 'quartOut', x: dx, y: dy }) }"
mp_over: "function mp_over(d, dParent, fz, color, picStyle) {\r

  \  let b = getRect(dParent);\r

  \  let cx = b.w / 2 + b.x;\r

  \  let cy = b.h / 2 + b.y;\r

  \  d.style.top = picStyle == 'segoeBlack' ? ((cy - fz * 2 / 3) + 'px') :
  ((cy - fz / 2) + 'px');\r

  \  d.style.left = picStyle == 'segoeBlack' ? ((cx - fz / 3) + 'px') : ((cx -
  fz * 1.2 / 2) + 'px');\r

  \  d.style.color = color;\r

  \  d.style.fontSize = fz + 'px';\r

  \  d.style.display = 'block';\r

  \  return d;\r

  }"
mPane: "function mPane(dParent, pos, styles, id) {\r

  \  console.log(pos, pos[0])\r

  \  let d = mDiv(dParent, styles, id);\r

  \  if (nundef(pos)) pos = 't'; else pos = pos[0].toLowerCase();\r

  \  let posStyle = { display: 'flex' };\r

  \  switch (pos) {\r

  \    case 't': addKeys({ w: '100%' }, posStyle); break;\r

  \    case 'l': addKeys({ h: '100%', 'flex-direction': 'column' }, posStyle);
  break;\r

  \    case 'b': addKeys({ w: '100%', position: 'absolute', bottom: 0 },
  posStyle); break;\r

  \    case 'r': addKeys({ h: '100%', 'flex-direction': 'column', position:
  'absolute', right: 0 }, posStyle); break;\r

  \  }\r

  \  mStyleX(d, posStyle);\r

  \  return d;\r

  }"
mPanel: "function mPanel(dParent) {\r

  \  let d = mDiv(dParent, { position: 'relative' });\r

  \  mCenterCenterFlex(d);\r

  \  return d;\r

  }"
mPara: "function mPara(text, dParent, styles, classes) {\r

  \  let d = mCreate('p');\r

  \  mAppend(dParent, d);\r

  \  if (!isEmpty(text)) d.innerHTML = text;\r

  \  if (isdef(styles)) mStyleX(d, styles);\r

  \  if (isdef(classes)) mClass(d, classes);\r

  \  return d;\r

  }"
mParent: function mParent(elem) { return elem.parentNode; }
mPath: "function mPath(p) {\r

  \  if (!(p.path.includes('.'))) p.path += '.png';\r

  \  return PERLENPATH_FRONT + 'perlen/' + p.path;\r

  }"
mpBadge: "function mpBadge(info, label, { w, h, bg, fgPic, fgText }, handler,
  dParent, styles, classes = 'picButton', isText, isOmoji) {\r

  \  if (nundef(handler)) handler = (ev) => { let id = evToClosestId(ev); let
  info = symbolDict[id.substring(1)]; if (isLabelVisible(id)) maHideLabel(id,
  info); else maShowLabel(id, info); mBy('dummy').focus(); }\r

  \  let picLabelStyles = getBadgeStyles(styles, {}, {}, w, h, 60, 2, 4,
  'arial', bg, 'transparent', fgPic, fgText, true);\r

  \  let x = maPicLabelFitX(info, label.toUpperCase(), { wmax: w }, dParent,
  picLabelStyles[0], picLabelStyles[1], picLabelStyles[2], true, false);\r

  \  x.id = 'd' + info.key;\r

  \  x.lastChild.style.cursor = 'default';\r

  \  x.style.userSelect = 'none';\r

  \  return x;\r

  }"
mpButton: "function mpButton(info, label, { w, h, bg, fgPic, fgText }, handler,
  dParent, styles, classes = 'picButton', isText, isOmoji) {\r

  \  if (nundef(handler)) handler = labelToggler;\r

  \  let picLabelStyles = getHarmoniousStylesPlusPlus(styles, {}, {}, w, h,
  65, 0, 'arial', bg, 'transparent', fgPic, fgText, true);\r

  \  let x = maPicLabelFitX(info, label.toUpperCase(), { wmax: w }, dParent,
  picLabelStyles[0], picLabelStyles[1], picLabelStyles[2], true, false);\r

  \  x.id = 'd' + info.key;\r

  \  x.onclick = handler;\r

  \  x.style.cursor = 'pointer';\r

  \  x.lastChild.style.cursor = 'pointer';\r

  \  x.style.userSelect = 'none';\r

  \  mClass(x, classes);\r

  \  return x;\r

  }"
mpGridLabeled: "function mpGridLabeled(dParent, list, picLabelStyles) {\r

  \  let dGrid = mDiv(dParent);\r

  \  let elems = [];\r

  \  let isText = true;\r

  \  let isOmoji = false;\r

  \  for (const k of list) {\r

  \    let info = symbolDict[k];\r

  \    let el = maPicLabel(info, dGrid, picLabelStyles[0], picLabelStyles[1],
  picLabelStyles[2], isText, isOmoji)\r

  \    elems.push(el);\r

  \  }\r

  \  let gridStyles = { 'place-content': 'center', gap: 4, margin: 4, padding:
  4, rounding: 5 };\r

  \  let size = layoutGrid(elems, dGrid, gridStyles, { rows: 10, isInline:
  true });\r

  }"
mPic: "function mPic(kItem, dParent, styles, classes) {\r

  \  let item;\r

  \  if (isString(kItem)) { item = { id: getUID(), key: kItem, info:
  Syms[kItem] }; }\r

  \  else if (nundef(kItem.info)) { item = { id: getUID(), key: kItem.key,
  info: kItem }; }\r

  \  else item = kItem;\r

  \  let info = item.info;\r

  \  let dOuter = mDiv(dParent);\r

  \  mCenterCenterFlex(dOuter);\r

  \  let d = mDiv(dOuter);\r

  \  d.innerHTML = info.text;\r

  \  if (nundef(styles)) styles = {};\r

  \  let picStyles = { family: info.family, fz: valf(styles.fz, valf(styles.h
  / 2, 25)), display: 'inline-block' };\r

  \  mStyle(dOuter, styles);\r

  \  mStyle(d, picStyles);\r

  \  if (isdef(classes)) mClass(dOuter, classes);\r

  \  iAdd(item, { div: dOuter, dPic: d });\r

  \  return item;\r

  }"
mPicButton: "function mPicButton(key, handler, dParent, styles, classes) {\r

  \  let x = createPicto({\r

  \    key: key, w: 20, h: 20, unit: 'px', fg: 'yellow', bg: 'violet',\r

  \    padding: 2, margin: 0, cat: 'd', parent: dParent, rounding: 4\r

  \  });\r

  \  if (isdef(handler)) x.onclick = handler;\r

  \  if (isdef(styles)) {\r

  \    mStyle(x, styles);\r

  \  }\r

  \  if (isdef(classes)) { mClass(x, ...classes); }\r

  \  else mClass(x, 'picButton');\r

  \  return x;\r

  }"
mPicButtonSimple: "function mPicButtonSimple(key, handler, dParent, styles,
  classes) {\r

  \  let x = createPictoSimple({ key: key, cat: 'd', parent: dParent });\r

  \  if (isdef(handler)) x.onclick = handler;\r

  \  if (isdef(styles)) { mStyle(x, styles); }\r

  \  if (isdef(classes)) { mClass(x, ...classes); }\r

  \  return x;\r

  }"
mPicSimple: "function mPicSimple(info, dParent, { w, h, unit = 'px', fg, bg,
  padding, border, rounding, shape }) {\r

  \  if (nundef(w)) w = 25;\r

  \  if (nundef(h)) h = w;\r

  \  let d = document.createElement('div');\r

  \  if (dParent) dParent.appendChild(d);\r

  \  d.style.textAlign = 'center';\r

  \  d.style.fontFamily = info.family;\r

  \  d.style.fontWeight = 900;\r

  \  d.style.fontSize = h + unit;\r

  \  [bg, fg] = getExtendedColors(bg, fg);\r

  \  if (isdef(bg)) d.style.backgroundColor = bg;\r

  \  if (isdef(fg)) d.style.color = fg;\r

  \  d.innerHTML = info.text;\r

  \  if (isdef(padding)) d.style.padding = padding + unit;\r

  \  d.style.display = 'inline-block';\r

  \  d.style.minHeight = h + padding + unit;\r

  \  d.style.minWidth = w + 2 * padding + unit;\r

  \  if (isdef(border)) d.style.border = border;\r

  \  if (isdef(rounding)) d.style.borderRadius = rounding + unit;\r

  \  else if (isdef(shape) && shape == 'ellipse') {\r

  \    let b = getBounds(d);\r

  \    let vertRadius = b.height / 2;\r

  \    let horRadius = b.width / 2;\r

  \    let r = Math.min(vertRadius, horRadius);\r

  \    console.log(b, r)\r

  \    d.style.borderRadius = `${r}${unit}`;\r

  \  }\r

  \  d.key = info.key;\r

  \  return d;\r

  }"
mPicto: "function mPicto(n, R, uidParent) {\r

  \  let dParent = mBy(n.idUiParent);\r

  \  let ui;\r

  \  let w = (isdef(n.params.size.w) ? n.params.size.w : 50);\r

  \  let h = (isdef(n.params.size.h) ? n.params.size.h : 50);\r

  \  let fz = (isdef(n.params.fontSize) ? n.params.fontSize : 20);\r

  \  let bg = isdef(n.params.bg) ? n.params.bg : randomColor();\r

  \  let fg = isdef(n.params.fg) ? n.params.fg : colorIdealText(bg);\r

  \  let key = n.content;\r

  \  ui = pictoDiv(key, bg, w, h)\r

  \  mAppend(dParent, ui);\r

  \  return ui;\r

  }"
mPictoWrapper: "function mPictoWrapper(n, R, uidParent) {\r

  \  let dParent = mBy(n.idUiParent);\r

  \  let uiWrapper = mDiv(dParent);\r

  \  addClass(uiWrapper, 'cardWrapper');\r

  \  let key = n.content;\r

  \  let ui = maPicSimple(key);\r

  \  mAppend(uiWrapper, ui);\r

  \  addClass(ui, 'pictoStyle');\r

  \  return ui;\r

  }"
mPlace: "function mPlace(elem, pos, offx, offy) {\r

  \  elem = toElem(elem);\r

  \  pos = pos.toLowerCase();\r

  \  let dParent = elem.parentNode; if (dParent.style.position != 'absolute')
  dParent.style.position = 'relative';\r

  \  let vert = valf(offx, 0);\r

  \  let hor = isdef(offy) ? offy : vert;\r

  \  if (pos[0] == 'c' || pos[1] == 'c') {\r

  \    let rParent = getRect(dParent);\r

  \    let [wParent, hParent] = [rParent.w, rParent.h];\r

  \    let rElem = getRect(elem);\r

  \    let [wElem, hElem] = [rElem.w, rElem.h];\r

  \    switch (pos) {\r

  \      case 'cc': mStyle(elem, { position: 'absolute', left: hor + (wParent
  - wElem) / 2, top: vert + (hParent - hElem) / 2 }); break;\r

  \      case 'tc': mStyle(elem, { position: 'absolute', left: hor + (wParent
  - wElem) / 2, top: vert }); break;\r

  \      case 'bc': mStyle(elem, { position: 'absolute', left: hor + (wParent
  - wElem) / 2, bottom: vert }); break;\r

  \      case 'cl': mStyle(elem, { position: 'absolute', left: hor, top: vert
  + (hParent - hElem) / 2 }); break;\r

  \      case 'cr': mStyle(elem, { position: 'absolute', right: hor, top: vert
  + (hParent - hElem) / 2 }); break;\r

  \    }\r

  \    return;\r

  \  }\r

  \  let di = { t: 'top', b: 'bottom', r: 'right', l: 'left' };\r

  \  elem.style.position = 'absolute';\r

  \  elem.style[di[pos[0]]] = hor + 'px'; elem.style[di[pos[1]]] = vert +
  'px';\r

  }"
mPlaceText: "function mPlaceText(text, where, dParent, styles, innerStyles,
  classes) {\r

  \  let box;\r

  \  if (where.length == 4) {\r

  \    let [t, r, b, l] = where;\r

  \    box = mBoxFromMargins(dParent, t, r, b, l);\r

  \  } else if (where.length == 3) {\r

  \    let [wb, hb, place] = where;\r

  \    box = mDiv(dParent, { w: wb, h: hb });\r

  \    mPlace(box, place);\r

  \  }\r

  \  let r = mMeasure(box);\r

  \  let [fz, w, h] = fitFont(text, 20, r.w, r.h);\r

  \  console.log('res', fz, w, h);\r

  \  let dText = mDiv(box, {\r

  \    w: w, h: h, fz: fz,\r

  \    position: 'absolute', transform: 'translate(-50%,-50%)', top: '50%',
  left: '50%'\r

  \  }, null, text);\r

  \  if (isdef(styles)) mStyle(box, styles);\r

  \  if (isdef(innerStyles)) mStyle(dText, innerStyles);\r

  \  if (isdef(classes)) mStyle(box, classes);\r

  \  return box;\r

  }"
mPlayPause: "function mPlayPause(dParent, styles = {}, handle_play = null,
  handle_pause = null) {\r

  \  if (!handle_play) handle_play = audio_onclick_pp;\r

  \  if (!handle_pause) handle_pause = handle_play;\r

  \  let html = `\r

  \    <div id=\"dButtons\">\r

  \      <a id=\"bPlay\" href=\"#\">\r

  \        <i class=\"fa fa-play fa-2x\"></i>\r

  \      </a>\r

  \      <a id=\"bPause\" href=\"#\" style=\"display: none\">\r

  \        <i class=\"fa fa-pause fa-2x\"></i>\r

  \      </a>\r

  \    </div>\r

  \  `;\r

  \  let pp = mCreateFrom(html);\r

  \  mAppend(dParent, pp);\r

  \  addKeys({ fz: 28, fg: 'lightgreen', display: 'flex', ajcenter: true, w:
  getRect(dParent).w }, styles);\r

  \  mStyle(pp, styles);\r

  \  mBy('bPlay').onclick = () => { hide0('bPlay'); show0('bPause');
  handle_play(); }\r

  \  mBy('bPause').onclick = () => { hide0('bPause'); show0('bPlay');
  handle_pause(); }\r

  \  let [fg, fz] = [styles.fg, styles.fz];\r

  \  mStyle(mBy('bPlay'), { fg: fg, fz: fz })\r

  \  mStyle(mBy('bPause'), { fg: fg, fz: fz })\r

  \  return { ui: pp, play: () => fireClick(mBy('bPlay')), pause: () =>
  fireClick(mBy('bPause')) };\r

  }"
mpLineup: "function mpLineup(dParent, keys, bgs, fg, textColor, texts) {\r

  \  let g2Pics = [];\r

  \  let stylesForLabelButton = { rounding: 10, margin: 4 };\r

  \  const picStyles = ['twitterText', 'twitterImage', 'openMojiText',
  'openMojiImage', 'segoe', 'openMojiBlackText', 'segoeBlack'];\r

  \  let isText = true; let isOmoji = false;\r

  \  for (let i = 0; i < keys.length; i++) {\r

  \    let k = replaceAll(keys[i], ' ', '-');\r

  \    let info = symbolDict[k];\r

  \    let label = \"level \" + i;\r

  \    let h = window.innerHeight; let hBadge = Math.floor((h) / 14);\r

  \    let d1 = mpBadge(info, label, { w: hBadge, h: hBadge, bg: bgs[i],
  fgPic: fg, fgText: textColor }, null, dParent, stylesForLabelButton,
  'frameOnHover', isText, isOmoji);\r

  \    g2Pics.push({ key: info.key, info: info, div: d1, id: d1.id, index: i
  });\r

  \  }\r

  \  return g2Pics;\r

  }"
mPopup: "function mPopup(content, dParent, styles, id) {\r

  \  if (isdef(mBy(id))) mRemove(id);\r

  \  mIfNotRelative(dParent);\r

  \  if (nundef(styles)) styles = { top: 0, left: 0 };\r

  \  styles.position = 'absolute';\r

  \  let d1 = mDiv(dParent, styles, valf(id, getUID()), content);\r

  \  return d1;\r

  }"
mPos: "function mPos(d, x, y, unit = 'px') { mStyle(d, { left: x, top: y,
  position: 'absolute' }, unit); }"
mPosAbs: function mPosAbs(d) { d.style.position = 'absolute'; }
mPosBL: "function mPosBL(d, x, y, unit = 'px') { y = valf(y, x); mStyle(d, {
  left: x, bottom: y, position: 'absolute' }, unit); }"
mPosBottom: "function mPosBottom(d, x, y, unit = 'px') { mStyle(d, { left: x,
  bottom: y, position: 'absolute' }, unit); }"
mPosBottomRight: "function mPosBottomRight(d, x, y, unit = 'px') { mStyle(d, {
  right: x, bottom: y, position: 'absolute' }, unit); }"
mPosBR: "function mPosBR(d, x, y, unit = 'px') { y = valf(y, x); mStyle(d, {
  right: x, bottom: y, position: 'absolute' }, unit); }"
mPosRel: "function mPosRel(d, x, y, unit) { d.style.position = 'relative'; if
  (isdef(x)) mStyle(d, { left: x, top: y }, unit); }"
mPosRight: "function mPosRight(d, x, y, unit = 'px') { mStyle(d, { right: x,
  top: y, position: 'absolute' }, unit); }"
mPosTL: "function mPosTL(d, x, y, unit = 'px') { y = valf(y, x); mStyle(d, {
  left: x, top: y, position: 'absolute' }, unit); }"
mPosTR: "function mPosTR(d, x, y, unit = 'px') { y = valf(y, x); mStyle(d, {
  right: x, top: y, position: 'absolute' }, unit); }"
mpOver: "function mpOver(d, dParent, fz, color, picStyle) {\r

  \  let b = getRect(dParent);\r

  \  let cx = b.w / 2 + b.x;\r

  \  let cy = b.h / 2 + b.y;\r

  \  d.style.top = picStyle == 'segoeBlack' ? ((cy - fz * 2 / 3) + 'px') :
  ((cy - fz / 2) + 'px');\r

  \  d.style.left = picStyle == 'segoeBlack' ? ((cx - fz / 3) + 'px') : ((cx -
  fz * 1.2 / 2) + 'px');\r

  \  d.style.color = color;\r

  \  d.style.fontSize = fz + 'px';\r

  \  d.style.display = 'block';\r

  \  let { isText, isOmoji } = getParamsForMaPicStyle(picStyle);\r

  \  d.style.fontFamily = isString(isOmoji) ? isOmoji : isOmoji ? 'emoOpen' :
  'emoNoto';\r

  \  return d;\r

  }"
mpOverImage: "function mpOverImage(d, dParent, sz) {\r

  \  let b = getRect(dParent);\r

  \  let cx = b.w / 2 + b.x;\r

  \  let cy = b.h / 2 + b.y;\r

  \  sz = Math.max(sz, 50);\r

  \  d.style.top = (cy - sz / 2) + 'px';\r

  \  d.style.left = (cx - sz / 4) + 'px';\r

  \  d.style.color = 'green';\r

  \  d.style.fontSize = sz + 'px';\r

  \  d.style.display = 'block';\r

  \  return d;\r

  }"
mpSimpleButton: "function mpSimpleButton(key, dParent, handler) {\r

  \  let info = symbolDict[key];\r

  \  let label = stringAfterLast(info.E, '|');\r

  \  let st = { w: 200, h: 200, bg: 'random', fgPic: 'random', fgText:
  'contrast' };\r

  \  let stylesForLabelButton = { rounding: 10, margin: 24 };\r

  \  let { isText, isOmoji } = getParamsForMaPicStyle('twitterText');\r

  \  let d1 = maPicLabelButtonFitText(info, label, st, handler, dParent,
  stylesForLabelButton, 'frameOnHover', isText, isOmoji);\r

  \  return d1;\r

  }"
mPulse: function mPulse(d, ms, callback = null) { mClass(d, 'onPulse');
  TO[getUID()] = setTimeout(() => { mClassRemove(d, 'onPulse'); if (callback)
  callback(); }, ms); }
mPulse1: function mPulse1(d, callback) { mPulse(d, 1000, callback); }
mPulse2: function mPulse2(d, callback) { mPulse(d, 2000, callback); }
mPulse3: function mPulse3(d, callback) { mPulse(d, 3000, callback); }
mPuppet: "function mPuppet(key, dParent, styles = {}, dist = 250) {\r

  \  if (nundef(dParent)) dParent = document.body; else dParent =
  toElem(dParent);\r

  \  addKeys({ position: 'fixed', fz: 40, left: 40, top: 40 }, styles);\r

  \  dPuppet = miPic(key, dParent, styles);\r

  \  aRollby(dPuppet, dist);\r

  }"
mRadio: "function mRadio(label, val, name, dParent, styles = {}, handler,
  group_id, is_on) {\r

  \  let cursor = styles.cursor; delete styles.cursor;\r

  \  let d = mDiv(dParent, styles, group_id + '_' + val);\r

  \  let id = isdef(group_id) ? `i_${group_id}_${val}` : getUID();\r

  \  let type = isdef(group_id) ? 'radio' : 'checkbox';\r

  \  let checked = isdef(is_on) ? is_on : false;\r

  \  let inp = mCreateFrom(`<input class='radio' id='${id}' type=\"${type}\"
  name=\"${name}\" value=\"${val}\">`);\r

  \  if (checked) inp.checked = true;\r

  \  let text = mCreateFrom(`<label for='${inp.id}'>${label}</label>`);\r

  \  if (isdef(cursor)) { inp.style.cursor = text.style.cursor = cursor; }\r

  \  mAppend(d, inp);\r

  \  mAppend(d, text);\r

  \  if (isdef(handler)) {\r

  \    inp.onclick = ev => {\r

  \      ev.cancelBubble = true;\r

  \      if (handler == 'toggle') {\r

  \      } else if (isdef(handler)) {\r

  \        handler(val);\r

  \      }\r

  \    };\r

  \  }\r

  \  return d;\r

  }"
mRadio1: "function mRadio1(label, val, dParent, styles = {}, handler, group_id)
  {\r

  \  let cursor = styles.cursor; delete styles.cursor;\r

  \  let d = mDiv(dParent, styles, group_id + '_' + val);\r

  \  let inp = mCreateFrom(`<input class='radio' id='i_${group_id}_${val}'
  type=\"radio\" name=\"${group_id}\" value=\"${val}\" >`);\r

  \  let text = mCreateFrom(`<label for='${inp.id}'>${label}</label>`);\r

  \  if (isdef(cursor)) { inp.style.cursor = text.style.cursor = cursor; }\r

  \  mAppend(d, inp);\r

  \  mAppend(d, text);\r

  \  if (isdef(handler)) d.onclick = () => handler(val);\r

  \  return d;\r

  }"
mRadioGroup: "function mRadioGroup(dParent, styles, id, legend, legendstyles)
  {\r

  \  let f = mCreate('fieldset');\r

  \  f.id = id;\r

  \  if (isdef(styles)) mStyle(f, styles);\r

  \  if (isdef(legend)) {\r

  \    let l = mCreate('legend');\r

  \    l.innerHTML = legend;\r

  \    mAppend(f, l);\r

  \    if (isdef(legendstyles)) { mStyle(l, legendstyles); }\r

  \  }\r

  \  mAppend(dParent, f);\r

  \  return f;\r

  }"
mRadioToggle: "function mRadioToggle(label, val, dParent, styles = {}, is_on =
  true) {\r

  \  let cursor = styles.cursor; delete styles.cursor;\r

  \  let d = mDiv(dParent, styles);\r

  \  let id = getUID();\r

  \  let inp = mCreateFrom(`<input class='radio' id='${id}' type=\"checkbox\"
  checked=\"${is_on}\" value=\"${val}\" >`);\r

  \  let text = mCreateFrom(`<label for='${id}'>${label}</label>`);\r

  \  if (isdef(cursor)) { inp.style.cursor = text.style.cursor = cursor; }\r

  \  mAppend(d, inp);\r

  \  mAppend(d, text);\r

  \  return d;\r

  }"
mRemove: "function mRemove(elem) {\r

  \  elem = toElem(elem);\r

  \  var a = elem.attributes, i, l, n;\r

  \  if (a) {\r

  \    for (i = a.length - 1; i >= 0; i -= 1) {\r

  \      n = a[i].name;\r

  \      if (typeof elem[n] === 'function') {\r

  \        elem[n] = null;\r

  \      }\r

  \    }\r

  \  }\r

  \  a = elem.childNodes;\r

  \  if (a) {\r

  \    l = a.length;\r

  \    for (i = a.length - 1; i >= 0; i -= 1) {\r

  \      mRemove(elem.childNodes[i]);\r

  \    }\r

  \  }\r

  \  elem.remove();\r

  }"
mRemoveChildrenFromIndex: function mRemoveChildrenFromIndex(dParent, i) { while
  (dParent.children[i]) { mRemove(dParent.children[i]); } }
mRemoveClass: function mRemoveClass(d) { for (let i = 1; i < arguments.length;
  i++) d.classList.remove(arguments[i]); }
mRemoveClasses: function mRemoveClasses(d, lst) { for (let i = 1; i <
  lst.length; i++) d.classList.remove(lst[i]); }
mRemoveGracefully: "function mRemoveGracefully(elem) {\r

  \  mClass(elem, 'aniFastDisappear');\r

  \  setTimeout(() => mRemove(elem), 500);\r

  }"
mRemoveStyle: function mRemoveStyle(d, styles) { for (const k of styles) d.style[k] = null; }
mReveal: function mReveal(d) { d.style.opacity = 1; }
mri: "function mri(o, p, d) {\r

  \  p = { x: p.x + d, y: p.y };\r

  \  if (o) o.setPos(p.x, p.y);\r

  \  return p;\r

  }"
mRight: "function mRight(dParent, d, margin = 0) {\r

  \  mStyle(dParent, { display: 'flex', 'justify-content': 'space-between',
  'align-items': 'center' });\r

  \  mAppend(dParent, d);\r

  \  mStyle(d, { margin: margin, 'align-self': 'flex-end' });\r

  \  return d;\r

  }"
mRise: "function mRise(d, ms = 800) {\r

  \  toElem(d).animate([{ opacity: 0, transform: 'translateY(50px)' }, {
  opacity: 1, transform: 'translateY(0px)' },], { fill: 'both', duration: ms,
  easing: 'ease' });\r

  }"
mRot: function mRot(d, angle) { d.style.transform = 'rotate(' + angle + 'deg)'; }
mRow: "function mRow(dParent, styles) {\r

  \  return mDiv(dParent, styles)\r

  }"
mRows: "function mRows(dParent, arr, itemStyles = { bg: 'random' }, rowStyles,
  colStyles, akku) {\r

  \  let d0 = mDiv100(dParent, { display: 'flex', dir: 'column',
  'justify-content': 'space-between' });\r

  \  if (isdef(rowStyles)) mStyle(d0, rowStyles);\r

  \  for (let i = 0; i < arr.length; i++) {\r

  \    let content = arr[i];\r

  \    if (isList(content)) {\r

  \      let d1 = mDiv(d0);\r

  \      mCols(d1, content, itemStyles, rowStyles, colStyles, akku);\r

  \    } else {\r

  \      d1 = mContent(content, d0, itemStyles);\r

  \      akku.push(d1);\r

  \    }\r

  \  }\r

  }"
mRowsX: "function mRowsX(dParent, arr, itemStyles = { bg: 'random' }, rowStyles,
  colStyles, akku) {\r

  \  let d0 = mDiv100(dParent, { display: 'flex', dir: 'column',
  'justify-content': 'space-between' });\r

  \  if (isdef(rowStyles)) mStyle(d0, rowStyles);\r

  \  for (let i = 0; i < arr.length; i++) {\r

  \    let content = arr[i];\r

  \    if (isList(content)) {\r

  \      let d1 = mDiv(d0);\r

  \      mColsX(d1, content, itemStyles, rowStyles, colStyles, akku);\r

  \    } else {\r

  \      d1 = mContentX(content, d0, itemStyles);\r

  \      akku.push(d1);\r

  \    }\r

  \  }\r

  }"
mScale: "function mScale(d, scale) { mStyle(d, { 'transform-origin': 'top',
  transform: `scale(${scale})` }); }"
mScreen: function mScreen(dParent, styles) { let d = mDover(dParent); if
  (isdef(styles)) mStyleX(d, styles); return d; }
mSearch: "function mSearch(handler, dParent, styles, classes) {\r

  \  let html = `\r

  \    <form id=\"fSearch\" action=\"javascript:void(0);\" class='form'>\r

  \      <label>Keywords:</label>\r

  \      <input id=\"iKeywords\" type=\"text\" name=\"keywords\"
  style=\"flex-grow:1\" />\r

  \      <button type=\"submit\" class='hop1' >Search</button>\r

  \    </form>\r

  \  `;\r

  \  let elem = mCreateFrom(html);\r

  \  mAppend(dParent, elem);\r

  \  elem.onsubmit = handler;\r

  \  return elem;\r

  }"
mSection: "function mSection(styles = {}, id, inner, tag, classes) {\r

  \  let d = mBy(id);\r

  \  addKeys({ position: 'relative' }, styles);\r

  \  mStyle(d, styles);\r

  \  if (isdef(tag) && isdef(inner)) inner = `<${tag}>${inner}</${tag}>`;\r

  \  if (isdef(inner)) d.innerHTML = inner;\r

  \  if (isdef(classes)) mClass(d, classes);\r

  \  return d;\r

  }"
msElapsedSince: function msElapsedSince(msStart) { return Date.now() - msStart; }
mSelect: "function mSelect(dParent, optionList, friendlyList, initval, onselect,
  label, styles, classes) {\r

  \  let d = mDiv(dParent);\r

  \  val = valf(initval, optionList[0]);\r

  \  let inp = mCreate('select');\r

  \  inp.onchange = onselect;\r

  \  for (let i = 0; i < optionList.length; i++) {\r

  \    let opt = optionList[i];\r

  \    let friendly = friendlyList[opt];\r

  \    let el = mCreate('option');\r

  \    el.setAttribute('value', opt);\r

  \    el.innerHTML = friendly;\r

  \    mAppend(inp, el);\r

  \    if (opt == val) el.selected = true;\r

  \  }\r

  \  mAppend(d, inp);\r

  \  if (isdef(styles)) mStyle(inp, styles);\r

  \  if (isdef(classes)) mClass(inp, classes);\r

  \  return d;\r

  }"
mSelectTableRow: "function mSelectTableRow(r, color = 'pink') {\r

  \  let t = r.parentNode;\r

  \  for (const ch of t.children) mStyle(ch, { background: 'transparent' });\r

  \  mStyle(r, { background: color });\r

  }"
mset_bounds: "function mset_bounds(minzoom = 2, maxzoom = 20) {\r

  \  let map = M.map;\r

  \  map.options.minZoom = minzoom;\r

  \  map.options.maxZoom = maxzoom;\r

  \  var southWest = L.latLng(-89.98155760646617, -180),\r

  \    northEast = L.latLng(89.99346179538875, 180);\r

  \  var bounds = L.latLngBounds(southWest, northEast);\r

  \  map.setMaxBounds(bounds);\r

  \  map.on('drag', function () {\r

  \    map.panInsideBounds(bounds, { animate: false });\r

  \  });\r

  }"
mset_layers: "function mset_layers(base, overlay) {\r

  \  let map = M.map;\r

  \  [base, overlay] = [toWords(base), toWords(overlay)];\r

  \  let baseLayers = {}, overlays = {};\r

  \  M.layers = {};\r

  \  for (const k of base) {\r

  \    let l = _get_layer(k, { opacity: 1 });\r

  \    l.overlay = false;\r

  \    l.key = k;\r

  \    M.layers[k] = baseLayers[k] = l;\r

  \  }\r

  \  for (const k of overlay) {\r

  \    let l = get_layer(k, { opacity: .5 });\r

  \    l.overlay = true;\r

  \    l.key = k;\r

  \    M.layers['ov_' + k] = overlays[k] = l;\r

  \  }\r

  \  M.layer_control = L.control.layers(baseLayers, overlays).addTo(map);\r

  \  baseLayers[base[0]].addTo(map);\r

  \  overlays[overlay[0]].addTo(map);\r

  }"
mShape: "function mShape(shape, dParent, styles, pos, classes) {\r

  \  styles = valf(styles, { bg: 'random' });\r

  \  styles.display = 'inline-block';\r

  \  let x;\r

  \  if (isdef(PolyClips[shape])) {\r

  \    let d = mDiv(dParent, styles, null, null, classes);\r

  \    styles['clip-path'] = PolyClips[shape];\r

  \    mStyle(d, styles);\r

  \    x = d;\r

  \  } else {\r

  \    styles.rounding = shape == 'circle' || shape == 'ellipse' ? '50%' :
  styles.rounding;\r

  \    x = mDiv(dParent, styles, null, null, classes);\r

  \  }\r

  \  if (isdef(pos)) { mPlace(x, pos); }\r

  \  return x;\r

  }"
mShapeR: "function mShapeR(shape = 'hex', dParent = null, styles = {}, pos,
  classes) {\r

  \  let x;\r

  \  let bg = isdef(styles.bg) ? computeColorX(styles.bg) :
  'conic-gradient(green,pink,green)';\r

  \  let sz = isdef(styles.sz) ? styles.sz : isdef(styles.w) ? styles.w :
  isdef(styles.h) ? styles.h : null;\r

  \  if (isdef(PolyClips[shape])) {\r

  \    sz = valf(sz, 80);\r

  \    let html = `<div style=\r

  \    \"--b:${bg};\r

  \    --clip:${PolyClips[shape]};\r

  \    --patop:100%;\r

  \    --w:${sz}px;\r

  \    \"></div>`;\r

  \    x = createElementFromHtml(html);\r

  \  } else {\r

  \    x = mShape(shape, dParent, styles, pos, classes);\r

  \    return x;\r

  \  }\r

  \  if (sz) {\r

  \    bvar = sz > 120 ? 8 : sz > 80 ? 5 : sz > 50 ? 3 : 1;\r

  \    mClass(x, \"weired\" + bvar);\r

  \    mStyle(x, { w: sz });\r

  \  }\r

  \  if (isdef(dParent)) mAppend(dParent, x);\r

  \  if (isdef(classes)) mClass(x, classes);\r

  \  if (isdef(pos)) { mPlace(x, pos); }\r

  \  return x;\r

  }"
mShield: "function mShield(dParent, styles = { bg: '#00000020' }, id = null,
  classnames = null, hideonclick = false) {\r

  \  dParent = toElem(dParent);\r

  \  let d = mDiv(dParent, styles, id, classnames);\r

  \  lookupAddIfToList(DA, ['shields'], d);\r

  \  mIfNotRelative(dParent);\r

  \  mStyle(d, { position: 'absolute', left: 0, top: 0, w: '100%', h: '100%'
  });\r

  \  if (hideonclick) d.onclick = ev => { evNoBubble(ev); d.remove(); };\r

  \  else d.onclick = ev => { evNoBubble(ev); };\r

  \  mClass(d, 'topmost');\r

  \  return d;\r

  }"
mShieldsOff: function mShieldsOff() { if (nundef(DA.shields)) return; for (const
  d of DA.shields) d.remove(); }
mShow: "function mShow(d, ms = 0) { if (ms > 0) mAppear(d, ms); else mStyle(d, {
  opacity: 1 }); }"
mShrink: "function mShrink(d, x = .75, y = .75, ms = 800, callback = null) {\r

  \  let anim = toElem(d).animate([{ transform: `scale(${1},${1})` }, {
  transform: `scale(${x},${y})` },], { fill: 'both', duration: ms, easing:
  'ease' });\r

  \  anim.onfinish = callback;\r

  }"
mShrinkTranslate: "function mShrinkTranslate(child, scale, newParent, ms = 800,
  callback) {\r

  \  let [dx, dy] = get_screen_distance(child, newParent);\r

  \  mAnimate(child, 'transform', [`translateX(${dx}px) translateY(${dy}px)
  scale(${scale})`], callback, ms, 'ease');\r

  }"
mShrinkUp: "function mShrinkUp(d, x = .75, y = 0, ms = 800, callback = null) {\r

  \  let anim = toElem(d).animate([{ transform: `scale(${1},${1})`, opacity: 1
  }, { transform: `scale(${x},${y})`, opacity: 0 },], { fill: 'none', duration:
  ms, easing: 'ease' });\r

  \  anim.onfinish = mClear(d);\r

  }"
mSidebar: "function mSidebar(title, dParent, styles, id, inner) {\r

  \  let elem = createElementFromHtml(`\r

  \  <div id=\"${id}\" class=\"w3sidebar\">\r

  \    <h1>${title}</h1>\r

  \    <a href=\"javascript:void(0)\" class=\"closebtn\">×</a>\r

  \  </div>  \r

  \  `);\r

  \  function openNav() {\r

  \    elem.style.width = \"250px\";\r

  \    dParent.style.marginLeft = \"250px\";\r

  \  }\r

  \  function closeNav() {\r

  \    elem.style.width = \"0\";\r

  \    dParent.style.marginLeft = \"0\";\r

  \  }\r

  \  elem.children[1].onclick = closeNav;\r

  \  mClass(dParent, 'w3sidebarParent');\r

  \  let dContent = mDiv(elem);\r

  \  mInsert(dParent.parentNode, elem);\r

  \  return { div: elem, dContent: dContent, fOpen: openNav, fClose: closeNav
  };\r

  }"
mSimplest: "function mSimplest(n, R, uidParent) {\r

  \  let ui;\r

  \  let dParent = mBy(n.idUiParent);\r

  \  if (isdef(n.content)) {\r

  \    ui = mDiv(dParent);\r

  \    ui.innerHTML = n.content;\r

  \  } else {\r

  \    ui = mDiv(dParent);\r

  \  }\r

  \  let b = getBounds(ui, true);\r

  \  console.log('________createUi: ', n.uid, '\\n', ui, '\\nbounds', b.width,
  b.height);\r

  \  if (ui.id == '_1') ui.style.maxWidth = '140px';\r

  \  return ui;\r

  }"
mSimplestInvisible: "function mSimplestInvisible(n, R, uidParent) {\r

  \  let dParent = mBy(n.idUiParent);\r

  \  let d = mDiv(dParent);\r

  \  if (n.content) {\r

  \    mText(n.content, d);\r

  \  }\r

  \  return d;\r

  }"
MSInit: "function MSInit() {\r

  \  ROOT = { id: 'root', elem: domId('root'), type: 'div', cat: 'd',
  children: [] };\r

  \  createMSTree(ROOT);\r

  \  simpleColors(S.options.colors[0]);//'midnightBlue');\r

  \  measureMSTree(ROOT);\r

  }"
mSize: "function mSize(d, w, h, unit = 'px', sizing) { if (nundef(h)) h = w;
  mStyle(d, { width: w, height: h }, unit); if (isdef(sizing)) setRect(d,
  sizing); }"
mSizePic: "function mSizePic(d, w, h = 0, unit = 'px') { return mStyle(d, {
  'font-size': h / 2, 'font-weight': 900, 'padding-top': h / 4, 'text-align':
  'center', 'box-sizing': 'border-box', width: w, height: h ? h : w }, unit); }"
msNow: function msNow() { return Date.now(); }
mSocketUploadImage: "function mSocketUploadImage(item, socket) {\r

  \  if (!item.loaded) {\r

  \    console.log('file not ready!click again!'); return;\r

  \  }\r

  \  socket.emit('testImageUpload', { filename: item.filename, image:
  item.base64 });\r

  }"
mSpan: "function mSpan(dParent, styles, innerHTML) {\r

  \  let d = mCreate('span');\r

  \  if (isdef(styles)) mStyle(d, styles);\r

  \  if (isdef(innerHTML)) d.innerHTML = innerHTML;\r

  \  if (isdef(dParent)) mAppend(dParent, d);\r

  \  return d;\r

  }"
mStamp: "function mStamp(d1, text, color, sz) {\r

  \  mStyle(d1, { position: 'relative' });\r

  \  let r = getRect(d1);\r

  \  let [w, h] = [r.w, r.h];\r

  \  color = valf(color, 'black');\r

  \  sz = valf(sz, r.h / 7);\r

  \  let [padding, border, rounding, angle] = [sz / 10, sz / 6, sz / 8,
  rChoose([-16, -14, -10, 10, 14])];\r

  \  let d2 = mDiv(d1, {\r

  \    fg: color,\r

  \    position: 'absolute', top: 25, left: 5,\r

  \    transform: `rotate(${angle}deg)`,\r

  \    fz: sz,\r

  \    hpadding: 2,\r

  \    vpadding: 0,\r

  \    rounding: rounding,\r

  \    border: `${border}px solid ${colorTrans(color, .8)}`,\r

  \    '-webkit-mask-size': `${w}px ${h}px`,\r

  \    '-webkit-mask-position': `50% 50%`,\r

  \    '-webkit-mask-image':
  'url(\"../base/assets/images/textures/grunge.png\")',\r

  \    weight: 400,\r

  \    display: 'inline-block',\r

  \    'text-transform': 'uppercase',\r

  \    family: 'blackops',\r

  \    'mix-blend-mode': 'multiply',\r

  \  }, null, text);\r

  }"
msToTime: "function msToTime(ms) {\r

  \  let secs = Math.floor(ms / 1000);\r

  \  let mins = Math.floor(secs / 60);\r

  \  secs = secs - mins * 60;\r

  \  let hours = Math.floor(mins / 60);\r

  \  mins = mins - hours * 60;\r

  \  return { h: hours, m: mins, s: secs };\r

  }"
mStyle: "function mStyle(elem, styles, unit = 'px') {\r

  \  elem = toElem(elem);\r

  \  if (isdef(styles.whrest)) { delete styles.whrest; styles.w = styles.h =
  'rest'; } else if (isdef(styles.wh100)) { styles.w = styles.h = '100%'; delete
  styles.wh100; }\r

  \  if (isdef(styles.w100)) styles.w = '100%'; else if (isdef(styles.wrest))
  styles.w = 'rest';\r

  \  if (isdef(styles.h100)) styles.h = '100%'; else if (isdef(styles.hrest))
  styles.h = 'rest';\r

  \  let dParent = elem.parentNode;\r

  \  let pad = parseInt(valf(dParent.style.padding, '0'));\r

  \  let rp = getRect(dParent);\r

  \  let r = getRect(elem, dParent);\r

  \  if (styles.w == 'rest') {\r

  \    let left = r.l;\r

  \    let w = rp.w;\r

  \    let wrest = w - left - pad;\r

  \    styles.w = wrest;\r

  \  }\r

  \  if (styles.h == 'rest') {\r

  \    let r1 = getRect(dParent.lastChild, dParent);\r

  \    let hrest = rp.h - (r1.y) - pad;\r

  \    styles.h = hrest;\r

  \  }\r

  \  let bg, fg;\r

  \  if (isdef(styles.bg) || isdef(styles.fg)) {\r

  \    [bg, fg] = colorsFromBFA(styles.bg, styles.fg, styles.alpha);\r

  \  }\r

  \  if (isdef(styles.vpadding) || isdef(styles.hpadding)) {\r

  \    styles.padding = valf(styles.vpadding, 0) + unit + ' ' +
  valf(styles.hpadding, 0) + unit;\r

  \  }\r

  \  if (isdef(styles.vmargin) || isdef(styles.hmargin)) {\r

  \    styles.margin = valf(styles.vmargin, 0) + unit + ' ' +
  valf(styles.hmargin, 0) + unit;\r

  \  }\r

  \  if (isdef(styles.upperRounding) || isdef(styles.lowerRounding)) {\r

  \    let rtop = '' + valf(styles.upperRounding, 0) + unit;\r

  \    let rbot = '' + valf(styles.lowerRounding, 0) + unit;\r

  \    styles['border-radius'] = rtop + ' ' + rtop + ' ' + rbot + ' ' +
  rbot;\r

  \  }\r

  \  if (isdef(styles.box)) styles['box-sizing'] = 'border-box';\r

  \  if (isdef(styles.round)) styles['border-radius'] = '50%';\r

  \  for (const k in styles) {\r

  \    let val = styles[k];\r

  \    let key = k;\r

  \    if (isdef(STYLE_PARAMS[k])) key = STYLE_PARAMS[k];\r

  \    else if (k == 'font' && !isString(val)) {\r

  \      let fz = f.size; if (isNumber(fz)) fz = '' + fz + 'px';\r

  \      let ff = f.family;\r

  \      let fv = f.variant;\r

  \      let fw = isdef(f.bold) ? 'bold' : isdef(f.light) ? 'light' :
  f.weight;\r

  \      let fs = isdef(f.italic) ? 'italic' : f.style;\r

  \      if (nundef(fz) || nundef(ff)) return null;\r

  \      let s = fz + ' ' + ff;\r

  \      if (isdef(fw)) s = fw + ' ' + s;\r

  \      if (isdef(fv)) s = fv + ' ' + s;\r

  \      if (isdef(fs)) s = fs + ' ' + s;\r

  \      elem.style.setProperty(k, s);\r

  \      continue;\r

  \    } else if (k == 'classname') {\r

  \      mClass(elem, styles[k]);\r

  \    } else if (k == 'border') {\r

  \      if (isNumber(val)) val = `solid ${val}px ${isdef(styles.fg) ?
  styles.fg : '#ffffff80'}`;\r

  \      if (val.indexOf(' ') < 0) val = 'solid 1px ' + val;\r

  \    } else if (k == 'ajcenter') {\r

  \      elem.style.setProperty('justify-content', 'center');\r

  \      elem.style.setProperty('align-items', 'center');\r

  \    } else if (k == 'layout') {\r

  \      if (val[0] == 'f') {\r

  \        val = val.slice(1);\r

  \        elem.style.setProperty('display', 'flex');\r

  \        elem.style.setProperty('flex-wrap', 'wrap');\r

  \        let hor, vert;\r

  \        if (val.length == 1) hor = vert = 'center';\r

  \        else {\r

  \          let di = { c: 'center', s: 'start', e: 'end' };\r

  \          hor = di[val[1]];\r

  \          vert = di[val[2]];\r

  \        }\r

  \        let justStyle = val[0] == 'v' ? vert : hor;\r

  \        let alignStyle = val[0] == 'v' ? hor : vert;\r

  \        elem.style.setProperty('justify-content', justStyle);\r

  \        elem.style.setProperty('align-items', alignStyle);\r

  \        switch (val[0]) {\r

  \          case 'v': elem.style.setProperty('flex-direction', 'column');
  break;\r

  \          case 'h': elem.style.setProperty('flex-direction', 'row');
  break;\r

  \        }\r

  \      } else if (val[0] == 'g') {\r

  \        val = val.slice(1);\r

  \        elem.style.setProperty('display', 'grid');\r

  \        let n = allNumbers(val);\r

  \        let cols = n[0];\r

  \        let w = n.length > 1 ? '' + n[1] + 'px' : 'auto';\r

  \        elem.style.setProperty('grid-template-columns', `repeat(${cols},
  ${w})`);\r

  \        elem.style.setProperty('place-content', 'center');\r

  \      }\r

  \    } else if (k == 'layflex') {\r

  \      elem.style.setProperty('display', 'flex');\r

  \      elem.style.setProperty('flex', '0 1 auto');\r

  \      elem.style.setProperty('flex-wrap', 'wrap');\r

  \      if (val == 'v') { elem.style.setProperty('writing-mode',
  'vertical-lr'); }\r

  \    } else if (k == 'laygrid') {\r

  \      elem.style.setProperty('display', 'grid');\r

  \      let n = allNumbers(val);\r

  \      let cols = n[0];\r

  \      let w = n.length > 1 ? '' + n[1] + 'px' : 'auto';\r

  \      elem.style.setProperty('grid-template-columns', `repeat(${cols},
  ${w})`);\r

  \      elem.style.setProperty('place-content', 'center');\r

  \    }\r

  \    if (key == 'font-weight') { elem.style.setProperty(key, val); continue;
  }\r

  \    else if (key == 'background-color') elem.style.background = bg;\r

  \    else if (key == 'color') elem.style.color = fg;\r

  \    else if (key == 'opacity') elem.style.opacity = val;\r

  \    else if (key == 'wrap') { if (val == 'hard') elem.setAttribute('wrap',
  'hard'); else elem.style.flexWrap = 'wrap'; }\r

  \    else if (startsWith(k, 'dir')) {\r

  \      isCol = val[0] == 'c';\r

  \      elem.style.setProperty('flex-direction', 'column');\r

  \    } else if (key == 'flex') {\r

  \      if (isNumber(val)) val = '' + val + ' 1 0%';\r

  \      elem.style.setProperty(key, makeUnitString(val, unit));\r

  \    } else {\r

  \      elem.style.setProperty(key, makeUnitString(val, unit));\r

  \    }\r

  \  }\r

  }"
mStyleGet: function mStyleGet(elem, prop) { return mGetStyle(elem, prop); }
mStyleOrClass: function mStyleOrClass(elem, st) { if (isString(st)) mClass(elem,
  st); else mStyle(elem, st); }
mStyleRemove: "function mStyleRemove(elem, prop) {\r

  \  if (isdef(STYLE_PARAMS[prop])) prop = STYLE_PARAMS[prop];\r

  \  elem.style.removeProperty(prop);\r

  }"
mStyleS: function mStyleS(elem, styles, unit = 'px') { elem = mEnsure(elem); for
  (const k in styles) { elem.style.setProperty(k, makeUnitString(styles[k],
  unit)); } return elem; }
mStyleToCy: function mStyleToCy(di, group) { return translateStylesToCy(di, group); }
mStyleTranslate: "function mStyleTranslate(prop, val, convertNumbers = true) {\r

  \  const paramDict = {\r

  \    align: 'text-align',\r

  \    bg: 'background-color',\r

  \    fg: 'color',\r

  \    hgap: 'column-gap',\r

  \    vgap: 'row-gap',\r

  \    matop: 'margin-top',\r

  \    maleft: 'margin-left',\r

  \    mabottom: 'margin-bottom',\r

  \    maright: 'margin-right',\r

  \    patop: 'padding-top',\r

  \    paleft: 'padding-left',\r

  \    pabottom: 'padding-bottom',\r

  \    paright: 'padding-right',\r

  \    rounding: 'border-radius',\r

  \    w: 'width',\r

  \    h: 'height',\r

  \    wmin: 'min-width',\r

  \    hmin: 'min-height',\r

  \    wmax: 'max-width',\r

  \    hmax: 'max-height',\r

  \    fontSize: 'font-size',\r

  \    fz: 'font-size',\r

  \    family: 'font-family',\r

  \    weight: 'font-weight',\r

  \    z: 'z-index'\r

  \  };\r

  \  let valDict = {\r

  \    random: randomColor(),\r

  \  };\r

  \  let propName = isdef(paramDict[prop]) ? paramDict[prop] : prop;\r

  \  let newVal = isdef(valDict[val]) ? valdict[val] : val;\r

  \  if (convertNumbers && isNumber(newVal)) newVal = '' + newVal + 'px';\r

  \  return [propName, newVal];\r

  }"
mStyleUndo: "function mStyleUndo(ui, styles = {}) {\r

  \  for (const k in styles) {\r

  \    let key = valf(STYLE_PARAMS[k], k);\r

  \    ui.style[key] = null;\r

  \  }\r

  }"
mStyleX: "function mStyleX(elem, styles, unit = 'px') {\r

  \  const paramDict = {\r

  \    bg: 'background-color',\r

  \    fg: 'color',\r

  \    align: 'text-align',\r

  \    matop: 'margin-top',\r

  \    maleft: 'margin-left',\r

  \    mabottom: 'margin-bottom',\r

  \    maright: 'margin-right',\r

  \    patop: 'padding-top',\r

  \    paleft: 'padding-left',\r

  \    pabottom: 'padding-bottom',\r

  \    paright: 'padding-right',\r

  \    rounding: 'border-radius',\r

  \    w: 'width',\r

  \    h: 'height',\r

  \    fontSize: 'font-size',\r

  \    fz: 'font-size',\r

  \    family: 'font-family',\r

  \    weight: 'font-weight',\r

  \  };\r

  \  let bg, fg;\r

  \  if (isdef(styles.bg) || isdef(styles.fg)) {\r

  \    [bg, fg] = getExtendedColors(styles.bg, styles.fg);\r

  \  }\r

  \  if (isdef(styles.vmargin) && isdef(styles.hmargin)) {\r

  \    styles.margin = vmargin + unit + ' ' + hmargin + unit;\r

  \  }\r

  \  if (isdef(styles.vpadding) && isdef(styles.hpadding)) {\r

  \    styles.padding = vpadding + unit + ' ' + hpadding + unit;\r

  \  }\r

  \  for (const k in styles) {\r

  \    let val = styles[k];\r

  \    let key = k;\r

  \    if (isdef(paramDict[k])) key = paramDict[k];\r

  \    else if (k == 'font' && !isString(val)) {\r

  \      let fz = f.size; if (isNumber(fz)) fz = '' + fz + 'px';\r

  \      let ff = f.family;\r

  \      let fv = f.variant;\r

  \      let fw = isdef(f.bold) ? 'bold' : isdef(f.light) ? 'light' :
  f.weight;\r

  \      let fs = isdef(f.italic) ? 'italic' : f.style;\r

  \      if (nundef(fz) || nundef(ff)) return null;\r

  \      let s = fz + ' ' + ff;\r

  \      if (isdef(fw)) s = fw + ' ' + s;\r

  \      if (isdef(fv)) s = fv + ' ' + s;\r

  \      if (isdef(fs)) s = fs + ' ' + s;\r

  \      elem.style.setProperty(k, s);\r

  \      continue;\r

  \    } else if (k == 'border') {\r

  \      if (val.indexOf(' ') < 0) val = 'solid 1px ' + val;\r

  \    }\r

  \    if (key == 'font-weight') { elem.style.setProperty(key, val); continue;
  }\r

  \    else if (key == 'background-color') elem.style.background = bg;\r

  \    else if (key == 'color') elem.style.color = fg;\r

  \    else {\r

  \      elem.style.setProperty(key, makeUnitString(val, unit));\r

  \    }\r

  \  }\r

  }"
mSuit: "function mSuit(ckey, sz = 20, color = null) {\r

  \  let suit = ckey.length == 1 ? ckey : ckey[1];\r

  \  let di = { S: '&spades;', H: '&hearts;', D: '&diams;', C: '&clubs;' };\r

  \  color = valf(color, suit == 'H' || suit == 'D' ? 'red' : 'black');\r

  \  let html = `<span
  style='color:${color};font-size:${sz}px'>${di[suit]}</span>`;\r

  \  return html;\r

  }"
mSuitPos: "function mSuitPos(svg, pos) {\r

  \  pos = pos.toLowerCase();\r

  \  if (pos[0] == 'c' || pos[1] == 'c') {\r

  \    let dCard = svg.parentNode;\r

  \    let r = getRect(dCard);\r

  \    let [wCard, hCard] = [r.w, r.h];\r

  \    let [wSym, hSym] = [svg.getAttribute('width'),
  svg.getAttribute('height')];\r

  \    switch (pos) {\r

  \      case 'cc': mStyle(svg, { position: 'absolute', left: (wCard - wSym) /
  2, top: (hCard - hSym) / 2 }); break;\r

  \      case 'tc': mStyle(svg, { position: 'absolute', left: (wCard - wSym) /
  2, top: 0 }); break;\r

  \      case 'bc': mStyle(svg, { position: 'absolute', left: (wCard - wSym) /
  2, bottom: 0 }); break;\r

  \      case 'cl': mStyle(svg, { position: 'absolute', left: 0, top: (hCard -
  hSym) / 2 }); break;\r

  \      case 'cr': mStyle(svg, { position: 'absolute', right: 0, top: (hCard
  - hSym) / 2 }); break;\r

  \    }\r

  \    return;\r

  \  }\r

  \  let di = { t: 'top', b: 'bottom', r: 'right', l: 'left' };\r

  \  svg.style.position = 'absolute';\r

  \  svg.style[di[pos[0]]] = svg.style[di[pos[1]]] = 0;\r

  }"
mSuitSize: function mSuitSize(suit, sz) { suit.setAttribute('sz', sz);
  suit.firstChild.setAttribute('height', sz); gSizeToContent(suit); }
mSwap: "function mSwap(obj1, obj2) {\r

  \  var parent2 = obj2.parentNode;\r

  \  var next2 = obj2.nextSibling;\r

  \  if (next2 === obj1) {\r

  \    parent2.insertBefore(obj1, obj2);\r

  \  } else {\r

  \    obj1.parentNode.insertBefore(obj2, obj1);\r

  \    if (next2) {\r

  \      parent2.insertBefore(obj1, next2);\r

  \    } else {\r

  \      parent2.appendChild(obj1);\r

  \    }\r

  \  }\r

  }"
mSym: "function mSym(key, dParent, styles = {}, pos, classes) {\r

  \  let info = Syms[key];\r

  \  styles.display = 'inline-block';\r

  \  let family = info.family;\r

  \  styles.family = family;\r

  \  let sizes;\r

  \  if (isdef(styles.sz)) { sizes = mSymSizeToBox(info, styles.sz,
  styles.sz); }\r

  \  else if (isdef(styles.w) && isdef(styles.h)) { sizes =
  mSymSizeToBox(info, styles.w, styles.h); }\r

  \  else if (isdef(styles.fz)) { sizes = mSymSizeToFz(info, styles.fz); }\r

  \  else if (isdef(styles.h)) { sizes = mSymSizeToH(info, styles.h); }\r

  \  else if (isdef(styles.w)) { sizes = mSymSizeToW(info, styles.w); }\r

  \  else { sizes = mSymSizeToFz(info, 25); }\r

  \  styles.fz = sizes.fz;\r

  \  styles.w = sizes.w;\r

  \  styles.h = sizes.h;\r

  \  styles.align = 'center';\r

  \  if (isdef(styles.bg) && info.family != 'emoNoto') { styles.fg =
  styles.bg; delete styles.bg; }\r

  \  let x = mDiv(dParent, styles, null, info.text);\r

  \  if (isdef(classes)) mClass(x, classes);\r

  \  if (isdef(pos)) { mPlace(x, pos); }\r

  \  return x;\r

  }"
mSymbol: "function mSymbol(key, dParent, sz, styles = {}) {\r

  \  console.log('key', key)\r

  \  let info = symbolDict[key];\r

  \  fzStandard = info.fz;\r

  \  hStandard = info.h[0];\r

  \  wStandard = info.w[0];\r

  \  let fzMax = fzStandard * sz / Math.max(hStandard, wStandard);\r

  \  fzMax *= .9;\r

  \  let fz = isdef(styles.fz) && styles.fz < fzMax ? styles.fz : fzMax;\r

  \  let wi = wStandard * fz / 100;\r

  \  let hi = hStandard * fz / 100;\r

  \  let vpadding = 2 + Math.ceil((sz - hi) / 2); console.log('***vpadding',
  vpadding)\r

  \  let hpadding = Math.ceil((sz - wi) / 2);\r

  \  let margin = '' + vpadding + 'px ' + hpadding + 'px'; //''+vpadding+'px
  '+hpadding+' ';\r

  \  let newStyles = deepmergeOverride({ fz: fz, align: 'center', w: sz, h:
  sz, bg: 'white' }, styles);\r

  \  newStyles.fz = fz;\r

  \  let d = mDiv(dParent, newStyles);\r

  \  console.log(key, info)\r

  \  let txt = mText(info.text, d, { family: info.family });\r

  \  console.log('-----------', margin, hpadding, vpadding);\r

  \  mStyle(txt, { margin: margin, 'box-sizing': 'border-box' });\r

  \  return d;\r

  }"
mSymFramed: "function mSymFramed(info, bg, sz) {\r

  \  let [w, h, fz] = [sz, sz, sz * .7];\r

  \  return mCreateFrom(`<div style='\r

  \  text-align:center;display:inline;background-color:${bg};\r

  \  font-size:${fz}px;overflow:hidden;\r

  \  font-family:${info.family}'>${info.text}</div>`);\r

  }"
mSymInDiv: "function mSymInDiv(sym, dParent, styles = { sz: Card.sz / 5, fg:
  'random' }) {\r

  \  dResult = mDiv(dParent);\r

  \  ds = mSym(sym, dResult, styles);\r

  \  return dResult;\r

  }"
mSymInDivShrink: "function mSymInDivShrink(sym, dParent, styles = { sz: Card.sz
  / 5, fg: 'random' }) {\r

  \  dResult = mDiv(dParent);\r

  \  let ds = mSym(sym, dResult, styles);\r

  \  let scale = chooseRandom([.5, .75, 1, 1.25]);\r

  \  let [scaleX, scaleY] = [coin() ? scale : -scale, scale];\r

  \  if (coin()) ds.style.transform = `scale(${scaleX},${scaleY})`;\r

  \  return dResult;\r

  }"
mSymInline: "function mSymInline(key, dParent, styles) {\r

  \  let info = Syms[key];\r

  \  styles.family = info.family;\r

  \  let el = mSpan(dParent, styles, null, info.text);\r

  \  return text;\r

  }"
mSymSizeToBox: "function mSymSizeToBox(info, w, h) {\r

  \  let fw = w / info.w;\r

  \  let fh = h / info.h;\r

  \  let f = Math.min(fw, fh);\r

  \  return { fz: 100 * f, w: info.w * f, h: info.h * f };\r

  }"
mSymSizeToFz: "function mSymSizeToFz(info, fz) { let f = fz / 100; return { fz:
  fz, w: info.w * f, h: info.h * f }; }"
mSymSizeToH: "function mSymSizeToH(info, h) { let f = h / info.h; return { fz:
  100 * f, w: info.w * f, h: h }; }"
mSymSizeToW: "function mSymSizeToW(info, w) { let f = w / info.w; return { fz:
  100 * f, w: w, h: info.h * f }; }"
mSymText: "function mSymText(s, dParent, styles = {}, pos, classes) {\r

  \  styles.display = 'inline-block';\r

  \  styles.w = valfi(styles.w, styles.sz, styles.h, '25%');\r

  \  styles.h = valfi(styles.h, styles.sz, styles.w, styles.fz, '25%');\r

  \  styles.fz = valfi(styles.fz, styles.sz * 4 / 5, styles.h * 4 / 5,
  styles.w * 2, '20%');\r

  \  styles.align = 'center';\r

  \  let x = mDiv(dParent, styles, null, s); mCenterCenterFlex(x);\r

  \  if (isdef(classes)) mClass(x, classes);\r

  \  if (isdef(pos)) { mPlace(x, pos); }\r

  \  return x;\r

  }"
mSzPic: function mSzPic(d, sz, unit = 'px') { return mSizePic(d, sz, sz, unit); }
mTable: "function mTable(dParent, headers, showheaders, styles = { mabottom: 0
  }, className = 'table') {\r

  \  let d = mDiv(dParent);\r

  \  let t = mCreate('table');\r

  \  mAppend(d, t);\r

  \  if (isdef(className)) mClass(t, className);\r

  \  if (isdef(styles)) mStyle(t, styles);\r

  \  if (showheaders) {\r

  \    let code = `<tr>`;\r

  \    for (const h of headers) {\r

  \      code += `<th>${h}</th>`\r

  \    }\r

  \    code += `</tr>`;\r

  \    t.innerHTML = code;\r

  \  }\r

  \  return t;\r

  }"
mTableCol: "function mTableCol(r, val) {\r

  \  let col = mCreate('td');\r

  \  mAppend(r, col);\r

  \  if (isdef(val)) col.innerHTML = val;\r

  \  return col;\r

  }"
mTableCommandify: "function mTableCommandify(rowitems, di) {\r

  \  for (const item of rowitems) {\r

  \    for (const index in di) {\r

  \      let colitem = item.colitems[index];\r

  \      colitem.div.innerHTML = di[index](item, colitem.val);\r

  \    }\r

  \  }\r

  }"
mTableCommandifyList: "function mTableCommandifyList(rowitem, val, func) {\r

  \  let names = isString(val) ? val.replaceAll(' ', ',').split(',') : val;\r

  \  let html = '';\r

  \  for (const name of names) {\r

  \    html += func(rowitem, name);\r

  \  }\r

  \  return html;\r

  }"
mTableCommands: "function mTableCommands(rowitems, di) {\r

  \  let t = rowitems[0].div.parentNode;\r

  \  mTableHeader(t, 'commands');\r

  \  for (const item of rowitems) {\r

  \    let drow = item.div;\r

  \    let dcol = mTableCol(drow);\r

  \    let colitem = { div: dcol, key: 'commands', val: null };\r

  \    item.colitems.push(colitem);\r

  \    let html = '';\r

  \    for (const k in di) {\r

  \      html += di[k](item);\r

  \    }\r

  \    dcol.innerHTML = html;\r

  \  }\r

  }"
mTableHeader: "function mTableHeader(t, val) {\r

  \  let col = mCreate('th');\r

  \  mAppend(t.firstChild, col);\r

  \  col.innerHTML = val;\r

  \  return col;\r

  }"
mTableRow: "function mTableRow(t, o, headers, id) {\r

  \  let elem = mCreate('tr');\r

  \  if (isdef(id)) elem.id = id;\r

  \  mAppend(t, elem);\r

  \  let colitems = [];\r

  \  for (const k of headers) {\r

  \    let val = isdef(o[k]) ? isDict(o[k]) ? JSON.stringify(o[k]) :
  isList(o[k]) ? o[k].join(', ') : o[k] : '';\r

  \    let col = mTableCol(elem, val);\r

  \    colitems.push({ div: col, key: k, val: val });\r

  \  }\r

  \  return { div: elem, colitems: colitems };\r

  }"
mTableTransition: "function mTableTransition(d, ms = 800) {\r

  \  toElem(d).animate([{ opacity: .25 }, { opacity: 1 },], { fill: 'both',
  duration: ms, easing: 'ease' });\r

  }"
mTag: "function mTag(tag, inner = null, dParent = null, styles = {}, id = null,
  classes = null) {\r

  \  let el = mCreate(tag);\r

  \  if (inner) el.innerHTML = inner; //'Descriptive Text goes here';\r

  \  if (dParent) mAppend(dParent, el);\r

  \  if (styles) mStyle(el, styles);\r

  \  if (id) el.id = id;\r

  \  if (classes) mClass(el, classes);\r

  \  return el;\r

  }"
mTaPlain: "function mTaPlain(dParent, styles = {}, opts = {}) {\r

  \  opts.tag = 'textarea';\r

  \  let ta = mDom(dParent, styles, opts);\r

  \  mClass(ta, 'plain');\r

  \  return ta;\r

  }"
mText: "function mText(text, dParent, styles, classes) {\r

  \  if (!isString(text)) text = text.toString();\r

  \  let d = mDiv(dParent);\r

  \  if (!isEmpty(text)) { d.innerHTML = text; }\r

  \  if (isdef(styles)) mStyle(d, styles);\r

  \  if (isdef(classes)) mClass(d, classes);\r

  \  return d;\r

  }"
mTextArea: "function mTextArea(rows, cols, dParent, styles = {}, id) {\r

  \  let html = `<textarea id=\"${id}\" rows=\"${rows}\" cols=\"${cols}\"
  wrap=\"hard\"></textarea>`;\r

  \  let t = mCreateFrom(html);\r

  \  mAppend(dParent, t);\r

  \  mStyle(t, styles);\r

  \  return t;\r

  }"
mTextarea: "function mTextarea(rows, cols, dParent, styles = {}, id) {\r

  \  let html = `<textarea id=\"${id}\"`;\r

  \  if (isdef(rows)) html += ` rows=\"${rows}\"`;\r

  \  if (isdef(cols)) html += ` cols=\"${cols}\"`;\r

  \  html += ` wrap=\"hard\"></textarea>`;\r

  \  let t = mCreateFrom(html);\r

  \  mAppend(dParent, t);\r

  \  mStyle(t, styles);\r

  \  return t;\r

  }"
mTextDiv: function mTextDiv(text, dParent = null) { let d = mCreate('div');
  d.innerHTML = text; return d; }
mTextFit: "function mTextFit(text, { wmax, hmax }, dParent, styles, classes) {\r

  \  let d = mDiv(dParent);\r

  \  if (!isEmpty(text)) d.innerHTML = text;\r

  \  if (nundef(styles) && (isdef(wmax)) || isdef(hmax)) {\r

  \    styles = {};\r

  \  }\r

  \  if (isdef(wmax)) styles.width = wmax;\r

  \  if (isdef(hmax)) styles.height = hmax;\r

  \  if (isdef(styles)) mStyleX(d, styles);\r

  \  if (isdef(classes)) mClass(d, classes);\r

  \  return d;\r

  }"
mTextWidth: "function mTextWidth(txt, fz = 16) {\r

  \  let len = txt.length;\r

  \  let wprox = (len + 1.5) * fz / 2;\r

  \  return wprox;\r

  }"
mTitle: "function mTitle(n, R, uidParent) {\r

  \  let dParent = mBy(n.idUiParent);\r

  \  let ui = mText(n.content, dParent);\r

  \  return ui;\r

  }"
mTitledDiv: "function mTitledDiv(title, dParent, outerStyles = {}, innerStyles =
  {}, id) {\r

  \  let d = mDiv(dParent, outerStyles);\r

  \  let dTitle = mDiv(d);\r

  \  dTitle.innerHTML = title;\r

  \  innerStyles.w = '100%';\r

  \  innerStyles.h = outerStyles.h - getRect(dTitle).h;\r

  \  let dContent = mDiv(d, innerStyles, id);\r

  \  return dContent;\r

  }"
mTitledMessageDiv: "function mTitledMessageDiv(title, dParent, id, outerStyles =
  {}, contentStyles = {}, titleStyles = {}, messageStyles = {}, titleOnTop =
  true) {\r

  \  let d = mDiv(dParent, outerStyles, id);\r

  \  let dTitle = mDiv(d, titleStyles, id + '.title'); dTitle.innerHTML =
  title;\r

  \  let dMessage = mDiv(d, messageStyles, id + '.message');
  dMessage.innerHTML = 'hallo!';\r

  \  contentStyles.w = '100%';\r

  \  let hTitle = getRect(dTitle).h, hMessage = getRect(dMessage).h, hArea =
  getRect(d).h;\r

  \  let hContent = hArea - hTitle - hMessage - 4;\r

  \  mStyle(dMessage, { h: hMessage + 2 });\r

  \  mStyle(dTitle, { h: hTitle + 2 });\r

  \  contentStyles.hmin = hContent;\r

  \  let dContent = mDiv(d, contentStyles, id + '.content');\r

  \  if (!titleOnTop) { mAppend(d, dTitle); }\r

  \  return d;\r

  }"
mToggle: "function mToggle(label, dParent, styles = {}, handler, is_on,
  styleyes, styleno, classes = null) {\r

  \  let cursor = styles.cursor; delete styles.cursor;\r

  \  let name = replaceWhite(label);\r

  \  let checked = isdef(is_on) ? is_on : false;\r

  \  let b = mButton(label, null, dParent, styles, classes);\r

  \  mClass(b, 'noactive');\r

  \  b.setAttribute('checked', checked);\r

  \  b.onclick = ev => {\r

  \    ev.cancelBubble = true;\r

  \    let b = ev.target;\r

  \    assertion(b == ev.target, 'NOOOOOOOOOOOOOOOOOOOOOOO')\r

  \    let oldval = b.getAttribute('checked') == 'false' ? false : true;\r

  \    let newval = oldval ? false : true;\r

  \    if (newval === true) {\r

  \      mStyle(b, styleyes);\r

  \    } else {\r

  \      mStyle(b, styleno);\r

  \    }\r

  \    b.setAttribute('checked', newval);\r

  \    handler(name, newval);\r

  \  };\r

  \  return b;\r

  }"
mToggle_orig_BROKEN: "function mToggle_orig_BROKEN(label, val, dParent, styles =
  {}, handler = null, is_on = true) {\r

  \  let cursor = styles.cursor; delete styles.cursor;\r

  \  let d = mDiv(dParent, styles);\r

  \  let id = getUID();\r

  \  let inp = createElementFromHTML(`<input class='radio' id='${id}'
  type=\"checkbox\" checked=\"${is_on}\" value=\"${val}\" >`);\r

  \  let text = createElementFromHTML(`<label
  for='${id}'>${label}</label>`);\r

  \  if (isdef(cursor)) { inp.style.cursor = text.style.cursor = cursor; }\r

  \  mAppend(d, inp);\r

  \  mAppend(d, text);\r

  \  if (isdef(handler)) inp.onclick = ev => { ev.cancelBubble = true;
  handler(val); }\r

  \  return d;\r

  }"
mTogglebar: "function mTogglebar(di, handler, styleyes, styleno, dParent,
  styles, bstyles, id, classes, bclasses) {\r

  \  let d = mDiv(dParent, styles, id, classes);\r

  \  for (const k in di) {\r

  \    mToggle(k, d, bstyles, handler, di[k], styleyes, styleno, bclasses);\r

  \  }\r

  }"
mToggleStyle: "function mToggleStyle(d, prop, val1, val2) {\r

  \  let val = d.style[prop];\r

  \  if (val === null && val1 == 0) val = val1;\r

  \  else if (isNumber(val1)) val = firstNumber(val);\r

  \  if (val == val1) d.style[prop] = makeUnitString(val2); else d.style[prop]
  = makeUnitString(val1);\r

  }"
mToolbar: "function mToolbar(buttons, handler, dParent, styles = {}, bstyles =
  {}, id = null, classes = null, bclasses = null) {\r

  \  let d = mDiv(dParent, styles, id, classes);\r

  \  for (const arg of buttons) {\r

  \    let funcname = replaceWhite(arg);\r

  \    mButton(arg, () => handler(arg), d, bstyles, bclasses,
  `b${funcname}`);\r

  \  }\r

  \  return d;\r

  }"
mTranslate: "function mTranslate(child, newParent, ms = 800, callback = null)
  {\r

  \  let [dx, dy] = get_screen_distance(child, newParent);\r

  \  onend = () => { mAppend(newParent, child); if (callback) callback(); };\r

  \  mAnimate(child, 'transform', [`translateX(${dx}px) translateY(${dy}px)`],
  onend, ms, 'ease');\r

  }"
mTranslate1: "function mTranslate1(child, newParent, ms = 800, callback = null)
  {\r

  \  child = toElem(child);\r

  \  newParent = toElem(newParent);\r

  \  const parentOriginal = child.parentNode;\r

  \  let children = arrChildren(parentOriginal);\r

  \  let iChild = children.indexOf(child);\r

  \  let sibling = iChild == children.length - 1 ? null : children[iChild +
  1];\r

  \  const x0 = child.getBoundingClientRect().left;\r

  \  const y0 = child.getBoundingClientRect().top;\r

  \  newParent.appendChild(child);\r

  \  const x1 = child.getBoundingClientRect().left;\r

  \  const y1 = child.getBoundingClientRect().top;\r

  \  if (sibling) parentOriginal.insertBefore(child, sibling); else
  parentOriginal.appendChild(child);\r

  \  child.style.setProperty('--dx', (x1 - x0) + 'px');\r

  \  child.style.setProperty('--dy', (y1 - y0) + 'px');\r

  \  child.style.setProperty('--ms', `${ms}ms`);\r

  \  child.addEventListener('animationend', function () {\r

  \    newParent.appendChild(child);\r

  \    child.classList.remove('move');\r

  \    if (callback) callback();\r

  \  });\r

  \  child.classList.add('move');\r

  }"
mTranslateBy: "function mTranslateBy(elem, x, y, ms = 800, callback = null) {\r

  \  mAnimate(elem, 'transform', [`translateX(${x}px) translateY(${y}px)`],
  callback, ms, 'ease');\r

  }"
mTranslateByFade: "function mTranslateByFade(elem, x, y, ms = 800, callback =
  null) {\r

  \  mAnimate(elem, 'transform', [`translateX(${x}px) translateY(${y}px)`],
  callback, ms, 'ease');\r

  \  let a = toElem(elem).animate([{ opacity: .25 }, { opacity: 1 },], { fill:
  'both', duration: ms, easing: 'ease' });\r

  }"
MUELL: "function MUELL() {\r

  \  let [mean, stdev] = [0, 1];\r

  \  let f = x => gaussian_amp(x, mean, stdev);\r

  \  let y = f(0);\r

  \  console.log('y', y);\r

  \  let amp = .9 * (-canvas.miny) / (40 * y);\r

  \  f = x => gaussian_amp(x, mean, stdev, amp);\r

  \  canvas.draw_axes();\r

  \  canvas.plot(f, 'orange', 1);\r

  \  let x = 40 * search_end_point(f, 0, canvas.maxx, .1, .01);\r

  \  console.log('point x', x, canvas.minx, canvas.maxx);\r

  \  y = -40 * f(x / 40)\r

  \  console.log('point y', x, 0, canvas.maxy);\r

  \  console.log('scale', canvas.scale)\r

  \  let xreal = x / 40;\r

  \  let yreal = f(xreal) / (40);\r

  \  x = 0;\r

  \  for (let i = canvas.minx; i < canvas.maxx; i += canvas.scale) {\r

  \    let x1 = Math.round(convert_to_range(x, -4, 4, 50, 150));\r

  \    let x2 = Math.round(convert_to_range(-x, -4, 4, 50, 150));\r

  \    canvas.pp(x * 40, 0, 3, `${x1}`);\r

  \    canvas.pp(-x * 40, 0, 3, `${x2}`); x += 2;\r

  \  }\r

  }"
muiCard: "function muiCard(key, dParent, styles, classes) {\r

  }"
multiCartesi: "function multiCartesi() {\r

  \  let arr = Array.from(arguments);\r

  \  if (arr.length > 2) {\r

  \    return cartesi(arr[0], stripSet(multiCartesi(...arr.slice(1))));\r

  \  } else if (arr.length == 2) return cartesi(arr[0], arr[1]);\r

  \  else if (arr.length == 1) return arr[0];\r

  \  else return [];\r

  }"
multiSplit: "function multiSplit(s, seplist) {\r

  \  let res = [s];\r

  \  for (const sep of seplist) {\r

  \    let resNew = [];\r

  \    for (const s1 of res) {\r

  \      let parts = s1.split(sep);\r

  \      resNew = resNew.concat(parts);\r

  \    }\r

  \    res = resNew;\r

  \  }\r

  \  return res.filter(x => !isEmpty(x));\r

  }"
multiStyleAnimation: "function multiStyleAnimation(elist, ms, callback) {\r

  \  let els = elist.map(x => x[0]);\r

  \  let styles = elist.map(x => x[1]);\r

  \  els.map(x => x.style.transition = '' + ms + 'ms');\r

  \  for (let i = 0; i < els.length; i++) { mStyleX(els[i], styles[i]); }\r

  \  DA.TO = setTimeout(() => {\r

  \    els.map(x => x.style.transition = 'unset');\r

  \    if (isdef(callback)) callback();\r

  \  }, ms);\r

  }"
mUnhigh: function mUnhigh(ui) { mClassRemove(ui, 'high'); }
munhigh: "function munhigh(d) { d = isString(d) ? mBy(d) : d; mStyle(d, {
  border: 'none' }); }"
mup: "function mup(o, p, d) {\r

  \  p = { x: p.x, y: p.y - d };\r

  \  if (o) o.setPos(p.x, p.y);\r

  \  return p;\r

  }"
mutate_colors: "function mutate_colors(type, colors) {\r

  \  let items = C.items[type];\r

  \  let changed = false;\r

  \  let lastcolor = arrLast(colors);\r

  \  for (const item of items) {\r

  \    if (item.color == lastcolor) continue;\r

  \    changed = true;\r

  \    if (coin()) continue;\r

  \    let i = colors.indexOf(item.color) + 1;\r

  \    item.color = colors[i];\r

  \    if (type == 'branch') item.thickness -= 1.5;\r

  \  }\r

  \  return changed;\r

  }"
mXit: "function mXit(elem, sz = 50) {\r

  \  if (nundef(sz)) sz = getRect(elem).h;\r

  \  let d = markerFail();\r

  \  mpOver(d, elem, sz / 2, 'red', 'openMojiTextBlack');\r

  \  mMoveBy(d, 0, -4);\r

  \  return d;\r

  }"
my_poly_center: "function my_poly_center(f) {\r

  \  let pts = points_from_feature(f);\r

  \  let c2 = get_polygon_centroid(pts);\r

  \  if (isNaN(c2.x) || isNaN(c2.y)) return null;\r

  \  center = [c2.y, c2.x];\r

  \  return center;\r

  }"
mYaml: "function mYaml(d, js) {\r

  \  d.innerHTML = '<pre>' + jsonToYaml(js) + '</pre>';\r

  \  return d;\r

  }"
myFunction: "function myFunction() {\r

  \  console.log('onresize!!!');\r

  }"
myMinimax: "function myMinimax(node, depth, alpha, beta, maxDepth, maxim) {\r

  \  CCC += 1;\r

  \  if (depth >= maxDepth) return 1;\r

  \  let ec = F_END(node, depth); if (ec.reached) return ec.val;\r

  \  depth += 1;\r

  \  var move, result;\r

  \  var availableMoves = F_MOVES(node);\r

  \  let player = maxim ? MAXIMIZER : MINIMIZER;\r

  \  for (var i = 0; i < availableMoves.length; i++) {\r

  \    move = availableMoves[i];\r

  \    F_APPLYMOVE(node, move, player);\r

  \    result = myMinimax(node, depth, alpha, beta, maxDepth, !maxim);\r

  \    F_UNDOMOVE(node, move, player);\r

  \    if (maxim) {\r

  \      if (result > alpha) {\r

  \        alpha = result;\r

  \        if (depth == 1) SelectedMove = move;\r

  \      } else if (alpha >= beta) { return alpha; }\r

  \    } else {\r

  \      if (result < beta) {\r

  \        beta = result;\r

  \        if (depth == 1) SelectedMove = move;\r

  \      } else if (beta <= alpha) { return beta; }\r

  \    }\r

  \  }\r

  \  return maxim ? alpha : beta;\r

  }"
myOnclickCodeInSidebar: "function myOnclickCodeInSidebar(ev) {\r

  \  let key = isString(ev) ? ev : ev.target.innerHTML;\r

  \  let text = CODE.justcode[key];\r

  \  AU.ta.value = text;\r

  \  let download = false;\r

  \  if (download) downloadAsText(text, 'hallo', 'js');\r

  \  return text;\r

  }"
myPresent: "function myPresent(dArea, items, options) {\r

  \  let showLabels = options.showLabels;\r

  \  let w = options.w * valf(options.fw, .9);\r

  \  let h = options.h * valf(options.fh, .7);\r

  \  let wi, hi, rows, cols;\r

  \  if (isdef(options.rows) || isdef(options.cols)) {\r

  \    [wi, hi, rows, cols] = calcSizeAbWo(items.length, options.rows,
  options.cols, w, h, options.wimax, options.himax);\r

  \  } else[wi, hi, rows, cols] = calcRowsColsSizeAbWo(items.length, w, h,
  showLabels, options.wimax, options.himax);\r

  \  let gap = wi * .1; if (cols > 1) wi -= gap; if (rows > 1) hi -= gap;\r

  \  let fzPic = options.fzPic = getStandardFzPic(wi, hi, showLabels);\r

  \  let fz = getStandardFz(wi, hi, options.showPic, options.showLabels,
  options.wLongest);\r

  \  options.szPic = { w: wi, h: hi };\r

  \  if (nundef(options.ifs)) options.ifs = {};\r

  \  let outerStyles = {\r

  \    w: showLabels ? wi : 'auto', h: hi, rounding: 6,\r

  \    bg: valf(options.ifs.bg, 'random'), fg: 'contrast', display:
  'inline-flex', 'flex-direction': 'column',\r

  \    'justify-content': 'center', 'align-items': 'center', 'vertical-align':
  'top',\r

  \  };\r

  \  let picStyles = { fz: fzPic };\r

  \  let labelStyles = { fz: fz };\r

  \  for (const item of items) {\r

  \    for (const k in options.ifs) if (isdef(item[k])) outerStyles[k] =
  item[k];\r

  \    if (isdef(item.textShadowColor)) {\r

  \      let sShade = '0 0 0 ' + item.textShadowColor;\r

  \      if (options.showPic) {\r

  \        picStyles['text-shadow'] = sShade;\r

  \        picStyles.fg = colorFrom('black', options.contrast); //'#00000080'
  '#00000030' \r

  \      } else {\r

  \        labelStyles['text-shadow'] = sShade;\r

  \        labelStyles.fg = colorFrom('black', options.contrast);
  //'#00000080' '#00000030' \r

  \      }\r

  \    }\r

  \    let dOuter = mCreate('div', outerStyles, item.id);\r

  \    dOuter.onclick = options.handler;\r

  \    picStyles.family = item.info.family;\r

  \    let dLabel, dPic;\r

  \    if (options.showPic) { dPic = mDiv(dOuter, picStyles); dPic.innerHTML =
  item.info.text; }\r

  \    if (showLabels) dLabel = mText(item.label, dOuter, labelStyles);\r

  \    if (options.showRepeat) addRepeatInfo(dOuter, item.iRepeat, wi);\r

  \    iAdd(item, { options: options, div: dOuter, dLabel: dLabel, dPic: dPic
  });\r

  \  }\r

  \  mStyleX(dArea, { display: 'inline-grid', gap: gap,
  'grid-template-columns': `repeat(${cols},${wi}px)` });\r

  \  items.map(x => mAppend(dArea, iDiv(x)));\r

  \  return getRect(dArea);\r

  }"
mySearch: "function mySearch(kws) {\r

  \  console.log(`'${kws}'`); return;\r

  \  let arr = CODE.codelist; \r

  \  let patt = isList(kws) ? kws.join('|') : replaceAll(kws, ' ', '|');\r

  \  let regex = new RegExp(`\\\\b${patt}\\\\b`);\r

  \  console.log('patt',patt)\r

  \  let res = arr.filter(x => regex.test(x.value)); \r

  \  let keys = res.map(x => x.key);\r

  \  console.log('keys', keys);\r

  \  show_sidebar(keys, myOnclickCodeInSidebar);\r

  \  return;\r

  \  let di = CODE.justcode;\r

  \  let dilist = dict2list(di, 'key');\r

  \  let records = dilist.filter(x => words.some(w => x.key.match(new
  RegExp(`\\\\${w}\\\\b`, 'i'))));\r

  \  console.log('records', records)\r

  \  show_sidebar(records.map(x => x.key), myOnclickCodeInSidebar);\r

  \  return records;\r

  }"
myShowLabels: "function myShowLabels(onClickPictureHandler, ifs = {}, options =
  {}, keys, labels) {\r

  \  options.wimax = 200; options.himax = 50;\r

  \  options.w = window.innerWidth - 180; options.h = 50; options.fz = 22;\r

  \  options.showPic = false; options.showLabels = true;\r

  \  return showPictures(dTable, onClickPictureHandler, ifs, options, keys,
  labels);\r

  }"
myShowPics: "function myShowPics(handler, ifs = {}, options = {}, keys, labels)
  {\r

  \  options.showPic = true;\r

  \  options.wimax = options.himax = 200;\r

  \  options.w = window.innerWidth - 180; options.h = window.innerHeight -
  220;\r

  \  Pictures = showPictures(dTable, handler, ifs, options, keys, labels);\r

  }"
mZone: "function mZone(dParent, styles, pos) {\r

  \  let d = mDiv(dParent);\r

  \  if (isdef(styles)) mStyleX(d, styles);\r

  \  if (isdef(pos)) {\r

  \    mIfNotRelative(dParent);\r

  \    mPos(d, pos.x, pos.y);\r

  \  }\r

  \  return d;\r

  }"
name2id: function name2id(name) { return 'd_' + name.split(' ').join('_'); }
ncdf: "function ncdf(x, mean = 100, std = 15) {\r

  \  var x = (x - mean) / std\r

  \  var t = 1 / (1 + .2315419 * Math.abs(x))\r

  \  var d = .3989423 * Math.exp(-x * x / 2)\r

  \  var prob = d * t * (.3193815 + t * (-.3565638 + t * (1.781478 + t *
  (-1.821256 + t * 1.330274))))\r

  \  if (x > 0) prob = 1 - prob\r

  \  return prob\r

  }"
neighborhood: "function neighborhood(items, byrc) {\r

  \  let adjList = [];\r

  \  let di = {};\r

  \  for (const info of items) {\r

  \    if (info.type != 'field') continue;\r

  \    let [r, c] = [info.row, info.col];\r

  \    info.nodeItems = [\r

  \      lookup(byrc, [r - 2, c]),\r

  \      lookup(byrc, [r - 1, c + 1]),\r

  \      lookup(byrc, [r + 1, c + 1]),\r

  \      lookup(byrc, [r + 2, c]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \      lookup(byrc, [r - 1, c - 1]),\r

  \    ];\r

  \    info.nodes = info.nodeItems.map(x => isdef(x) ? x.id : null);\r

  \    delete info.nodeItems;\r

  \    for (let i = 0; i < 6; i++) {\r

  \      let n1 = info.nodes[i];\r

  \      if (n1 == null) continue;\r

  \      let n2 = info.nodes[(i + 1 % 6)];\r

  \      if (n2 == null) continue;\r

  \      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;\r

  \      lookupSet(di, [n1, n2], true);\r

  \      adjList.push([n1, n2]);\r

  \    }\r

  \    info.neiItems = [\r

  \      lookup(byrc, [r - 3, c + 1]),\r

  \      lookup(byrc, [r, c + 2]),\r

  \      lookup(byrc, [r + 3, c + 1]),\r

  \      lookup(byrc, [r + 3, c - 1]),\r

  \      lookup(byrc, [r, c - 2]),\r

  \      lookup(byrc, [r - 3, c - 1]),\r

  \    ];\r

  \    info.nei = info.neiItems.map(x => isdef(x) ? x.id : null);\r

  \    delete info.neiItems;\r

  \  }\r

  }"
neighborhood1: "function neighborhood1(items, byrc) {\r

  \  let adjList = [];\r

  \  let di = {};\r

  \  for (const info of items) {\r

  \    let [r, c] = [info.row, info.col];\r

  \    info.nodes = [\r

  \      lookup(byrc, [r - 2, c]),\r

  \      lookup(byrc, [r - 1, c + 1]),\r

  \      lookup(byrc, [r + 1, c + 1]),\r

  \      lookup(byrc, [r + 2, c]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \    ];\r

  \    for (let i = 0; i < 6; i++) {\r

  \      let n1 = info.nodes[i];\r

  \      if (n1 == null) continue;\r

  \      let n2 = info.nodes[(i + 1 % 6)];\r

  \      if (n2 == null) continue;\r

  \      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;\r

  \      lookupSet(di, [n1, n2], true);\r

  \      adjList.push([n1, n2]);\r

  \    }\r

  \    info.neighbors = [\r

  \      lookup(byrc, [r - 3, c + 1]),\r

  \      lookup(byrc, [r, c + 2]),\r

  \      lookup(byrc, [r + 3, c + 1]),\r

  \      lookup(byrc, [r + 3, c - 1]),\r

  \      lookup(byrc, [r, c - 2]),\r

  \      lookup(byrc, [r - 3, c - 1]),\r

  \    ];\r

  \  }\r

  }"
neighborhood2: "function neighborhood2(items, byrc) {\r

  \  let adjList = [];\r

  \  let di = {};\r

  \  for (const info of items) {\r

  \    let [r, c] = [info.row, info.col];\r

  \    info.nodeItems = [\r

  \      lookup(byrc, [r - 2, c]),\r

  \      lookup(byrc, [r - 1, c + 1]),\r

  \      lookup(byrc, [r + 1, c + 1]),\r

  \      lookup(byrc, [r + 2, c]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \    ];\r

  \    info.nodes = info.nodeItems.map(x => x ? x.id : null);\r

  \    delete info.nodeItems;\r

  \    for (let i = 0; i < 6; i++) {\r

  \      let n1 = info.nodes[i];\r

  \      if (n1 == null) continue;\r

  \      let n2 = info.nodes[(i + 1 % 6)];\r

  \      if (n2 == null) continue;\r

  \      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;\r

  \      lookupSet(di, [n1, n2], true);\r

  \      adjList.push([n1, n2]);\r

  \    }\r

  \    info.neighbors = [\r

  \      lookup(byrc, [r - 3, c + 1]),\r

  \      lookup(byrc, [r, c + 2]),\r

  \      lookup(byrc, [r + 3, c + 1]),\r

  \      lookup(byrc, [r + 3, c - 1]),\r

  \      lookup(byrc, [r, c - 2]),\r

  \      lookup(byrc, [r - 3, c - 1]),\r

  \    ];\r

  \  }\r

  }"
nerd_custom_function: "function nerd_custom_function() {\r

  \  var core = nerdamer.getCore();\r

  \  var _ = core.PARSER;\r

  \  core.Math2.custom = function (a, b) {\r

  \    return (2 * a + b) / a;\r

  \  };\r

  \  _.functions.custom = [, 2];\r

  \  var x = nerdamer('custom(2, 6)').evaluate();\r

  \  console.log(x.toString());\r

  \  var y = nerdamer('custom(a, b)').evaluate();\r

  \  console.log(y.toString());\r

  }"
netHandSize: "function netHandSize(nmax, hCard, wCard, ovPercent = 20, splay =
  'right') {\r

  \  let isHorizontal = splay == 'right' || splay == 'left';\r

  \  if (nundef(hCard)) hCard = 110;\r

  \  if (nundef(wCard)) wCard = Math.round(hCard * .7);\r

  \  return isHorizontal ? { w: wCard + (nmax - 1) * wCard * ovPercent / 100,
  h: hCard } : { w: wCard, h: hCard + (nmax - 1) * hCard * ovPercent / 100 };\r

  }"
new_cards_animation: "function new_cards_animation(n = 2) {\r

  \  let [stage, A, fen, plorder, uplayer, deck] = [Z.stage, Z.A, Z.fen,
  Z.plorder, Z.uplayer, Z.deck];\r

  \  let pl = fen.players[uplayer];\r

  \  if (stage == 'card_selection' && !isEmpty(pl.newcards)) {\r

  \    let anim_elems = [];\r

  \    for (const key of pl.newcards) {\r

  \      let ui = lastCond(UI.players[uplayer].hand.items, x => x.key ==
  key);\r

  \      if (nundef(ui)) { pl.newcards = []; return; }\r

  \      ui = iDiv(ui);\r

  \      anim_elems.push(ui);\r

  \    }\r

  \    delete pl.newcards;\r

  \    anim_elems.map(x => mPulse(x, n * 1000));\r

  \  }\r

  }"
new_deal: "function new_deal(fen) {\r

  \  let deck = fen.deck = create_fen_deck('n', fen.num_decks);\r

  \  shuffle(deck);\r

  \  for (const plname in fen.players) {\r

  \    let pl = fen.players[plname];\r

  \    let handsize = pl.handsize;\r

  \    pl.hand = deck_deal(deck, handsize);\r

  \  }\r

  }"
newColors: "function newColors() {\r

  \  color_areas(25);\r

  \  renderVisualStructures(2);\r

  }"
NewGame: "function NewGame(fen) {\r

  \  if (nundef(fen)) fen = START_FEN;\r

  \  ParseFen(fen);\r

  \  PrintBoard();\r

  \  SetInitialBoardPieces();\r

  \  GameController.PlayerSide = brd_side;\r

  \  CheckAndSet();\r

  \  GameController.GameSaved = BOOL.FALSE;\r

  \  if (SideChar[brd_side] == 'b') {\r

  \    GameController.PlayerSide = brd_side ^ 1;\r

  \    PreSearch();\r

  \  }\r

  }"
NewGameAjax: "function NewGameAjax() {\r\n}"
newGameAjax: "function newGameAjax() {\r

  \  console.log('new Game Ajax');\r

  \  $.ajax({\r

  \    url: \"insertNewGame.php\",\r

  \    cache: false\r

  \  }).done(function (html) {\r

  \    console.log('result:' + html);\r

  \  });\r

  }"
newItemSelection: "function newItemSelection(item, items, onSelectSelected =
  null) {\r

  \  console.log('===>', item, items)\r

  \  let selectedItem = firstCond(items, x => x.isSelected);\r

  \  if (selectedItem && selectedItem != item)
  toggleItemSelection(selectedItem);\r

  \  else if (onSelectSelected && selectedItem) { onSelectSelected(item); }\r

  \  toggleItemSelection(item);\r

  }"
newtree: "function newtree() {\r

  \  tree = []; leaves = []; numlayers = 0;\r

  }"
next_task: "function next_task(otree, r) {\r

  \  let i = otree.itask += 1;\r

  \  let n_todo = otree.todo.length;\r

  \  if (i >= n_todo) {\r

  \    move_todo_to_history(otree);\r

  \    start_new_todo_list(otree, r);\r

  \  }\r

  }"
nextTestOfSeries: "async function nextTestOfSeries(downloadRequested = true) {\r

  \  if (isLastTestOfSeries()) { console.log('...press reset!'); return; }\r

  \  await onClickClearTable();\r

  \  let tests = ALLTESTS[iTESTSERIES];\r

  \  let solutions = ALLTESTSOLUTIONS[iTESTSERIES];\r

  \  let context = tests[iTEST];\r

  \  mBy('message').innerHTML = '(test) ' + iTESTSERIES + ' / ' + iTEST;\r

  \  await rParse('test', context);\r

  \  let uiNodeSizes = {};\r

  \  recCollectSizeInfo(R.uiNodes[R.tree.uid], R, uiNodeSizes);\r

  \  if (isdef(solutions) && isdef(solutions[iTEST])) {\r

  \    let changes = propDiffSimple(uiNodeSizes, solutions[iTEST]);\r

  \    if (changes.hasChanged) {\r

  \      console.log('FAIL!!! ', iTESTSERIES + '.' + iTEST, 'changes: ',
  changes);\r

  \    } else {\r

  \      console.log('verifying test case', iTESTSERIES + '.' + iTEST,
  'correct!');\r

  \    }\r

  \  } else {\r

  \  }\r

  \  let testDict = ALLTESTSOLUTIONS[iTESTSERIES];\r

  \  if (nundef(ALLTESTSOLUTIONS[iTESTSERIES])) { testDict =
  ALLTESTSOLUTIONS[iTESTSERIES] = {}; }\r

  \  testDict[iTEST] = uiNodeSizes;\r

  \  iTEST += 1;\r

  \  if (isLastTestOfSeries() && !IS_START && downloadRequested) {\r

  \    if (isdef(testDict)) downloadFile(testDict, 'testDict');\r

  \    console.log('...press reset!');\r

  \  } else if (IS_START) {\r

  \    IS_START = false;\r

  \  }\r

  }"
niceColor: "function niceColor(rgb) {\r

  \  let hsl = rgb2hsl(rgb);\r

  \  hsl[0] = (hsl[0] + 0.5) % 1;\r

  \  hsl[1] = (hsl[1] + 0.5) % 1;\r

  \  hsl[2] = (hsl[2] + 0.5) % 1;\r

  \  return 'hsl(' + hsl[0] * 360 + ',' + hsl[1] * 100 + '%,' + hsl[2] * 100 +
  '%)';\r

  }"
noc0_randomwalkers: "function noc0_randomwalkers() {\r

  \  let [c1, c2] = [G.items[0], G.items[1]];\r

  \  c1.add({ update: move_random, w: 2, h: 2 });\r

  \  c2.add({ label: 'tom', draw: draw_label, update: move_random });\r

  \  c2.add(new CItemWalker('tim'));\r

  }"
noc1_randomwalkers: "function noc1_randomwalkers() {\r

  \  let [c1, c2] = [G.items[0], G.items[1]];\r

  \  let probs = [{ val: { x: -1, y: 0 }, p: 1 }, { val: { x: 1, y: 0 }, p: 2
  }, { val: { x: 0, y: -1 }, p: 3 }, { val: { x: 0, y: 1 }, p: 3 }];\r

  \  c1.add({ probs: probs, update: move_probs, w: 2, h: 2 });\r

  \  c2.add({ label: 'tom', draw: draw_label, update: move_random });\r

  }"
noc2_explicit_distribution: "function noc2_explicit_distribution() {\r

  \  let [c1, c2] = [G.items[0], G.items[1]];\r

  \  const sampler = new WeightedSampler([{ x: 1 }, { x: -1 }, { y: 1 }, { y:
  -1 }], [1, 2, 1, 2]);\r

  \  let randomArray = Array.apply(null, Array(100000)).map(() =>
  sampler.get());\r

  \  let randomArray2 = Array.apply(null, Array(100000)).map(() =>
  sampler.get());\r

  \  console.log(randomArray);\r

  }"
noc3_gaussian: "function noc3_gaussian() {\r

  \  let canvas = arrLast(G.items);\r

  \  let [mean, stdev] = [0, 1]\r

  \  let f = x => gaussian1(x, mean, stdev);\r

  \  let y = f(0);\r

  \  console.log('y', y);\r

  \  let amp = .9 * (-canvas.miny) / (40 * y);\r

  \  f = x => gaussian1(x, mean, stdev, amp);\r

  \  canvas.draw_axes();\r

  \  canvas.plot(f, 'orange', 1);\r

  \  let x = 40 * search_end_point(f, 0, canvas.maxx, .1, .01);\r

  \  console.log('point x', x, canvas.minx, canvas.maxx);\r

  \  y = -40 * f(x / 40)\r

  \  console.log('point y', x, 0, canvas.maxy);\r

  \  console.log('scale', canvas.scale)\r

  \  let xreal = x / 40;\r

  \  let yreal = f(xreal) / (40);\r

  \  x = 0;\r

  \  for (let i = canvas.minx; i < canvas.maxx; i += canvas.scale) {\r

  \    let x1 = Math.round(convert_to_range(x, -4, 4, 50, 150));\r

  \    let x2 = Math.round(convert_to_range(-x, -4, 4, 50, 150));\r

  \    canvas.pp(x * 40, 0, `${x1}`);\r

  \    canvas.pp(-x * 40, 0, `${x2}`); x += 2;\r

  \  }\r

  }"
noc4_gaussian: "function noc4_gaussian() {\r

  \  let canvas = arrLast(G.items);\r

  \  draw_gaussian(canvas, 100, 15, 'lime', 1, 'silver', 'IQ');\r

  \  return;\r

  \  canvas.draw_axes();\r

  \  canvas.scale = 40; console.log('canvas', canvas)\r

  \  let f = gaussian_amp(canvas, 1)\r

  \  canvas.plot(f, 'orange', 1);\r

  \  draw_ticks_gaussian(canvas, f, 100, 15, 'silver');\r

  }"
noc5_draw_text: "function noc5_draw_text() {\r

  \  let canvas = arrLast(G.items);\r

  \  let d = mInsert(dTable, mCreate('div'));\r

  \  mText('hallo', d, { fz: 40, family: 'algerian' });\r

  \  draw_text(canvas, 'hallo', { family: 'algerian', fg: 'white', pos: 'tr'
  });\r

  }"
noc6_simple_gaussian: "function noc6_simple_gaussian() {\r

  \  let canvas = arrFirst(G.items);\r

  \  simple_gaussian(canvas);\r

  }"
normalcdf: "function normalcdf(x, mean, stdev) {\r

  \  x = (x - mean) / stdev;\r

  \  var a1 = 1 / (1 + .2316419 * Math.abs(x));\r

  \  var a2 = .3989423 * Math.exp(-x * x / 2);\r

  \  var p = a2 * a1 * (.3193815 + a1 * (-.3565638 + a1 * (1.781478 + a1 *
  (-1.821256 + a1 * 1.330274))));\r

  \  if (x > 0) {\r

  \    p = 1 - p\r

  \  }\r

  \  return p;\r

  }"
normalDistribution: "function normalDistribution(mu, sigma) {\r

  \  this.mu = eval(mu);\r

  \  this.sigma = eval(sigma);\r

  \  this.mean = mean;\r

  \  this.variance = variance;\r

  \  this.sd = sd;\r

  \  this.pdf = pdf;\r

  \  this.cdf = cdf;\r

  \  this.percentile = percentile;\r

  \  this.printMoments = printMoments;\r

  \  this.printPdf = printPdf;\r

  \  function mean() {\r

  \    return jStat.normal.mean(this.mu, this.sigma);\r

  \  }\r

  \  function variance() {\r

  \    return jStat.normal.variance(this.mu, this.sigma);\r

  \  }\r

  \  function sd() {\r

  \    return Math.sqrt(this.variance());\r

  \  }\r

  \  function pdf(x) {\r

  \    if (!isNaN(eval(x))) {\r

  \      return jStat.normal.pdf(x, this.mu, this.sigma);\r

  \    }\r

  \    return '';\r

  \  }\r

  \  function cdf(x) {\r

  \    if (!isNaN(eval(x))) {\r

  \      return jStat.normal.cdf(x, this.mu, this.sigma);\r

  \    }\r

  \    return '';\r

  \  }\r

  \  function percentile(p) {\r

  \    if (!isNaN(eval(p))) {\r

  \      return jStat.normal.inv(p, this.mu, this.sigma);\r

  \    }\r

  \    return '';\r

  \  }\r

  \  function printMoments() {\r

  \    var txt = \"\";\r

  \    txt += '$ \\\\mu = E(X) = ' + roundNumber(this.mean(), 3) +
  '\\\\hspace{0.5cm}$';\r

  \    txt += '$ \\\\sigma = SD(X) = ' + roundNumber(this.sd(), 3) +
  '\\\\hspace{0.5cm}$';\r

  \    txt += '$ \\\\sigma^2 = Var(X) = ' + roundNumber(this.variance(), 3) +
  '$';\r

  \    document.getElementById(\"moments\").innerHTML = txt;\r

  \    MathJax.Hub.Queue([\"Typeset\", MathJax.Hub, \"moments\"]);\r

  \  }\r

  \  function printPdf(x, direction) {\r

  \    var data = new google.visualization.DataTable();\r

  \    data.addColumn('number', 'x');\r

  \    data.addColumn('number', 'f(x)');\r

  \    data.addColumn('number', 'f(x)');\r

  \    data.addColumn('number', 'f(x)');\r

  \    x = eval(x);\r

  \    var lo = this.mean() - 4 * this.sd();\r

  \    var hi = this.mean() + 4 * this.sd();\r

  \    data.addRows(401);\r

  \    var i, grd;\r

  \    for (i = 0; i < 401; i++) {\r

  \      grd = lo + (hi - lo) * i / 400;\r

  \      data.setCell(i, 0, grd);\r

  \      data.setCell(i, 1, this.pdf(grd));\r

  \      if (!isNaN(x)) {\r

  \        if (grd < x) {\r

  \          if (direction == 'less')\r

  \            data.setCell(i, 2, this.pdf(grd));\r

  \        }\r

  \        else {\r

  \          if (direction == 'greater')\r

  \            data.setCell(i, 2, this.pdf(grd));\r

  \        }\r

  \        if (direction == 'twotail') {\r

  \          if (grd < -Math.abs(x)) data.setCell(i, 2, this.pdf(grd));\r

  \          if (grd > Math.abs(x)) data.setCell(i, 2, this.pdf(grd));\r

  \        }\r

  \        if (direction == 'twotailinside') {\r

  \          if (grd > -Math.abs(x) && grd < Math.abs(x)) data.setCell(i, 2,
  this.pdf(grd));\r

  \        }\r

  \        var xdelta = (hi - lo) / 140;\r

  \        if (direction == 'less' || direction == 'greater') {\r

  \          if (grd > x - xdelta && grd < x + xdelta) {\r

  \            data.setCell(i, 3, this.pdf(grd));\r

  \          }\r

  \        }\r

  \        if (direction == 'twotail') {\r

  \          if (grd > -Math.abs(x) - xdelta && grd < -Math.abs(x) + xdelta)\r

  \            data.setCell(i, 3, this.pdf(grd));\r

  \          if (grd > Math.abs(x) - xdelta && grd < Math.abs(x) + xdelta)\r

  \            data.setCell(i, 3, this.pdf(grd));\r

  \        }\r

  \        if (direction == 'twotailinside') {\r

  \          if (grd > -Math.abs(x) - xdelta && grd < -Math.abs(x) + xdelta)\r

  \            data.setCell(i, 3, this.pdf(grd));\r

  \          if (grd > Math.abs(x) - xdelta && grd < Math.abs(x) + xdelta)\r

  \            data.setCell(i, 3, this.pdf(grd));\r

  \        }\r

  \      }\r

  \    }\r

  \    var options = {\r

  \      backgroundColor: 'transparent',\r

  \      areaOpacity: 0,\r

  \      hAxis: {\r

  \        title: 'x', titleTextStyle: { color: '#000000' },\r

  \        min: lo,\r

  \        max: hi,\r

  \        gridlines: { color: 'transparent', count: 7 },\r

  \        baseline: lo\r

  \      },\r

  \      vAxis: {\r

  \        title: 'f(x)', titleTextStyle: { color: '#000000' },\r

  \        gridlines: { count: 5, color: 'transparent' },\r

  \        viewWindow: { min: 0 },\r

  \        viewWindowMode: 'explicit'\r

  \      },\r

  \      legend: { position: 'none' },\r

  \      series: {\r

  \        0: { color: 'black', areaOpacity: 0, lineWidth: 1.2 },\r

  \        1: { color: '#e7b0b0', areaOpacity: 1, lineWidth: 0 },\r

  \        2: { color: '#83aaf1', areaOpacity: 1, lineWidth: 0 },\r

  \        3: { color: '#E8E8E8', areaOpacity: 1, lineWidth: 0 }\r

  \      },\r

  \      tooltip: { trigger: 'none' }\r

  \    };\r

  \    var chart = new
  google.visualization.AreaChart(document.getElementById('pdfPlot'));\r

  \    chart.draw(data, options);\r

  \  }\r

  }"
normalize: "function normalize(text, language) {\r

  \  text = text.toLowerCase();\r

  \  if (language == 'D') {\r

  \    text = convertUmlaute(text);\r

  \  }\r

  \  return text;\r

  }"
normalize_bid: "function normalize_bid(bid) {\r

  \  let need_to_sort = bid[0] == '_' && bid[2] != '_'\r

  \    || bid[2] != '_' && bid[2] > bid[0]\r

  \    || bid[2] == bid[0] && is_higher_ranked_name(bid[3], bid[1]);\r

  \  if (need_to_sort) {\r

  \    let [h0, h1] = [bid[0], bid[1]];\r

  \    [bid[0], bid[1]] = [bid[2], bid[3]];\r

  \    [bid[2], bid[3]] = [h0, h1];\r

  \  }\r

  \  return bid;\r

  }"
normalize_string: "function normalize_string(s, sep = '_') {\r

  \  s = s.toLowerCase().trim();\r

  \  let res = '';\r

  \  for (let i = 0; i < s.length; i++) { if (isAlphaNum(s[i])) res += s[i];
  else if (s[i] == ' ') res += sep; }\r

  \  return res;\r

  }"
normalizeDict: "function normalizeDict(t) {\r

  \  let tNew = {};\r

  \  let keys = Object.keys(t);\r

  \  let minKey = Math.min(...keys.map(x => firstNumber(x)));\r

  \  for (const k in t) {\r

  \    tNew['_' + (firstNumber(k) - minKey)] = jsCopy(t[k]);\r

  \  }\r

  \  return { num: minKey, result: sortKeys(tNew) };\r

  }"
normalizeNode: "function normalizeNode(o, num) {\r

  \  if (isdef(o.uid)) normalizeSimpleUidProp(o, 'uid', num);\r

  \  if (isdef(o.children)) { o.children = o.children.map(x => normalizeVal(x,
  num)); }\r

  \  if (isdef(o.uidParent)) normalizeSimpleUidProp(o, 'uidParent', num);\r

  \  if (isdef(o._NODE)) normalizeSpecKeyProp(o, '_NODE', num);\r

  \  if (isdef(o.here)) normalizeSpecKeyProp(o, 'here', num);\r

  }"
normalizeRTree: function normalizeRTree(R) { return normalizeTree(R.rNodes, R); }
normalizeSimpleUidProp: "function normalizeSimpleUidProp(o, prop, num) {\r

  \  o[prop] = normalizeVal(o[prop], num);\r

  }"
normalizeSpec: "function normalizeSpec(sp) {\r

  \  let spNew = {};\r

  \  for (const k in sp) {\r

  \    spNew[k] = recNormalize(sp[k], sp);\r

  \  }\r

  \  return spNew;\r

  }"
normalizeSpecKeyProp: "function normalizeSpecKeyProp(o, prop, num) {\r

  \  let node1 = o[prop];\r

  \  if (isString(node1) && node1.includes('_')) {\r

  \    o[prop] = correctNumbersInString(node1, num);\r

  \  } else if (isList(node1)) {\r

  \    let newlist = [];\r

  \    for (const el of node1) {\r

  \      if (el.includes('_')) {\r

  \        newlist.push(correctNumbersInString(el, num));\r

  \      }\r

  \    }\r

  \    console.log('SOLLTE NIEEEEEEEEEEEEEEEEEEE VORKOMMEN!!!!!!');\r

  \    o[prop] = newlist;\r

  \  }\r

  }"
normalizeToList: "function normalizeToList(n, prop) {\r

  \  let val = n[prop];\r

  \  if (isdef(val) && !isList(val)) n[prop] = [val];\r

  }"
normalizeTree: "function normalizeTree(t, r) {\r

  \  let tNew = jsCopy(t);\r

  \  let first = r.tree.uid;\r

  \  let num = firstNumber(first);\r

  \  safeRecurse(tNew, normalizeNode, num, false);\r

  \  let newRTree = {};\r

  \  for (const k in tNew) {\r

  \    let kNew = normalizeVal(k, num);\r

  \    newRTree[kNew] = tNew[k];\r

  \  }\r

  \  tNew = newRTree;\r

  \  return sortKeys(tNew);\r

  }"
normalizeVal: "function normalizeVal(val, num) {\r

  \  let nval = firstNumber(val);\r

  \  nval -= num;\r

  \  return '_' + nval;\r

  }"
notImplemented: "function notImplemented(msg = '!') {\r

  \  let fname = getFunctionsNameThatCalledThisFunction();\r

  \  console.log('NOT IMPLEMENTED:', fname, msg);\r

  }"
notMyTurn: "function notMyTurn() {\r

  \  enableButton('c_b_PollStatus');\r

  }"
nRandomNumbers: "function nRandomNumbers(n, from, to, step) {\r

  \  let arr = range(from, to, step);\r

  \  return choose(arr, n);\r

  }"
Number: "function Number(div, board, n) {\r

  \  var self = this;\r

  \  this.div = div;\r

  \  this.board = board;\r

  \  this.n = n;\r

  }"
numberSequenceCorrectionAnimation: "function
  numberSequenceCorrectionAnimation(stringFunc) {\r

  \  let wrong = getWrongWords();\r

  \  if (nundef(TOList)) TOList = {};\r

  \  let msg = stringFunc();\r

  \  showFleetingMessage(msg, 0, { fz: 32 });\r

  \  Selected.feedbackUI = wrong.map(x => iDiv(x));\r

  \  failPictureGoal();\r

  \  let t1 = setTimeout(removeMarkers, 1000);\r

  \  let t2 = setTimeout(() => wrong.map(x => { correctWordInput(x);
  animate(iDiv(x), 'komisch', 1300); }), 1000);\r

  \  t4 = setTimeout(() => { if (G.spokenFeedback) sayRandomVoice(msg); },
  500);\r

  \  TOList.numseq = [t1, t2, t4];\r

  \  return 2800;\r

  }"
nundef: function nundef(x) { return x === null || x === undefined; }
o_tableDiv_bounds: "function o_tableDiv_bounds(divParent, o) {\r

  \  let html = treee(o);\r

  \  let dNew = document.createElement('div');\r

  \  dNew.style.float = 'left';\r

  \  dNew.innerHTML = html;\r

  \  let table = dNew.firstChild;\r

  \  divParent.appendChild(dNew);\r

  \  return [dNew, table, dNew.offsetWidth, dNew.offsetHeight];\r

  }"
o2yaml: function o2yaml(o) { return '<pre>' + jsonToYaml(o) + '</pre>'; }
o2yamlHtml: "function o2yamlHtml(el, o) {\r

  \  el.innerHTML = '<pre>' + jsonToYaml(o) + '</pre>';\r

  }"
object2string: "function object2string(o, props = [], except_props = []) {\r

  \  let s = '';\r

  \  if (nundef(o)) return s;\r

  \  if (isString(o)) return o;\r

  \  let keys = Object.keys(o).sort();\r

  \  for (const k of keys) {\r

  \    if (!isEmpty(props) && props.includes(k) || !except_props.includes(k))
  {\r

  \      let val = isList(o[k]) ? o[k].join(',') : isDict(o[k]) ?
  object2string(o[k].props, except_props) : o[k];\r

  \      let key_part = isEmpty(s) ? '' : `, ${k}:`;\r

  \      s += val;\r

  \    }\r

  \  }\r

  \  return s;\r

  }"
odict2olist: "function odict2olist(d, keyName = 'id') {\r

  \  let res = [];\r

  \  for (const key in d) {\r

  \    let o = jsCopy(d[key]);\r

  \    o[keyName] = key;\r

  \    res.push(o);\r

  \  }\r

  \  return res;\r

  }"
old_ensure_buttons_visible_ferro: "function old_ensure_buttons_visible_ferro()
  {\r

  \  if (isdef(mBy('dbPlayer'))) return;\r

  \  let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A,
  Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  if (fen.players[uplayer].hand.length <= 1) return;\r

  \  let d = iDiv(UI.players[uplayer]);\r

  \  mStyle(d, { position: 'relative' })\r

  \  let dbPlayer = mDiv(d, { position: 'absolute', bottom: 2, left: 100,
  height: 25 }, 'dbPlayer');\r

  \  let styles = { rounding: 6, bg: 'silver', fg: 'black', border: 0, maleft:
  10 };\r

  \  let bByRank = mButton('by rank', onclick_by_rank_ferro, dbPlayer, styles,
  'enabled');\r

  \  let bBySuit = mButton('by suit', onclick_by_suit_ferro, dbPlayer, styles,
  'enabled');\r

  \  if (Z.game == 'ferro') {\r

  \    let b = mButton('clear selection', onclick_clear_selection_ferro,
  dbPlayer, styles, 'enabled', 'bClearSelection');\r

  \    if (isEmpty(A.selected)) hide(b);\r

  \  }\r

  }"
old_mButtonX: "function old_mButtonX(dParent, pos = 'tr', handler = null,
  defaultBehavior = 'hide', sz = 40) {\r

  \  dParent = toElem(dParent);\r

  \  let styles = { cursor: 'pointer', w: sz, h: sz };\r

  \  let d2 = mDiv(dParent, styles, null, `<svg width='100%' height='100%'
  ><use xlink:href=\"#Times\" /></svg>`);\r

  \  mClass(d2, 'svgbtnX');\r

  \  d2.onclick = isdef(handler) ? handler : defaultBehavior == 'hide' ? () =>
  hide(dParent) : () => dParent.remove();\r

  \  mPlace(d2, pos, 10);\r

  \  return d2;\r

  }"
old_show_settings: "function old_show_settings(dParent) {\r

  \  let [options, fen, uplayer] = [Z.options, Z.fen, Z.uplayer];\r

  \  clearElement(dParent);\r

  \  mFlex(dParent);\r

  \  let playermode = get_playmode(uplayer);\r

  \  let game_mode = Z.mode;\r

  \  let dplaymode = mDiv(dParent, { fg: 'blue' }, null, playermode);\r

  \  let dgamemode = mDiv(dParent, { fg: 'red' }, null, Z.mode);\r

  \  let d = miPic('gear', dParent, { fz: 20, padding: 6, h: 40, box: true,
  matop: 2, rounding: '50%', cursor: 'pointer' });\r

  \  options.playermode = playermode;\r

  \  d.onmouseenter = () => show_options_popup(options);\r

  \  d.onmouseleave = hide_options_popup;\r

  }"
old_stage_moves: "function old_stage_moves() {\r

  \  for (const a of arguments) {\r

  \    let [uname, x, cardname] = a.split('.');\r

  \    DA.chain.push(() => {\r

  \      let g = Session;\r

  \      let state = { selected: {} };\r

  \      state.selected[uname] = [a];\r

  \      let o = { uname: uname, tid: g.table.id, state: state, player_status:
  'joined' };\r

  \      to_server(o, 'turn_send_move');\r

  \    })\r

  \  }\r

  }"
on_poll_bot_send_move: "function on_poll_bot_send_move(obj) {\r

  \  console.log('game is over for AI', DA.poll.data.uname);\r

  \  clearTimeout(BotTicker);\r

  \  delete DA.poll;\r

  }"
on_poll_table_seen: "function on_poll_table_seen(obj) {\r

  \  delete DA.poll;\r

  \  update_session(obj);\r

  \  if (is_game_host()) {\r

  \    let txt = jsyaml.dump(DB);\r

  \    DA.next = get_games;\r

  \    let fen = get_score_fen_from_cur_players();\r

  \    to_server({ tid: Session.cur_tid, fen: fen, uname: Session.cur_user,
  db: txt }, 'save_and_delete');\r

  \  } else {\r

  \    show_user_intro_screen(true);\r

  \  }\r

  }"
on_poll_table_show: "function on_poll_table_show(obj) {\r

  \  delete DA.poll;\r

  \  status_message_off();\r

  \  present_table(obj);\r

  }"
on_poll_table_started: "function on_poll_table_started(obj) {\r

  \  let t = obj.tables[0];\r

  \  update_db_user_from_pl_options(t.pl_options, t.game);\r

  \  Session.cur_tid = t.id;\r

  \  Session.cur_game = t.game;\r

  \  delete DA.poll;\r

  \  status_message_off();\r

  \  hide('divTest');\r

  \  close_sidebar();\r

  \  mBy('user_info_mini').style.display = 'flex';\r

  \  Session.scoring_complete = false;\r

  \  get_play();\r

  }"
on_ticker_status: "function on_ticker_status(obj) {\r

  \  console.log('status:', TCount);\r

  \  if (in_game_open_prompt()) {\r

  \    update_session(obj);\r

  \    update_game_status(Session.cur_players);\r

  \    TOTicker = setTimeout(send_timer_ticker, 3000);\r

  \  }\r

  }"
onAvailableGames: "function onAvailableGames(d) {\r

  \  prelude(getFunctionCallerName(), d);\r

  \  if (isError(d)) { restartHost(onHostStarted); return; }\r

  \  d = d.response;\r

  }"
onAvailablePlayers: "function onAvailablePlayers(d) {\r

  \  prelude(getFunctionCallerName(), d);\r

  \  if (isError(d)) { restartHost(onHostStarted); return; }\r

  \  d = d.response;\r

  \  S.availablePlayers = d;\r

  \  console.log('availablePlayers', S.availablePlayers);\r

  \  S.playersTaken = {};\r

  \  let i = 0;\r

  \  for (const plid of S.gameInfo.player_names) {\r

  \    console.log(plid)\r

  \    if (S.availablePlayers.includes(plid)) {\r

  \      console.log('it includes', plid);\r

  \      break;\r

  \    }\r

  \    if (isdef(S.plAddedByMe) && plid in S.plAddedByMe) {\r

  \      i += 1;\r

  \      continue;\r

  \    }\r

  \    console.log('still here!!!')\r

  \    S.playersTaken[plid] = { username: '?', index: i, id: plid };\r

  \    pageHeaderAddPlayer('?', plid, inferPlayerColorFromNameOrInit(plid,
  i));\r

  \    i += 1;\r

  \  }\r

  \  console.log(S.playersTaken);\r

  \  if (!empty(S.availablePlayers)) addUserAsFirstAvailablePlayer();\r

  \  else restartHost(onHostStarted);\r

  }"
onBeginRequest: "function onBeginRequest(d) {\r

  \  prelude(getFunctionCallerName(), d);\r

  \  if (isError(d)) { enterWaitingLoop(); return; }\r

  \  d = d.response;\r

  \  if (S.settings.useSpec) loadUserSpec([loadUserCode, sendInit]); else
  sendInit();\r

  }"
onChatReceived: function onChatReceived(d) { if (!USE_SOCKETIO) return; addChat(d); }
onChatSubmitted: function onChatSubmitted(e) { if (!USE_SOCKETIO) return;
  e.preventDefault(); socketEmitChat(); }
onclick_account: function onclick_account() { if (!menu_enabled('account'))
  return; stop_game(); get_account(); }
onclick_ack: "function onclick_ack() {\r

  \  if (nundef(Z) || nundef(Z.func.clear_ack)) return;\r

  \  Z.func.clear_ack();\r

  }"
onclick_add_question: function onclick_add_question() { show_question_editor(); }
onclick_animate: function onclick_animate() { interval_id = setInterval(onclick_layer, 500); }
onClick_belinda: function onClick_belinda() { window.location = '../belinda/index.php'; }
onclick_bigredloginbutton: function onclick_bigredloginbutton() { boalogin_start(); }
onclick_bill: "function onclick_bill() {\r

  \  let dParent = mBy('dBoaMain');\r

  \  if (dParent.children.length > 1) dParent.lastChild.remove();\r

  \  let acclist = get_fake_boa_data_list().filter(x => isdef(x['Last
  Payment']));\r

  \  let boacc = rChoose(acclist);\r

  \  let item = generate_statement(dParent, boacc, boacc.brand);\r

  \  DA.bill = item;\r

  \  lookupAddIfToList(DA, ['challengedata'], item);\r

  }"
onclick_boa_cancel: function onclick_boa_cancel() { onclick_location('home'); }
onclick_boa_sendcode: "function onclick_boa_sendcode() {\r

  \  let list1 = get_checked_radios(mBy('dPhoneContact'));\r

  \  let list2 = get_checked_radios(mBy('dTextOrPhone'))\r

  \  console.log(list1, list2);\r

  \  let success_phone = list1.length == 1 && list1[0] == 'text_3';\r

  \  let success_textOrPhone = list2.length == 1 && list2[0] == 'text_1';\r

  \  let TESTSKIP = false;\r

  \  console.log('TESTSKIP', TESTSKIP);\r

  \  if (!TESTSKIP) {\r

  \    if (!success_phone) { alert(\"Please select the phone number ending in
  '0297'!\"); return; }\r

  \    if (!success_textOrPhone) { alert(\"Please select the option 'Text
  message'!\"); return; }\r

  \  }\r

  \  boahavecode_start();\r

  }"
onclick_boa_submit_code: "function onclick_boa_submit_code() {\r

  \  let list1 = get_input_value('inpAuthocode');\r

  \  let success_code = list1 == S.boa_authorization_code;\r

  \  if (!success_code) {\r

  \    show_eval_message(false);\r

  \    return;\r

  \  }\r

  \  boamain_start();\r

  }"
onClick_books: function onClick_books() { closeLeftPane(); }
onclick_bw_symbol: "function onclick_bw_symbol(app, key) {\r

  \  if (nundef(key)) key = S.current_label;\r

  \  let s = lookup(DIBOA, ['bw_info', app, key]);\r

  \  if (s && isdef(S.current_input)) {\r

  \    S.current_input.value = s;\r

  \  } else {\r

  \    console.log('no bw_info for', app, key);\r

  \  }\r

  }"
onclick_by_rank: "function onclick_by_rank() {\r

  \  let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A,
  Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  let items = ui_get_hand_items(uplayer).map(x => x.o);\r

  \  let h = UI.players[uplayer].hand;\r

  \  pl.handsorting = 'rank';\r

  \  Clientdata.handsorting = pl.handsorting;\r

  \  localStorage.setItem('handsorting', Clientdata.handsorting);\r

  \  let cardcont = h.cardcontainer;\r

  \  let ch = arrChildren(cardcont);\r

  \  ch.map(x => x.remove());\r

  \  let sorted = sortCardItemsByRank(items, Z.func.rankstr);
  //window[Z.game.toUpperCase()].rankstr); //'23456789TJQKA*');\r

  \  h.sortedBy = 'rank';\r

  \  for (const item of sorted) {\r

  \    mAppend(cardcont, iDiv(item));\r

  \  }\r

  }"
onclick_by_rank_ferro: "function onclick_by_rank_ferro() {\r

  \  let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A,
  Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  let items = ui_get_hand_items(uplayer).map(x => x.o);\r

  \  let h = UI.players[uplayer].hand;\r

  \  pl.handsorting = { n: items.length, by: 'rank' };\r

  \  let cardcont = h.cardcontainer;\r

  \  let ch = arrChildren(cardcont);\r

  \  ch.map(x => x.remove());\r

  \  let sorted = sortCardItemsByRank(items, '23456789TJQKA*');\r

  \  h.sortedBy = 'rank';\r

  \  for (const item of sorted) {\r

  \    mAppend(cardcont, iDiv(item));\r

  \  }\r

  }"
onclick_by_suit: "function onclick_by_suit() {\r

  \  let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A,
  Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  let items = ui_get_hand_items(uplayer).map(x => x.o);\r

  \  let h = UI.players[uplayer].hand;\r

  \  Clientdata.handsorting = pl.handsorting = 'suit';\r

  \  localStorage.setItem('handsorting', Clientdata.handsorting);\r

  \  let cardcont = h.cardcontainer;\r

  \  let ch = arrChildren(cardcont);\r

  \  ch.map(x => x.remove());\r

  \  let sorted = sortCardItemsByRank(items, Z.func.rankstr);
  //'23456789TJQKA*');\r

  \  sorted = sortCardItemsBySuit(sorted);\r

  \  h.sortedBy = 'suit';\r

  \  for (const item of sorted) {\r

  \    mAppend(cardcont, iDiv(item));\r

  \  }\r

  }"
onclick_by_suit_ferro: "function onclick_by_suit_ferro() {\r

  \  let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A,
  Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  let items = ui_get_hand_items(uplayer).map(x => x.o);\r

  \  let h = UI.players[uplayer].hand;\r

  \  pl.handsorting = { n: items.length, by: 'suit' };\r

  \  let cardcont = h.cardcontainer;\r

  \  let ch = arrChildren(cardcont);\r

  \  ch.map(x => x.remove());\r

  \  let sorted = sortCardItemsByRank(items, '23456789TJQKA*');\r

  \  sorted = sortCardItemsBySuit(sorted);\r

  \  h.sortedBy = 'suit';\r

  \  for (const item of sorted) {\r

  \    mAppend(cardcont, iDiv(item));\r

  \  }\r

  }"
onclick_cancelmenu: function onclick_cancelmenu() { hide('dMenu'); }
onClick_cardgames: function onClick_cardgames() { closeLeftPane(); }
onclick_chat: function onclick_chat() { if (!menu_enabled('chat')) return;
  game_interrupt(); get_chat(); }
onclick_cities: "function onclick_cities() {\r

  \  let layer = M.layers.city;\r

  \  let capitals = rChoose(M.capitals, 50);\r

  \  console.log('capitals', capitals);\r

  \  for (const c of M.capitals) {\r

  \    console.log('presenting', c)\r

  \    map_add_object(M.cities[c], { layer: layer });\r

  \  }\r

  }"
onclick_clear_selection_ferro: function onclick_clear_selection_ferro() { clear_selection(); }
onclick_close_project_editor: "function onclick_close_project_editor(ev) {\r

  \  console.log('click!!!')\r

  \  show_home();\r

  }"
onclick_close_question_editor: "function onclick_close_question_editor() {\r

  \  console.log('click!!!')\r

  \  show_home();\r

  }"
onclick_color: "function onclick_color(prop) {\r

  \  return color => { let styles = {}; styles[prop] = color;
  mStyle(mBy('dAdmin'), styles); };\r

  }"
onclick_compose: function onclick_compose() { show_project_editor(); }
onclick_contacts: function onclick_contacts() { if (!menu_enabled('contacts'))
  return; game_interrupt(); get_contacts(); }
onclick_create_game_button: "function onclick_create_game_button() {\r

  \  console.assert(is_admin(), 'non admin is creating game!!!!!!!!!!!');\r

  \  collect_game_options();\r

  \  get_create_table();\r

  }"
onclick_delete_table: function onclick_delete_table() { stop_game();
  stop_polling(); delete_current_table(); }
onclick_edit_players: "function onclick_edit_players() {\r

  \  let ta = mBy('ta_edit_players');\r

  \  show(ta);\r

  \  let button = mBy('b_edit_players');\r

  \  button.innerHTML = 'submit';\r

  \  button.onclick = onclick_modify_def_players;\r

  \  ta.onkeyup = ev => {\r

  \    if (ev.key === \"Enter\") {\r

  \      ev.preventDefault();\r

  \      ev.cancelBubble = true;\r

  \      onclick_modify_def_players(ev);\r

  \    }\r

  \  };\r

  \  ta.focus();\r

  }"
onclick_file: "async function onclick_file() {\r

  \  let res = await
  route_path_yaml_dict('http://localhost:3000/file?name=test');\r

  \  console.log('res', res, typeof (res));\r

  }"
onclick_fork: function onclick_fork() { add_element(addfork); }
onclick_game_in_games_menu: "function onclick_game_in_games_menu(ev) {\r

  \  Session.cur_game = ev_to_gname(ev);\r

  \  set_cur_tid_for_game();\r

  \  if (nundef(Session.cur_tid) && is_admin()) {
  present_game_options(Session.cur_game); }\r

  \  else if (isdef(Session.cur_tid)) get_play();\r

  }"
onclick_game_in_gametable: "function onclick_game_in_gametable(tablename) {\r

  \  if (DA.simple) { show_table_simple(tablename); return; }\r

  \  stopgame();\r

  \  let table = firstCond(Serverdata.tables, x => x.friendly == tablename);\r

  \  ensure_polling();\r

  \  phpPost({ friendly: tablename }, 'table');\r

  }"
onclick_game_menu_item: "function onclick_game_menu_item(ev) {\r

  \  let gamename = ev_to_gname(ev);\r

  \  stop_game();\r

  \  show_game_options_menu(gamename);\r

  }"
onclick_gameover_new: "function onclick_gameover_new() {\r

  \  if (is_admin()) {\r

  \    let txt = jsyaml.dump(DB);\r

  \    DA.chain = [get_games];\r

  \    let end_scoring = get_scores_from_cur_players();\r

  \    to_server({ tid: Session.cur_tid, end_scoring: end_scoring, uname:
  Session.cur_user, db: txt }, 'save_and_delete');\r

  \  } else {\r

  \    present_non_admin_user(Session.cur_user);\r

  \  }\r

  }"
onclick_gameover_screen: "function onclick_gameover_screen() {\r

  \  let game = Session.cur_game;\r

  \  let winners = Session.winners;\r

  \  if (!Session.scoring_complete) {\r

  \    console.log('scoring...')\r

  \    decrease_handicap_if_winstreak(winners, game);\r

  \    increase_handicap_if_losestreak();\r

  \    Session.scoring_complete = true;\r

  \  }\r

  \  if (is_admin()) {\r

  \    let txt = jsyaml.dump(DB);\r

  \    DA.next = get_games;\r

  \    let fen = get_score_fen_from_cur_players();\r

  \    to_server({ tid: Session.cur_tid, fen: fen, uname: Session.cur_user,
  db: txt }, 'save_and_delete');\r

  \  } else {\r

  \    get_got_user_in_intro_screen();\r

  \    let t = Session.cur_table;\r

  \    let fen = t.status == 'past' ? t.fen :
  get_score_fen_from_cur_players();\r

  \    intro_create_score_table(fen, t.friendly);\r

  \  }\r

  }"
onclick_games: function onclick_games() { if (!menu_enabled('games')) return;
  stop_game(); get_games(); }
onclick_header: function onclick_header(ev) { if (!is_admin() && ev.path[0].id
  != 'header') return; open_sidebar(); close_mini_user_info(); }
onclick_home: function onclick_home() { window.location = SERVER; }
onclick_inno_ut0: function onclick_inno_ut0() { onclick_ut(inno_ut0_create_staged); }
onclick_inno_ut1: function onclick_inno_ut1() { onclick_ut(inno_ut1_create_staged); }
onclick_inno_ut2: function onclick_inno_ut2() { onclick_ut(inno_ut2_create_staged); }
onclick_internet: function onclick_internet() { toogle_internet_status(); }
onclick_jittering: "function onclick_jittering() {\r

  \  jittering = !jittering;\r

  \  if (!jittering) {\r

  \    tree.map(x => x.repair());\r

  \    leaves.map(x => x.current = x.orig.copy());\r

  \  }\r

  \  show_jittering();\r

  }"
onclick_join_as_player: "function onclick_join_as_player() {\r

  \  let [uname, fen, options, uplayer] = [Z.uname, Z.fen, Z.options,
  Z.uplayer];\r

  \  console.log('uname', uname, 'uplayer', uplayer);\r

  \  phpPost({ friendly: Z.friendly, uname: uname }, 'join');\r

  }"
onclick_lamp: "function onclick_lamp() {\r

  \  DA.simple = !DA.simple;\r

  \  if (DA.simple) show_simple_ui(); else show_advanced_ui();\r

  \  if (isVisible('dTables')) onclick_tables();\r

  }"
onclick_last_test: "function onclick_last_test() {\r

  \  stop_game();\r

  \  stop_polling();\r

  \  DA.test.iter = 0;\r

  \  DA.test.suiteRunning = false;\r

  \  onclick_ut_n('ari', DA.test.number);\r

  }"
onclick_layer: function onclick_layer() { addlayer(); }
onclick_leaf: function onclick_leaf() { add_element(addleaf); }
onclick_left_panel: function onclick_left_panel(ev) { if (ev.path[0].id !=
  'left_panel') return; close_sidebar(); open_mini_user_info(); }
onclick_list: function onclick_list() { show_code_list(DB.code); }
onclick_location: "function onclick_location(k) {\r

  \  show_correct_location(k);\r

  \  if (k == 'boa') {\r

  \    console.log('boa_state', S.boa_state);\r

  \    if (S.boa_state == 'authorized') { boamain_start(); }\r

  \    else if (S.boa_state == 'authorization_pending') boahavecode_start();\r

  \    else { S.boa_state = 'start'; boa_start(); }\r

  \  } else if (k == 'skype') {\r

  \    skype_start();\r

  \  } else if (k == 'home') {\r

  \    let b = mBy('tbbill'); if (isdef(b)) b.remove();\r

  \    scrollToTop();\r

  \    S.boa_state = null;\r

  \    let dband = mBy('dBandMessage');\r

  \    if (isdef(dband)) mStyle(dband, { display: 'none', h: 0, hmin: 0 });\r

  \    DA.challenge = DA.name = null;\r

  \  }\r

  }"
onclick_log_otree: function onclick_log_otree() { log_object(Session.otree, 'otree'); }
onclick_log_R: function onclick_log_R() { log_object(Session.R, 'R'); }
onclick_log_R_nodes: function onclick_log_R_nodes() { if (isdef(Session.R))
  log_object(Session.R.nodes, 'R.nodes'); }
onclick_log_R_oid2uids: function onclick_log_R_oid2uids() { if
  (isdef(Session.R)) log_object(Session.R.oid2uids, 'R.oid2uids'); }
onclick_log_R_path2oid: function onclick_log_R_path2oid() { if
  (isdef(Session.R)) log_object(Session.R.path2oid, 'R.path2oid'); }
onclick_log_R_uid2oids: function onclick_log_R_uid2oids() { if
  (isdef(Session.R)) log_object(Session.R.uid2oids, 'R.uid2oids'); }
onclick_log_R_uiNodes: function onclick_log_R_uiNodes() { if (isdef(Session.R))
  log_object(Session.R.uiNodes, 'R.uiNodes'); }
onclick_log_session: function onclick_log_session() { log_object(Session, 'Session'); }
onclick_login: function onclick_login() { if (!menu_enabled('login')) return;
  stop_game(); get_login(); }
onclick_login_new: function onclick_login_new() { if (!menu_enabled('login'))
  return; game_interrupt(); get_login_new(); }
onclick_logout: "function onclick_logout() {\r

  \  mFadeClearShow('dAdminRight', 300);\r

  \  mClear('dAdminMiddle');\r

  \  stop_game();\r

  \  clear_screen();\r

  \  U = null;\r

  \  show_users();\r

  }"
onclick_menu_item: function onclick_menu_item(name) { G_init(name); onclick_playpause(); }
onclick_modify_def_players: "function onclick_modify_def_players(ev) {\r

  \  let ta = mBy('ta_edit_players');\r

  \  let text = ta.value;\r

  \  let words = splitAtAnyOf(text, ', \\n');\r

  \  let names = [];\r

  \  let levels = {};\r

  \  for (const w of words) {\r

  \    if (w.indexOf('(') < 0) { names.push(w); continue; }\r

  \    let name = stringBefore(w, '(');\r

  \    let level = firstNumber(w);\r

  \    levels[name] = level;\r

  \    names.push(name);\r

  \  }\r

  \  console.log('levels', levels, 'names', names);\r

  \  if (!isEmpty(get_keys(levels))) {\r

  \    for (const n in levels) {\r

  \      lookupSetOverride(DB.users, [n, 'games', Session.cur_game,
  'startlevel'], levels[n]);\r

  \    }\r

  \    db_save();\r

  \  }\r

  \  let non_existent = names.filter(x => nundef(DB.users[x]));\r

  \  if (!isEmpty(non_existent)) {\r

  \    status_message('the following players will be discarded because they
  dont exist: ' + non_existent.join(', '));\r

  \    names = arrMinus(names, non_existent);\r

  \    if (names.length < 2) {\r

  \      let plname = chooseRandom(get_keys(DB.users), x => x !=
  Session.cur_user);\r

  \      names.push(plname);\r

  \    }\r

  \  }\r

  \  let final_players = get_def_players_for_user(Session.cur_user, names);\r

  \  populate_players(final_players);\r

  }"
onclick_modify_save: "async function onclick_modify_save() {\r

  }"
onclick_new: function onclick_new() { show_code_editor(); }
onclick_pause_continue: "function onclick_pause_continue() {\r

  \  let b = mBy('bPauseContinue');\r

  \  clearTimeout(TO.ai);\r

  \  onclick_stoppolling();\r

  \  show_status('game is paused', true);\r

  \  mStyle(b, { fg: 'grey' });\r

  }"
onclick_play: "function onclick_play() {\r

  \  if (!menu_enabled('play')) return;\r

  \  stop_game();\r

  \  let tid = Session.cur_tid;\r

  \  if (isdef(tid)) get_play();\r

  \  else if (is_admin()) get_games();\r

  \  else present_non_admin_user();\r

  }"
onclick_player_in_gametable: "function onclick_player_in_gametable(uname,
  tablename, rid) {\r

  \  stopgame();\r

  \  U = firstCond(Serverdata.users, x => x.name == uname);\r

  \  send_or_sim({ friendly: tablename, uname: U.name, }, 'table');\r

  }"
onclick_plus: "function onclick_plus(id, inc) {\r

  \  console.log('id', id);\r

  \  ensure_clientstate();\r

  \  Clientdata.state[id]++;\r

  \  console.log('sending Clientdata.state', Clientdata.state);\r

  \  let o = { friendly: 'feedback', uname: Clientdata.uid, state:
  jsCopy(Clientdata.state) };\r

  \  phpPost(o, 'update_player');\r

  }"
onclick_plus_minus: function onclick_plus_minus(color) { socket.emit('plus', color); }
onclick_poll: "async function onclick_poll() {\r

  \  if (Pollmode == 'manual') poll(true);\r

  \  else {\r

  \    console.log('STOP autopoll first!!!')\r

  \  }\r

  }"
onclick_popup: "function onclick_popup(k) {\r

  \  let o = DIBOA[k];\r

  \  if (nundef(o)) { console.log('missing popup item: ' + k); return; }\r

  \  if (k == 'bw') {\r

  \    if (!is_bw_loggedin()) {\r

  \      assertion(S.bw_state == 'loggedout' || S.bw_state == 'expired',
  \"bw_state is corrupted!!!!\", S.bw_state);\r

  \      if (S.bw_state == 'loggedout') { bw_login_popup(); } else {
  bw_set_new_password_popup(); }\r

  \    } else {\r

  \      bw_widget_popup();\r

  \    }\r

  \  } else { console.log('onclick_popup', k); }\r

  }"
onclick_preinno_create: "function onclick_preinno_create() { Session.cur_game =
  'gPreinno'; get_create_table({ level_setting: 'min' }, ['mimi', 'leo']); }"
onclick_random: "function onclick_random() {\r

  \  if (uiActivated && !DA.ai_is_moving) ai_move(300);\r

  \  else if (!uiActivated) console.log('NOP: ui not activated...');\r

  \  else if (DA.ai_is_moving) console.log('NOP: ai is (or was already)
  moving...');\r

  \  else console.log('NOP: unknown...');\r

  }"
onclick_reload: "function onclick_reload() {\r

  \  if (isdef(Z)) {\r

  \    if (Z.game == 'fritz' && nundef(Z.fen.winners)) {\r

  \      console.log(Z);\r

  \      Z.fen.players[Z.uplayer].time_left = stop_timer();\r

  \      take_turn_fen();\r

  \    } else {\r

  \      FORCE_REDRAW = true; send_or_sim({ friendly: Z.friendly, uname:
  Z.uplayer, auto: false }, 'table');\r

  \    }\r

  \  } else if (U) { onclick_tables(); }\r

  \  else { show_users(); }\r

  }"
onclick_reload_after_switching: function onclick_reload_after_switching() {
  DA.pollCounter = 0; DA.reloadColor = rColor(); onclick_reload(); }
onclick_reload_state: "function onclick_reload_state() {\r

  \  let g = Session;\r

  \  let tid = g.cur_tid;\r

  \  if (nundef(tid) && is_admin()) get_games();\r

  \  else if (nundef(tid)) get_intro();\r

  \  else if (is_admin()) { stop_game(); get_play(); }\r

  \  else {\r

  \    stop_game();\r

  \    Session.cur_tid = null;\r

  \    to_server({ uname: g.cur_user }, 'newest_table');\r

  \  }\r

  }"
onclick_remove_host: "function onclick_remove_host() {\r

  \  let [role, host, game, fen, uplayer, turn, stage] = [Z.role, Z.host,
  Z.game, Z.fen, Z.uplayer, Z.turn, Z.stage];\r

  }"
onclick_reset_all: "function onclick_reset_all() { stop_game(); phpPost({ app:
  'simple' }, 'delete_tables'); }"
onclick_reset_db: function onclick_reset_db() { reset_db_values(); db_save(); }
onclick_reset_past: "function onclick_reset_past() { stopgame(); phpPost({ app:
  'simple' }, 'delete_past'); }"
onclick_reset_progressbars: "function onclick_reset_progressbars() {\r

  \  DA.winit = 10;\r

  \  let oldfen = isdef(Z.fen) ? jsCopy(Z.fen) : { green: 0, red: 0 };\r

  \  let fen = { green: DA.winit, red: DA.winit };\r

  \  for (const k in DA.bars) {\r

  \    set_new_goal(k, DA.winit);\r

  \  }\r

  \  phpPost({ friendly: 'feedback', fen: fen }, 'reset');\r

  }"
onclick_reset_tables: function onclick_reset_tables() { stop_game();
  stop_polling(); DA.chain = [get_games]; to_server({}, 'reset_tables'); }
onclick_reset_user: function onclick_reset_user() {
  reset_game_values_for_user(Session.cur_user); db_save(); }
onclick_restart: "function onclick_restart() {\r

  \  let [game, fen, plorder, host] = [Z.game, Z.fen, Z.plorder, Z.host];\r

  \  Z.scoring = {};\r

  \  if (nundef(fen.original_players)) fen.original_players = fen.players;\r

  \  let playernames = [host].concat(get_keys(fen.original_players).filter(x
  => x != host));\r

  \  let playmodes = playernames.map(x => fen.original_players[x].playmode);\r

  \  let strategies = playernames.map(x =>
  fen.original_players[x].strategy);\r

  \  let default_options = {}; for (const k in Config.games[game].options)
  default_options[k] = arrLast(Config.games[game].options[k].split(','));\r

  \  addKeys(default_options, Z.options);\r

  \  fen = Z.fen = Z.func.setup(playernames, Z.options);\r

  \  [Z.plorder, Z.stage, Z.turn, Z.round, Z.step, Z.phase] = [fen.plorder,
  fen.stage, fen.turn, 1, 1, fen.phase];\r

  \  if (DA.TESTSTART1) Z.turn = fen.turn = Z.host;\r

  \  let i = 0; playernames.map(x => { let pl = fen.players[x]; pl.name = x;
  pl.strategy = strategies[i]; pl.playmode = playmodes[i++]; });\r

  \  take_turn_fen_clear();\r

  }"
onclick_restart_long: "function onclick_restart_long() {\r

  \  let game = Z.game;\r

  \  let playernames = [Z.host].concat(Z.plorder.filter(x => x != Z.host));\r

  \  let playermodes = playernames.map(x => Z.fen.players[x].playmode);\r

  \  let i = 0; let players = playernames.map(x => ({ name: x, playmode:
  playermodes[i++] }));\r

  \  let options = Z.options;\r

  \  stopgame();\r

  \  startgame(game, players, options);\r

  }"
onclick_restart_move: function onclick_restart_move() { clear_transaction(); onclick_reload(); }
onclick_resume_game_button: "function onclick_resume_game_button() {\r

  \  console.assert(is_admin(), 'non admin is creating game!!!!!!!!!!!');\r

  \  collect_game_options();\r

  \  get_modify_table();\r

  }"
onclick_role: "function onclick_role(role) {\r

  \  mFade(mBy('dRoles'), 1000, null, 'linear');\r

  \  show_my_role(role);\r

  }"
onclick_run_tests: "function onclick_run_tests() {\r

  \  stop_game();\r

  \  stop_polling();\r

  \  shield_on();\r

  \  DA.test.iter = 0;\r

  \  DA.test.suiteRunning = true;\r

  \  if (nundef(DA.test.list)) {\r

  \    console.log('taking default DA.test.list');\r

  \    DA.test.list = [100, 101];\r

  \  }\r

  \  test_engine_run_next(DA.test.list);\r

  }"
onclick_save: "async function onclick_save() {\r

  \  DB = await route_path_yaml_dict('http://localhost:3000/save');\r

  \  console.log('DB', DB);\r

  }"
onclick_set_test: "function onclick_set_test() { Session.cur_game = 'gSet';
  get_create_table({ level_setting: 'min', winning_score: 1 }, ['mimi', 'leo']);
  }"
onclick_settings: function onclick_settings() { if (Session.cur_menu != 'play')
  { alert('click on a game icon!'); return; }
  present_game_options(Session.cur_tid); }
onclick_settings_test: "function onclick_settings_test() {\r

  \  console.log('settings', settings);\r

  \  socket.emit('settings', { settings: settings });\r

  }"
onclick_sim_inno_after_init_mimi_turn: "function
  onclick_sim_inno_after_init_mimi_turn() {\r

  \  delete_current_table();\r

  \  Session.cur_game = 'gPreinno';\r

  \  test_sim_inno_after_init_mimi_turn();\r

  \  get_create_table({ level_setting: 'min' }, ['mimi', 'leo']);\r

  }"
onclick_sim_inno_init_complete: "function onclick_sim_inno_init_complete() {\r

  \  delete_current_table();\r

  \  Session.cur_game = 'gPreinno';\r

  \  test_sim_inno_init_complete();\r

  \  get_create_table({ level_setting: 'min' }, ['mimi', 'leo']);\r

  }"
onclick_skip: "function onclick_skip() {\r

  \  let [game, fen, uplayer, turn, stage] = [Z.game, Z.fen, Z.uplayer,
  Z.turn, Z.stage];\r

  \  if (game == 'spotit') return;\r

  \  else if (game == 'bluff' && stage == 1 || game == 'ferro' && stage ==
  'auto_ack') { onclick_ack(); }\r

  \  else if (game == 'aristo') {\r

  \    Z.uplayer = Z.turn[0];\r

  \    Z.A = { level: 0, di: {}, ll: [], items: [], selected: [], tree: null,
  breadcrumbs: [], sib: [], command: null };\r

  \    copyKeys(jsCopy(Z.fen), Z);\r

  \    copyKeys(UI, Z);\r

  \    activate_ui(Z);\r

  \    Z.func.activate_ui();\r

  \    ai_move();\r

  \  } else {\r

  \    let plskip = Z.turn[0];\r

  \    Z.turn = [get_next_player(Z, plskip)];\r

  \    Z.uplayer = plskip;\r

  \    take_turn_fen();\r

  \  }\r

  }"
onclick_spotit1: "function onclick_spotit1() { Session.cur_game = 'gSpotit';
  get_create_table({ level_setting: 'min', winning_score: 1 }, ['mimi', 'leo']);
  }"
onclick_start_spotit: "function onclick_start_spotit() {\r

  \  let [game, fen, uplayer, turn, stage] = [Z.game, Z.fen, Z.uplayer,
  Z.turn, Z.stage];\r

  \  Z.stage = 'move';\r

  \  Z.turn = jsCopy(Z.plorder);\r

  \  take_turn_fen();\r

  }"
onclick_startgame: "function onclick_startgame() {\r

  \  console.log('starting the game!');\r

  }"
onclick_startpolling: "function onclick_startpolling() {\r

  \  pollStop();\r

  \  Pollmode = 'auto';\r

  \  poll();\r

  }"
onclick_status: function onclick_status() { query_status(); }
onclick_status_message: "function onclick_status_message(ev) {\r

  \  evNoBubble(ev); hide('dMessage');\r

  \  if (isdef(DA.after_status_message)) {\r

  \    let func = DA.after_status_message;\r

  \    DA.after_status_message = null;\r

  \    func();\r

  \  }\r

  }"
onclick_step: "function onclick_step() {\r

  \  DA.test.step = true;\r

  \  DA.test.running = true;\r

  \  if (!isEmpty(DA.chain)) { dachainext(1000); return; }\r

  \  let testnumber = valf(mBy('intestnumber').value, 110);\r

  \  if (!isNumber(testnumber)) testnumber = 110;\r

  \  console.log('test for step is', testnumber);\r

  \  DA.test.number = testnumber;\r

  \  onclick_last_test();\r

  }"
onclick_stop_polling: function onclick_stop_polling() { stop_polling(); }
onclick_stoppolling: "function onclick_stoppolling() {\r

  \  pollStop();\r

  \  Pollmode = 'manual';\r

  }"
onclick_submit_boa_login: "function onclick_submit_boa_login() {\r

  \  let userid = get_boa_userid_input().value;\r

  \  let pwd = get_boa_pwd_input().value;\r

  \  let TESTSUCCESS = false;\r

  \  if (TESTSUCCESS || userid == DIBOA.bw_info.boa.userid && pwd ==
  DIBOA.bw_info.boa.pwd) {\r

  \    boaverify_start();\r

  \  } else {\r

  \    console.log('FAIL!!!!!!! onclick_submit_boa_login', userid, pwd);\r

  \  }\r

  }"
onclick_table: "function onclick_table(tablename) {\r

  \  send_or_sim({ friendly: tablename, uname: U.name }, 'table');\r

  }"
onclick_tables: "function onclick_tables() { phpPost({ app: 'simple' }, 'tables'); }"
onclick_test: "async function onclick_test() {\r

  \  let res = await route_path_text('http://localhost:3000/test');\r

  \  console.log('res', res)\r

  }"
onclick_test_create_anagram_AI: "function onclick_test_create_anagram_AI() {
  Session.cur_game = 'gAnagram'; get_create_table({ winning_score: 2 }, ['mimi',
  'bob', 'guest', 'leo']); }"
onclick_test_create_maze_AI: "function onclick_test_create_maze_AI() {
  Session.cur_game = 'gMaze'; get_create_table({ winning_score: 2 }, ['mimi',
  'bob', 'guest']); }"
onclick_test_create_spotit_AI: "function onclick_test_create_spotit_AI() {
  Session.cur_game = 'gSpotit'; get_create_table({ winning_score: 2 }, ['mimi',
  'bob']); }"
onclick_test_create1: function onclick_test_create1() { get_create_table(); }
onclick_test_create2_anagram: "function onclick_test_create2_anagram() {
  Session.cur_game = 'gAnagram'; get_create_table({ level_setting: 'min',
  winning_score: 1 }); }"
onclick_test_create2_maze: "function onclick_test_create2_maze() {
  Session.cur_game = 'gMaze'; get_create_table({ level_setting: 'min',
  winning_score: 1 }); }"
onclick_tide_all: "function onclick_tide_all() {\r

  \  let [game, fen, uplayer, turn, stage] = [Z.game, Z.fen, Z.uplayer,
  Z.turn, Z.stage];\r

  \  for (const plname in fen.players) {\r

  \    let pl = fen.players[plname];\r

  \    if (isdef(pl.tides)) { continue; }\r

  \    pl.tides = { val: rNumber(8, 10) };\r

  \  }\r

  \  proceed_to_newcards_selection();\r

  }"
onclick_tithe_all: "function onclick_tithe_all() {\r

  \  let [game, fen, uplayer, turn, stage] = [Z.game, Z.fen, Z.uplayer,
  Z.turn, Z.stage];\r

  \  for (const plname in fen.players) {\r

  \    let pl = fen.players[plname];\r

  \    if (isdef(pl.tithes)) { continue; }\r

  \    pl.tithes = { val: rNumber(8, 10) };\r

  \  }\r

  \  proceed_to_newcards_selection();\r

  }"
onclick_toggle_games: "function onclick_toggle_games() {\r

  \  if (isVisible('dGames')) { toggle_games_off(); }\r

  \  else { show_games(); toggle_games_on(); }\r

  }"
onclick_toggle_polling: function onclick_toggle_polling() { toggle_polling_status(); }
onclick_toggle_sidebar: "function onclick_toggle_sidebar(ev) {\r

  \  evNoBubble(ev);\r

  \  toggle_sidebar(); toggle_mini_user_info();\r

  }"
onclick_toggle_tables: "function onclick_toggle_tables() {\r

  \  if (isVisible('dTables')) { toggle_tables_off(); }\r

  \  else { phpPost({ app: 'simple' }, 'tables'); toggle_tables_on(); }\r

  }"
onclick_toggle_users: "function onclick_toggle_users() {\r

  \  if (isVisible('dUsers')) { toggle_users_off(); }\r

  \  else { phpPost({ app: 'simple' }, 'users'); toggle_users_on(); }\r

  }"
onclick_toobar: "function onclick_toobar(name) {\r

  \  console.log('clicked', name);\r

  \  switch (name) {\r

  \    case 'clear': mClear(dTable); DA.edits = []; break;\r

  \    case 'magic': break;\r

  \    case 'lineup':\r

  \      mCenterFlex(dTable);\r

  \      DA.edits.map(x => mStyle(x, { position: null, display: 'inline'
  }));\r

  \      break;\r

  \    case 'orig': DA.edits.map(x => x.style.position = 'absolute'); break;\r

  \  }\r

  }"
onclick_user: "function onclick_user(uname) {\r

  \  U = firstCond(Serverdata.users, x => x.name == uname);\r

  \  localStorage.setItem('uname', U.name);\r

  \  DA.secretuser = U.name;\r

  \  let elem = firstCond(arrChildren('dUsers'), x =>
  x.getAttribute('username') == uname);\r

  \  let img = elem.children[0];\r

  \  mShrinkTranslate(img, .75, 'dAdminRight', 400, show_username);\r

  \  mFadeClear('dUsers', 300);\r

  }"
onclick_user_in_intro: "function onclick_user_in_intro(ev) {\r

  \  let uname = try_find_username(ev);\r

  \  if (uname) { present_non_admin_user(uname); }\r

  }"
onclick_user_login: "function onclick_user_login(e) {\r

  \  e.preventDefault(); e.cancelBubble = true;\r

  \  var username = e.target.getAttribute(\"username\");\r

  \  if (e.target.id == \"\") {\r

  \    username = e.target.parentNode.getAttribute(\"username\");\r

  \  }\r

  \  load_user(username);\r

  \  get_tables();\r

  }"
onclick_user_login_new: "function onclick_user_login_new(e) {\r

  \  e.preventDefault(); e.cancelBubble = true;\r

  \  var username = e.target.getAttribute(\"username\");\r

  \  if (e.target.id == \"\") {\r

  \    username = e.target.parentNode.getAttribute(\"username\");\r

  \  }\r

  \  load_user(username);\r

  \  get_user_tables();\r

  }"
onclick_userid: "function onclick_userid() {\r

  \  let userid = mBy(\"enterID-input\");\r

  \  let pwd = mBy('tlpvt-passcode-input');\r

  \  console.log('userid', userid.value, 'pwd', pwd.value);\r

  }"
onclick_ut: "function onclick_ut(func) {\r

  \  let [fen, player_names] = func();\r

  \  get_create_staged(fen, { level_setting: 'min' }, player_names);\r

  }"
onclick_ut_n: "function onclick_ut_n(g, n) {\r

  \  DA.test.running = true;\r

  \  let [fen, player_names] = window[`${g}_ut${n}_create_staged`]();\r

  \  get_create_staged(fen, { level_setting: 'min' }, player_names);\r

  }"
onclick_view_buildings: "function onclick_view_buildings() {\r

  \  let [game, fen, uplayer, turn, stage] = [Z.game, Z.fen, Z.uplayer,
  Z.turn, Z.stage];\r

  \  let buildings = UI.players[uplayer].buildinglist;\r

  \  for (const b of buildings) b.items.map(x => face_up(x));\r

  \  TO.buildings = setTimeout(hide_buildings, 5000);\r

  }"
onclick_view_ranking: function onclick_view_ranking() { if
  (nundef(Session.cur_table)) { console.log('need table!'); return; } out1();
  csv = make_csv_for_rankings(); }
onClick1: "function onClick1(ev, mobj, part) {\r

  \  console.log(mobj)\r

  \  if (mobj.scaleValue == 2) { mobj.setScale(1); delete mobj.scaleValue; }\r

  \  else { mobj.setScale(2); mobj.scaleValue = 2; }\r

  }"
onClickActivate: "function onClickActivate() {\r

  \  console.log('on click', T)\r

  \  ACTIVATE_UI = true;\r

  \  testActivate(T);\r

  }"
onClickActivateLayout: "function onClickActivateLayout() { closeAux();
  Socket.emit('settings', { settings: G.settings }); }"
onClickAdd: function onClickAdd() { testAddObject(T); }
onClickAdd5Random: "function onClickAdd5Random() {\r

  \  closeAux();\r

  \  Socket.emit('poolChange', { n: 5 });\r

  }"
onClickAddActions: "function onClickAddActions() {\r

  \  if (M.boats) {\r

  \    return;\r

  \  }\r

  \  timit.showTime('start ' + getFunctionCallerName());\r

  \  presentActions();\r

  \  activateActions();\r

  \  timit.showTime('...end ' + getFunctionCallerName());\r

  }"
onClickAddBoard: function onClickAddBoard() { addBoard(T); }
onClickAddDefaultObjects: "function onClickAddDefaultObjects() {\r

  \  timit.showTime('start ' + getFunctionCallerName());\r

  \  for (const oid in G.table) {\r

  \    let mobj = makeDefaultObject(oid, G.table[oid],
  S.settings.table.defaultArea);\r

  \    presentDefault(oid, G.table[oid]);\r

  \  }\r

  \  timit.showTime('...end ' + getFunctionCallerName());\r

  }"
onClickAddDefaultPlayers: "function onClickAddDefaultPlayers() {\r

  \  timit.showTime('start ' + getFunctionCallerName());\r

  \  for (const oid in G.players) {\r

  \    let mobj = makeDefaultPlayer(oid, G.playersAugmented[oid],
  S.settings.player.defaultArea);\r

  \    presentDefault(oid, G.playersAugmented[oid], false);\r

  \  }\r

  \  timit.showTime('...end ' + getFunctionCallerName());\r

  }"
onClickAddInteraction: function onClickAddInteraction() { for (const id in UIS)
  { addTestInteraction(UIS[id]); } }
onClickAddLocObject: "function onClickAddLocObject() {\r

  \  let o = {\r

  \    oid: 'loc2ta',\r

  \    obj_type: 'robberta',\r

  \    name: 'hallo2',\r

  \    loc: 'loc3ta'\r

  \  };\r

  \  let o2 = {\r

  \    oid: 'loc1ta',\r

  \    obj_type: 'robberta',\r

  \    name: 'hallo1',\r

  \    loc: 'loc2ta'\r

  \  };\r

  \  if (isdef(R.getO('loc2ta'))) o = o2;\r

  \  R.addObject(o.oid, o); R.addRForObject(o.oid);\r

  \  let success = einhaengen(o.oid, o, R);\r

  \  recMeasureOverride(R.tree.uid, R)\r

  \  updateOutput(R);\r

  }"
onClickAddRobber: function onClickAddRobber() { addRobber(T); }
onClickAddToPool: "function onClickAddToPool(ev) {\r

  \  let button = ev.target;\r

  \  if (ActiveButton == button) {\r

  \    if (isdef(DA.selectedPerlen) && !isEmpty(DA.selectedPerlen)) {\r

  \      let keys = DA.selectedPerlen.map(x => x.key);\r

  \      Socket.emit('poolChange', { keys: keys });\r

  \      delete DA.selectedPerlen;\r

  \    }\r

  \    closeAux();\r

  \    return;\r

  \  }\r

  \  openAux('pick perlen', button);\r

  \  let d = mDiv(dAuxContent);\r

  \  let items = [];\r

  \  for (const k in G.perlenDict) {\r

  \    let p = jsCopy(G.perlenDict[k]);\r

  \    p.path = mPath(p);\r

  \    console.log('path', p.path)\r

  \    let ui = createPerle(p, d, 64, 1.3, .4);\r

  \    mStyleX(ui, { opacity: 1 });\r

  \    iAdd(p, { div: ui });\r

  \    items.push(p);\r

  \  }\r

  \  DA.selectedPerlen = [];\r

  \  items.map(x => iDiv(x).onclick = ev => { toggleItemSelection(x,
  DA.selectedPerlen) });\r

  }"
onClickAllTests: "function onClickAllTests() {\r

  \  setRSG_SOURCE('test');\r

  \  isTraceOn = false;\r

  \  runAllTests();\r

  }"
onClickAllTestSeries: "function onClickAllTestSeries() {\r

  \  iTESTSERIES = 0;\r

  \  isTraceOn = false;\r

  \  onClickResetTest();\r

  \  runAllTestSeries();\r

  }"
onClickAreaSizes: "function onClickAreaSizes() {\r

  \  if (nundef(bodyZoom)) bodyZoom = 1.0;\r

  \  let zoomlevel = calcScreenSizeNeeded();\r

  \  let toplevelDiv = document.body.getRootNode();\r

  \  let body = document.body;\r

  \  let d = document.getElementById('a_d_header'); //'R_d_root');\r

  \  console.log('d', getBounds(d), d)\r

  \  console.log('width', d.style.offsetWidth);\r

  \  console.log('client', window.clientInformation)\r

  \  console.log(toplevelDiv, body)\r

  \  console.log(getBounds(body))\r

  \  console.log('d rect', d.getBoundingClientRect());\r

  \  console.log(toplevelDiv.scrollWidth)\r

  \  zoom(zoomlevel / 100);\r

  }"
onClickAvailablePlayer: "function onClickAvailablePlayer(i) {\r

  \  let players = S.gameConfig.players;\r

  \  let plChosen = firstCond(players, x => x.index == i);\r

  \  joinCandidate = plChosen;\r

  }"
onClickBadgeX: "function onClickBadgeX(ev) {\r

  \  interrupt();\r

  \  let item = evToItem(ev);\r

  \  setBadgeLevel(item.index);\r

  \  userUpdate(['games', G.id, 'startLevel'], item.index);\r

  \  auxOpen = false;\r

  \  TOMain = setTimeout(G.controller.startGame.bind(G.controller), 100);\r

  }"
onClickBoardInChooseBoard: "function onClickBoardInChooseBoard(boardFilename)
  {\r

  \  if (boardFilename == G.settings.boardFilename) return;\r

  \  G.settings.boardFilename = boardFilename;\r

  \  Socket.emit('settings', { settings: G.settings });\r

  }"
onClickCalibrate: "function onClickCalibrate() {\r

  \  if (isCal) {\r

  \    if (auxOpen) { closeAux(); }\r

  \    exitCalibrationMode();\r

  \  } else {\r

  \    if (auxOpen) { closeAux(); enterCalibrationMode('all'); }\r

  \    else { enterCalibrationMode(1); }\r

  \  }\r

  }"
onClickCatan: "function onClickCatan() {\r

  \  GAME = S.settings.game = 'catan';\r

  \  PLAYMODE = S.settings.playmode = 'hotseat';\r

  \  S.gameConfig = gcs[GAME];\r

  \  _startNewGame('starter');\r

  }"
onClickCheat: function onClickCheat(code) { sendRoute('/cheat/' + code, null); }
onClickChoice: "function onClickChoice(ev) {\r

  \  let id = evToClosestId(ev);\r

  \  let b = mBy(id);\r

  \  let index = Number(stringAfter(id, '_'));\r

  \  Goal.choice = Goal.choices[index];\r

  \  Goal.buttonClicked = b;\r

  \  G.controller.evaluate.bind(G.controller)();\r

  }"
onClickChooseBoard: "function onClickChooseBoard() {\r

  \  openAux('click board to select');\r

  \  let boards = G.settings.boardFilenames;\r

  \  for (const b of boards) {\r

  \    let img = mImg(PERLENPATH_FRONT + 'bretter/' + b, dAuxContent, {
  cursor: 'pointer', h: 200, margin: 8, 'vertical-align': 'baseline' });\r

  \    img.onclick = () => { closeAux(); onClickBoardInChooseBoard(b); }\r

  \  }\r

  \  let img = mDiv(dAuxContent, { cursor: 'pointer', display: 'inline-block',
  border: 'black', w: 300, h: 200, margin: 8, box: true });\r

  \  img.onclick = () => { closeAux(); onClickBoardInChooseBoard('none'); }\r

  }"
onClickChoosePerlen: "function onClickChoosePerlen(ev) {\r

  \  let button = ev.target;\r

  \  if (ActiveButton == button) {\r

  \    if (isdef(DA.selectedPerlen) && !isEmpty(DA.selectedPerlen)) {\r

  \      let keys = DA.selectedPerlen.map(x => x.key);\r

  \      Socket.emit('poolChange', { keys: keys });\r

  \      delete DA.selectedPerlen;\r

  \    }\r

  \    closeAux();\r

  \    return;\r

  \  }\r

  \  openAux('pick perlen', button);\r

  \  let d = mDiv(dAuxContent);\r

  \  let items = [];\r

  \  for (const k in G.perlenDict) {\r

  \    let p = jsCopy(G.perlenDict[k]);\r

  \    p.path = mPath(p);\r

  \    console.log('path', p.path)\r

  \    let ui = createPerle(p, d, 64, 1.3, .4);\r

  \    mStyle(ui, { opacity: 1 });\r

  \    iAdd(p, { div: ui });\r

  \    items.push(p);\r

  \  }\r

  \  DA.selectedPerlen = [];\r

  \  items.map(x => iDiv(x).onclick = ev => { toggleItemSelection(x,
  DA.selectedPerlen) });\r

  }"
onClickClearAllPerlen: "function onClickClearAllPerlen() {\r

  \  closeAux();\r

  \  G.clearBoardUI();\r

  \  G.clearPoolUI();\r

  \  Socket.emit('clearPool');\r

  }"
onClickClearBoard: "function onClickClearBoard() {\r

  \  closeAux();\r

  \  let [plist, fields] = G.clearBoardUI();\r

  \  console.log('sending remove all perlen command', plist, fields);\r

  \  console.log('===> remove list', plist, fields);\r

  \  let data = { iPerlen: plist.map(x => x.index), iFroms: fields.map(x =>
  x.index), username: Username };\r

  \  logClientSend('removePerlen', data);\r

  \  Socket.emit('removePerlen', data);\r

  }"
onClickClearPerlenpool: "function onClickClearPerlenpool() {\r

  \  closeAux();\r

  \  G.clearPoolUI();\r

  \  Socket.emit('clearPoolarr');\r

  }"
onClickClearTable: "async function onClickClearTable() {\r

  \  clearElement('table'); clearUpdateOutput(); T = {};\r

  \  mBy('table').style.minWidth = 0; mBy('table').style.minHeight = 0;\r

  \  resetUIDs();\r

  }"
onclickCodeInSidebar: "function onclickCodeInSidebar(ev) {\r

  \  let key = isString(ev) ? ev : ev.target.innerHTML;\r

  \  let text = CODE.justcode[key];\r

  \  let ta = AU.ta; let dParent = null;\r

  \  if (nundef(ta)) {\r

  \    dParent = valf(dFiddle, dTable, document.body);\r

  \    let talist = dTable.getElementsByTagName('textarea');\r

  \    if (isEmpty(talist)) ta = mTextarea(null, null, dParent, { w: '100%'
  });\r

  \    else ta = talist[0];\r

  \  } else dParent = ta.parentNode;\r

  \  ta.value = text;\r

  \  let hideal = ta.scrollHeight;\r

  \  console.log('ta.scrollheight', hideal)\r

  \  let hsidebar = window.innerHeight - 68;\r

  \  mStyle(dParent, { hmax: hsidebar });\r

  \  let lines = text.split('\\n');\r

  \  let min = lines.length + 1;\r

  \  mStyle(ta, { h: hideal, hmin: 50, hmax: hsidebar - 44 });\r

  \  ta.scrollTop = 0;\r

  \  let download = false;\r

  \  if (download) downloadAsText(text, 'hallo', 'js');\r

  \  return text;\r

  }"
onClickCollapse: function onClickCollapse() { collapseAll(); }
onClickComputer: function onClickComputer() { }
onClickConnect: function onClickConnect(port) { initSocket(port); }
onClickContact: "function onClickContact(ev) {\r

  \  el = evToClass(ev, 'contact');\r

  \  DA.currentContact = el.getAttribute('username');\r

  \  onClickMenu('chat');\r

  }"
onClickCreateGame: "function onClickCreateGame() {\r

  \  console.log('playMode:', S.settings.playMode, 'PLAYMODE', PLAYMODE,
  'S.playModeChanged', S.playModeChanged)\r

  \  S.settings.username = USERNAME;\r

  \  S.settings.playMode = PLAYMODE;\r

  \  S.settings.game = GAME;\r

  \  console.log('playMode:', S.settings.playMode, 'PLAYMODE', PLAYMODE,
  'S.playModeChanged', S.playModeChanged)\r

  \  switch (S.settings.playMode) {\r

  \    case 'multiplayer': restartHost(onHostStarted); break;\r

  \    case 'hotseat': _startHotseat(); break;\r

  \    case 'solo':\r

  \    default: break;\r

  \  }\r

  }"
onClickCreateGameCancel: "function onClickCreateGameCancel() {\r

  \  currentPlaymode = PLAYMODE;\r

  \  currentGamename = GAME;\r

  \  closeGameConfig();\r

  }"
onClickCreateGameLobby: "function onClickCreateGameLobby() {\r

  \  openGameConfig();\r

  }"
onClickCreateGameOk: "function onClickCreateGameOk() {\r

  \  isPlaying = false;\r

  \  disableResumeButton();\r

  \  GAME = S.settings.game = currentGamename;\r

  \  PLAYMODE = S.settings.playmode = currentPlaymode;\r

  \  currentSeed = document.getElementById('c_b_mm_seed').value;\r

  \  SEED = S.settings.seed = Number(currentSeed);\r

  \  joinedPlayers = [];\r

  \  let gi = allGames[GAME];\r

  \  S.gameInfo = gi;\r

  \  let gc = {};\r

  \  gc.numPlayers = currentNumPlayers;\r

  \  gc.players = [];\r

  \  let countNeedToJoin = 0;\r

  \  let countMes = 0;\r

  \  let iBots = 0;\r

  \  for (let i = 0; i < currentNumPlayers; i++) {\r

  \    let pl = {};\r

  \    pl.index = i + 1;\r

  \    pl.id = gi.player_names[i];\r

  \    let selType = valueOfElement(getidType(i + 1));\r

  \    pl.playerType = startsWith(selType, 'AI') ? 'AI' : selType;\r

  \    pl.agentType = pl.playerType == 'AI' ? stringAfter(selType, ' ') :
  null;\r

  \    pl.username = selType == 'me' ? USERNAME + (countMes > 0 ? countMes :
  '')\r

  \      : selType == 'human' ? '' : 'bot' + iBots;\r

  \    if (selType == 'me') countMes += 1;\r

  \    else if (selType == 'human') countNeedToJoin += 1;\r

  \    else iBots += 1;\r

  \    gc.players.push(pl);\r

  \  }\r

  \  S.gameConfig = gc;\r

  \  closeGameConfig();\r

  \  if (countNeedToJoin > 0) {\r

  \    setMessage('new game set up! waiting for ' + countNeedToJoin + '
  players to join!');\r

  \    socketEmitMessage(JSON.stringify({ type: 'gc', data: gc }));\r

  \  } else {\r

  \    _startNewGame('starter');\r

  \  }\r

  }"
onClickDeactivate: function onClickDeactivate() { ACTIVATE_UI = false; testDeactivate(T); }
onClickDetection: "function onClickDetection() {\r

  \  S.settings.userBehaviors = false;\r

  \  S.settings.userStructures = false;\r

  \  S.settings.userSettings = false;\r

  \  S.settings.boardDetection = S_boardDetection = true;\r

  \  S.settings.deckDetection = S_deckDetection = true;\r

  \  S.settings.openTab = 'ObjectsTab';\r

  \  redrawScreen();\r

  }"
onClickDownloadHistory: "function onClickDownloadHistory() {\r

  \  let keys = Object.keys(HistoryOfStates);\r

  \  console.log('history keys', keys);\r

  \  for (const k in HistoryOfStates) {\r

  \    let pack = HistoryOfStates[k];\r

  \    console.log('state', k, 'freeForm', pack.settings.freeForm, 'board',
  pack.settings.boardFilename)\r

  \  }\r

  \  downloadAsYaml(HistoryOfStates, `history_` + Date.now());\r

  }"
onClickExpand: function onClickExpand() { uncollapseAll(); }
onClickFilter: "function onClickFilter() {\r

  \  console.log('clicked filter!')\r

  }"
onClickFilterAndInfobox: function onClickFilterAndInfobox(ev, mobj, part) {
  onClickFilterTuples(ev, mobj, part); onClickPlusControlInfobox(ev, mobj,
  part); }
onClickFilterOrInfobox: function onClickFilterOrInfobox(ev, mobj, part) { if
  (!ev.ctrlKey) onClickFilterTuples(ev, mobj, part); else openInfobox(ev, mobj,
  part); }
onClickFilterTuples: "function onClickFilterTuples(ev, mobj, part) {\r

  \  let id = mobj.id;\r

  \  if (boatFilters.includes(id)) {\r

  \    _removeFilterHighlight(mobj);\r

  \    removeInPlace(boatFilters, id);\r

  \    let relids = getList(id2uids[id]);\r

  \    let boats = relids.filter(x => x[2] == 'a');\r

  \    if (isEmpty(boats)) { return; }\r

  \    for (const bid of boats) { if (!fi.includes(bid)) { _showBoat(bid); }
  }\r

  \  } else {\r

  \    let relids = getList(id2uids[id]);\r

  \    let boats = relids.filter(x => x[2] == 'a');\r

  \    if (isEmpty(boats)) { return }\r

  \    if (boats.length == 1) {\r

  \      onClickSelectTuple(null, UIS[boats[0]]);\r

  \    } else {\r

  \      boatFilters.push(id);\r

  \      _addFilterHighlight(mobj);\r

  \      for (const bid of IdOwner.a) { if (!boats.includes(bid)) {
  _hideBoat(bid) } }\r

  \    }\r

  \  }\r

  }"
onClickFloppy: "function onClickFloppy() {\r

  \  savedb();\r

  }"
onClickFreezer: function onClickFreezer() { console.log('YEP!
  onClickFreezer!!!!!!!'); hide('freezer'); startUnit(); }
onClickFreezer2: "function onClickFreezer2(ev) {\r

  \  clearTable(); mRemoveClass(mBy('freezer2'), 'aniSlowlyAppear');
  hide('freezer2'); auxOpen = false;\r

  \  startUnit();\r

  }"
onClickGamename: "function onClickGamename(inputElem) {\r

  \  updateGamename(inputElem.value.toString());\r

  \  updatePlayersForGame();\r

  }"
onClickGamesMenu: "function onClickGamesMenu(text) {\r

  \  console.log('clicked on menu: ', text);\r

  \  console.log('open menu is ', getVisibleChild('dGames'));\r

  \  let id = 'd' + capitalize(text);\r

  \  if (id == getVisibleChild('dGames')) { console.log('NOPE!'); return; }\r

  \  transitionTo(id);\r

  \  window['onClick_' + text]();\r

  }"
onClickGear: "function onClickGear() {\r

  \  openAux();\r

  \  hide('dGear');\r

  \  hide('dCalibrate');\r

  \  Settings.createSettingsUi(dAux);\r

  }"
onClickGetUIS: "function onClickGetUIS(mobj, part) {\r

  \  let id = mobj.id;\r

  }"
onClickGo: "function onClickGo(ev) {\r

  \  if (isVisible('dTemple')) {\r

  \    closeAux();\r

  \    if (G.controllerType == 'solitaire') GC.startGame(); else
  GC.activateUi();\r

  \  } else {\r

  \    let item = isdef(ev) ? evToItemC(ev) : null;\r

  \    let gKey = nundef(ev) ? SelectedMenuKey : isString(ev) ? ev :
  item.id;\r

  \    if (gKey != SelectedMenuKey) {\r

  \      if (isdef(SelectedMenuKey))
  toggleItemSelection(Items[SelectedMenuKey]);\r

  \      SelectedMenuKey = gKey;\r

  \      let item = Items[SelectedMenuKey];\r

  \      toggleItemSelection(item);\r

  \    } else {\r

  \      closeAux();\r

  \      setGame(gKey);\r

  \      GC.startGame();\r

  \    }\r

  \  }\r

  }"
onClickInvalidate: function onClickInvalidate() { testEngine.invalidate(); }
onClickIVPicture: "function onClickIVPicture(ev) {\r

  \  ev.cancelBubble = true;\r

  \  let pic = findItemFromEvent(Pictures, ev);\r

  \  toggleSelectionOfPicture(pic);\r

  }"
onClickJoinGame: "function onClickJoinGame() {\r

  \  if (S.gameInProgress) {\r

  \    alert('CANNOT JOIN! game has already started!!! click create game to
  start a new game or restart to restart current game');\r

  \    return;\r

  \  }\r

  \  console.log('playMode:', S.settings.playMode, 'PLAYMODE', PLAYMODE,
  'S.playModeChanged', S.playModeChanged)\r

  \  S.settings.username = USERNAME;\r

  \  S.settings.playMode = PLAYMODE;\r

  \  S.settings.game = GAME;\r

  \  console.log('playMode:', S.settings.playMode, 'PLAYMODE', PLAYMODE,
  'S.playModeChanged', S.playModeChanged)\r

  \  switch (S.settings.playMode) {\r

  \    case 'multiplayer': _startMultiplayer(); break;\r

  \    case 'hotseat': _startHotseat(); break;\r

  \    case 'solo':\r

  \    default: break;\r

  \  }\r

  }"
onClickJoinGameCancel: "function onClickJoinGameCancel() {\r

  \  closeJoinConfig();\r

  }"
onClickJoinGameLobby: "function onClickJoinGameLobby() {\r

  \  openJoinConfig();\r

  }"
onClickJoinGameOk: "function onClickJoinGameOk() {\r

  \  isPlaying = false;\r

  \  disableResumeButton();\r

  \  if (!joinCandidate) {\r

  \    setMessage('you did NOT join the game!')\r

  \  } else {\r

  \    let countMes = 0;\r

  \    for (pl of S.gameConfig.players) {\r

  \      if (!isEmpty(pl.username) && startsWith(pl.username, USERNAME))
  countMes += 1;\r

  \    }\r

  \    let uname = USERNAME + (countMes > 0 ? countMes : '');\r

  \    joinCandidate.username = uname;\r

  \    socketEmitMessage(uname + ' joined as ' + joinCandidate.id);\r

  \  }\r

  \  closeJoinConfig();\r

  \  if (checkGameConfigComplete()) {\r

  \    disableJoinButton();\r

  \  }\r

  }"
onClickListOfObj: "function onClickListOfObj(b) {\r

  \  console.log('clicked', b.textContent);\r

  }"
onClickLoadStateAndSettings: "function onClickLoadStateAndSettings() {\r

  \  let prefix = prompt('enter name: ');\r

  \  if (prefix in HistoryOfStates) {\r

  \    let pack = HistoryOfStates[prefix];\r

  \    console.log('loaded state', prefix, 'freeForm', pack.settings.freeForm,
  'board', pack.settings.boardFilename)\r

  \    Socket.emit('state', pack);\r

  \  }\r

  }"
onClickLoadStateAndSettings_dep: "function onClickLoadStateAndSettings_dep() {\r

  \  let prefix = prompt('enter name: ');\r

  \  if (!isEmpty(prefix)) recoverStateAndSettings(prefix);\r

  }"
onClickLobby: "function onClickLobby() {\r

  \  lobbyView();\r

  \  if (!isReallyMultiplayer) openGameConfig();\r

  }"
onClickLogout: function onClickLogout() { logout(); }
onClickMeasure: "function onClickMeasure() {\r

  \  recMeasureOverride(R.tree.uid, R);\r

  \  updateOutput(R);\r

  }"
onClickMenu: "function onClickMenu(text) {\r

  \  let subMenu = capitalize(text);\r

  \  let id = 'd' + subMenu;\r

  \  console.log('menu id clicked:', id);\r

  \  if (id == getVisibleChild('dInnerLeft')) { console.log('NOPE!'); return;
  }\r

  \  let delay1 = hideCurrent();\r

  \  setTimeout(() => {\r

  \    let delay2 = text == 'chat' || text == 'tables' ? closeLeftPane() :
  openLeftPane();\r

  \    setTimeout(() => { showCurrent(id); window['onClickMenu' + subMenu]();
  }, delay2 + 100);\r

  \  }, delay1 + 100);\r

  }"
onClickMenuAccount: function onClickMenuAccount() { show_account(); }
onClickMenuChat: "async function onClickMenuChat() {\r

  \  chatStartOrActivate();\r

  }"
onClickMenuContacts: function onClickMenuContacts() { get_data('contacts'); }
onClickMenuGames: function onClickMenuGames() { show_games(); }
onClickMenuItem: function onClickMenuItem(ev) { onClickGo(ev); }
onClickMenuTables: function onClickMenuTables() { }
onClickModifyLayout: "function onClickModifyLayout(ev) {\r

  \  let button = ev.target;\r

  \  if (ActiveButton == button) { onClickActivateLayout(); return; }\r

  \  openAux('board settings', button);\r

  \  let wWidget = 380;\r

  \  let [s, b] = [G.settings, G.clientBoard];\r

  \  let styles = { w: wWidget, align: 'center', margin: 6 };\r

  \  let inpRows = mEditRange('rows: ', s.rows, 1, 20, 1, dAuxContent, (a) =>
  { setApply('rows', a) }, styles);\r

  \  let inpCols = mEditRange('cols: ', s.cols, 1, 20, 1, dAuxContent, (a) =>
  { setApply('cols', a) }, styles);\r

  \  let inpXOffset = mEditRange('x-offset: ', s.boardMarginLeft, -100, 100,
  1, dAuxContent, (a) => { setApply('boardMarginLeft', a) }, styles);\r

  \  let inpYOffset = mEditRange('y-offset: ', s.boardMarginTop, -100, 100, 1,
  dAuxContent, (a) => { setApply('boardMarginTop', a) }, styles);\r

  \  let inpRot = mEditRange('rotation: ', s.boardRotation, 0, 90, 1,
  dAuxContent, (a) => { setApply('boardRotation', a) }, styles);\r

  \  mLinebreak(dAuxContent);\r

  \  let inpWidth = mEditRange('center dx: ', s.dxCenter, 10, 200, 1,
  dAuxContent, (a) => { setApply('dxCenter', a) }, styles);\r

  \  let inpHeight = mEditRange('center dy: ', s.dyCenter, 10, 200, 1,
  dAuxContent, (a) => { setApply('dyCenter', a) }, styles);\r

  \  let inpFieldSize = mEditRange('field size: ', s.szField, 10, 200, 1,
  dAuxContent, (a) => { setApply('szField', a) }, styles);\r

  \  mLinebreak(dAuxContent);\r

  \  let inpSzPerle = mEditRange('perle %: ', s.szPerle, 50, 125, 1,
  dAuxContent, (a) => { setApply('szPerle', a) }, styles);\r

  \  let inpszPoolPerle = mEditRange('pool perle: ', s.szPoolPerle, 40, 140,
  1, dAuxContent, (a) => { setApply('szPoolPerle', a) }, styles);\r

  \  let inpDimming = mEditRange('dimming %: ', s.dimming, 0, 100, 1,
  dAuxContent, (a) => { setApply('dimming', a) }, styles);\r

  \  mLinebreak(dAuxContent);\r

  \  let inpFieldColor = mColorPickerControl('field color: ', s.fieldColor,
  b.img, dAuxContent, (a) => { setApply('fieldColor', a) }, styles);\r

  \  console.log('basecolor', s.baseColor);\r

  \  let inpBaseColor = mColorPickerControl('background: ', s.baseColor,
  b.img, dAuxContent, (a) => { setApply('baseColor', a) }, styles);\r

  \  let inpFullCover = mCheckbox('complete rows: ', s.boardLayout == 'hex1' ?
  false : true, dAuxContent,\r

  \    (a) => {\r

  \      setApply('boardLayout', a ? 'hex' : 'hex1');\r

  \    }, styles);\r

  \  let inpfreeForm = mCheckbox('free drop: ', s.freeForm ? true : false,
  dAuxContent, (a) => { setApply('freeForm', a == 1 ? true : false) },
  styles);\r

  }"
onClickMusic: "function onClickMusic() {\r

  \  toggleSound('mozart');\r

  \  if (isPlaying()) { hide0('bPlay'); show0('bPause'); } else {
  hide0('bPause'); show0('bPlay'); }\r

  }"
onClickNewColors: "function onClickNewColors() {\r

  \  iTHEME = (iTHEME + 1) % THEMES.length;\r

  \  let color = THEMES[iTHEME];\r

  \  document.body.style.backgroundColor = color;\r

  \  let fg = colorIdealText(color)\r

  \  document.body.style.color = fg;\r

  }"
onClickNextButton: function onClickNextButton() { startRound(); }
onClickNextExample: function onClickNextExample() { }
onClickNextGame: function onClickNextGame() { setNextGame(); GC.startGame(); }
onClickNextPlayerReady: "function onClickNextPlayerReady() {\r

  \  if (WAITINGFORPLAYER !== null) {\r

  \    let user = getUsernameForPlayer(WAITINGFORPLAYER);\r

  \    WAITINGFORPLAYER = null;\r

  \    sendStatus(user, [d => { hide('freezer'); gameStep(d) }]);\r

  \  }\r

  }"
onClickNextTest: "async function onClickNextTest() {\r

  \  setRSG_SOURCE('main');\r

  \  await testEngine.loadNextTestCase();\r

  \  await rParse(RSG_SOURCE, { defs: testEngine.defs, spec: testEngine.spec,
  sdata: testEngine.sdata });\r

  }"
onClickNextTestOfSeries: "function onClickNextTestOfSeries() {\r

  \  setRSG_SOURCE('test');\r

  \  nextTestOfSeries(false);\r

  }"
onClickPaletteButton: "function onClickPaletteButton() {\r

  \  alert('FUNCTION DISABLED!')\r

  \  return;\r

  \  IsCanvasActive = !IsCanvasActive;\r

  \  let canvas = mBy('sheet')\r

  \  if (IsCanvasActive) {\r

  \    canvas.style.userSelect = 'auto';\r

  \    console.log(G.clientBoard)\r

  \    let r = getRect(G.clientBoard.dOuter); r.left = r.x; r.top = r.y;\r

  \    console.log('rectBoard', r);\r

  \    mStyleX(canvas, r);\r

  \    halloIchZeichneJetzt();\r

  \  } else {\r

  \    canvas.style.userSelect = 'none';\r

  \    canvas.onmousedown = null;\r

  \    canvas.onmousemove = null;\r

  \    canvas.onmouseup = null;\r

  \  }\r

  }"
onClickPass: "function onClickPass() {\r\n}"
onClickPerlenPool: "function onClickPerlenPool(ev) {\r

  \  let button = ev.target;\r

  \  if (ActiveButton == button) { doPerlenPoolChanges(); return; }\r

  \  openAux('perlen pool', button);\r

  \  let wWidget = 380;\r

  \  let styles = { w: wWidget, align: 'center', margin: 6 };\r

  \  let defOptions = { nAdd: 5, nRemove: 5, clearBoard: false, justRandom:
  true };\r

  \  if (nundef(G.perlenOptions)) G.perlenOptions = {};\r

  \  let s = G.perlenOptions;\r

  \  copyKeys(defOptions, s);\r

  \  let dp = mBy('dAuxContent');\r

  \  let inpAddRandom = mEditRange('add: ', s.nAdd, 1, 20, 1, dp, (a) => {
  s.nAdd = a; }, styles);\r

  \  let inpRemove = mEditRange('remove: ', s.nRemove, 1, 20, 1, dp, (a) => {
  s.nRemove = a; }, styles);\r

  \  let inpClearBoard = mCheckbox('clear board: ', s.clearBoard, dp, (a) => {
  s.clearBoard = a; }, styles);\r

  \  let inpClearPool = mCheckbox('clear pool: ', s.clearPool, dp, (a) => {
  s.clearPool = a; }, styles);\r

  \  let inpOnlyRandom = mCheckbox('just random: ', s.justRandom, dp, (a) => {
  s.justRandom = a; }, styles);\r

  }"
onClickPlain: "function onClickPlain() {\r

  \  S.settings.userBehaviors = false;\r

  \  S.settings.userStructures = false;\r

  \  S.settings.userSettings = false;\r

  \  S.settings.boardDetection = S_boardDetection = false;\r

  \  S.settings.deckDetection = S_deckDetection = false;\r

  \  S.settings.openTab = 'ObjectsTab';\r

  \  redrawScreen();\r

  }"
onClickPlay: "function onClickPlay() {\r

  \  S.settings.username = USERNAME;\r

  \  S.settings.playMode = PLAYMODE;\r

  \  S.settings.game = GAME;\r

  \  console.log(S.settings.username, S.settings.playMode, S.settings.game);\r

  \  switch (S.settings.playMode) {\r

  \    case 'multiplayer': whichGame(onWhichGame);\r

  \      break;\r

  \    case 'hotseat': _startHotseat();\r

  \      break;\r

  \    case 'solo':\r

  \    default:\r

  \      break;\r

  \  }\r

  }"
onClickPlayerPresence: "function onClickPlayerPresence(n) {\r

  \  isOptional = (n > numPlayersMin) && (n <= numPlayersMax);\r

  \  if (!isOptional) return;\r

  \  let el = getPlayerRadio(n);\r

  \  let isActive = isPlayerChecked(n);\r

  \  if (isActive) checkPlayer(n); else uncheckPlayer(n);\r

  \  if (isActive) for (let i = numPlayersMin + 1; i < n; i++) { if
  (!isPlayerChecked(i)) checkPlayer(i); }\r

  \  else for (let i = n + 1; i <= numPlayersMax; i++) { if
  (isPlayerChecked(i)) uncheckPlayer(i); }\r

  \  let cnt = 0;\r

  \  for (let i = 1; i <= numPlayersMax; i++) { if (isPlayerChecked(i)) cnt +=
  1; }\r

  \  currentNumPlayers = cnt;\r

  }"
onClickPlaymode: "function onClickPlaymode(mode) {\r

  \  updatePlaymode(mode);\r

  \  updatePlayersForMode();\r

  }"
onClickPlusControlInfobox: function onClickPlusControlInfobox(ev, mobj, part) {
  if (ev.ctrlKey) { openInfobox(ev, mobj, part); } }
onClickPollStatus: "function onClickPollStatus() {\r

  \  sendStatus(USERNAME, [gameStep]);\r

  }"
onClickPrefabGallery: "function onClickPrefabGallery() {\r

  \  openAux('choose board + layout');\r

  \  let standards = DB.standardSettings;\r

  \  let boardExamples = {};\r

  \  for (const stdName in standards) {\r

  \    let std = standards[stdName];\r

  \    let d = mDiv(dAuxContent, { margin: 10, cursor: 'pointer' });\r

  \    addKeys(G.settings, std);\r

  \    let b = applyStandard(d, std, 200, 100);\r

  \    boardExamples[stdName] = {\r

  \      key: stdName,\r

  \      board: b,\r

  \      settings: std,\r

  \      dParent: d,\r

  \    }\r

  \    d.onclick = () => {\r

  \      DA.lastPrefabName = stdName;\r

  \      copyKeys(std, G.settings);\r

  \      Socket.emit('settings', { settings: G.settings });\r

  \      closeAux();\r

  \    }\r

  \  }\r

  }"
onClickPrevTest: "async function onClickPrevTest() {\r

  \  setRSG_SOURCE('main');\r

  \  await testEngine.loadPrevTestCase();\r

  \  await rParse(RSG_SOURCE, { defs: testEngine.defs, spec: testEngine.spec,
  sdata: testEngine.sdata });\r

  }"
onClickPrevTestOfSeries: "function onClickPrevTestOfSeries() {\r

  \  setRSG_SOURCE('test');\r

  \  iTEST -= 2; if (iTEST < 0) iTEST = 0;\r

  \  nextTestOfSeries();\r

  }"
onClickPushScenario: "function onClickPushScenario(cheatCode, actionCode) {\r

  \  scenarioQ.push(() => sendRoute('/cheat/' + cheatCode, () =>
  onClickRunToAction(actionCode)));\r

  \  scenarioQ.push(() => onClickSelectTuple(null,
  strategicBoat([actionCode])));\r

  \  if (!scenarioRunning) { scenarioRunning = true; onClickStep(); }\r

  }"
onClickRecovery: function onClickRecovery() { recoverStateAndSettings(); }
onClickRecpoint: function onClickRecpoint() { saveStateAndSettings(); }
onClickReloadAll: "async function onClickReloadAll() {\r

  \  vidCache.invalidate('testCards', 'allGames', 'userSpec', 'serverData',
  'userCode');\r

  \  _startSession();\r

  }"
onClickReloadSpec: "async function onClickReloadSpec() {\r

  \  await loadSpecAndCode();\r

  \  presentSpecAndCode();\r

  \  redrawScreen();\r

  }"
onClickRemoteConnection: "function onClickRemoteConnection() {\r

  \  if (isdef(DA.remoteSocket)) DA.remoteSocket.disconnect();\r

  \  let socket = DA.remoteSocket =
  io('https://simplesimpleserver.herokuapp.com');\r

  \  socket.on('fromServer', x => console.log('msg from remote:', x.msg));\r

  \  socket.on('ping', x => console.log('got pinged from remote!'));\r

  \  socket.emit('ping');\r

  }"
onClickRemove: function onClickRemove() { testRemoveObject(T); }
onClickRemove5Random: "function onClickRemove5Random() {\r

  \  closeAux();\r

  \  Socket.emit('removeRandom', { n: 5 });\r

  }"
onClickRemoveActions: "function onClickRemoveActions() {\r

  \  timit.showTime('start ' + getFunctionCallerName());\r

  \  deleteActions();\r

  \  timit.showTime('...end ' + getFunctionCallerName());\r

  }"
onClickRemoveBoard: function onClickRemoveBoard() { removeBoard(T); }
onClickRemoveDefaultObjects: "function onClickRemoveDefaultObjects() {\r

  \  timit.showTime('start ' + getFunctionCallerName());\r

  \  deleteDefaultObjects();\r

  \  timit.showTime('...end ' + getFunctionCallerName());\r

  }"
onClickRemoveDefaultPlayers: "function onClickRemoveDefaultPlayers() {\r

  \  timit.showTime('start ' + getFunctionCallerName());\r

  \  deleteDefaultPlayers();\r

  \  timit.showTime('...end ' + getFunctionCallerName());\r

  }"
onClickRemoveInteraction: "function onClickRemoveInteraction() {\r

  \  timit.showTime('start ' + getFunctionCallerName());\r

  \  for (const id in UIS) UIS[id].removeEvents();\r

  \  timit.showTime('...end ' + getFunctionCallerName());\r

  }"
onClickRemoveRobber: function onClickRemoveRobber() { removeRobber(T); }
onClickRepeatTest: "async function onClickRepeatTest() {\r

  \  setRSG_SOURCE('main');\r

  \  await testEngine.repeatTestCase();\r

  \  await rParse(RSG_SOURCE, { defs: testEngine.defs, spec: testEngine.spec,
  sdata: testEngine.sdata });\r

  }"
onClickRepeatTestOfSeries: "function onClickRepeatTestOfSeries() {\r

  \  setRSG_SOURCE('test');\r

  \  iTEST -= 1; if (iTEST < 0) iTEST = 0;\r

  \  nextTestOfSeries(false);\r

  }"
onClickResetAll: "function onClickResetAll() {\r

  \  Socket.emit('reset');\r

  }"
onClickResetLocal: "async function onClickResetLocal() {\r

  \  _startSession(true);\r

  }"
onClickResetTest: "function onClickResetTest() {\r

  \  setRSG_SOURCE('test');\r

  \  iTEST = 0;\r

  }"
onClickResizeBoard: "function onClickResizeBoard() {\r

  \  let nuiBoard = R.uiNodes['_2'];\r

  \  nuiBoard.adirty = true;\r

  \  lookupSetOverride(nuiBoard, ['resizeInfo', 'fields'], 180);\r

  \  recMeasureOverride(R.tree.uid, R);\r

  }"
onClickRestart: "function onClickRestart() {\r

  \  unfreezeUI();\r

  \  _startRestartSame();\r

  }"
onClickResumeGameLobby: "function onClickResumeGameLobby() {\r

  \  closeGameConfig();\r

  \  gameView();\r

  }"
onClickRetrieveColor: "function onClickRetrieveColor() {\r

  \  let color = localStorage.getItem('background');\r

  \  console.log('retrieved baseColor', color);\r

  \  G.settings.baseColor = color;\r

  \  Socket.emit('settings', { settings: G.settings });\r

  }"
onClickRetrieveLastState: "function onClickRetrieveLastState() {\r

  \  let lastState = G.lastStateman.getLastStateSaved();\r

  \  let s = lastState.settings;\r

  \  console.log('retrieve baseColor', s.baseColor);\r

  \  Socket.emit('initLastState', { lastState: lastState });\r

  \  return;\r

  \  let elem = createElementFromHTML(`\r

  \    <form action=\"/lastState\" method=\"post\"
  enctype=\"multipart/form-data\">\r

  \    <input type=\"file\" name=\"lastState\" placeholder=\"Select file\"
  />\r

  \    <br />\r

  \    <button>Upload</button>\r

  \    </form>\r

  \  `);\r

  \  show(dAux);\r

  \  clearElement(dAuxContent);\r

  \  mAppend(dAuxContent, elem);\r

  }"
onClickRetrieveSettings: "function onClickRetrieveSettings() {\r

  \  let settings = localStorage.getItem('settings');\r

  \  if (isdef(settings)) {\r

  \    settings = JSON.parse(settings);\r

  \    console.log('retrieved settings (baseColor)', settings.baseColor);\r

  \    G.settings = settings;\r

  \    Socket.emit('settings', { settings: G.settings });\r

  \  } else {\r

  \    console.log('no settings in localStorage!');\r

  \  }\r

  }"
onClickRetrieveSettings_dep: "function onClickRetrieveSettings_dep() {\r

  \  let settings = localStorage.getItem('settings');\r

  \  if (isdef(settings)) {\r

  \    settings = JSON.parse(settings);\r

  \    console.log('retrieved settings (baseColor)', settings.baseColor);\r

  \    G.settings = settings;\r

  \    Socket.emit('settings', { settings: G.settings });\r

  \  } else {\r

  \    console.log('no settings in localStorage!');\r

  \  }\r

  }"
onClickRetrieveState: "function onClickRetrieveState() {\r

  \  let state = localStorage.getItem('state');\r

  \  let randomIndices = localStorage.getItem('randomIndices');\r

  \  if (isdef(state) && isdef(randomIndices)) {\r

  \    state = JSON.parse(state);\r

  \    randomIndices = JSON.parse(randomIndices);\r

  \    console.log('retrieved state (boardArr)', state.boardArr.filter(x => x
  !== null));\r

  \    Socket.emit('state', { state: state, randomIndices: randomIndices });\r

  \  } else {\r

  \    console.log('no state/randomIndices in localStorage!');\r

  \  }\r

  }"
onClickRun: "async function onClickRun() {\r

  \  setRSG_SOURCE('main');\r

  \  let indexFrom = firstNumber(mBy('iTestCaseFrom').value);\r

  \  localStorage.setItem('iTestCaseFrom', indexFrom);\r

  \  let indexTo = firstNumber(mBy('iTestCaseTo').value);\r

  \  localStorage.setItem('iTestCaseTo', indexTo);\r

  \  verifySequence(indexFrom, indexTo, false);\r

  }"
onClickRunAll: "async function onClickRunAll() {\r

  \  setRSG_SOURCE('main');\r

  \  STOP = false;\r

  \  isTraceOn = false;\r

  \  let sel = mBy('selSeries');\r

  \  let listSeries = [];\r

  \  for (const ch of sel.children) {\r

  \    if (ch.value != 'none') listSeries.push(DIR_TESTS + '/' + ch.value);\r

  \  }\r

  \  let imax = await testEngine.loadSeries(listSeries[0]);\r

  \  show('btnStop');\r

  \  await runNextSeries(listSeries, listSeries[0], 0, imax);\r

  }"
onClickRunButton: "function onClickRunButton(b) { b.innerHTML = 'Stop';
  mStyleX(bRunStop, { bg: 'red' }); StepByStepMode = false; startRound(); }"
onClickRunStopButton: function onClickRunStopButton(b) { if (StepByStepMode) {
  onClickRunButton(b); } else { onClickStopButton(b); } }
onClickRunToAction: "function onClickRunToAction(keyword) {\r

  \  S_autoplayFunction = (_G) => {\r

  \    for (const mobj of getBoats()) {\r

  \      for (const ti of mobj.o.tuple) {\r

  \        if (ti.val.toString().includes(keyword)) {\r

  \          setAutoplayFunctionForMode();\r

  \          return false;\r

  \        }\r

  \      }\r

  \    }\r

  \    return true;\r

  \  }\r

  \  onClickStep(G);\r

  }"
onClickRunToEnd: "function onClickRunToEnd() {\r

  \  S_autoplayFunction = () => true;\r

  \  onClickStep(G);\r

  }"
onClickRunToNextPhase: "function onClickRunToNextPhase() {\r

  \  let phase = G.phase;\r

  \  S_autoplayFunction = (_G) => _G.phase == phase;\r

  \  onClickStep(G);\r

  }"
onClickRunToNextPlayer: "function onClickRunToNextPlayer() {\r

  \  let pl = G.player;\r

  \  S_autoplayFunction = (_G) => _G.player == pl;\r

  \  onClickStep(G);\r

  }"
onClickRunToNextTurn: "function onClickRunToNextTurn() {\r

  \  let pl = G.player;\r

  \  S_autoplayFunction = (_G) => {\r

  \    if (_G.player != pl) {\r

  \      S_autoplayFunction = (_G1, _) => _G1.player != pl;\r

  \    };\r

  \    return true;\r

  \  };\r

  \  onClickStep(G);\r

  }"
onClickRunToPlayerChange: "function onClickRunToPlayerChange(player) {\r

  \  STOP = false;\r

  \  showStop();\r

  \  execOptions.skipCond = () => H.player == player;\r

  \  decider.onClickStep(H);\r

  }"
onClickSave: function onClickSave() { testEngine.saveSolution(T); }
onClickSaveAsPrefab: "function onClickSaveAsPrefab() {\r

  \  let prefabName = prompt('enter name: ', DA.lastPrefabName);\r

  \  Socket.emit('prefab', { name: prefabName, settings: G.settings });\r

  \  closeAux();\r

  }"
onClickSaveColor: "function onClickSaveColor() {\r

  \  localStorage.setItem('background', G.settings.baseColor);\r

  \  console.log('saved baseColor', G.settings.baseColor);\r

  }"
onClickSaveLastState: "function onClickSaveLastState() {\r

  \  let lastStateSaved = G.lastStateman.save(G, true);\r

  \  let s = lastStateSaved.settings;\r

  \  console.log('save baseColor', s.baseColor);\r

  }"
onClickSaveSettings: "function onClickSaveSettings() {\r

  \  localStorage.setItem('settings', JSON.stringify(G.settings));\r

  \  console.log('saved settings (baseColor)', G.settings.baseColor);\r

  }"
onClickSaveState: "function onClickSaveState() {\r

  \  let st = G.state;\r

  \  let state = { boardArr: st.boardArr, poolArr: st.poolArr, pool: {} };\r

  \  for (const k in st.pool) {\r

  \    let oNew = state.pool[k] = {};\r

  \    copyKeys(st.pool[k], oNew, {}, ['index', 'key']);\r

  \  }\r

  \  localStorage.setItem('state', JSON.stringify(state));\r

  \  localStorage.setItem('randomIndices', JSON.stringify(G.randomIndices));\r

  \  console.log('saved state (boardArr)', state.boardArr.filter(x => x !==
  null));\r

  \  console.log('saved state (pool)', Object.keys(state.pool));\r

  }"
onClickSaveStateAndSettings: "function onClickSaveStateAndSettings() {\r

  \  let prefix = prompt('enter name: ');\r

  \  addStateToHistory(prefix);\r

  }"
onClickSaveStateAndSettings_dep: "function onClickSaveStateAndSettings_dep() {\r

  \  let prefix = prompt('enter name: ');\r

  \  if (!isEmpty(prefix)) saveStateAndSettings(prefix);\r

  }"
onClickSaveToHistory: "function onClickSaveToHistory() {\r

  \  console.log('save to history!');\r

  \  let l = G.lastStateman.lastState;\r

  \  downloadAsYaml(l, 'lastState');\r

  }"
onClickScenario: "function onClickScenario() {\r

  \  scenarioQ = [];\r

  \  for (let i = 0; i < 1; i++) {\r

  \    scenarioQ.push(cheatDevcard);\r

  \    scenarioQ.push(selectBuyDeckcard);\r

  \  }\r

  \  if (!scenarioRunning) { scenarioRunning = true; onClickRunToNextPhase();
  }\r

  \  console.log('...scenario', scenario)\r

  }"
onClickSelectTuple: "function onClickSelectTuple(ev, mobj, part) {\r

  \  if (choiceCompleted) return;\r

  \  choiceCompleted = true;\r

  \  iTuple = mobj.o.iTuple;\r

  \  freezeUI();\r

  \  stopAllHighlighting();\r

  \  sendAction(mobj.o, [gameStep]);\r

  }"
onClickShield: "function onClickShield(ev) {\r

  \  ev.stopPropagation();\r

  \  console.log('wait...?');\r

  \  hideShield();\r

  }"
onClickShowSavedColor: "function onClickShowSavedColor() {\r

  \  let color = localStorage.getItem('background');\r

  \  console.log('saved background is', color);\r

  }"
onClickShowSavedSettings: "function onClickShowSavedSettings() {\r

  \  let settings = localStorage.getItem('settings');\r

  \  if (isdef(settings)) {\r

  \    settings = JSON.parse(settings);\r

  \    console.log('saved settings (baseColor)', settings.baseColor);\r

  \  } else {\r

  \    console.log('no settings in localStorage!');\r

  \  }\r

  }"
onClickShowSavedState: "function onClickShowSavedState() {\r

  \  let state = localStorage.getItem('state');\r

  \  let randomIndices = localStorage.getItem('randomIndices');\r

  \  if (isdef(state) && isdef(randomIndices)) {\r

  \    state = JSON.parse(state);\r

  \    randomIndices = JSON.parse(randomIndices);\r

  \    console.log('retrieved state (boardArr)', state.boardArr.filter(x => x
  !== null));\r

  \  } else {\r

  \    console.log('no state/randomIndices in localStorage!');\r

  \  }\r

  }"
onClickSmallerBoard: "function onClickSmallerBoard() {\r

  \  let nuiBoard = R.uiNodes['_2'];\r

  \  nuiBoard.adirty = true;\r

  \  lookupSetOverride(nuiBoard, ['resizeInfo', 'fields'], 32);\r

  \  recMeasureOverride(R.tree.uid, R);\r

  }"
onClickSpec: "function onClickSpec() {\r

  \  S.settings.userBehaviors = false;\r

  \  S.settings.userStructures = true;\r

  \  S.settings.userSettings = true;\r

  \  S.settings.boardDetection = S_boardDetection = true;\r

  \  S.settings.deckDetection = S_deckDetection = true;\r

  \  S.settings.openTab = 'SpecTab';\r

  \  redrawScreen();\r

  }"
onClickSpecAndCode: "function onClickSpecAndCode() {\r

  \  S.settings.userBehaviors = true;\r

  \  S.settings.userStructures = true;\r

  \  S.settings.userSettings = true;\r

  \  S.settings.boardDetection = S_boardDetection = true;\r

  \  S.settings.deckDetection = S_deckDetection = true;\r

  \  S.settings.openTab = 'CodeTab';\r

  \  redrawScreen();\r

  }"
onClickStartButton: function onClickStartButton() { startGame(); }
onClickStartGame: "function onClickStartGame() {\r

  \  _sendRoute('/begin/1', d6 => {\r

  \    timit.showTime('sending status');\r

  \    _sendRoute('/status/' + USERNAME, d7 => {\r

  \      let data = JSON.parse(d7);\r

  \      processData(data);\r

  \      specAndDOM([gameStep]);\r

  \    });\r

  \  });\r

  }"
onClickStep: "function onClickStep() {\r

  \  if (!this.choiceCompleted) {\r

  \    let mobj = getNextStartBoat();\r

  \    if (nundef(mobj)) mobj = getBoatWith(['demand', 'offer'], false);\r

  \    if (nundef(mobj)) mobj = getBoatWith(['buy'], true);\r

  \    if (nundef(mobj)) mobj = getBoatWith(['pass'], true);\r

  \    if (nundef(mobj)) mobj = getBoatWith(['demand', 'offer'], false);\r

  \    if (nundef(mobj)) mobj = getRandomBoat();\r

  \    onClickSelectTuple(null, mobj);\r

  \  }\r

  }"
onClickSteps: "function onClickSteps() {\r

  \  STOP = false;\r

  \  showStop();\r

  \  let n = document.getElementById('inSteps').value;\r

  \  stepCounter = Number(n) + 1;\r

  \  console.log('steps:', stepCounter - 1);\r

  \  execOptions.skipCond = () => {\r

  \    if (stepCounter > 1) stepCounter -= 1;\r

  \    return stepCounter > 1;\r

  \  };\r

  \  decider.onClickStep(H);\r

  }"
onClickStop: "function onClickStop() {\r

  \  setAutoplayFunctionForMode(PLAYMODE);\r

  \  unfreezeUI();\r

  }"
onClickStopButton: "function onClickStopButton(b) { b.innerHTML = 'Run';
  mStyleX(bRunStop, { bg: 'green' }); StepByStepMode = true; }"
onClickSubmitImageChange: function onClickSubmitImageChange() {
  sendHtml('imgPreview', Username); DA.imageChanged = false; }
onClickSubmitUsernameChange: function onClickSubmitUsernameChange(newUsername) {
  window.location = "index.php?user=" + newUsername; }
onClickTemple: "function onClickTemple() {\r

  \  openAux();\r

  \  hide('dTemple');\r

  \  createMenuUi(dAux);\r

  }"
onClickTempleLobby: "function onClickTempleLobby() {\r

  \  START_IN_MENU = true;\r

  \  initGameScreen();\r

  }"
onclickTest: "function onclickTest(x) {\r

  \  console.log('TEST!', x)\r

  }"
onClickToggle: "function onClickToggle(b, key) {\r

  \  let content = b.textContent;\r

  \  let isOn = (content[0] == '-');\r

  \  if (isOn) {\r

  \    window['S_' + key] = false;\r

  \    b.textContent = '+' + content.substring(1);\r

  \  } else {\r

  \    window['S_' + key] = true;\r

  \    b.textContent = '-' + content.substring(1);\r

  \  }\r

  }"
onClickToggleButton: "function onClickToggleButton(button, handlerList) {\r

  \  let current = button.textContent;\r

  \  let idx = -1;\r

  \  let i = 0;\r

  \  for (const item of handlerList) {\r

  \    if (item[0] == current) {\r

  \      idx = i; break;\r

  \    }\r

  \    i += 1;\r

  \  }\r

  \  if (idx >= 0) {\r

  \    let idxNew = (idx + 1) % handlerList.length;\r

  \    button.textContent = handlerList[idxNew][0];\r

  \    handlerList[idxNew][1]();\r

  \  }\r

  }"
onClickToggleInteractivity: "function onClickToggleInteractivity(desc) {\r

  \  let d = mBy('div' + desc);\r

  \  if (isVisible(d)) { hideMenu(desc); } else { showMenu(desc); }\r

  }"
onClickToolbarButton: "function onClickToolbarButton() {\r

  \  if (isVisible('sidebar')) {\r

  \    hide('sidebar');\r

  \    mStyleX(dTable, { w: 'calc( 100% - 120 )' });\r

  \  } else {\r

  \    show('sidebar');\r

  \    mStyleX(dTable, { w: '100%' });\r

  \  }\r

  }"
onClickTop: "function onClickTop() {\r

  \  mBy('sidebar').scrollTo(0, 0);\r

  \  mBy('pageContent').scrollTo(0, 0);\r

  }"
onClickTTT: "function onClickTTT() {\r

  \  GAME = S.settings.game = 'ttt';\r

  \  PLAYMODE = S.settings.playmode = 'hotseat';\r

  \  S.gameConfig = gcs[GAME];\r

  \  _startNewGame('starter');\r

  }"
onClickUpdateOutput: "function onClickUpdateOutput(elem) {\r

  \  switch (elem.id) {\r

  \    case 'contSpec': if (LEAVE_SPEC_OPEN) SHOW_SPEC = true; else SHOW_SPEC
  = !SHOW_SPEC; break;\r

  \    case 'contMixinSpec': SHOW_MIXINSPEC = !SHOW_MIXINSPEC; break;\r

  \    case 'contLastSpec': SHOW_LASTSPEC = !SHOW_LASTSPEC; break;\r

  \    case 'contUiTree': SHOW_UITREE = !SHOW_UITREE; break;\r

  \    case 'contRTree': SHOW_RTREE = !SHOW_RTREE; break;\r

  \    case 'contOidNodes': SHOW_OIDNODES = !SHOW_OIDNODES; break;\r

  \    case 'contDicts': SHOW_DICTIONARIES = !SHOW_DICTIONARIES; break;\r

  \    case 'contRefsIds': SHOW_IDS_REFS = !SHOW_IDS_REFS; break;\r

  \  }\r

  \  updateOutput(R);\r

  }"
onClickUploadBoard: "function onClickUploadBoard(ev) {\r

  \  openAux('upload board image');\r

  \  let form1 = new FileUploadForm(dAuxContent, 'Upload Board Image',
  'bretter',\r

  \    filename => {\r

  \      if (!filename) console.log('cancel!');\r

  \      else console.log('file ' + filename + ' uploaded successfully!');\r

  \      closeAux();\r

  \    });\r

  }"
onClickUploadPerlen: "function onClickUploadPerlen() {\r

  \  openAux('upload perlen images');\r

  \  let form1 = new FileUploadForm(dAuxContent, 'Upload Perlen Images',
  'perlen',\r

  \    filename => {\r

  \      if (!filename) console.log('cancel!')\r

  \      else console.log('file ' + filename + ' uploaded successfully!');\r

  \      closeAux();\r

  \    });\r

  }"
onClickUseSettings: "function onClickUseSettings() {\r

  \  S.settings.userBehaviors = false;\r

  \  S.settings.userStructures = false;\r

  \  S.settings.userSettings = true;\r

  \  S.settings.boardDetection = S_boardDetection = true;\r

  \  S.settings.deckDetection = S_deckDetection = true;\r

  \  S.settings.openTab = 'SettingsTab';\r

  \  redrawScreen();\r

  }"
onClickVerify: function onClickVerify() { testEngine.verify(T); }
onClickVerifySoFar: async function onClickVerifySoFar() { isTraceOn = false;
  verifySequence(0, testEngine.index, true); }
onClickWordInput: "function onClickWordInput(ev) {\r

  \  return;\r

  \  if (!canAct()) return;\r

  \  ev.cancelBubble = true;\r

  \  let id = evToClosestId(ev);\r

  \  let iWord = Number(stringAfter(id, '_'));\r

  \  let g = Goal.words[iWord];\r

  \  if (nundef(g.hasBlanks) || !g.hasBlanks) return;\r

  \  deactivateFocusGroup();\r

  \  activateFocusGroup(g.iWord);\r

  }"
onDraggingCloneAround: "function onDraggingCloneAround(ev) {\r

  \  console.log('YES!')\r

  \  if (DragElem === null) return;\r

  \  console.log('ev', ev);\r

  \  let mx = ev.clientX;\r

  \  let my = ev.clientY;\r

  \  let dx = mx - DragElem.drag_info.offsetX;\r

  \  let dy = my - DragElem.drag_info.offsetY;\r

  \  mStyle(DragElem, { left: dx, top: dy });\r

  }"
onDragLetter: function onDragLetter(ev) { console.log('YES!', ev.clientX, ev.clientY); }
onDragStartOnLetter1: "function onDragStartOnLetter1(ev) {\r

  \  if (!canAct()) return;\r

  \  ev.preventDefault();\r

  \  let id = evToClosestId(ev);\r

  \  let source = mBy(id);\r

  \  if (isLetterElement(source)) {\r

  \    var clone = DragElem = source.cloneNode(true);\r

  \    clone.id = DragElem.id + '_' + clone;\r

  \    DragSource = source;\r

  \    mAppend(document.body, clone);\r

  \    mClass(clone, 'letter')\r

  \    mClass(clone, 'dragelem');\r

  \    mStyle(clone, { left: ev.clientX - ev.offsetX, top: ev.clientY -
  ev.offsetY });\r

  \    clone.drag_info = { offsetX: ev.offsetX, offsetY: ev.offsetY };\r

  \    clone.setAttribute('draggable', true);\r

  \    clone.ondrag = onDraggingCloneAround;\r

  \    document.body.ondragend = onReleaseLetter;\r

  \  }\r

  }"
onDropLetter: "function onDropLetter(ev) {\r

  \  let els = allElementsFromPoint(ev.clientX, ev.clientY);\r

  \  let inputs = DropZones;\r

  \  for (const inp of inputs) {\r

  \    if (els.includes(inp)) {\r

  \      inp.innerHTML = DragElem.innerHTML;\r

  \      if (startsWith(DragElem.id, 'input')) DragSource.innerHTML = '_';\r

  \      let w = buildWordFromLetters(inp.parentNode);\r

  \      if (!w.includes('_')) GC.evaluate(w, Goal.label.toUpperCase());\r

  \    }\r

  \  }\r

  \  DragElem.remove();\r

  \  DragElem = DragSource = null;\r

  \  document.body.ondrag = document.body.ondragend = null;\r

  }"
one_value_cell_constraint: "function one_value_cell_constraint(board) {\r

  \  updated = false\r

  \  for (let r = 0; r < 9; r++) {\r

  \    for (let c = 0; c < 9; c++) {\r

  \      if (board[r][c] == 0) {\r

  \        updated = complete_cell(board, r, c) || updated\r

  \      }\r

  \    }\r

  \  }\r

  \  for (let r = 0; r < 9; r++) {\r

  \    for (let c = 0; c < 9; c++) {\r

  \      if (Array.isArray(board[r][c])) {\r

  \        let possibilities = board[r][c]\r

  \        updated = appears_once_only(board, possibilities, get_row(board,
  r), r, c) ||\r

  \          appears_once_only(board, possibilities, get_column(board, c), r,
  c) ||\r

  \          appears_once_only(board, possibilities, get_square(board,
  square_coordinates[r][c]), r, c) || updated\r

  \      }\r

  \    }\r

  \  }\r

  \  for (let r = 0; r < 9; r++) {\r

  \    for (let c = 0; c < 9; c++) {\r

  \      if (Array.isArray(board[r][c])) {\r

  \        board[r][c] = 0\r

  \      }\r

  \    }\r

  \  }\r

  \  return updated\r

  }"
oneCircleCenters: "function oneCircleCenters(rows, cols, wCell, hCell) {\r

  \  let [w, h] = [cols * wCell, rows * hCell];\r

  \  let cx = w / 2;\r

  \  let cy = h / 2;\r

  \  let centers = [{ x: cx, y: cy }];\r

  \  let n = 8;\r

  \  let radx = cx - wCell / 2;\r

  \  let rady = cy - hCell / 2;\r

  \  let peri = Math.min(radx, rady) * 2 * Math.PI;\r

  \  n = Math.floor(peri / Math.min(wCell, hCell));\r

  \  while (n > 4 && n % 4 != 0 && n % 6 != 0) n -= 1;\r

  \  centers = getEllipsePoints(radx, rady, n)\r

  \  centers = centers.map(pt => ({ x: pt.X + cx, y: pt.Y + cy }));\r

  \  return [centers, wCell * cols, hCell * rows];\r

  }"
onEnterPerle: "function onEnterPerle(perle) {\r

  \  if (IsControlKeyDown) {\r

  \    iMagnify(perle);\r

  \  }\r

  }"
oneWordKeys: function oneWordKeys(keys) { return keys.filter(x => !x.includes(' ')); }
onExistingPlayers: "function onExistingPlayers(d) {\r

  \  prelude(getFunctionCallerName(), d);\r

  \  if (isError(d)) { restartHost(onHostStarted); return; }\r

  \  d = d.response;\r

  \  availablePlayers(onAvailablePlayers);\r

  }"
onExitPerle: function onExitPerle() { if (IsControlKeyDown) iMagnifyCancel(); }
onGameChosen: "function onGameChosen(d) {\r

  \  prelude(getFunctionCallerName(), d);\r

  \  if (isError(d)) { restartHost(onHostStarted); return; }\r

  \  d = d.response;\r

  \  whichGame(onGameInfo);\r

  }"
onGameInfo: "function onGameInfo(d) {\r

  \  prelude(getFunctionCallerName(), d);\r

  \  if (isError(d)) { restartHost(onHostStarted); return; }\r

  \  d = d.response;\r

  \  S.gameInfo = d;\r

  \  let currentGame = S.gameInfo.name.toLowerCase();\r

  \  availablePlayers(onAvailablePlayers);\r

  }"
onHostStarted: "function onHostStarted(d) {\r

  \  pageHeaderClearPlayers();\r

  \  prelude(getFunctionCallerName(), d);\r

  \  if (isError(d)) throw 'CANNOT RESTART HOST!!!!!!!!!';\r

  \  d = d.response;\r

  \  S.plAddedByMe = {};\r

  \  selectGame(onGameChosen);\r

  }"
onkeydownHandler: "function onkeydownHandler(ev) {\r

  \  if (nundef(DA.keydown)) DA.keydown = {}; for (const k in DA.keydown) {
  DA.keydown[k](ev); }\r

  }"
onkeyupHandler: "function onkeyupHandler(ev) {\r

  \  if (nundef(DA.keyup)) DA.keyup = {};\r

  \  for (const k in DA.keyup) {\r

  \    DA.keyup[k](ev);\r

  \  }\r

  }"
onKeyWordInput: "function onKeyWordInput(ev) {\r

  \  let charEntered = ev.key.toString();\r

  \  if (!isAlphaNum(charEntered)) return;\r

  \  let ch = charEntered.toUpperCase();\r

  \  Selected = { lastLetterEntered: ch };\r

  \  let cands = Goal.blankChars;\r

  \  if (Goal.iFocus) {\r

  \    let word = Goal.words[Goal.iFocus];\r

  \    if (word.hasBlanks) cands = word.charInputs.filter(x => x.isBlank);\r

  \    else deactivateFocusGroup();\r

  \  }\r

  \  console.assert(!isEmpty(cands));\r

  \  let isLastOfGroup = (Goal.iFocus != null) && cands.length == 1;\r

  \  let isVeryLast = Goal.blankChars.length == 1;\r

  \  let target = firstCond(cands, x => x.letter == ch);\r

  \  let isMatch = target != null;\r

  \  if (!isMatch) target = cands[0];\r

  \  fillCharInput(target, ch);\r

  \  return { target: target, isMatch: isMatch, isLastOfGroup: isLastOfGroup,
  isVeryLast: isVeryLast, ch: ch };\r

  }"
onLoginSubmitted: "function onLoginSubmitted(e) {\r

  \  e.preventDefault();\r

  \  let name = getInputValue('login');\r

  \  if (isEmpty(name)) name = chooseRandom(names);\r

  \  login(name);\r

  }"
onMessageReceived: function onMessageReceived(d) { if (!USE_SOCKETIO) return; processMessage(d); }
onMouseDownOnLetter: "function onMouseDownOnLetter(ev) {\r

  \  if (!canAct()) return;\r

  \  ev.preventDefault();\r

  \  let id = evToClosestId(ev);\r

  \  let source = mBy(id);\r

  \  if (isLetterElement(source)) {\r

  \    var clone = DragElem = source.cloneNode(true);\r

  \    clone.id = DragElem.id + '_' + clone;\r

  \    DragSource = source;\r

  \    mAppend(document.body, clone);\r

  \    mClass(clone, 'letter')\r

  \    mClass(clone, 'dragelem');\r

  \    mStyleX(clone, { left: ev.clientX - ev.offsetX, top: ev.clientY -
  ev.offsetY });\r

  \    clone.drag = { offsetX: ev.offsetX, offsetY: ev.offsetY };\r

  \    document.body.onmousemove = onMovingCloneAround;\r

  \    document.body.onmouseup = onReleaseLetter;\r

  \  }\r

  }"
onMovingCloneAround: "function onMovingCloneAround(ev) {\r

  \  if (DragElem === null) return;\r

  \  let mx = ev.clientX;\r

  \  let my = ev.clientY;\r

  \  let dx = mx - DragElem.drag.offsetX;\r

  \  let dy = my - DragElem.drag.offsetY;\r

  \  mStyle(DragElem, { left: dx, top: dy });\r

  }"
onpagedeactivated: "function onpagedeactivated(handler) {\r

  \  document.addEventListener('visibilitychange',\r

  \    () => {\r

  \      console.log('visibilityState', document.visibilityState);\r

  \      if (document.visibilityState !== 'visible') handler();\r

  \    });\r

  }"
onPlayerAdded: "function onPlayerAdded(d) {\r

  \  prelude(getFunctionCallerName(), d);\r

  \  if (isError(d)) { restartHost(onHostStarted); return; }\r

  \  d = d.response;\r

  \  let nap = S.availablePlayers.length - 1;\r

  \  let nMax = S.gameInfo.player_names.length;\r

  \  let nMin = arrMin(S.gameInfo.num_players);\r

  \  let nRegistered = nMax - nap;\r

  \  let mustBegin = (nap == 0);\r

  \  let canBegin = nRegistered >= nMin;\r

  \  if (canBegin) tryBegin(onBeginRequest);\r

  \  else enterWaitingLoop();\r

  }"
onPlayerChange: "function onPlayerChange() {\r

  \  if (!G.playerChanged) return;\r

  \  let pid = G.player;\r

  \  let o = G.playersAugmented[pid];\r

  \  let ms = getVisual(pid);\r

  \  let msDef = getDefVisual(pid);\r

  \  let msHeader = getPageHeaderDivForPlayer(pid);\r

  \  msHeader.classList.add('gamePlayer')\r

  \  if (G.previousPlayer) {\r

  \    let msHeaderPrevious = getPageHeaderDivForPlayer(G.previousPlayer);\r

  \    msHeaderPrevious.classList.remove('gamePlayer');\r

  \  }\r

  \  if (ms) {\r

  \  }\r

  \  if (msDef) {\r

  \    let msParentId = msDef.parentId;\r

  \    let msParent = UIS[msParentId];\r

  \    var target = msDef.elem;\r

  \    target.parentNode.scrollTop = target.offsetTop;\r

  \  }\r

  }"
onReleaseClone: "function onReleaseClone(ev) {\r

  \  let els = allElementsFromPoint(ev.clientX, ev.clientY);\r

  \  let source = DDInfo.source;\r

  \  let dSource = iDiv(source);\r

  \  let dropHandler = DDInfo.dropHandler;\r

  \  for (const target of DDInfo.targets) {\r

  \    let dTarget = iDiv(target);\r

  \    if (els.includes(dTarget)) {\r

  \      if (isdef(dropHandler)) {\r

  \        let cDrop = { x: ev.clientX, y: ev.clientY };\r

  \        let rTarget = getRect(dTarget);\r

  \        let cTarget = { x: rTarget.x + rTarget.w / 2, y: rTarget.y +
  rTarget.h / 2 };\r

  \        let [dx, dy] = [cDrop.x - cTarget.x, cDrop.y - cTarget.y];\r

  \        let [ddx, ddy] = [DragElem.drag.offsetX, DragElem.drag.offsetY];\r

  \        dropHandler(source, target, DragElem.isCopy, DragElem.clearTarget,
  dx, dy, ev, DragElem);\r

  \      }\r

  \      break;\r

  \    }\r

  \  }\r

  \  DragElem.remove();\r

  \  DragElem = null;\r

  \  document.body.onmousemove = document.body.onmouseup = null;\r

  }"
onReleaseLetter: "function onReleaseLetter(ev) {\r

  \  let els = allElementsFromPoint(ev.clientX, ev.clientY);\r

  \  let inputs = DropZones;\r

  \  for (const inp of inputs) {\r

  \    if (els.includes(inp)) {\r

  \      inp.innerHTML = DragElem.innerHTML;\r

  \      if (startsWith(DragElem.id, 'input')) DragSource.innerHTML = '_';\r

  \      let w = buildWordFromLetters(inp.parentNode);\r

  \      if (!w.includes('_')) GC.evaluate(w, Goal.label.toUpperCase());\r

  \    }\r

  \  }\r

  \  DragElem.remove();\r

  \  DragElem = DragSource = null;\r

  \  document.body.onmousemove = document.body.onmouseup = null;\r

  }"
onselect_action: function onselect_action(ev, r, action, uname) { let item =
  get_selected_ui_item(ev); select_action(r, action, uname, item); }
onTestSeriesChanged: "async function onTestSeriesChanged() {\r

  \  let series = mBy('selSeries').value;\r

  \  if (series == 'none') return;\r

  \  series = DIR_TESTS + '/' + series;\r

  \  console.log('series', series)\r

  \  await testEngine.loadSeries(series);\r

  \  onClickClearTable();\r

  \  onClickRepeatTest();\r

  }"
onWhichGame: "function onWhichGame(d) {\r

  \  prelude(getFunctionCallerName(), d);\r

  \  if (isError(d)) { restartHost(onHostStarted); return; }\r

  \  d = d.response;\r

  \  S.gameInfo = d;\r

  \  let currentGame = S.gameInfo.name.toLowerCase();\r

  \  if (currentGame == GAME) existingPlayers(onExistingPlayers);\r

  \  else restartHost(onHostStarted);\r

  }"
open_game: "function open_game(uname, game, fen) {\r

  \  U = {};\r

  \  copyKeys(DB.users[uname], U);\r

  \  U.session = {};\r

  \  G = new (classByName(capitalize(game) + 'Multi'))(game,
  DB.games[game]);\r

  \  Settings = new SettingsClass(G, dAux);\r

  \  if (nundef(U.games[game])) {\r

  \    if (G.controllerType == 'solitaire') { U.games[game] = { nTotal: 0,
  nCorrect: 0, nCorrect1: 0, startlevel: 0 }; }\r

  \    else U.games[game] = {};\r

  \  }\r

  \  if (isdef(G.maxlevel)) G.level = Math.min(getUserStartLevel(game),
  G.maxlevel);\r

  \  if (G.id != 'gAristo') Settings.updateGameValues(U, G);\r

  \  showGameTitle();\r

  \  return G;\r

  }"
open_game_options: function open_game_options(gamename) { present_game_options(gamename); }
open_game_ui: "function open_game_ui() {\r

  \  clear_table_all();\r

  \  let hmin = firstNumber(getCssVar('--inner_left_panel_height'));\r

  \  mBy(\"inner_left_panel\").innerHTML = `<div
  style='min-height:${hmin}px'>\r

  \  <div id=\"md\" style=\"display: flex;min-height:${hmin}px\">\r

  \    <div id=\"dLeftSide\" style=\"align-self:
  stretch;min-height:${hmin}px\"></div>\r

  \    <div id=\"dRightSide\" style='min-height:${hmin}px'>\r

  \      <div id=\"table\" class=\"flexWrap\"></div>\r

  \    </div>\r

  \  </div></div>`;\r

  \  initTable();\r

  \  badges_off();\r

  }"
open_invisible_input: "function open_invisible_input(ev) {\r

  \  if (ev.target.id != 'dTable') return;\r

  \  let [x, y] = [ev.offsetX, ev.offsetY];\r

  \  y = toModulo(y - 10, 20, 0, mStyleGet(dTable, 'h') - 47);\r

  \  x = toModulo(x, 50);\r

  \  add_edit(x, y);\r

  }"
open_mini_user_info: "function open_mini_user_info() {\r

  \  setTimeout(() => {\r

  \    mBy('user_info_mini').style.display = 'flex';\r

  \  }, 500);\r

  }"
open_player_editor: "function open_player_editor(ev) {\r

  \  console.log('ev', ev)\r

  \  let id = evToId(ev);\r

  \  console.log('open player editor for player ', id);\r

  \  let uname = id.substring(4);\r

  \  let game = Session.cur_game;\r

  \  console.log('player is', uname);\r

  \  let res = prompt(`enter [level lang] for player ${uname}: `);\r

  \  console.log('user entered', res);\r

  \  if (nundef(res) || isEmpty(res)) return;\r

  \  let parts = splitAtAnyOf(res, ' ,');\r

  \  let level = 'none', lang = 'none';\r

  \  if (parts.length >= 1) { level = set_startlevel(uname, game,
  Number(parts[0])); }\r

  \  if (parts.length >= 2) { lang = set_preferred_lang(uname, parts[1]); }\r

  \  console.log('selected language', lang, 'and level', level);\r

  \  console.log('should save DB', DB.users[uname]);\r

  \  if (isdef(DB.users[uname])) db_save();\r

  \  populate_players(Session.game_options.players);\r

  }"
open_prompt: "function open_prompt() {\r

  \  console.assert(!uiActivated, 'open_prompt with uiActivated ON
  !!!!!!!!!!!!!!!!!!!!!!!!!!');\r

  \  let game = Session.cur_game;\r

  \  let uname = Session.cur_user;\r

  \  let g = Session;\r

  \  let next = lookup(DB.games, [game]); if (next) copyKeys(next, g);\r

  \  next = lookup(DB.users, [uname, 'games', game]); if (next) copyKeys(next,
  g);\r

  \  let level = g.level = valf(g.startlevel, g.def_startlevel);\r

  \  lookupSet(DB.users, [uname, 'games', game, 'startlevel'], level);\r

  \  next = lookup(DB.games, [game, 'levels']);\r

  \  if (next) copyKeys(next[level], g);\r

  \  g.maxlevel = valf(get_keys(next).length, 0) - 1;\r

  \  g.color = getColorDictColor(g.color);\r

  \  for (const k in g.options) {\r

  \    g[k] = get_game_option(g, k); //'winning_score'); \r

  \    console.log('g.' + k, g[k]);\r

  \  }\r

  \  delete g.levels;\r

  \  clearTable(); set_background_color(g.color);\r

  \  QContextCounter += 1;\r

  \  show_game_name(g.friendly);\r

  \  show_title(g.table.friendly);\r

  \  show_level(g.level, g.maxlevel);\r

  \  if (Session.is_badges) setBadgeLevel(g.level);\r

  \  g.startTime = get_timestamp();\r

  \  mLinebreak(dTable, 15);\r

  \  let items = g.items = spotit_deal(g.num_cards, g.rows, g.cols, g.vocab,
  g.lang, g.min_scale, g.max_scale);\r

  \  Selected = null;\r

  \  uiActivated = true;\r

  }"
open_sidebar: "function open_sidebar() {\r

  \  DA.left_panel = 'open';\r

  \  mBy('left_panel').style.flex = 1;\r

  }"
open_table_dep: "function open_table_dep(tid) {\r

  \  let t = DB.tables[tid];\r

  \  Session.cur_tid = tid;\r

  \  makemove();\r

  }"
openAux: "function openAux(title, button) {\r

  \  resetActiveButton();\r

  \  show(dAux);\r

  \  clearElement(dAuxContent);\r

  \  dAuxTitle.innerHTML = title;\r

  \  if (isdef(button)) setActiveButton(button);\r

  }"
openCity: "function openCity(evt, cityName) {\r

  \  var i, tabcontent, tablinks;\r

  \  tabcontent = document.getElementsByClassName('tabcontent');\r

  \  for (i = 0; i < tabcontent.length; i++) {\r

  \    tabcontent[i].style.display = 'none';\r

  \  }\r

  \  tablinks = document.getElementsByClassName('tablinks');\r

  \  for (i = 0; i < tablinks.length; i++) {\r

  \    tablinks[i].className = tablinks[i].className.replace(' active', '');\r

  \  }\r

  \  document.getElementById(cityName).style.display = 'block';\r

  \  evt.currentTarget.className += ' active';\r

  }"
openGameConfig: "function openGameConfig() {\r

  \  ensureAllGames([proceedToConfig]);\r

  }"
openInfobox: "function openInfobox(ev, mobj, part) {\r

  \  let oid = getOidForMainId(mobj.id);\r

  \  if (!oid) return;\r

  \  let id = makeIdInfobox(oid);\r

  \  let ibox = UIS[id];\r

  \  if (ibox) {\r

  \    let elem = ibox.elem;\r

  \    if (isVisible(elem)) {\r

  \      hide(elem);\r

  \    } else {\r

  \      show(elem);\r

  \    }\r

  \  } else {\r

  \    let msInfobox = makeInfobox(mobj.id, oid, G.table[oid]);\r

  \    let area = UIS['a_d_game'];\r

  \    let pos = calcMainVisualPosCenterInGameArea(mobj)\r

  \    msInfobox.setPos(pos.x, pos.y);\r

  \  }\r

  }"
openInfoboxesForBoatOids: "function openInfoboxesForBoatOids(boat) {\r

  \  let oids = boat.o.oids;\r

  \  let mainIds = oids.map(x => getMainId(x));\r

  \  for (const id of mainIds) {\r

  \    let ms = UIS[id];\r

  \    openInfobox(null, ms);\r

  \  }\r

  }"
openJoinConfig: "function openJoinConfig() {\r

  \  hideEventList();\r

  \  showJoinConfig();\r

  \  setMessage('Join the game!');\r

  \  hide('bJoinGame');\r

  \  hide('bCreateGame');\r

  \  show('bLobbyJoinOk');\r

  \  show('bLobbyJoinCancel');\r

  \  show('bResumeGame');\r

  \  populateJoinList();\r

  \  joinCandidate = null;\r

  }"
openLeftPane: "function openLeftPane() {\r

  \  if (paneOpen) return 0;\r

  \  let right = mBy('dInnerRight');\r

  \  mStyle(right, { flex: 0 });\r

  \  paneOpen = true;\r

  \  return DELAY_PANE;\r

  }"
openLogin: "function openLogin() {\r

  \  show(dLogin); hide(dLobby); hide(dGameScreen);\r

  \  loginBtn.onclick = e => {\r

  \    e.preventDefault();\r

  \    if (!usernameInput.value) { return console.log('Must supply a
  username'); }\r

  \    let username = usernameInput.value;\r

  \    username = username.toLowerCase();\r

  \    localStorage.setItem('username', username);\r

  \    establishUsername(username);\r

  \  };\r

  \  document.body.style.opacity = 1;\r

  }"
openSettings: function openSettings() { show(dSettings); pauseUI(); }
openSocket: "function openSocket() {\r

  \  if (!USE_SOCKETIO) return;\r

  \  if (socket != null) { socket.open(); return; }\r

  \  socket = io.connect(SERVER_URL);\r

  \  socket.on('connect', () => { socket.emit('message', 'User ' +
  clientData.name + ' has connected!'); });\r

  \  socket.on('message', onMessageReceived);\r

  \  socket.on('chat', onChatReceived);\r

  }"
openTab: "function openTab(button) {\r

  \  var i, tabcontent, tablinks;\r

  \  let selected = button.textContent + 'Tab';\r

  \  tabcontent = document.getElementsByClassName('tabcontent');\r

  \  for (i = 0; i < tabcontent.length; i++) { tabcontent[i].style.display =
  'none'; }\r

  \  tablinks = document.getElementsByClassName('tablinks');\r

  \  for (i = 0; i < tablinks.length; i++) { tablinks[i].className =
  tablinks[i].className.replace(' active', ''); }\r

  \  document.getElementById(selected).style.display = 'block';\r

  \  button.className += ' active';\r

  }"
openTabTesting: "function openTabTesting(cityName) {\r

  \  var i, tabcontent, tablinks;\r

  \  tabcontent = document.getElementsByClassName('tabcontent');\r

  \  for (i = 0; i < tabcontent.length; i++) {\r

  \    tabcontent[i].style.display = 'none';\r

  \  }\r

  \  tablinks = document.getElementsByClassName('tablinks');\r

  \  for (i = 0; i < tablinks.length; i++) {\r

  \    tablinks[i].className = tablinks[i].className.replace(' active', '');\r

  \  }\r

  \  document.getElementById('a_d_' + cityName).style.display = 'block';\r

  \  document.getElementById('c_b_' + cityName).className += ' active';\r

  }"
openToolbar: "function openToolbar() {\r

  \  let d = mBy('dLeiste');\r

  \  show(d);\r

  \  mStyleX(d, { w: 100 });\r

  \  Toolbar = new ToolbarClass(d);\r

  }"
optionsFor: "function optionsFor(me) {\r

  \  Options = {};\r

  \  Options.play = { f: () => { playsCard(me, me.hand.topCard(), me.hand,
  T.trick, true); evaluate(); } };\r

  \  setTimeout(Options.play.f, 2000);\r

  }"
orderFromTo: "function orderFromTo(lst, fromOrder, toOrder) {\r

  \  let res = [];\r

  \  for (let i = 0; i < lst.length; i++) {\r

  \    res.push(lst[fromOrder.indexOf(toOrder[i])]);\r

  \  }\r

  \  testHelpers(res);\r

  \  return res;\r

  }"
ordinal_suffix_of: "function ordinal_suffix_of(i) {\r

  \  var j = i % 10,\r

  \    k = i % 100;\r

  \  if (j == 1 && k != 11) {\r

  \    return i + \"st\";\r

  \  }\r

  \  if (j == 2 && k != 12) {\r

  \    return i + \"nd\";\r

  \  }\r

  \  if (j == 3 && k != 13) {\r

  \    return i + \"rd\";\r

  \  }\r

  \  return i + \"th\";\r

  }"
oscillate_between: "function oscillate_between(x, min, max, step) {\r

  \  x += step;\r

  \  if (x <= min || x >= max) step = -step;\r

  \  return [x, step];\r

  }"
oscillator: "function oscillator(item) {\r

  \  let [astep, a, bstep, b, basefunc] = [item.astep, item.a, item.bstep,
  item.b, item.basefunc];\r

  \  [a, astep] = oscillate_between(a, 0, 5, astep);\r

  \  [b, bstep] = oscillate_between(b, 0, 5, bstep);\r

  \  [item.astep, item.a, item.bstep, item.b] = [astep, a, bstep, b];\r

  \  item.func = x => b * basefunc(a * x);\r

  \  return true;\r

  }"
otree2cur_players: "function otree2cur_players(otree) {\r

  \  Session.cur_players = {};\r

  \  for (const uname of otree.plorder) {\r

  \    Session.cur_players[uname] = otree[uname];\r

  \  }\r

  \  return Session.cur_players;\r

  }"
ouparams: "function ouparams() {\r

  \  for (const uid in R.uiNodes) {\r

  \    let n = R.uiNodes[uid];\r

  \    console.log(n.uid + ':', n.params);\r

  \  }\r

  }"
oupos: "function oupos() {\r

  \  for (const uid in R.uiNodes) {\r

  \    let n = R.uiNodes[uid];\r

  \    console.log(n.uid + ':position', n.params.position, 'size', n.size,
  'pos', n.pos);\r

  \  }\r

  }"
out1: "function out1() {\r

  \  let game = Session.cur_game;\r

  \  let msg = 'stats:score wins total\\n';\r

  \  for (const x in Session.cur_players) {\r

  \    let pl = Session.cur_players[x];\r

  \    let info = DB.users[x].games[game];\r

  \    msg += `${x}: ${pl.score} ${info.wins} ${info.total}\\n`;\r

  \  }\r

  \  console.log(msg);\r

  }"
output_arr_short: "function output_arr_short(arr) {\r

  \  console.log('output_arr_short',
  getFunctionsNameThatCalledThisFunction());\r

  \  console.log('deck top 3', jsCopy(arrTake(arr, 3))); console.log('deck
  bottom 3', jsCopy(arrTakeLast(arr, 3)));\r

  }"
output_error: function output_error(msg) { dError.innerHTML = msg; }
output_loose_and_journeys: "function output_loose_and_journeys(fen) {\r

  \  for (const j of fen.journeys) { console.log('journey', j.join(', ')); }\r

  \  for (const plname in fen.players) { console.log('loosecards', plname,
  fen.players[plname].loosecards.join(', ')); }\r

  }"
output_scores: "function output_scores() {\r

  \  let fen = Z.fen;\r

  \  for (const plname in fen.players) {\r

  \    let pl = fen.players[plname];\r

  \  }\r

  }"
outputCombatData: "function outputCombatData(title, data, H) {\r

  \  let c = data.temp.combat;\r

  \  let sCombat = c == undefined ? 'undef' : c.stage + ', battles: ' +
  Object.keys(c.battles).toString();\r

  \  let sBattle = c == undefined || c.battle == undefined ? 'undef' :
  c.battle.stage + ', loc: ' + c.battle.tilename;\r

  }"
outputContent: "function outputContent(content) {\r

  \  if (content.type == 'list') {\r

  \    console.log('list of', content.elType, content.content);\r

  \  } else {\r

  \    console.log('content', content);\r

  \  }\r

  }"
outputPlayerUnits: "function outputPlayerUnits(pl, H) {\r

  \  let dObjects = dict2list(H.objects, 'id');\r

  \  dObjects = dObjects.filter(x => x.obj_type == 'unit');\r

  \  let unitsPlayer = dObjects.filter(x => getUnitOwner(x.nationality) ==
  pl);\r

  \  sortBy(unitsPlayer, 'tile');\r

  \  console.log(pl);\r

  \  for (const u of unitsPlayer) {\r

  \    console.log(u.type, u.type == 'Fleet' || u.type == 'Tank' ? '\\t\\t' :
  '\\t', u.cv, '\\t', u.tile, u.id);\r

  \  }\r

  }"
outputUpdatedScenario: "function outputUpdatedScenario(decider, player = false)
  {\r

  \  sc = decider.scenario;\r

  \  reqs = '';\r

  \  if (decider.decisionMode == 'scenario') {\r

  \    for (const pl of ['Axis', 'West', 'USSR']) {\r

  \      if (pl in decider.scenario.items) {\r

  \        if (player && player != pl) continue;\r

  \        reqs += pl + '\\n';\r

  \        for (const x of decider.scenario.items[pl]) {\r

  \          reqs += '  goal=(' + x.goalTile + ',' + x.goalCv + ') ' + x.type
  + ' ' + x.id;\r

  \          if (x.unit) reqs += ' ' + x.unit.tile + ' ' + x.unit.cv;\r

  \          reqs += '\\n';\r

  \        }\r

  \      }\r

  \      if (pl in decider.scenario.diplItemsTodo) {\r

  \        reqs += pl + '\\n';\r

  \        for (const nat in decider.scenario.diplItemsTodo[pl]) {\r

  \          let ist = lookup(decider.scenario.diplItems, [pl, nat]);\r

  \          ist = ist ? ist : 0;\r

  \          reqs += '  ' + nat + ': ' +
  decider.scenario.diplItemsTodo[pl][nat] + ' (is ' + ist + ')';\r

  \          reqs += '\\n';\r

  \        }\r

  \      }\r

  \    }\r

  \    if (!empty(decider.scenario.satellites)) {\r

  \      reqs += '\\nsatellites:\\n';\r

  \      for (const n in decider.scenario.satellites) {\r

  \        reqs += '  ' + n + ': ' + decider.scenario.satellites[n] + '\\n';\r

  \      }\r

  \    }\r

  \    reqs += 'done: ' + decider.scenario.done;\r

  \    unitTestScenario(reqs);\r

  \  }\r

  }"
outype: "function outype() {\r

  \  for (const uid in R.uiNodes) {\r

  \    let n = R.uiNodes[uid];\r

  \    console.log(n.uid + ':', n.type);\r

  \  }\r

  }"
pack_table: "function pack_table(o) {\r

  \  for (const k of ['players', 'fen', 'state', 'player_status', 'options',
  'scoring', 'notes', 'turn']) {\r

  \    let val = o[k];\r

  \    if (isdef(val)) o[k] = JSON.stringify(val);\r

  \  }\r

  \  return JSON.stringify({ table: o, playerdata:
  JSON.stringify(o.playerdata) });\r

  }"
packageState: "function packageState() {\r

  \  let st = G.state;\r

  \  let state = { boardArr: st.boardArr, poolArr: st.poolArr, pool: {} };\r

  \  for (const k in st.pool) {\r

  \    let oNew = state.pool[k] = {};\r

  \    copyKeys(st.pool[k], oNew, {}, ['index', 'key']);\r

  \  }\r

  \  let pack = { settings: jsCopy(G.settings), state: state, randomIndices:
  jsCopy(G.randomIndices) };\r

  \  return pack;\r

  }"
padSep: "function padSep(sep, n, args) {\r

  \  s = '';\r

  \  for (var i = 2; i < arguments.length; i++) {\r

  \    s += arguments[i].toString().padStart(n, '0') + sep;\r

  \  }\r

  \  return s.substring(0, s.length - 1);\r

  }"
pageHeaderAddPlayer: "function pageHeaderAddPlayer(username, playerId, color,
  asMe = false) {\r

  \  let divPlayerNames = document.getElementById('a_d_divPlayerNames');\r

  \  divPlayerNames.insertAdjacentHTML('beforeend',
  pageHeaderGetPlayerHtml(username, playerId, color, asMe));\r

  }"
pageHeaderClearAll: "function pageHeaderClearAll() {\r

  \  pageHeaderClearPlayers();\r

  \  pageHeaderClearGame();\r

  }"
pageHeaderClearGame: "function pageHeaderClearGame() {\r

  \  UIS['a_d_divGamename'].clear();\r

  }"
pageHeaderClearPlayers: "function pageHeaderClearPlayers() {\r

  \  UIS['a_d_divPlayerNames'].clear({ innerHTML: '<div
  style=\"float:left\">Players:&nbsp;</div>' });\r

  }"
pageHeaderGetPlayerHtml: "function pageHeaderGetPlayerHtml(username, playerId,
  color, asMe) {\r

  \  let spl = `<div id='c_c_${username}'
  class='playerHeader'><div>${username}</div><div
  style='color:${color}'>${playerId}</div></div>`\r

  \  return spl;\r

  }"
pageHeaderInit: function pageHeaderInit() { pageHeaderSetGame(); pageHeaderSetPlayers(); }
pageHeaderSetGame: "function pageHeaderSetGame() {\r

  \  let divGamename = document.getElementById('a_d_divGamename');\r

  \  divGamename.innerHTML = `<div
  style='float:right;margin:14px'><b>${allGames[GAME].name}</b><br>(${PLAYMODE}\
  )</div>`;\r

  }"
pageHeaderSetPlayers: "function pageHeaderSetPlayers() {\r

  \  let divPlayerNames = document.getElementById('a_d_divPlayerNames');\r

  \  let s = '<div style=\"float:left\">Players:&nbsp;</div>';\r

  \  for (const pid in G.playersAugmented) {\r

  \    let pl = G.playersAugmented[pid];\r

  \    spl = pageHeaderGetPlayerHtml(pl.username, pid, pl.color, pl.isMe);\r

  \    s += spl;\r

  \  }\r

  \  divPlayerNames.innerHTML = s;\r

  }"
pageHeaderUpdatePlayer: "function pageHeaderUpdatePlayer(plid) {\r

  \  let mk;\r

  \  for (const pl in playerConfig[GAME].players) {\r

  \    mk = getPageHeaderDivForPlayer(pl);\r

  \    mk.classList.remove('gamePlayer');\r

  \  }\r

  \  mk = getPageHeaderDivForPlayer(plid);\r

  \  mk.classList.add('gamePlayer');\r

  }"
pageLayout33: "function pageLayout33() {\r

  \  var dMain = document.getElementById('dMain');\r

  \  let dHeader = mDiv(dMain, { bg: 'random' }, 'dHeader', 'header');\r

  \  let dOuter = mDiv(dMain, { bg: 'random', flex: '1 0 auto', display:
  'flex', 'flex-flow': 'row wrap' });\r

  \  let dLeft = mDiv(dOuter, { bg: 'random', flex: '0 0 200px' }, 'dLeft',
  'left');\r

  \  let dMiddle = mDiv(dOuter, { bg: 'random', flex: '1 0 auto' }, 'dMiddle',
  'middle');\r

  \  let dRight = mDiv(dOuter, { bg: 'random', flex: '0 0 200px' }, 'dRight',
  'right');\r

  \  let dFooter = mDiv(dMain, { bg: 'random' }, 'dFooter', 'footer');\r

  \  return {\r

  \    dHeader: dHeader,\r

  \    dLeft: dLeft,\r

  \    dRight: dRight,\r

  \    dMiddle: dMiddle,\r

  \    dFooter, dFooter\r

  \  }\r

  }"
paint: "function paint(dParent, r, color = 'random') {\r

  \  let d = mDiv(dParent, { position: 'absolute', left: r.x, top: r.y, w:
  r.w, h: r.h, bg: color });\r

  \  return d;\r

  }"
paint_game: "function paint_game(state) {\r

  \  let [wgreen, wred] = [state.green.pos, state.red.pos];\r

  \  dgreen.style.width = wgreen + '%';\r

  \  dred.style.width = wred + '%';\r

  }"
paletteFromColor: "function paletteFromColor(c, a = 1) {\r

  \  if (Array.isArray(c)) return paletteFromRGBArray(c);\r

  \  let hsl = standardizeToHsl(c);\r

  \  let pal = gen_palette(hsl.h, 1, hsl.s * 100, a);\r

  \  return pal;\r

  }"
paletteFromRGBArray: "function paletteFromRGBArray(arr) {\r

  \  let hsl = rgbToHsl(arr[0], arr[1], arr[2]);\r

  \  let hue1 = hsl[0] * 360;\r

  \  sat = Math.round(hsl[1] * 100);\r

  \  let hsv = rgbToHsv(arr[0], arr[1], arr[2]);\r

  \  let hue2 = hsv.h;\r

  \  let hue = hue1;\r

  \  let result = gen_palette(hue, 1, sat);\r

  \  return result;\r

  }"
panel: "function panel(areaName, oSpec, oid, o) {\r

  \  let [num, or, split, bg, fg, id, panels, parent] = getParams(areaName,
  oSpec, oid);\r

  \  if (num > 0) {\r

  \    parent.style.display = 'grid';\r

  \    clearElement(parent);\r

  \    for (let i = 0; i < num; i++) {\r

  \      let d = mDiv100(parent);\r

  \      d.id = getUID();\r

  \      if (panels.length > i) {\r

  \        if (oid) dynamicArea(d.id, panels[i], oid, o); else
  staticArea(d.id, panels[i]);\r

  \      }\r

  \    }\r

  \    if (or == 'rows') {\r

  \      console.log('====', split * 100);\r

  \      parent.style.gridTemplateColumns = `${split * 100}% 1fr`;\r

  \    }\r

  \  }\r

  \  return parent;\r

  }"
Panel: "function Panel() {\r

  \  var self = this;\r

  \  this.div = document.getElementById(\"dTable\");\r

  \  this.receptors = new Array();\r

  \  this.numbers = new Array();\r

  \  this.drags = new Array();\r

  \  this.dragX = 0;\r

  \  this.dragY = 0;\r

  \  this.start = function () {\r

  \    self.createNumbers(5);\r

  \  }\r

  \  this.createReceptors = function (num) {\r

  \    var w = 100;\r

  \    var h = 30;\r

  \    for (i = 0; i < num; i++) {\r

  \      self.createReceptor(\"r\" + String(i), 64 * i, 120, w, h);\r

  \    }\r

  \  }\r

  \  this.createReceptor = function (id, l, t, w, h) {\r

  \    var div = createDroppable(id, \"receptorclass\", l, t, w, h);\r

  \    var receptor = new Receptor(div, self);\r

  \    self.receptors.push(receptor);\r

  \    self.div.appendChild(div);\r

  \    return (receptor);\r

  \  }\r

  \  this.createNumbers = function (num) {\r

  \    var w = 100;\r

  \    var offset = 10;\r

  \    for (i = 0; i < num; i++) {\r

  \      var randomnumber = Math.floor(Math.random() * 11)\r

  \      self.createNumber(\"n\" + String(i), randomnumber, (w + offset) * i,
  0, w);\r

  \    }\r

  \  }\r

  \  this.createNumber = function (id, n, l, t, w) {\r

  \    var div = createDraggable(id, \"numberclass\", l, t, w, String(n));\r

  \    var number = new Number(div, self, n);\r

  \    self.numbers.push(number);\r

  \    self.div.appendChild(div);\r

  \    return (number);\r

  \  }\r

  }"
panelLayout: "function panelLayout(n, R) {\r

  \  let params = n.params;\r

  \  let num = n.children.length;\r

  \  let or = params.orientation ? params.orientation : DEF_ORIENTATION;\r

  \  mFlex(n.ui, or);\r

  \  let split = params.split ? params.split : DEF_SPLIT;\r

  \  if (split == 'min') {\r

  \    let b = getBounds(n.ui, true);\r

  \    return { w: b.width, h: b.height };\r

  \  }\r

  \  let reverseSplit = false;\r

  \  if (split == 'equal') split = (1 / num);\r

  \  else if (isNumber(split)) reverseSplit = true;\r

  \  for (let i = 0; i < num; i++) {\r

  \    let d = R.uiNodes[n.children[i]].ui;\r

  \    mFlexChildSplit(d, split);\r

  \    if (reverseSplit) { split = 1 - split; }\r

  \  }\r

  \  let b = getBounds(n.ui, true);\r

  \  return { w: b.width, h: b.height };\r

  }"
param_present_contacts: "function param_present_contacts(obj, dParent,
  onclick_func_name) {\r

  \  let others = sync_users(obj.users);\r

  \  Session.others = others.map(x => x.name);\r

  \  let msgs = valf(obj.msgs, {});\r

  \  let mydata = `\r

  \  <style>\r

  \    @keyframes appear{\r

  \      0%{opacity:0;transform: translateY(50px)}\r

  \      100%{opacity:1;transform: translateY(0px)}\r

  \     }\r

  \     .contact{\r

  \       cursor:pointer;\r

  \       transition: all .5s cubic-bezier(0.68, -2, 0.265, 1.55);\r

  \     }\r

  \     .contact:hover{\r

  \       transform: scale(1.1);\r

  \     }\r

  \  </style>\r

  \  <div style=\"text-align: center; animation: appear 1s ease both\">\r

  \  `;\r

  \  let mydata_list = '';\r

  \  for (const r of others) {\r

  \    row = r;\r

  \    let image = get_image_path(row);\r

  \    let mydata_element = `\r

  \        <div class='contact'
  style='position:relative;text-align:center;margin-bottom:18px;'
  username='${row.name}' \r

  \          onclick='${onclick_func_name}(event)'>\r

  \          <img src='${image}' draggable='true' ondragstart='drag(event)'
  class='img_person sz100' style='margin:0;'/>\r

  \          <br>${row.name}`;\r

  \    if (isdef(msgs[row.username])) {\r

  \      mydata_element += `<div
  style='width:20px;height:20px;border-radius:50%;background-color:orange;color\
  :white;position:absolute;left:0px;top:0px;'>` + msgs[row.username] +
  \"</div>\";\r

  \    }\r

  \    mydata_element += \"</div>\";\r

  \    mydata_list += mydata_element;\r

  \  }\r

  \  mydata += mydata_list;\r

  \  dParent.innerHTML = mydata;\r

  }"
paramsToCss: "function paramsToCss(params) {\r

  \  let res = { css: {}, std: {}, typ: {} };\r

  \  for (const k in params) {\r

  \    if (k == 'font') {\r

  \      let f = getFontString(params.font);\r

  \      if (f) res.css.font = f;\r

  \    }\r

  \    let rsgParam = PARAMRSG_T[k];\r

  \    if (isdef(rsgParam)) if (rsgParam) res.typ[k] = params[k]; else
  res.std[k] = params[k];\r

  \    else {\r

  \      let name = PARAMCSS[k];\r

  \      if (isdef(name)) {\r

  \        res.css[name] = params[k];\r

  \      } else {\r

  \        res.css[k] = params[k];\r

  \      }\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
parentHasChannelForThisOid: "function parentHasChannelForThisOid(n, oid) {\r

  \  let channels = n.channels;\r

  \  if (nundef(channels)) return true;\r

  }"
parentHasThisChildAlready: "function parentHasThisChildAlready(uidParent, oid)
  {\r

  \  let n = R.rNodes[uidParent];\r

  \  if (nundef(n.children)) return false;\r

  \  let hasThisChild = false;\r

  \  for (const chuid of n.children) {\r

  \    if (R.rNodes[chuid].oid == oid) { hasThisChild = true; break; }\r

  \  }\r

  \  return hasThisChild;\r

  }"
parse_fen: "function parse_fen(fen) {\r

  \  let parts = fen.split(':');\r

  \  let opt = parts[0];\r

  \  let glob = parts.length > 1 ? parts[1] : null;\r

  \  let pls = [];\r

  \  for (let i = 2; i < parts.length; i++) {\r

  \    pls.push(parts[i]);\r

  \  }\r

  \  return { opt: opt, glob: glob, pls: pls };\r

  }"
parse_table: "function parse_table(t) {\r

  \  set_start_data_from_fen(t.fen, S.game);\r

  \  if (isString(t.options)) t.options = JSON.parse(t.options);\r

  \  S.players = t.players.map(x => ({ name: x, color:
  getColorDictColor(DB.users[x].color), imgPath:
  `../base/assets/images/${x}.jpg`, score: 0 }));\r

  \  S.players_by_name = arr_to_dict_by(S.players, 'name');\r

  \  S.game = t.game;\r

  \  S.tid = t.id;\r

  \  S.table = t;\r

  }"
parse_table_and_players: "function parse_table_and_players(obj) {\r

  \  console.log('parse_table', obj.table);\r

  \  parse_table(obj.table);\r

  \  for (const pl of S.players) copyKeys(obj.players, pl);\r

  }"
parseCodefile: "function parseCodefile(content, fname, preserveRegionNames =
  true, info = {}, superdi = {}) {\r

  \  let defaultRegions = { cla: 'classes', func: 'funcs' };\r

  \  let lines = content.split('\\r\\n');\r

  \  let parsing = false, code, type, key, regionName, regionOrig;\r

  \  let firstletters = [], firstWords = [], iline = 0;\r

  \  for (const line of lines) {\r

  \    let l = line; iline += 1;\r

  \    if (!l.includes(\"'//\") && !l.includes(\"//'\") &&
  !l.includes(\"http\")) {\r

  \      l = replaceAllFast(line, '://', '://');\r

  \      l = replaceAllFast(l, '//#', '@@#');\r

  \      l = stringBefore(l, '//');\r

  \      l = replaceAllFast(l, '@@#', '//#');\r

  \      l = replaceAllFast(l, '://', '://');\r

  \    }\r

  \    if (isEmptyOrWhiteSpace(l.trim())) continue;\r

  \    if (parsing) {\r

  \      let l1 = replaceAllSpecialChars(l, '\\t', '  ');\r

  \      let ch = l1[0];\r

  \      if (' }]'.includes(ch)) code += l1 + '\\r\\n';\r

  \      if (ch != ' ') {\r

  \        parsing = false;\r

  \        if (nundef(regionName)) { regionName = regionOrig =
  valf(defaultRegions[type], type); }\r

  \        let regKey = preserveRegionNames ? regionOrig : `${regionName}
  (${fname})`;\r

  \        let sig;\r

  \        if (type == 'cla') {\r

  \          sig = `class ${key}{}`;\r

  \        } else if (type == 'func') {\r

  \          let firstline = stringBefore(code, '\\r\\n');\r

  \          if (firstline.includes(') {')) sig = stringBefore(firstline, ')
  {') + ')';\r

  \          else if (firstline.includes('){')) sig = stringBefore(firstline,
  '){') + ')';\r

  \          else sig = `function ${key}()`;\r

  \          sig += '{}';\r

  \        } else { sig = `${type} ${key}`; }\r

  \        let o = { name: key, code: code, sig: sig, region: regKey,
  filename: fname, type: type };\r

  \        addKeys(info, o);\r

  \        type = checkKey(superdi, key, type);\r

  \        if (type) lookupSetOverride(superdi, [type, key], o);\r

  \        addOnelineVars(superdi, o);\r

  \        addIf(firstletters, l[0]);\r

  \      }\r

  \    } else {\r

  \      let w = l[0] != '/' ? firstWord(l) : l.substring(0, 3);\r

  \      addIf(firstWords, w);\r

  \      //if (!['onload', 'async', 'function', 'class', 'var', 'const',
  '//#'].includes(w)) { console.log('line', iline, w, l[0]); }\r

  \    }\r

  \    if (parsing) continue;\r

  \    if (startsWith(l, '//#region')) {\r

  \      regionOrig = stringAfter(l, 'region').trim();\r

  \      regionName = firstWordAfter(l, 'region', true);\r

  \    } else if (startsWith(l, 'var')) {\r

  \      key = firstWordAfter(l, 'var', true);\r

  \      parsing = true;\r

  \      code = l + '\\r\\n';\r

  \      type = 'var';\r

  \    } else if (startsWith(l, 'const')) {\r

  \      key = firstWordAfter(l, 'const', true);\r

  \      parsing = true;\r

  \      code = l + '\\r\\n';\r

  \      type = 'const';\r

  \    } else if (startsWith(l, 'class')) {\r

  \      key = firstWordAfter(l, 'class', true);\r

  \      parsing = true;\r

  \      code = l + '\\r\\n';\r

  \      type = 'cla';\r

  \    } else if (startsWith(l, 'async') || startsWith(l, 'function')) {\r

  \      key = stringBefore(stringAfter(l, 'function').trim(), '(');\r

  \      parsing = true;\r

  \      code = l + '\\r\\n';\r

  \      type = 'func';\r

  \    }\r

  \  }\r

  \  return superdi;\r

  }"
parseCodefile1: "function parseCodefile1(content, fname, preserveRegionNames =
  true, info = {}, superdi = {}) {\r

  \  let lines = content.split('\\r\\n');\r

  \  let parsing = false;\r

  \  let code, type, key, star, sig;\r

  \  let multicomment = false;\r

  \  let iline = 0;\r

  \  for (const line of lines) {\r

  \    iline++;\r

  \    let l = removeCommentsFromLine(line); if
  (isEmptyOrWhiteSpace(l.trim())) continue;\r

  \    if (l.trim().startsWith('/*')) multicomment = true;\r

  \    if (multicomment) {\r

  \      if (l.trim().endsWith('*/')) multicomment = false;\r

  \      continue;\r

  \    }\r

  \    if (parsing) {\r

  \      let l1 = replaceAllSpecialChars(l, '\\t', '  ');\r

  \      let ch = l1[0];\r

  \      if (' }]'.includes(ch)) code += l1 + '\\r\\n';\r

  \      if (ch != ' ') {\r

  \        parsing = false;\r

  \        let o = { name: key, code: code, sig: sig, region: type, filename:
  fname, type: type };\r

  \        addKeys(info, o);\r

  \        if (o.type == 'var' && o.fname == 'chess.js' &&
  o.name.startsWith('brd_')) { lookupSet(superdi, ['chessvar', o.name], true);
  }\r

  \        if (type == 'var') addOnelineVars(superdi, o);\r

  \        lookupSetOverride(superdi, [type, key], o);\r

  \      }\r

  \    }\r

  \    if (startsWith(l, 'async') || startsWith(l, 'function')) {\r

  \      key = stringBefore(stringAfter(l, 'function').trim(), '(');\r

  \      if (key.startsWith('*')) { star = true; key = stringAfter(key,
  '*').trim(); } else star = false;\r

  \      parsing = true;\r

  \      code = l + '\\r\\n';\r

  \      type = 'func';\r

  \      sig = getFunctionSignature(l, key);\r

  \    } else if (startsWith(l, 'class')) {\r

  \      key = firstWordAfter(l, 'class', true);\r

  \      parsing = true;\r

  \      code = l + '\\r\\n';\r

  \      type = 'cla';\r

  \      sig = `class ${key}{}`;\r

  \    } else if (startsWith(l, 'const')) {\r

  \      key = firstWordAfter(l, 'const', true);\r

  \      parsing = true;\r

  \      code = l + '\\r\\n';\r

  \      type = 'const';\r

  \      sig = `const ${key};`;\r

  \    } else if (startsWith(l, 'var')) {\r

  \      key = firstWordAfter(l, 'var', true);\r

  \      parsing = true;\r

  \      code = l + '\\r\\n';\r

  \      type = 'var';\r

  \      sig = `var ${key};`;\r

  \    }\r

  \  }\r

  \  return superdi;\r

  }"
parseComplexStyleProperty: "function parseComplexStyleProperty(str) {\r

  \  var regex = /(\\w+)\\((.+?)\\)/g,\r

  \    transform = {},\r

  \    match;\r

  \  while (match = regex.exec(str))\r

  \    transform[match[1]] = match[2];\r

  \  return transform;\r

  }"
parseDictionaryName: "function parseDictionaryName(s) {\r

  \  if (nundef(s)) return null;\r

  \  let o_keys = s.split('.');\r

  \  if (isEmpty(o_keys)) return null;\r

  \  odict = window[o_keys[0]];\r

  \  if (!odict || typeof odict != 'object') return null;\r

  \  if (o_keys.length > 1) odict = lookup(odict, o_keys.slice(1));\r

  \  return odict;\r

  }"
parseDynamicSpec: "function parseDynamicSpec() {\r

  \  let sp = jsCopy(SPEC.dynamicSpec);\r

  \  geht(sp);\r

  \  dynSpec = sp;\r

  \  let pool = POOLS.augData;\r

  \  for (const oid in pool) {\r

  \    let o = pool[oid];\r

  \    let info = INFO[oid];\r

  \    if (nundef(info) || nundef(info.loc)) {\r

  \      continue;\r

  \    }\r

  \    let loc = info.loc;\r

  \    let areaName = getDynId(info.loc, oid);\r

  \    if (!AREAS[areaName]) {\r

  \      let uiNode = AREAS[loc];\r

  \      let group = info.pool;\r

  \      prepParentForChildren(loc, group.length);\r

  \      for (const oid of group) {\r

  \        addPanel(loc, oid);\r

  \      }\r

  \    }\r

  \  }\r

  \  for (const oid in pool) {\r

  \    let o = pool[oid];\r

  \    let info = INFO[oid];\r

  \    if (nundef(info) || nundef(info.loc)) continue;\r

  \    let loc = info.loc;\r

  \    let areaName = getDynId(info.loc, oid);\r

  \    console.log(areaName)\r

  \    dynamicArea(areaName, info, oid, o);\r

  \    let propName = info.type == 'panel' ? 'panels'\r

  \      : info.type == 'list' ? 'elm' : 'data';\r

  \    let oEinhaengen = AREAS[areaName];\r

  \    if (nundef(oEinhaengen[propName])) oEinhaengen[propName] = [];\r

  \    oEinhaengen[propName].push(info);\r

  \    console.log(oid, info);\r

  \    for (const k in info) {\r

  \      let parts = k.split('.');\r

  \      let s = parts[0];\r

  \      let n = parts.length;\r

  \      if (n == 1 && k != 'elm' && k != 'data') continue;\r

  \      let leaf = parsePath(parts, info[k], info);\r

  \    }\r

  \    console.log(info)\r

  \    continue;\r

  \  }\r

  \  return;\r

  \  for (const k in sp) {\r

  \    let node = sp[k];\r

  \    let loc = node.loc;\r

  \    if (loc && AREAS[loc]) {\r

  \      if (k == 'all_opps') {\r

  \        console.log('habe area fuer', k);\r

  \      }\r

  \      let nParent = AREAS[loc];\r

  \      let nChild = node;\r

  \      if (nChild.panels) {\r

  \        let hybrid = {};\r

  \        let num = nChild.pool.length;\r

  \        let params = nParent.params;\r

  \        params.num = num;\r

  \        nParent.panels = nChild.panels;\r

  \        hybrid.params = params;\r

  \        let panels = nChild.panels;\r

  \        if (k == 'opp_info') {\r

  \        }\r

  \        for (const oid of nChild.pool) {\r

  \          let o = pool[oid];\r

  \          let otherKeys = o.RSG;\r

  \          if (k == 'opp_info') {\r

  \          }\r

  \          for (const k2 of otherKeys) {\r

  \            panel\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  }"
parseDynamicSpec1: "function parseDynamicSpec1() {\r

  \  let sp = jsCopy(SPEC.dynamicSpec);\r

  \  POOLS.augData = makeDefaultPool(sData);\r

  \  annotate(sp);\r

  \  dynSpec = sp;\r

  \  let pool = POOLS.augData;\r

  \  for (const k in sp) {\r

  \    let node = sp[k];\r

  \    if (node.loc) {\r

  \      let group = node.pool;\r

  \      if (isEmpty(group)) continue;\r

  \      let loc = node.loc;\r

  \      let uiNode = AREAS[loc];\r

  \      prepParentForChildren(loc, group.length);\r

  \      for (const oid of group) {\r

  \        addPanel(loc, oid);\r

  \      }\r

  \    }\r

  \  }\r

  \  for (const oid in pool) {\r

  \    let o = pool[oid];\r

  \    if (nundef(o.RSG)) continue;\r

  \    let merged = mergeDynSetNodes(o);\r

  \    if (oid == 'Player2') {\r

  \    }\r

  \    if (!merged.type || !PROTO[merged.type]) continue;\r

  \    let info = jsCopy(PROTO[merged.type]);\r

  \    if (oid == 'Player2') {\r

  \    }\r

  \    let areaName = getDynId(merged.loc, oid);\r

  \    dynamicArea(areaName, info, oid, o);\r

  \    let propName = info.type == 'panel' ? 'panels'\r

  \      : info.type == 'list' ? 'elm' : 'data';\r

  \    let oEinhaengen = AREAS[areaName];\r

  \    if (nundef(oEinhaengen[propName])) oEinhaengen[propName] = [];\r

  \    oEinhaengen[propName].push(info);\r

  \  }\r

  }"
ParseFen: "function ParseFen(fen) {\r

  \  var rank = RANKS.RANK_8;\r

  \  var file = FILES.FILE_A;\r

  \  var piece = 0;\r

  \  var count = 0;\r

  \  var i = 0;\r

  \  var sq64 = 0;\r

  \  var sq120 = 0;\r

  \  var fenCnt = 0;\r

  \  ResetBoard();\r

  \  while ((rank >= RANKS.RANK_1) && fenCnt < fen.length) {\r

  \    count = 1;\r

  \    switch (fen[fenCnt]) {\r

  \      case 'p': piece = PIECES.bP; break;\r

  \      case 'r': piece = PIECES.bR; break;\r

  \      case 'n': piece = PIECES.bN; break;\r

  \      case 'b': piece = PIECES.bB; break;\r

  \      case 'k': piece = PIECES.bK; break;\r

  \      case 'q': piece = PIECES.bQ; break;\r

  \      case 'P': piece = PIECES.wP; break;\r

  \      case 'R': piece = PIECES.wR; break;\r

  \      case 'N': piece = PIECES.wN; break;\r

  \      case 'B': piece = PIECES.wB; break;\r

  \      case 'K': piece = PIECES.wK; break;\r

  \      case 'Q': piece = PIECES.wQ; break;\r

  \      case '1':\r

  \      case '2':\r

  \      case '3':\r

  \      case '4':\r

  \      case '5':\r

  \      case '6':\r

  \      case '7':\r

  \      case '8':\r

  \        piece = PIECES.EMPTY;\r

  \        count = fen[fenCnt].charCodeAt() - '0'.charCodeAt();\r

  \        break;\r

  \      case '/':\r

  \      case ' ':\r

  \        rank--;\r

  \        file = FILES.FILE_A;\r

  \        fenCnt++;\r

  \        continue;\r

  \      default:\r

  \        printf(\"FEN error \\n\");\r

  \        return;\r

  \    }\r

  \    for (i = 0; i < count; i++) {\r

  \      sq64 = rank * 8 + file;\r

  \      sq120 = SQ120(sq64);\r

  \      if (piece != PIECES.EMPTY) {\r

  \        brd_pieces[sq120] = piece;\r

  \      }\r

  \      file++;\r

  \    }\r

  \    fenCnt++;\r

  \  }\r

  \  brd_side = (fen[fenCnt] == 'w') ? COLOURS.WHITE : COLOURS.BLACK;\r

  \  fenCnt += 2;\r

  \  for (i = 0; i < 4; i++) {\r

  \    if (fen[fenCnt] == ' ') {\r

  \      break;\r

  \    }\r

  \    switch (fen[fenCnt]) {\r

  \      case 'K': brd_castlePerm |= CASTLEBIT.WKCA; break;\r

  \      case 'Q': brd_castlePerm |= CASTLEBIT.WQCA; break;\r

  \      case 'k': brd_castlePerm |= CASTLEBIT.BKCA; break;\r

  \      case 'q': brd_castlePerm |= CASTLEBIT.BQCA; break;\r

  \      default: break;\r

  \    }\r

  \    fenCnt++;\r

  \  }\r

  \  fenCnt++;\r

  \  if (fen[fenCnt] != '-') {\r

  \    file = fen[fenCnt].charCodeAt() - 'a'.charCodeAt();\r

  \    rank = fen[fenCnt + 1].charCodeAt() - '1'.charCodeAt();\r

  \    console.log(\"fen[fenCnt]:\" + fen[fenCnt] + \" File:\" + file + \"
  Rank:\" + rank);\r

  \    brd_enPas = FR2SQ(file, rank);\r

  \  }\r

  \  brd_posKey = GeneratePosKey();\r

  \  UpdateListsMaterial();\r

  }"
parseHand: "function parseHand(keys, deck) {\r

  \  let h1 = keys.map(x => Card52._fromKey(x));\r

  \  if (isdef(deck)) h1.map(x => deck.remove(x));\r

  \  return h1;\r

  }"
ParseMove: "function ParseMove(from, to) {\r

  \  GenerateMoves();\r

  \  var Move = NOMOVE;\r

  \  var PromPce = PIECES.EMPTY;\r

  \  var found = BOOL.FALSE;\r

  \  for (index = brd_moveListStart[brd_ply]; index <
  brd_moveListStart[brd_ply + 1]; ++index) {\r

  \    Move = brd_moveList[index];\r

  \    if (FROMSQ(Move) == from && TOSQ(Move) == to) {\r

  \      PromPce = PROMOTED(Move);\r

  \      if (PromPce != PIECES.EMPTY) {\r

  \        if ((PromPce == PIECES.wQ && brd_side == COLOURS.WHITE) || (PromPce
  == PIECES.bQ && brd_side == COLOURS.BLACK)) {\r

  \          found = BOOL.TRUE;\r

  \          break;\r

  \        }\r

  \        continue;\r

  \      }\r

  \      found = BOOL.TRUE;\r

  \      break;\r

  \    }\r

  \  }\r

  \  if (found != BOOL.FALSE) {\r

  \    if (MakeMove(Move) == BOOL.FALSE) {\r

  \      return NOMOVE;\r

  \    }\r

  \    TakeMove();\r

  \    return Move;\r

  \  }\r

  \  return NOMOVE;\r

  }"
parsePath: "function parsePath(legs, prop, info) {\r

  \  let oInfo = info;\r

  \  if (isString(prop)) prop = prop.slice(1);\r

  \  if (!isEmpty(legs[0])) {\r

  \    let len = legs.length - 1;\r

  \    let lastLeg = legs[len];\r

  \    let restLegs = legs.slice(0, len);\r

  \    for (const leg of restLegs) {\r

  \      if (oInfo[leg]) oInfo = oInfo[leg];\r

  \      else {\r

  \        console.log('cannot parse', leg, oInfo);\r

  \      }\r

  \    }\r

  \    if (!info.settings) info.settings = {};\r

  \    let k = legs.join('_');\r

  \    info.settings[k] = [oInfo];\r

  \    info.settings[k].push(lastLeg);\r

  \    if (isString(prop)) info.settings[k].push(getObject(info.oid)[prop]);\r

  \  }\r

  }"
parsePropertyPath: "function parsePropertyPath(odict, s) {\r

  \  if (isEmpty(s)) return odict;\r

  \  let o_keys = s.split('.');\r

  \  return lookup(odict, o_keys);\r

  }"
parseRect: "function parseRect(elem) {\r

  \  let r = elem.getAttribute('rect');\r

  \  console.log('elem.rect', r);\r

  \  if (nundef(r)) return getRect(elem);\r

  \  r = r.split(' ');\r

  \  let rect = { w: Number(r[0]), h: Number(r[1]), t: Number(r[2]), l:
  Number(r[3]), b: Number(r[4]), r: Number(r[5]) };\r

  \  return rect;\r

  }"
parseStaticSpec: "function parseStaticSpec() {\r

  \  for (const k in SPEC.staticSpec) {\r

  \    if (k == 'root') continue;\r

  \    let oSpec = jsCopy(SPEC.staticSpec[k]);\r

  \    if (oSpec.loc) {\r

  \      let loc = oSpec.loc;\r

  \      if (!oSpec.id) oSpec.id = k;\r

  \      staticArea(loc, oSpec);\r

  \      let oEinhaengen = AREAS[loc];\r

  \      if (nundef(oEinhaengen.panels)) oEinhaengen.panels = [];\r

  \      oEinhaengen.panels.push(oSpec);\r

  \    } else {\r

  \      PROTO[k] = oSpec;\r

  \    }\r

  \  }\r

  }"
path2fen: function path2fen(fen, path) { let o = lookup(fen, path.split('.'));
  return o; }
path2UI: "function path2UI(path) {\r

  \  let res = lookup(UI, path.split('.'));\r

  \  return res;\r

  }"
pauseloop: function pauseloop() { clearInterval(DA.interval); }
pauseSound: "function pauseSound() {\r

  \  _qSound = [];\r

  \  if (_loaded && isdef(_sndPlayer)) {\r

  \    clearTimeout(TOSound);\r

  \    _sndPlayer.onended = null;\r

  \    _sndPlayer.onpause = whenSoundPaused;\r

  \    _sndPlayer.pause();\r

  \  }\r

  }"
pauseUI: function pauseUI() { uiPausedStack.push(uiPaused); uiPaused |= uiHaltedMask; }
PawnsInit: "function PawnsInit() {\r

  \  var index = 0;\r

  \  for (index = 0; index < 10; ++index) {\r

  \    PawnRanksWhite[index] = RANKS.RANK_8;\r

  \    PawnRanksBlack[index] = RANKS.RANK_1;\r

  \  }\r

  \  pce = PIECES.wP;\r

  \  for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \    sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \    if (RanksBrd[sq] < PawnRanksWhite[FilesBrd[sq] + 1]) {\r

  \      PawnRanksWhite[FilesBrd[sq] + 1] = RanksBrd[sq];\r

  \    }\r

  \  }\r

  \  pce = PIECES.bP;\r

  \  for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {\r

  \    sq = brd_pList[PCEINDEX(pce, pceNum)];\r

  \    if (RanksBrd[sq] > PawnRanksBlack[FilesBrd[sq] + 1]) {\r

  \      PawnRanksBlack[FilesBrd[sq] + 1] = RanksBrd[sq];\r

  \    }\r

  \  }\r

  }"
payment_complete: "function payment_complete() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  A.payment = A.items[A.selected[0]];\r

  \  let nextstage = Z.stage = ARI.stage[A.command];\r

  \  ari_pre_action();\r

  }"
PCEINDEX: function PCEINDEX(pce, pceNum) { return (pce * 10 + pceNum); }
percentOf: "function percentOf(elem, percentW, percentH) {\r

  \  if (nundef(percentH)) percentH = percentW;\r

  \  if (nundef(percentW)) percentW = percentH = 100;\r

  \  let r = getRect(elem);\r

  \  return { w: r.w * percentW / 100, h: r.h * percentH / 100 };\r

  }"
percentVh: function percentVh(percent) { return percent *
  document.documentElement.clientHeight / 100; }
percentVhIncludingScrollbar: "function percentVhIncludingScrollbar(percent) {\r

  \  var h = Math.max(document.documentElement.clientHeight,
  window.innerHeight || 0);\r

  \  return (percent * h) / 100;\r

  }"
percentVMax: function percentVMax(percent) { return Math.max(percentVh(percent),
  percentVw(percent)); }
percentVMaxIncludingScrollbar: "function percentVMaxIncludingScrollbar(percent)
  {\r

  \  return Math.max(percentVhIncludingScrollbar(percent),
  percentVwIncludingScrollbar(percent));\r

  }"
percentVMin: function percentVMin(percent) { return Math.min(percentVh(percent),
  percentVw(percent)); }
percentVMinIncludingScrollbar: "function percentVMinIncludingScrollbar(percent)
  {\r

  \  return Math.min(percentVhIncludingScrollbar(percent),
  percentVwIncludingScrollbar(percent));\r

  }"
percentVw: function percentVw(percent) { return percent *
  document.documentElement.clientWidth / 100; }
percentVwIncludingScrollbar: "function percentVwIncludingScrollbar(percent) {\r

  \  var w = Math.max(document.documentElement.clientWidth, window.innerWidth
  || 0);\r

  \  return (percent * w) / 100;\r

  }"
perform_search: "function perform_search() {\r

  \  let words = toWords(mBy('iKeywords').value);\r

  \  console.log('keywords are', words);\r

  \  let res = [], i = 0;\r

  \  for (const c of DB.code) {\r

  \    for (const w of words) {\r

  \      let w1 = w.toLowerCase();\r

  \      let kw = c.kw.toLowerCase();\r

  \      let code = c.c.toLowerCase();\r

  \      if (kw.includes(w1) || code.includes(w1)) {\r

  \        res.push(c);\r

  \        c.index = i;\r

  \        break;\r

  \      }\r

  \    }\r

  \    i++;\r

  \  }\r

  \  console.log('filtered:', res);\r

  \  show_code_list(res);\r

  }"
Perft: "function Perft(depth) {\r

  \  MakeNullMove();\r

  \  if (brd_posKey != GeneratePosKey()) {\r

  \    console.log(printGameLine());\r

  \    PrintBoard();\r

  \    srch_stop = BOOL.TRUE;\r

  \    console.log('Hash Error After Make');\r

  \  }\r

  \  TakeNullMove();\r

  \  if (brd_posKey != GeneratePosKey()) {\r

  \    console.log(printGameLine());\r

  \    PrintBoard();\r

  \    srch_stop = BOOL.TRUE;\r

  \    console.log('Hash Error After Take');\r

  \  }\r

  \  if (depth == 0) {\r

  \    perft_leafNodes++;\r

  \    return;\r

  \  }\r

  \  GenerateMoves();\r

  \  var index;\r

  \  var move;\r

  \  for (index = brd_moveListStart[brd_ply]; index <
  brd_moveListStart[brd_ply + 1]; ++index) {\r

  \    move = brd_moveList[index];\r

  \    if (MakeMove(move) == BOOL.FALSE) {\r

  \      continue;\r

  \    }\r

  \    Perft(depth - 1);\r

  \    TakeMove();\r

  \  }\r

  \  return;\r

  }"
PerftTest: "function PerftTest(depth) {\r

  \  PrintBoard();\r

  \  console.log(\"Starting Test To Depth:\" + depth);\r

  \  perft_leafNodes = 0;\r

  \  GenerateMoves();\r

  \  var index;\r

  \  var move;\r

  \  var moveNum = 0;\r

  \  for (index = brd_moveListStart[brd_ply]; index <
  brd_moveListStart[brd_ply + 1]; ++index) {\r

  \    move = brd_moveList[index];\r

  \    if (MakeMove(move) == BOOL.FALSE) {\r

  \      continue;\r

  \    }\r

  \    moveNum++;\r

  \    var cumnodes = perft_leafNodes;\r

  \    Perft(depth - 1);\r

  \    TakeMove();\r

  \    var oldnodes = perft_leafNodes - cumnodes;\r

  \    console.log(\"move:\" + moveNum + \" \" + PrMove(move) + \" \" +
  oldnodes);\r

  \  }\r

  \  console.log(\"Test Complete : \" + perft_leafNodes + \" leaf nodes
  visited\");\r

  \  $(\"#FenOutput\").text(\"Test Complete : \" + perft_leafNodes + \" leaf
  nodes visited\");\r

  \  return;\r

  }"
PHLayout: "function PHLayout() {\r

  \  if (isdef(UI.DRR)) UI.DRR.remove();\r

  \  mAppend(UI.dRechts, UI.dHistory);\r

  \  Clientdata.historyLayout = 'ph';\r

  }"
phpPost: "function phpPost(data, cmd) {\r

  \  if (DA.TEST1 === true && cmd == 'table') { cmd = 'table1'; }\r

  \  pollStop();\r

  \  var o = {};\r

  \  o.data = valf(data, {});\r

  \  o.cmd = cmd;\r

  \  o = JSON.stringify(o);\r

  \  if (DA.SIMSIM && (DA.exclusive || ['table', 'startgame', 'gameover',
  'tables'].includes(cmd))) {\r

  \    sendSIMSIM(o, DA.exclusive);\r

  \    FORCE_REDRAW = true;\r

  \    if (DA.exclusive) return;\r

  \  } else if (DA.simulate) {\r

  \    sendSIMSIM(o, true, true);\r

  \    FORCE_REDRAW = true;\r

  \    return;\r

  \  }\r

  \  clear_transaction();\r

  \  var xml = new XMLHttpRequest();\r

  \  loader_on();\r

  \  xml.onload = function () {\r

  \    if (xml.readyState == 4 || xml.status == 200) {\r

  \      loader_off();\r

  \      handle_result(xml.responseText, cmd);\r

  \    } else { console.log('WTF?????') }\r

  \  }\r

  \  xml.open(\"POST\", \"api.php\", true);\r

  \  xml.send(o);\r

  }"
phpPostSimulate: "function phpPostSimulate(o, cmd) {\r

  \  FORCE_REDRAW = true;\r

  \  if (nundef(o.options) && isdef(Z)) {\r

  \    o.turn = Z.turn;\r

  \    o.expected = Z.expected;\r

  \    o.options = Z.options;\r

  \  }\r

  \  switch (cmd) {\r

  \    case \"gameover\":\r

  \    case \"move\":\r

  \    case \"table\":\r

  \    case \"startgame\":\r

  \      let t = pack_table(o);\r

  \      let t1 = JSON.parse(t);\r

  \      handle_result(t, cmd); break;\r

  \    default: break;\r

  \  }\r

  }"
picDiv: function picDiv(size) { return o => pictoDiv(o.key, o.color, size, size); }
picInfo: "function picInfo(key) {\r

  \  if (isdef(symbolDict[key])) return symbolDict[key];\r

  \  else {\r

  \    ensureSymByHex();\r

  \    let info = symByHex[key];\r

  \    if (isdef(info)) { return info; }\r

  \    else {\r

  \      let infolist = picSearch({ keywords: key });\r

  \      if (infolist.length == 0) return null;\r

  \      else return chooseRandom(infolist);\r

  \    }\r

  \  }\r

  }"
PickNextMove: "function PickNextMove(moveNum) {\r

  \  var index = 0;\r

  \  var bestScore = 0;\r

  \  var bestNum = moveNum;\r

  \  for (index = moveNum; index < brd_moveListStart[brd_ply + 1]; ++index)
  {\r

  \    if (brd_moveScores[index] > bestScore) {\r

  \      bestScore = brd_moveScores[index];\r

  \      bestNum = index;\r

  \    }\r

  \  }\r

  \  temp = brd_moveList[moveNum];\r

  \  brd_moveList[moveNum] = brd_moveList[bestNum];\r

  \  brd_moveList[bestNum] = temp;\r

  \  temp = brd_moveScores[moveNum];\r

  \  brd_moveScores[moveNum] = brd_moveScores[bestNum];\r

  \  brd_moveScores[bestNum] = temp;\r

  }"
pickSuitableItems: "function pickSuitableItems(n, options) {\r

  \  let items = genItems(n, options);\r

  \  let words = items.map(x => x.label);\r

  \  let minlen = arrMinMax(words, x => x.length).min;\r

  \  let used = [];\r

  \  for (const item of items) {\r

  \    let res = minlen > 6 ? getRandomVowel(item.label, used) : minlen > 3 ?
  getRandomConsonant(item.label, used) : getRandomLetter(item.label, used);\r

  \    if (isEmpty(res)) return null;\r

  \    let i = item.iLetter = res.i;\r

  \    let letter = item.letter = item.label[i];\r

  \    used.push(letter);\r

  \  }\r

  \  return items;\r

  }"
pickSuitableItems_dep: "function pickSuitableItems_dep(n, options) {\r

  \  let items = genItems(n, options);\r

  \  let words = items.map(x => x.label);\r

  \  let used = [];\r

  \  for (const item of items) {\r

  \    let res = getRandomConsonant(item.label, used);\r

  \    if (isEmpty(res)) return null;\r

  \    let i = item.iLetter = res.i;\r

  \    let letter = item.letter = item.label[i];\r

  \    used.push(letter);\r

  \  }\r

  \  return items;\r

  }"
picLabelDiv: function picLabelDiv(size) { return o => pictoLabelDiv(o.key,
  o.label, o.color, size); }
picRandom: "function picRandom(type, keywords, n = 1) {\r

  \  let infolist = picSearch({ type: type, keywords: keywords });\r

  \  return n == 1 ? chooseRandom(infolist) : choose(infolist, n);\r

  }"
picSearch: "function picSearch({ keywords, type, func, set, group, subgroup,
  props, isAnd, justCompleteWords }) {\r

  \  if (isdef(set)) ensureSymBySet();\r

  \  if (isdef(type) && type != 'all') ensureSymByType();\r

  \  let [dict, list] = isdef(set) ? [symBySet[set], symListBySet[set]]\r

  \    : nundef(type) || type == 'all' ? [symbolDict, symbolList] :
  [symByType[type], symListByType[type]];\r

  \  if (set == 'role' && firstCond(dict2list(dict), x => x.id == 'rotate'))
  console.log('===>', symBySet[set], dict, dict2list(dict));\r

  \  if (nundef(keywords)) return isdef(func) ? func(dict) : list;\r

  \  if (!isList(keywords)) keywords = [keywords];\r

  \  if (isString(props)) props = [props];\r

  \  let infolist = [];\r

  \  if (isList(props)) {\r

  \    if (isAnd) {\r

  \      if (justCompleteWords) {\r

  \        infolist = allWordsContainedInPropsAsWord(dict, keywords, props);\r

  \      } else {\r

  \        infolist = allWordsContainedInProps(dict, keywords, props);\r

  \      }\r

  \    } else {\r

  \      if (justCompleteWords) {\r

  \        infolist = anyWordContainedInPropsAsWord(dict, keywords, props);\r

  \      } else {\r

  \        infolist = anyWordContainedInProps(dict, keywords, props);\r

  \      }\r

  \    }\r

  \  } else if (nundef(props) && nundef(func)) {\r

  \    if (isAnd) {\r

  \      if (justCompleteWords) {\r

  \        infolist = allWordsContainedInKeysAsWord(dict, keywords);\r

  \      } else {\r

  \        infolist = allWordsContainedInKeys(dict, keywords);\r

  \      }\r

  \    } else {\r

  \      if (justCompleteWords) {\r

  \        infolist = anyWordContainedInKeysAsWord(dict, keywords);\r

  \      } else {\r

  \        infolist = anyWordContainedInKeys(dict, keywords);\r

  \      }\r

  \    }\r

  \  } else if (isdef(func)) {\r

  \    infolist = func(dict, keywords);\r

  \  }\r

  \  return infolist;\r

  }"
picSet: "function picSet(setname) {\r

  \  ensureSymBySet();\r

  \  return chooseRandom(symListBySet[setname]);\r

  }"
picto: "function picto(key, x, y, w, h, fg, bg) {\r

  \  let ch = iconChars[key];\r

  \  let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';\r

  \  let text = String.fromCharCode('0x' + ch);\r

  \  let d = document.createElement('div');\r

  \  d.style.textAlign = 'center';\r

  \  d.style.fontFamily = family;\r

  \  d.style.fontWeight = 900;\r

  \  d.style.fontSize = h;\r

  \  d.style.backgroundColor = bg;\r

  \  d.style.color = fg;\r

  \  d.innerHTML = text;\r

  \  return d;\r

  }"
pictoDiv: "function pictoDiv(key, color, w, h) {\r

  \  let d = maPicSimple(key);\r

  \  mColor(d, color);\r

  \  mSizePic(d, w, h);\r

  \  return d;\r

  }"
pictoLabelDiv: "function pictoLabelDiv(key, label, color = 'blue', sz = 50, gap
  = 2, fz) {\r

  \  let dOuter = mCreate('div');\r

  \  let wOuter = sz;\r

  \  let wInner = sz - 2 * gap;\r

  \  mStyle(dOuter, {\r

  \    width: wOuter,\r

  \    padding: 0,\r

  \    display: 'inline',\r

  \    position: 'absolute',\r

  \    'text-align': 'center',\r

  \    'background-color': randomColor(),\r

  \  });\r

  \  let dPic = pictoDiv(key, color, wInner, wInner);\r

  \  mAppend(dOuter, dPic)\r

  \  mStyle(dPic, { margin: gap, 'margin-bottom': 1 })\r

  \  let dText = mAppendText(dOuter, label);\r

  \  dText.classList.add('truncate');\r

  \  mStyle(dText, { 'margin-bottom': gap, width: wOuter });\r

  \  return dOuter;\r

  }"
PieceIsOnSq: "function PieceIsOnSq(sq, top, left) {\r

  \  if ((RanksBrd[sq] == 7 - Math.round(top / 60)) &&\r

  \    FilesBrd[sq] == Math.round(left / 60)) {\r

  \    return BOOL.TRUE;\r

  \  }\r

  \  return BOOL.FALSE;\r

  }"
pKeyVal: function pKeyVal(dParent, k, val) { let d = pPanel(dParent);
  d.innerHTML = k + ':'; pVal(d, val); return d; }
placeDeck: "function placeDeck(deck, cont, x, y) {\r

  \  deck.unmount();\r

  \  deck.mount(cont);\r

  \  deck.translate(x, y);\r

  }"
placement: "function placement() {\r

  \  let plac = SPEC.placement;\r

  }"
placeSymbol: "function placeSymbol(sym, szSym, margin, posStyles) {\r

  \  let d = iDiv(sym);\r

  \  posStyles.position = 'absolute';\r

  \  posStyles.margin = margin;\r

  \  posStyles.h = szSym;\r

  \  posStyles.w = szSym;\r

  \  mStyle(d, posStyles);\r

  }"
player_stat_count: "function player_stat_count(key, n, dParent, styles = {}) {\r

  \  let sz = valf(styles.sz, 16);\r

  \  addKeys({ display: 'flex', margin: 4, dir: 'column', hmax: 2 * sz,
  'align-content': 'start', fz: sz, align: 'center' }, styles);\r

  \  let d = mDiv(dParent, styles);\r

  \  if (isdef(Syms[key])) mSym(key, d, { h: sz, 'line-height': sz, w: '100%'
  });\r

  \  else mText(key, d, { h: sz, fz: sz, w: '100%' });\r

  \  d.innerHTML += `<span style=\"font-weight:bold\">${n}</span>`;\r

  \  return d;\r

  }"
playsCard: "function playsCard(pl, card, dHand, dTarget, faceUp) {\r

  \  pl.cardPlayed = card;\r

  \  removeCard(card, dHand);\r

  \  addCard(card, dTarget);\r

  \  if (faceUp == true) Card52.turnFaceUp(card);\r

  \  mRemoveStyle(card.div, ['cursor', 'position']);\r

  }"
playSound: "function playSound(key, wait = true) {\r

  \  if (!wait) _qSound = [];\r

  \  _enqSound(key);\r

  \  if (_idleSound) { _idleSound = false; _deqSound(); }\r

  }"
playsound: function playsound() { playSound(...arguments); }
playt: "function playt() {\r

  \  var tag = document.createElement('script');\r

  \  tag.src = \"https://www.youtube.com/iframe_api\";\r

  \  var firstScriptTag = document.getElementsByTagName('script')[0];\r

  \  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r

  \  var player;\r

  \  function onYouTubeIframeAPIReady() {\r

  \    player = new YT.Player('player', {\r

  \      height: '390',\r

  \      width: '640',\r

  \      videoId: 'Kopr6Q3oGHw',\r

  \      playerVars: {\r

  \        'playsinline': 1,\r

  \      },\r

  \      events: {\r

  \        'onReady': onPlayerReady,\r

  \        'onStateChange': onPlayerStateChange\r

  \      }\r

  \    });\r

  \  }\r

  \  function onPlayerReady(event) {\r

  \    console.log('player is ready - please click anywhere on page')\r

  \    onclick = () => event.target.playVideo();\r

  \  }\r

  \  var done = false;\r

  \  function onPlayerStateChange(event) {\r

  \    if (event.data == YT.PlayerState.PLAYING && !done) {\r

  \      setTimeout(volume_up, 2000);\r

  \      done = true;\r

  \    }\r

  \  }\r

  }"
plot_cdf: function plot_cdf(canvas, mean, stdev, xfrom, xto, styles = {}) { }
plot_derivative: function plot_derivative(canvas, f, xfrom, xto, styles = {}) { }
plot_function: function plot_function(canvas, f, xfrom, xto, styles = {}) { }
plot_integral: function plot_integral(canvas, f, xfrom, xto, styles = {}) { }
plot_line: "function plot_line(canvas, item) {\r

  \  let cx = canvas.cx;\r

  \  cx.font = `${valf(item.fz, 16)}px Arial`;\r

  \  cx.fillStyle = item.color;\r

  \  if (isdef(item.label)) cx.fillText(`  ${item.label}`, 0, 0);\r

  \  cLine(item.x1, item.y1, item.x2, item.y2, { bg: item.color }, 0, cx);\r

  }"
plot_on_canvas: "function plot_on_canvas(d, items) {\r

  \  let r = getRect(dTable);\r

  \  let c = mCanvas(d, { w: r.w, h: r.h, rounding: 0, bg: 'white' }); let
  [cv, cx] = [c.cv, c.cx];\r

  \  for (const item of items) {\r

  \    let d1 = item.div = cRect(item.x, item.y, item.w, item.h, { bg: item.bg
  }, cx);\r

  \  }\r

  }"
plot_on_div: "function plot_on_div(d, items) {\r

  \  mStyle(d, { position: 'relative' });\r

  \  for (const item of items) {\r

  \    let d1 = item.div = mDiv(d, { x: item.x, y: item.y, w: item.w, h:
  item.h, bg: item.bg, rounding: '50%', position: 'absolute' });\r

  \  }\r

  }"
plot_pdf: function plot_pdf(canvas, mean, stdev, xfrom, xto, styles = {}) { }
plot_point: function plot_point(canvas, x, y, styles = {}) { }
plural: "function plural(n) { return n == 0 || n > 1 ? 's' : ''; }"
points_from_feature: "function points_from_feature(f) {\r

  \  let coords = f.geometry.coordinates;\r

  \  let pts = [];\r

  \  for (const c of coords[0]) {\r

  \    let p = { x: c[0], y: c[1] };\r

  \    pts.push(p);\r

  \  }\r

  \  return pts;\r

  }"
points_to_waypoints: function points_to_waypoints(pts = []) { return pts.map(x
  => L.latLng(x[0], x[1])); }
points2string: "function points2string(listOfPoints) {\r

  \  return listOfPoints.map(p => '' + p.x + ',' + p.Y).join(' '); //'0,0
  100,0 50,80',\r

  }"
pointStyleFunction: "function pointStyleFunction(feature, resolution) {\r

  \  return new Style({\r

  \    image: new CircleStyle({\r

  \      radius: 10,\r

  \      fill: new Fill({ color: 'rgba(255, 0, 0, 0.1)' }),\r

  \      stroke: new Stroke({ color: 'red', width: 1 }),\r

  \    }),\r

  \    text: createTextStyle(feature, resolution, myDom.points),\r

  \  });\r

  }"
poll: "function poll() {\r

  \  if (IS_POLLING_ALLOWED) {\r

  \    if (isdef(DA.poll.func)) DA.poll.data = DA.poll.func(DA.poll.data);\r

  \    console.log('...poll')\r

  \    to_server(DA.poll.data, DA.poll.type);\r

  \  } else console.log('polling OFF!');\r

  }"
poll_for_table_seen_or_deleted: "function poll_for_table_seen_or_deleted() {\r

  \  start_polling({ uname: Session.cur_user, tid: Session.cur_tid },
  'poll_table_seen', on_poll_table_seen, 3000);\r

  }"
poll_for_table_show: "function poll_for_table_show() {\r

  \  start_polling({ uname: Session.cur_user, tid: Session.cur_tid },
  'poll_table_show', on_poll_table_show, 3000);\r

  }"
poll_for_table_started: "function poll_for_table_started() {\r

  \  start_polling(Session.cur_user, 'poll_table_started',
  on_poll_table_started, 3000);\r

  }"
polling_shield_off: function polling_shield_off() { mBy('dPollingShield').style.display = 'none'; }
polling_shield_on: "function polling_shield_on(msg) {\r

  \  let d = mBy('dPollingShield');\r

  \  d.style.display = 'block';\r

  \  d.innerHTML = msg;\r

  }"
pollStart: "function pollStart() {\r\n}"
pollStop: function pollStop() { clearTimeout(TO.poll); Clientdata.AUTORESET = true; }
polygonStyleFunction: "function polygonStyleFunction(feature, resolution) {\r

  \  return new Style({\r

  \    stroke: new Stroke({\r

  \      color: 'blue',\r

  \      width: 1,\r

  \    }),\r

  \    fill: new Fill({\r

  \      color: 'rgba(0, 0, 255, 0.1)',\r

  \    }),\r

  \    text: createTextStyle(feature, resolution, myDom.polygons),\r

  \  });\r

  }"
polyPointsFrom: "function polyPointsFrom(w, h, x, y, pointArr) {\r

  \  x -= w / 2;\r

  \  y -= h / 2;\r

  \  let pts = pointArr.map(p => [p.X * w + x, p.Y * h + y]);\r

  \  let newpts = [];\r

  \  for (const p of pts) {\r

  \    newp = { X: p[0], Y: Math.round(p[1]) };\r

  \    newpts.push(newp);\r

  \  }\r

  \  pts = newpts;\r

  \  let sPoints = pts.map(p => '' + p.X + ',' + p.Y).join(' '); //'0,0 100,0
  50,80',\r

  \  return sPoints;\r

  }"
pop_hist: function pop_hist() { let top = G.hist.pop(); G.selist = top.selist; }
pop_top: "function pop_top(o) {\r

  \  if (isEmpty(o.list)) return null;\r

  \  let t = o.get_topcard();\r

  \  o.list.shift();\r

  \  o.renew(o.list, o.cardcontainer, o.items, o.get_card_func);\r

  \  return t;\r

  }"
populate_game_settings: "function populate_game_settings(dParent, tid) {\r

  \  if (nundef(tid)) Session.game_options.game = {};\r

  \  let poss = DB.games[Session.cur_game].options;\r

  \  if (nundef(poss)) return;\r

  \  for (const p in poss) {\r

  \    let key = p;\r

  \    let val = poss[p];\r

  \    if (isString(val)) {\r

  \      let list = val.split(',');\r

  \      let fs = mRadioGroup(dParent, {}, `d_${key}`, key);\r

  \      let checkfirst = nundef(tid);\r

  \      for (const v of list) {\r

  \        let d = mRadio(v, isNumber(v) ? Number(v) : v, fs, { cursor:
  'pointer' }, null, key);\r

  \        if (checkfirst || lookup(Session.game_options.game, [key]) == v)
  {\r

  \          let inp = d.firstChild;\r

  \          inp.setAttribute('checked', true);\r

  \          checkfirst = false;\r

  \        }\r

  \      }\r

  \      measure_fieldset(fs);\r

  \    }\r

  \  }\r

  }"
populate_players: "function populate_players(list) {\r

  \  let d = mBy('d_players');\r

  \  if (nundef(d)) return;\r

  \  mRemoveChildrenFromIndex(d, 1);\r

  \  Session.game_options.players = [];\r

  \  for (const name of list) {\r

  \    Session.game_options.players.push(name);\r

  \    let d1 = mDiv(d, {}, 'dpl_' + name);\r

  \    let b = mButton('edit', ev => open_player_editor(ev), d1);\r

  \    let label = `${name} (${get_startlevel(name, Session.cur_game)}
  ${get_preferred_lang(name)})`;\r

  \    if (name == Session.cur_user) { let el = mToggle(label, name, d1, {
  display: 'inline' }); el.firstChild.setAttribute('disabled', true); }\r

  \    else { mToggle(label, name, d1, { cursor: 'pointer', display: 'inline'
  }); }\r

  \  }\r

  \  measure_fieldset(d);\r

  \  let styles = { fz: 14, wmin: '90%', matop: 8 };\r

  \  mButton('clear all', clear_all_players, d_players, styles, null,
  'b_clear_players');\r

  \  mButton('add players', add_players, d_players, styles, null,
  'b_add_players');\r

  \  mButton('hand select', hand_select, d_players, styles, null,
  'b_select_players');\r

  \  mButton('reduce', reduce_to_current_players, d_players, styles, null,
  'b_reduce_players');\r

  \  mButton('show all', show_all_players, d_players, styles, null,
  'b_show_all_players');\r

  }"
populate_players_v0: "function populate_players_v0(list) {\r

  \  let d = mBy('d_players');\r

  \  if (nundef(d)) return;\r

  \  mRemoveChildrenFromIndex(d, 1);\r

  \  Session.game_options.players = [];\r

  \  for (const name of list) {\r

  \    Session.game_options.players.push(name);\r

  \    if (name == Session.cur_user) { let el = mToggle(name, name, d);
  el.firstChild.setAttribute('disabled', true); }\r

  \    else { mToggle(name, name, d, { cursor: 'pointer' }); }\r

  \  }\r

  \  d_players.innerHTML += '<br>';\r

  \  mTextArea(3, 20, d_players, { fz: 16, display: 'none', resize: 'none',
  border: 'none', outline: 'none' }, 'ta_edit_players');\r

  \  d_players.innerHTML += '<br>';\r

  \  measure_fieldset(d);\r

  \  mButton('edit', onclick_edit_players, d_players, { fz: 14, wmin: '90%' },
  null, 'b_edit_players');\r

  }"
populate_playmode: "function populate_playmode(d, modes) {\r

  \  let group = mRadioGroup(d, {}, 'd_mode', 'play mode');\r

  \  modes = modes.split(',');\r

  \  for (const m of modes) {\r

  \    let name = m == 'pp' ? 'pass&play' : m == 'multi' ? 'multiplayer' :
  m;\r

  \    let d = mRadio(name, m, group, { cursor: 'default' }, null, 'mode');\r

  \    let inp = d.firstChild;\r

  \    inp.setAttribute('disabled', true);\r

  \    if (m != 'multi') mClass(d, 'disabled');\r

  \  }\r

  \  measure_fieldset(group);\r

  \  let mode = Session.game_options.mode =
  modes.includes(Session.def_playmode) ? Session.def_playmode : modes[0];\r

  \  let el = mBy(`i_mode_${mode}`).checked = true;\r

  }"
populateGamenames: "function populateGamenames() {\r

  \  let elem = document.getElementById('fChooseGame');\r

  \  clearInit(elem, { innerHTML: '<legend>choose game</legend>' });\r

  \  for (const name in allGames) {\r

  \    let radio = document.createElement('input');\r

  \    radio.type = 'radio';\r

  \    radio.name = 'game';\r

  \    radio.classList.add('radio');\r

  \    radio.id = 'c_b_mm_' + name;\r

  \    radio.value = name;\r

  \    radio.addEventListener('click', () => onClickGamename(radio));\r

  \    elem.appendChild(radio);\r

  \    elem.appendChild(document.createTextNode(allGames[name].name.toLowerCa\
  se()));\r

  \    elem.appendChild(document.createElement('br'))\r

  \  }\r

  \  let checkedGameInput = document.getElementById('c_b_mm_' +
  GAME.toLowerCase());\r

  \  checkedGameInput.checked = true;\r

  }"
populateJoinList: "function populateJoinList() {\r

  \  let players = S.gameConfig.players;\r

  \  console.log('populateJoinList', S.gameConfig)\r

  \  for (let i = 1; i <= S.gameConfig.numPlayers; i++) {\r

  \    let pl = players[i - 1];\r

  \    let idRadio = getidAvailable(i);\r

  \    let idSpan = getidSpanJoin(i);\r

  \    if (isEmpty(pl.username)) {\r

  \      show(idRadio);\r

  \      show(idSpan);\r

  \      uncheckAvailable(i);\r

  \      document.getElementById(idSpan).innerHTML = pl.id;\r

  \    } else {\r

  \      hide(idRadio);\r

  \      hide(idSpan);\r

  \    }\r

  \  }\r

  \  for (let i = S.gameConfig.numPlayers + 1; i <= MAX_PLAYERS_AVAILABLE;
  i++) {\r

  \    let idRadio = getidAvailable(i);\r

  \    let idSpan = getidSpanJoin(i);\r

  \    hide(idRadio);\r

  \    hide(idSpan);\r

  \  }\r

  }"
populateSelect: "function populateSelect(i, listValues, selValue) {\r

  \  let id = getidType(i);\r

  \  let el = document.getElementById(id);\r

  \  clearElement(el);\r

  \  for (opt of listValues) {\r

  \    var newOption = document.createElement(\"option\");\r

  \    newOption.text = opt.toString();\r

  \    el.appendChild(newOption);\r

  \  }\r

  \  $(el).val(selValue);\r

  }"
pos2id: "function pos2id(id, row, col) {\r

  \  return id + '_' + row + '_' + col;\r

  }"
posBC: "function posBC(d) {\r

  \  let dParent = d.parentNode;\r

  \  let dNew = mDiv(dParent, { w: '100%', h: 50, position: 'absolute',
  bottom: 0, left: 0, bg: 'null', align: 'center' });\r

  \  mAppend(dNew, d);\r

  }"
posBL: "function posBL(d) { mStyle(d, { left: 0, bottom: 0, position: 'absolute'
  }); }"
posBLR: "function posBLR(d) { mStyle(d, { left: 0, bottom: 0, position:
  'absolute' }); mRot(d, 180); }"
posBR: "function posBR(d) { mStyle(d, { right: 0, bottom: 0, position:
  'absolute' }); }"
posBRR: "function posBRR(d) { mStyle(d, { right: 0, bottom: 0, position:
  'absolute' }); mRot(d, 180); }"
posCenterInCenter: function posCenterInCenter(d) { d.classList.add('centerCentered'); }
posCIC: function posCIC(d) { d = mEnsure(d); d.classList.add('centerCentered'); }
posCICB: function posCICB(d) { d = mEnsure(d);
  d.classList.add('centerCenteredBottomHalf'); }
posCICT: function posCICT(d) { d = mEnsure(d);
  d.classList.add('centerCenteredTopHalf'); }
positionGElement: "function positionGElement(ui, uidParent, topG) {\r

  \  let uiParent = mBy(uidParent);\r

  \  if (isdef(uiParent) && topG != uiParent) {\r

  \    console.log('positionGElement', ui.id, uiParent.id, topG.id);\r

  \    console.log(ui, uiParent, topG)\r

  \    let bds = getBounds(uiParent, true);\r

  \    let trans = getTransformInfo(uiParent);\r

  \    console.log('positionGElement,trans', trans)\r

  \    let [x, y] = [trans.translateX, trans.translateY];\r

  \    let x1 = -22;\r

  \    let y1 = 0;\r

  \    let x2 = 0; let y2 = 0;\r

  \    let trans1 = uiParent.style.transform;\r

  \    let tt = trans1.split('translate');\r

  \    if (tt.length <= 1) {\r

  \      console.log('there is NO translate transform!!! uiParent',
  uiParent);\r

  \    } else {\r

  \      let traNumbersX = trans1.split('(');\r

  \      x2 = firstNumber(traNumbersX[1]);\r

  \      let traNumbersY = trans1.split(',');\r

  \      y2 = firstNumber(traNumbersY[1]);\r

  \    }\r

  \    gPos(ui, x2, y2);\r

  \    let nParent = R.uiNodes[uidParent]\r

  \    let par1 = R.uiNodes[nParent.uidParent];\r

  \    let par2 = R.uiNodes[par1.uidParent];\r

  \  }\r

  \  return ui;\r

  }"
posOverlap: "function posOverlap(d1, dParent, dx, dy, propName) {\r

  \  let chType = d1[propName];\r

  \  let numChildrenOfTarget = [...dParent.children].filter(x => x.type ==
  chType).length - 1;\r

  \  posXY(d1, dParent, numChildrenOfTarget * dx, numChildrenOfTarget * dy,
  unit = 'px', position = 'absolute');\r

  }"
post_accept_blackmail: "function post_accept_blackmail() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  let blackmailer = fen.blackmail.blackmailer;\r

  \  let blackmailed = fen.blackmail.blackmailed;\r

  \  let building_path = fen.blackmail.building_path;\r

  \  let fenbuilding = path2fen(fen, building_path);\r

  \  let building_owner = stringAfter(building_path, '.'); building_owner =
  stringBefore(building_owner, '.');\r

  \  assertion(building_owner == blackmailed && blackmailed == uplayer,
  'blackmailed and uplayer and building owner must be same');\r

  \  elem_from_to(item.key, fen.players[blackmailed].stall,
  fen.players[blackmailer].hand);\r

  \  ari_history_list([`${blackmailed} accepts: gives ${item.key} to
  ${blackmailer}`], 'blackmail');\r

  \  delete fenbuilding.isblackmailed;\r

  \  [Z.stage, Z.turn] = [35, [blackmailer]];\r

  \  take_turn_fen();\r

  }"
post_auction: "function post_auction() {\r

  \  console.assert(Z.stage == 13, 'WRONG STAGE IN POST AUCTION ' +
  Z.stage);\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  let item = A.selected.map(x => A.items[x])[0];\r

  \  lookupSet(fen, ['buy', uplayer], { key: item.key, index: A.selected[0]
  });\r

  \  ari_history_list([`${uplayer} selects ${item.key}`], 'auction');\r

  \  for (const plname of fen.maxplayers) {\r

  \    if (!lookup(fen, ['buy', plname])) {\r

  \      Z.turn = [plname];\r

  \      take_turn_fen();\r

  \      return;\r

  \    }\r

  \  }\r

  \  let buylist = dict2list(fen.buy, 'playername');\r

  \  let discardlist = [];\r

  \  for (const plname of fen.maxplayers) {\r

  \    let choice = fen.buy[plname];\r

  \    let n = arrCount(buylist, x => x.index == choice.index);\r

  \    let is_unique = n == 1;\r

  \    if (is_unique) {\r

  \      fen.players[plname].coins -= fen.second_most;\r

  \      let x = UI.player_stat_items[plname].dCoin; mPulse1(x);\r

  \      elem_from_to(choice.key, fen.market, fen.players[plname].hand);\r

  \      ari_history_list([`${plname} buys ${choice.key} for
  ${fen.second_most}`], 'auction');\r

  \      let card = find_card(choice.index, UI.market);\r

  \      animate_card_transfer(card,
  arrLast(UI.players[plname].hand.items));\r

  \    } else {\r

  \      addIf(discardlist, choice.key);\r

  \      delete fen.buy[plname];\r

  \    }\r

  \  }\r

  \  for (const key of discardlist) {\r

  \    elem_from_to(key, fen.market, fen.deck_discard);\r

  \    ari_reorg_discard(fen);\r

  \    ari_history_list([`${key} is discarded`], 'auction');\r

  \  }\r

  \  delete fen.second_most;\r

  \  delete fen.maxplayers;\r

  \  delete fen.buy;\r

  \  delete fen.auction;\r

  \  Z.stage = 4;\r

  \  Z.turn = [fen.plorder[0]];\r

  \  setTimeout(take_turn_fen, 1000);\r

  }"
post_ball: "function post_ball() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let keys = A.selected.map(x => A.items[x]).map(x => x.key);\r

  \  keys.map(x => lookupAddIfToList(fen, ['ball', uplayer], x));\r

  \  keys.map(x => removeInPlace(fen.players[uplayer].hand, x));\r

  \  let iturn = fen.plorder.indexOf(uplayer) + 1;\r

  \  if (iturn >= fen.plorder.length) {\r

  \    if (isdef(fen.ball)) {\r

  \      let all = [];\r

  \      for (const c of fen.market) all.push(c);\r

  \      for (const uplayer in fen.ball) for (const c of fen.ball[uplayer])
  all.push(c);\r

  \      shuffle(all);\r

  \      fen.market = [];\r

  \      for (let i = 0; i < 2; i++) top_elem_from_to(all, fen.market);\r

  \      for (const uplayer in fen.ball) for (let i = 0; i <
  fen.ball[uplayer].length; i++) top_elem_from_to(all,
  fen.players[uplayer].hand);\r

  \      delete fen.ball;\r

  \    }\r

  \    iturn = 0;\r

  \    Z.stage = 4;\r

  \    console.assert(fen.phase == 'queen', 'wie bitte noch nicht in queen
  phase?!!!!!!!!!!!');\r

  \  }\r

  \  Z.turn = [fen.plorder[iturn]];\r

  \  ari_history_list([`${uplayer} added ${keys.length}
  card${plural(keys.length)} to ball!`], 'ball');\r

  \  take_turn_fen();\r

  }"
post_blackmail: "function post_blackmail() {\r

  \  let [fen, uplayer] = [Z.fen, Z.uplayer];\r

  \  ari_history_list([`blackmail complete!`], 'blackmail');\r

  \  delete fen.blackmail;\r

  \  ari_next_action();\r

  }"
post_build: "function post_build() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  if (A.selected.length < 4 || A.selected.length > 6) {\r

  \    select_error('select 4, 5, or 6 cards to build!');\r

  \    return;\r

  \  }\r

  \  let building_items = A.selected.map(x => A.items[x]);\r

  \  let building_type = building_items.length == 4 ? 'farm' :
  building_items.length == '5' ? 'estate' : 'chateau';\r

  \  fen.players[uplayer].buildings[building_type].push({ list:
  building_items.map(x => x.key), h: null, schweine: [], lead:
  building_items[0].key });\r

  \  for (const item of building_items) {\r

  \    let source = lookup(fen, item.path.split('.'));\r

  \    removeInPlace(source, item.key);\r

  \  }\r

  \  ari_history_list([`${uplayer} builds a ${building_type}`], 'build');\r

  \  let is_coin_pay = process_payment();\r

  \  let ms = 1800;\r

  \  if (is_coin_pay) animcoin(Z.uplayer, 1000);\r

  \  remove_ui_items(building_items);\r

  \  let pl = fen.players[uplayer];\r

  \  let nfarms = pl.buildings.farm.length;\r

  \  let nestates = pl.buildings.estate.length;\r

  \  let nchateaus = pl.buildings.chateau.length;\r

  \  let index = building_type == 'farm' ? nfarms - 1 : building_type ==
  'estate' ? nfarms + nestates - 1 : nfarms + nestates + nchateaus - 1;\r

  \  console.log('index of new building is', index);\r

  \  let ifinal = UI.players[uplayer].indexOfFirstBuilding + index;\r

  \  console.log('ifinal', ifinal);\r

  \  let dpl = iDiv(UI.players[uplayer]);\r

  \  let akku = [];\r

  \  while (dpl.children.length > ifinal) { akku.push(dpl.lastChild);
  dpl.removeChild(dpl.lastChild); }\r

  \  let fenbuilding =
  arrLast(fen.players[uplayer].buildings[building_type]);\r

  \  let newbuilding = ui_type_building(fenbuilding, dpl, { maleft: 8 },
  `players.${uplayer}.buildings.${building_type}.${index}`, building_type,
  ari_get_card, true, false);\r

  \  animbuilding(newbuilding, ms, ari_next_action);\r

  \  akku.map(x => mAppend(dpl, x));\r

  }"
post_buy: "function post_buy() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  elem_from_to(item.key, fen.open_discard, fen.players[uplayer].hand);\r

  \  ari_history_list([`${uplayer} buys ${item.key}`], 'buy')\r

  \  ari_reorg_discard();\r

  \  console.log('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh')\r

  \  process_payment();\r

  \  setTimeout(ari_next_action, 1000);\r

  }"
post_buy_rumor: "function post_buy_rumor() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  let non_selected = A.items.filter(x => x.index != A.selected[0]);\r

  \  let rumor = item.key;\r

  \  for (const item of non_selected) { fen.deck_rumors.push(item.key); }\r

  \  fen.players[uplayer].rumors.push(rumor);\r

  \  fen.players[uplayer].coins -= 1;\r

  \  ari_history_list([`${uplayer} bought a rumor`], 'rumor');\r

  \  ari_next_action();\r

  }"
post_church: "function post_church() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  let pl = fen.players[uplayer];\r

  \  let items = A.selected.map(x => A.items[x]);\r

  \  let card = items.find(x => x.path && x.path.includes('church')); if
  (isdef(card)) card = card.key;\r

  \  let cand = items.length > 1 ? items.find(x => !x.path) :
  fen.candidates[0];\r

  \  if (isdef(cand) && isDict(cand)) cand = cand.key;\r

  \  if (nundef(card) || nundef(cand)) {\r

  \    select_error(`You must select a card ${items.length > 1 ? 'and a
  candidate' : ''}!`);\r

  \    return;\r

  \  }\r

  \  elem_from_to(card, fen.church, fen.players[cand].hand);\r

  \  ari_history_list([`${uplayer} gives ${cand} card ${card}`], 'new
  cards');\r

  \  removeInPlace(fen.toBeSelected, cand);\r

  \  if (fen.church.length == 1) {\r

  \    let cand = fen.toBeSelected[0];\r

  \    let card = fen.church[0];\r

  \    elem_from_to(card, fen.church, fen.players[cand].hand);\r

  \    ari_history_list([`${cand} receives last card: ${card}`], 'new
  cards');\r

  \    Z.stage = 14;\r

  \    let plorder = fen.plorder = jsCopy(fen.heraldorder);\r

  \    Z.turn = [plorder[0]];\r

  \    take_turn_fen();\r

  \  } else {\r

  \    Z.turn = [get_next_in_list(uplayer, fen.selorder)];\r

  \    take_turn_fen();\r

  \  }\r

  }"
post_comm_setup_stage: "function post_comm_setup_stage() {\r

  \  let [fen, A, uplayer, plorder, pl] = [Z.fen, Z.A, Z.uplayer, Z.plorder,
  Z.pl];\r

  \  let achtungHack = false;\r

  \  let new_playerdata = [];\r

  \  for (const data of Z.playerdata) {\r

  \    let o = data;\r

  \    if (is_stringified(data)) {\r

  \      console.log('achtungHack: data is stringified');\r

  \      o = JSON.parse(data);\r

  \      achtungHack = true;\r

  \    } else if (is_stringified(data.state)) {\r

  \      console.log('achtungHack: data.state is stringified');\r

  \      o.state = JSON.parse(data.state);\r

  \      achtungHack = true;\r

  \    }\r

  \    new_playerdata.push(o);\r

  \    let state = o.state;\r

  \    let giver = state.giver;\r

  \    let receiver = state.receiver;\r

  \    let keys = state.keys;\r

  \    keys.map(x => elem_from_to(x, fen.players[giver].commissions,
  fen.players[receiver].commissions));\r

  \  }\r

  \  if (achtungHack) { Z.playerdata = new_playerdata; }\r

  \  fen.comm_setup_num -= 1;\r

  \  if (fen.comm_setup_num <= 0) {\r

  \    delete fen.comm_setup_di;\r

  \    delete fen.comm_setup_num;\r

  \    delete fen.keeppolling;\r

  \    ari_history_list([`commission trading ends`], 'commissions');\r

  \    if (exp_rumors && plorder.length > 2) {\r

  \      [Z.stage, Z.turn] = [24, Z.options.mode == 'hotseat' ?
  [fen.plorder[0]] : fen.plorder];\r

  \      ari_history_list([`gossiping starts`], 'rumors');\r

  \    } else { [Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options,
  fen.phase); }\r

  \  } else {\r

  \    [Z.stage, Z.turn] = [23, Z.options.mode == 'hotseat' ? [fen.plorder[0]]
  : fen.plorder];\r

  \  }\r

  \  take_turn_fen_clear();\r

  }"
post_commission: "function post_commission() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  let comm_selected = A.items[A.selected[0]];\r

  \  let stall_item = A.commission_stall_item;\r

  \  console.log('stall_item:', stall_item);\r

  \  let rank = A.commission.key[0];\r

  \  if (nundef(fen.commissioned)) fen.commissioned = [];\r

  \  let x = firstCond(fen.commissioned, x => x.rank == rank);\r

  \  if (x) { removeInPlace(fen.commissioned, x); }\r

  \  else { x = { key: A.commission.key, rank: rank, count: 0 }; }\r

  \  x.count += 1;\r

  \  let pl = fen.players[uplayer];\r

  \  let top = isEmpty(fen.commissioned) ? null : arrLast(fen.commissioned);\r

  \  let rankstr = 'A23456789TJQK';\r

  \  let points = !top || get_rank_index(rank, rankstr) >=
  get_rank_index(top.rank, rankstr) ? 1 : 0;\r

  \  points += Number(x.count);\r

  \  pl.coins += points;\r

  \  fen.commissioned.push(x);\r

  \  let key = stall_item.key;\r

  \  removeInPlace(pl.stall, key);\r

  \  if (comm_selected.path == 'open_commissions') {\r

  \    removeInPlace(fen.open_commissions, comm_selected.key);\r

  \    top_elem_from_to(fen.deck_commission, fen.open_commissions);\r

  \  } else {\r

  \    removeInPlace(fen.deck_commission, comm_selected.key);\r

  \  }\r

  \  arrReplace(pl.commissions, [A.commission.key], [comm_selected.key]);\r

  \  ari_history_list([`${uplayer} commissions card ${A.commission.key}`,
  `${uplayer} gets ${points} coin${if_plural(points)} for commissioning
  ${A.commission.key}`], 'commission');\r

  \  ari_next_action();\r

  }"
post_complementing_market_after_church: "function
  post_complementing_market_after_church() {\r

  \  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];\r

  \  let pl = fen.players[uplayer];\r

  \  let selectedKeys = A.selected.map(i => A.items[i].key);\r

  \  for (const ckey of selectedKeys) {\r

  \    elem_from_to(ckey, fen.players[uplayer].hand,
  fen.players[uplayer].stall);\r

  \  }\r

  \  if (selectedKeys.length > 0) ari_history_list([`${uplayer} complements
  stall`], 'complement stall');\r

  \  let next = get_next_player(Z, uplayer);\r

  \  if (next == plorder[0]) {\r

  \    ari_clear_church();\r

  \    ari_start_action_stage();\r

  \  } else {\r

  \    Z.turn = [next];\r

  \    take_turn_fen();\r

  \  }\r

  }"
post_defend_blackmail: "function post_defend_blackmail() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let blackmailer = fen.blackmail.blackmailer;\r

  \  let blackmailed = fen.blackmail.blackmailed;\r

  \  let building_path = fen.blackmail.building_path;\r

  \  let fenbuilding = path2fen(fen, building_path);\r

  \  let building_owner = stringAfter(building_path, '.'); building_owner =
  stringBefore(building_owner, '.');\r

  \  assertion(building_owner == blackmailed && blackmailed == uplayer,
  'blackmailed and uplayer and building owner must be same');\r

  \  let rumors = fen.players[building_owner].rumors;\r

  \  let lead = fenbuilding.lead;\r

  \  let brumors = fenbuilding.rumors;\r

  \  let match = firstCond(rumors, x => x[0] == lead[0]);\r

  \  removeInPlace(rumors, match);\r

  \  brumors.pop();\r

  \  ari_history_list([`${blackmailed} defends: pays matching rumor to deflect
  blackmail, 1 rumor is removed from building`], 'blackmail');\r

  \  delete fenbuilding.isblackmailed;\r

  \  [Z.stage, Z.turn] = [35, [blackmailer]];\r

  \  take_turn_fen();\r

  }"
post_downgrade: "function post_downgrade() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  let pl = fen.players[uplayer];\r

  \  A.downgrade_cards = A.selected.map(x => A.items[x]);\r

  \  let obuilding = lookup(fen, A.building.path.split('.'));\r

  \  let n = obuilding.list.length;\r

  \  let nremove = A.downgrade_cards.length;\r

  \  let nfinal = n - nremove;\r

  \  let type = A.building.o.type;\r

  \  let list = pl.buildings[type];\r

  \  removeInPlace(list, obuilding);\r

  \  let cards = A.downgrade_cards.map(x => x.key);\r

  \  if (nfinal < 4) {\r

  \    pl.hand = pl.hand.concat(obuilding.list);\r

  \  } else if (nfinal == 4) {\r

  \    pl.buildings.farm.push(obuilding);\r

  \    pl.hand = pl.hand.concat(cards);\r

  \  } else if (nfinal == 5) {\r

  \    pl.buildings.estate.push(obuilding);\r

  \    pl.hand = pl.hand.concat(cards);\r

  \  } else if (nfinal == 6) {\r

  \    pl.buildings.chateau.push(obuilding);\r

  \    pl.hand = pl.hand.concat(cards);\r

  \  }\r

  \  A.downgrade_cards.map(x => removeInPlace(obuilding.list, x.key));\r

  \  if (isdef(pl.tithes)) {\r

  \    for (const c of cards) removeInPlace(pl.hand, c);\r

  \  }\r

  \  ari_history_list([`${uplayer} downgrades to
  ${ari_get_building_type(obuilding)}`], 'downgrade');\r

  \  if (isdef(pl.tithes)) { proceed_to_newcards_selection(); } else
  ari_next_action(fen, uplayer);\r

  }"
post_endgame: "function post_endgame() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  if (A.selected[0] == 0) {\r

  \    console.log('GAMEOVER!!!!!!!!!!!!!!!!!!!');\r

  \    for (const plname of fen.plorder) {\r

  \      let pl = fen.players[plname];\r

  \      pl.vps = ari_calc_real_vps(fen, plname);\r

  \      pl.max_journey_length = ari_get_max_journey_length(fen, plname);\r

  \      pl.score = pl.vps * 10000 + pl.max_journey_length * 100 + pl.coins;\r

  \      console.log('score', plname, pl.score);\r

  \    }\r

  \    let playerlist = dict2list(fen.players, 'name');\r

  \    let sorted = sortByDescending(playerlist, 'score');\r

  \    console.log('scores', sorted.map(x => `${x.name}:${x.score}`));\r

  \    let max_score = sorted[0].score;\r

  \    let all_winners = sorted.filter(x => x.score == max_score);\r

  \    fen.winners = all_winners.map(x => x.name);\r

  \    console.log('winners:', fen.winners)\r

  \    take_turn_fen();\r

  \  } else {\r

  \    let iturn = fen.pl_gameover.indexOf(uplayer) + 1;\r

  \    if (iturn >= fen.pl_gameover.length) {\r

  \      delete fen.pl_gameover;\r

  \      Z.turn = [fen.plorder[0]];\r

  \      Z.phase = 'queen';\r

  \      [Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options,
  Z.phase);\r

  \      take_turn_fen();\r

  \    } else {\r

  \      Z.turn = [fen.pl_gameover[iturn]];\r

  \      take_turn_fen();\r

  \    }\r

  \  }\r

  }"
post_exchange: "function post_exchange() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  if (A.selected.length != 2) {\r

  \    select_error('please, select exactly 2 cards!');\r

  \    return;\r

  \  }\r

  \  let i0 = A.items[A.selected[0]];\r

  \  let i1 = A.items[A.selected[1]];\r

  \  let [p0, p1] = [i0.path, i1.path];\r

  \  if (p0.includes('build') == p1.includes('build')) {\r

  \    select_error('select exactly one building card and one of your hand or
  stall cards!');\r

  \    return;\r

  \  }\r

  \  let ibuilding = p0.includes('build') ? i0 : i1;\r

  \  let ihandstall = ibuilding == i0 ? i1 : i0;\r

  \  let fenbuilding = lookup(fen, ibuilding.path.split('.'));\r

  \  let ib_index = ibuilding.o.index;\r

  \  if (fenbuilding.schweine.includes(ib_index)) {\r

  \    fenbuilding.schweine.splice(fenbuilding.schweine.indexOf(ib_index),
  1);\r

  \  }\r

  \  let pl = fen.players[uplayer];\r

  \  let list2 = ihandstall.path.includes('hand') ? pl.hand : pl.stall;\r

  \  let i2 = list2.indexOf(ihandstall.o.key)\r

  \  exchange_by_index(fenbuilding.list, ib_index, list2, i2);\r

  \  ari_history_list([`${uplayer} exchanges card in
  ${ari_get_building_type(fenbuilding)}`], 'exchange');\r

  \  animate_card_exchange(ibuilding, ihandstall, ari_next_action);\r

  }"
post_harvest: "function post_harvest() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  let obuilding = lookup(fen, item.path.split('.'));\r

  \  fen.players[uplayer].hand.push(obuilding.h);\r

  \  obuilding.h = null;\r

  \  ari_history_list([`${uplayer} harvests`], 'harvest');\r

  \  ari_next_action();\r

  }"
post_inspect: "function post_inspect() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let schwein = A.items[A.selected[0]].o;\r

  \  turn_new_schwein_up(schwein, A.fenbuilding, A.uibuilding);\r

  }"
post_json: "function post_json(url, o, callback) {\r

  \  fetch(url, {\r

  \    method: 'POST',\r

  \    headers: {\r

  \      'Accept': 'application/json',\r

  \      'Content-Type': 'application/json'\r

  \    },\r

  \    body: JSON.stringify(o)\r

  \  }).then(response => response.json()).then(response =>
  callback(response));\r

  }"
post_luxury_or_journey_cards: "function post_luxury_or_journey_cards() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  let luxury_selected = A.selected[0] == 0;\r

  \  console.log('carditems', A.carditems);\r

  \  let n = A.carditems.length;\r

  \  if (luxury_selected) {\r

  \    let cardstoreplace = A.carditems.map(x => x.key);\r

  \    arrReplace(fen.players[uplayer].hand, cardstoreplace,
  deck_deal(fen.deck_luxury, n));\r

  \  } else {\r

  \    let len = A.jlegal.length;\r

  \    let handcards = firstCond(A.carditems, x => A.jlegal[0] == x.key) ?
  arrFromIndex(A.jlegal, len - n) : A.jlegal.slice(0, n);\r

  \    console.log('handcards', handcards);\r

  \    arrExtend(fen.players[uplayer].hand, handcards);\r

  \    A.jlegal = arrMinus(A.jlegal, handcards);\r

  \    let cardstoremove = A.carditems.map(x => x.key);\r

  \    arrRemove(fen.players[uplayer].hand, cardstoremove);\r

  \  }\r

  \  let path = A.journeyitem.path;\r

  \  let parts = path.split('.');\r

  \  let owner = parts[1];\r

  \  console.log('path', path, 'parts', parts, 'owner', owner)\r

  \  fen.players[owner].journeys.splice(Number(parts[3]), 1, A.jlegal);\r

  \  [Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options,
  Z.phase);\r

  \  ari_history_list([`${uplayer} added to existing journey and takes
  ${luxury_selected ? 'luxury cards' : 'journey cards'}`], 'journey');\r

  \  take_turn_fen();\r

  }"
post_new_journey: "function post_new_journey() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  fen.players[uplayer].journeys.push(A.jlegal);\r

  \  arrReplace(fen.players[uplayer].hand, A.jlegal,
  deck_deal(fen.deck_luxury, A.jlegal.length));\r

  \  ari_history_list([`${uplayer} added journey`], 'journey');\r

  \  [Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options,
  Z.phase);\r

  \  take_turn_fen();\r

  }"
post_pass: "function post_pass() {\r

  \  let [fen, uplayer] = [Z.fen, Z.uplayer];\r

  \  let n = fen.total_pl_actions - fen.num_actions;\r

  \  ari_history_list([`${uplayer} passes after ${n} action${plural(n)}`],
  'pass');\r

  \  fen.num_actions = 0;\r

  \  ari_next_action();\r

  }"
post_pickup: "function post_pickup() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  elem_from_to(item.key, fen.players[uplayer].stall,
  fen.players[uplayer].hand);\r

  \  ari_history_list([`${uplayer} picks up ${item.key}`], 'pickup');\r

  \  ari_next_action();\r

  }"
post_reject_blackmail: "function post_reject_blackmail() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  let blackmailer = fen.blackmail.blackmailer;\r

  \  let blackmailed = fen.blackmail.blackmailed;\r

  \  let building_path = fen.blackmail.building_path;\r

  \  let fenbuilding = path2fen(fen, building_path);\r

  \  let building_owner = stringAfter(building_path, '.'); building_owner =
  stringBefore(building_owner, '.');\r

  \  assertion(building_owner == blackmailed && blackmailed == uplayer,
  'blackmailed and uplayer and building owner must be same');\r

  \  ari_history_list([`${blackmailed} rejects!`], 'blackmail');\r

  \  let rumors = fenbuilding.rumors;\r

  \  let has_lead_rumor = firstCond(rumors, x => x[0] ==
  fenbuilding.lead[0]);\r

  \  if (has_lead_rumor) {\r

  \    let stall = fen.players[blackmailed].stall;\r

  \    fen.players[blackmailer].hand =
  fen.players[blackmailer].hand.concat(stall);\r

  \    fen.players[blackmailed].stall = [];\r

  \    ari_history_list([`RUMOR CORRECT!!! ${blackmailed} looses entire stall
  to ${blackmailer}`], 'blackmail');\r

  \  } else {\r

  \    ari_history_list([`${blackmailed} was lucky!!! rumors incorrect`],
  'blackmail');\r

  \  }\r

  \  delete fenbuilding.rumors;\r

  \  delete fenbuilding.isblackmailed;\r

  \  [Z.stage, Z.turn] = [35, [blackmailer]];\r

  \  take_turn_fen();\r

  }"
post_rumor_both: "function post_rumor_both() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  let non_selected = A.items.filter(x => x.index != A.selected[0])[0];\r

  \  let rumor = item.key;\r

  \  let rumor_other = non_selected.key;\r

  \  fen.players[uplayer].rumors.push(rumor);\r

  \  fen.players[A.owner].rumors.push(rumor_other);\r

  \  ari_history_list([`${uplayer} got a rumor, ${A.owner} got one too`],
  'rumor');\r

  \  ari_next_action();\r

  }"
post_rumor_setup: "function post_rumor_setup() {\r

  \  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];\r

  \  for (const plname of plorder) { fen.players[plname].rumors = []; }\r

  \  for (const plname of plorder) {\r

  \    let data = firstCond(Z.playerdata, x => x.name == plname);\r

  \    let di = data.state.di;\r

  \    for (const k in di) {\r

  \      arrPlus(fen.players[k].rumors, di[k]);\r

  \    }\r

  \  }\r

  \  ari_history_list([`gossiping ends`], 'rumors');\r

  \  [Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options,
  fen.phase);\r

  \  take_turn_fen_clear();\r

  }"
post_sell: "function post_sell() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  if (A.selected.length != 2) {\r

  \    select_error('select exactly 2 cards to sell!');\r

  \    return;\r

  \  }\r

  \  for (const i of A.selected) {\r

  \    let c = A.items[i].key;\r

  \    elem_from_to(c, fen.players[uplayer].stall, fen.deck_discard);\r

  \  }\r

  \  ari_reorg_discard();\r

  \  fen.players[uplayer].coins += 1;\r

  \  let [i1, i2] = A.selected.map(x => A.items[x].key)\r

  \  ari_history_list([`${uplayer} sells ${i1} and ${i2}`], 'sell');\r

  \  ari_next_action(fen, uplayer);\r

  }"
post_stall_selected: "function post_stall_selected() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let selectedKeys = A.selected.map(i => A.items[i].key);\r

  \  for (const ckey of selectedKeys) {\r

  \    elem_from_to(ckey, fen.players[uplayer].hand,
  fen.players[uplayer].stall);\r

  \  }\r

  \  ensure_stallSelected(fen);\r

  \  fen.stallSelected.push(uplayer);\r

  \  ari_history_list([`${uplayer} puts up a stall for ${selectedKeys.length}
  action${plural(selectedKeys.length)}`], 'market');\r

  \  if (is_stall_selection_complete()) {\r

  \    delete fen.stallSelected;\r

  \    fen.actionsCompleted = [];\r

  \    if (check_if_church()) ari_start_church_stage(); else
  ari_start_action_stage();\r

  \  } else {\r

  \    Z.turn = [get_next_player(Z, uplayer)];\r

  \    take_turn_fen();\r

  \  }\r

  }"
post_tax: "function post_tax() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  let items = A.selected.map(x => A.items[x]);\r

  \  let n = fen.pl_tax[uplayer];\r

  \  if (items.length != n) {\r

  \    select_error(`please select exactly ${n} cards`);\r

  \    return;\r

  \  }\r

  \  for (const item of items) {\r

  \    elem_from_to_top(item.key, fen.players[uplayer].hand,
  fen.deck_discard);\r

  \  }\r

  \  ari_reorg_discard();\r

  \  ari_history_list([`${uplayer} pays tax: ${fen.pl_tax[uplayer]}`],
  'tax');\r

  \  fen.pl_tax[uplayer] = 0;\r

  \  let iturn = fen.plorder.indexOf(uplayer);\r

  \  let plnext = ari_get_tax_payer(fen, fen.pl_tax, iturn + 1);\r

  \  if (plnext == null) {\r

  \    [Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options,
  'king');\r

  \    delete fen.pl_tax;\r

  \  } else {\r

  \    Z.turn = [plnext];\r

  \  }\r

  \  take_turn_fen(fen, uplayer);\r

  }"
post_tide: "function post_tide() {\r

  \  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];\r

  \  let items = A.selected.map(x => A.items[x]);\r

  \  if (items.length == 0) { select_error('No cards selected!'); return; }\r

  \  let st = items.map(x => ({ key: x.key, path: x.path }));\r

  \  let val = arrSum(st.map(x => ari_get_card(x.key).val));\r

  \  lookupSet(fen, ['players', uplayer, 'tides'], { keys: st, val: val });\r

  \  remove_tides_from_play(fen, uplayer);\r

  \  let pldone = plorder.filter(x => isdef(fen.players[x].tides));\r

  \  let minplayers = arrMin(pldone, x => fen.players[x].tides.val);\r

  \  let minplayer = isList(minplayers) ? minplayers[0] : minplayers;\r

  \  let minval = fen.tidemin = fen.players[minplayer].tides.val;\r

  \  let next = get_next_in_list(uplayer, fen.church_order);\r

  \  if (next == fen.church_order[0]) {\r

  \    assertion(sameList(pldone, plorder), 'NOT all players have
  tides!!!!!!!', pldone);\r

  \    if (minplayers.length > 1) { proceed_to_newcards_selection(); return;
  }\r

  \    else {\r

  \      pldone = pldone.filter(x => x != minplayer);\r

  \      let sorted = sortBy(pldone, x => fen.players[x].tides.val);\r

  \      let second_min = sorted[0];\r

  \      fen.tide_minimum = fen.players[second_min].tides.val - minval;\r

  \      //#region check if minplayer has enough\r

  \      let pl = fen.players[minplayer];\r

  \      let hst = pl.hand.concat(pl.stall);\r

  \      let vals = hst.map(x => ari_get_card(x).val);\r

  \      let sum = isEmpty(vals) ? 0 : arrSum(vals);\r

  \      let min = fen.tide_minimum;\r

  \      if (sum < min) {\r

  \        pl.hand = [];\r

  \        pl.stall = [];\r

  \        let buildings = arrFlatten(get_values(pl.buildings));\r

  \        console.log('buildings', buildings);\r

  \        if (isEmpty(buildings)) {\r

  \          ari_history_list([`${minplayer} does not have a building to
  downgrade!`], 'downgrade');\r

  \          proceed_to_newcards_selection();\r

  \          return;\r

  \        }\r

  \        ari_history_list([`${minplayer} must downgrade a building to tide
  ${min}!`], 'downgrade');\r

  \        Z.stage = 22;\r

  \      } else {\r

  \        ari_history_list([`${minplayer} must tide more cards to reach
  ${min}!`], 'tide');\r

  \        Z.stage = 21;\r

  \      }\r

  \      //#endregion\r

  \      Z.turn = [minplayer];\r

  \    }\r

  \  } else {\r

  \    Z.turn = [next];\r

  \  }\r

  \  turn_send_move_update();\r

  }"
post_tide_minimum: "function post_tide_minimum() {\r

  \  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];\r

  \  let pl = fen.players[uplayer];\r

  \  let items = A.selected.map(x => A.items[x]);\r

  \  let st = items.map(x => ({ key: x.key, path: x.path }));\r

  \  pl.tides.keys = pl.tides.keys.concat(st);\r

  \  let newval = arrSum(st.map(x => ari_get_card(x.key).val));\r

  \  pl.tides.val += newval;\r

  \  console.log('tide_minimum', fen.tide_minimum);\r

  \  console.log('val', pl.tides.val);\r

  \  if (newval < fen.tide_minimum) {\r

  \    select_error(`you need to tide at least ${fen.tide_minimum} to reach
  minimum`);\r

  \    return;\r

  \  }\r

  \  remove_tides_from_play(fen, uplayer, st);\r

  \  proceed_to_newcards_selection();\r

  }"
post_tithe: "function post_tithe() {\r

  \  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];\r

  \  let items = A.selected.map(x => A.items[x]);\r

  \  if (items.length == 0) { select_error('No cards selected!'); return; }\r

  \  let st = items.map(x => ({ key: x.key, path: x.path }));\r

  \  let val = arrSum(st.map(x => ari_get_card(x.key).val));\r

  \  lookupSet(fen, ['players', uplayer, 'tithes'], { keys: st, val: val });\r

  \  remove_tithes_from_play(fen, uplayer);\r

  \  let pldone = plorder.filter(x => isdef(fen.players[x].tithes));\r

  \  let minplayers = arrMin(pldone, x => fen.players[x].tithes.val);\r

  \  let minplayer = isList(minplayers) ? minplayers[0] : minplayers;\r

  \  let minval = fen.tithemin = fen.players[minplayer].tithes.val;\r

  \  let next = get_next_in_list(uplayer, fen.church_order);\r

  \  if (next == fen.church_order[0]) {\r

  \    assertion(sameList(pldone, plorder), 'NOT all players have
  tithes!!!!!!!', pldone);\r

  \    if (minplayers.length > 1) { proceed_to_newcards_selection(); return;
  }\r

  \    else {\r

  \      pldone = pldone.filter(x => x != minplayer);\r

  \      let sorted = sortBy(pldone, x => fen.players[x].tithes.val);\r

  \      let second_min = sorted[0];\r

  \      fen.tithe_minimum = fen.players[second_min].tithes.val - minval;\r

  \      //#region check if minplayer has enough\r

  \      let pl = fen.players[minplayer];\r

  \      let hst = pl.hand.concat(pl.stall);\r

  \      let vals = hst.map(x => ari_get_card(x).val);\r

  \      let sum = isEmpty(vals) ? 0 : arrSum(vals);\r

  \      let min = fen.tithe_minimum;\r

  \      if (sum < min) {\r

  \        pl.hand = [];\r

  \        pl.stall = [];\r

  \        let buildings = arrFlatten(get_values(pl.buildings));\r

  \        console.log('buildings', buildings);\r

  \        if (isEmpty(buildings)) {\r

  \          ari_history_list([`${minplayer} does not have a building to
  downgrade!`], 'downgrade');\r

  \          proceed_to_newcards_selection();\r

  \          return;\r

  \        }\r

  \        ari_history_list([`${minplayer} must downgrade a building to tithe
  ${min}!`], 'downgrade');\r

  \        Z.stage = 22;\r

  \      } else {\r

  \        ari_history_list([`${minplayer} must tithe more cards to reach
  ${min}!`], 'tithe');\r

  \        Z.stage = 21;\r

  \      }\r

  \      //#endregion\r

  \      Z.turn = [minplayer];\r

  \    }\r

  \  } else {\r

  \    Z.turn = [next];\r

  \  }\r

  \  take_turn_fen();\r

  }"
post_tithe_minimum: "function post_tithe_minimum() {\r

  \  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];\r

  \  let pl = fen.players[uplayer];\r

  \  let items = A.selected.map(x => A.items[x]);\r

  \  let st = items.map(x => ({ key: x.key, path: x.path }));\r

  \  pl.tithes.keys = pl.tithes.keys.concat(st);\r

  \  let newval = arrSum(st.map(x => ari_get_card(x.key).val));\r

  \  pl.tithes.val += newval;\r

  \  console.log('tithe_minimum', fen.tithe_minimum);\r

  \  console.log('val', pl.tithes.val);\r

  \  if (newval < fen.tithe_minimum) {\r

  \    select_error(`you need to tithe at least ${fen.tithe_minimum} to reach
  minimum`);\r

  \    return;\r

  \  }\r

  \  remove_tithes_from_play(fen, uplayer, st);\r

  \  proceed_to_newcards_selection();\r

  }"
post_trade: "function post_trade() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  if (A.selected.length != 2) {\r

  \    select_error('please, select exactly 2 cards!');\r

  \    return;\r

  \  }\r

  \  let i0 = A.items[A.selected[0]];\r

  \  let i1 = A.items[A.selected[1]];\r

  \  let num_own_stall = [i0, i1].filter(x =>
  x.path.includes(uplayer)).length;\r

  \  if (i0.path == i1.path) {\r

  \    select_error('you cannot trade cards from the same group');\r

  \    return;\r

  \  } else if (num_own_stall != 1) {\r

  \    select_error('you have to pick one card of your stall and one other
  card');\r

  \    return;\r

  \  } else {\r

  \    let list0 = lookup(fen, i0.path.split('.'));\r

  \    let list1 = lookup(fen, i1.path.split('.'));\r

  \    exchange_by_index(list0, i0.o.index, list1, i1.o.index);\r

  \    ari_history_list(get_trade_history(uplayer, i0, i1), 'trade');\r

  \    animate_card_exchange(i0, i1, ari_next_action);\r

  \  }\r

  }"
post_upgrade: "function post_upgrade() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  A.building = A.items[A.selected[0]];\r

  \  let gb = A.building;\r

  \  let b = lookup(fen, gb.path.split('.'));\r

  \  let n = A.upgrade_cards.length;\r

  \  let type0 = gb.o.type;\r

  \  let len = gb.o.list.length + n;\r

  \  let type1 = len == 5 ? 'estate' : 'chateau';\r

  \  let target = lookup(fen, gb.path.split('.'));\r

  \  for (const o of A.upgrade_cards) {\r

  \    let source = lookup(fen, o.path.split('.'));\r

  \    elem_from_to(o.key, source, target.list);\r

  \  }\r

  \  let bres = target;\r

  \  bres.h = null;\r

  \  removeInPlace(fen.players[uplayer].buildings[type0], bres);\r

  \  fen.players[uplayer].buildings[type1].push(bres);\r

  \  ari_history_list([`${uplayer} upgrades a ${type0}`], 'upgrade');\r

  \  console.log('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh')\r

  \  process_payment();\r

  \  setTimeout(ari_next_action, 1000);\r

  }"
post_visit: "function post_visit() {\r

  \  let [fen, A, uplayer, building, obuilding, owner] = [Z.fen, Z.A,
  Z.uplayer, Z.A.building, Z.A.obuilding, Z.A.buildingowner];\r

  \  let buildingtype = Z.A.building.o.type;\r

  \  let res = A.selected[0] == 0;\r

  \  if (!res) {\r

  \    if (fen.players[owner].coins > 0) {\r

  \      fen.players[owner].coins -= 1;\r

  \      fen.players[uplayer].coins += 1;\r

  \    }\r

  \  } else {\r

  \    let list = obuilding.list;\r

  \    let correct_key = list[0];\r

  \    let rank = correct_key[0];\r

  \    while (list.length > 0) {\r

  \      let ckey = list[0];\r

  \      if (ckey[0] != rank) {\r

  \        elem_from_to_top(ckey, list, fen.deck_discard);\r

  \      } else {\r

  \        elem_from_to(ckey, list, fen.players[owner].hand);\r

  \      }\r

  \    }\r

  \    if (isdef(obuilding.h)) {\r

  \      fen.deck_discard.unshift(obuilding.h);\r

  \    }\r

  \    ari_reorg_discard(fen);\r

  \    let blist = lookup(fen, stringBeforeLast(building.path,
  '.').split('.'));\r

  \    removeInPlace(blist, obuilding);\r

  \  }\r

  \  ari_history_list([`${uplayer} visited ${buildingtype} of ${owner}
  resulting in ${res ? 'destruction' : 'payoff'}`,], 'visit');\r

  \  ari_next_action(fen, uplayer);\r

  }"
posTC: "function posTC(d) { mStyleX(d, { right: '50%', top: 0, position:
  'absolute' }); }"
postCors: "async function postCors(url, data, type, handle_result) {\r

  \  data.data_type = type;\r

  \  var formData = new FormData();\r

  \  for (const k in data) {\r

  \    formData.append(k, data[k]);\r

  \  }\r

  \  let h = new Headers();\r

  \  h.append('Accept', 'application/text');\r

  \  var resp = await fetch(url, {\r

  \    method: 'POST',\r

  \    mode: 'cors',\r

  \    headers: h,\r

  \    body: formData,\r

  \  });\r

  \  let result = await resp.text();\r

  \  try {\r

  \    let jsonResult = JSON.parse(result);\r

  \    if (isdef(handle_result)) handle_result(jsonResult);\r

  \  } catch {\r

  \    if (isdef(handle_result)) handle_result({ message: result });\r

  \  }\r

  }"
postData: "async function postData(url = '', data = {}) {\r

  \  // postData('https://example.com/answer', { answer: 42 })\r

  \  const response = await fetch(url, {\r

  \    method: 'POST',\r

  \    mode: 'cors',\r

  \    cache: 'no-cache',\r

  \    credentials: 'omit',\r

  \    headers: {\r

  \      'Content-Type': 'application/json'\r

  \    },\r

  \    redirect: 'follow',\r

  \    referrerPolicy: 'no-referrer',\r

  \    body: JSON.stringify(data)\r

  \  });\r

  \  return await response.text(); //'hallo';// response.json(); // parses
  JSON response into native JavaScript objects\r

  }"
posTL: function posTL(d) { mPos(d, 0, 0) }
posTopLeftInCenter: function posTopLeftInCenter(d) { d.classList.add('centered'); }
posToPoint: "function posToPoint(pos = 'cc', w, h, offx = 0, offy = 0) {\r

  \  let di = { t: 0, b: h, l: 0, r: w };\r

  \  let py = pos[0] == 'c' ? h / 2 : di[pos[0]];\r

  \  let px = pos[1] == 'c' ? w / 2 : di[pos[1]];\r

  \  return [px + offx, py + offy];\r

  }"
posTR: "function posTR(d) { mStyle(d, { right: 0, top: 0, position: 'absolute' }); }"
posXY: "function posXY(d1, dParent, x, y, unit = 'px', position = 'absolute')
  {\r

  \  if (nundef(position)) position = 'absolute';\r

  \  if (dParent && !dParent.style.position)
  dParent.style.setProperty('position', 'relative');\r

  \  d1.style.setProperty('position', position);\r

  \  if (isdef(x)) d1.style.setProperty('left', makeUnitString(x, unit));\r

  \  if (isdef(y)) d1.style.setProperty('top', makeUnitString(y, unit));\r

  }"
pPanel: "function pPanel(dParent) { return mDiv(dParent, { bg: 'random',
  rounding: 10, margin: 10, padding: 10 }); }"
pr: "function pr(x) {\r\n}"
prelim: "function prelim() {\r

  \  console.assert(isdef(DB));\r

  \  Speech = new SpeechAPI('E');\r

  \  KeySets = getKeySetsX();\r

  \  TO = new TimeoutManager();\r

  \  initTable();\r

  \  initSidebar();\r

  \  initAux();\r

  \  _start();\r

  }"
prelims: "async function prelims() {\r

  \  if (serverData.waiting_for) { await
  sendStatus(getUsernameForPlid(serverData.waiting_for[0])); }\r

  \  if (serverData.end) { d3.select('button').text('RESTART').on('click',
  restartGame); }\r

  \  timit.showTime('* vor package: *')\r

  \  preProcessData();\r

  \  isTraceOn = SHOW_TRACE;\r

  \  G = {};\r

  \  PROTO = {};\r

  \  POOLS = { augData: makeDefaultPool(jsCopy(serverData)) };\r

  \  sData = POOLS.augData;\r

  }"
prelude: "function prelude(s, d) {\r\n}"
prep_for_church_downgrade: "function prep_for_church_downgrade(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  fen.stage = 1004;\r

  \  fen.market = ['JHn', 'QSn'];\r

  \  let ob = {}; ob[uplayer] = { estate: 1 }; stage_correct_buildings(fen,
  ob);\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    pl.hand = ['JHn', 'QSn']; pl.stall = ['JHn', 'QSn'];\r

  \    if (plname == uplayer) {\r

  \      pl.hand = ['2Hn', '2Sn']; pl.stall = ['AHn', 'ASn'];\r

  \    }\r

  \  }\r

  }"
prep_move: "function prep_move() {\r

  \  let [fen, uplayer, pl] = [Z.fen, Z.uplayer, Z.pl];\r

  \  for (const k of ['round', 'phase', 'stage', 'step', 'turn']) { fen[k] =
  Z[k]; }\r

  \  deactivate_ui();\r

  \  clear_timeouts();\r

  }"
prepParentForChildren: "function prepParentForChildren(loc, numChildren) {\r

  \  let parent = mBy(loc);\r

  \  clearElement(loc);\r

  \  parent.style.display = 'inline-grid';\r

  \  let uiNode = AREAS[loc];\r

  \  if (!uiNode.type) uiNode.type = 'panel';\r

  \  if (!uiNode.params) uiNode.params = { split: 'equal' };\r

  \  uiNode.params.num = numChildren;\r

  \  if (!uiNode.panels) uiNode.panels = [];\r

  }"
preProcessData: "function preProcessData(data) {\r

  \  if (nundef(data)) data = serverData;\r

  \  for (const plid in data.players) {\r

  \    let pl = data.players[plid];\r

  \    if (isdef(pl.obj_type)) continue;\r

  \    pl.obj_type = plid == plidSentStatus ? 'GamePlayer' : 'opponent';\r

  \  }\r

  \  if (data.options) {\r

  \    tupleGroups = getTupleGroups();\r

  \    let iGroup = 0;\r

  \    let iTuple = 0;\r

  \    boats = [];\r

  \    for (const tg of tupleGroups) {\r

  \      for (const t of tg.tuples) {\r

  \        let boatInfo = { obj_type: 'boat', oids: [], desc: tg.desc, tuple:
  t, iGroup: iGroup, iTuple: iTuple, text: t.map(x => x.val), weg: false };\r

  \        boats[iTuple] = boatInfo;\r

  \        iTuple += 1;\r

  \      }\r

  \      iGroup += 1;\r

  \    }\r

  \  } else {\r

  \    tupleGroups = null;\r

  \    boats = [];\r

  \  }\r

  }"
PreSearch: "function PreSearch() {\r

  \  if (GameController.GameOver != BOOL.TRUE) {\r

  \    srch_thinking = BOOL.TRUE;\r

  \    StartThinking();\r

  \    setTimeout(function () { StartSearch(); }, 200);\r

  \  }\r

  }"
preselectFirstVisualsForBoats: "function preselectFirstVisualsForBoats() {\r

  \  let oidlist = [];\r

  \  for (const id of getBoatIds()) {\r

  \    let oids = id2oids[id];\r

  \    if (isdef(oids)) oids.map(x => addIf(oidlist, x))\r

  \  }\r

  \  let vislist = oidlist.map(x => getMainId(x)).filter(x => x !== null);\r

  \  vislist = vislist.concat(oidlist.map(x => getDefId(x)));\r

  \  vislist.map(id => UIS[id].highFrame());\r

  }"
present: "function present() {\r

  \  if (Settings.perspective == 'me') presentFor(me);\r

  \  else presentAll();\r

  }"
present_a_game: "function present_a_game() {\r

  \  let [fen, uplayer, pl] = [Z.fen, Z.uplayer, Z.pl];\r

  \  UI.hand = ui_type_hand(pl.hand, dTable, { margin: 20 });\r

  }"
present_account: "function present_account(userdata) {\r

  \  DA.imageChanged = DA.colorChanged = false;\r

  \  return `\r

  \  <div id=\"dAccount\" style=\"max-width=500px; margin-top:10px;
  display:flex; animation: appear1 1s ease;justify-content:center;
  align-content:center\">\r

  \    <div id=\"error\">some text</div>\r

  \    <div style='text-align:center'>\r

  \      <form id=\"myform\" autocomplete=\"off\"
  style='text-align:center;background:${userdata.color}'>\r

  \        <span id='img_dd_instruction' style=\"font-size:11px;\">drag and
  drop an image to change</span><br>\r

  \        <img id=\"imgPreview\"
  onload='addColorPicker(\"${userdata.color}\");'
  src='${get_image_path(userdata)}' ondragover=\"handle_drag_and_drop(event)\"
  ondrop=\"handle_drag_and_drop(event)\"
  ondragleave=\"handle_drag_and_drop(event)\"\r

  \          style=\"height:200px;margin:10px;\" />\r

  \        <input id='iUsername' type=\"text\" name=\"motto\"
  placeholder='motto' value=\"${userdata.motto}\" autofocus\r

  \          onkeydown=\"if (event.keyCode ===
  13){event.preventDefault();collect_data(event);}\" />\r

  \        <br />\r

  \        <input id='save_settings_button' type=\"button\" value=\"Submit\"
  onclick=\"collect_data(event)\" ><br>\r

  \      </form>\r

  \  </div></div>\r

  \  `;\r

  }"
present_auto: "function present_auto(dParent, state) {\r

  \  for (const k in state) {\r

  \    let d = mDiv(dParent, { bg: 'random', rounding: 10, margin: 10,
  padding: 10 }, null, k);\r

  \    let val = state[k];\r

  \    if (isSimple(val)) {\r

  \      d.innerHTML += ': ' + val;\r

  \    } else if (isList(val)) {\r

  \      mCenterCenterFlex(d);\r

  \      val.map(x => mDiv(d, { bg: 'random', rounding: 10, margin: 10,
  padding: 10 }, null, x));\r

  \    } else {\r

  \      mCenterCenterFlex(d);\r

  \      present_auto(d, val);\r

  \    }\r

  \  }\r

  }"
present_contacts: "function present_contacts(obj) {\r

  \  let others = sync_users(obj.myusers);\r

  \  Session.others = others.map(x => x.name);\r

  \  var inner_left_panel = mBy(\"inner_left_panel\");\r

  \  inner_left_panel.innerHTML = createContactsContent(others, obj.msgs);\r

  }"
present_game_options: "function present_game_options(tid) {\r

  \  if (isdef(tid)) {\r

  \    let table = Session.cur_table;\r

  \    Session.cur_game = table.game;\r

  \    if (nundef(Session.game_options)) Session.game_options =
  table_options_to_game_options(table);\r

  \  } else {\r

  \    Session.game_options = {};\r

  \  }\r

  \  let gname = Session.cur_game;\r

  \  let g = DB.games[gname];\r

  \  let d = mBy('inner_left_panel');\r

  \  d.innerHTML = get_lobby(tid);\r

  \  let d1 = mBy('d_game_options');\r

  \  group = mRadioGroup(d1, { wmin: 190 }, 'd_players', 'players');\r

  \  populate_game_settings(d1, tid);\r

  \  populate_playmode(d1, g.av_modes);\r

  \  populate_players(isdef(tid) ? get_keys(Session.cur_players) :
  get_def_players_for_user(Session.cur_user));\r

  }"
present_games: "function present_games() {\r

  \  let html = `<div id='game_menu' style=\"text-align: center; animation:
  appear 1s ease both\">`;\r

  \  for (const g of dict2list(DB.games)) { html += ui_game_menu_item(g,
  Session.tables_by_game[g.id]); }\r

  \  mBy('inner_left_panel').innerHTML = html;\r

  \  mCenterCenterFlex(mBy('game_menu'));\r

  }"
present_games_dep: "function present_games_dep(obj) {\r

  \  bygame = set_tables_by_game(obj);\r

  \  Session.cur_tid = !isEmpty(obj.tables) ? obj.tables[0].id : null;\r

  \  mBy('inner_left_panel').innerHTML =
  createGamesContent(dict2list(DB.games), bygame);\r

  \  mCenterCenterFlex(mBy('game_menu'));\r

  }"
present_intro: "function present_intro() {\r

  \  let dParent = mBy('divTest'); show(dParent); clearElement(dParent);\r

  \  mStyle(dParent, { position: 'absolute', top: 0, bg: 'green', wmin:
  '100vw', hmin: '100vw' });\r

  \  param_present_contacts(Session, dParent, 'onclick_user_in_intro');\r

  }"
present_login: function present_login(obj) { param_present_contacts(obj,
  mBy('inner_left_panel'), 'onclick_user_login'); }
present_login_new: "function present_login_new(obj) {\r

  \  let others = sync_users(obj.myusers);\r

  \  Session.others = others.map(x => x.name);\r

  \  var inner_left_panel = mBy(\"inner_left_panel\");\r

  \  inner_left_panel.innerHTML = createLoginNewContent(others, obj.msgs);\r

  }"
present_non_admin_user: "function present_non_admin_user(username) {\r

  \  load_user(username);\r

  \  get_dictionary();\r

  \  poll_for_table_started();\r

  }"
present_non_admin_waiting_screen: "function present_non_admin_waiting_screen()
  {\r

  \  let dParent = mBy('divTest'); show(dParent); clearElement(dParent);\r

  \  mStyle(dParent, { position: 'absolute', top: 0, bg: 'green', wmin:
  '100vw', hmin: '100vw' });\r

  \  let dlogout = mDiv(dParent, { position: 'absolute', right: 10, top: 4,
  cursor: 'pointer' }, 'ddd_logout', `logout`);\r

  \  dlogout.onclick = onclick_logout;\r

  \  show_user_image(Session.cur_user, dParent);\r

  \  status_message_new(`hi, ${capitalize(Session.cur_user)}, a game is
  starting soon...`, dParent, { classname: 'slow_gradient_blink' });\r

  \  mLinebreak(dParent, 100);\r

  \  show_rankings(dParent);\r

  }"
present_resume_game_options: "function present_resume_game_options() {\r

  \  let gname = Session.cur_game;\r

  \  let g = DB.games[gname];\r

  \  Session.game_options = {};\r

  \  let d = mBy('inner_left_panel');\r

  \  let game = DB.games[Session.cur_game];\r

  \  let html = `\r

  \  <div id=\"lobby_holder\" class=\"layout_lobby\">\r

  \    <div id=\"lobby_header\"><div class='logo'>⛱</div>Settings for
  ${game.friendly}</div>\r

  \    <div id=\"lobby_main\">\r

  \        <div id='d_game_options' class='vCenterChildren'>\r

  \        </div>\r

  \        <div class=\"button_wrapper\">\r

  \          <button id='bJoinGame' class='button' style='display:none'>join
  game</button>\r

  \          <button id='bCreateGame' class='button'
  onclick='onclick_create_game_button()' style='display:none'>create
  game</button>\r

  \          <button id='bResumeGame' class='button'
  onclick='onclick_resume_game_button()'>resume game</button>\r

  \          <button id='bLobbyOk' class='button'
  onclick='onClickCreateGameOk()' style='display:none'>Ok</button>\r

  \          <button id='bLobbyCancel' class='button'
  onclick='onClickCreateGameCancel()' style='display:none'>Cancel</button>\r

  \          <button id='bLobbyJoinOk' class='button'
  onclick='onClickJoinGameOk()' style='display:none'>Ok</button>\r

  \          <button id='bLobbyJoinCancel' class='button'
  onclick='onClickJoinGameCancel()' style='display:none'>Cancel</button>\r

  \        </div>\r

  \      </div>\r

  \    </div>\r

  \  `;\r

  \  d.innerHTML = html;\r

  \  let d1 = mBy('d_game_options');\r

  \  group = mRadioGroup(d1, { wmin: 190 }, 'd_players', 'players');\r

  \  populate_game_settings(d1);\r

  \  populate_playmode(d1, g.av_modes);\r

  \  populate_players(get_def_players_for_user(Session.cur_user));\r

  }"
present_simple: "function present_simple(dParent, item) {\r

  \  if (isDict(item)) {\r

  \    mCenterCenterFlex(dParent);\r

  \    for (const k in item) {\r

  \      let d = mDiv(dParent, { bg: 'random', rounding: 10, margin: 10,
  padding: 10 }, null, k + ': ');\r

  \      val = item[k];\r

  \      present_simple(d, val);\r

  \    }\r

  \  } else if (isList(item)) {\r

  \    mCenterCenterFlex(dParent);\r

  \    item.map(x => present_simple(dParent, x));\r

  \  } else {\r

  \    dParent.innerHTML += item;\r

  \  }\r

  }"
present_simple0: "function present_simple0(dParent, item) {\r

  \  if (isDict(item)) {\r

  \    let d = mDiv(dParent, { bg: 'random', rounding: 10, margin: 10,
  padding: 10 });\r

  \    mCenterCenterFlex(d);\r

  \    for (const k in item) {\r

  \      d.innerHTML += k;\r

  \      present_simple0(d, item[k]);\r

  \    }\r

  \  } else if (isList(item)) {\r

  \    let d = mDiv(dParent, { bg: 'random', rounding: 10, margin: 10,
  padding: 10 });\r

  \    mCenterCenterFlex(d);\r

  \    item.map(x => present_simple0(d, x));\r

  \  } else {\r

  \    let d = mDiv(dParent, { bg: 'random', rounding: 10, margin: 10,
  padding: 10 });\r

  \    d.innerHTML = item;\r

  \  }\r

  }"
present_state_player: "function present_state_player(dParent, state, player) {\r

  \  if (!lookup(state, ['players', player])) { console.log('no state for
  player', player); return; }\r

  \  let dplayer = mDiv(dParent, { bg: 'random', rounding: 10, margin: 10,
  padding: 10 }, null, 'your items:');\r

  \  present_auto(dplayer, state.players[player]);\r

  \  let drest = mDiv(dParent, { bg: 'random', rounding: 10, margin: 10,
  padding: 10 }, null, 'table');\r

  \  present_auto(drest, state);\r

  }"
present_structured: "function present_structured(dParent, item) {\r

  \  let d = mDiv(dParent, { bg: 'random', rounding: 10, margin: 10, padding:
  10 });\r

  \  if (isDict(item)) {\r

  \    mCenterCenterFlex(d);\r

  \    for (const k in item) {\r

  \      val = item[k];\r

  \      let d1 = mDiv(d, { bg: 'random', rounding: 10, margin: 10, padding:
  10 }, null, k);\r

  \      present_structured(d1, val);\r

  \    }\r

  \  } else if (isList(item)) {\r

  \    mCenterCenterFlex(d);\r

  \    item.map(x => present_structured(d, x));\r

  \  } else {\r

  \    d.innerHTML = item;\r

  \  }\r

  }"
present_structured1: "function present_structured1(dParent, item) {\r

  \  if (isDict(item)) {\r

  \    mCenterCenterFlex(dParent);\r

  \    for (const k in item) {\r

  \      val = item[k];\r

  \      let d = mDiv(dParent, { bg: 'random', rounding: 10, margin: 10,
  padding: 10 }, null, k);\r

  \      present_structured1(d, val);\r

  \    }\r

  \    return dParent;\r

  \  } else if (isList(item)) {\r

  \    let d = mDiv(dParent, { bg: 'random', rounding: 10, margin: 10,
  padding: 10 });\r

  \    mCenterCenterFlex(d);\r

  \    item.map(x => present_structured1(d, x));\r

  \    return d;\r

  \  } else {\r

  \    let d = mDiv(dParent, { bg: 'random', rounding: 10, margin: 10,
  padding: 10 });\r

  \    d.innerHTML = item;\r

  \    return d;\r

  \  }\r

  }"
present_table: "function present_table(obj) {\r

  \  Session.cur_menu = 'play';\r

  \  console.assert(isdef(obj.table), 'present_table without
  obj.table!!!!!!!!!!!!!!');\r

  \  update_session(obj);\r

  \  let table_status = Session.cur_table.status;\r

  \  let my_status = Session.cur_me.player_status;\r

  \  let have_another_move = my_status == 'joined';\r

  \  if (table_status == 'deleted') { in_game_off();
  in_game_open_prompt_off(); status_message_off(); get_games(); return; }\r

  \  if (!in_game()) { open_game_ui(); in_game_on(); }\r

  \  let d = mBy('table'); d.animate([{ opacity: 0, transform:
  'translateY(50px)' }, { opacity: 1, transform: 'translateY(0px)' },], { fill:
  'both', duration: 1000, easing: 'ease' });\r

  \  if (!have_another_move) { reload_last_game_state(); }\r

  \  else if (!in_game_open_prompt()) { open_prompt();
  in_game_open_prompt_on(); }\r

  \  else { uiActivated = true; }\r

  \  update_game_status(Session.cur_players);\r

  \  if (table_status == 'over') {\r

  \    stop_game();\r

  \    let winners = Session.winners = race_check_endcondition();\r

  \    if (!isEmpty(winners)) {\r

  \      stop_game();\r

  \      DA.after_status_message = onclick_gameover_screen;\r

  \      show_gameover(winners);\r

  \    }\r

  \  }\r

  }"
present_table_from_csv: "function present_table_from_csv(csv_text, dParent) {\r

  \  prepare_table();\r

  \  dParent.innerHTML = get_table_html();\r

  \  import_the_text(csv_text);\r

  }"
present_wait_for_table_to_start: "function present_wait_for_table_to_start() {\r

  \  status_message(`hi, ${capitalize(Session.cur_user)}, a game is starting
  soon...`, { top: 330, classname: 'slow_gradient_blink' });\r

  \  poll_for_table_started();\r

  }"
present_wait_for_table_to_start_after_reload: "function
  present_wait_for_table_to_start_after_reload() {\r

  \  status_message(`table has been canceled by host, new game starting
  soon...`, { top: 330, classname: 'slow_gradient_blink' });\r

  \  poll_for_table_started();\r

  }"
present0: "function present0(dParent, item) {\r

  \  for (const k in item) {\r

  \    val = item[k];\r

  \    let d = mDiv(dParent, { display: 'inline-block', bg: 'random',
  rounding: 10, margin: 10, padding: 10 });\r

  \    if (isDict(val)) {\r

  \      present0(d, val);\r

  \    } else if (isList(val)) {\r

  \      val.map(x => presentSimpleVal(d, x));\r

  \    } else {\r

  \      presentSimpleVal(d, val);\r

  \    }\r

  \  }\r

  }"
present00: "function present00(items, options) {\r

  \  [options.rows, options.cols, options.szPic.w, options.szPic.h] = [10, 10,
  50, 50];\r

  \  console.log('present00: rows', options.rows, 'cols', options.cols);\r

  \  let fzOrig = options.fzOrig = options.fzText;\r

  \  _setRowsColsSize(options);\r

  \  makeItemDivs(items, options);\r

  \  if (options.fixTextFont == true) {\r

  \    _setTextFont(items, options, (options.fzOrig + options.fzText) / 2);\r

  \  }\r

  \  let dGrid = mDiv(options.dArea, { hmax: options.area.h, fz: 2, padding:
  options.gap }, getUID());\r

  \  options.idGrid = dGrid.id;\r

  \  for (const item of items) { mAppend(dGrid, iDiv(item)); }\r

  \  _makeGridGrid(items, options, dGrid);\r

  \  let wa = options.area.w, ha = options.area.h;\r

  \  let wi = (wa / options.cols) - 1.25 * options.gap;\r

  \  let hi = ha / options.rows - 1.25 * options.gap;\r

  \  wi = Math.min(200, wi); wi = Math.round(wi);\r

  \  hi = Math.min(200, hi); hi = Math.round(hi);\r

  \  let fzMax, fpMax;\r

  \  if (options.showLabels) {\r

  \    fzMax = Math.floor(idealFontDims(options.wLongest, wi - 2 *
  options.padding, hi, 24).fz);\r

  \    fpMax = options.showPic ? Math.min(hi / 2, wi * 2 / 3, hi - fzMax) :
  0;\r

  \  } else { fzMax = 1; fpMax = options.showPic ? Math.min(hi * 2 / 3, wi * 2
  / 3) : 0; }\r

  \  options.fzPic = options.picStyles.fz = fpMax;\r

  \  options.fzText = options.labelStyles.fz = fzMax;\r

  \  options.szPic = { w: wi, h: hi };\r

  \  for (const item of items) {\r

  \    let ui = item.live;\r

  \    mStyleX(ui.div, { wmin: wi, hmin: hi, padding: 0 });\r

  \    if (isdef(ui.dPic)) mStyleX(ui.dPic, { fz: fpMax });\r

  \    if (isdef(ui.dLabel)) mStyleX(ui.dLabel, { fz: fzMax });\r

  \  }\r

  \  if (options.fzText < options.fzOrig && options.fixTextFont == true)
  _setTextFont(items, options, (options.fzOrig + options.fzText) / 2)\r

  \  mStyleX(dGrid, { display: 'inline-grid', wmax: options.area.w, hmax:
  options.area.h });\r

  \  if (isOverflown(dGrid)) {\r

  \    let factor = .9;\r

  \    w = options.szPic.w * factor;\r

  \    h = options.szPic.h * factor;\r

  \    fz = options.fzText * factor;\r

  \    fzPic = options.fzPic * factor;\r

  \    options.fzPic = options.picStyles.fz = fzPic;\r

  \    options.fzText = options.labelStyles.fz = fz;\r

  \    options.szPic = { w: w, h: h };\r

  \    options.padding *= factor;\r

  \    options.gap *= factor;\r

  \    mStyleX(dGrid, { gap: options.gap / 2 });\r

  \    for (const item of items) {\r

  \      let ui = item.live;\r

  \      if (options.showLabels) mStyleX(ui.dLabel, { fz: fz });\r

  \      mStyleX(ui.div, { padding: options.padding, w: w, h: h });\r

  \      mStyleX(ui.dPic, { fz: fzPic });\r

  \    }\r

  \  }\r

  \  return [items, options];\r

  }"
presentActions: "function presentActions() {\r

  \  deleteActions();\r

  \  let areaName = 'a_d_divSelect';\r

  \  UIS[areaName].elem.scrollTop = 0;\r

  \  let iGroup = 0;\r

  \  let iTuple = 0;\r

  \  for (const tg of G.tupleGroups) {\r

  \    for (const t of tg.tuples) {\r

  \      let boatInfo = { obj_type: 'boat', oids: [], desc: tg.desc, tuple: t,
  iGroup: iGroup, iTuple: iTuple, text: t.map(x => x.val), weg: false };\r

  \      let mobj = makeDefaultAction(boatInfo, areaName);\r

  \      iTuple += 1;\r

  \    }\r

  \    iGroup += 1;\r

  \  }\r

  }"
presentAddNode: "function presentAddNode(n, title, area, lf, ls, lo) {\r

  \  if (nundef(lo)) lo = [];\r

  \  addIf(lo, 'act');\r

  \  addIf(lo, 'ui');\r

  \  let d = isString(area) ? mBy(area) : area;\r

  \  mNodeFilter(n, { dParent: d, title: title, lstFlatten: lf, lstShow: ls,
  lstOmit: lo });\r

  }"
presentAll: "function presentAll() {\r

  \  clearZones();\r

  \  for (const pl of T.players) {\r

  \    let zone = Zones[pl.id];\r

  \    pl.hand.showDeck(zone.dData, 'right', 0, false);\r

  \  }\r

  \  showTrick();\r

  }"
presentAllProps: "function presentAllProps(oid, pool, ms) {\r

  \  let o_new = pool[oid];\r

  \  let akku = [];\r

  \  for (const prop in o_new) {\r

  \    let nval = o_new[prop];\r

  \    let sval = simpleRep(nval);\r

  \    akku.push(prop + ':' + sval);\r

  \  }\r

  \  ms.multitext({ txt: akku, fz: 12, fill: 'black' });\r

  }"
presentChoices: "function presentChoices() {\r

  \  G.tupleGroups = getTupleGroups();\r

  \  decider.genMove(\r

  \    G,\r

  \    idx => {\r

  \      freezeUI();\r

  \      sendAction(idx, [gameStep]);\r

  \    },\r

  \  );\r

  \  timit.end_of_cycle('');\r

  }"
presentDefault: "function presentDefault(oid, o, isTableObject = true) {\r

  \  let mobj = getDefVisual(oid);\r

  \  if (!mobj) return;\r

  \  if (isPlain() && !isTableObject && G.player == oid) { mobj.hide(); return
  null; }\r

  \  if (isPlain() && !isTableObject) mobj.show();\r

  \  let optin = isTableObject ? S.settings.table.optin :
  S.settings.player.optin;\r

  \  let optout = isTableObject ? S.settings.table.optout :
  S.settings.player.optout;\r

  \  keys = optout ? arrMinus(getKeys(o), optout) : optin ? optin :
  getKeys(o);\r

  \  let x = mobj.tableX(o, keys);\r

  \  if (!isPlain() && !isTableObject) {\r

  \    growIfDefaultMainAreaWidth(mobj);\r

  \  }\r

  \  return x;\r

  }"
presentDictTree: "function presentDictTree(nDict, uidStart, area, treeProperty,
  R, lf, ls, lo, styles) {\r

  \  if (nundef(nDict)) {\r

  \    console.log('presentDictTree: cannot present nDict!!!');\r

  \    return;\r

  \  }\r

  \  d = mBy(area);\r

  \  let depth = 10;\r

  \  let dLevel = [];\r

  \  for (let i = 0; i < depth; i++) {\r

  \    let d1 = dLevel[i] = mDiv(d);\r

  \    mColor(d1, colorTrans('black', i * .1));\r

  \    if (isdef(styles)) mStyleX(d1, styles);\r

  \  }\r

  \  if (isEmpty(nDict)) return;\r

  \  maxLevel = 1 + recPresent(nDict[uidStart], 0, dLevel, nDict,
  treeProperty,\r

  \    { lstFlatten: lf, lstShow: ls, lstOmit: lo });\r

  }"
presentEnd: "function presentEnd() {\r

  \  if (nundef(G.end)) return false;\r

  \  let winner = G.serverData.end.winner;\r

  \  let msg = winner == null ? 'Both players win!' : 'Winner is ' +
  G.playersAugmented[winner].name;\r

  \  setStatus('GAME OVER! ' + msg);\r

  \  if (winner) {\r

  \    setCSSVariable('--bgWinner', G.playersAugmented[winner].color);\r

  \    areaBlink('a_d_status');\r

  \  }\r

  \  S_autoplay = false;\r

  \  unfreezeUI();\r

  \  let d = document.getElementById('a_d_divSelect');\r

  \  clearElement(d);\r

  \  d.scrollTop = 0;\r

  \  return true;\r

  }"
presentFor: "function presentFor(me) {\r

  \  clearElement(dTable);\r

  \  let others = arrWithout(T.players, [me]);\r

  \  for (const pl of others) {\r

  \    pl.hand.showDeck(dTable, 'right', 0, false);\r

  \  }\r

  \  mLinebreak(dTable);\r

  \  T.trick.showDeck(dTable, 'right', 20, true);\r

  \  mLinebreak(dTable);\r

  \  me.hand.showDeck(dTable, 'right', 0, false);\r

  \  showFleetingMessage('click to play a card!');\r

  }"
presentGenerations_dep: "function presentGenerations_dep(indices, area, R,
  genKey = 'G') {\r

  \  d = mBy(area);\r

  \  let level = 0;\r

  \  let depth = 10;\r

  \  let dLevel = [];\r

  \  for (let i = 0; i < depth; i++) {\r

  \    let d1 = dLevel[i] = mDiv(d);\r

  \    mSize(d1, '100%', 'auto');\r

  \    mFlexWrap(d1)\r

  \    mColor(d1, colorTrans('black', i * .1));\r

  \  }\r

  \  let di = 0;\r

  \  for (const i of indices) {\r

  \    let div = dLevel[di]; di++;\r

  \    presentNodes(R.gens[genKey][i], div);\r

  \  }\r

  }"
presentInChatList: "function presentInChatList(result, dParent) {\r

  \  let d2 = mDiv(dParent, { display: 'flex', gap: 10, margin: 10, padding:
  10, bg: 'white', fg: 'dimgray' });\r

  \  d2.setAttribute('username', result.username);\r

  \  let path = getProfileImagePath(result);\r

  \  let img = mImg(path, d2, { h: 50 });\r

  \  let d3 = mDiv(d2);\r

  \  let name = mText(result.username, d3);\r

  \  return d2;\r

  }"
presentInContactMenu: "function presentInContactMenu(result, d1) {\r

  \  let d2 = mDiv(d1, { position: 'relative' }, null, null, 'contact');\r

  \  d2.setAttribute('username', result.username);\r

  \  let dir = '../base/assets/images/';\r

  \  let path = dir + (result.hasImage ? result.username : 'unknown_user') +
  '.jpg';\r

  \  let img = mImg(path, d2, {});\r

  \  let name = mText(result.username, d2);\r

  \  return d2;\r

  }"
presentItems: "function presentItems(items, dParent, rows) {\r

  \  //#region phase3: prep container for items\r

  \  //#endregion\r

  \  //#region phase4: add items to container!\r

  \  let dGrid = mDiv(dParent);\r

  \  items.map(x => mAppend(dGrid, x.div));\r

  \  let gridStyles = { 'place-content': 'center', gap: 4, margin: 4, padding:
  4 };\r

  \  let gridSize = layoutGrid(items, dGrid, gridStyles, { rows: rows,
  isInline: true });\r

  \  //#endregion\r

  \  return { dGrid: dGrid, sz: gridSize };\r

  }"
presentLocationChange: "function presentLocationChange(oid, ms) {\r

  \  if (G.table[oid].obj_type == 'robber') {\r

  \    let o = G.table[oid];\r

  \    let changedProps = G.tableUpdated[oid];\r

  \    if (changedProps.summary.includes('loc')) {\r

  \      let oidLoc = o.loc._obj;\r

  \      let visLoc = getVisual(oidLoc);\r

  \      ms.setPos(visLoc.x, visLoc.y);\r

  \    }\r

  \  }\r

  }"
presentLog: "function presentLog() {\r

  \  let pl = G.player;\r

  \  let logId = 'a_d_log' + '_' + pl;\r

  \  if (!UIS[logId]) makeLogArea(pl);\r

  \  let d = document.getElementById(logId);\r

  \  let BASEMARGIN = 16;\r

  \  for (const k of G.logUpdated) {\r

  \    let logEntry = G.log[pl][k];\r

  \    let lineArr = logEntry.line;\r

  \    let lineDiv = document.createElement('div');\r

  \    lineDiv.style.marginLeft = '' + (BASEMARGIN * (logEntry.level)) +
  'px';\r

  \    for (const item of lineArr) {\r

  \      if (isSimple(item)) {\r

  \        let s = trim(item.toString());\r

  \        if (!isEmpty(s)) {\r

  \          lineDiv.appendChild(document.createTextNode(item));\r

  \        }\r

  \      } else if (isDict(item)) {\r

  \        if (item.type == 'obj') {\r

  \          let oid = item.ID;\r

  \          let mobj = makeAux(item.val, oid, 'a_d_log', lineDiv);\r

  \        } else if (item.type == 'player') {\r

  \          let oid = item.val;\r

  \          let mobj = makeAux(item.val, oid, 'a_d_log', lineDiv);\r

  \        } else {\r

  \        }\r

  \      }\r

  \    }\r

  \    d.appendChild(lineDiv);\r

  \    d.scrollTop = d.scrollHeight;\r

  \  }\r

  }"
presentMain: "function presentMain(oid, mobj, pool, isTableObject = true) {\r

  \  if (mobj.isa.card) {\r

  \    let collKey = mobj.collectionKey;\r

  \    if (isdef(collKey)) {\r

  \    }\r

  \  }\r

  \  let o = pool[oid];\r

  \  let validKeys = computePresentedKeys(o, isTableObject);\r

  \  let color = S.settings.useColorHintForProperties ? getColorHint(o) :
  mobj.fg;\r

  \  let akku = [];\r

  \  for (const k of validKeys) {\r

  \    let val = o[k];\r

  \    if (isSimple(val)) akku.push(val.toString());\r

  \  }\r

  \  if (!isEmpty(akku)) { mobj.multitext({ txt: akku, fill: color }); } else
  mobj.clearText();\r

  }"
presentMainMenu: "function presentMainMenu() {\r

  \  console.log('playMode:', S.settings.playMode, 'PLAYMODE', PLAYMODE,
  'S.playModeChanged', S.playModeChanged)\r

  \  S.gameInProgress = false;\r

  \  initDom();\r

  \  openTabTesting('Redmond');\r

  }"
presentMainPlayer: "function presentMainPlayer(oid, mobj, pool, isTableObject)
  {\r

  \  let o = pool[oid];\r

  \  if (!mobj) return;\r

  \  if (oid != G.player) { mobj.hide(); return; } else mobj.show();\r

  \  let optin = S.settings.player.optin;\r

  \  let optout = S.settings.player.optout;\r

  \  keys = optout ? arrMinus(getKeys(o), optout) : optin ? optin :
  getKeys(o);\r

  \  let x = mobj.tableX(o, keys);\r

  \  growIfDefaultMainAreaWidth(mobj);\r

  \  return x;\r

  }"
presentMappings: "function presentMappings(oid, o) {\r

  \  let otype = o.obj_type;\r

  \  if (mappingTypes[otype]) {\r

  \    if (mappingsInitialized[otype + '.' + oid]) return;\r

  \    let mm = mappings.filter(x => x[otype]);\r

  \    let onlyOnce = false;\r

  \    for (const mapping of mm) {\r

  \      executeMapping(mapping, otype, oid, o);\r

  \    }\r

  \    if (onlyOnce) mappingsInitialized[otype + '.' + oid] = true;\r

  \  }\r

  }"
presentNicely: "function presentNicely(oid, pool, ms) {\r

  \  let o_new = pool[oid];\r

  \  let akku = [];\r

  \  for (const prop in o_new) {\r

  \    let nval = o_new[prop];\r

  \    let sval = simpleRep(nval);\r

  \    akku.push(prop + ':' + sval);\r

  \  }\r

  \  ms.multitext({ txt: akku, fz: 12, fill: 'black' });\r

  }"
presentNode: "function presentNode(o, title, area, lstFlatten, lstShow, lstOmit
  = [], lstOmitTopLevel = []) {\r

  \  if (!isEmpty(lstOmitTopLevel)) {\r

  \    let oNew = {};\r

  \    for (const k in o) {\r

  \      if (lstOmitTopLevel.includes(k)) continue;\r

  \      oNew[k] = o[k];\r

  \    }\r

  \    o = oNew;\r

  \  }\r

  \  addIf(lstOmit, 'act');\r

  \  addIf(lstOmit, 'ui');\r

  \  addIf(lstOmit, 'live');\r

  \  let d = isString(area) ? mBy(area) : area;\r

  \  mNodeFilter(o, { dParent: d, title: title, lstFlatten: lstFlatten,
  lstShow: lstShow, lstOmit: lstOmit });\r

  }"
presentNodes: "function presentNodes(sp, area, lf, ls, lo) {\r

  \  for (const k in sp) {\r

  \    presentAddNode(sp[k], k, area, lf, ls, lo);\r

  \  }\r

  }"
presentOidNodes: "function presentOidNodes(R, area, lf, ls, lo) {\r

  \  for (const oid in R._sd) {\r

  \    let rsg = R.getR(oid);\r

  \    if (!isEmpty(rsg)) {\r

  \      let x = { rsg: rsg };\r

  \      presentAddNode(x, oid, area, ['rsg'], ls, lo);\r

  \    }\r

  \  }\r

  }"
presentPlayer: "function presentPlayer(id, ms, o_new, o_old, options) {\r

  \  let res = {};\r

  \  if (isdef(G.player)) res.color = G.players[G.player].color;\r

  \  return res;\r

  }"
presentPlayers: "function presentPlayers() {\r

  \  _playersCreateNew();\r

  \  _playersUpdate();\r

  }"
presentPlayersSimple: "function presentPlayersSimple() {\r

  }"
presentRoot_dep: "function presentRoot_dep(n, area, lf, ls, lo) {\r

  \  d = mBy(area);\r

  \  let depth = 10;\r

  \  let dLevel = [];\r

  \  for (let i = 0; i < depth; i++) {\r

  \    let d1 = dLevel[i] = mDiv(d);\r

  \    mColor(d1, colorTrans('black', i * .1));\r

  \  }\r

  \  addIf(lo, 'act');\r

  \  addIf(lo, 'ui');\r

  \  maxLevel = 1 + recPresentFilter(n, 0, dLevel, { lstFlatten: lf, lstShow:
  ls, lstOmit: lo });\r

  }"
presentRootPresetLists_dep: "function presentRootPresetLists_dep(n, area) {\r

  \  let lstFlatten = ['type', 'pool', 'source', 'data', 'content'];\r

  \  let lstShow = ['type', 'oid', 'data', 'content', 'pool'];\r

  \  let lstOmit = ['act', 'bi', 'sub', '_id', '_ref', 'children', 'source',
  'specKey', 'params', 'cssParams', 'typParams', 'stdParams', 'uid', 'ui'];\r

  \  d = mBy(area);\r

  \  let level = 0;\r

  \  let depth = 10;\r

  \  let dLevel = [];\r

  \  for (let i = 0; i < depth; i++) {\r

  \    let d1 = dLevel[i] = mDiv(d);\r

  \    mColor(d1, colorTrans('black', i * .1));\r

  \  }\r

  \  maxLevel = 1 + recPresentFilter(n, 0, dLevel, { lstFlatten: lstFlatten,
  lstShow: lstShow, lstOmit: lstOmit });\r

  \  removeInPlace(lstOmit, 'children');\r

  }"
presentServerData: "function presentServerData(sdata, area) {\r

  \  let d = mBy(area);\r

  \  clearElement(d);\r

  \  for (const [k, v] of Object.entries(sdata)) {\r

  \    mNode(v, { title: k, dParent: d, omitEmpty: true });\r

  \  }\r

  }"
presentSimpleVal: "function presentSimpleVal(d, item) {\r

  \  let d1 = mDiv(d, { display: 'inline-block', bg: 'random', rounding: 10,
  margin: 10, padding: 10 });\r

  \  d1.innerHTML = item;\r

  }"
presentSpecAndCode: "function presentSpecAndCode(callbacks = []) {\r

  \  let d = document.getElementById('a_d_spec_content');\r

  \  if (S.user.spec && S.settings.userSettings) {\r

  \    d.innerHTML = S.user.specText;\r

  \  } else { d.innerHTML = ''; }\r

  \  d = document.getElementById('a_d_code_content');\r

  \  if (S.user.script && S.settings.userBehaviors) {\r

  \    d.innerHTML = S.user.script;\r

  \  } else { d.innerHTML = ''; }\r

  \  $('pre').html(function () {\r

  \    return this.innerHTML.replace(/\\t/g, '&nbsp;&nbsp;');\r

  \  });\r

  \  if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));\r

  }"
presentState1: "function presentState1(state, areas) {\r

  \  let trick1 = arrFlatten(state.pl1.trick)\r

  \  let trick2 = arrFlatten(state.pl2.trick);\r

  \  let pl1Hand = state.pl1.hand;\r

  \  let pl2Hand = state.pl2.hand;\r

  \  let arrs = [[trick1, trick2], [pl1Hand], [pl2Hand]];\r

  \  let hands = [];\r

  \  for (let i = 0; i < 3; i++) {\r

  \    let area = areas[i];\r

  \    let d = diContent(area);\r

  \    iMessage(area, '');\r

  \    for (let j = 0; j < arrs[i].length; j++) {\r

  \      let arr = arrs[i][j];\r

  \      let id = 'a' + i + '_h' + j;\r

  \      let what = iH00(arr, d, {}, id);\r

  \      hands.push(what);\r

  \    }\r

  \  }\r

  \  for (let i = 0; i < 2; i++) {\r

  \    let cards = hands[i].iHand.items;\r

  \    if (isEmpty(hands[i].arr)) continue;\r

  \    console.log('cards', cards, 'hands[i]', hands[i])\r

  \    for (let j = 0; j < cards.length - 1; j++) {\r

  \      Card52.turnFaceDown(cards[j]);\r

  \    }\r

  \  }\r

  }"
presentStatus: "function presentStatus() {\r

  \  if (isdef(G.serverData.status)) {\r

  \    let lineArr = G.serverData.status.line;\r

  \    let areaName = isPlain() ? 'c_d_statusInHeaderText' :
  'c_d_statusText';\r

  \    let d = document.getElementById(areaName);\r

  \    let mobj = UIS[areaName];\r

  \    mobj.clear(); clearElement(d);\r

  \    let pl = G.player;\r

  \    let msStatus = makeAux(G.playersAugmented[pl].username + ' (' + pl +
  ')', pl, areaName);\r

  \    let color = getPlayerColor(pl);\r

  \    msStatus.setBg(color);\r

  \    msStatus.setFg(colorIdealText(color));\r

  \    d.appendChild(document.createTextNode(': '));\r

  \    for (const item of lineArr) {\r

  \      if (isSimple(item)) {\r

  \        let s = trim(item.toString());\r

  \        if (!isEmpty(s)) {\r

  \          d.appendChild(document.createTextNode(item));\r

  \        }\r

  \      } else if (isDict(item)) {\r

  \        if (item.type == 'obj') {\r

  \          let oid = item.ID;\r

  \          let mobj = makeAux(item.val, oid, areaName);\r

  \        } else if (item.type == 'player') {\r

  \          let oid = item.val;\r

  \          let mobj = makeAux(item.val, oid, areaName);\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  }"
presentTable: "function presentTable() {\r

  \  _tableRemove();\r

  \  _tableCreateNew();\r

  \  _tableUpdate();\r

  }"
presentTableSimple: "function presentTableSimple() {\r

  \  _tableRemoveSimple();\r

  \  _tableCreateNewSimple();\r

  \  _tableUpdateSimple();\r

  }"
presentTree: "async function presentTree(uiRoot, R) {\r

  \  if (R.presentationStrategy == 'rec') {\r

  \    recPresentNode(uiRoot, R, uiRoot.params);\r

  \  } else if (R.presentationStrategy == 'new') {\r

  \    recMeasureOverride(R.tree.uid, R);\r

  \  } else if (R.presentationStrategy == 'orig') {\r

  \    if (uiRoot.params.sizing == 'sizeToContent') {\r

  \      recMeasureAbs(R.tree.uid, R);\r

  \      recArrangeContent(R.tree.uid, R);\r

  \    } else if (uiRoot.params.sizing == 'fixed') {\r

  \      let [minx, maxx, miny, maxy] =
  recMeasureArrangeFixedSizeAndPos(R.tree.uid, R);\r

  \      uiRoot.size = { w: maxx, h: maxy };\r

  \      uiRoot.ui.style.minWidth = (uiRoot.size.w + 4) + 'px';\r

  \      uiRoot.ui.style.minHeight = (uiRoot.size.h + 4) + 'px';\r

  \    } else {\r

  \      recMeasureOverride(R.tree.uid, R);\r

  \    }\r

  \  } else if (nundef(R.presentationStrategy)) {\r

  \    if (uiRoot.params.sizing == 'sizeToContent') {\r

  \      recMeasureAbs(R.tree.uid, R);\r

  \      recArrangeContent(R.tree.uid, R);\r

  \    } else if (uiRoot.params.sizing == 'fixed') {\r

  \      let [minx, maxx, miny, maxy] =
  recMeasureArrangeFixedSizeAndPos(R.tree.uid, R);\r

  \      uiRoot.size = { w: maxx, h: maxy };\r

  \      uiRoot.ui.style.minWidth = (uiRoot.size.w + 4) + 'px';\r

  \      uiRoot.ui.style.minHeight = (uiRoot.size.h + 4) + 'px';\r

  \    } else {\r

  \      recMeasureOverride(R.tree.uid, R);\r

  \    }\r

  \  } else {\r

  \    trace('UNKNOWN presentationStrategy!!!!!!', R.presentationStrategy)\r

  \  }\r

  }"
presentTree_dep: "function presentTree_dep(n, treeProperty, area, R, lf, ls, lo)
  {\r

  \  d = mBy(area);\r

  \  let depth = 10;\r

  \  let dLevel = [];\r

  \  for (let i = 0; i < depth; i++) {\r

  \    let d1 = dLevel[i] = mDiv(d);\r

  \    mColor(d1, colorTrans('black', i * .1));\r

  \  }\r

  \  let nDict = R.rNodes;\r

  \  maxLevel = 1 + recPresent(n, 0, dLevel, nDict, treeProperty, {
  lstFlatten: lf, lstShow: ls, lstOmit: lo });\r

  }"
presentVisible: "function presentVisible(id, ms, o_new, o_old, options) {\r

  \  let visPlayers = getVisibleList(o_new);\r

  \  let visColors = visPlayers.map(x => G.players[x].color);\r

  \  dots(ms, visColors.length, { UL: false, UR: true, colors: visColors });\r

  }"
presentWaitingFor: "function presentWaitingFor() {\r

  \  if (G.serverData.error) {\r

  \    alert(G.serverData.error.type + ' ' + G.serverData.error.msg);\r

  \    return;\r

  \  }\r

  \  let pl = G.serverData.waiting_for[0];\r

  \  if (nundef(G.previousWaitingFor) || G.previousWaitingFor != pl) {\r

  \    G.previousWaitingFor = pl;\r

  \    _updatePageHeader(pl);\r

  \  }\r

  \  if (S.settings.playmode != 'passplay' && (isMyPlayer(pl) ||
  isFrontAIPlayer(pl) && isMyPlayer(G.player))) {\r

  \    let user = G.playersAugmented[pl].username;\r

  \    sendStatus(user, [gameStep]);\r

  \  } else if (S.settings.playmode == 'passplay') {\r

  \    _showPassToNextPlayer(pl);\r

  \  } else {\r

  \    socketEmitMessage({ type: 'poll', data: pl });\r

  \  }\r

  }"
presentWordProblem: "function presentWordProblem() {\r\n}"
previewBrowsedFile: "function previewBrowsedFile(dParent, imgFile) {\r

  \  var imgView = document.createElement(\"div\");\r

  \  imgView.className = \"image-view\";\r

  \  mAppend(dParent, imgView);\r

  \  var img = document.createElement(\"img\");\r

  \  imgView.appendChild(img);\r

  \  var reader = new FileReader();\r

  \  reader.onload = function (e) {\r

  \    img.src = e.target.result;\r

  \    imgFile.data = e.target.result;\r

  \  }\r

  \  reader.readAsDataURL(imgFile);\r

  }"
previewImageFromFile: "function previewImageFromFile(imgFile, img) {\r

  \  var reader = new FileReader();\r

  \  reader.onload = function (e) {\r

  \    img.src = e.target.result;\r

  \    imgFile.data = e.target.result;\r

  \  }\r

  \  reader.readAsDataURL(imgFile);\r

  }"
previewImageFromUrl: "function previewImageFromUrl(url, img) {\r

  \  img.onerror = function () {\r

  \    alert(\"Error in uploading\");\r

  \  }\r

  \  img.crossOrigin = \"\";\r

  \  img.src = url;\r

  }"
prex: "function prex(x) {\r

  \  prll(expand(x));\r

  }"
PRHLayout: "function PRHLayout() {\r

  \  let drr = UI.DRR = mDiv(dTable);\r

  \  mAppend(drr, UI.dHistory);\r

  \  Clientdata.historyLayout = 'prh';\r

  }"
print_board: "function print_board(gameArr) {\r

  \  console.log()\r

  \  for (i = 0; i < 9; i++) {\r

  \    let row = get_row(gameArr, i)\r

  \    if (i % 3 == 0) {\r

  \      console.log(\"|=======|=======|=======|\")\r

  \    }\r

  \    console.log(\"|\",\r

  \      print_cell(row[0]), print_cell(row[1]), print_cell(row[2]), \"|\",\r

  \      print_cell(row[3]), print_cell(row[4]), print_cell(row[5]), \"|\",\r

  \      print_cell(row[6]), print_cell(row[7]), print_cell(row[8]), \"|\")\r

  \  }\r

  \  console.log(\"|=======|=======|=======|\")\r

  }"
print_cell: "function print_cell(value) {\r

  \  if (Array.isArray(value)) {\r

  \    return \".\"\r

  \  } else if (value == 0) {\r

  \    return \".\"\r

  \  } else {\r

  \    return value\r

  \  }\r

  }"
printBoard: "function printBoard(arr, rows, cols, reduced = true) {\r

  \  let arrR = boardArrOmitFirstRowCol(arr, rows, cols);\r

  \  let s = toBoardString(arrR, rows, cols);\r

  \  console.log('board', s);\r

  }"
PrintBoard: "function PrintBoard() {\r

  \  return;\r

  \  var sq, file, rank, piece;\r

  \  console.log(\"\\nGame Board:\\n\");\r

  \  for (rank = RANKS.RANK_8; rank >= RANKS.RANK_1; rank--) {\r

  \    var line = ((rank + 1) + \"  \");\r

  \    for (file = FILES.FILE_A; file <= FILES.FILE_H; file++) {\r

  \      sq = FR2SQ(file, rank);\r

  \      piece = brd_pieces[sq];\r

  \      line += (\" \" + PceChar[piece] + \" \");\r

  \    }\r

  \    console.log(line);\r

  \  }\r

  \  console.log(\"\");\r

  \  var line = \"   \";\r

  \  for (file = FILES.FILE_A; file <= FILES.FILE_H; file++) {\r

  \    line += (' ' + String.fromCharCode('a'.charCodeAt() + file) + ' ');\r

  \  }\r

  \  console.log(line);\r

  \  console.log(\"side:\" + SideChar[brd_side]);\r

  \  console.log(\"enPas:\" + brd_enPas);\r

  \  line = \"\";\r

  \  if (brd_castlePerm & CASTLEBIT.WKCA) line += 'K';\r

  \  if (brd_castlePerm & CASTLEBIT.WQCA) line += 'Q';\r

  \  if (brd_castlePerm & CASTLEBIT.BKCA) line += 'k';\r

  \  if (brd_castlePerm & CASTLEBIT.BQCA) line += 'q';\r

  \  console.log(\"castle:\" + line);\r

  \  console.log(\"key:\" + brd_posKey.toString(16));\r

  }"
printGameLine: "function printGameLine() {\r

  \  var moveNum = 0;\r

  \  var gameLine = \"\";\r

  \  for (moveNum = 0; moveNum < brd_hisPly; ++moveNum) {\r

  \    gameLine += PrMove(brd_history[moveNum].move) + \" \";\r

  \  }\r

  \  return $.trim(gameLine);\r

  }"
printMatrix: "function printMatrix(arr2d, title = 'result') {\r

  \  let rows = arr2d.length;\r

  \  let cols = arr2d[0].length;\r

  \  let arr = arrFlatten(arr2d);\r

  \  let s = toBoardString(arr, rows, cols);\r

  \  console.log(title, s)\r

  }"
PrintMoveList: "function PrintMoveList() {\r

  \  var index;\r

  \  var move;\r

  \  console.log(\"MoveList:\");\r

  \  for (index = brd_moveListStart[brd_ply]; index <
  brd_moveListStart[brd_ply + 1]; ++index) {\r

  \    move = brd_moveList[index];\r

  \    console.log(\"Move:\" + (index + 1) + \" > \" + PrMove(move));\r

  \  }\r

  }"
PrintPceLists: "function PrintPceLists() {\r

  \  var piece, pceNum;\r

  \  for (piece = PIECES.wP; piece <= PIECES.bK; ++piece) {\r

  \    for (pceNum = 0; pceNum < brd_pceNum[piece]; ++pceNum) {\r

  \      console.log(\"Piece \" + PceChar[piece] + \" on \" +
  PrSq(brd_pList[PCEINDEX(piece, pceNum)]));\r

  \    }\r

  \  }\r

  }"
PrintPieceLists: "function PrintPieceLists() {\r

  \  var piece, pceNum;\r

  \  for (piece = PIECES.wP; piece <= PIECES.bK; ++piece) {\r

  \    for (pceNum = 0; pceNum < BFBoard.pceNum[piece]; ++pceNum) {\r

  \      console.log('Piece ' + PceChar[piece] + ' on ' +
  PrSq(BFBoard.pList[PCEINDEX(piece, pceNum)]));\r

  \    }\r

  \  }\r

  }"
PrintSqAttacked: "function PrintSqAttacked() {\r

  \  var sq, file, rank, piece;\r

  \  console.log(\"\\nAttacked:\\n\");\r

  \  for (rank = RANKS.RANK_8; rank >= RANKS.RANK_1; rank--) {\r

  \    var line = ((rank + 1) + \"  \");\r

  \    for (file = FILES.FILE_A; file <= FILES.FILE_H; file++) {\r

  \      sq = FR2SQ(file, rank);\r

  \      if (SqAttacked(sq, COLOURS.BLACK) == BOOL.TRUE) piece = \"X\";\r

  \      else piece = \"-\";\r

  \      line += (\" \" + piece + \" \");\r

  \    }\r

  \    console.log(line);\r

  \  }\r

  \  console.log(\"\");\r

  }"
printState: "function printState(state, cols, rows) {\r

  \  let formattedString = '';\r

  \  state.forEach((cell, index) => {\r

  \    formattedString += isdef(cell) ? ` ${cell == '0' ? ' ' : cell} |` :
  '   |';\r

  \    if ((index + 1) % cols == 0) {\r

  \      formattedString = formattedString.slice(0, -1);\r

  \      if (index < rows * cols - 1) {\r

  \        let s = '\\u2015\\u2015\\u2015 '.repeat(cols);\r

  \        formattedString += '\\n' + s + '\\n';\r

  \      }\r

  \    }\r

  \  });\r

  \  console.log('%c' + formattedString, 'color: #6d4e42;font-size:10px');\r

  \  console.log();\r

  }"
prj: "function prj(j) {\r\n}"
prjstart: "function prjstart(j) {\r\n}"
prlist: "function prlist(arr) {\r

  \  if (isList(arr)) {\r

  \    if (isEmpty(arr)) return '';\r

  \    else return '[' + prlist(arr[0]) + arr.slice(1).map(x => ',' +
  prlist(x)) + ']';\r

  \  } else return arr;\r

  }"
prll: "function prll(ll) {\r

  \  if (!isList(ll)) {\r

  \    testHelpers('NOT a list', ll);\r

  \    return;\r

  \  }\r

  \  for (const l of ll) {\r

  \    if (!isList(ll)) {\r

  \      return;\r

  \    }\r

  \  }\r

  \  let s = '[';\r

  \  for (const l of ll) {\r

  \    s += '[' + l.toString() + ']';\r

  \  }\r

  \  s += ']';\r

  \  testHelpers(s);\r

  }"
PrMove: "function PrMove(move) {\r

  \  var MvStr;\r

  \  var ff = FilesBrd[FROMSQ(move)];\r

  \  var rf = RanksBrd[FROMSQ(move)];\r

  \  var ft = FilesBrd[TOSQ(move)];\r

  \  var rt = RanksBrd[TOSQ(move)];\r

  \  MvStr = String.fromCharCode('a'.charCodeAt() + ff) +
  String.fromCharCode('1'.charCodeAt() + rf) +\r

  \    String.fromCharCode('a'.charCodeAt() + ft) +
  String.fromCharCode('1'.charCodeAt() + rt)\r

  \  var promoted = PROMOTED(move);\r

  \  if (promoted != PIECES.EMPTY) {\r

  \    var pchar = 'q';\r

  \    if (PieceKnight[promoted] == BOOL.TRUE) {\r

  \      pchar = 'n';\r

  \    } else if (PieceRookQueen[promoted] == BOOL.TRUE &&
  PieceBishopQueen[promoted] == BOOL.FALSE) {\r

  \      pchar = 'r';\r

  \    } else if (PieceRookQueen[promoted] == BOOL.FALSE &&
  PieceBishopQueen[promoted] == BOOL.TRUE) {\r

  \      pchar = 'b';\r

  \    }\r

  \    MvStr += pchar;\r

  \  }\r

  \  return MvStr;\r

  }"
ProbePvTable: "function ProbePvTable() {\r

  \  var index = brd_posKey % PVENTRIES;\r

  \  if (brd_PvTable[index].posKey == brd_posKey) {\r

  \    return brd_PvTable[index].move;\r

  \  }\r

  \  return NOMOVE;\r

  }"
proceed: "function proceed(nextLevel) {\r

  \  if (nundef(nextLevel)) nextLevel = currentLevel;\r

  \  if (nextLevel > MAXLEVEL) {\r

  \    let iGame = gameSequence.indexOf(currentGame) + 1;\r

  \    if (iGame == gameSequence.length) {\r

  \      soundGoodBye();\r

  \      mClass(document.body, 'aniSlowlyDisappear');\r

  \      show(dLevelComplete);\r

  \      dLevelComplete.innerHTML = 'CONGRATULATIONS! You are done!';\r

  \    } else {\r

  \      let nextGame = gameSequence[iGame];\r

  \      startGame(nextGame);\r

  \    }\r

  \  } else if (LevelChange) startLevel(nextLevel);\r

  \  else startRound();\r

  }"
proceed_to_newcards_selection: "function proceed_to_newcards_selection() {\r

  \  let fen = Z.fen;\r

  \  let selorder = fen.selorder = sortByFuncDescending(fen.church_order, x =>
  fen.players[x].tithes.val);\r

  \  fen.toBeSelected = jsCopy(selorder);\r

  \  fen.plorder = selorder;\r

  \  Z.turn = [selorder[0]];\r

  \  Z.stage = 19;\r

  \  take_turn_fen();\r

  }"
proceedIfNotStepByStep: "function proceedIfNotStepByStep(nextLevel) {\r

  \  if (!StepByStepMode) { proceed(nextLevel); }\r

  }"
proceedRedraw: "function proceedRedraw() {\r

  \  flags.specAndDOM = true;\r

  \  let xdata = G.serverData;\r

  \  G = { table: {}, players: {}, signals: {} };\r

  \  UIS = {};\r

  \  IdOwner = {};\r

  \  id2oids = {};\r

  \  oid2ids = {};\r

  \  id2uids = {};\r

  \  initDom();\r

  \  gameStep(xdata);\r

  }"
proceedToConfig: "function proceedToConfig() {\r

  \  populateGamenames();\r

  \  hideEventList();\r

  \  showGameConfig();\r

  \  setMessage('Setup new game!');\r

  \  hide('bJoinGame');\r

  \  hide('bCreateGame');\r

  \  show('bLobbyOk');\r

  \  show('bLobbyCancel');\r

  \  show('bResumeGame');\r

  \  updateGamename(S.settings.game);\r

  \  updatePlayersForGame();\r

  \  updatePlaymode(S.settings.playmode);\r

  \  updatePlayersForMode();\r

  }"
process_auction: "function process_auction() {\r

  \  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];\r

  \  if (isEmpty(A.selected)) A.selected = [0];\r

  \  let playerbid = Number(valf(A.items[A.selected[0]].a, '0'));\r

  \  lookupSet(fen, ['auction', uplayer], playerbid);\r

  \  let iturn = fen.plorder.indexOf(uplayer) + 1;\r

  \  if (iturn >= fen.plorder.length) {\r

  \    let list = dict2list(fen.auction, 'uplayer');\r

  \    list = sortByDescending(list, 'value');\r

  \    let max = list[0].value;\r

  \    if (max == 0) {\r

  \      Z.stage = 4;\r

  \      Z.turn = [fen.plorder[0]];\r

  \      take_turn_fen();\r

  \      return;\r

  \    }\r

  \    let second = fen.second_most = list.length == 1 ? randomNumber(0, max)
  : list[1].value;\r

  \    Z.stage = 13;\r

  \    let maxplayers = fen.maxplayers = list.filter(x => x.value ==
  max).map(x => x.uplayer);\r

  \    Z.turn = [maxplayers[0]];\r

  \    for (const plname of plorder) {\r

  \      ari_history_list([`${plname} bids ${fen.auction[plname]}`],
  'auction');\r

  \    }\r

  \    ari_history_list([`auction winner${if_plural(fen.maxplayers.length)}:
  ${fen.maxplayers.join(', ')} (price: ${fen.second_most} coin)`], 'auction');\r

  \  } else {\r

  \    Z.turn = [fen.plorder[iturn]];\r

  \  }\r

  \  take_turn_fen();\r

  }"
process_blackmail: "function process_blackmail() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  console.log('selected building to blackmail:', item);\r

  \  let building_owner = stringAfter(item.o.path, '.'); building_owner =
  stringBefore(building_owner, '.');\r

  \  let path = item.o.path;\r

  \  fen.blackmail = { blackmailer: uplayer, blackmailed: building_owner,
  payment: A.payment, building_path: path };\r

  \  let fenbuilding = lookup(fen, path.split('.'));\r

  \  console.log('blackmail:', fen.blackmail);\r

  \  fenbuilding.isblackmailed = true;\r

  \  ari_history_list([`${uplayer} is blackmailing ${building_owner}`],
  'blackmail');\r

  \  [Z.stage, Z.turn] = [33, [building_owner]];\r

  \  console.log('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh')\r

  \  process_payment();\r

  \  setTimeout(take_turn_fen, 1000);\r

  }"
process_comm_setup: "function process_comm_setup() {\r

  \  let [fen, A, uplayer, plorder, pl] = [Z.fen, Z.A, Z.uplayer, Z.plorder,
  Z.pl];\r

  \  assertion(fen.keeppolling == true, \"keeppolling must be true for
  process_comm_setup!!!\");\r

  \  if (DA.hallo) {\r

  \    console.log('process_comm_setup:', Z.playerdata, Z.stage, uplayer,
  pl);\r

  \    return;\r

  \  }\r

  \  let items = A.selected.map(x => A.items[x]);\r

  \  let next = get_next_player(Z, uplayer);\r

  \  let receiver = next;\r

  \  let giver = uplayer;\r

  \  let keys = items.map(x => x.key);\r

  \  Z.state = { giver: giver, receiver: receiver, keys: keys };\r

  \  assertion(isdef(Z.playerdata), \"Z.playerdata must be defined for
  process_comm_setup!!!\");\r

  \  let data = firstCond(Z.playerdata, x => x.name == uplayer);\r

  \  assertion(isdef(data), `MISSING: playerdata for ${uplayer}`);\r

  \  data.state = Z.state;\r

  \  let can_resolve = check_resolve();\r

  \  if (can_resolve) {\r

  \    Z.turn = [Z.host];\r

  \    Z.stage = 104; //'next_comm_setup_stage';\r

  \    take_turn_fen_write();\r

  \  } else {\r

  \    if (Z.mode == 'hotseat') { Z.turn = [get_next_player(Z, uplayer)];
  take_turn_fen_write(); }\r

  \    else take_turn_multi();\r

  \  }\r

  }"
process_command: "function process_command() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  let item = A.last_selected;\r

  \  if (nundef(item)) { post_pass(); return; }\r

  \  A.selected = [item.index];\r

  \  let a = A.items[A.selected[0]];\r

  \  A.command = a.key;\r

  \  ari_pre_action();\r

  }"
process_commission: "function process_commission() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  A.commission = A.items[A.selected[0]];\r

  \  if (A.commission.similar.length > 1) {\r

  \    Z.stage = 37;\r

  \  } else {\r

  \    A.commission_stall_item = A.commission.similar[0];\r

  \    Z.stage = 16;\r

  \  }\r

  \  ari_pre_action();\r

  }"
process_commission_stall: "function process_commission_stall() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  console.log('process_commission_stall selected', A.selected, 'item',
  A.items[A.selected[0]]);\r

  \  Z.A.commission_stall_item = A.items[A.selected[0]];\r

  \  Z.stage = 16;\r

  \  ari_pre_action();\r

  }"
process_downgrade: "function process_downgrade() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  A.building = A.items[A.selected[0]];\r

  \  fen.stage = Z.stage = 103;\r

  \  let items = ui_get_hidden_building_items(A.building.o);\r

  \  items.map(x => face_up(x.o));\r

  \  A.possible_downgrade_cards = items;\r

  \  ari_pre_action();\r

  }"
process_inspect: "function process_inspect() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  let cards = item.o.items;\r

  \  cards.map(x => face_up(x))\r

  \  weiter_process_inspect();\r

  }"
process_journey: "function process_journey() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  if (isEmpty(A.selected)) {\r

  \    if (nundef(fen.passed)) fen.passed = []; fen.passed.push(uplayer);\r

  \    [Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options,
  Z.phase);\r

  \    take_turn_fen();\r

  \    return;\r

  \  }\r

  \  let sel = A.selected.map(x => A.items[x].key);\r

  \  let [carditems, journeyitem, jlegal] = check_correct_journey(A, fen,
  uplayer);\r

  \  if (!carditems) return;\r

  \  delete fen.passed;\r

  \  [A.carditems, A.journeyitem, A.jlegal] = [carditems, journeyitem,
  jlegal];\r

  \  Z.stage = A.journeyitem ? 30 : 31;\r

  \  ari_pre_action();\r

  }"
process_payment: "function process_payment() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  let item = A.payment;\r

  \  is_coin_pay = nundef(item.o);\r

  \  if (is_coin_pay) a2_pay_with_coin(uplayer); else
  a2_pay_with_card(item);\r

  \  ari_history_list(get_pay_history(is_coin_pay ? 'coin' : item.o.key,
  uplayer), 'payment');\r

  \  A.payment_complete = true;\r

  \  return is_coin_pay;\r

  }"
process_rumor: "function process_rumor() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  let items = A.selected.map(x => A.items[x]);\r

  \  let building = firstCond(items, x => x.path.includes('building'));\r

  \  let rumor = firstCond(items, x => !x.path.includes('building'));\r

  \  if (nundef(building) || nundef(rumor)) {\r

  \    select_error('you must select exactly one building and one rumor
  card!');\r

  \    return;\r

  \  }\r

  \  let fenbuilding = lookup(fen, building.path.split('.'));\r

  \  lookupAddToList(fenbuilding, ['rumors'], rumor.key);\r

  \  removeInPlace(fen.players[uplayer].rumors, rumor.key);\r

  \  ari_history_list([`${uplayer} added rumor to
  ${ari_get_building_type(fenbuilding)}`,], 'rumor');\r

  \  ari_next_action(fen, uplayer);\r

  }"
process_rumor_discard: "function process_rumor_discard() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  console.log('.........items', A.items, A.selected, item);\r

  \  let rumor = item.key;\r

  \  removeInPlace(fen.players[uplayer].rumors, rumor);\r

  \  ari_history_list([`building is correct! ${uplayer} had to discard rumor
  (${rumor})`], 'rumor');\r

  \  ari_next_action();\r

  }"
process_rumors_setup: "function process_rumors_setup() {\r

  \  let [fen, A, uplayer, plorder, data] = [Z.fen, Z.A, Z.uplayer, Z.plorder,
  Z.uplayer_data];\r

  \  let items = A.selected.map(x => A.items[x]);\r

  \  let receiver = firstCond(items, x => plorder.includes(x.key)).key;\r

  \  let rumor = firstCond(items, x => !plorder.includes(x.key));\r

  \  if (nundef(receiver) || nundef(rumor)) {\r

  \    select_error('you must select exactly one player and one rumor
  card!');\r

  \    return;\r

  \  }\r

  \  assertion(isdef(data), 'no data for player ' + uplayer);\r

  \  rumor_update_playerdata(data, receiver, rumor);\r

  \  let playerdata_complete = rumor_playerdata_complete();\r

  \  if (playerdata_complete) {\r

  \    Z.turn = [Z.host];\r

  \    Z.stage = 105; //'next_rumors_setup_stage';\r

  \    clear_transaction();\r

  \    take_turn_fen_write();\r

  \  } else if (isEmpty(data.state.remaining)) {\r

  \    clear_transaction();\r

  \    take_turn_write();\r

  \  } else {\r

  \    add_transaction('rumorsetup');\r

  \    take_turn_write();\r

  \  }\r

  }"
process_upgrade: "function process_upgrade() {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  let n = A.selected.length;\r

  \  if (n > 2 || n == 2 && !has_farm(uplayer)) {\r

  \    select_error('too many cards selected!');\r

  \    return;\r

  \  } else if (n == 0) {\r

  \    select_error('please select hand or stall card(s) to upgrade!');\r

  \    return;\r

  \  }\r

  \  A.upgrade_cards = A.selected.map(x => A.items[x]);\r

  \  Z.stage = fen.stage = 102;\r

  \  ari_pre_action();\r

  }"
process_visit: "function process_visit() {\r

  \  alert('NOT IMPLEMENTED!');\r

  \  process_payment();\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  let obuilding = lookup(fen, item.path.split('.'));\r

  \  let parts = item.path.split('.');\r

  \  let owner = parts[1];\r

  \  if (isdef(obuilding.schweine)) {\r

  \    Z.stage = 46;\r

  \    A.building = item;\r

  \    A.obuilding = obuilding;\r

  \    A.buildingowner = owner;\r

  \    ari_pre_action();\r

  \    return;\r

  \  } else {\r

  \    let cards = item.o.items;\r

  \    let key = cards[0].rank;\r

  \    for (const c of cards) {\r

  \      if (c.rank != key) { schweine = true; schweine = c.key; face_up(c);
  break; }\r

  \    }\r

  \    if (schweine) {\r

  \      if (fen.players[owner].coins > 0) {\r

  \        fen.players[owner].coins--;\r

  \        fen.players[uplayer].coins++;\r

  \      }\r

  \      let b = lookup(fen, item.path.split('.'));\r

  \      b.schweine = schweine;\r

  \    }\r

  \    ari_history_list([\r

  \      `${uplayer} visited ${ari_get_building_type(obuilding)} of ${owner}
  resulting in ${schweine ? 'schweine' : 'ok'}
  ${ari_get_building_type(obuilding)}`,\r

  \    ], 'visit');\r

  \  }\r

  }"
processActions: "function processActions(data) {\r

  \  if (nundef(G.serverData.options)) { G.tupleGroups = null; return false;
  }\r

  \  G.tupleGroups = getTupleGroups();\r

  \  return true;\r

  }"
processCsvData: "function processCsvData(allText) {\r

  \  var numHeadings = 5;\r

  \  var allTextLines = allText.split(/\\r\\n|\\n/);\r

  \  var headings = allTextLines[0].split(',');\r

  \  numHeadings = headings.length;\r

  \  let entries = allTextLines.splice(1);\r

  \  var records = { headings: headings };\r

  \  for (const e of entries) {\r

  \    let o = {};\r

  \    let values = e.split(',');\r

  \    for (let i = 0; i < numHeadings; i++) {\r

  \      let k = headings[i];\r

  \      o[k] = values[i];\r

  \    }\r

  \    o.order = Number(last(values));\r

  \    records[o.hexcode] = o;\r

  \  }\r

  \  return records;\r

  }"
processCsvData_from_CBII: "function processCsvData_from_CBII(allText) {\r

  \  var numHeadings = 5;\r

  \  var allTextLines = allText.split(/\\r\\n|\\n/);\r

  \  var headings = allTextLines[0].split(',');\r

  \  numHeadings = headings.length;\r

  \  let entries = allTextLines.splice(1);\r

  \  var records = { headings: headings };\r

  \  var recordsByName = {};\r

  \  for (const e of entries) {\r

  \    let o = {};\r

  \    let values = e.split(',');\r

  \    for (let i = 0; i < numHeadings; i++) {\r

  \      let k = headings[i];\r

  \      o[k] = values[i];\r

  \    }\r

  \    records[o.hexcode] = o;\r

  \    recordsByName[o.annotation] = o.hexcode;\r

  \  }\r

  \  return { records: records, recordsByName: recordsByName };\r

  }"
processData: "function processData(data) {\r

  \  if (G.end) {\r

  \    stopBlinking('a_d_status');\r

  \    stopInteraction();\r

  \    clearLog();\r

  \  }\r

  \  S.gameInProgress = true;\r

  \  G.serverData = data;\r

  \  G.phase = G.serverData.phase;\r

  \  processTable(data);\r

  \  processPlayers(data);\r

  \  if (!S_useSimpleCode) updateCollections();\r

  \  processLog(data);\r

  \  if (processEnd(data)) return;\r

  \  if (!processActions(data)) { processWaitingFor(); }\r

  }"
processEnd: "function processEnd(data) {\r

  \  G.end = data.end;\r

  \  if (G.end) {\r

  \    if (G.signals.receivedEndMessage) delete
  G.signals.receivedEndMessage;\r

  \    else socketEmitMessage({ type: 'end', data: G.player });\r

  \    setAutoplayFunctionForMode();\r

  \  }\r

  \  return G.end;\r

  }"
processLocOids: "function processLocOids(cycle, max_cycles, isCyclic, R) {\r

  \  if (isEmpty(cycle)) return;\r

  \  let cycles = 0;\r

  \  let locOids = cycle;\r

  \  if (isCyclic) {\r

  \    let i = 0; let top = null;\r

  \    while (isEmpty(top)) {\r

  \      let oid = cycle[i];\r

  \      top = einhaengen(oid, R.getO(oid), R);\r

  \      if (!isEmpty(top)) break;\r

  \      i += 1; if (i > cycle.length - 1) break;\r

  \    }\r

  \    if (i > cycle.length - 1) {\r

  \      return;\r

  \    }\r

  \    locOids = arrRotate(cycle, i);\r

  \  }\r

  \  while (true) {\r

  \    cycles += 1;\r

  \    if (cycles > max_cycles) {\r

  \      return;\r

  \    }\r

  \    let changed = false;\r

  \    for (const oid of locOids) {\r

  \      let top = einhaengen(oid, R.getO(oid), R);\r

  \      if (!isEmpty(top)) {\r

  \        changed = true;\r

  \      }\r

  \    }\r

  \    if (!changed) { break; }\r

  \  }\r

  }"
processLog: "function processLog(data) {\r

  \  if (!G.log) G.log = {};\r

  \  let pl = G.player;\r

  \  if (!G.log[pl]) G.log[pl] = {};\r

  \  let dict = G.log[pl];\r

  \  G.logUpdated = [];\r

  \  if (isdef(data.log)) {\r

  \    for (const logEntry of data.log) {\r

  \      let key = '' + logCounter + '_' + logEntry.line.map(x => isSimple(x)
  ? x : x.val).join(' ');\r

  \      logCounter += 1;\r

  \      if (dict[key]) continue;\r

  \      dict[key] = logEntry;\r

  \      G.logUpdated.push(key);\r

  \    }\r

  \  }\r

  }"
processMessage: "function processMessage(msg) {\r

  \  console.log('*** processMessage *** message is:\\n', msg);\r

  \  let omsg = tryConvertToJSON(msg);\r

  \  if (omsg) {\r

  \    let msgType = omsg.type;\r

  \    console.log('got message', msgType, omsg);\r

  \    if (omsg.type == 'gc') {\r

  \      S.gameConfig = omsg.data;\r

  \      addMessage('updated game configuration!');\r

  \    } else if (omsg.type == 'started') {\r

  \      addMessage(omsg.data);\r

  \      if (iAmInGame() && !iAmStarter()) {\r

  \        console.log('I,', USERNAME, 'am in the game!!!!!')\r

  \        _startNewGame('joiner');\r

  \      }\r

  \    } else if (omsg.type == 'poll') {\r

  \      let pl = omsg.data;\r

  \      if (isMyPlayer(pl)) {\r

  \        let uname = getUsernameForPlayer(pl);\r

  \        sendStatus(uname, [gameStep]);\r

  \      }\r

  \    } else if (omsg.type == 'end') {\r

  \      console.log('received end!!!');\r

  \      G.signals.receivedEndMessage = true;\r

  \      let pl = omsg.data;\r

  \      if (!isMyPlayer(pl)) {\r

  \        let uname = getUsernameForPlayer(pl);\r

  \        sendStatus(uname, [gameStep]);\r

  \      }\r

  \    }\r

  \    return;\r

  \  }\r

  \  addMessage(msg);\r

  \  let parts = msg.split(' ');\r

  \  if (parts.length > 3 && startsWith(parts[1], 'join')) {\r

  \    let uname = parts[0];\r

  \    let plid = parts[3].trim();\r

  \    let players = S.gameConfig.players;\r

  \    let plChosen = firstCond(players, x => x.id == plid);\r

  \    if (plChosen) {\r

  \      if (isJoinMenuOpen()) closeJoinConfig();\r

  \      plChosen.username = uname;\r

  \      if (checkGameConfigComplete() && iAmStarter()) {\r

  \        _startNewGame('starter');\r

  \      }\r

  \    }\r

  \  }\r

  }"
processPlayerChange: "function processPlayerChange() {\r

  \  if (isdef(G.serverData.end)) return;\r

  \  let players = G.serverData.players;\r

  \  let player = null;\r

  \  for (const plid in players) {\r

  \    let pl = players[plid];\r

  \    if (pl.obj_type == 'GamePlayer') {\r

  \      player = plid;\r

  \      break;\r

  \    }\r

  \  }\r

  \  if (!player) {\r

  \    error('NO GamePlayer obj_type in G.serverData.players!!!!!!!!!!!!!');\r

  \  }\r

  \  if (player != G.player) {\r

  \    G.player = player;\r

  \    G.playerChanged = true;\r

  \    setBackgroundToPlayerColor();\r

  \  } else {\r

  \    delete G.playerChanged;\r

  \  }\r

  }"
processPlayers: "function processPlayers(data) {\r

  \  if (!S.players) _initPlayers();\r

  \  G.playersCreated = [];\r

  \  G.playersRemoved = [];\r

  \  G.playersUpdated = {};\r

  \  G.previousPlayer = G.player;\r

  \  let canProceed = false;\r

  \  delete G.playerChanged;\r

  \  if (data.players) {\r

  \    let plkeys = union(Object.keys(G.players),
  Object.keys(data.players));\r

  \    for (id of plkeys) {\r

  \      let pl_new = id in data.players ? data.players[id] : null;\r

  \      let pl_old = id in G.players ? G.players[id] : null;\r

  \      let changes = propDiffSimple(pl_old, pl_new);\r

  \      if (changes.hasChanged) {\r

  \        G.playersUpdated[id] = changes;\r

  \        if (nundef(pl_old)) {\r

  \          G.playersCreated.push(id);\r

  \        } else if (nundef(pl_new)) {\r

  \          G.playersRemoved.push(id);\r

  \        }\r

  \      }\r

  \      if (pl_new.obj_type == 'GamePlayer') {\r

  \        if (id != G.previousPlayer) G.playerChanged = true;\r

  \        if (nundef(G.player) || isMyPlayer(id) || G.player == id ||
  isMyPlayer(G.previousPlayer) && isFrontAIPlayer(id)) {\r

  \          G.player = id;\r

  \          G.playerIndex = S.players[id].index;\r

  \          canProceed = true;\r

  \        } else {\r

  \        }\r

  \      }\r

  \    }\r

  \    G.players = data.players;\r

  \    G.playersAugmented = jsCopy(G.players);\r

  \    for (const pl in G.players) {\r

  \      G.playersAugmented[pl].color = S.players[pl].color;\r

  \      G.playersAugmented[pl].altName = S.players[pl].altName;\r

  \      G.playersAugmented[pl].id = pl;\r

  \      G.playersAugmented[pl].index = S.players[pl].index;\r

  \      G.playersAugmented[pl].username = S.players[pl].username;\r

  \      G.playersAugmented[pl].playerType = S.players[pl].playerType;\r

  \      G.playersAugmented[pl].agentType = S.players[pl].agentType;\r

  \    }\r

  \  }\r

  \  return canProceed;\r

  }"
processServerdata: "function processServerdata(obj, cmd) {\r

  \  if (isdef(Serverdata.table)) Serverdata.prevtable =
  jsCopy(Serverdata.table);\r

  \  if (isdef(obj.playerdata)) {\r

  \    let old_playerdata = valf(Serverdata.playerdata, []);\r

  \    let di = list2dict(old_playerdata, 'name');\r

  \    Serverdata.playerdata = if_stringified(obj.playerdata);\r

  \    Serverdata.playerdata_changed_for = [];\r

  \    for (const o of Serverdata.playerdata) {\r

  \      let old = di[o.name];\r

  \      o.state = isEmpty(o.state) ? '' : if_stringified(o.state);\r

  \      let changed = nundef(old) ? true : !simpleCompare(old, o);\r

  \      if (changed) {\r

  \        Serverdata.playerdata_changed_for.push(o.name);\r

  \      }\r

  \    }\r

  \  } else if (isdef(Serverdata.playerdata)) {\r

  \    Serverdata.playerdata_changed_for = Serverdata.playerdata.map(x =>
  x.name);\r

  \    Serverdata.playerdata = [];\r

  \  } else Serverdata.playerdata_changed_for = [];\r

  \  for (const k in obj) {\r

  \    if (k == 'tables') Serverdata.tables = obj.tables.map(x =>
  unpack_table(x));\r

  \    else if (k == 'table') { Serverdata.table = unpack_table(obj.table);
  }\r

  \    else if (k == 'users') Serverdata[k] = obj[k];\r

  \    else if (k == 'playerdata') continue;\r

  \    else if (cmd != 'assets') Serverdata[k] = obj[k];\r

  \  }\r

  \  if (isdef(obj.table)) {\r

  \    assertion(isdef(Serverdata.table) && obj.table.id ==
  Serverdata.table.id, 'table NOT in Serverdata or table id mismatch');\r

  \    let i = Serverdata.tables.findIndex(x => x.id == obj.table.id);\r

  \    if (i != -1) { Serverdata.tables[i] = Serverdata.table; } else
  Serverdata.tables.push(Serverdata.table);\r

  \  }\r

  \  else if (isdef(Serverdata.table)) {\r

  \    let t = Serverdata.tables.find(x => x.id == Serverdata.table.id);\r

  \    if (nundef(t)) delete Serverdata.table;\r

  \  }\r

  }"
processStatus: "function processStatus() {\r

  \  if (isdef(G.serverData.status)) {\r

  \    let msg = G.serverData.status;\r

  \    if (Array.isArray(msg)) {\r

  \      msg = msg[0];\r

  \    }\r

  \    if (typeof msg == 'object') msg = msg.line;\r

  \    if (Array.isArray(msg)) msg = msg.join('');\r

  \    msg = G.players[G.player].name + ', ' + msg;\r

  \    setStatus(msg);\r

  \  }\r

  }"
processTable: "function processTable(data) {\r

  \  if (!G.table) G.table = {};\r

  \  G.tableCreated = [];\r

  \  G.tableRemoved = [];\r

  \  G.tableUpdated = {};\r

  \  if (data.table) {\r

  \    let allkeys = union(Object.keys(G.table), Object.keys(data.table));\r

  \    for (id of allkeys) {\r

  \      let o_new = id in data.table ? data.table[id] : null;\r

  \      let o_old = id in G.table ? G.table[id] : null;\r

  \      let changes = propDiffSimple(o_old, o_new);\r

  \      if (changes.hasChanged) {\r

  \        G.tableUpdated[id] = changes;\r

  \        if (nundef(o_old)) {\r

  \          G.tableCreated.push(id);\r

  \        } else if (nundef(o_new)) {\r

  \          G.tableRemoved.push(id);\r

  \        }\r

  \      }\r

  \    }\r

  \    G.table = data.table;\r

  \  }\r

  }"
processWaitingFor: "function processWaitingFor() {\r

  \  if (nundef(G.serverData.waiting_for)) {\r

  \    error('No options AND No waiting_for data!!!!!!!!!!');\r

  \    return;\r

  \  }\r

  }"
PROMOTED: function PROMOTED(m) { return (((m) >> 20) & 0xF); }
prompt: "function prompt() {\r

  \  QuestionCounter += 1;\r

  \  showStats();\r

  \  G.trialNumber = 0;\r

  \  G.instance.prompt();\r

  }"
promptML: "function promptML() {\r

  \  showPictures(false, () => fleetingMessage('just enter the missing
  letter!'));\r

  \  setGoal();\r

  \  showInstruction(bestWord, currentLanguage == 'E' ? 'complete' :
  \"ergänze\", dTitle, true);\r

  \  mLinebreak(dTable);\r

  \  let style = { margin: 6, fg: 'white', display: 'inline', bg:
  'transparent', align: 'center', border: 'transparent', outline: 'none',
  family: 'Consolas', fz: 80 };\r

  \  let d = createLetterInputs(bestWord.toUpperCase(), dTable, style);\r

  \  let indices = getIndicesCondi(bestWord, (x, i) => isAlphaNum(x) && i <=
  MaxPosMissing);\r

  \  nMissing = Math.min(indices.length, NumMissingLetters);\r

  \  let ilist = choose(indices, nMissing); sortNumbers(ilist);\r

  \  for (const idx of ilist) {\r

  \    let inp = d.children[idx];\r

  \    inp.innerHTML = '_';\r

  \    mClass(inp, 'blink');\r

  \    inputs.push({ letter: bestWord[idx].toUpperCase(), div: inp, index: idx
  });\r

  \  }\r

  \  mLinebreak(dTable);\r

  \  showFleetingMessage(composeFleetingMessage(), 3000);\r

  \  return 10;\r

  }"
promptNextTrial: "function promptNextTrial() {\r

  \  QuestionCounter += 1;\r

  \  clearTimeout(TOTrial);\r

  \  uiActivated = false;\r

  \  let delay = G.instance.trialPrompt(G.trialNumber);\r

  \  TOMain = setTimeout(activateUi, delay);\r

  }"
promptSP: "function promptSP() {\r

  \  showPictures(true, () => mBy(defaultFocusElement).focus());\r

  \  setGoal();\r

  \  showInstruction(bestWord, currentLanguage == 'E' ? 'say:' : \"sage: \",
  dTitle);\r

  \  mLinebreak(dTable);\r

  \  MicrophoneUi = mMicrophone(dTable);\r

  \  return 10;\r

  }"
promptSPA: "function promptSPA() {\r

  \  showPictures(true, () => mBy(defaultFocusElement).focus(), undefined,
  [currentKeys[NextPictureIndex]]);\r

  \  NextPictureIndex += 1;\r

  \  setGoal();\r

  \  showInstruction(bestWord, currentLanguage == 'E' ? 'say:' : \"sage: \",
  dTitle);\r

  \  mLinebreak(dTable);\r

  \  MicrophoneUi = mMicrophone(dTable);\r

  \  return 10;\r

  }"
promptStart: "function promptStart() {\r

  \  beforeActivationUI();\r

  \  isINTERRUPT = false;\r

  \  dTable = dLineTableMiddle;\r

  \  dTitle = dLineTitleMiddle;\r

  \  if (nundef(dTable)) return;\r

  \  clearTable();\r

  \  let delay = GFUNC[currentGame].prompt();\r

  \  setTimeout(activateUi, delay);\r

  }"
promptTC: "function promptTC() {\r

  \  let colors = choose(SIMPLE_COLORS, NumColors);\r

  \  showPictures(false, evaluate, colors);\r

  \  setGoal(randomNumber(0, NumPics * colors.length - 1));\r

  \  Goal.correctionPhrase = Goal.shade + ' ' + Goal.label;\r

  \  let spoken = `click the ${Goal.shade} ${bestWord}`;\r

  \  showInstruction(bestWord, `click the <span
  style='color:${Goal.shade}'>${Goal.shade.toUpperCase()}</span>`,\r

  \    dTitle, true, spoken);\r

  \  return 10;\r

  }"
promptTP: "function promptTP() {\r

  \  showPictures(false, evaluate);\r

  \  setGoal();\r

  \  showInstruction(bestWord, 'click', dTitle, true);\r

  \  return 10;\r

  }"
promptWP: "function promptWP() {\r

  \  showPictures(true, () => mBy(defaultFocusElement).focus());\r

  \  setGoal();\r

  \  showInstruction(bestWord, currentLanguage == 'E' ? 'type' : \"schreib'\",
  dTitle, true);\r

  \  mLinebreak(dTable);\r

  \  inputBox = addNthInputElement(dTable, trialNumber);\r

  \  defaultFocusElement = inputBox.id;\r

  \  return 10;\r

  }"
propDiff: "function propDiff(o_old, o_new) {\r

  \  let onlyOld = [];\r

  \  let onlyNew = [];\r

  \  let propChange = [];\r

  \  let summary = [];\r

  \  let hasChanged = false;\r

  \  for (const prop in o_new) {\r

  \    if (o_new.hasOwnProperty(prop)) {\r

  \      if (!(prop in o_old)) {\r

  \        addIf_dep(prop, onlyNew);\r

  \        addIf_dep(prop, summary);\r

  \        hasChanged = true;\r

  \      } else if (o_new[prop] != o_old[prop]) {\r

  \        if (prop == 'visible') {\r

  \          let visOld = getVisibleSet(o_old);\r

  \          let visNew = getVisibleSet(o_new);\r

  \          if (sameList(visOld, visNew)) {\r

  \            continue;\r

  \          }\r

  \        } else if (typeof o_new[prop] == 'object') {\r

  \          if (hasSameProps(o_new[prop], o_old[prop])) {\r

  \            continue;\r

  \          }\r

  \        }\r

  \        addIf_dep({ prop: prop, old: o_old[prop], new: o_new[prop] },
  propChange);\r

  \        addIf_dep(prop, summary);\r

  \        hasChanged = true;\r

  \      }\r

  \    }\r

  \  }\r

  \  for (const prop in o_old) {\r

  \    if (o_old.hasOwnProperty(prop)) {\r

  \      if (!(prop in o_new)) {\r

  \        addIf_dep(prop, onlyOld);\r

  \        addIf_dep(prop, summary);\r

  \        hasChanged = true;\r

  \      }\r

  \    }\r

  \  }\r

  \  return { onlyOld: onlyOld, onlyNew: onlyNew, propChange: propChange,
  summary: summary, hasChanged: hasChanged };\r

  }"
propDiffFast_dep: "function propDiffFast_dep(o_old, o_new, deepCheck = false,
  optInOut = {}) {\r

  \  let onlyOld = [];\r

  \  let onlyNew = [];\r

  \  let propChange = [];\r

  \  let summary = [];\r

  \  let hasChanged = false;\r

  \  for (const prop in o_new) {\r

  \    if (fundef(optInOut[prop])) continue;\r

  \    let nprop = o_new[prop];\r

  \    let oprop = o_old[prop];\r

  \    if (isdef(nprop)) {\r

  \      let nval = o_new[prop];\r

  \      if (nundef(oprop)) {\r

  \        addIf(onlyNew, prop);\r

  \        addIf(summary, prop);\r

  \        hasChanged = true;\r

  \      } else if (nval != o_old[prop]) {\r

  \        if (!isSimple(nval)) {\r

  \          if (!deepCheck) continue;\r

  \          if (JSON.stringify(nval) == JSON.stringify(o_old[prop])) {\r

  \            console.log(JSON.stringify(nval),
  JSON.stringify(o_old[prop]));\r

  \            continue;\r

  \          }\r

  \        }\r

  \        addIf(propChange, { prop: prop, old: o_old[prop], new: o_new[prop]
  });\r

  \        addIf(summary, prop);\r

  \        hasChanged = true;\r

  \      }\r

  \    }\r

  \  }\r

  \  for (const prop in o_old) {\r

  \    if (fundef(optInOut[prop])) continue;\r

  \    if (nundef(o_new[prop])) {\r

  \      addIf(onlyOld, prop);\r

  \      addIf(summary, prop);\r

  \      hasChanged = true;\r

  \    }\r

  \  }\r

  \  return { onlyOld: onlyOld, onlyNew: onlyNew, propChange: propChange,
  summary: summary, hasChanged: hasChanged };\r

  }"
propDiffGSM_dep: "function propDiffGSM_dep(o_old, o_new, deepCheck = false,
  optInOut = {}) {\r

  \  let onlyOld = [];\r

  \  let onlyNew = [];\r

  \  let propChange = [];\r

  \  let summary = [];\r

  \  let hasChanged = false;\r

  \  for (const prop in o_new) {\r

  \    if (fundef(optInOut[prop])) continue;\r

  \    let nprop = o_new[prop];\r

  \    let oprop = o_old[prop];\r

  \    if (isdef(nprop)) {\r

  \      let nval = o_new[prop];\r

  \      if (nundef(oprop)) {\r

  \        addIf(onlyNew, prop);\r

  \        addIf(summary, prop);\r

  \        hasChanged = true;\r

  \      } else if (nval != o_old[prop]) {\r

  \        if (!deepCheck && !isSimple(nval)) continue;\r

  \        if (prop == 'visible') {\r

  \          console.log('visibility', nval);\r

  \          let visOld = getVisibleList(o_old);\r

  \          let visNew = getVisibleList(o_new);\r

  \          if (sameList(visOld, visNew)) continue;\r

  \        } else if (typeof nval == 'object' && sameProps(nval, o_old[prop]))
  {\r

  \          continue;\r

  \        } else if (isList(nval) && sameList(nval, o_old[prop])) {\r

  \          continue;\r

  \        }\r

  \        addIf(propChange, { prop: prop, old: o_old[prop], new: o_new[prop]
  });\r

  \        addIf(summary, prop);\r

  \        hasChanged = true;\r

  \      }\r

  \    }\r

  \  }\r

  \  for (const prop in o_old) {\r

  \    if (fundef(optInOut[prop])) continue;\r

  \    if (nundef(o_new[prop])) {\r

  \      addIf(onlyOld, prop);\r

  \      addIf(summary, prop);\r

  \      hasChanged = true;\r

  \    }\r

  \  }\r

  \  return { onlyOld: onlyOld, onlyNew: onlyNew, propChange: propChange,
  summary: summary, hasChanged: hasChanged };\r

  }"
propDiffPlus_dep: "function propDiffPlus_dep(o_old, o_new, deepCheck = false,
  optInOut = {}) {\r

  \  let onlyOld = [];\r

  \  let onlyNew = [];\r

  \  let propChange = [];\r

  \  let summary = [];\r

  \  let hasChanged = false;\r

  \  for (const prop in o_new) {\r

  \    if (fundef(optInOut[prop])) continue;\r

  \    let nprop = o_new[prop];\r

  \    let oprop = o_old[prop];\r

  \    if (isdef(nprop)) {\r

  \      let nval = o_new[prop];\r

  \      if (nundef(oprop)) {\r

  \        addIf(onlyNew, prop);\r

  \        addIf(summary, prop);\r

  \        hasChanged = true;\r

  \      } else if (nval != o_old[prop]) {\r

  \        if (!deepCheck && !isSimple(nval)) continue;\r

  \        if (typeof nval == 'object' && hasSameProps(nval, o_old[prop])) {\r

  \          continue;\r

  \        } else if (isList(nval) && sameList(nval, o_old[prop])) {\r

  \          continue;\r

  \        }\r

  \        addIf(propChange, { prop: prop, old: o_old[prop], new: o_new[prop]
  });\r

  \        addIf(summary, prop);\r

  \        hasChanged = true;\r

  \      }\r

  \    }\r

  \  }\r

  \  for (const prop in o_old) {\r

  \    if (fundef(optInOut[prop])) continue;\r

  \    if (nundef(o_new[prop])) {\r

  \      addIf(onlyOld, prop);\r

  \      addIf(summary, prop);\r

  \      hasChanged = true;\r

  \    }\r

  \  }\r

  \  return { onlyOld: onlyOld, onlyNew: onlyNew, propChange: propChange,
  summary: summary, hasChanged: hasChanged };\r

  }"
propDiffSimple: "function propDiffSimple(o_old, o_new, props = null) {\r

  \  let onlyOld = [];\r

  \  let onlyNew = [];\r

  \  let propChange = [];\r

  \  let summary = [];\r

  \  let hasChanged = false;\r

  \  if (!o_old) {\r

  \    return { onlyOld: [], onlyNew: Object.keys(o_new), propChange: [],
  summary: Object.keys(o_new), hasChanged: true };\r

  \  } else if (!o_new) {\r

  \    return { onlyOld: Object.keys(o_old), onlyNew: [], propChange: [],
  summary: Object.keys(o_old), hasChanged: true };\r

  \  }\r

  \  if (nundef(props)) props = union(Object.keys(o_old),
  Object.keys(o_new));\r

  \  for (const prop of props) {\r

  \    let nval = o_new[prop];\r

  \    let oval = o_old[prop];\r

  \    if (isdef(nval) && isdef(oval)) {\r

  \      if (nval == oval) continue;\r

  \      else if (typeof nval == 'object' && sameStringify(nval, oval)) {\r

  \        continue;\r

  \      } else if (isList(nval) && sameList(nval, oval)) {\r

  \        continue;\r

  \      }\r

  \      addIf(propChange, { prop: prop, old: oval, new: nval });\r

  \      addIf(summary, prop);\r

  \      hasChanged = true;\r

  \    } else if (nundef(oval)) {\r

  \      addIf(onlyNew, prop);\r

  \      addIf(summary, prop);\r

  \      hasChanged = true;\r

  \    } else if (nundef(nval)) {\r

  \      addIf(onlyOld, prop);\r

  \      addIf(summary, prop);\r

  \      hasChanged = true;\r

  \    }\r

  \  }\r

  \  return { onlyOld: onlyOld, onlyNew: onlyNew, propChange: propChange,
  summary: summary, hasChanged: hasChanged };\r

  }"
propertyGiver: "function propertyGiver(o, prop, setter, getter) {\r

  \  Object.defineProperty(o, prop, {\r

  \    get: function () { return getter(); },\r

  \    set: function (val) { setter(val); }\r

  \  });\r

  }"
propertyGiverW0: "function propertyGiverW0(o, prop, setter) {\r

  \  Object.defineProperty(o, prop, {\r

  \    get: function () { return this.val; },\r

  \    set: function (val) { setter(val); }\r

  \  });\r

  }"
PrSq: "function PrSq(sq) {\r

  \  var file = FilesBrd[sq];\r

  \  var rank = RanksBrd[sq];\r

  \  var sqStr = String.fromCharCode('a'.charCodeAt() + file) +
  String.fromCharCode('1'.charCodeAt() + rank);\r

  \  return sqStr;\r

  }"
pSBC: "function pSBC(p, c0, c1, l) {\r

  \  let r,\r

  \    g,\r

  \    b,\r

  \    P,\r

  \    f,\r

  \    t,\r

  \    h,\r

  \    i = parseInt,\r

  \    m = Math.round,\r

  \    a = typeof c1 == 'string';\r

  \  if (typeof p != 'number' || p < -1 || p > 1 || typeof c0 != 'string' ||
  (c0[0] != 'r' && c0[0] != '#') || (c1 && !a)) return null;\r

  \  if (!this.pSBCr)\r

  \    this.pSBCr = d => {\r

  \      let n = d.length,\r

  \        x = {};\r

  \      if (n > 9) {\r

  \        ([r, g, b, a] = d = d.split(',')), (n = d.length);\r

  \        if (n < 3 || n > 4) return null;\r

  \        (x.r = i(r[3] == 'a' ? r.slice(5) : r.slice(4))), (x.g = i(g)),
  (x.b = i(b)), (x.a = a ? parseFloat(a) : -1);\r

  \      } else {\r

  \        if (n == 8 || n == 6 || n < 4) return null;\r

  \        if (n < 6) d = '#' + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (n >
  4 ? d[4] + d[4] : '');\r

  \        d = i(d.slice(1), 16);\r

  \        if (n == 9 || n == 5) (x.r = (d >> 24) & 255), (x.g = (d >> 16) &
  255), (x.b = (d >> 8) & 255), (x.a = m((d & 255) / 0.255) / 1000);\r

  \        else (x.r = d >> 16), (x.g = (d >> 8) & 255), (x.b = d & 255), (x.a
  = -1);\r

  \      }\r

  \      return x;\r

  \    };\r

  \  (h = c0.length > 9),\r

  \    (h = a ? (c1.length > 9 ? true : c1 == 'c' ? !h : false) : h),\r

  \    (f = pSBCr(c0)),\r

  \    (P = p < 0),\r

  \    (t = c1 && c1 != 'c' ? pSBCr(c1) : P ? { r: 0, g: 0, b: 0, a: -1 } : {
  r: 255, g: 255, b: 255, a: -1 }),\r

  \    (p = P ? p * -1 : p),\r

  \    (P = 1 - p);\r

  \  if (!f || !t) return null;\r

  \  if (l) (r = m(P * f.r + p * t.r)), (g = m(P * f.g + p * t.g)), (b = m(P *
  f.b + p * t.b));\r

  \  else (r = m((P * f.r ** 2 + p * t.r ** 2) ** 0.5)), (g = m((P * f.g ** 2
  + p * t.g ** 2) ** 0.5)), (b = m((P * f.b ** 2 + p * t.b ** 2) ** 0.5));\r

  \  (a = f.a), (t = t.a), (f = a >= 0 || t >= 0), (a = f ? (a < 0 ? t : t < 0
  ? a : a * P + t * p) : 0);\r

  \  if (h) return 'rgb' + (f ? 'a(' : '(') + r + ',' + g + ',' + b + (f ? ','
  + m(a * 1000) / 1000 : '') + ')';\r

  \  else return '#' + (4294967296 + r * 16777216 + g * 65536 + b * 256 + (f ?
  m(a * 255) : 0)).toString(16).slice(1, f ? undefined : -2);\r

  }"
pTest0: "function pTest0() {\r

  \  let state = DB.tables.t0;\r

  \  console.log('state', state);\r

  \  let dMiddle = makePage();\r

  \  mStyle(dMiddle, { padding: 20, overflow: 'auto' });\r

  \  mCenterCenterFlex(dMiddle)\r

  \  let dTable = mDiv100(dMiddle, { wmax: 800, box: true, rounding: 12 });\r

  \  dTable.style.overflow = 'auto';\r

  \  console.log('dTable', dTable)\r

  \  present0(dTable, state);\r

  \  return;\r

  \  mCenterCenterFlex(dTable);\r

  \  let d1 = mDiv(dTable);\r

  \  let d2 = present_structured1(d1, state);\r

  }"
pureId: function pureId(id) { return id.substring(4) }
purge: "function purge(elem) {\r

  \  var a = elem.attributes, i, l, n;\r

  \  if (a) {\r

  \    for (i = a.length - 1; i >= 0; i -= 1) {\r

  \      n = a[i].name;\r

  \      if (typeof elem[n] === 'function') {\r

  \        elem[n] = null;\r

  \      }\r

  \    }\r

  \  }\r

  \  a = elem.childNodes;\r

  \  if (a) {\r

  \    l = a.length;\r

  \    for (i = a.length - 1; i >= 0; i -= 1) {\r

  \      purge(elem.childNodes[i]);\r

  \    }\r

  \  }\r

  \  elem.remove();\r

  }"
push_hist: "function push_hist() { let o = { i: G.i, items: G.selist.map(x =>
  iStrip(x)) }; G.hist.push(o); }"
pVal: function pVal(dParent, val) { let d = pPanel(dParent); d.innerHTML = val;
  return d; }
pxToNumber: "function pxToNumber(s) {\r

  \  return (Number(s.substring(0, s.length - 2)));\r

  }"
q_mirror_fen: "function q_mirror_fen() {\r

  \  let fen = Z.fen;\r

  \  for (const prop of arguments) {\r

  \    let ui = UI[prop];\r

  \    fen[prop] = ui.list;\r

  \  }\r

  \  qanim();\r

  }"
q_move_topmost: "function q_move_topmost(uideck, uito) {\r

  \  let topmost = pop_top(uideck);\r

  \  let dfrom = iDiv(topmost);\r

  \  dfrom.remove();\r

  \  dfrom.style.position = 'static';\r

  \  dfrom.style.zIndex = 0;\r

  \  uito.items.push(topmost);\r

  \  uito.list = uito.items.map(x => x.key);\r

  \  mAppend(uito.cardcontainer, dfrom);\r

  \  qanim();\r

  }"
q0: "function q0() {\r

  \  let list = dict2list(EMO.emoscale, 'k').map(x => ({ name: x.k, key:
  x.key, color: x.color, text: x.list }));\r

  \  show_prompt('how are you feeling right now?', list, a0);\r

  }"
q1: "function q1() {\r

  \  let list = [];\r

  \  for (const item of G.selist) {\r

  \    let alpha = .4;\r

  \    for (const w of item.text.split(',')) {\r

  \      let o = { name: w.trim(), key: item.key, color:
  colorTrans(item.color, alpha), text: w.trim() };\r

  \      alpha += .2;\r

  \      list.push(o);\r

  \    }\r

  \  }\r

  \  show_prompt('select the 2 dominant feelings', list, a1);\r

  }"
q2: "function q2() {\r

  \  console.log('G', G)\r

  \  const transitions = {\r

  \    worried: {\r

  \      money: {},\r

  \      time: {},\r

  \      past: {},\r

  \      future: {},\r

  \      material: {},\r

  \    },\r

  \  };\r

  \  let step1 = ''\r

  }"
qanim: "function qanim() {\r

  \  if (!isEmpty(DA.qanim)) {\r

  \    let [f, params] = DA.qanim.shift();\r

  \    f(...params);\r

  \  }\r

  }"
qanim_flip: "function qanim_flip(card, ms = 400) {\r

  \  mAnimate(iDiv(card), 'transform', [`scale(1,1)`, `scale(0,1)`],\r

  \    () => {\r

  \      if (card.faceUp) face_down(card); else face_up(card);\r

  \      mAnimate(iDiv(card), 'transform', [`scale(0,1)`, `scale(1,1)`],
  qanim, ms / 2, 'ease-in', 0, 'both');\r

  \    },\r

  \    ms / 2, 'ease-out', 0, 'both');\r

  }"
qanim_flip_topmost: "function qanim_flip_topmost(deck, ms = 400) {\r

  \  qanim_flip(deck.get_topcard(), ms);\r

  }"
qanim_move: "function qanim_move(card, uifrom, uito, ms = 400) {\r

  \  let dfrom = iDiv(card);\r

  \  let dto = isEmpty(uito.items) ? uito.cardcontainer :
  iDiv(arrLast(uito.items));\r

  \  let dParent = find_common_ancestor(dfrom, dto);\r

  \  let rfrom = getRect(dfrom, dParent);\r

  \  let rto = getRect(dto, dParent);\r

  \  dfrom.style.zIndex = 100;\r

  \  let [offx, offy] = isEmpty(uito.items) ? [4, 4] : [card.w, 0];\r

  \  let a = mAnimate(dfrom, 'transform',\r

  \    [`translate(${offx + rto.l - rfrom.l}px, ${offy + rto.t -
  rfrom.t}px)`], qanim,\r

  \    ms, 'ease');\r

  }"
qanim_move_topmost: "function qanim_move_topmost(uideck, uito, ms = 400) {\r

  \  let card = uideck.get_topcard();\r

  \  qanim_move(card, uideck, uito, ms);\r

  }"
qOptions: "function qOptions(bg = BLUEGREEN) {\r

  \  let options = {\r

  \    bCaption: '☰',\r

  \    bStyles: { fz: 30, margin: 4 },\r

  \    menuStyles: { bg: wblack, alpha: .65 },\r

  \    sbStyles: { bg: wblack, alpha: .25 },\r

  \    divStyles: { bg: wwhite, alpha: .25 },\r

  \    innerStyles: {},\r

  \    outerStyles: { bg: bg },\r

  \  };\r

  \  return options;\r

  }"
qPageMST: "function qPageMST(dParent, options) {\r

  \  mStyle(dParent, { h: '100%', w: '100%', box: true, bg: 'silver' });\r

  \  setRect(dParent);\r

  \  let item = iMenuSidebarDiv(dParent, options);\r

  \  return { item: item, sidebar: iGetl(item, 'sidebar'), dContent:
  iGetl(item, 'dContent'), dMenu: iGetl(item, 'dMenu') };\r

  }"
QReset: "function QReset() {\r

  \  console.log('...', getFunctionCallerName());\r

  \  clearTimeout(TOQ);\r

  \  clearTimeout(TOQRunner);\r

  \  Q = [];\r

  \  AkQ = [];\r

  }"
QRunner: "function QRunner() {\r

  \  if (QCancelAutoreset) { QRunnerRunning = false; QCancelAutoreset = false;
  restartQ(); }\r

  \  else if (isEmpty(Q)) TOQRunner = setTimeout(QRunner, 1000);\r

  \  else _runQ(QRunner);\r

  }"
QStop: "function QStop() {\r

  \  console.log('...', getFunctionCallerName());\r

  \  QCancelAutoreset = true;\r

  }"
qTable: "function qTable(dParent, options) {\r

  \  mStyleX(dParent, { h: '100%', w: '100%', box: true, bg: 'silver' });\r

  \  setRect(dParent);\r

  \  let item = iMenuSidebarDiv(dParent, options);\r

  \  return { item: item, sidebar: iGetl(item, 'sidebar'), dContent:
  iGetl(item, 'dContent'), dMenu: iGetl(item, 'dMenu') };\r

  }"
quadCenters: "function quadCenters(rows, cols, wCell, hCell) {\r

  \  let offX = wCell / 2, offY = hCell / 2;\r

  \  let centers = [];\r

  \  let x = 0; y = 0;\r

  \  for (let i = 0; i < rows; i++) {\r

  \    for (let j = 0; j < cols; j++) {\r

  \      let center = { x: x + offX, y: y + offY };\r

  \      centers.push(center);\r

  \      x += wCell;\r

  \    }\r

  \    y += hCell; x = 0;\r

  \  }\r

  \  return [centers, wCell * cols, hCell * rows];\r

  }"
quadGrid: "function quadGrid(soDict, loc, condList) {\r

  \  let [idBoard, sBoard] = findMatch(soDict, condList);\r

  \  return _quadGrid(loc, idBoard, sBoard, soDict);\r

  }"
quadGrid_old: "function quadGrid_old(soDict, loc, sBoard, idBoard) {\r

  \  return _quadGrid(loc, idBoard, sBoard, soDict);\r

  }"
queryINSERT: "function queryINSERT(data) {\r

  \  let newData = {};\r

  \  for (const k in data) {\r

  \    let val = data[k];\r

  \    if (!isNumber(val)) newData[k] = \"'\" + val + \"'\"; else newData[k] =
  val;\r

  \  }\r

  \  let q = 'INSERT INTO users (' + Object.keys(newData).join() + ') VALUES
  (' + Object.values(newData).join(',') + ')';\r

  \  return q;\r

  }"
querySelectUser: "function querySelectUser(data) {\r

  \  let newData = {};\r

  \  for (const k in data) {\r

  \    let val = data[k];\r

  \    if (!isNumber(val)) newData[k] = \"'\" + val + \"'\"; else newData[k] =
  val;\r

  \  }\r

  \  let q = 'SELECT * FROM users WHERE username = ' + newData.username;\r

  \  return q;\r

  }"
queryStringToJson: "function queryStringToJson() {\r

  \  let q = window.location.search;\r

  \  if (isEmpty(q)) return {};\r

  \  q = q.substring(1);\r

  \  let result = {};\r

  \  let parts = q.split('&');\r

  \  for (const p of parts) {\r

  \    let key = stringBefore(p, '=');\r

  \    let val = stringAfter(p, '=');\r

  \    result[key] = val;\r

  \  }\r

  \  return result;\r

  }"
question2: "function question2(ev) {\r

  \  let id = evToId(ev);\r

  \  let item = Items[id];\r

  \  console.log('item', item);\r

  \  say(`why do you feel ${item.list}???`, 'uk', show_reasons, .5, .8);\r

  }"
Quiescence: "function Quiescence(alpha, beta) {\r

  \  if ((srch_nodes & 2047) == 0) CheckUp();\r

  \  srch_nodes++;\r

  \  if (IsRepetition() || brd_fiftyMove >= 100) {\r

  \    return 0;\r

  \  }\r

  \  if (brd_ply > MAXDEPTH - 1) {\r

  \    return EvalPosition();\r

  \  }\r

  \  var Score = EvalPosition();\r

  \  if (Score >= beta) {\r

  \    return beta;\r

  \  }\r

  \  if (Score > alpha) {\r

  \    alpha = Score;\r

  \  }\r

  \  GenerateCaptures();\r

  \  var MoveNum = 0;\r

  \  var Legal = 0;\r

  \  var OldAlpha = alpha;\r

  \  var BestMove = NOMOVE;\r

  \  Score = -INFINITE;\r

  \  var PvMove = ProbePvTable();\r

  \  if (PvMove != NOMOVE) {\r

  \    for (MoveNum = brd_moveListStart[brd_ply]; MoveNum <
  brd_moveListStart[brd_ply + 1]; ++MoveNum) {\r

  \      if (brd_moveList[MoveNum] == PvMove) {\r

  \        brd_moveScores[MoveNum].score = 2000000;\r

  \        break;\r

  \      }\r

  \    }\r

  \  }\r

  \  for (MoveNum = brd_moveListStart[brd_ply]; MoveNum <
  brd_moveListStart[brd_ply + 1]; ++MoveNum) {\r

  \    PickNextMove(MoveNum);\r

  \    if (MakeMove(brd_moveList[MoveNum]) == BOOL.FALSE) {\r

  \      continue;\r

  \    }\r

  \    Legal++;\r

  \    Score = -Quiescence(-beta, -alpha);\r

  \    TakeMove();\r

  \    if (srch_stop == BOOL.TRUE) return 0;\r

  \    if (Score > alpha) {\r

  \      if (Score >= beta) {\r

  \        if (Legal == 1) {\r

  \          srch_fhf++;\r

  \        }\r

  \        srch_fh++;\r

  \        return beta;\r

  \      }\r

  \      alpha = Score;\r

  \      BestMove = brd_moveList[MoveNum];\r

  \    }\r

  \  }\r

  \  if (alpha != OldAlpha) {\r

  \    StorePvMove(BestMove);\r

  \  }\r

  \  return alpha;\r

  }"
race_check_endcondition: "function race_check_endcondition() {\r

  \  let players = get_values(Session.cur_players);\r

  \  let winners = players.filter(x => x.score >= Session.winning_score).map(x
  => x.name);\r

  \  return winners;\r

  }"
race_open_prompt: "function race_open_prompt(fen) {\r

  \  console.assert(!uiActivated, 'open_prompt_ with uiActivated ON
  !!!!!!!!!!!!!!!!!!!!!!!!!!');\r

  \  let g = update_game_values();\r

  \  clearTable(); set_background_color(g.color);\r

  \  QContextCounter += 1;\r

  \  show_game_name(g.friendly);\r

  \  show_title(g.table.friendly);\r

  \  show_level(g.level, g.maxlevel);\r

  \  if (Session.is_badges) g.level = setBadgeLevel(g.level, Session.cur_user,
  Session.cur_game, g.maxlevel);\r

  \  g.startTime = get_timestamp();\r

  \  mLinebreak(dTable, 15);\r

  \  Session.cur_funcs.prompt(g, fen);\r

  \  Selected = null;\r

  \  if (nundef(fen)) uiActivated = true;\r

  }"
race_present_table: "function race_present_table(obj) {\r

  \  console.assert(isdef(obj.table), 'present_table without
  obj.table!!!!!!!!!!!!!!');\r

  \  if (obj.table.status != 'past') {
  update_table_options_for_user(Session.cur_user, obj.table.pl_options,
  obj.table.game); }\r

  \  update_session(obj);\r

  \  let table_status = Session.cur_table.status;\r

  \  if (is_admin() && table_status == 'past') { in_game_off();
  in_game_open_prompt_off(); status_message_off(); get_games(); return; }\r

  \  if (!in_game()) { open_game_ui(); in_game_on(); }\r

  \  let d = mBy('table'); d.animate([{ opacity: 0, transform:
  'translateY(50px)' }, { opacity: 1, transform: 'translateY(0px)' },], { fill:
  'both', duration: 1000, easing: 'ease' });\r

  \  let my_status = Session.cur_me.player_status;\r

  \  let have_move = my_status == 'joined';\r

  \  if (!have_move) { if (!in_game_open_prompt())
  race_open_prompt(Session.cur_me.state); }\r

  \  else if (!in_game_open_prompt()) { race_open_prompt();
  in_game_open_prompt_on(); }\r

  \  else { uiActivated = true; }\r

  \  ui_game_stats(Session.cur_players);\r

  \  if (table_status != 'started') {\r

  \    stop_game();\r

  \    let winners = Session.winners = race_check_endcondition();\r

  \    if (!isEmpty(winners)) {\r

  \      stop_game();\r

  \      show_gameover_new(winners);\r

  \    }\r

  \  } else Session.scoring_complete = false;\r

  }"
race_set_fen: "function race_set_fen() {\r

  \  let me = Session.cur_players[Session.cur_user];\r

  \  let fen = Session.cur_funcs.fen();\r

  \  me.state = fen;\r

  }"
race_update_my_score: "function race_update_my_score(inc) {\r

  \  let me = Session.cur_me;\r

  \  me.score += inc;\r

  \  if (me.score >= Session.winning_score) me.player_status = 'done';\r

  }"
rAdd: function rAdd(dmin = -1, dmax = 1) { return x => x + dmin + Math.random()
  * (dmax - dmin); }
rAddSub: "function rAddSub(d) { return x => x + (coin() ? d : -d); }"
rAddSubRange: function rAddSubRange(d) { return x => x + (Math.random() * 2 * d - d); }
rAlphanums: function rAlphanums(n) { return
  rChoose(toLetters('0123456789abcdefghijklmnopq'), n); }
RAND_32: function RAND_32() { return (Math.floor((Math.random() * 255) + 1) <<
  23) | (Math.floor((Math.random() * 255) + 1) << 16) |
  (Math.floor((Math.random() * 255) + 1) << 8) | Math.floor((Math.random() *
  255) + 1); }
random_motto: function random_motto() { return chooseRandom(["time to play!",
  "life's good", "one game at a time!", "let's play!", "no place like home",
  "cafe landmann"]) }
randomAlphanum: "function randomAlphanum() {\r

  \  let s =
  'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r

  \  return s[randomNumber(0, s.length - 1)];\r

  }"
randomBotName: "function randomBotName() { return (coin() ? randomVowel() : '')
  + randomConsonant() + randomVowel() + 'bot'; }"
randomC52: function randomC52() { return Card52.getShortString(randomCard52()); }
randomCard52: function randomCard52() { return Card52.random(); }
randomColor: function randomColor() { return rColor(); }
randomColorDark: function randomColorDark(contrastTo) { return
  randomColorX(contrastTo, 10, 30); }
randomColorLight: function randomColorLight(contrastTo) { return randomColorX(contrastTo); }
randomColorX: "function randomColorX(contrastColor, minContrast = 25, mod = 60,
  startWheel = 0, minLum = 70, maxLum = 90, minSat = 100, maxSat = 100) {\r

  \  let hue = getContrastingHueX(contrastColor, minContrast, mod,
  startWheel);\r

  \  let sat = minSat + (maxSat - minSat) * Math.random();\r

  \  let lum = minLum + (maxLum - minLum) * Math.random();\r

  \  let result = \"hsl(\" + hue + ',' + sat + '%,' + lum + '%)';\r

  \  return result;\r

  }"
randomConsonant: function randomConsonant() { let s = 'bcdfghjklmnpqrstvwxz';
  return s[randomNumber(0, s.length - 1)]; }
randomContent: "function randomContent(type) {\r

  \  if (nundef(type)) { type = randomType(); }\r

  \  let content = window['random' + capitalize(type)]();\r

  \  if (isDict(content)) { content.type = type; } else content = { content:
  content, type: type };\r

  \  return content;\r

  }"
randomDarkColor: "function randomDarkColor() {\r

  \  let s = '#';\r

  \  for (let i = 0; i < 3; i++) {\r

  \    s += chooseRandom([0, 1, 2, 3, 4, 5, 6, 7]) + chooseRandom(['f', 'c',
  '9', '6', '3', '0']);\r

  \  }\r

  \  return s;\r

  }"
randomDigit: function randomDigit() { let s = '0123456789'; return
  s[randomNumber(0, s.length - 1)]; }
randomHexColor: "function randomHexColor() {\r

  \  let s = '#';\r

  \  for (let i = 0; i < 6; i++) {\r

  \    s += chooseRandom(['f', 'c', '9', '6', '3', '0']);\r

  \  }\r

  \  return s;\r

  }"
randomHslaColor: "function randomHslaColor(s = 100, l = 70, a = 1) {\r

  \  var hue = Math.round(Math.random() * 360);\r

  \  return hslToHslaString(hue, s, l, a);\r

  }"
randomizeNum: "function randomizeNum(n, percentUp = 25, percentDown = 25) {\r

  \  let max = n * percentUp / 100;\r

  \  let min = n * percentDown / 100;\r

  \  return randomNumber(n - min, n + max);\r

  }"
randomLetter: function randomLetter() { let s =
  'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; return
  s[randomNumber(0, s.length - 1)]; }
randomLightColor: "function randomLightColor() {\r

  \  let s = '#';\r

  \  for (let i = 0; i < 3; i++) {\r

  \    s += chooseRandom(['A', 'B', 'C', 'D', 'E', 'F']) + chooseRandom(['f',
  'c', '9', '6', '3', '0']);\r

  \  }\r

  \  return s;\r

  }"
randomList: "function randomList(len = 3, onlySimple = true, elType) {\r

  \  if (nundef(elType)) { elType = randomType(onlySimple); }\r

  \  let result = [];\r

  \  for (let i = 0; i < len; i++) {\r

  \    let c = randomContent(elType);\r

  \    result.push(isdef(c.content) ? c.content : c);\r

  \  }\r

  \  return { content: result, elType: elType };\r

  }"
randomName: "function randomName() { return chooseRandom(coin() ? GirlNames : BoyNames); }"
randomNumber: "function randomNumber(min = 0, max = 100) {\r

  \  return Math.floor(Math.random() * (max - min + 1)) + min;\r

  }"
randomObject: "function randomObject(len = 3, onlySimple = true, elTypes) {\r

  \  if (nundef(elTypes)) { elTypes = Array.from({ length: len, }, () =>
  randomType(true)); }\r

  \  let result = { id: getUID('o') };\r

  \  let i = 0;\r

  \  for (const t of elTypes) {\r

  \    let key = t + '_' + i; i += 1;\r

  \    let val = randomContent(t);\r

  \    result[key] = isdef(val.content) ? val.content : val;\r

  \  }\r

  \  return result;\r

  }"
randomRank: function randomRank() { return Card52.randomRankSuit[0]; }
randomString: "function randomString(len = 4, startLetter) {\r

  \  let s = '';\r

  \  if (isdef(startLetter)) { s = startLetter; len -= 1; }\r

  \  let isVowel = coin() ? true : false;\r

  \  for (let i = 0; i < len; i++) {\r

  \    if (isVowel) s += randomVowel(); else s += randomConsonant();\r

  \    isVowel = !isVowel;\r

  \  }\r

  \  return s;\r

  }"
randomSuit: function randomSuit() { return Card52.randomRankSuit[1]; }
randomType: "function randomType(onlySimple = false) {\r

  \  let complexTypes = ['list'];\r

  \  let simpleTypes = ['number', 'string', 'varLenString', 'C52',
  'Card52'];//'card'?,'html','DOM'];\r

  \  let allTypes = complexTypes.concat(simpleTypes);\r

  \  type = chooseRandom(onlySimple ? simpleTypes : allTypes);\r

  \  return type;\r

  }"
randomUnitTuple: "function randomUnitTuple() {\r

  \  let tile = chooseRandom(assets.tileNames);\r

  \  let nationality = chooseRandom(assets.nationalityNames);\r

  \  let unitType = chooseRandom(assets.unitTypeNames);\r

  \  return [nationality, tile, unitType, 2];\r

  }"
randomUserId: "function randomUserId(len = 20, isNumeric = false) {\r

  \  let id = '';\r

  \  if (isNumeric) for (let i = 0; i < len; i++) { id += randomDigit(); }\r

  \  else for (let i = 0; i < len; i++) { id += randomAlphanum(); }\r

  \  return id;\r

  }"
randomVarLenString: function randomVarLenString(lmin = 3, lmax = 12,
  startLetter) { let len = randomNumber(lmin, lmax); return randomString(len,
  startLetter); }
randomVowel: function randomVowel() { let s = 'aeiouy'; return s[randomNumber(0,
  s.length - 1)]; }
range: "function range(f, t, st = 1) {\r

  \  if (nundef(t)) {\r

  \    t = f - 1;\r

  \    f = 0;\r

  \  }\r

  \  let arr = [];\r

  \  for (let i = f; i <= t; i += st) {\r

  \    arr.push(i);\r

  \  }\r

  \  return arr;\r

  }"
rAreas: "function rAreas() {\r

  \  let d1 = mDiv(dTable, { bg: 'blue', w: 800, h: 600 }, 'd1');\r

  \  SPEC = { views: { d1: { layout: ['T', 'P O'] } } };\r

  \  console.log(SPEC)\r

  \  for (const k in SPEC.views) { createLayout(k, SPEC.views[k].layout); }\r

  }"
rAreas_0: "function rAreas_0() {\r

  \  let color = SPEC.color.theme;\r

  \  document.body.style.backgroundColor = color;\r

  \  let fg = colorIdealText(color)\r

  \  document.body.style.color = fg;\r

  \  let palette = getTransPalette9();\r

  \  let ipal = 1;\r

  \  let d = document.getElementById('areaTable');\r

  \  setTableSize(...SPEC.tableSize);\r

  \  let s = '';\r

  \  let m = [];\r

  \  for (const line of SPEC.layout) {\r

  \    s += '\"' + line + '\" ';\r

  \    let letters = line.split(' ');\r

  \    let arr = [];\r

  \    for (const l of letters) { if (!isEmpty(l)) arr.push(l); }\r

  \    m.push(arr);\r

  \  }\r

  \  d.style.gridTemplateAreas = s;\r

  \  if (SPEC.collapseEmptySmallLetterAreas) { collapseSmallLetterAreas(m, d);
  }\r

  \  else fixedSizeGrid(m, d);\r

  \  for (const k in SPEC.areas) {\r

  \    let areaName = SPEC.areas[k];\r

  \    let d1 = document.createElement('div');\r

  \    d1.id = areaName;\r

  \    d1.style.gridArea = k;\r

  \    if (SPEC.shadeAreaBackgrounds) { d1.style.backgroundColor =
  palette[ipal]; ipal = (ipal + 1) % palette.length; }\r

  \    if (SPEC.showAreaNames) { d1.innerHTML = makeAreaNameDomel(areaName);
  }\r

  \    UIS[areaName] = { elem: d1, children: [] };\r

  \    d.appendChild(d1);\r

  \  }\r

  }"
rBehaviorCode: "function rBehaviorCode() {\r

  \  for (const key of ['table', 'players']) {\r

  \    let pool = serverData[key];\r

  \    for (const oid in pool) {\r

  \      let o = pool[oid];\r

  \      for (const cond in COND) {\r

  \        console.log('try', cond)\r

  \        let todo = COND[cond](o);\r

  \        if (isdef(todo)) {\r

  \          FUNCS[todo.f](oid, o);\r

  \          DONE[oid] = true;\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  }"
rCard: function rCard(postfix = 'n', ranks = '*A23456789TJQK', suits = 'HSDC') {
  return rChoose(ranks) + rChoose(suits) + postfix; }
rChoose: "function rChoose(arr, n = 1, func = null, exceptIndices = null) {\r

  \  let indices = arrRange(0, arr.length - 1);\r

  \  if (isdef(exceptIndices)) {\r

  \    for (const i of exceptIndices) removeInPlace(indices, i);\r

  \  }\r

  \  if (isdef(func)) indices = indices.filter(x => func(arr[x]));\r

  \  if (n == 1) {\r

  \    let idx = Math.floor(Math.random() * indices.length);\r

  \    return arr[indices[idx]];\r

  \  }\r

  \  arrShufflip(indices);\r

  \  return indices.slice(0, n).map(x => arr[x]);\r

  }"
rCoin: "function rCoin(percent = 50) {\r

  \  let r = Math.random();\r

  \  r *= 100;\r

  \  return r < percent;\r

  }"
rColor: "function rColor(cbrightness, c2, alpha = null) {\r

  \  if (isdef(c2)) {\r

  \    let c = colorMix(cbrightness, c2, rNumber(0, 100));\r

  \    return colorTrans(c, alpha ?? Math.random());\r

  \  }\r

  \  if (isdef(cbrightness)) {\r

  \    let hue = rHue();\r

  \    let sat = 100;\r

  \    let b = isNumber(cbrightness) ? cbrightness : cbrightness == 'dark' ?
  25 : cbrightness == 'light' ? 75 : 50;\r

  \    return colorFromHSL(hue, sat, b);\r

  \  }\r

  \  let s = '#';\r

  \  for (let i = 0; i < 6; i++) {\r

  \    s += rChoose(['f', 'c', '9', '6', '3', '0']);\r

  \  }\r

  \  return s;\r

  }"
rConsonant: "function rConsonant(w, except = []) { let vowels = w ?
  getConsonants(w, except) : toLetters('aeiouy'); return chooseRandom(vowels);
  }"
rDate: "function rDate(before, after) {\r

  \  let after_date = new Date(after);\r

  \  let before_date = new Date(before);\r

  \  let random_date = new Date(Math.random() * (before_date.getTime() -
  after_date.getTime()) + after_date.getTime());\r

  \  return random_date;\r

  }"
rDigits: function rDigits(n) { return rChoose(toLetters('0123456789'), n); }
reAddServerObject: "function reAddServerObject(label) {\r

  \  let tv = TV[label];\r

  \  if (nundef(tv)) {\r

  \    console.log('this object has NOT been entered in TV!!! did you remove
  the object?!?', label);\r

  \    return;\r

  \  }\r

  \  let oid = tv.oid;\r

  \  let o = tv.o;\r

  \  addServerObject(oid, o, R);\r

  }"
readExp: function readExp() { }
realTimeIfTrue: "function realTimeIfTrue(f, cnt) {\r

  \  console.log('counter', cnt)\r

  \  if (f()) setTimeout(() => realtimeIfTrue(f, cnt + 1), 10);\r

  }"
rec_create_nodes_tree: "function rec_create_nodes_tree(r, t, path, keys) {\r

  \  if (isLiteral(t)) {\r

  \    let type = is_game_card(t) ? 'card' : typeof t;\r

  \    return register_node(t, type, getUID('o'), path, r);\r

  \  } else if (isList(t)) {\r

  \    let content = t;\r

  \    let type;\r

  \    if (startsWith(path, 'deck') || startsWith(path, 'achievements')) {\r

  \      type = 'deck';\r

  \    } else if (!isEmpty(t) && is_game_card(t[0])) {\r

  \      type = 'cardlist';\r

  \    }\r

  \    else {\r

  \      type = 'string';\r

  \    }\r

  \    let n = register_node(content, type, getUID('o'), path, r);\r

  \    if (type == 'cardlist') {\r

  \      let ch = [];\r

  \      let i = 0;\r

  \      for (const el of t) {\r

  \        if (!isLiteral(el)) continue;\r

  \        let type = is_game_card(el) ? 'card' : typeof t;\r

  \        let n1 = register_node(el, type, getUID('o'), path + '.' + el,
  r);\r

  \        i += 1;\r

  \        ch.push(n1.oid);\r

  \      }\r

  \      n.children = ch;\r

  \    }\r

  \    return n;\r

  \  } else if (isDict(t)) {\r

  \    let n = register_node(stringAfterLast(path, '.'), 'string',
  getUID('o'), path, r);\r

  \    let ch = [];\r

  \    for (const k in t) {\r

  \      if (nundef(keys[k]) && k.length > 1) { continue; }\r

  \      let pnew = isEmpty(path) ? k : path + '.' + k;\r

  \      let tnew = t[k];\r

  \      let n1 = rec_create_nodes_tree(r, tnew, pnew, keys);\r

  \      ch.push(n1.oid);\r

  \    }\r

  \    n.children = ch;\r

  \    return n;\r

  \  } else {\r

  \    let type = 'null';\r

  \    return register_node('null', type, getUID('o'), path, r);\r

  \  }\r

  }"
rec_create_nodes_tree_akku: "function rec_create_nodes_tree_akku(r, t, path,
  keys, akku) {\r

  \  if (isLiteral(t)) {\r

  \    let type = is_game_card(t) ? 'card' : typeof t;\r

  \    return register_node(t, type, getUID('o'), path, r);\r

  \  } else if (isList(t)) {\r

  \    let content = t;\r

  \    let type;\r

  \    if (startsWith(path, 'deck') || startsWith(path, 'achievements')) {\r

  \      type = 'deck';\r

  \    } else if (!isEmpty(t) && is_game_card(t[0])) {\r

  \      type = 'cardlist';\r

  \    }\r

  \    else {\r

  \      type = 'string';\r

  \    }\r

  \    let n = register_node(content, type, getUID('o'), path, r);\r

  \    if (type == 'cardlist') {\r

  \      let ch = [];\r

  \      let i = 0;\r

  \      for (const el of t) {\r

  \        if (!isLiteral(el)) continue;\r

  \        let type = is_game_card(el) ? 'card' : typeof t;\r

  \        let n1 = register_node(el, type, getUID('o'), path + '.' + el,
  r);\r

  \        i += 1;\r

  \        ch.push(n1.oid);\r

  \      }\r

  \      n.children = ch;\r

  \    }\r

  \    return n;\r

  \  } else if (isDict(t)) {\r

  \    let n = register_node(stringAfterLast(path, '.'), 'string',
  getUID('o'), path, r);\r

  \    let ch = [];\r

  \    for (const k in t) {\r

  \      if (nundef(keys[k]) && k.length > 1) { continue; }\r

  \      let pnew = isEmpty(path) ? k : path + '.' + k;\r

  \      akku.push(pnew);\r

  \      let tnew = t[k];\r

  \      let n1 = rec_create_nodes_tree_akku(r, tnew, pnew, keys, akku);\r

  \      ch.push(n1.oid);\r

  \    }\r

  \    n.children = ch;\r

  \    return n;\r

  \  } else {\r

  \    let type = 'null';\r

  \    return register_node('null', type, getUID('o'), path, r);\r

  \  }\r

  }"
recAdjustDirtyContainers: "function recAdjustDirtyContainers(uid, R, verbose =
  false) {\r

  \  let nui = R.uiNodes[uid];\r

  \  if (isdef(nui.children)) {\r

  \    for (const ch of nui.children) recAdjustDirtyContainers(ch, R,
  verbose);\r

  \  }\r

  \  if (nui.adirty) {\r

  \    adjustContainerLayout(nui, R);\r

  \  }\r

  }"
recAdjustDirtyContainers_dep: "function recAdjustDirtyContainers_dep(uid, R,
  verbose = false) {\r

  \  let nui = R.uiNodes[uid];\r

  \  if (nui.adirty) {\r

  \    adjustContainerLayout(nui, R);\r

  \  }\r

  \  if (nundef(nui.children)) return;\r

  \  for (const ch of nui.children) recAdjustDirtyContainers(ch, R,
  verbose);\r

  }"
recAllNodes: "function recAllNodes(n, f, p, tailrec, safe = false) {\r

  \  if (safe) { ___enteredRecursion += 1; if (___enteredRecursion >
  MAX_RECURSIONS) { error('MAX_RECURSIONS reached!!!' + f.name); return; } }\r

  \  if (isList(n)) {\r

  \    if (tailrec) f(n, p);\r

  \    n.map(x => recAllNodes(x, f, p, tailrec));\r

  \    if (!tailrec) f(n, p);\r

  \  } else if (isDict(n)) {\r

  \    if (tailrec) f(n, p);\r

  \    for (const k in n) { recAllNodes(n[k], f, p, tailrec); }\r

  \    if (!tailrec) f(n, p);\r

  \  }\r

  }"
recArrangeContent: "function recArrangeContent(uid, R) {\r

  \  let n = R.uiNodes[uid];\r

  \  if (nundef(n.children)) return;\r

  \  let parentPadding = isdef(n.params.paddingAroundChildren) ?
  n.params.paddingAroundChildren : DEFS.defaultPadding;\r

  \  let childMargin = isdef(n.params.gapBetweenChildren) ?
  n.params.gapBetweenChildren : DEFS.defaultGap;\r

  \  let posModified = false;\r

  \  let sizeModified = false;\r

  \  let children = n.children.map(x => R.uiNodes[x]);\r

  \  if (isdef(n.params.contentwalign) && n.params.contentwalign == 'center')
  {\r

  \    let children = n.children.map(x => R.uiNodes[x]);\r

  \    let xchimin = Math.min(...children.map(x => x.pos.x));\r

  \    let xchimax = Math.max(...children.map(x => x.pos.x + x.size.w));\r

  \    let diff = xchimax - xchimin;\r

  \    let wpar = n.size.w - 2 * parentPadding;\r

  \    let displ = (wpar - diff) / 2;\r

  \    if (displ >= 1) {\r

  \      posModified = true;\r

  \      for (const ch of children) { ch.params.pos = { x: ch.pos.x + displ,
  y: ch.pos.y }; }\r

  \    }\r

  \  }\r

  \  if (isdef(n.params.contenthalign) && n.params.contenthalign == 'center')
  {\r

  \    let ychimin = Math.min(...children.map(ch => ch.pos.y));\r

  \    let ychimax = Math.max(...children.map(ch => ch.pos.y + ch.size.h));\r

  \    let diff = ychimax - ychimin;\r

  \    let hpar = n.size.h - 2 * parentPadding;\r

  \    let displ = (hpar - diff) / 2;\r

  \    if (displ >= 1) {\r

  \      posModified = true;\r

  \      for (const ch of children) { ch.params.pos = { x: ch.pos.x, y:
  ch.pos.y + displ }; }\r

  \    }\r

  \  }\r

  \  if (posModified || sizeModified) {\r

  \    for (const ch of children) { setFixedSizeAndPos(ch); }\r

  \  }\r

  \  for (const ch of n.children) recArrangeContent(ch, R);\r

  }"
recBuildRTree: "function recBuildRTree(n, key, path, parent, sp, R, oid) {\r

  \  CYCLES += 1; if (CYCLES > MAX_CYCLES) return;\r

  \  console.log('***', n, path, parent, sp)\r

  \  let n1 = { uid: getUID(), key: key, uidParent: parent ? parent.uid :
  null, path: path };\r

  \  if (isdef(oid)) n1.oid = oid;\r

  \  let locProp = '_id';\r

  \  let nodeName = n[locProp];\r

  \  if (isString(nodeName)) {\r

  \    lookupAddToList(R.Locations, [nodeName], n1.uid);\r

  \    n1.here = nodeName;\r

  \    let nSpec = sp[nodeName];\r

  \    console.log(nodeName, nSpec)\r

  \    if (nundef(nSpec.cond)) {\r

  \      let branch = recBuildRTree(nSpec, nodeName, '.', n1, sp, R, oid);\r

  \      R.rNodes[branch.uid] = branch;\r

  \      n1.children = [branch.uid];\r

  \    } else {\r

  \    }\r

  \  }\r

  \  let chProp = 'sub';\r

  \  let chlist = n[chProp];\r

  \  if (isdef(chlist)) {\r

  \    n1.children = [];\r

  \    let i = 0;\r

  \    for (const chInfo of chlist) {\r

  \      let newPath = extendPath(path, i);\r

  \      i += 1;\r

  \      let ch = recBuildRTree(chInfo, key, newPath, n1, sp, R, oid);\r

  \      R.rNodes[ch.uid] = ch;\r

  \      n1.children.push(ch.uid);\r

  \    }\r

  \  }\r

  \  return n1;\r

  }"
recBuildUiFromNode: "function recBuildUiFromNode(n, uidParent, R, iParams = {})
  {\r

  \  CYCLES += 1; if (CYCLES > MAX_CYCLES) return;\r

  \  let n1 = {};\r

  \  let sp = R.getSpec();\r

  \  n1.uid = n.uid;\r

  \  if (isdef(n.children)) {\r

  \    n1.children = n.children.map(x => x);\r

  \    n1.adirty = true;\r

  \  }\r

  \  let parent = lookup(R.rNodes, [uidParent]);\r

  \  let nsp = sp[n.key];\r

  \  let nsub = evalSpecPath(nsp, n.path, R);\r

  \  n1.type = nsub.type;\r

  \  n1.data = nsub.data;\r

  \  n1.params = isdef(nsub.params) ? nsub.params : {};\r

  \  n1.defParams = jsCopy(iParams);\r

  \  let oid = n1.oid = n.oid;\r

  \  let o = oid ? R.getO(oid) : null;\r

  \  if (n1.data) {\r

  \    n1.content = calcContentFromData(oid, o, n1.data, R);\r

  \    if (isString(n1.content)) {\r

  \      console.log(n1.content)\r

  \      let oid1 = n1.content;\r

  \      console.log('oid of card', oid1, '\\noid of n1', oid);\r

  \      if (oid1 != oid) {\r

  \        let o1 = R.getO(oid1);\r

  \        if (o1) {\r

  \          let oidNode1 = R.oidNodes[oid1];\r

  \          if (isdef(oidNode1)) {\r

  \            let key1list = Object.keys(oidNode1);\r

  \            console.log('following keys available for', oid1, key1list);\r

  \            let key1 = key1list[0];\r

  \            console.log('FOUND BETTER REP FOR O', oid1, key1, '\\nWAS
  JETZT???????');\r

  \            console.log('der rNode muss doch existieren!!!',
  R.rNodes[n.uid])\r

  \            instantiateOidKeyAtParent(oid1, key1, uidParent, R);\r

  \            console.log('HALLOOOOOOOO');\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  if (n1.type == 'grid') {\r

  \    createBoard(n1, uidParent, R, iParams);\r

  \  } else {\r

  \    n1.ui = createUi(n1, uidParent, R, iParams);\r

  \  }\r

  \  R.uiNodes[n1.uid] = n1;\r

  \  if (R.isUiActive) n1.act.activate(highSelfAndRelatives,
  unhighSelfAndRelatives, selectUid);\r

  \  if (nundef(n1.children) || n1.type == 'grid') { return; }\r

  \  iParams = jsCopy(iParams);\r

  \  if (nundef(iParams[n1.type])) iParams[n1.type] = {};\r

  \  iParams[n1.type].params = n1.defParams;\r

  \  for (const ch of n1.children) {\r

  \    let nNew = R.rNodes[ch];\r

  \    recBuildUiFromNode(nNew, n1.uid, R, iParams, n1.oid);\r

  \  }\r

  }"
recCollect: "function recCollect(n, cond, akku, safe = false) {\r

  \  if (safe) { ___enteredRecursion += 1; if (___enteredRecursion >
  MAX_RECURSIONS) { error('MAX_RECURSIONS reached!!!' + f.name); return; } }\r

  \  if (cond(n)) akku.push(n);\r

  \  if (nundef(n.children)) return;\r

  \  for (const ch of n.children) {\r

  \    recCollect(ch, cond, akku, safe);\r

  \  }\r

  }"
recCollectSizeInfo: "function recCollectSizeInfo(t, R, uiNodeSizes) {\r

  \  if (nundef(t.size)) return;\r

  \  uiNodeSizes[t.uid] = { w: Math.floor(t.size.w), h: Math.floor(t.size.h)
  };\r

  \  if (nundef(t.children)) return;\r

  \  for (const ch of t.children) { recCollectSizeInfo(R.uiNodes[ch], R,
  uiNodeSizes); }\r

  }"
recConvertLists: "function recConvertLists(o, maxlen = 25) {\r

  \  for (const k in o) {\r

  \    let val = o[k];\r

  \    if (isList(val)) {\r

  \      if (val.length > maxlen) val = val.slice(0, maxlen).toString() +
  '...';\r

  \      else val = val.toString();\r

  \      o[k] = val;\r

  \    } else if (isDict(val)) recConvertLists(val);\r

  \  }\r

  }"
recConvertToList: "function recConvertToList(n, listOfProps) {\r

  \  if (isList(n)) { n.map(x => recConvertToList(x, listOfProps)); }\r

  \  else if (isDict(n) && isList(listOfProps)) {\r

  \    for (const prop of listOfProps) {\r

  \      let lst = n[prop];\r

  \      if (isList(lst) && !isEmpty(lst)) { n[prop] = lst.join(' '); }\r

  \    }\r

  \    for (const k in n) { recConvertToList(n[k], listOfProps); }\r

  \  }\r

  }"
recConvertToSimpleList: "function recConvertToSimpleList(n, listOfProps) {\r

  \  if (isList(n)) { n.map(x => recConvertToList(x, listOfProps)); }\r

  \  else if (isDict(n) && isList(listOfProps)) {\r

  \    for (const prop of listOfProps) {\r

  \      let conv = dictOrListToString(n[prop]);\r

  \      if (conv) n[prop] = conv;\r

  \    }\r

  \    for (const k in n) { recConvertToList(n[k], listOfProps); }\r

  \  }\r

  }"
recDeleteEmptyObjects: "function recDeleteEmptyObjects(o) {\r

  \  if (isLiteral(o)) return o;\r

  \  else if (isList(o)) return o.map(x => recDeleteEmptyObjects(x));\r

  \  let onew = {};\r

  \  for (const k in o) {\r

  \    if (!isEmpty(o[k])) {\r

  \      onew[k] = recDeleteEmptyObjects(jsCopy(o[k]));\r

  \    }\r

  \  }\r

  \  return onew;\r

  }"
recDeleteKeys: "function recDeleteKeys(o, deleteEmpty = true, omitProps) {\r

  \  if (isLiteral(o)) return o;\r

  \  else if (isList(o)) return o.map(x => recDeleteKeys(x, deleteEmpty,
  omitProps));\r

  \  let onew = {};\r

  \  for (const k in o) {\r

  \    if (omitProps.includes(k)) continue;\r

  \    if (isLiteral(o[k]) || !isEmpty(o[k])) {\r

  \      onew[k] = recDeleteKeys(jsCopy(o[k]), deleteEmpty, omitProps);\r

  \    } else {\r

  \    }\r

  \  }\r

  \  return onew;\r

  }"
Receptor: "function Receptor(div, board) {\r

  \  var self = this;\r

  \  this.div = div;\r

  \  this.board = board;\r

  }"
recFindDOMs: "function recFindDOMs(o) {\r

  \  if (!isDict(o)) return [];\r

  \  if (isDOM(iDiv(o))) return [iDiv(o)];\r

  \  let akku = [];\r

  \  for (const k in o) {\r

  \    let val = o[k];\r

  \    akku = akku.concat(recFindDOMs(val));\r

  \  }\r

  \  return akku;\r

  }"
recFindExecute: "function recFindExecute(o, prop, func) {\r

  \  if (!isDict(o) && !Array.isArray(o)) { return; }\r

  \  if (isDict(o)) {\r

  \    if (o[prop]) { func(o); }\r

  \    for (const k in o) { recFindExecute(o[k], prop, func); }\r

  \  } else if (isList(o)) {\r

  \    for (let i = 0; i < o.length; i++) {\r

  \      this.recFindExecute(o[i], prop, func);\r

  \    }\r

  \  }\r

  }"
recFindProp: "function recFindProp(o, prop, path, akku) {\r

  \  if (!isDict(o) && !Array.isArray(o)) { return; }\r

  \  if (isDict(o)) {\r

  \    if (o[prop]) { akku[path] = { name: o[prop], node: o }; }\r

  \    for (const k in o) { recFindProp(o[k], prop, path + '.' + k, akku); }\r

  \  } else if (isList(o)) {\r

  \    for (let i = 0; i < o.length; i++) {\r

  \      this.recFindProp(o[i], prop, path + '.' + i, akku);\r

  \    }\r

  \  }\r

  }"
recFindProp_dep: "function recFindProp_dep(o, prop, path, akku) {\r

  \  if (!isDict(o) && !Array.isArray(o)) { return; }\r

  \  if (isDict(o)) {\r

  \    if (o[prop]) { akku[path] = o[prop]; }\r

  \    for (const k in o) { recFindProp(o[k], prop, path + '.' + k, akku); }\r

  \  } else if (isList(o)) {\r

  \    for (let i = 0; i < o.length; i++) {\r

  \      this.recFindProp(o[i], prop, path + '.' + i, akku);\r

  \    }\r

  \  }\r

  }"
recFlattenLists: "function recFlattenLists(o) {\r

  \  for (const k in o) {\r

  \    let cand = o[k];\r

  \    if (isList(cand)) o[k] = cand.join(' ');\r

  \    else if (isDict(cand)) recFlattenLists(cand);\r

  \  }\r

  }"
recListToString: "function recListToString(lst) {\r

  \  if (!isList(lst)) return lst;\r

  \  if (isListOfLiterals(lst)) return lst.join(',');\r

  \  else {\r

  \    let res = [];\r

  \    for (const el of lst) {\r

  \      let elString = recListToString(el);\r

  \      res.push(elString);\r

  \    }\r

  \    return res;\r

  \  }\r

  }"
recMeasureAbs: "function recMeasureAbs(uid, R) {\r

  \  let n = R.uiNodes[uid];\r

  \  if (isdef(n.children)) {\r

  \    for (const ch of n.children) {\r

  \      recMeasureAbs(ch, R);\r

  \    }\r

  \  }\r

  \  n.sizeMeasured = calcSizeMeasured(n, R);\r

  \  n.sizeNeeded = uniformSizeToContent(uid, R);\r

  \  n.size = {\r

  \    w: Math.max(n.sizeMeasured.w, n.sizeNeeded.w),\r

  \    h: Math.max(n.sizeMeasured.h, n.sizeNeeded.h)\r

  \  }\r

  \  n.ui.style.width = n.size.w + 'px';\r

  \  n.ui.style.height = n.size.h + 'px';\r

  }"
recMeasureArrangeFixedSizeAndPos: "function
  recMeasureArrangeFixedSizeAndPos(uid, R) {\r

  \  let n = R.uiNodes[uid];\r

  \  let [minx, maxx, miny, maxy] = [100000, 0, 100000, 0];\r

  \  if (isdef(n.children)) {\r

  \    for (const ch of n.children) {\r

  \      let [xmin, xmax, ymin, ymax] = recMeasureArrangeFixedSizeAndPos(ch,
  R);\r

  \      minx = Math.min(minx, xmin);\r

  \      maxx = Math.max(maxx, xmax);\r

  \      miny = Math.min(miny, ymin);\r

  \      maxy = Math.max(maxy, ymax);\r

  \    }\r

  \    if (nundef(n.params.pos)) {\r

  \      return [minx, maxx, miny, maxy];\r

  \    }\r

  \    let wParent = Math.max(n.params.size.w, maxx);\r

  \    let hParent = Math.max(n.params.size.h, maxy);\r

  \    n.params.size.w = wParent + 4;\r

  \    n.params.size.h = hParent + 4;\r

  \    setFixedSizeAndPos(n);\r

  \    n.ui.style.opacity = .5;\r

  \    minx = Math.min(minx, n.pos.x);\r

  \    maxx = Math.max(maxx, n.pos.x + n.size.w);\r

  \    miny = Math.min(miny, n.pos.y);\r

  \    maxy = Math.max(maxy, n.pos.y + n.size.h);\r

  \    return [minx, maxx, miny, maxy];\r

  \  } else {\r

  \    setFixedSizeAndPos(n);\r

  \    let b = getBounds(n.ui);\r

  \    return [n.pos.x, n.pos.x + b.width, n.pos.y, n.pos.y + b.height];\r

  \  }\r

  }"
recMeasureOverride: "function recMeasureOverride(uid, R) {\r

  \  let n = R.uiNodes[uid];\r

  \  if (isdef(n.children)) { for (const ch of n.children) {
  recMeasureOverride(ch, R); } }\r

  \  n.sizeMeasured = calcSizeMeasured(n, R);\r

  \  n.sizeNeeded = arrangeOverride(n, R);\r

  \  n.size = {\r

  \    w: Math.max(n.sizeMeasured.w, n.sizeNeeded.w),\r

  \    h: Math.max(n.sizeMeasured.h, n.sizeNeeded.h)\r

  \  }\r

  }"
recMergeSpecNode: "function recMergeSpecNode(n, sp, spNew) {\r

  \  if (isList(n._NODE)) {\r

  \    let lst = n._NODE;\r

  \    let combiName = getCombNodeName(lst);\r

  \    let nComb = {};\r

  \    for (const name of lst) {\r

  \      nComb = mergedSpecNode(nComb, sp[name]);\r

  \    }\r

  \    spNew[combiName] = nComb;\r

  \    n._NODE = combiName;\r

  \  }\r

  \  if (isdef(n.sub)) {\r

  \    for (const n1 of n.sub) recMergeSpecNode(n1, sp, spNew);\r

  \  }\r

  }"
recNormalize: "function recNormalize(n, sp) {\r

  \  let n1 = jsCopy(n);\r

  \  let t = n1.type = nundef(n.type) ? inferType(n) : n.type;\r

  \  let locProp = 'panel';\r

  \  if (locProp != 'p') {\r

  \    n1.p = n[locProp];\r

  \    delete n1[locProp];\r

  \  }\r

  \  let contProp = 'sub';\r

  \  if (contProp && isdef(n[contProp])) {\r

  \    n1.ch = n[contProp].map(x => recNormalize(x, sp));\r

  \    delete n1[contProp];\r

  \  }\r

  \  return n1;\r

  }"
recomputeBestED: "function recomputeBestED() {\r

  \  for (const k in symbolDict) {\r

  \    let info = symbolDict[k];\r

  \    if (info.type == 'emo' && isString(info.D) && isString(info.E)) {\r

  \      info.bestD = stringAfterLast(info.D, '|').trim().toLowerCase();\r

  \      info.bestE = stringAfterLast(info.E, '|').trim().toLowerCase();\r

  \    } else if (nundef(info.E) || isNumber(info.E) || isdef(info.bestE))
  continue;\r

  \    if (info.type == 'emo') continue;\r

  \    if (info.E.includes('|')) {\r

  \      console.log('he das gibt es doch nicht!!!', k, info);\r

  \    } else {\r

  \      info.bestE = info.E;\r

  \    }\r

  \    if (nundef(info.D)) {\r

  \      console.log('he das gibt es doch nicht!!! KEIN DEUTSCH!', k, info);\r

  \    } else {\r

  \      info.bestD = stringBefore(info.D, '|').trim().toLowerCase();\r

  \    }\r

  \  }\r

  \  downloadAsYaml(symbolDict, 'sym');\r

  }"
record: "function record(lang, best) {\r

  \  if (!isGameWithSpeechRecognition()) return;\r

  \  let wordlist = ['du', 'bist', 'ein', 'vogel', best];\r

  \  if (!isdef(recognition)) {\r

  \    speech00(lang);\r

  \    setTimeout(record(lang, wordlist), 3000);\r

  \    return;\r

  \  }\r

  \  setVocabulary(wordlist);\r

  \  if (isdef(recognition) && isRunning) {\r

  \    console.log('.......................stopping recog');\r

  \    recordCallback = () => record(lang, wordlist);\r

  \    recognition.stop();\r

  \  } else {\r

  \    isRunning = true;\r

  \    recognition.start();\r

  \  }\r

  }"
record_winners: function record_winners(winners, game) {
  ensure_winnerlist(game).push(winners); }
recoverStateAndSettings: "function recoverStateAndSettings() {\r

  \  onClickRetrieveState();\r

  \  let settings = localStorage.getItem('settings');\r

  \  if (isdef(settings)) {\r

  \    settings = JSON.parse(settings);\r

  \    console.log('retrieved settings (baseColor)', settings.baseColor);\r

  \    G.settings = settings;\r

  \    Socket.emit('settings', { settings: G.settings });\r

  \  } else {\r

  \    console.log('no settings in localStorage!');\r

  \  }\r

  }"
recPopulateTree: "function recPopulateTree(t, R, levels) {\r

  \  if (levels > 0) {\r

  \    addRandomChildren(t, R);\r

  \    if (Object.keys(R.rNodes).length >= MAXNODES) { console.log('MAXNODES
  REACHED!!!'); return; }\r

  \    for (const id of t.children) {\r

  \      if (chooseRandom([true, false])) {\r

  \        recPopulateTree(R.rNodes[id], R, levels - 1);\r

  \      }\r

  \    }\r

  \  }\r

  }"
recPosRandomUiTreeX: "function recPosRandomUiTreeX(uid, R, context) {\r

  \  let n = R.uiNodes[uid];\r

  \  let gran = context.granularity;\r

  \  n.params.size = { w: randomNumber(1, context.wmax) * gran, h:
  randomNumber(1, context.hmax) * gran };\r

  \  n.params.pos = { x: randomNumber(1, context.xmax) * gran, y:
  randomNumber(1, context.ymax) * gran }\r

  \  n.params.sizing = 'fixed';\r

  \  if (nundef(n.children)) return;\r

  \  for (const ch of n.children) { recPosRandomUiTreeX(ch, R, context); }\r

  }"
recPosRegularUiTree: "function recPosRegularUiTree(uid, R) {\r

  \  let n = R.uiNodes[uid];\r

  \  n.params.sizing = 'fixed';\r

  \  if (nundef(n.children)) return;\r

  \  for (const ch of n.children) { recPosRegularUiTree(ch, R); }\r

  \  let num = n.children.length;\r

  \  if ([2, 4, 6, 9, 12, 16, 20, 25, 30, 36, 42, 29, 56, 64].includes(num))
  arrangeChildrenAsQuad(n, R);\r

  \  else if ([3, 8, 15, 24, 35, 48, 63].includes(num)) {\r

  \    let lower = Math.floor(Math.sqrt(num));\r

  \    console.assert(num == lower * (lowe + 2), 'RECHNUNG FALSCH IN
  recPosRegularUiTree');\r

  \    arrangeChildrenAsMatrix(n, R, lower, lower + 2);\r

  \  } else if (num > 1 && num < 10) arrangeChildrenAsCircle(n, R);\r

  }"
recPresent: "function recPresent(n, level, dLevel, nDict, treeProp, {
  lstFlatten, lstShow, lstOmit } = {}) {\r

  \  mNodeFilter(n, { dParent: dLevel[level], lstFlatten: lstFlatten, lstShow:
  lstShow, lstOmit: lstOmit });\r

  \  if (nundef(n.children)) return level;\r

  \  let max = 0;\r

  \  for (const x of n.children) {\r

  \    let nx = nDict[x];\r

  \    let newMax = recPresent(nx, level + 1, dLevel, nDict, treeProp, {
  lstFlatten: lstFlatten, lstShow: lstShow, lstOmit: lstOmit });\r

  \    if (newMax > max) max = newMax;\r

  \  }\r

  \  return max;\r

  }"
recPresent_dep: "function recPresent_dep(n, level, dLevel, { lstFlatten,
  lstShow, lstOmit } = {}) {\r

  \  let n1 = jsCopy(n);\r

  \  n1 = filterByNoKey(n, lstOmit);\r

  \  mNode(n1, { dParent: dLevel[level], listOfProps: lstFlatten });\r

  \  if (nundef(n.children)) return level;\r

  \  let max = 0;\r

  \  for (const x of n.children) {\r

  \    let newMax = recPresent_dep(x, level + 1, dLevel, { lstFlatten:
  lstFlatten, lstShow: lstShow, lstOmit: lstOmit });\r

  \    if (newMax > max) max = newMax;\r

  \  }\r

  \  return max;\r

  }"
recPresent_dep1: "function recPresent_dep1(n, level, dLevel, lstFlatten,
  lstShow) {\r

  \  let n1 = jsCopy(n);\r

  \  n1 = filterByNoKey(n, ['sub', '_id', '_ref', 'children', 'source',
  'specKey', 'params', 'cssParams', 'typParams', 'stdParams', 'uid', 'ui'])\r

  \  mNode(n1, { dParent: dLevel[level], listOfProps: lstFlatten });\r

  \  if (nundef(n.children)) return level;\r

  \  let max = 0;\r

  \  for (const x of n.children) {\r

  \    let newMax = recPresent_dep1(x, level + 1, dLevel, lstFlatten,
  lstShow);\r

  \    if (newMax > max) max = newMax;\r

  \  }\r

  \  return max;\r

  }"
recPresentFilter: "function recPresentFilter(n, level, dLevel, { lf, ls, lo } =
  {}) {\r

  \  mNodeFilter(n, { dParent: dLevel[level], lstFlatten: lf, lstShow: ls,
  lstOmit: lo });\r

  \  if (nundef(n.children)) return level;\r

  \  let max = 0;\r

  \  for (const x of n.children) {\r

  \    let newMax = recPresentFilter(x, level + 1, dLevel, { lf: lf, ls: ls,
  lo: lo });\r

  \    if (newMax > max) max = newMax;\r

  \  }\r

  \  return max;\r

  }"
recPresentNode_dep: "function recPresentNode_dep(n, R, sizing) {\r

  \  console.log('sizing', n.uid, sizing);\r

  \  if (isdef(n.children)) {\r

  \    for (const ch of n.children) {\r

  \      let n1 = R.uiNodes[ch];\r

  \      recPresentNode_dep(n1, R, getSizing(n1, R, sizing));\r

  \    }\r

  \  }\r

  \  if (sizing == 'sizeToContent') { }\r

  \  else if (sizing == 'fixed') { }\r

  \  else if (sizing == 'sizeChildren') { }\r

  \  else {\r

  \    if (isdef(n.children)) {\r

  \      let fLayout = n.params.layout;\r

  \      if (nundef(fLayout)) fLayout = RLAYOUT[n.type];\r

  \      if (nundef(fLayout)) fLayout = panelLayout;\r

  \      let szNeeded = fLayout(n, R);\r

  \    }\r

  \  }\r

  }"
recRemove: "function recRemove(n, R) {\r

  \  if (isdef(n.children)) {\r

  \    let ids = jsCopy(n.children);\r

  \    for (const ch of ids) recRemove(R.rNodes[ch], R);\r

  \  }\r

  \  delete R.rNodes[n.uid];\r

  \  R.unregisterNode(n);\r

  \  delete R.uiNodes[n.uid];\r

  \  let parent = R.rNodes[n.uidParent];\r

  \  removeInPlace(parent.children, n.uid);\r

  \  if (isEmpty(parent.children)) delete parent.children;\r

  \  let uiParent = R.uiNodes[n.uidParent];\r

  \  removeInPlace(uiParent.children, n.uid);\r

  \  if (isEmpty(uiParent.children)) delete uiParent.children;\r

  }"
recShowHints: "function recShowHints(ilist, rc, delay = 3000, fProgression = d
  => d * 1.5) {\r

  \  if (isEmpty(ilist) || QContextCounter != rc) return;\r

  \  let i = ilist.shift();\r

  \  TOTrial = setTimeout(() => recShowHintsNext(i, ilist, rc,
  fProgression(delay), fProgression), delay);\r

  }"
recShowHintsNext: "function recShowHintsNext(i, ilist, rc, delay, fProgression)
  {\r

  \  showSayHint(i);\r

  \  if (QContextCounter == rc) recShowHints(ilist, rc, delay,
  fProgression);\r

  }"
recShowTree: "function recShowTree(o, indent, childrenKeys, lstShow, lstOmit)
  {\r

  \  showObject(o, indent, true, lstShow, lstOmit);\r

  \  let chkey = findFirstListKey(o, childrenKeys);\r

  \  if (chkey) {\r

  \    console.log(' '.repeat(indent + 2) + chkey + ':');\r

  \    for (const ch of o[chkey]) {\r

  \      recShowTree(ch, indent + 4, childrenKeys, lstShow, lstOmit);\r

  \    }\r

  \  }\r

  }"
recTree: "function recTree(n, rParent, R, oid, key) {\r

  \  let uid = getUID();\r

  \  let n1 = {};\r

  \  let chanav;\r

  \  [n, chanav] = mixinChannel(n, rParent, R);\r

  \  let expandProp = '_NODE'; let nodeName = n[expandProp];\r

  \  if (isString(nodeName)) {\r

  \    let nSpec = R.getSpec(nodeName);\r

  \    if (nundef(n.cond) && nundef(nSpec.cond)) {\r

  \      let merged = merge1(nSpec, n, { dataMerge: 'reverse' });\r

  \      delete merged._NODE;\r

  \      if (isdef(nSpec._NODE)) merged._NODE = nSpec._NODE;\r

  \      return recTree(merged, rParent, R, oid, key);\r

  \    } else if (n.cond) {\r

  \      n = merge1(nSpec, n, { dataMerge: 'none' });\r

  \      delete n._NODE;\r

  \    } else {\r

  \      if (n.cond) { console.log('ja, n.cond kann sein!!!!', '\\nn', n,
  '\\nnSpec', nSpec) }\r

  \      lookupAddToList(R.Locations, [nodeName], uid);\r

  \      n1.here = nodeName;\r

  \      if (nundef(n.data) && nundef(n.type)) n1.type = 'invisible';\r

  \    }\r

  \  } else if (isList(nodeName)) {\r

  \    console.log('REINGEFALLEN!!!!!!!!!!!!!!!!!!!!!!')\r

  \  }\r

  \  n1 = mergeOverrideArrays(n, n1);\r

  \  if (isdef(n1.sub)) delete n1.sub;\r

  \  n1.uid = uid;\r

  \  n1.uidParent = rParent ? rParent.uid : null;\r

  \  if (isdef(oid)) n1.oid = oid;\r

  \  if (chanav) n1.chanav = chanav;\r

  \  let chProp = 'sub'; let chlist = n[chProp];\r

  \  if (isdef(chlist)) {\r

  \    n1.children = [];\r

  \    for (const chInfo of chlist) {\r

  \      let ch = recTree(chInfo, n1, R, oid, key);\r

  \      R.rNodes[ch.uid] = ch;\r

  \      n1.children.push(ch.uid);\r

  \    }\r

  \  }\r

  \  return n1;\r

  }"
recUi: "function recUi(n, R, area, oid, key) {\r

  \  let n1 = R.uiNodes[n.uid] = jsCopy(n);\r

  \  let o = isdef(oid) ? R.getO(oid) : null;\r

  \  if (isdef(n1.data)) { n1.content = calcContentFromData(oid, o, n1.data,
  R, n1.default_data); }\r

  \  if (n1.type == 'grid') {\r

  \    createBoard(n1, R, area);\r

  \  } else {\r

  \    let lst = getElements(n1.content);\r

  \    if (isdef(lst) && !isEmpty(lst)) {\r

  \      let o = R.getO(lst[0]);\r

  \      if (isListOfLiterals(lst) && isdef(o)) { handleListOfObjectIds(lst,
  n1, area, R); }\r

  \      else if (isListOfLists(lst) && isdef(o[0])) {\r

  \        for (const l of lst) { handleListOfObjectIds(l, n1, area, R); }\r

  \      }\r

  \      else {\r

  \        if (nundef(n1.type)) n1.type = 'info';\r

  \        n1.content = lst.join(' ');\r

  \        n1.ui = createUi(n1, R, area);\r

  \      }\r

  \      let rTreePanel = R.rNodes[n1.uid];\r

  \      n1.children = rTreePanel.children;\r

  \    } else {\r

  \      n1.ui = createUi(n1, R, area);\r

  \    }\r

  \  }\r

  \  if (nundef(n1.children) || n1.type == 'grid') return n1;\r

  \  n1.adirty = true;\r

  \  for (const ch of n1.children) {\r

  \    if (isdef(R.uiNodes[ch])) { continue; }\r

  \    recUi(R.rNodes[ch], R, n1.uid, oid, key);\r

  \  }\r

  \  return n1;\r

  }"
recUiTestX: "function recUiTestX(n, R) {\r

  \  let n1 = R.uiNodes[n.uid] = jsCopy(n);\r

  \  let area = isdef(n1.uidParent) ? n1.uidParent : R.baseArea;\r

  \  n1.ui = createUiTestX(n1, R, area);\r

  \  if (nundef(n1.children)) return;\r

  \  for (const ch of n1.children) {\r

  \    recUiTestX(R.rNodes[ch], R);\r

  \  }\r

  }"
recVerify: "function recVerify(series, index, maxIndex) {\r

  \  if (index > maxIndex) return;\r

  \  else setTimeout(() => doNext(series, index, maxIndex), 1000);\r

  }"
redrawScreen: "function redrawScreen() {\r

  \  checkCleanup_II();\r

  \  if (S.settings.userBehaviors) {\r

  \    loadCode0(userCode.asText, 'setUserSpecAndCode();proceedRedraw();', ()
  => {\r

  \      console.log('setting code now!')\r

  \      setUserSpecAndCode();\r

  \      proceedRedraw();\r

  \    });\r

  \    console.log('userCode', userCode);\r

  \  }\r

  \  else proceedRedraw();\r

  }"
reduce_to_current_players: "function reduce_to_current_players() {\r

  \  let d = mBy('d_players');\r

  \  let checkboxes = d.getElementsByTagName('input');\r

  \  let list = [];\r

  \  for (const chk of checkboxes) {\r

  \    if (chk.checked) {\r

  \      list.push(chk.value);\r

  \    }\r

  \  }\r

  \  populate_players(list);\r

  }"
reduceBoard: "function reduceBoard(board, rNew, cNew, iModify) {\r

  \  let [boardArrOld, rOld, cOld] = [board.fields.map(x => isdef(x.item) ?
  x.item.index : null), board.rows, board.cols];\r

  \  let rest = [];\r

  \  if (rOld > rNew) { rest = bGetRow(boardArrOld, iModify, rOld,
  cOld).filter(x => x != null); }\r

  \  else if (cOld > cNew) { rest = bGetCol(boardArrOld, iModify, rOld,
  cOld).filter(x => x != null); }\r

  \  let boardArrNew = new Array(rNew * cNew);\r

  \  for (let r = 0; r < rNew; r++) {\r

  \    for (let c = 0; c < cNew; c++) {\r

  \      let i = iFromRowCol(r, c, rNew, cNew);\r

  \      let x = (rOld != rNew) ? r : c;\r

  \      if (x < iModify) {\r

  \        let iOld = iFromRowCol(r, c, rOld, cOld);\r

  \        boardArrNew[i] = boardArrOld[iOld];\r

  \      }\r

  \      else {\r

  \        let [ir, ic] = (rOld != rNew) ? [r + 1, c] : [r, c + 1];\r

  \        let iOld = iFromRowCol(ir, ic, rOld, cOld);\r

  \        boardArrNew[i] = boardArrOld[iOld];\r

  \      }\r

  \    }\r

  \  }\r

  \  return { rows: rNew, cols: cNew, boardArr: boardArrNew, extras: rest };\r

  }"
refillCharInput: function refillCharInput(inp, ch) { fillCharInput(inp, ch); }
register: "function register(el, id, type, x, y, nid1, nid2) {\r

  \  let lst = addIfKeys(EC, [y, x], []);\r

  \  lst.push(el);\r

  \  lst = addIfKeys(ET, [type], []);\r

  \  lst.push(el);\r

  \  if (id in EID) {\r

  \  }\r

  \  EID[id] = el;\r

  \  if (type == 'edge' && nid1 !== undefined && nid2 !== undefined) {\r

  \    ENN[comp_(nid1, nid2)] = el;\r

  \  }\r

  }"
register_menu_item: function register_menu_item(elem, key, handler) { }
register_node: "function register_node(content, type, oid, path, r) {\r

  \  let n = {\r

  \    content: content,\r

  \    type: type,\r

  \    oid: oid,\r

  \    path: path,\r

  \    children: [],\r

  \  };\r

  \  r.add_node(n, oid);\r

  \  return n;\r

  }"
registerAsNewItem: function registerAsNewItem(item) { item.id = iRegister(item); return item; }
registeredItemCopy: function registeredItemCopy(orig) { let item = jsCopy(orig);
  item.id = iRegister(item); return item; }
registerElement: "function registerElement(mobj) {\r

  \  elements[mobj.id] = mobj;\r

  }"
registerItems: "function registerItems(items) {\r

  \  for (const i of items) UIS[i.div.id] = i;\r

  }"
registerObject: "function registerObject(what, props, mapping, mParentId) {\r

  \  ensureUIS();\r

  \  let mk = new MK();\r

  \  let id = mk.id = getUID();\r

  \  if (mParentId) mk.mParentId = mParentId;\r

  \  let oid = mk.oid = isDict(what) ? mapping.oid : what;\r

  \  let o = mk.o = isDict(what) ? what : isEmpty(props) ?
  getServerObject(oid) : mapping.omap;\r

  \  let myPath = mk.myPath = isDict(what) ? mapping.path + o.key : oid ==
  mapping.oid ? oid + mapping.props.join('.') : what;\r

  \  mk.isLeaf = isDict(what) || oid != mapping.oid;\r

  \  let idType = mk.idType = 'm';\r

  \  listKey(path2mainIds, myPath, id);\r

  \  mk.mapping = mapping;\r

  \  linkObjects(id, oid);\r

  \  listKey(IdOwner, idType, id);\r

  \  UIS[id] = mk;\r

  \  return mk;\r

  }"
registerObject_dep: "function registerObject_dep(o, idType, loc, rsgType) {\r

  \  let id = getUID();\r

  \  let mk = new MK();\r

  \  mk.o = o.o;\r

  \  mk.info = o.info;\r

  \  let oid = stringBefore(o.oid, '.');\r

  \  mk.oid = oid;\r

  \  mk.path = o.oid;\r

  \  mk.rsg = rsgType;\r

  \  mk.id = id;\r

  \  mk.idType = idType;\r

  \  mk.loc = loc;\r

  \  if (o.ui) registerUiFor(mk, o.ui);\r

  \  linkObjects(id, oid);\r

  \  listKey(IdOwner, idType, id);\r

  \  UIS[id] = mk;\r

  \  return mk;\r

  }"
registerUiFor: function registerUiFor(mk, ui) { mk.elem = ui; mk.elem.id =
  mk.id; mk.parts.elem = ui; mk.domType = getTypeOf(ui); mk.cat =
  DOMCATS[mk.domType]; }
reindex_items: function reindex_items(items) { let i = 0; items.map(x => {
  x.index = i; i++; }); }
reload: "function reload() {\r

  \  console.log('reload!!!')\r

  \  if (radio_contacts.checked == true) get_contacts();\r

  \  else if (radio_chat.checked == true) get_chats();\r

  \  else if (radio_games.checked == true) get_games();\r

  \  else if (radio_play.checked == true) get_play();\r

  }"
reload_assets: "function reload_assets() {\r

  \  const asset_names = {\r

  \    'Syms': 'allSyms',\r

  \    'users': 'db_users',\r

  \    'games': 'db_games',\r

  \    'tables': 'db_tables',\r

  \  }\r

  \  assets_get(arguments);\r

  }"
reload_last_game_state: function reload_last_game_state() { if
  (!in_game_open_prompt()) open_prompt(Session.cur_me.state); }
reload_prompt: "function reload_prompt(fen) {\r

  \  console.assert(!uiActivated, 'open_prompt with uiActivated ON
  !!!!!!!!!!!!!!!!!!!!!!!!!!');\r

  \  let game = Session.cur_game;\r

  \  let uname = Session.cur_user;\r

  \  let g = Session;\r

  \  let next = lookup(DB.games, [game]); if (next) copyKeys(next, g);\r

  \  next = lookup(DB.users, [uname, 'games', game]); if (next) copyKeys(next,
  g);\r

  \  let level = g.level = valf(g.startlevel, g.def_startlevel);\r

  \  lookupSet(DB.users, [uname, 'games', game, 'startlevel'], level);\r

  \  next = lookup(DB.games, [game, 'levels']);\r

  \  if (next) copyKeys(next[level], g);\r

  \  g.maxlevel = valf(get_keys(next).length, 0) - 1;\r

  \  g.color = getColorDictColor(g.color);\r

  \  g.winning_score = Session.cur_table.options.winning_score;\r

  \  delete g.levels;\r

  \  clearTable(); set_background_color(g.color);\r

  \  QContextCounter += 1;\r

  \  show_game_name(g.friendly);\r

  \  show_title(g.table.friendly);\r

  \  show_level(g.level, g.maxlevel);\r

  \  if (Session.is_badges) setBadgeLevel(g.level);\r

  \  g.startTime = get_timestamp();\r

  \  mLinebreak(dTable, 15);\r

  \  let items = g.items = spotit_deal(g.num_cards, g.rows, g.cols, g.vocab,
  g.lang, g.min_scale, g.max_scale, fen);\r

  \  Selected = null;\r

  }"
remove_card_shadow: function remove_card_shadow(c) {
  iDiv(c).firstChild.setAttribute('class', null); }
remove_from_selection: "function remove_from_selection(card) {\r

  \  if (nundef(Z.A)) return;\r

  \  let A = Z.A;\r

  \  let item = firstCond(A.items, x => x.id == card.id);\r

  \  if (isdef(item)) {\r

  \    let idx = item.index;\r

  \    A.items.splice(item.index, 1);\r

  \    removeInPlace(A.selected, item.index);\r

  \    make_card_unselectable(item);\r

  \    make_card_unselected(item);\r

  \    reindex_items(A.items);\r

  \  }\r

  }"
remove_hourglass: function remove_hourglass(uname) { let d = mBy(`dh_${uname}`);
  if (isdef(d)) mRemove(d); }
remove_hover_ui: function remove_hover_ui(b) { b.onmouseenter = null; b.onmouseleave = null; }
remove_player: "function remove_player(fen, uname) {\r

  \  if (nundef(fen.original_players)) fen.original_players =
  jsCopy(fen.players);\r

  \  removeInPlace(fen.plorder, uname);\r

  \  delete fen.players[uname];\r

  \  return fen.plorder;\r

  }"
remove_tides_from_play: "function remove_tides_from_play(fen, plname, tides) {\r

  \  let pl = fen.players[plname];\r

  \  if (nundef(tides)) tides = pl.tides.keys;\r

  \  for (const tide of tides) {\r

  \    if (tide.path.includes('hand')) { removeInPlace(pl.hand, tide.key); }\r

  \    else if (tide.path.includes('stall')) { removeInPlace(pl.stall,
  tide.key); }\r

  \  }\r

  \  ari_history_list([`${plname} tides ${tides.map(x => x.key).join(',
  ')}!`], 'tide');\r

  }"
remove_tithes_from_play: "function remove_tithes_from_play(fen, plname, tithes)
  {\r

  \  let pl = fen.players[plname];\r

  \  if (nundef(tithes)) tithes = pl.tithes.keys;\r

  \  for (const tithe of tithes) {\r

  \    if (tithe.path.includes('hand')) { removeInPlace(pl.hand, tithe.key);
  }\r

  \    else if (tithe.path.includes('stall')) { removeInPlace(pl.stall,
  tithe.key); }\r

  \  }\r

  \  ari_history_list([`${plname} tithes ${tithes.map(x => x.key).join(',
  ')}!`], 'tithe');\r

  }"
remove_ui_items: "function remove_ui_items(items) {\r

  \  console.log('remove_ui_items', items);\r

  \  for (const item of items) {\r

  \    let card = item.o;\r

  \    make_card_unselectable(item);\r

  \    iDiv(item.o).remove();\r

  \  }\r

  }"
removeAllEvents: "function removeAllEvents(elem) {\r

  \  var a = elem.attributes, i, l, n;\r

  \  if (a) {\r

  \    for (i = a.length - 1; i >= 0; i -= 1) {\r

  \      n = a[i].name;\r

  \      if (typeof elem[n] === 'function') {\r

  \        console.log('.......removing', n, 'from', elem.id)\r

  \        elem[n] = null;\r

  \      }\r

  \    }\r

  \  }\r

  }"
removeAllGlobalHandlers: "function removeAllGlobalHandlers() {\r

  \  removeEventListener('keyup', keyUpHandler);\r

  \  removeEventListener('keydown', keyDownHandler);\r

  \  document.getElementById('login_form').removeEventListener('submit',
  onLoginSubmitted);\r

  \  document.getElementById('bLogout').removeEventListener('click',
  onClickLogout);\r

  \  if (USE_SOCKETIO)
  document.getElementById('chat_form').removeEventListener('submit',
  onChatSubmitted);\r

  \  document.getElementById('bJoinGame').removeEventListener('click',
  onClickJoinGameLobby);\r

  \  document.getElementById('bCreateGame').removeEventListener('click',
  onClickCreateGameLobby);\r

  \  document.getElementById('bResumeGame').removeEventListener('click',
  onClickResumeGameLobby);\r

  }"
removeAllHighlighting: function removeAllHighlighting(id) { let ms = UIS[id]; ms.unhighAll(); }
removeAttributes: "function removeAttributes(elem) {\r

  \  while (elem.attributes.length > 0) {\r

  \    elem.removeAttribute(elem.attributes[0].name);\r

  \  }\r

  }"
removeBadgeAndRevertLevel: "function removeBadgeAndRevertLevel() {\r

  \  removeBadges(dLeiste, currentLevel);\r

  \  setBackgroundColor();\r

  \  proceedIfNotStepByStep();\r

  }"
removeBadges: "function removeBadges(dParent, level) {\r

  \  while (badges.length > level) {\r

  \    let badge = badges.pop();\r

  \    mRemove(iDiv(badge));\r

  \  }\r

  }"
removeBoard: "function removeBoard(R) {\r

  \  let oid = detectFirstBoardObject(R);\r

  \  removeServerObject(oid, 'board');\r

  }"
removeBorder: "function removeBorder(elem) {\r

  \  elem.style.border = null;\r

  }"
removeByProp: "function removeByProp(arr, prop, val) {\r

  \  for (var i = 0; i < arr.length; i++) {\r

  \    if (arr[i][prop] === val) {\r

  \      arr.splice(i, 1);\r

  \      i--;\r

  \      return;\r

  \    }\r

  \  }\r

  }"
removeCard: function removeCard(c, deck) { removeInPlace(deck, c); }
removeCardFromHand: "function removeCardFromHand(oid, hand, subArea) {\r

  \  let id = getMainId(oid);\r

  \  if (isdef(id)) {\r

  \    let mobj = UIS[id];\r

  \    mobj.detach();\r

  \    mobj.hand = null;\r

  \  }\r

  \  if (nundef(hand)) return;\r

  \  removeInPlace(hand.cards, oid);\r

  \  hand.numCards = hand.cards.length;\r

  \  _repositionCards(hand, subArea);\r

  }"
removeCards: "function removeCards(deck) {\r

  \  return removeTopNCards(deck, getNumCards(deck));\r

  }"
removeCardsFromTo: "function removeCardsFromTo(deck, iFrom, iTo) {\r

  \  let n = iTo - iFrom + 1;\r

  \  return removeNCardsFrom(deck, iFrom, n);\r

  }"
removeClass: function removeClass(el, clName) { if (!el) return;
  el.classList.remove(clName); }
removeClickHandler: function removeClickHandler(id) { let ms = UIS[id]; ms.removeHandlers(); }
removeColNew: function removeColNew(board, cClick) { return reduceBoard(board,
  board.rows, board.cols - 1, cClick); }
removeCommentsFromLine: "function removeCommentsFromLine(line) {\r

  \  let l = line;\r

  \  if (!l.includes(\"`//\") && !l.includes(\"'//\") && !l.includes(\"//'\")
  && !l.includes(\"http\")) {\r

  \    l = replaceAllFast(line, '://', ':@@');\r

  \    l = replaceAllFast(l, '//#', '@@#');\r

  \    l = stringBefore(l, '//');\r

  \    l = replaceAllFast(l, '@@#', '//#');\r

  \    l = replaceAllFast(l, ':@@', '://');\r

  \  }\r

  \  if (l.trim().endsWith('*/')) l = stringBefore(l, '/*');\r

  \  return l;\r

  }"
removeDOM: function removeDOM(elem) { purge(elem); }
removeDuplicates: "function removeDuplicates(keys, prop) {\r

  \  let di = {};\r

  \  let res = [];\r

  \  let items = keys.map(x => Syms[x]);\r

  \  for (const item of items) {\r

  \    if (isdef(di[item.best])) { continue; }\r

  \    res.push(item);\r

  \    di[item.key] = true;\r

  \  }\r

  \  return res.map(x => x.key);\r

  }"
removeElem: "function removeElem(elem) {\r

  \  removeAllEvents(elem);\r

  \  elem.remove();\r

  }"
removeEvents: "function removeEvents(elem) {\r

  \  for (const evname of arguments) {\r

  \    elem['on' + evname] = null;\r

  \  }\r

  }"
removeFilterHighlight: function removeFilterHighlight(ms) { ms.unhighC(); }
RemoveGUIPiece: "function RemoveGUIPiece(sq) {\r

  \  $(\".Piece\").each(function (index) {\r

  \    if ((RanksBrd[sq] == 7 - Math.round($(this).position().top / 60)) &&
  (FilesBrd[sq] == Math.round($(this).position().left / 60))) {\r

  \      $(this).remove();\r

  \    }\r

  \  });\r

  }"
removeHoverHandlers: function removeHoverHandlers(id) { let ms = UIS[id]; ms.removeHandlers(); }
removeIf: function removeIf(arr, el) { removeInPlace(arr, el); }
removeInPlace: "function removeInPlace(arr, el) {\r

  \  arrRemovip(arr, el);\r

  }"
removeInPlaceKeys: "function removeInPlaceKeys(dict, keys) {\r

  \  for (const k of keys) {\r

  \    delete dict[k];\r

  \  }\r

  }"
removeInteraction: function removeInteraction(id) { let ms = UIS[id];
  ms.removeHandlers(); ms.unhighAll(); }
removeKeyHandler: "function removeKeyHandler(k) {\r

  \  let f = lookup(DA, ['keyup', k]);\r

  \  if (lookup(DA, ['keyup', k])) {\r

  \    delete DA.keyup[k];\r

  \  }\r

  \  if (lookup(DA, ['keydown', k])) {\r

  \    delete DA.keydown[k];\r

  \  }\r

  }"
removeLabel: "function removeLabel(item) {\r

  \  if (isdef(item.live.dLabel)) {\r

  \    item.live.dLabel.remove();\r

  \    delete item.live.dLabel;\r

  \  }\r

  \  return item;\r

  }"
removeMarkers: "function removeMarkers() {\r

  \  for (const m of Markers) {\r

  \    mRemoveGracefully(m);\r

  \  }\r

  \  Markers = [];\r

  }"
removeNCardsFrom: "function removeNCardsFrom(deck, iFrom, n) {\r

  \  n = Math.min(getNumCards(deck), n);\r

  \  return deck.cards.splice(iFrom, n);\r

  }"
removeNonAlphanum: "function removeNonAlphanum(s) {\r

  \  let res = '';\r

  \  let nonalphas = '';\r

  \  for (const l of s) {\r

  \    if (isAlphaNumeric(l)) res += l; else nonalphas += l;\r

  \  }\r

  \  return { alphas: res, whites: nonalphas };\r

  }"
removeOidKey: "function removeOidKey(oid, key, R) {\r

  \  let nodeInstances = lookup(R.rNodesOidKey, [oid, key]);\r

  \  if (!nodeInstances) {\r

  \    console.log('nothing to remove!', oid, key);\r

  \    return;\r

  \  }\r

  \  for (const uid of nodeInstances) {\r

  \    let n1 = R.rNodes[uid];\r

  \    recRemove(n1, R);\r

  \  }\r

  }"
removeOuterDoors: "function removeOuterDoors(house) {\r

  \  console.log(house.doors);\r

  \  for (const did of jsCopy(house.doors)) {\r

  \    console.log(did)\r

  \    let door = Items[did];\r

  \    iDiv(door).remove();\r

  \    console.log('door', door);\r

  \    for (const rid of door.rooms) { removeInPlace(Items[rid].doors, did);
  }\r

  \    removeInPlace(house.doors, did);\r

  \  }\r

  \  console.log(house.doors);\r

  }"
removePeepFromCrowd: "function removePeepFromCrowd(peep) {\r

  \  removeItemFromArray(crowd, peep)\r

  \  availablePeeps.push(peep)\r

  }"
removePic: "function removePic(item) {\r

  \  let div = item.div;\r

  \  let newItem = getLbl(item.key, item.sz, item.bg, item.label);\r

  \  clearElement(div);\r

  \  mAppend(div, newItem.div.children[0]);\r

  \  delete item.pic;\r

  \  item.text = newItem.text;\r

  }"
removePicture: "function removePicture(pic, reorder = false) {\r

  \  removeInPlace(Pictures, pic);\r

  \  if (reorder) {\r

  \    iDiv(pic).remove();\r

  \    maLayout(Pictures, dTable);\r

  \  } else {\r

  \    iDiv(pic).style.opacity = 0;\r

  \  }\r

  }"
removeRobber: "function removeRobber(R) {\r

  \  let robberOid = firstCondDict(R._sd, x => x.o.obj_type == 'robber');\r

  \  if (nundef(robberOid)) {\r

  \    console.log('this test is not applicable!');\r

  \  }\r

  \  removeServerObject(robberOid, 'robber');\r

  }"
removeRowNew: function removeRowNew(board, cClick) { return reduceBoard(board,
  board.rows - 1, board.cols, cClick); }
removeServerObject: "function removeServerObject(oid, label) {\r

  \  let o = R.getO(oid);\r

  \  if (nundef(o)) {\r

  \    console.log('object cannot be removed because not in R', oid);\r

  \    return;\r

  \  }\r

  \  if (isdef(label)) TV[label] = { oid: oid, o: o };\r

  \  let activate = R.isUiActive;\r

  \  if (activate) deactivateUis(R);\r

  \  delete sData[oid];\r

  \  completelyRemoveServerObjectFromRsg(oid, R);\r

  \  console.log('removed oid', oid);\r

  \  updateOutput(R);\r

  \  if (activate) activateUis(R);\r

  }"
removeTopNCards: "function removeTopNCards(deck, n) {\r

  \  n = Math.min(getNumCards(deck), n);\r

  \  return deck.cards.splice(-n);\r

  }"
render: "function render() {\r

  \  canvas.width = canvas.width\r

  \  cx.save()\r

  \  cx.scale(devicePixelRatio, devicePixelRatio)\r

  \  crowd.forEach((peep) => {\r

  \    peep.render(cx)\r

  \  })\r

  \  cx.restore()\r

  }"
renderVisualStructures: "function renderVisualStructures(ipal = 2) {\r

  \  for (const key in visualStructures) {\r

  \    let msList = visualStructures[key];\r

  \    let board = msList[0];\r

  \    board.setbg(getpal(ipal)).draw();\r

  \    ipal += 1;\r

  \    for (let i = 1; i < msList.length; i++) {\r

  \      msList[i].setbg(getpal(ipal)).draw();\r

  \    }\r

  \  }\r

  }"
renewTimer: function renewTimer(G, elem, onTimeOver = null) { if
  (nundef(GameTimer)) GameTimer = new TimerClass(G); GameTimer.restart(G, elem,
  onTimeOver); }
replace_jolly: "function replace_jolly(key, j) {\r

  \  let jolly_idx = find_index_of_jolly(j);\r

  \  j[jolly_idx] = key;\r

  }"
replaceAll: "function replaceAll(str, sSub, sBy) {\r

  \  let regex = new RegExp(sSub, 'g');\r

  \  return str.replace(regex, sBy);\r

  }"
replaceAllFast: function replaceAllFast(str, sSub, sBy) { return replaceAll(str, sSub, sBy); }
replaceAllSafe: function replaceAllSafe(str, sSub, sBy) { return
  replaceAllSpecialChars(str, sSub, sBy); }
replaceAllSpecialChars: function replaceAllSpecialChars(str, sSub, sBy) { return
  str.split(sSub).join(sBy); }
replaceAllX: function replaceAllX(str, sSub, sBy) { return
  replaceAllSpecialChars(str, sSub, sBy); }
replaceAtString: function replaceAtString(s, i, ssub) { return s.substring(0, i)
  + ssub + s.substring(i + 1); }
replaceEvery: "function replaceEvery(w, letter, nth) {\r

  \  let res = '';\r

  \  for (let i = 1; i < w.length; i += 2) {\r

  \    res += letter;\r

  \    res += w[i];\r

  \  }\r

  \  if (w.length % 2) res += w[0];\r

  \  return res;\r

  }"
replaceFractionOfWordBy: "function replaceFractionOfWordBy(w, letter = 'w', fr =
  .5) {\r

  \  let len = Math.ceil(w.length * fr);\r

  \  let len1 = Math.floor(w.length * fr);\r

  \  let sub = letter.repeat(len);\r

  \  w = sub + w.substring(0, len1);\r

  \  return w;\r

  }"
replaceIdName: "function replaceIdName(sssname, R, workingSpec) {\r

  \  let newSpecNodeUids = {};\r

  \  for (const id of R.idarr) {\r

  \    let name = id.idName;\r

  \    if (name != sssname) continue;\r

  \    let spk = id.specKey;\r

  \    let idpath = id.ppath;\r

  \    let [key, obj] = findAddress(spk, workingSpec, idpath);\r

  \    let sub = [];\r

  \    for (const ref of R.refarr) {\r

  \      if (ref.idName != name) continue;\r

  \      let idnode = obj[key];\r

  \      let uid = getUID('sp');\r

  \      newSpecNodeUids[uid] = { uid: uid, ref: ref, id: id };\r

  \      //#region other versions\r

  \      //#endregion\r

  \      let merged;\r

  \      if (isdef(idnode._merge) && idnode._merge == 'blend') {\r

  \        merged = merge1(ref.node, idnode);\r

  \        sub.push({ _NODE: uid });\r

  \      } else {\r

  \        merged = jsCopy(ref.node);\r

  \        let resultNode = jsCopy(idnode);\r

  \        resultNode._NODE = uid;\r

  \        delete resultNode._id;\r

  \        sub.push(resultNode);\r

  \      }\r

  \      delete merged._ref;\r

  \      delete merged._id;\r

  \      workingSpec[uid] = merged;\r

  \    }\r

  \    if (sub.length == 0) {\r

  \      if (isdef(R.lastSpec[name])) {\r

  \        obj[key]._NODE = name;\r

  \        delete obj[key]._id;\r

  \        alert('SPEC ERROR! =>please replace _id:' + name + ' by _NODE:',
  name);\r

  \      } else {\r

  \      }\r

  \    } else if (sub.length == 1) {\r

  \      if (isdef(obj[key]._NODE)) {\r

  \        let x = obj[key]._NODE;\r

  \        if (isList(x)) {\r

  \          x.unshift(sub[0]._NODE);\r

  \          obj[key]._NODE = jsCopy(x);\r

  \        } else {\r

  \          obj[key]._NODE = [x, sub[0]._NODE];\r

  \        }\r

  \      } else obj[key] = sub[0];\r

  \    } else {\r

  \      let res = obj[key];\r

  \      if (isdef(res._NODE)) {\r

  \        let x = res._NODE;\r

  \        for (let i = 0; i < sub.length; i++) sub[i]._NODE = [x,
  sub[i]._NODE];\r

  \        obj[key] = { sub: sub };\r

  \      } else obj[key] = { sub: sub };\r

  \    }\r

  \  }\r

  \  return newSpecNodeUids;\r

  }"
replaceLabel: function replaceLabel(item, label) { }
replaceNonEmptyByRandom: "function replaceNonEmptyByRandom(s, letters) {\r

  \  let res = '';\r

  \  for (const l of s) {\r

  \    if (l == ' ') res += ' '; else res += chooseRandom(letters);\r

  \  }\r

  \  return res;\r

  }"
replacePic: function replacePic(item, key) { }
replacePicAndLabel: "function replacePicAndLabel(item, key, label) {\r

  \  let div = item.div;\r

  \  let newItem = getPic(key, item.sz, item.bg, label);\r

  \  clearElement(div);\r

  \  mAppend(div, newItem.div.children[0]);\r

  \  mAppend(div, newItem.div.children[0]);\r

  \  item.pic = newItem.pic;\r

  \  item.text = newItem.text;\r

  }"
replaceSol: "function replaceSol(sol, diop) {\r

  \  let rhs = stringBefore(sol, '=');\r

  \  let type = rhs.includes('*') ? rhs.includes('R') ? 'div' : 'mult' :
  rhs.includes('R') ? 'minus' : 'plus';\r

  \  let i = 0;\r

  \  while (i < rhs.length) {\r

  \    if (rhs[i] == 'R') { diop.R = getOperand(type); i += 1; }\r

  \    else if (rhs[i] == 'r' && !isLetter(rhs[i + 1])) { if (nundef(diop.r))
  diop.r = getOperand(type); i += 1; }\r

  \    else if (rhs[i] == 'N') {\r

  \      i += 1;\r

  \      let inum = Number(rhs[i]);\r

  \      let k = 'N' + inum;\r

  \      if (nundef(diop[k])) diop[k] = getOperand(type);\r

  \      i += 1;\r

  \    } else if (rhs[i] == 'D') {\r

  \      i += 1;\r

  \      let inum = Number(rhs[i]);\r

  \      let k = 'D' + inum;\r

  \      i += 1;\r

  \      if (rhs[i] == '{') {\r

  \        let subs = rhs.substring(i);\r

  \        let inKlammern = stringBefore(subs, '}');\r

  \        rhs = rhs.substring(0, i) + stringAfter(subs, '}');\r

  \        i += inKlammern.length;\r

  \        let nums = allNumbers(inKlammern);\r

  \        diop[k] = chooseRandom(nums);\r

  \      } else if (nundef(diop[k])) {\r

  \        diop[k] = randomNumber(2, 9);\r

  \      }\r

  \    } else if (rhs[i] == 'F') {\r

  \      if (isdef(diop[rhs.substring(i, i + 2)])) { i += 2; continue; }\r

  \      let s_ab_i = rhs.substring(i);\r

  \      let s_vor_klammer_zu = stringBefore(s_ab_i, ')');\r

  \      let lenRaus = s_vor_klammer_zu.length + 1;\r

  \      let s_nach_fraction = stringAfter(s_ab_i, ')');\r

  \      let kFraction = s_ab_i.substring(0, 2);\r

  \      let kNum = s_ab_i.substring(3); kNum = stringBefore(kNum, ',');\r

  \      let kDenom = stringAfter(s_ab_i, ','); kDenom = stringBefore(kDenom,
  ')');\r

  \      rhs = rhs.substring(0, i) + 'math.fraction(' + kNum + ',' + kDenom +
  ')' + s_nach_fraction;\r

  \      let num = isNumber(kNum) ? Number(kNum) : isdef(diop[kNum]) ?
  diop[kNum] : null;\r

  \      let denom = isNumber(kDenom) ? Number(kDenom) : isdef(diop[kDenom]) ?
  diop[kDenom] : null;\r

  \      let fr = getRandomFraction(num, denom);\r

  \      diop[kFraction] = fr;\r

  \      if (!num) diop[kNum] = fr.n;\r

  \      if (!denom) diop[kDenom] = fr.d;\r

  \      i += 20;\r

  \    } else i += 1;\r

  \  }\r

  \  i = 0;\r

  \  while (i < rhs.length) {\r

  \    if (rhs[i] == 'n') {\r

  \      i += 1;\r

  \      let inum = Number(rhs[i]);\r

  \      let k = 'n' + inum;\r

  \      let kN = 'N' + inum;\r

  \      let x = diop[kN];\r

  \      if (nundef(diop[k])) diop[k] = randomNumber(2, x - 1);\r

  \      i += 1;\r

  \    } else i += 1;\r

  \  }\r

  \  let eq = rhs;\r

  \  for (const k in diop) {\r

  \    let val = diop[k];\r

  \    if (isFractionType(val)) val = `math.fraction(${val.n},${val.d})`;\r

  \    eq = eq.replace(k, val);\r

  \  }\r

  \  let result = eval(eq);\r

  \  let lhs = stringAfter(sol, '=').trim();\r

  \  if (isEmpty(lhs)) lhs = 'R';\r

  \  diop[lhs] = result;\r

  \  return [result, eq];\r

  }"
replaceWhite: function replaceWhite(s, sby = '_') { let w = toWords(s); return w.join(sby); }
report_poll: "function report_poll(obj) {\r

  \  polling_shield_off();\r

  \  update_cur_table(obj);\r

  \  status_message_off();\r

  \  get_games();\r

  }"
repositionCards: "function repositionCards(msCollection) {\r

  \  if (msCollection.numCards == 0) return;\r

  \  let dTitle = msCollection.parts.title;\r

  \  let dBody = msCollection.parts.hand;\r

  \  let dHand = msCollection.elem;\r

  \  let bTitle = getBounds(dTitle);\r

  \  let bBody = getBounds(dBody, true);\r

  \  let bHand = getBounds(dHand);\r

  \  let yBody = bTitle.height;\r

  \  let hHand = msCollection.hHand;\r

  \  let hAvailable = hHand - yBody;\r

  \  let wHand = bHand.width;\r

  \  let W = wHand;\r

  \  let H = hHand;\r

  \  let w = msCollection.wCard;\r

  \  let h = msCollection.hCard;\r

  \  let n = msCollection.numCards;\r

  \  let x, y, dx, padding;\r

  \  let offset = { x: 0, y: 0 };\r

  \  if (msCollection.adjustSize) {\r

  \    W = w + (n) * w / 4;\r

  \    H = h;\r

  \    padding = 0;\r

  \    msCollection.setSize(W + 2 * padding + yBody, H);\r

  \    x = padding + offset.x;\r

  \    y = padding + offset.y;\r

  \  } else {\r

  \    padding = x = y = 0;\r

  \  }\r

  \  dx = n > 1 ? (W - w) / (n - 1) : 0;\r

  \  if (dx > w) dx = w;\r

  \  let i = 0;\r

  \  for (const oidCard of msCollection.cards) {\r

  \    let id = getMainId(oidCard);\r

  \    let c = UIS[id];\r

  \    c.zIndex = c.elem.style.zIndex = i;\r

  \    i += 1;\r

  \    c.setPos(x, y);\r

  \    x += dx;\r

  \  }\r

  }"
reset_context: function reset_context() { CONTEXT = null; }
reset_db_values: "function reset_db_values() {\r

  \  reset_winnerlist_for_all_games();\r

  \  reset_game_values_for_all_users();\r

  }"
reset_elo: function reset_elo(user, game) { set_elo(user, game, 100); }
reset_game_values_for_all_users: function reset_game_values_for_all_users() {
  for (const uname in DB.users) { reset_game_values_for_user(uname); } }
reset_game_values_for_user: "function reset_game_values_for_user(user) {\r

  \  let defaults = {\r

  \    'gul': { gSpotit: { startlevel: 0 }, gMaze: { startlevel: 0 },
  gAnagram: { startlevel: 0 } },\r

  \    'nasi': { gSpotit: { startlevel: 0 }, gMaze: { startlevel: 0 },
  gAnagram: { startlevel: 0 } },\r

  \    'felix': { gSpotit: { startlevel: 5 }, gMaze: { startlevel: 5 },
  gAnagram: { startlevel: 3 } },\r

  \    'lauren': { gSpotit: { startlevel: 5 }, gMaze: { startlevel: 5 },
  gAnagram: { startlevel: 5 } },\r

  \    'mimi': { gSpotit: { startlevel: 0 }, gMaze: { startlevel: 0 },
  gAnagram: { startlevel: 0 } },\r

  \  };\r

  \  let norm = {};\r

  \  for (const g in DB.games) {\r

  \    norm[g] = { startlevel: DB.games[g].def_startlevel };\r

  \  }\r

  \  lookupSetOverride(DB.users, [user, 'games'], valf(defaults[user],
  norm));\r

  }"
reset_settings: "function reset_settings() {\r

  \  for (const k in settings) { settings[k] = defaults[k]; }\r

  \  show_settings();\r

  }"
reset_winnerlist_for_all_games: function reset_winnerlist_for_all_games() { for
  (const gname in DB.games) { reset_winnerlist_for_game(gname); } }
reset_winnerlist_for_game: function reset_winnerlist_for_game(game) {
  lookupSetOverride(DB.games, [game, 'winnerlist'], []); }
reset_zoom_on_resize: "function reset_zoom_on_resize() {\r

  \  window.onresize = null;\r

  \  bodyZoom = 1.0;\r

  \  document.body.style.transform = 'none';\r

  }"
resetActiveButton: "function resetActiveButton() {\r

  \  if (ActiveButton != null) {\r

  \    let ba = ActiveButton;\r

  \    mStyleX(ba, { bg: 'white', fg: 'black' });\r

  \    let caption = ba.id.substring(2);\r

  \    caption = separateAtCapitals(caption);\r

  \    ba.innerHTML = caption;\r

  \    ActiveButton = null;\r

  \  } else {\r

  \  }\r

  }"
ResetBoard: "function ResetBoard() {\r

  \  var index = 0;\r

  \  for (index = 0; index < BRD_SQ_NUM; ++index) {\r

  \    brd_pieces[index] = SQUARES.OFFBOARD;\r

  \  }\r

  \  for (index = 0; index < 64; ++index) {\r

  \    brd_pieces[SQ120(index)] = PIECES.EMPTY;\r

  \  }\r

  \  for (index = 0; index < 14 * 120; ++index) {\r

  \    brd_pList[index] = PIECES.EMPTY;\r

  \  }\r

  \  for (index = 0; index < 2; ++index) {\r

  \    brd_material[index] = 0;\r

  \  }\r

  \  for (index = 0; index < 13; ++index) {\r

  \    brd_pceNum[index] = 0;\r

  \  }\r

  \  brd_side = COLOURS.BOTH;\r

  \  brd_enPas = SQUARES.NO_SQ;\r

  \  brd_fiftyMove = 0;\r

  \  brd_ply = 0;\r

  \  brd_hisPly = 0;\r

  \  brd_castlePerm = 0;\r

  \  brd_posKey = 0;\r

  \  brd_moveListStart[brd_ply] = 0;\r

  }"
resetPlayerCards: "function resetPlayerCards() {\r

  \  for (const plid in serverData.players) {\r

  \    let pl = serverData.players[plid];\r

  \    if (GAME == 'catan') pl.devcards = { _set: [] }; else pl.hand = { _set:
  [] };\r

  \  }\r

  }"
resetRound: "function resetRound() {\r

  \  clearTimeouts();\r

  \  clearFleetingMessage();\r

  \  clearTable();\r

  }"
resetScore: "function resetScore() {\r

  \  Score = { gameChange: true, levelChange: true, nTotal: 0, nCorrect: 0,
  nCorrect1: 0, nPos: 0, nNeg: 0, labels: true };\r

  }"
resetState: "function resetState() {\r

  \  clearTimeouts();\r

  \  pauseSound();\r

  \  onkeydown = null; onkeypress = null; onkeyup = null;\r

  \  lastPosition = 0;\r

  \  DELAY = 1000;\r

  \  setBackgroundColor();\r

  }"
resetUIDs: function resetUIDs() { UIDCounter = 0; FRUIDCounter = -1; }
resetUIS: "function resetUIS() {\r

  \  UIS = {};\r

  \  IdOwner = {};\r

  \  id2oids = {};\r

  \  oid2ids = {};\r

  \  id2uids = {};\r

  }"
resize: "function resize() {\r

  \  stage.width = canvas.clientWidth\r

  \  stage.height = canvas.clientHeight\r

  \  canvas.width = stage.width * devicePixelRatio\r

  \  canvas.height = stage.height * devicePixelRatio\r

  \  crowd.forEach((peep) => {\r

  \    peep.walk.kill()\r

  \  })\r

  \  crowd.length = 0\r

  \  availablePeeps.length = 0\r

  \  availablePeeps.push(...allPeeps)\r

  \  initCrowd()\r

  }"
resizeBoard: "function resizeBoard(nuiBoard, R) {\r

  \  let uidBoard = nuiBoard.uid;\r

  \  let sz = updateSizes(nuiBoard);\r

  \  nuiBoard.params.sizes = sz.sNew;\r

  \  let params = nuiBoard.params;\r

  \  let gap = params.field_spacing - sz.sOrig.f;\r

  \  params.field_spacing = sz.sNew.f + gap;\r

  \  for (const name of ['fields', 'edges', 'corners']) {\r

  \    let group = nuiBoard.bi[name];\r

  \    for (const oid in group) {\r

  \      let elSize_old = sz.sOrig[name[0]];\r

  \      let elSize = sz.sNew[name[0]];\r

  \      if (elSize_old == elSize) { continue; }\r

  \      let uid = R.getUidWithParent(oid, uidBoard);\r

  \      let n = R.uiNodes[uid];\r

  \      let ui = n.ui;\r

  \      let info = n.info;\r

  \      let shape = n.info.shape;\r

  \      n.info.size = elSize;\r

  \      n.size = { w: elSize, h: elSize };\r

  \      n.sizeMeasured = jsCopy(n.size);\r

  \      gSize(ui, elSize, elSize, shape);\r

  \      n.typParams.size = n.params.size = elSize;\r

  \    }\r

  \  }\r

  \  gridLayout(nuiBoard, R);\r

  }"
resplay_container: "function resplay_container(targetgroup, ovpercent) {\r

  \  let d = iDiv(targetgroup);\r

  \  let card = Items[targetgroup.ids[0]];\r

  \  let ov = valf(targetgroup.ov, .1222)\r

  \  mContainerSplay(d, 2, card.w, card.h, arrChildren(d).length, ov *
  card.w);\r

  \  let items = arrChildren(d).map(x => Items[x.id]);\r

  \  ui_add_cards_to_hand_container(d, items);\r

  }"
rest: "function rest() {\r\n}"
restart_selection_process: "function restart_selection_process() {\r

  \  let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A,
  Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  if (Z.game != 'ferro') {\r

  \    console.log('attempt to restart selection process in non-ferro
  game!!!');\r

  \    return;\r

  \  }\r

  \  A.selectedCards.map(x => ari_make_unselected(x));\r

  \  mClear('dSelections0');\r

  \  Z.A = { level: 0, di: {}, ll: [], items: [], selected: [], tree: null,
  breadcrumbs: [], sib: [], command: null };\r

  \  Z.stage = 'card_selection';\r

  \  ferro_pre_action();\r

  }"
restartGame: "async function restartGame() {\r

  \  await sendRestart();\r

  \  d3.select('button').text('NEXT MOVE').on('click', interaction);\r

  \  gameStep();\r

  }"
restartHost: function restartHost(callback) { let route = '/restart';
  _sendRouteJS(route, callback); }
restartQ: "function restartQ() {\r

  \  QReset();\r

  \  console.log('===>RESET', QCounter, Q, AkQ);\r

  }"
restartTime: function restartTime(elem) { TimestampStarted = msNow();
  TimeElapsed = 0; startTime(elem); }
restoreBehaviors: "function restoreBehaviors() {\r

  \  PLAYER_UPDATE = {};\r

  \  TABLE_UPDATE = {};\r

  \  FUNCS = {};\r

  \  PLAYER_CREATE = {};\r

  \  TABLE_CREATE = {};\r

  \  V = {};\r

  }"
restoreServerData: "function restoreServerData() {\r

  \  resetPlayerCards();\r

  \  let opt = serverData.options;\r

  \  if (opt) {\r

  \    let keys = Object.keys(opt);\r

  \    let firstKey = keys[0];\r

  \    let actions = opt[firstKey].actions._set[0]._tuple[0]._set;\r

  \    removedActions.map(x => actions.push(x));\r

  \    removedActions = [];\r

  \  }\r

  }"
retrieveState: "function retrieveState(prefix = '') {\r

  \  let pack = localStorage.getItem(prefix + '_pack');\r

  \  if (isdef(pack)) {\r

  \    pack = JSON.parse(pack);\r

  \    console.log('retrieved settings (baseColor)',
  pack.settings.baseColor);\r

  \    G.settings = pack.settings;\r

  \    Socket.emit('state', pack);\r

  \  } else {\r

  \    alert(`no settings ${prefix} in localStorage!`);\r

  \  }\r

  }"
return_elem_to_deck_from: function return_elem_to_deck_from(el, arr, deck) {
  elem_from_to(el, arr, deck); }
reveal_church_cards: "function reveal_church_cards() {\r

  \  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];\r

  \  let pl = fen.players[uplayer];\r

  \  let uichurch = UI.church;\r

  \  let dOpenTable = UI.dOpenTable;\r

  \  let church_cards = uichurch.items;\r

  \  uichurch.container.remove();\r

  \  UI.church = uichurch = ui_type_market(fen.church, dOpenTable, { maleft:
  25 }, 'church', 'church');\r

  }"
reverse: "function reverse(x) {\r

  \  if (isString(x)) {\r

  \    var newString = \"\";\r

  \    for (var i = x.length - 1; i >= 0; i--) {\r

  \      newString += x[i];\r

  \    }\r

  \    return newString;\r

  \  }\r

  \  if (isList(x)) return x.reverse();\r

  \  if (isDict(x)) return dict2list(x, 'value').reverse();\r

  \  return x;\r

  }"
reverseString: "function reverseString(s) {\r

  \  return toLetterList(s).reverse().join('');\r

  }"
rFloat: function rFloat(min = -1, max = 1) { return Math.random() * (max - min)
  + min; }
rGaussian: "function rGaussian(min, max, int = false) {\r

  \  function rGauss() {\r

  \    var rand = 0;\r

  \    for (var i = 0; i < 6; i += 1) { rand += Math.random(); }\r

  \    return rand / 6;\r

  \  }\r

  \  return int ? Math.floor(min + rGauss() * (max - min + 1)) : min +
  rGauss() * (max - min);\r

  }"
rgb2float: "function rgb2float(rgba) {\r

  \  return [\r

  \    rgba[0] / 255,\r

  \    rgba[1] / 255,\r

  \    rgba[2] / 255,\r

  \    rgba[3]\r

  \  ]\r

  }"
rgb2hex: "function rgb2hex(rgba) {\r

  \  var dig, hex = '#';\r

  \  for (var i = 0; i < 3; ++i) {\r

  \    dig = rgba[i];\r

  \    dig = dig.toString(16);\r

  \    hex += ('00' + dig).substr(dig.length);\r

  \  }\r

  \  return hex;\r

  }"
rgb2hsl: "function rgb2hsl(r, g, b) {\r

  \  (r /= 255), (g /= 255), (b /= 255);\r

  \  var max = Math.max(r, g, b),\r

  \    min = Math.min(r, g, b);\r

  \  var h,\r

  \    s,\r

  \    l = (max + min) / 2;\r

  \  if (max == min) {\r

  \    h = s = 0;\r

  \  } else {\r

  \    var d = max - min;\r

  \    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r

  \    switch (max) {\r

  \      case r:\r

  \        h = (g - b) / d + (g < b ? 6 : 0);\r

  \        break;\r

  \      case g:\r

  \        h = (b - r) / d + 2;\r

  \        break;\r

  \      case b:\r

  \        h = (r - g) / d + 4;\r

  \        break;\r

  \    }\r

  \    h /= 6;\r

  \  }\r

  \  return [h, s, l];\r

  }"
rgb2hsv: "function rgb2hsv(r, g, b) {\r

  \  let v = Math.max(r, g, b);\r

  \  let n = v - Math.min(r, g, b);\r

  \  let h = n && (v == r ? (g - b) / n : v == g ? 2 + (b - r) / n : 4 + (r -
  g) / n);\r

  \  h = 60 * (h < 0 ? h + 6 : h);\r

  \  s = v && n / v;\r

  \  return {\r

  \    h: h,\r

  \    s: s * 100,\r

  \    v: (v * 100) / 255\r

  \  };\r

  }"
rgbaStr: "function rgbaStr(rgba) {\r

  \  return 'rgba(' + rgba.join(',') + ')';\r

  }"
RGBAToHex9: "function RGBAToHex9(rgba) {\r

  \  let n = allNumbers(rgba);\r

  \  if (n.length < 3) {\r

  \    return randomHexColor();\r

  \  }\r

  \  let a = n.length > 3 ? n[3] : 1;\r

  \  let sa = alphaToHex(a);\r

  \  if (rgba.includes('%')) {\r

  \    n[0] = Math.round((n[0] * 255) / 100);\r

  \    n[1] = Math.round((n[1] * 255) / 100);\r

  \    n[2] = Math.round((n[2] * 255) / 100);\r

  \  }\r

  \  return '#' + ((1 << 24) + (n[0] << 16) + (n[1] << 8) +
  n[2]).toString(16).slice(1) + sa;\r

  }"
RGBAToHSLA: "function RGBAToHSLA(rgba) {\r

  \  let ex =
  /^rgba\\((((((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5]),\\s?)){3})|(((([1-9]?\
  \\d(\\.\\d+)?)|100|(\\.\\d+))%,\\s?){3}))|(((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)\
  |25[0-5])\\s){3})|(((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%\\s){3}))\\/\\s)((0?\
  \\.\\d+)|[01]|(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%)\\)$/i;\r

  \  if (ex.test(rgba)) {\r

  \    let sep = rgba.indexOf(',') > -1 ? ',' : ' ';\r

  \    rgba = rgba\r

  \      .substr(5)\r

  \      .split(')')[0]\r

  \      .split(sep);\r

  \    if (rgba.indexOf('/') > -1) rgba.splice(3, 1);\r

  \    for (let R in rgba) {\r

  \      let r = rgba[R];\r

  \      if (r.indexOf('%') > -1) {\r

  \        let p = r.substr(0, r.length - 1) / 100;\r

  \        if (R < 3) {\r

  \          rgba[R] = Math.round(p * 255);\r

  \        }\r

  \      }\r

  \    }\r

  \    let r = rgba[0] / 255,\r

  \      g = rgba[1] / 255,\r

  \      b = rgba[2] / 255,\r

  \      a = rgba[3],\r

  \      cmin = Math.min(r, g, b),\r

  \      cmax = Math.max(r, g, b),\r

  \      delta = cmax - cmin,\r

  \      h = 0,\r

  \      s = 0,\r

  \      l = 0;\r

  \    if (delta == 0) h = 0;\r

  \    else if (cmax == r) h = ((g - b) / delta) % 6;\r

  \    else if (cmax == g) h = (b - r) / delta + 2;\r

  \    else h = (r - g) / delta + 4;\r

  \    h = Math.round(h * 60);\r

  \    if (h < 0) h += 360;\r

  \    l = (cmax + cmin) / 2;\r

  \    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r

  \    s = +(s * 100).toFixed(1);\r

  \    l = +(l * 100).toFixed(1);\r

  \    return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\r

  \  } else {\r

  \    return 'Invalid input color';\r

  \  }\r

  }"
RGBtoHCV: "function RGBtoHCV(RGB) {\r

  \  let P = RGB.g < RGB.b ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb,
  0.0, -1.0 / 3.0);\r

  \  let Q = RGB.r < P.x ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);\r

  \  let C = Q.x - min(Q.w, Q.y);\r

  \  let H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);\r

  \  return float3(H, C, Q.x);\r

  }"
rgbToHex: function rgbToHex(rgbStr) { return rgbStr && '#' + rgbStr.slice(4,
  -1).split(',').map(x => (+x).toString(16).padStart(2, '0')).join(''); }
RGBToHex7: "function RGBToHex7(c) {\r

  \  let n = allNumbers(c);\r

  \  if (c.includes('%')) {\r

  \    n[0] = Math.round((n[0] * 255) / 100);\r

  \    n[1] = Math.round((n[1] * 255) / 100);\r

  \    n[2] = Math.round((n[2] * 255) / 100);\r

  \  }\r

  \  return '#' + ((1 << 24) + (n[0] << 16) + (n[1] << 8) +
  n[2]).toString(16).slice(1);\r

  }"
RGBToHSL: "function RGBToHSL(rgb) {\r

  \  let ex =
  /^rgb\\((((((((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0-5]),\\s?)){2}|((((1?[1-9]?\
  \\d)|10\\d|(2[0-4]\\d)|25[0-5])\\s)){2})((1?[1-9]?\\d)|10\\d|(2[0-4]\\d)|25[0\
  -5]))|((((([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%,\\s?){2}|((([1-9]?\\d(\\.\\d+\
  )?)|100|(\\.\\d+))%\\s){2})(([1-9]?\\d(\\.\\d+)?)|100|(\\.\\d+))%))\\)$/i;\r

  \  if (ex.test(rgb)) {\r

  \    let sep = rgb.indexOf(',') > -1 ? ',' : ' ';\r

  \    rgb = rgb\r

  \      .substr(4)\r

  \      .split(')')[0]\r

  \      .split(sep);\r

  \    for (let R in rgb) {\r

  \      let r = rgb[R];\r

  \      if (r.indexOf('%') > -1) rgb[R] = Math.round((r.substr(0, r.length -
  1) / 100) * 255);\r

  \    }\r

  \    let r = rgb[0] / 255,\r

  \      g = rgb[1] / 255,\r

  \      b = rgb[2] / 255,\r

  \      cmin = Math.min(r, g, b),\r

  \      cmax = Math.max(r, g, b),\r

  \      delta = cmax - cmin,\r

  \      h = 0,\r

  \      s = 0,\r

  \      l = 0;\r

  \    if (delta == 0) h = 0;\r

  \    else if (cmax == r) h = ((g - b) / delta) % 6;\r

  \    else if (cmax == g) h = (b - r) / delta + 2;\r

  \    else h = (r - g) / delta + 4;\r

  \    h = Math.round(h * 60);\r

  \    if (h < 0) h += 360;\r

  \    l = (cmax + cmin) / 2;\r

  \    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r

  \    s = +(s * 100).toFixed(1);\r

  \    l = +(l * 100).toFixed(1);\r

  \    return 'hsl(' + h + ',' + s + '%,' + l + '%)';\r

  \  } else {\r

  \    return 'Invalid input color';\r

  \  }\r

  }"
rgbToHsl: "function rgbToHsl(r, g, b) {\r

  \  (r /= 255), (g /= 255), (b /= 255);\r

  \  var max = Math.max(r, g, b),\r

  \    min = Math.min(r, g, b);\r

  \  var h,\r

  \    s,\r

  \    l = (max + min) / 2;\r

  \  if (max == min) {\r

  \    h = s = 0;\r

  \  } else {\r

  \    var d = max - min;\r

  \    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r

  \    switch (max) {\r

  \      case r:\r

  \        h = (g - b) / d + (g < b ? 6 : 0);\r

  \        break;\r

  \      case g:\r

  \        h = (b - r) / d + 2;\r

  \        break;\r

  \      case b:\r

  \        h = (r - g) / d + 4;\r

  \        break;\r

  \    }\r

  \    h /= 6;\r

  \  }\r

  \  return [h, s, l];\r

  }"
rgbToHsv: "function rgbToHsv(r, g, b) {\r

  \  let v = Math.max(r, g, b);\r

  \  let n = v - Math.min(r, g, b);\r

  \  let h = n && (v == r ? (g - b) / n : v == g ? 2 + (b - r) / n : 4 + (r -
  g) / n);\r

  \  h = 60 * (h < 0 ? h + 6 : h);\r

  \  s = v && n / v;\r

  \  return {\r

  \    h: h,\r

  \    s: s * 100,\r

  \    v: (v * 100) / 255\r

  \  };\r

  }"
Rgen: "function Rgen(R, cycle) {\r

  \  if (cycle > 10) { console.log('MAX!!!!!!!!!'); return; }\r

  \  let workingSpec = jsCopy(R.lastSpec);\r

  \  RgenIdRef(R);\r

  \  RgenArrays(R);\r

  \  let name = RsortIds(workingSpec, R);\r

  \  let genKey = 'G';\r

  \  R.gens[genKey].push(workingSpec);\r

  \  R.lastSpec = workingSpec;\r

  \  R.ROOT = R.lastSpec.ROOT;\r

  \  if (name && !isEmpty(R.allIdRefNames)) Rgen(R, cycle + 1);\r

  }"
RgenArrays: "function RgenArrays(R) {\r

  \  R.idarr = [];\r

  \  R.refarr = [];\r

  \  for (const name in R.places) {\r

  \    let idByName = R.places[name];\r

  \    for (const spk in idByName) {\r

  \      let placelist = idByName[spk];\r

  \      for (const el of placelist) {\r

  \        R.idarr.push(el);\r

  \      }\r

  \    }\r

  \  }\r

  \  for (const name in R.refs) {\r

  \    let refByName = R.refs[name];\r

  \    for (const spk in refByName) {\r

  \      let refslist = refByName[spk];\r

  \      for (const el of refslist) {\r

  \        R.refarr.push(el);\r

  \      }\r

  \    }\r

  \  }\r

  \  R.idByNode = {};\r

  \  R.idByName = {};\r

  \  for (const name in R.places) {\r

  \    let idByName = R.places[name];\r

  \    for (const spk in idByName) {\r

  \      let list = idByName[spk];\r

  \      for (const el of list) {\r

  \        lookupAddToList(R.idByNode, [spk], el);\r

  \        lookupAddToList(R.idByName, [name], el);\r

  \      }\r

  \    }\r

  \  }\r

  \  R.refByNode = {};\r

  \  R.refByName = {};\r

  \  for (const name in R.refs) {\r

  \    let refByName = R.refs[name];\r

  \    for (const spk in refByName) {\r

  \      let list = refByName[spk];\r

  \      for (const el of list) {\r

  \        lookupAddToList(R.refByNode, [spk], el);\r

  \        lookupAddToList(R.refByName, [name], el);\r

  \      }\r

  \    }\r

  \  }\r

  \  for (const id of R.idarr) {\r

  \  }\r

  \  if (nundef(R.allIdRefNames)) R.allIdRefNames =
  intersection(Object.keys(R.idByName), Object.keys(R.refByName));\r

  }"
RgenIdRef: "function RgenIdRef(R, genKey = 'G') {\r

  \  let gen = R.lastSpec;\r

  \  if (nundef(R.orig_places) && !isEmpty(R.places)) R.orig_places =
  R.places;\r

  \  if (nundef(R.orig_refs) && !isEmpty(R.refs)) R.orig_refs = R.refs;\r

  \  R.places = {};\r

  \  R.refs = {};\r

  \  for (const k in gen) {\r

  \    let n = gen[k];\r

  \    R.check_ref(k, n);\r

  \  }\r

  \  for (const k in gen) {\r

  \    let n = gen[k];\r

  \    R.check_id(k, n, R);\r

  \  }\r

  }"
rHue: function rHue() { return (rNumber(0, 36) * 10) % 360; }
rInc: function rInc(o, prop, min, max) { o[prop] += rNumber(min, max); return
  o[prop]; }
rLetter: function rLetter(except) { return rLetters(1, except)[0]; }
rLetters: "function rLetters(n, except = []) {\r

  \  let all = 'abcdefghijklmnopqrstuvwxyz';\r

  \  for (const l of except) all = all.replace(l, '');\r

  \  console.log('all', all, except)\r

  \  return rChoose(toLetters(all), n);\r

  }"
rMappings: "function rMappings() {\r

  \  mappings = SPEC.mappings;\r

  \  if (nundef(mappings)) return false;\r

  \  let lst = odict2olist(mappings);\r

  \  console.log('_______________', mappings, lst);\r

  \  mappings = odict2olist(mappings).map(x => { let k = stringBefore(x.id,
  '.'); mappingTypes[k] = x[k] = true; return x; });\r

  \  console.log('mappings', mappings, mappingTypes);\r

  }"
rMergeSpec: "function rMergeSpec() {\r

  \  SPEC = deepmerge(defaultSpec, userSpec, { arrayMerge: overwriteMerge
  });\r

  \  if (userSpec.layout_alias) { SPEC.areas = userSpec.layout_alias; }\r

  \  if (userSpec.areas) { SPEC.areas = userSpec.areas; }\r

  \  delete SPEC.layout_alias;\r

  \  delete SPEC.asText;\r

  \  if (SHOW_SPEC) mById('SPEC').innerHTML = '<pre>\"' + jsonToYaml(SPEC) +
  '\"</pre>';\r

  \  _initAutoplayToActionButtons();\r

  \  _initCheatButtons();\r

  \  _initScenarioButtons();\r

  }"
rName: function rName(n = 1) { let arr = MyNames; return rChoose(arr, n); }
rNoise: "function rNoise(channel, min, max, speed = 0.02) {\r

  \  if (nundef(Perlin.channels[channel])) Perlin.channels[channel] =
  rNumber(0, 10000);\r

  \  let lastx = Perlin.channels[channel];\r

  \  if (nundef(speed)) speed = Perlin.speed;\r

  \  lastx += speed;\r

  \  Perlin.channels[channel] = lastx;\r

  \  let r01 = rPerlin(lastx);\r

  \  let n = map_range(r01, 0, 1, min, max);\r

  \  return n;\r

  }"
rnPosition: "function rnPosition(o, speed) {\r

  \  let [xoff, yoff] = isdef(o.origin) ? [-o.origin.x, -o.origin.y] : [0,
  0];\r

  \  return [o.x, o.y] = [rNoise('x', 0, o.w, speed) + xoff, rNoise('y', 0,
  o.h, speed) + yoff];\r

  }"
rNumber: "function rNumber(min = 0, max = 100) {\r

  \  return Math.floor(Math.random() * (max - min + 1)) + min;\r

  }"
robbedDescInBoats: "function robbedDescInBoats() {\r

  \  for (const id of IdOwner.a) {\r

  \    let boat = UIS[id];\r

  \    let desc = boat.desc;\r

  \    if (desc == 'robbed') {\r

  \      console.log('skip robbed!');\r

  \      return true;\r

  \    }\r

  \  }\r

  \  return false;\r

  }"
rollback: "function rollback() {\r

  \  if (isdef(DA.snapshot)) {\r

  \    Z.fen = DA.snapshot.fen;\r

  \    Z.stage = DA.snapshot.stage;\r

  \    Z.round = DA.snapshot.round;\r

  \    Z.phase = DA.snapshot.phase;\r

  \    Z.turn = DA.snapshot.turn;\r

  \  }\r

  }"
roomAdjacency: "function roomAdjacency(house) {\r

  \  let rooms = house.rooms.map(x => Items[x]);\r

  \  for (let i = 0; i < rooms.length; i++) {\r

  \    for (let j = i + 1; j < rooms.length; j++) {\r

  \      let [r1, r2] = [rooms[i], rooms[j]];\r

  \      let [e1, e2] = [r1.rect, r2.rect];\r

  \      let rhoeher = e1.t < e2.t ? r1 : r2;\r

  \      let rleft = e1.x < e2.x ? r1 : r2;\r

  \      let rniedriger = (rhoeher == r1 ? r2 : r1);\r

  \      let rright = (rleft == r1 ? r2 : r1);\r

  \      let diff = 2 * house.wallWidth;\r

  \      let y1 = Math.max(e1.t, e2.t);\r

  \      let y2 = Math.min(e1.b, e2.b);\r

  \      let dCommony = y2 - y1;\r

  \      if (dCommony > diff && isCloseTo(rright.rect.l, rleft.rect.r)) {\r

  \        let dr = {\r

  \          x: rleft.rect.r - house.rect.l,\r

  \          y: rniedriger.rect.t - house.rect.t,\r

  \          w: rright.rect.l - rleft.rect.r,\r

  \          h: dCommony,\r

  \        };\r

  \        extendRect(dr);\r

  \        addAdjacencyFromTo(rleft, rright, 'e', dr);\r

  \      }\r

  \      let x1 = Math.max(e1.l, e2.l);\r

  \      let x2 = Math.min(e1.r, e2.r);\r

  \      let dCommonx = x2 - x1;\r

  \      if (dCommonx > diff && isCloseTo(rniedriger.rect.t, rhoeher.rect.b))
  {\r

  \        let dr = {\r

  \          x: rright.rect.l - house.rect.l,\r

  \          y: rhoeher.rect.b - house.rect.t,\r

  \          w: dCommonx,\r

  \          h: house.wallWidth\r

  \        };\r

  \        extendRect(dr);\r

  \        addAdjacencyFromTo(rhoeher, rniedriger, 's', dr);\r

  \      }\r

  \    }\r

  \  }\r

  \  for (let i = 0; i < rooms.length; i++) {\r

  \    let r = rooms[i];\r

  \    if (isCloseTo(r.rect.l, house.rect.l)) {\r

  \      let wallRect = { x: house.rect.l, y: r.rect.t, w: house.wallWidth, h:
  r.rect.h };\r

  \      extendRect(wallRect);\r

  \      addAdjacencyFromTo(r, null, 'w', wallRect);\r

  \    }\r

  \    if (isCloseTo(r.rect.r, house.rect.r)) {\r

  \      let wallRect = { x: r.rect.r, y: r.rect.t, w: house.wallWidth, h:
  r.rect.h };\r

  \      extendRect(wallRect);\r

  \      addAdjacencyFromTo(r, null, 'e', wallRect);\r

  \    }\r

  \    if (isCloseTo(r.rect.t, house.rect.t)) {\r

  \      let wallRect = { x: r.rect.l, y: house.rect.t, w: r.rect.w, h:
  house.wallWidth };\r

  \      extendRect(wallRect);\r

  \      addAdjacencyFromTo(r, null, 'n', wallRect);\r

  \    }\r

  \    if (isCloseTo(r.rect.b, house.rect.b)) {\r

  \      let wallRect = { x: r.rect.l, y: r.rect.b, w: r.rect.w, h:
  house.wallWidth };\r

  \      extendRect(wallRect);\r

  \      addAdjacencyFromTo(r, null, 's', wallRect);\r

  \    }\r

  \  }\r

  }"
root: "function root(areaName) {\r

  \  setTableSize(areaName, 400, 300);\r

  \  UIROOT = jsCopy(SPEC.staticSpec.root);\r

  \  for (const k in AREAS) delete AREAS[k];\r

  \  PROTO = {};\r

  \  INFO = {};\r

  \  staticArea(areaName, UIROOT);\r

  \  addAREA('root', UIROOT);\r

  }"
round_change_animation: "function round_change_animation(n = 2) {\r

  \  let [stage, A, fen, plorder, uplayer, deck] = [Z.stage, Z.A, Z.fen,
  Z.plorder, Z.uplayer, Z.deck];\r

  \  let pl = fen.players[uplayer];\r

  \  if (pl.roundchange) {\r

  \    let d = mBy('dTitleLeft');\r

  \    mStyle(d, { 'transform-origin': '0% 0%' });\r

  \    mPulse(d, n * 1000);\r

  \    show_special_message(`${fen.round_winner} won round ${Z.round -
  1}!!!`)\r

  \    delete pl.roundchange;\r

  \  }\r

  }"
roundEven: "function roundEven(n) {\r

  \  let res = Math.round(n);\r

  \  return res % 2 != 0 ? res - 1 : res;\r

  }"
roundNumber: function roundNumber(x, n) { return x.toFixed(n); }
route_allGames: "async function route_allGames() {\r

  \  let gameNames = await route_server_js('/game/available');\r

  \  let res = {};\r

  \  for (const name of gameNames) {\r

  \    if (USE_ALL_GAMES_ROUTE) {\r

  \      res[name] = await route_server_js('/game/info/' + name);\r

  \    } else {\r

  \      let url = '/games/' + name + '/info.yaml';\r

  \      res[name] = await route_path_yaml_dict(url);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
route_begin_status: "async function route_begin_status(username, seed = SEED)
  {\r

  \  await fetch_wrapper(SERVER + '/begin/' + seed);\r

  \  let data = await route_status(username);\r

  \  return data;\r

  }"
route_c52: "async function route_c52() {\r

  \  return await route_rsg_asset('c52_blackBorder', 'yaml');\r

  }"
route_iconChars: "async function route_iconChars() {\r

  \  let gaIcons = await route_rsg_asset('gameIconCodes');\r

  \  let faIcons = await route_rsg_asset('faIconCodes');\r

  \  let dIcons = {};\r

  \  for (const k in faIcons) {\r

  \    dIcons[k] = faIcons[k];\r

  \  }\r

  \  for (const k in gaIcons) {\r

  \    dIcons[k] = gaIcons[k];\r

  \  }\r

  \  return dIcons;\r

  }"
route_initGame: "async function route_initGame(game, gc, username, seed = SEED)
  {\r

  \  await fetch_wrapper(SERVER + '/restart');\r

  \  await fetch_wrapper(SERVER + '/game/select/' + game);\r

  \  let nPlayers = gc.numPlayers;\r

  \  for (plid in gc.players) {\r

  \    let plInfo = gc.players[plid];\r

  \    let isAI = plInfo.agentType !== null;\r

  \    if (isAI) {\r

  \      await postData(SERVER + '/add/client/agent/' + plInfo.username, {
  agent_type: plInfo.agentType, timeout: null });\r

  \    }\r

  \    await fetch_wrapper(SERVER + '/add/player/' + plInfo.username + '/' +
  plInfo);\r

  \  }\r

  \  return await route_begin_status(username, seed);\r

  }"
route_path_asText_dict: "async function route_path_asText_dict(url) {\r

  \  let data = await fetch_wrapper(url);\r

  \  let res = {};\r

  \  res.asText = await data.text();\r

  \  return res;\r

  }"
route_path_json: "async function route_path_json(url) {\r

  \  let data = await fetch(url);\r

  \  let o = await data.json();\r

  \  return o;\r

  }"
route_path_json_dict: "async function route_path_json_dict(url) {\r

  \  let data = await fetch_wrapper(url);\r

  \  let json = await data.json();\r

  \  return json;\r

  }"
route_path_text: "async function route_path_text(url) {\r

  \  let data = await fetch(url);\r

  \  let text = await data.text();\r

  \  return text;\r

  }"
route_path_yaml_dict: "async function route_path_yaml_dict(url) {\r

  \  let data = await fetch(url);\r

  \  let text = await data.text();\r

  \  let dict = jsyaml.load(text);\r

  \  return dict;\r

  }"
route_post_json: function route_post_json(url, o, callback) { post_json(url, o, callback); }
route_rsg_asset: "async function route_rsg_asset(filename, ext = 'yml') {\r

  \  let url = '/assets/' + filename + '.' + ext;\r

  \  let response = await route_path_yaml_dict(url);\r

  \  return response;\r

  }"
route_rsg_raw_asset: "async function route_rsg_raw_asset(filename, ext = 'yml')
  {\r

  \  let url = '/assets/raw/' + filename + '.' + ext;\r

  \  let response = await route_path_yaml_dict(url);\r

  \  return response;\r

  }"
route_server: async function route_server(url) { await fetch_wrapper(SERVER + url); }
route_server_js: "async function route_server_js(url) {\r

  \  let data = await fetch_wrapper(SERVER + url);\r

  \  return await data.json();\r

  }"
route_server_text: "async function route_server_text(url) {\r

  \  let data = await fetch_wrapper(SERVER + url);\r

  \  let text = await data.text();\r

  \  return text;\r

  }"
route_status: async function route_status(username) { return await
  route_server_js('/status/' + username); }
route_svgDict: "async function route_svgDict(filename = 'svgDict') {\r

  \  let url = '/assets/' + filename + '.yaml';\r

  \  let response = await route_path_yaml_dict(url);\r

  \  return response;\r

  }"
route_symbolDict: "async function route_symbolDict(filename = 'symbolDict') {\r

  \  let url = '/assets/' + filename + '.yaml';\r

  \  let response = await route_path_yaml_dict(url);\r

  \  return response;\r

  }"
route_test_userSpec: "async function route_test_userSpec(url) {\r

  \  try {\r

  \    let text = await route_path_text(url);\r

  \    let spec = jsyaml.load(text);\r

  \    spec.asText = text;\r

  \    return spec;\r

  \  } catch (error) {\r

  \    return { asText: '' };\r

  \  }\r

  }"
route_userCode: "async function route_userCode(game, fname) {\r

  \  try {\r

  \    let url = '/RSG/' + game + (isdef(fname) ? '/' + fname : '');\r

  \    let text = await route_server_text(url);\r

  \    return { asText: text };\r

  \  } catch (error) { return {}; }\r

  }"
route_userSpec: "async function route_userSpec(game, fname) {\r

  \  try {\r

  \    let url = '/spec/' + game + (isdef(fname) ? '/' + fname : '');\r

  \    let text = await route_server_text(url);\r

  \    let spec = jsyaml.load(text);\r

  \    spec.asText = text;\r

  \    return spec;\r

  \  } catch (error) {\r

  \    return { asText: '' };\r

  \  }\r

  }"
rParse: "async function rParse(source, context) {\r

  \  R = await generateTree(source, context);\r

  \  timit.show('present');\r

  \  await presentTree(R.root, R);\r

  \  showSetSizes(R.root, R);\r

  \  adjustTableSize(R);\r

  \  if (ACTIVATE_UI) {\r

  \    activateUis(R);\r

  \  }\r

  \  timit.show('done!')\r

  \  updateOutput(R);\r

  \  if (source == 'main') testEngine.verify(R);\r

  }"
rPassword: function rPassword(n) { return
  rChoose(toLetters('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!.?*&%$#@:;_'),
  n).join(''); }
rPerlin: "function rPerlin(x, y = 0, z = 0) {\r

  \  Perlin.lastx = x;\r

  \  if (Perlin.perlin == null) {\r

  \    Perlin.perlin = new Array(Perlin.PERLIN_SIZE + 1);\r

  \    for (let i = 0; i < Perlin.PERLIN_SIZE + 1; i++) {\r

  \      Perlin.perlin[i] = Math.random();\r

  \    }\r

  \  }\r

  \  if (x < 0) { x = -x; }\r

  \  if (y < 0) { y = -y; }\r

  \  if (z < 0) { z = -z; }\r

  \  let xi = Math.floor(x), yi = Math.floor(y), zi = Math.floor(z);\r

  \  let xf = x - xi;\r

  \  let yf = y - yi;\r

  \  let zf = z - zi;\r

  \  let rxf, ryf;\r

  \  let r = 0;\r

  \  let ampl = 0.5;\r

  \  let n1, n2, n3;\r

  \  for (let o = 0; o < Perlin.perlin_octaves; o++) {\r

  \    let of = xi + (yi << Perlin.PERLIN_YWRAPB) + (zi <<
  Perlin.PERLIN_ZWRAPB);\r

  \    rxf = Perlin.scaled_cosine(xf);\r

  \    ryf = Perlin.scaled_cosine(yf);\r

  \    n1 = Perlin.perlin[of & Perlin.PERLIN_SIZE];\r

  \    n1 += rxf * (Perlin.perlin[(of + 1) & Perlin.PERLIN_SIZE] - n1);\r

  \    n2 = Perlin.perlin[(of + Perlin.PERLIN_YWRAP) & Perlin.PERLIN_SIZE];\r

  \    n2 += rxf * (Perlin.perlin[(of + Perlin.PERLIN_YWRAP + 1) &
  Perlin.PERLIN_SIZE] - n2);\r

  \    n1 += ryf * (n2 - n1);\r

  \    of += Perlin.PERLIN_ZWRAP;\r

  \    n2 = Perlin.perlin[of & Perlin.PERLIN_SIZE];\r

  \    n2 += rxf * (Perlin.perlin[(of + 1) & Perlin.PERLIN_SIZE] - n2);\r

  \    n3 = Perlin.perlin[(of + Perlin.PERLIN_YWRAP) & Perlin.PERLIN_SIZE];\r

  \    n3 += rxf * (Perlin.perlin[(of + Perlin.PERLIN_YWRAP + 1) &
  Perlin.PERLIN_SIZE] - n3);\r

  \    n2 += ryf * (n3 - n2);\r

  \    n1 += Perlin.scaled_cosine(zf) * (n2 - n1);\r

  \    r += n1 * ampl;\r

  \    ampl *= Perlin.perlin_amp_falloff;\r

  \    xi <<= 1;\r

  \    xf *= 2;\r

  \    yi <<= 1;\r

  \    yf *= 2;\r

  \    zi <<= 1;\r

  \    zf *= 2;\r

  \    if (xf >= 1.0) { xi++; xf--; }\r

  \    if (yf >= 1.0) { yi++; yf--; }\r

  \    if (zf >= 1.0) { zi++; zf--; }\r

  \  }\r

  \  return r;\r

  };"
rPlayerOrder: function rPlayerOrder(players) { return shuffle(jsCopy(players)); }
rPlayerStatsAreas: "function rPlayerStatsAreas() {\r

  \  if (nundef(serverData.players)) return;\r

  \  if (nundef(SPEC.playerStatsAreas)) return;\r

  \  let loc = SPEC.playerStatsAreas.loc;\r

  \  let dOthers = mById(loc);\r

  \  if (nundef(dOthers)) return;\r

  \  let func = SPEC.playerStatsAreas.type;\r

  \  let objects = [];\r

  \  for (const plid in serverData.players) {\r

  \    let o = serverData.players[plid];\r

  \    if (plid != GAMEPLID) {\r

  \      o.id = plid;\r

  \      objects.push(o)\r

  \    }\r

  \  }\r

  \  let areaNames = objects.map(x => x.name);\r

  \  let structObject = window[func](areaNames, loc);\r

  }"
rPosition: "function rPosition(o) {\r

  \  let [xoff, yoff] = isdef(o.origin) ? [-o.origin.x, -o.origin.y] : [0,
  0];\r

  \  return [o.x, o.y] = [rNumber(0, o.w) + xoff, rNumber(0, o.h) + yoff];\r

  }"
rPresentDefault: "function rPresentDefault() {\r

  \  for (const kPool of ['table', 'players']) {\r

  \    let pool = serverData[kPool];\r

  \    let isTable = kPool == 'table';\r

  \    for (const oid in pool) {\r

  \      let o = pool[oid];\r

  \      let otype = o.obj_type;\r

  \      let mk = getVisual(oid);\r

  \      let mkDefault = getDefaultVisual(oid);\r

  \      if (!mk) {\r

  \        if ('loc' in o && SPEC.useLocPropertyForPlacement) mk =
  makeMainBoardElementVisual(oid, o);\r

  \      }\r

  \      if (!mk && !mkDefault && SPEC.table && SPEC.table.createDefault !=
  false) {\r

  \        let loc = SPEC[kPool] && SPEC[kPool].defaultArea ?
  SPEC[kPool].defaultArea : 'a_d_objects';\r

  \        mkDefault = makeDefaultObject(oid, o, loc);\r

  \      }\r

  \      if (mkMan.getDone(oid)) continue;\r

  \      if (mk) {\r

  \        if (o.loc && SPEC.useLocPropertyForPlacement)
  _presentLocationChange(oid, o, mk, isTable);\r

  \        if (otype in mappingTypes &&
  SPEC.ignoreStructureTypesInPresentation) continue;\r

  \        presentMain(oid, o, mk);\r

  \      }\r

  \      if (mkDefault) {\r

  \        presentDefault(oid, o, mkDefault, isTable);\r

  \      }\r

  \    }\r

  \  }\r

  }"
rPresentMappings: "function rPresentMappings() {\r

  \  if (isdef(serverData.players)) {\r

  \    presentMappings(GAMEPLID, serverData.players[GAMEPLID]);\r

  \  }\r

  \  for (const plid in serverData.players) {\r

  \    if (plid != GAMEPLID) presentMappings(plid,
  serverData.players[plid]);\r

  \  }\r

  \  for (const oid in serverData.table) { presentMappings(oid,
  serverData.table[oid]); }\r

  }"
rPrimaryColor: "function rPrimaryColor() { let c = '#' + rChoose(['ff', '00']) +
  rChoose(['ff', '00']); c += c == '#0000' ? 'ff' : c == '#ffff' ? '00' :
  rChoose(['ff', '00']); return c; }"
rRank: function rRank(ranks = 'A23456789TJQK') { return rChoose(ranks); }
rrto: "function rrto(r1, r2) {\r

  \  let r = jsCopy(r1);\r

  \  r.x -= r2.x; r.l -= r2.x; r.r -= r2.x;\r

  \  r.y -= r2.y; r.t -= r2.y; r.b -= r2.y;\r

  \  return r;\r

  }"
RsortIds: "function RsortIds(workingSpec, R) {\r

  \  let hasid = {};\r

  \  let noid = {};\r

  \  let cycles1 = 0; let max1 = 2;\r

  \  let cycles2 = 0; let max2 = 2;\r

  \  for (const name in R.idByName) {\r

  \    let reflist = R.refByName[name];\r

  \    for (const ref of reflist) {\r

  \      let nref = ref.node;\r

  \      let akku = {};\r

  \      recFindProp(nref, '_id', 'self', akku);\r

  \      if (isEmpty(akku)) {\r

  \        ref.hasid = false;\r

  \        if (nundef(noid[name])) noid[name] = [];\r

  \        noid[name].push(ref);\r

  \      } else {\r

  \        ref.hasid = true;\r

  \        ref.idOccurrences = jsCopy(akku);\r

  \        if (nundef(hasid[name])) hasid[name] = []; hasid[name].push(ref);\r

  \      }\r

  \    }\r

  \  }\r

  \  if (isEmpty(noid)) {\r

  \    return null;\r

  \  } else {\r

  \    let name = Object.keys(noid)[0];\r

  \    let newSpecUids = replaceIdName(name, R, workingSpec);\r

  \    if (nundef(R.namesReplaced)) R.namesReplaced = [];\r

  \    R.namesReplaced.push(name);\r

  \    removeInPlace(R.allIdRefNames, name);\r

  \    return name;\r

  \  }\r

  \  return null;\r

  }"
rSuit: function rSuit(suit = 'HSDC') { return rChoose(suit); }
rumor_playerdata_complete: "function rumor_playerdata_complete() {\r

  \  for (const pldata of Z.playerdata) {\r

  \    if (isEmpty(pldata.state) || !isEmpty(pldata.state.remaining)) return
  false;\r

  \  }\r

  \  return true;\r

  }"
rumor_update_playerdata: "function rumor_update_playerdata(data, receiver,
  rumor) {\r

  \  let remaining = arrMinus(data.state.remaining, rumor.key);\r

  \  lookupAddToList(data, ['state', 'di', receiver], rumor.key);\r

  \  lookupAddToList(data, ['state', 'receivers'], receiver);\r

  \  lookupSetOverride(data, ['state', 'remaining'], remaining);\r

  \  Z.state = data.state;\r

  }"
run_for_seconds: "function run_for_seconds(secs, f, interval = 50) {\r

  \  DA.start = get_now(); doit(secs, f, interval);\r

  }"
run03: "function run03(sp, defaults, sdata) {\r

  \  R = new RSG(sp, defaults, sdata);\r

  \  console.log('before gen10 habe', R.gens.G.length, R.getSpec());\r

  \  phase = 1013;\r

  \  R.gen10();\r

  \  R.gen11();\r

  \  R.gen12();\r

  \  R.gen13();\r

  \  phase = 14;\r

  \  R.gen14();\r

  \  phase = 21;\r

  \  R.gen21('table');\r

  \  presentRoot_dep(R.getSpec().ROOT, 'tree');\r

  }"
run04: "function run04(sp, defaults, sdata) {\r

  \  WR.G = R1 = new RSG(sp, defaults, sdata);\r

  \  genG('table', R1);\r

  \  setTimeout(() => binding01(WR.G), 500);\r

  }"
run05: "function run05(sp, defaults, sdata) {\r

  \  WR.inc = R = new RSG(sp, defaults, sdata);\r

  \  ensureRtree(R);\r

  \  generateUis('table', R);\r

  \  updateOutput(R);\r

  }"
run06: "function run06(sp, defaults, sdata) {\r

  \  WR.inc = T = R = new RSG(sp, defaults, sdata);\r

  \  ensureRtree(R);\r

  \  R.baseArea = 'table';\r

  \  createStaticUi(R.baseArea, R);\r

  \  updateOutput(R);\r

  \  addNewlyCreatedServerObjects(sdata, R);\r

  \  updateOutput(R);\r

  \  for (let i = 0; i < 5; i++) testAddObject(R);\r

  \  updateOutput(R);\r

  \  activateUis(R);\r

  }"
run07: "function run07() {\r

  \  let d = mDiv(mBy('table'));\r

  \  mSize(d, 400, 300);\r

  \  mColor(d, 'blue');\r

  \  let canvas = aSvgg(d);\r

  \  let svg = d.children[0];\r

  \  console.log('svg', svg);\r

  \  createfilter(svg, \"-50%\", \"-50%\", \"200%\", \"200%\",
  [\"feGaussianBlur\"], [\"stdDeviation\", \"5\"]);\r

  \  let g1 = agShape(canvas, 'circle', 50, 50, 'gold');\r

  \  let ci = g1.children[0];\r

  \  console.log(ci);\r

  \  addClass(d, 'blur')\r

  }"
run08: "function run08() {\r

  \  let d = mDiv(mBy('table'));\r

  \  mSize(d, 400, 300);\r

  \  mColor(d, 'blue');\r

  \  let canvas = aSvgg(d);\r

  \  let svg = d.children[0];\r

  \  // var svg = document.createElementNS(\"http://www.w3.org/2000/svg\",
  \"svg\");\r

  \  let g1 = agShape(canvas, 'rect', 250, 250, 'gold');\r

  \  let text = agText(g1, 'hallo', 'black', '16px AlgerianRegular').elem;\r

  \  let ci = g1.children[0];\r

  \  // var obj = document.createElementNS(\"http://www.w3.org/2000/svg\",
  \"rect\");\r

  \  var defs = document.createElementNS(\"http://www.w3.org/2000/svg\",
  \"defs\");\r

  \  var filter = document.createElementNS(\"http://www.w3.org/2000/svg\",
  \"filter\");\r

  \  filter.setAttribute(\"id\", \"f1\");\r

  \  var gaussianFilter =
  document.createElementNS(\"http://www.w3.org/2000/svg\",
  \"feGaussianBlur\");\r

  \  gaussianFilter.setAttribute(\"stdDeviation\", \"2\");\r

  \  filter.appendChild(gaussianFilter);\r

  \  defs.appendChild(filter);\r

  \  svg.appendChild(defs);\r

  \  text.setAttribute(\"filter\", \"url(#f1)\");\r

  }"
run09: "function run09() {\r

  \  let paper = mDivG('table', 400, 300, 'blue');\r

  \  let svg = paper.parentNode;\r

  \  let u = `<use x=\"100\" y=\"100\"
  xlink:href=\"assets/svg/animals.svg#bird\" />`;\r

  \  console.log(svg);\r

  \  return;\r

  \  let g = agShape(canvas, 'rect', 250, 250, 'gold');\r

  }"
runAllTests: "function runAllTests() {\r

  \  iTEST = 0;\r

  \  startTestLoop();\r

  }"
runAllTestSeries: "function runAllTestSeries() {\r

  \  iTEST = 0;\r

  \  iTESTSERIES = 1;\r

  \  startTestSeries();\r

  }"
runBEHAVIOR: "function runBEHAVIOR(oid, pool, behList, VisList) {\r

  \  let res = {};\r

  \  for (const functionPair of behList) {\r

  \    let doFilterFunc = functionPair[0];\r

  \    let doFunc = functionPair[1];\r

  \    let o = pool[oid];\r

  \    if (nundef(o) || !doFilterFunc(oid, o)) {\r

  \      continue;\r

  \    }\r

  \    for (const functionPair of VisList) {\r

  \      let visFilterFunc = functionPair[0];\r

  \      let visFunc = functionPair[1];\r

  \      console.log(o);\r

  \      if (visFilterFunc(oid, o)) {\r

  \        let params = doFunc(oid, o);\r

  \        visFunc(oid, o, ...params);\r

  \        for (const par of params) {\r

  \          if (isDict(par) && 'id' in par) res[par.id] = par;\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
runBEHAVIOR_new: "function runBEHAVIOR_new(oid, pool, behaviors) {\r

  \  let res = {};\r

  \  for (const name in behaviors) {\r

  \    let o = pool[oid];\r

  \    let todo = behaviors[name](oid, o, G.serverData.phase);\r

  \    if (isdef(todo)) {\r

  \      let params = isdef(todo.vis) ? todo.vis.map(x => getVisual(x)) :
  [];\r

  \      for (const vis of params) clearElement(vis.elem);\r

  \      let res = todo.f(oid, o, ...params);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
runBehaviors: "function runBehaviors(oid, pool, behaviors) {\r

  \  let res = [];\r

  \  for (const name in behaviors) {\r

  \    let o = pool[oid];\r

  \    let todo = behaviors[name](oid, o, G.serverData.phase);\r

  \    if (isdef(todo)) {\r

  \      let visualsToBeUpdated = isdef(todo.vis) ? todo.vis.map(x =>
  getVisual(x)) : [];\r

  \      let updated = FUNCS[todo.f](oid, o, ...visualsToBeUpdated);\r

  \      if (updated) res.push(oid);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
runBindings: "function runBindings(oid, pool) {\r

  \  for (const k in BINDINGS) {\r

  \  }\r

  }"
runClientTest: "function runClientTest() {\r

  \  imageFileTests();\r

  }"
runcode: "function runcode(code, callback = null) {\r

  \  let x = eval(code);\r

  \  if (callback) callback(x);\r

  \  else {\r

  \    console.log('===>result:', x);\r

  \    if (isdef(dMessage)) dMessage.innerHTML = isDict(x) ? JSON.stringify(x)
  : isdef(x) ? x.toString() : x;\r

  \  }\r

  }"
runderkreis: "function runderkreis(color, id) {\r

  \  return `<div id=${id}
  style='width:20px;height:20px;border-radius:50%;background-color:${color};col\
  or:white;position:absolute;left:0px;top:0px;'>` + '' + \"</div>\";\r

  }"
rUniqueId: function rUniqueId(n) { return
  rChoose(toLetters('0123456789abcdefghijklmnopqABCDEFGHIJKLMNOPQRSTUVWXYZ_'),
  n).join(''); }
runNextSeries: "async function runNextSeries(listSeries, series, from, to) {\r

  \  let timeOUT = 500;\r

  \  if (isEmpty(listSeries)) {\r

  \    console.log('*** ALL TESTS COMPLETED! ***');\r

  \    hide('btnStop');\r

  \    isTraceOn = SHOW_TRACE;\r

  \    return;\r

  \  } else if (STOP) {\r

  \    STOP = false;\r

  \    isTraceOn = SHOW_TRACE;\r

  \    hide('btnStop');\r

  \    return;\r

  \  } else if (from >= to) {\r

  \    let series = testEngine.series;\r

  \    removeInPlace(listSeries, series);\r

  \    if (isEmpty(listSeries)) {\r

  \      console.log('*** ALL TESTS COMPLETED! ***');\r

  \      STOP = false;\r

  \      isTraceOn = SHOW_TRACE;\r

  \      hide('btnStop');\r

  \      return;\r

  \    }\r

  \    series = listSeries[0];\r

  \    let imax = await testEngine.loadSeries(series);\r

  \    setTimeout(async () => { await runNextSeries(listSeries, series, 0,
  imax); }, timeOUT * 2);\r

  \  } else {\r

  \    let series = listSeries[0];\r

  \    let index = from;\r

  \    await testEngine.loadTestCase(series, index);\r

  \    await rParse(RSG_SOURCE, { defs: testEngine.defs, spec:
  testEngine.spec, sdata: testEngine.sdata });\r

  \    setTimeout(async () => { await runNextSeries(listSeries, series, from +
  1, to); }, timeOUT);\r

  \  }\r

  }"
runTest: "function runTest() {\r

  \  editLayoutTests();\r

  }"
runToDevdeckAction: function runToDevdeckAction() { onClickRunToAction('devdeck'); }
rVowel: "function rVowel(w, except = []) { let vowels = w ? getVowels(w, except)
  : toLetters('aeiouy'); return chooseRandom(vowels); }"
rWheel: "function rWheel(n = 1, hue = null, sat = 100, bri = 50) {\r

  \  let d = 360 / n;\r

  \  let h = valf(hue, rHue());\r

  \  let arr = [];\r

  \  for (let i = 0; i < n; i++) {\r

  \    console.log('h', h)\r

  \    let r = colorFromHSL(h, sat, bri);\r

  \    h = (h + d) % 360;\r

  \    arr.push(r);\r

  \  }\r

  \  return arr;\r

  }"
safeLoop: "function safeLoop(func, params) {\r

  \  let max = 100, i = 0;\r

  \  while (i < max) {\r

  \    i += 1;\r

  \    let res = func(...params);\r

  \    if (isdef(res)) return res;\r

  \  }\r

  \  console.log('safeLoop: max reached!!!!!!!!!');\r

  \  return null;\r

  }"
safeMerge: "function safeMerge(a, b) {\r

  \  if (nundef(a) && nundef(b)) return {};\r

  \  else if (nundef(a)) return jsCopy(b);\r

  \  else if (nundef(b)) return jsCopy(a);\r

  \  else return mergeOverrideArrays(a, b);\r

  }"
safeRecurse: "function safeRecurse(o, func, params, tailrec) {\r

  \  ___enteredRecursion = 0;\r

  \  let arr = Array.from(arguments);\r

  \  arr = arr.slice(1);\r

  \  recAllNodes(o, func, params, tailrec, true);\r

  \  return ___enteredRecursion;\r

  }"
sameCaseIn: "function sameCaseIn(s1, s2) {\r

  \  return s1.toLowerCase() == s2.toLowerCase();\r

  }"
sameCaseIndep: "function sameCaseIndep(s1, s2) {\r

  \  return s1.toLowerCase() == s2.toLowerCase();\r

  }"
sameCaseInsensitive: "function sameCaseInsensitive(s1, s2) {\r

  \  return s1.toLowerCase() == s2.toLowerCase();\r

  }"
sameList: "function sameList(l1, l2) {\r

  \  if (l1.length != l2.length) return false;\r

  \  for (const s of l1) {\r

  \    if (!l2.includes(s)) return false;\r

  \  }\r

  \  return true;\r

  }"
sameProps: "function sameProps(o1, o2) {\r

  \  let diff = propDiffGSM(o1, o2);\r

  \  return !diff.hasChanged;\r

  }"
sameStringify: "function sameStringify(o1, o2) {\r

  \  return JSON.stringify(o1) == JSON.stringify(o2);\r

  }"
sat: "function sat() {\r

  \  let R = T;\r

  \  let rtree = normalizeRTree(R);\r

  \  let sol = {};\r

  \  sol[testEngine.index] = rtree;\r

  \  downloadFile(sol, 'sol' + testEngine.index);\r

  }"
satall: function satall() { testEngine.saveSolutions(); }
save_all: "function save_all() {\r

  \  let data = [];\r

  \  for (const edit of DA.edits) {\r

  \    let rect = getRect(edit);\r

  \    let text = edit.innerHTML;\r

  \    let o = { x: rect.x, y: rect.y, text: text };\r

  \    data.push(o);\r

  \  }\r

  \  route_post_json('http://localhost:3000/post/json', { data: data,
  filename: 'page' }, response => {\r

  \  });\r

  }"
save_image_at_server: "function save_image_at_server(id, uploadFilename) {\r

  \  if (nundef(uploadFilename)) uploadFilename = 'baustellenimage';\r

  \  window.scrollTo(0, 0);\r

  \  html2canvas(document.getElementById(id)).then(function (canvas) {\r

  \    let imgData = canvas.toDataURL(\"image/jpeg\", 0.9);\r

  \    var ajax = new XMLHttpRequest();\r

  \    ajax.open(\"POST\", \"server/save_url_encoded_image.php\", true);\r

  \    ajax.setRequestHeader(\"Content-type\",
  \"application/x-www-form-urlencoded\");\r

  \    ajax.send(\"image=\" + canvas.toDataURL(\"image/jpeg\", 0.9) +
  \"&filename=\" + uploadFilename + \".jpg\");\r

  \    ajax.onreadystatechange = function () {\r

  \      if (this.readyState == 4 && this.status == 200) {\r

  \        let udata = get_current_userdata();\r

  \        if (!udata.image) { udata.image = true; db_save(); }\r

  \        get_login();\r

  \      }\r

  \    };\r

  \  });\r

  }"
save_users: "function save_users(db_dirty = true) {\r

  \  if (isdef(G)) U.lastGame = G.id;\r

  \  if (!startsWith(Session.cur_user, 'test')) localStorage.setItem('user',
  Session.cur_user);\r

  \  DB.users[Session.cur_user] = U;\r

  \  if (db_dirty) db_save();\r

  }"
saveAnswerStatistic: "function saveAnswerStatistic() {\r

  \  let g = CurrentGameData;\r

  \  let items = last(g.levels).items;\r

  \  console.log(items);\r

  \  let correctAnswers = items.filter(x => x.isCorrect && x.answer ==
  x.reqAnswer);\r

  \  console.log('correctAnswers', correctAnswers)\r

  \  let saveable = correctAnswers.map(x => {\r

  \    console.log(x); return { key: x.key, reqAnswer: x.reqAnswer, answer:
  x.answer };\r

  \  });\r

  \  saveable.map(x => console.log('correct:', x.key, x.reqAnswer,
  x.answer));\r

  \  downloadAsYaml({ correct: saveable }, 'CORRECT');\r

  }"
saveEnv: "function saveEnv() {\r

  \  fiddleSave();\r

  }"
saveFile: "function saveFile(name, type, data) {\r

  \  if (data != null && navigator.msSaveBlob) return navigator.msSaveBlob(new
  Blob([data], { type: type }), name);\r

  \  var a = $(\"<a style='display: none;'/>\");\r

  \  var url = window.URL.createObjectURL(new Blob([data], { type: type }));\r

  \  a.attr('href', url);\r

  \  a.attr('download', name);\r

  \  $('body').append(a);\r

  \  a[0].click();\r

  \  setTimeout(function () {\r

  \    window.URL.revokeObjectURL(url);\r

  \    a.remove();\r

  \  }, 500);\r

  }"
saveFileAtClient: "function saveFileAtClient(name, type, data) {\r

  \  if (data != null && navigator.msSaveBlob) return navigator.msSaveBlob(new
  Blob([data], { type: type }), name);\r

  \  let a = document.createElement('a');\r

  \  a.style.display = 'none';\r

  \  let url = window.URL.createObjectURL(new Blob([data], { type: type }));\r

  \  a.href = url;\r

  \  a.download = name;\r

  \  document.body.appendChild(a);\r

  \  simulateClick(a);\r

  \  setTimeout(function () {\r

  \    window.URL.revokeObjectURL(url);\r

  \    a.remove();\r

  \  }, 500);\r

  }"
saveGame: function saveGame() { }
saveJsonAtServer: "function saveJsonAtServer(jsonObject, filename) {\r

  \  event.preventDefault();\r

  \  var labels = ['hallo', 'das', 'ist'];\r

  \  $.ajax({\r

  \    url: '/postTest',\r

  \    type: 'POST',\r

  \    data: JSON.stringify(jsonObject),\r

  \    processData: false,\r

  \    contentType: 'application/json; charset=UTF-8',\r

  \    success: function (response) {\r

  \      testHelpers(response);\r

  \    },\r

  \    error: function (error) {\r

  \      testHelpers(error);\r

  \    }\r

  \  });\r

  }"
saveListOfWords: "function saveListOfWords() {\r

  \  let phrases = Object.keys(DD);\r

  \  phrases.sort();\r

  \  let text = phrases.join('\\n');\r

  \  downloadAsText(text, 'listOfWords');\r

  }"
saveObject: function saveObject(o, name) { localStorage.setItem(name, JSON.stringify(o)); }
saveSettings: "function saveSettings() {\r\n}"
saveSIMA: "async function saveSIMA() {\r

  \  if (BlockServerSend) {\r

  \    setTimeout(saveSIMA, 1000);\r

  \  } else {\r

  \    let url = SERVERURL + 'speechGames';\r

  \    BlockServerSend = true;\r

  \    fetch(url, {\r

  \      method: 'PUT',\r

  \      headers: {\r

  \        'Accept': 'application/json',\r

  \        'Content-Type': 'application/json'\r

  \      },\r

  \      body: JSON.stringify(DB)\r

  \    }).then(() => { BlockServerSend = false; });\r

  \  }\r

  }"
saveSolutions: "async function saveSolutions(series, solutions) {\r

  \  let keys = Object.keys(solutions);\r

  \  let n = firstNumber(keys[0]);\r

  \  keys.sort(x => Number(x)).reverse();\r

  \  let sortedObject = {};\r

  \  for (const k of keys) {\r

  \    let x = sortKeys(solutions[k]);\r

  \    sortedObject[' ' + k + ' '] = x;\r

  \  }\r

  \  downloadFile(sortedObject, 'solutions' + series);\r

  }"
saveState: "function saveState(prefix = '') {\r

  \  let st = G.state;\r

  \  let state = { boardArr: st.boardArr, poolArr: st.poolArr, pool: {} };\r

  \  for (const k in st.pool) {\r

  \    let oNew = state.pool[k] = {};\r

  \    copyKeys(st.pool[k], oNew, {}, ['index', 'key']);\r

  \  }\r

  \  let pack = { settings: G.settings, state: state, randomIndices:
  G.randomIndices };\r

  \  localStorage.setItem(prefix + '_pack', JSON.stringify(pack));\r

  \  return pack;\r

  }"
saveStateAndSettings: "function saveStateAndSettings() {\r

  \  onClickSaveState();\r

  \  console.assert(BaseColor == G.settings.baseColor, 'Colors do NOT match at
  saving state!!!')\r

  \  onClickSaveSettings();\r

  }"
saveStats: "function saveStats() {\r

  \  let g = lastCond(CurrentSessionData.games, x => x.name ==
  'gSayPicAuto');\r

  \  let xxx = last(g.levels).items\r

  \  let yyy = xxx.map(x => {\r

  \    let res = { key: x.goal.key, answer: x.goal.answer, req:
  x.goal.reqAnswer, conf: x.goal.confidence, isCorrect: x.isCorrect };\r

  \    return res;\r

  \  });\r

  \  downloadAsYaml({ data: yyy }, 'dataSIMPLE');\r

  }"
saveSymbolDict: "function saveSymbolDict() {\r

  \  let y = jsonToYaml(symbolDict);\r

  \  downloadTextFile(y, 'symbolDict', 'yaml');\r

  }"
saveTable: function saveTable(sendToDB = false) { lookupSet(DB.tables,
  [Tablename], T); if (sendToDB) dbSave(); }
saveToDownloads: "function saveToDownloads(data, fname) {\r

  \  json_str = JSON.stringify(data);\r

  \  saveFile(fname + '.json', 'data:application/json', new Blob([json_str], {
  type: '' }));\r

  }"
saveUnit: function saveUnit() { saveUser(); }
saveUser: "function saveUser() {\r

  \  U.lastGame = G.id;\r

  \  if (!startsWith(Username, 'test')) localStorage.setItem('user',
  Username);\r

  \  DB.users[Username] = U;\r

  \  dbSaveX();\r

  }"
say: "function say(text, lang, callback, volume, rate, pitch) {\r

  \  function sayit(text, lang, callback, volume, rate, pitch) {\r

  \    var text = valf(text, 'Hello, world!');\r

  \    var msg = new SpeechSynthesisUtterance();\r

  \    var voices = DA.voicelist;\r

  \    let voice = voices.filter(x => x.lang.includes(lang));\r

  \    if (isEmpty(voice)) voice = voices.filter(x =>
  x.name.toLowerCase().includes(lang));\r

  \    msg.voice = valf(rChoose(voice), rChoose(voices));\r

  \    if (isdef(volume)) msg.volume = volume;\r

  \    if (isdef(rate)) msg.rate = rate;\r

  \    if (isdef(pitch)) msg.pitch = pitch;\r

  \    msg.text = text;\r

  \    msg.onend = e => {\r

  \      if (callback) callback(); else console.log('ENDE', e.utterance,
  'Finished in ' + e.elapsedTime + ' seconds.');\r

  \    };\r

  \    speechSynthesis.speak(msg);\r

  \  }\r

  \  if (!('speechSynthesis' in window)) { alert('speech not supported!!!
  connect to internet?'); return; }\r

  \  if (nundef(DA.voicelist)) {\r

  \    speechSynthesis.onvoiceschanged = function () {\r

  \      DA.voicelist = speechSynthesis.getVoices();\r

  \      sayit(text, lang, callback, volume, rate, pitch);\r

  \    }\r

  \  } else sayit(text, lang, callback, volume, rate, pitch);\r

  }"
sayRandomVoice: "function sayRandomVoice(e, g, voice = 'random') {\r

  \  if (arguments.length == 1) voice = 'random';\r

  \  let [r, p, v] = [.8, .9, 1];\r

  \  if (!G.silentMode) Speech.say(G.language == 'E' || nundef(g) ? e : g, r,
  p, v, voice);\r

  }"
sayTryAgain: function sayTryAgain() { sayRandomVoice('try again!', 'nochmal'); }
Scene: "function Scene() {\r

  \  touchable = 'createTouch' in document;\r

  \  this.canvas = document.createElement(\"canvas\");\r

  \  document.body.appendChild(this.canvas);\r

  \  this.context = this.canvas.getContext(\"2d\");\r

  \  this.clear = function () {\r

  \    this.context.clearRect(0, 0, this.width, this.height);\r

  \  }\r

  \  this.start = function () {\r

  \    if (!touchable) {\r

  \      this.initKeys();\r

  \      document.onkeydown = this.updateKeys;\r

  \      document.onkeyup = this.clearKeys;\r

  \    }\r

  \    this.intID = setInterval(localUpdate, 1000 / FRAMERATE);\r

  \  }\r

  \  this.stop = function () {\r

  \    clearInterval(this.intID);\r

  \  }\r

  \  this.updateKeys = function (e) {\r

  \    currentKey = e.keyCode;\r

  \    keysDown[e.keyCode] = true;\r

  \  }\r

  \  this.clearKeys = function (e) {\r

  \    currentKey = null;\r

  \    keysDown[e.keyCode] = false;\r

  \  }\r

  \  this.initKeys = function () {\r

  \    for (keyNum = 0; keyNum < 256; keyNum++) {\r

  \      keysDown[keyNum] = false;\r

  \    }\r

  \  }\r

  \  this.setSizePos = function (height, width, top, left) {\r

  \    styleString = \"\";\r

  \    styleString += \"position: absolute; \\n\";\r

  \    styleString += \"height: \" + height + \"px;\\n\";\r

  \    styleString += \"width: \" + width + \"px;\\n\";\r

  \    styleString += \"top: \" + top + \"px;\\n\";\r

  \    styleString += \"left: \" + left + \"px;\\n\";\r

  \    this.height = height;\r

  \    this.width = width;\r

  \    this.top = top;\r

  \    this.left = left;\r

  \    this.canvas.width = this.width;\r

  \    this.canvas.height = this.height;\r

  \    this.canvas.style.left = this.left;\r

  \    this.canvas.style.top = this.top;\r

  \  }\r

  \  this.setSize = function (width, height) {\r

  \    this.width = width;\r

  \    this.height = height;\r

  \    this.canvas.width = this.width;\r

  \    this.canvas.height = this.height;\r

  \  }\r

  \  this.setPos = function (left, top) {\r

  \    this.left = left;\r

  \    this.top = top;\r

  \    this.canvas.style.left = left;\r

  \    this.canvas.style.top = top;\r

  \  }\r

  \  this.setBG = function (color) {\r

  \    this.canvas.style.backgroundColor = color;\r

  \  }\r

  \  this.setSize(SCENEWIDTH, SCENEHEIGHT);\r

  \  this.setPos(10, 100);\r

  \  this.setBG(\"lightgray\");\r

  }"
scoring: "function scoring(isCorrect) {\r

  \  Score.nTotal += 1;\r

  \  if (isCorrect) { Score.nCorrect += 1; if (G.trialNumber == 1)
  Score.nCorrect1 += 1; }\r

  \  percentageCorrect = Math.round(100 * Score.nCorrect / Score.nTotal);\r

  \  if (isCorrect) { Score.nPos += 1; Score.nNeg = 0; } else { Score.nPos =
  0; Score.nNeg += 1; }\r

  \  let levelChange = 0;\r

  \  let gameChange = false;\r

  \  let nextLevel = G.level;\r

  \  let toggle = G.pictureLabels == 'toggle';\r

  \  let hasLabels = G.showLabels == true;\r

  \  let boundary = G.samplesPerGame;\r

  \  let pos = G.incrementLevelOnPositiveStreak;\r

  \  let posSeq = pos > 0 && Score.nPos >= pos;\r

  \  let halfposSeq = pos > 0 && Score.nPos >= pos / 2;\r

  \  let neg = G.decrementLevelOnNegativeStreak;\r

  \  let negSeq = neg > 0 && Score.nNeg >= neg;\r

  \  let halfnegSeq = neg > 0 && Score.nNeg >= neg / 2;\r

  \  let labelsNextRound = G.showLabels;\r

  \  if (halfposSeq && hasLabels && toggle) { labelsNextRound = false; }\r

  \  else if (posSeq) { levelChange = 1; nextLevel += 1; Score.nPos = 0; }\r

  \  if (halfnegSeq && !hasLabels && toggle) { labelsNextRound = true; }\r

  \  else if (negSeq) { levelChange = -1; if (nextLevel > 0) nextLevel -= 1;
  Score.nNeg = 0; }\r

  \  if (nextLevel != G.Level && nextLevel > 0 && nextLevel <= G.maxLevel) {\r

  \    userUpdate(['games', G.id, 'startLevel'], nextLevel);\r

  \  }\r

  \  if (Score.nTotal >= boundary) {\r

  \    gameChange = true; levelChange = false;\r

  \  }\r

  \  if (levelChange || gameChange) {\r

  \    if (toggle) labelsNextRound = true;\r

  \  } else if (!halfnegSeq && toggle && hasLabels && Score.nTotal >=
  G.samplesPerGame / 2) {\r

  \    labelsNextRound = false;\r

  \  }\r

  \  G.showLabels = labelsNextRound;\r

  \  Score.gameChange = gameChange;\r

  \  Score.levelChange = levelChange;\r

  \  return nextLevel;\r

  }"
scoring_update: "function scoring_update(players, winners, game) {\r

  \  for (const p of players) {\r

  \    let info = lookupSet(DB.users, [p, 'games', game], {});\r

  \    let total = lookupSet(info, ['total'], 0);\r

  \    let wins = lookupSet(info, ['wins'], 0);\r

  \    lookupSetOverride(info, ['total'], total + 1);\r

  \  }\r

  \  for (const p of winners) {\r

  \    let info = lookup(DB.users, [p, 'games', game]);\r

  \    let wins = lookup(info, ['wins']);\r

  \    console.assert(isdef(info) && isdef(wins), 'SCORING DB INFO MISSING FOR
  ' + p);\r

  \    lookupSetOverride(info, ['wins'], wins + 1);\r

  \  }\r

  }"
scrambleInputs: "function scrambleInputs(d) {\r

  \  let children = Array.from(d.children);\r

  \  shuffle(children);\r

  \  for (const ch of children) {\r

  \    mAppend(d, ch);\r

  \  }\r

  }"
screen_transition: "function screen_transition(idnew, idold) {\r

  \  if (isdef(idold)) mFade(idold, 500, () => mClassReplace(idold, 'd-block',
  'd-none'), 'linear');\r

  \  mAppear(idnew, 500, () => mClassReplace(idnew, 'd-none', 'd-block'),
  'linear');\r

  }"
scrollToTop: "function scrollToTop() {\r

  \  document.body.scrollTop = 0;\r

  \  document.documentElement.scrollTop = 0;\r

  }"
search_end_point: "function search_end_point(f, min, max, lower, upper) {\r

  \  if (SICHERER-- < 0) { console.log('!!!!!!!!!!'); return 0; }\r

  \  let x = min + (max - min) / 2;\r

  \  let y = f(x);\r

  \  if (y > upper) { return search_end_point(f, x, max, lower, upper); }\r

  \  else if (y < lower) { return search_end_point(f, min, x, lower, upper);
  }\r

  \  else return x;\r

  }"
SearchPosition: "function SearchPosition() {\r

  \  var bestMove = NOMOVE;\r

  \  var bestScore = -INFINITE;\r

  \  var currentDepth = 0;\r

  \  var pvNum = 0;\r

  \  var line;\r

  \  ClearForSearch();\r

  \  if (GameController.BookLoaded == BOOL.TRUE) {\r

  \    bestMove = BookMove();\r

  \    if (bestMove != NOMOVE) {\r

  \      $(\"#OrderingOut\").text(\"Ordering:\");\r

  \      $(\"#DepthOut\").text(\"Depth: \");\r

  \      $(\"#ScoreOut\").text(\"Score:\");\r

  \      $(\"#NodesOut\").text(\"Nodes:\");\r

  \      $(\"#TimeOut\").text(\"Time: 0s\");\r

  \      $(\"#BestOut\").text(\"BestMove: \" + PrMove(bestMove) + '(Book)');\r

  \      srch_best = bestMove;\r

  \      srch_thinking = BOOL.FALSE;\r

  \      return;\r

  \    }\r

  \  }\r

  \  for (currentDepth = 1; currentDepth <= srch_depth; ++currentDepth) {\r

  \    bestScore = AlphaBeta(-INFINITE, INFINITE, currentDepth, BOOL.TRUE);\r

  \    if (srch_stop == BOOL.TRUE) break;\r

  \    pvNum = GetPvLine(currentDepth);\r

  \    bestMove = brd_PvArray[0];\r

  \    line = (\"Depth:\" + currentDepth + \" best:\" + PrMove(bestMove) + \"
  Score:\" + bestScore + \" nodes:\" + srch_nodes);\r

  \    if (currentDepth != 1) {\r

  \      line += (\" Ordering:\" + ((srch_fhf / srch_fh) * 100).toFixed(2) +
  \"%\");\r

  \    }\r

  \    domUpdate_depth = currentDepth;\r

  \    domUpdate_move = bestMove;\r

  \    domUpdate_score = bestScore;\r

  \    domUpdate_nodes = srch_nodes;\r

  \    domUpdate_ordering = ((srch_fhf / srch_fh) * 100).toFixed(2);\r

  \  }\r

  \  $(\"#BestOut\").text(\"BestMove: \" + PrMove(bestMove));\r

  \  UpdateDOMStats();\r

  \  srch_best = bestMove;\r

  \  srch_thinking = BOOL.FALSE;\r

  }"
select_action: "function select_action(r, action, uname, item) {\r

  \  uiActivated = false;\r

  \  r.selected = action;\r

  \  console.log('action selected:', r.key, uname, action, item);\r

  \  window[r.key + '_post'](Session.otree, r, uname, action, item);\r

  }"
select_add_items: "function select_add_items(items, callback = null, instruction
  = null, min = 0, max = 100, prevent_autoselect = false) {\r

  \  let A = Z.A;\r

  \  select_clear_previous_level();\r

  \  A.level++; A.items = items; A.callback = callback; A.selected = [];
  A.minselected = min; A.maxselected = max;\r

  \  console.log('A.level', A.level)\r

  \  show_stage();\r

  \  let dInstruction = mBy('dSelections0');\r

  \  mClass(dInstruction, 'instruction');\r

  \  mCenterCenterFlex(dInstruction);\r

  \  dInstruction.innerHTML = (Z.role == 'active' ?
  `${get_waiting_html()}<span
  style=\"color:red;font-weight:bold;max-height:25px\">You</span>` :
  `${Z.uplayer}`) + \"&nbsp;\" + instruction;\r

  \  if (too_many_string_items(A)) { mLinebreak(dInstruction, 4); }\r

  \  let has_submit_items = false;\r

  \  let buttonstyle = { maleft: 10, vmargin: 2, rounding: 6, padding: '4px
  12px 5px 12px', border: '0px solid transparent', outline: 'none' }\r

  \  for (const item of A.items) {\r

  \    let type = item.itemtype = is_card(item) ? 'card' : isdef(item.o) ?
  'container' : 'string';\r

  \    if (isdef(item.submit_on_click)) { has_submit_items = true; }\r

  \    let id = item.id = lookup(item, ['o', 'id']) ? item.o.id : getUID();
  A.di[id] = item;\r

  \    if (type == 'string') {\r

  \      let handler = ev => select_last(item, isdef(item.submit_on_click) ?
  callback : select_toggle, ev);\r

  \      item.div = mButton(item.a, handler, dInstruction, buttonstyle, null,
  id);\r

  \    } else {\r

  \      let ui = item.div = iDiv(item.o);\r

  \      ui.onclick = ev => select_last(item, select_toggle, ev);\r

  \      ui.id = id;\r

  \    }\r

  \  }\r

  \  let show_submit_button = !has_submit_items && (A.minselected !=
  A.maxselected || !A.autosubmit);\r

  \  if (show_submit_button) { mButton('submit', callback, dInstruction,
  buttonstyle, 'selectable_button', 'bSubmit'); }\r

  \  let show_restart_button = A.level > 1;\r

  \  if (show_restart_button) { mButton('restart', onclick_reload,
  dInstruction, buttonstyle, 'selectable_button', 'bReload'); }\r

  \  let dParent = window[`dActions${A.level}`];\r

  \  for (const item of A.items) { ari_make_selectable(item, dParent,
  dInstruction); }\r

  \  assertion(A.items.length >= min, 'less options than min selection!!!!',
  A.items.length, 'min is', min);\r

  \  if (A.items.length == min && !is_ai_player() && !prevent_autoselect) {\r

  \    for (const item of A.items) { A.selected.push(item.index);
  ari_make_selected(item); }\r

  \    if (A.autosubmit) {\r

  \      loader_on();\r

  \      setTimeout(() => { if (callback) callback(); loader_off(); }, 800);\r

  \    }\r

  \  } else if (is_ai_player()) {\r

  \    ai_move();\r

  \  } else if (TESTING && isdef(DA.test)) {\r

  \    if (DA.test.iter >= DA.auto_moves.length) {\r

  \      if (isdef(DA.test.end)) DA.test.end();\r

  \      activate_ui();\r

  \      return;\r

  \    }\r

  \    let selection = DA.auto_moves[DA.test.iter++];\r

  \    if (selection) {\r

  \      deactivate_ui();\r

  \      let numbers = [];\r

  \      for (const el of selection) {\r

  \        if (el == 'last') {\r

  \          numbers.push(A.items.length - 1);\r

  \        } else if (el == 'random') {\r

  \          numbers.push(rNumber(0, A.items.length - 1));\r

  \        } else if (isString(el)) {\r

  \          let commands = A.items.map(x => x.key);\r

  \          let idx = commands.indexOf(el);\r

  \          numbers.push(idx);\r

  \        } else numbers.push(el);\r

  \      }\r

  \      selection = numbers;\r

  \      A.selected = selection;\r

  \      if (selection.length == 1) A.command = A.items[A.selected[0]].key;\r

  \      A.last_selected = A.items[A.selected[0]];\r

  \      select_highlight();\r

  \      setTimeout(() => {\r

  \        if (A.callback) A.callback();\r

  \      }, 1000);\r

  \    } else { activate_ui(); }\r

  \  } else { activate_ui(); }\r

  }"
select_clear_previous_level: "function select_clear_previous_level() {\r

  \  let A = Z.A;\r

  \  if (!isEmpty(A.items)) {\r

  \    console.assert(A.level >= 1, 'have items but level is ' + A.level);\r

  \    A.ll.push({ items: A.items, selected: A.selected });\r

  \    let dsel = mBy(`dSelections1`);\r

  \    mStyle(dsel, { display: 'flex', 'align-items': 'center', padding: 10,
  box: true, gap: 10 });\r

  \    for (const item of A.items) {\r

  \      ari_make_unselectable(item);\r

  \      if (A.keep_selection) continue;\r

  \      ari_make_unselected(item);\r

  \      if (!A.selected.includes(item.index)) continue;\r

  \      if (item.itemtype == 'card') {\r

  \        let d = iDiv(item);\r

  \        let card = item.o;\r

  \        let mini = mDiv(dsel, { bg: 'yellow', fg: 'black', hpadding: 2,
  border: '1px solid black' }, null, card.friendly);\r

  \      } else if (item.itemtype == 'container') {\r

  \        let list = item.o.list;\r

  \        let cards = list.map(x => ari_get_card(x, 30, 30 * .7));\r

  \        let cont2 = ui_make_hand_container(cards, dsel, { bg: 'transparent'
  });\r

  \        ui_add_cards_to_hand_container(cont2, cards, list);\r

  \      } else if (item.itemtype == 'string') {\r

  \        let db = mDiv(dsel, { bg: 'yellow', fg: 'black', border: 'black',
  hpadding: 4 }, item.id, item.a);\r

  \      }\r

  \    }\r

  \  }\r

  }"
select_confirm_weiter: "function select_confirm_weiter(callback) {\r

  \  select_add_items(ui_get_string_items(['weiter']), callback, 'may click to
  continue', 1, 1, Z.mode == 'multi');\r

  }"
select_error: "function select_error(msg, callback = null, stay = false) {\r

  \  let [A] = [Z.A];\r

  \  DA.callback = callback;\r

  \  if (A.maxselected == 1 && A.selected.length > 0) {\r

  \    let item = A.items[A.selected[0]];\r

  \    ari_make_unselected(item);\r

  \    A.selected = [];\r

  \  } else if (A.selected.length == 2) {\r

  \    let item = A.items[A.selected[1]];\r

  \    ari_make_unselected(item);\r

  \    A.selected = [A.selected[0]];\r

  \  }\r

  \  dError.innerHTML = msg;\r

  \  if (stay) {\r

  \    dError.innerHTML += '<br><button
  onclick=\"continue_after_error()\">CLICK TO CONTINUE</button>';\r

  \  } else {\r

  \    TO.error = setTimeout(continue_after_error, 3000);\r

  \  }\r

  }"
select_finalize: "function select_finalize(ev) {\r

  \  if (!uiActivated) { console.log('ui is deactivated!!!'); return; }\r

  \  let A = z.A;\r

  \  let id = evToId(ev);\r

  \  let a = A.di[id];\r

  \  A.selected = [a.index];\r

  \  A.selected_key = A.items[a.index].key;\r

  \  mStyle(mBy(a.idButton), { bg: 'yellow' });\r

  \  if (isdef(a.idCard)) mClass(mBy(a.idCard), 'card_selected');\r

  \  if (A.callback) A.callback();\r

  }"
select_goto_post: "function select_goto_post() {\r

  \  if (!uiActivated) { console.log('ui is deactivated!!!'); return; }\r

  \  ari_post_action();\r

  }"
select_goto_pre: "function select_goto_pre() {\r

  \  if (!uiActivated) { console.log('ui is deactivated!!!'); return; }\r

  \  ari_pre_action();\r

  }"
select_highlight: function select_highlight() { let A = Z.A; for (const i of
  A.selected) { let a = A.items[i]; ari_make_selected(a, true); } }
select_last: "function select_last(item, callback, ev) {\r

  \  if (isdef(ev)) evNoBubble(ev);\r

  \  Z.A.last_selected = item; callback(item, ev);\r

  }"
select_timer: "function select_timer(ms, callback) {\r

  \  let d = mBy('dSelections0');\r

  \  let dtimer = mDiv(d, { w: 80, maleft: 10, fg: 'red', weight: 'bold' },
  'dTimer');\r

  \  if (isdef(DA.timer)) { DA.timer.clear(); DA.timer = null; }\r

  \  let timer = DA.timer = new SimpleTimer(dtimer, 1000, null, ms,
  callback);\r

  \  timer.start();\r

  \  return dtimer;\r

  }"
select_toggle: "function select_toggle() {\r

  \  if (!uiActivated) { console.log('ui is deactivated!!!'); return; }\r

  \  let A = Z.A;\r

  \  let item = A.last_selected;\r

  \  if (A.selected.includes(item.index)) {\r

  \    removeInPlace(A.selected, item.index);\r

  \    ari_make_unselected(item);\r

  \  } else {\r

  \    if (A.maxselected == 1 && !isEmpty(A.selected)) {
  ari_make_unselected(A.items[A.selected[0]]); A.selected = []; }\r

  \    A.selected.push(item.index);\r

  \    ari_make_selected(item);\r

  \    if (!DA.ai_is_moving && A.selected.length >= A.maxselected &&
  A.autosubmit) {\r

  \      setTimeout(() => A.callback(), 100);\r

  \    }\r

  \  }\r

  }"
selectBuyDeckcard: function selectBuyDeckcard() { onClickSelectTuple(null,
  strategicBoat(['devdeck'])); }
selectColor: "function selectColor(color) {\r

  \ 
  document.getElementsByClassName(selected_color)[0].classList.remove('selected\
  ');\r

  \  document.getElementsByClassName(color)[0].classList.add('selected');\r

  \  selected_color = color;\r

  }"
selectGame: function selectGame(callback) { let route = '/game/select/' + GAME;
  _sendRouteJS(route, callback); }
selectStyle: "function selectStyle(feature) {\r

  \  const color = feature.get('COLOR') || '#eeeeee';\r

  \  selected.getFill().setColor(color);\r

  \  return selected;\r

  }"
selectText: "function selectText(el) {\r

  \  if (el instanceof HTMLTextAreaElement) { el.select(); return; }\r

  \  var sel, range;\r

  \  if (window.getSelection && document.createRange) {\r

  \    sel = window.getSelection();\r

  \    if (sel.toString() == '') {\r

  \      window.setTimeout(function () {\r

  \        range = document.createRange();\r

  \        range.selectNodeContents(el);\r

  \        sel.removeAllRanges();\r

  \        sel.addRange(range);\r

  \      }, 1);\r

  \    }\r

  \  } else if (document.selection) {\r

  \    sel = document.selection.createRange();\r

  \    if (sel.text == '') {\r

  \      range = document.body.createTextRange();\r

  \      range.moveToElementText(el);\r

  \      range.select();\r

  \    }\r

  \  }\r

  }"
selectTextOrig: "function selectTextOrig(id) {\r

  \  var sel, range;\r

  \  var el = document.getElementById(id);\r

  \  if (window.getSelection && document.createRange) {\r

  \    sel = window.getSelection();\r

  \    if (sel.toString() == '') {\r

  \      window.setTimeout(function () {\r

  \        range = document.createRange();\r

  \        range.selectNodeContents(el);\r

  \        sel.removeAllRanges();\r

  \        sel.addRange(range);\r

  \      }, 1);\r

  \    }\r

  \  } else if (document.selection) {\r

  \    sel = document.selection.createRange();\r

  \    if (sel.text == '') {\r

  \      range = document.body.createTextRange();\r

  \      range.moveToElementText(el);\r

  \      range.select();\r

  \    }\r

  \  }\r

  }"
selectUid: "function selectUid(uid, R) {\r

  \  console.log('user has selected', uid);\r

  }"
selectWord: "function selectWord(info, bestWordIsShortest, except = []) {\r

  \  let candidates = info.words.filter(x => x.length >= MinWordLength &&
  x.length <= MaxWordLength);\r

  \  let w = bestWordIsShortest ? getShortestWord(candidates, false) :
  last(candidates);\r

  \  if (except.includes(w)) {\r

  \    let wNew = lastCond(info.words, x => !except.includes(w));\r

  \    if (wNew) w = wNew;\r

  \  }\r

  \  return w;\r

  }"
send_files: "async function send_files() {\r

  \  const myFiles = document.getElementById('myFiles').files;\r

  \  const formData = new FormData();\r

  \  Object.keys(myFiles).forEach(key => {\r

  \    formData.append(myFiles.item(key).name, myFiles.item(key));\r

  \  })\r

  \  const response = await fetch(SERVERURL + '/upload', {\r

  \    method: 'POST',\r

  \    body: formData\r

  \  });\r

  \  const json = await response.json();\r

  \  const h2 = document.querySelector('h2');\r

  \  h2.textContent = `Status: ${json?.status}`;\r

  \  const h3 = document.querySelector('h3');\r

  \  h3.textContent = json?.message;\r

  \  console.log(json);\r

  }"
send_image: "function send_image(files) {\r

  \  console.log('files', files);\r

  \  var filename = files[0].name;\r

  \  var ext_start = filename.lastIndexOf(\".\");\r

  \  var ext = filename.substr(ext_start + 1, 3);\r

  \  if (!(ext == \"jpg\" || ext == \"JPG\")) {\r

  \    alert(\"This file type is not allowed\");\r

  \    return;\r

  \  }\r

  \  var xml = new XMLHttpRequest();\r

  \  xml.onload = function () {\r

  \    if (xml.readyState == 4 || xml.status == 200) {\r

  \      handle_result(xml.responseText, \"send_image\");\r

  \    }\r

  \  }\r

  \  let data = new FormData();\r

  \  data.append('file', files[0]);\r

  \  data.append('data_type', \"send_image\");\r

  \  data.append('sender', Username);\r

  \  data.append('receiver', CURRENT_CHAT_USER);\r

  \  xml.open(\"POST\", \"uploader.php\", true);\r

  \  xml.send(data);\r

  }"
send_message: "function send_message(e) {\r

  \  e.cancelBubble = true;\r

  \  var message_text = mBy(\"message_text\");\r

  \  if (message_text.value.trim() == \"\") {\r

  \    alert(\"please type something to send\");\r

  \    return;\r

  \  }\r

  \  get_data({\r

  \    message: message_text.value.trim(),\r

  \    username: CURRENT_CHAT_USER\r

  \  }, \"send_message\");\r

  }"
send_move: "function send_move() {\r

  \  let me = Session.cur_players[Session.cur_user];\r

  \  if (me.player_status == 'lamov') me.player_status = 'done';\r

  \  let o = { tid: Session.cur_tid, player_status: me.player_status, score:
  me.score, state: me.state, uname: me.name };\r

  \  to_server(o, 'send_move');\r

  }"
send_move_dep: "function send_move_dep(game, uname, tid, step, move) {\r

  \  Session.cur_menu = 'games';\r

  \  let data = { game: game, uname: uname, tid: tid, step: step, move: move
  };\r

  \  to_server(data, \"send_move\");\r

  }"
send_or_sim: "function send_or_sim(o, cmd) {\r

  \  Counter.server += 1;\r

  \  phpPost(o, cmd);\r

  }"
send_pause: function send_pause() { socket.emit('pause'); }
send_reset: function send_reset() { socket.emit('reset'); }
send_resume: function send_resume() { socket.emit('resume'); }
send_timer_ticker: "function send_timer_ticker() {\r

  \  let me = Session.cur_players[Session.cur_user];\r

  \  to_server({ tid: Session.cur_tid, score: me.score, state: me.state,
  uname: me.name }, 'ticker_status_send_receive');\r

  }"
sendAction: "async function sendAction(boat, username) {\r

  \  if (TESTING) {\r

  \    modifyServerDataRandom(username);\r

  \  } else {\r

  \    _syncUsernameOfSender(username);\r

  \    if (nundef(boat)) boat = chooseRandom(boats);\r

  \    let route = '/action/' + Username + '/' + serverData.key + '/' +
  boat.desc + '/';\r

  \    let t = boat.tuple;\r

  \    route += t.map(x => _pickStringForAction(x)).join('+');\r

  \    let result = await route_server_js(route);\r

  \    prevServerData = serverData;\r

  \    serverData = result;\r

  \  }\r

  }"
sendAction_old: "function sendAction_old(player, tuple, callback, ms = 30) {\r

  \  setTimeout(() => {\r

  \    testOutput({ 1: ['sending action:' + player + tuple + callback.name]
  });\r

  \    testOutput({ 0: [player + ' selects:' + tuple] });\r

  \    let chain = ['action/' + player + '/' + tuple.join('+'), 'info/' +
  player, 'status/' + player];\r

  \    sender.chainSend(chain, player, callback);\r

  \  }, ms);\r

  }"
sendChangePlayer: "function sendChangePlayer(data, callback) {\r

  \  player = data.waiting_for.set[0];\r

  \  if (!assets.factionNames.includes(player)) {\r

  \    logFormattedData(data, msgCounter, 'ERROR: waiting_for data corrupt!!!'
  + player);\r

  \  } else {\r

  \    let chain = ['info/' + player, 'status/' + player];\r

  \    sender.chainSend(chain, player, callback);\r

  \  }\r

  }"
sendChangeToPlayer: "function sendChangeToPlayer(nextPlayer, callback) {\r

  \  let chain = ['info/' + nextPlayer, 'status/' + nextPlayer];\r

  \  sender.chainSend(chain, nextPlayer, callback);\r

  }"
sendEditAction: "function sendEditAction(player, tuple, callback, ms = 30) {\r

  \  setTimeout(() => {\r

  \    testOutput({ 1: ['sending action:' + player + tuple + callback.name]
  });\r

  \    testOutput({ 0: [player + ' selects:' + tuple] });\r

  \    sender.send('edit/' + player + '/' + tuple.join('+'), callback);\r

  \  }, ms);\r

  }"
sendEmptyAction: "function sendEmptyAction(player, callback) {\r

  \  testOutput({ 1: ['sending empty action!!!'] });\r

  \  sendAction(player, ['none'], callback);\r

  }"
sendfen: "async function sendfen(o, plname) {\r

  \  let gamerec = await post_test2(o, '/post');\r

  \  let oldrec = firstCond(Serverdata.games, x => x.name == gamerec.name);\r

  \  if (oldrec) arrRemovip(Serverdata.games, oldrec);\r

  \  Serverdata.games.unshift(gamerec);\r

  \  processServerdata();\r

  \  console.log('Serverdata', Serverdata);\r

  \  DA.gameItems = show_gametable(mBy('dAllTables'));\r

  \  let turn = gamerec.fen.turn;\r

  \  let uname = isdef(plname) ? plname : isdef(U) ? U.name : turn[0];\r

  \  show_table_for(gamerec, dParent, uname);\r

  \  if (Pollmode == 'auto') TO.poll = setTimeout(poll, 5000);\r

  }"
sendFilename: function sendFilename(msg) { logClientSend('filename', msg);
  Socket.emit('filename', { msg }); }
sendgameover: "function sendgameover(plname, friendly, fen, scoring) {\r

  \  let o = { winners: plname, friendly: friendly, fen: fen, scoring: scoring
  };\r

  \  phpPost(o, 'gameover');\r

  }"
sendGetGameInfo: "function sendGetGameInfo() {\r

  \  timit.showTime('sending select game');\r

  \  _sendRoute('/game/select/' + S.settings.game, d2 => {\r

  \    timit.showTime('sending game info');\r

  \    _sendRoute('/game/info/' + S.settings.game, d4 => {\r

  \      console.log('gameInfo', d4, getTypeOf(d4));\r

  \      S.gameInfo = JSON.parse(d4);\r

  \      console.log(S.gameInfo);\r

  \      _sendRoute('/game/players', d5 => {\r

  \        console.log('players', d5, getTypeOf(d5));\r

  \        S.gameInfo = JSON.parse(d5);\r

  \        console.log(S.gameInfo);\r

  \        waitForLogin();\r

  \      });\r

  \    });\r

  \  });\r

  }"
sendHtml: "function sendHtml(id, filename) {\r

  \  window.scrollTo(0, 0);\r

  \  html2canvas(document.getElementById(id)).then(function (canvas) {\r

  \    let imgData = canvas.toDataURL(\"image/jpeg\", 0.9);\r

  \    var profile_image = mBy(\"profile_image\");\r

  \    profile_image.src = imgData;\r

  \    mBy('imgPreview').src = imgData;\r

  \    var ajax = new XMLHttpRequest();\r

  \    ajax.open(\"POST\", \"server/save_url_encoded_image.php\", true);\r

  \    ajax.setRequestHeader(\"Content-type\",
  \"application/x-www-form-urlencoded\");\r

  \    ajax.send(\"image=\" + canvas.toDataURL(\"image/jpeg\", 0.9) +
  \"&filename=\" + filename + \".jpg\");\r

  \    ajax.onreadystatechange = function () {\r

  \      if (this.readyState == 4 && this.status == 200) {\r

  \        let udata = get_current_userdata();\r

  \        if (!udata.image) { udata.image = true; db_save(); }\r

  \        get_login();\r

  \      }\r

  \    };\r

  \  });\r

  }"
sendHtml_dep: "function sendHtml_dep(id, filename) {\r

  \  window.scrollTo(0, 0);\r

  \  html2canvas(document.getElementById(id)).then(function (canvas) {\r

  \    let imgData = canvas.toDataURL(\"image/jpeg\", 0.9);\r

  \    var profile_image = mBy(\"profile_image\");\r

  \    profile_image.src = imgData;\r

  \    mBy('imgPreview').src = imgData;\r

  \    var ajax = new XMLHttpRequest();\r

  \    ajax.open(\"POST\", \"server/save_url_encoded_image.php\", true);\r

  \    ajax.setRequestHeader(\"Content-type\",
  \"application/x-www-form-urlencoded\");\r

  \    ajax.send(\"image=\" + canvas.toDataURL(\"image/jpeg\", 0.9) +
  \"&filename=\" + filename + \".jpg\");\r

  \    ajax.onreadystatechange = function () {\r

  \      if (this.readyState == 4 && this.status == 200) {\r

  \        console.log('RESPONSE IMAGE UPLOAD!!!!!!!', this.responseText);\r

  \        window.location.replace('index.html');\r

  \      }\r

  \    };\r

  \  });\r

  }"
sendInit: "function sendInit() {\r

  \  timit.showTime('sending status');\r

  \  _sendRouteJS('/status/' + USERNAME, d7 => {\r

  \    data = d7.response;\r

  \    if (S.settings.playMode == 'multiplayer') {\r

  \      if ('players' in data) {\r

  \        for (const id in data.players) {\r

  \          let pl = data.players[id];\r

  \          if (pl.obj_type == 'GamePlayer') {\r

  \            if (pl != G.player) {\r

  \              if (!(id in S.plAddedByMe)) {\r

  \                enterWaitingLoop(); return;\r

  \              }\r

  \            }\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \    processData(data);\r

  \    specAndDOM([gameStep]);\r

  \  });\r

  }"
sendInit_old: "function sendInit_old(player, callback, seed = 1) {\r

  \  var chain = ['init/hotseat/' + player + '/' + seed, 'info/' + player,
  'status/' + player];\r

  \  sender.chainSend(chain, player, callback);\r

  }"
sendInitNewGame: "function sendInitNewGame() {\r

  \  timit.showTime('sending restart');\r

  \  _sendRoute('/restart', d0 => {\r

  \    timit.showTime('sending select game');\r

  \    _sendRoute('/game/select/' + S.settings.game, d2 => {\r

  \      timit.showTime('sending game info');\r

  \      _sendRoute('/game/info/' + S.settings.game, d4 => {\r

  \        S.gameInfo = JSON.parse(d4);\r

  \        let chain = [];\r

  \        let i = 0;\r

  \        S.gameInfo.userList = [];\r

  \        for (const pl of S.gameInfo.player_names) {\r

  \          let user = i > 0 ? USERNAME + i : USERNAME;\r

  \          let cmd = '/add/player/' + user + '/' + pl;\r

  \          S.gameInfo.userList.push(user);\r

  \          i += 1;\r

  \          chain.push(cmd);\r

  \        }\r

  \        timit.showTime('sending player logins');\r

  \        chainSend(chain, d5 => {\r

  \          _sendRoute('/begin/1', d6 => {\r

  \            let user = S.gameInfo.userList[0];\r

  \            timit.showTime('sending status');\r

  \            _sendRoute('/status/' + user, d7 => {\r

  \              let data = JSON.parse(d7);\r

  \              processData(data);\r

  \              specAndDOM([gameStep]);\r

  \            });\r

  \          });\r

  \        });\r

  \      });\r

  \    });\r

  \  });\r

  }"
sendInitSeed: "function sendInitSeed(player, seed, callback) {\r

  \  let url = 'init_test/hotseat/' + player;\r

  \  if (seed != null) url += '/' + seed;\r

  \  unitTestSender('url:', url);\r

  \  sender.send(url, dInit => {\r

  \    unitTestSender('dInit:', dInit);\r

  \    dInit.info.game.player = player;\r

  \    callback(dInit);\r

  \  });\r

  }"
sendInitSeed_old: "function sendInitSeed_old(player, seed, callback) {\r

  \  sender.send('init/hotseat/' + player + '/' + seed, dInit => {\r

  \    sender.send('info/' + player, dInfo => {\r

  \      dInit = extend(true, dInit, dInfo);\r

  \      dInit.game.player = player;\r

  \      callback(dInit);\r

  \    });\r

  \  });\r

  }"
sendLoading: "function sendLoading(player, filename, callback) {\r

  \  unitTestLoad('loading', filename);\r

  \  var sData = {};\r

  \  sender.send('myload/' + filename + '.json', d1 => {\r

  \    unitTestLoad('myload response:', d1);\r

  \    sender.send('refresh/' + player, d2 => {\r

  \      unitTestLoad('refresh response:', d2);\r

  \      sData.created = d2;\r

  \      sender.send('status_test/' + player, d3 => {\r

  \        sData = augment(sData, d3);\r

  \        unitTestLoad('status_test response:', d3, 'akku:', sData, 'player',
  player);\r

  \        actionOrWaiting(player, sData, callback);\r

  \      });\r

  \    });\r

  \  });\r

  }"
sendLoading_old: "function sendLoading_old(filename, player, callback,
  outputOption = 'none') {\r

  \  execOptions.output = outputOption;\r

  \  var sData = {};\r

  \  sender.send('myload/' + filename + '.json', data => {\r

  \    sender.send('refresh/' + player, data => {\r

  \      sData.created = data;\r

  \      let chain = ['info/' + player, 'status/' + player];\r

  \      sender.chainSend(chain, player, data => {\r

  \        sData = augment(sData, data);\r

  \        sData.created = augment(sData.created, sData.updated);\r

  \        if ('waiting_for' in data && empty(getSet(data, 'waiting_for')))
  {\r

  \          sender.send('action/' + player + '/none', data => {\r

  \            sData = augment(sData, data);\r

  \            if (callback) callback(sData);\r

  \          });\r

  \        } else {\r

  \          if (callback) callback(sData);\r

  \        }\r

  \      });\r

  \    });\r

  \  });\r

  }"
sendLoadScenario: "function sendLoadScenario(player, filename, callback) {\r

  \  unitTestScenario('loading', filename);\r

  \  var sData = {};\r

  \  sender.send('myloadScenario/' + filename + '.json', d1 => {\r

  \    unitTestScenario('myloadScenario response:', d1);\r

  \    callback(d1);\r

  \  });\r

  }"
sendLoadScenario2: "function sendLoadScenario2(player, filename, callback) {\r

  \  unitTestScenario('_____________________loading scenario', filename);\r

  \  var sData = {};\r

  \  sender.send('myloadScenario2/' + filename + '.yml', d1 => {\r

  \    unitTestScenario('server response:', d1);\r

  \    callback(d1);\r

  \  });\r

  }"
sendLogin: "function sendLogin(username) { logClientSend('login', username);
  Socket.emit('login', { data: username }); }"
sendMousePosition: "function sendMousePosition(ev) {\r

  \  if (nundef(Socket)) return;\r

  \  if (!ev.altKey || ev.ctrlKey) return;\r

  \  let [x, y] = [ev.pageX, ev.pageY];\r

  \  x = (ev.pageX - $('#dFieldArea').offset().left);\r

  \  y = (ev.pageY - $('#dFieldArea').offset().top);\r

  \  if (Math.abs(x - LastPositionX) > MOUSED || Math.abs(y - LastPositionY) >
  MOUSED) {\r

  \    LastPositionX = x; LastPositionY = y;\r

  \    MouseMoveCounter = 0;\r

  \    Socket.emit('mouse', { username: Username, x: x, y: y });\r

  \  } else MouseMoveCounter += 1;\r

  }"
sendmove: "function sendmove(plname, fen, action, expected, step) {\r

  \  pollStop();\r

  \  let o = { type: 'move', uname: plname, game: G.name, fen: fen, action:
  action, expected: expected, step: step };\r

  \  sendfen(o, plname);\r

  }"
sendMoveField: "function sendMoveField(f) {\r

  \  let data = { dxy: f.item.dxy, iField: f.index, username: Username };\r

  \  logClientSend('moveField', data);\r

  \  Socket.emit('moveField', data);\r

  }"
sendMovePerle: "function sendMovePerle(perle, fFrom, fTo, dis) {\r

  \  let data = { dxy: perle.dxy, iPerle: perle.index, iFrom: fFrom.index,
  iTo: fTo.index, displaced: isdef(dis) ? dis.index : null, username: Username
  };\r

  \  logClientSend('movePerle', data);\r

  \  Socket.emit('movePerle', data);\r

  }"
sendPlacePerle: "function sendPlacePerle(perle, field, dis) {\r

  \  let data = { dxy: perle.dxy, iPerle: perle.index, iField: field.index,
  displaced: isdef(dis) ? dis.index : null, username: Username };\r

  \  logClientSend('placePerle', data);\r

  \  Socket.emit('placePerle', data);\r

  }"
sendRandom: function sendRandom(G, n, callback) { }
sendRelayout: "function sendRelayout(rows, cols, boardArr, poolArr) {\r

  \  let data = { rows: rows, cols: cols, boardArr: boardArr, username:
  Username };\r

  \  if (isdef(poolArr)) data.poolArr = poolArr;\r

  \  logClientSend('relayout', data);\r

  \  Socket.emit('relayout', data);\r

  }"
sendRemovePerle: "function sendRemovePerle(perle, fFrom) {\r

  \  let data = { iPerle: perle.index, iFrom: fFrom.index, username: Username
  };\r

  \  logClientSend('removePerle', data);\r

  \  Socket.emit('removePerle', data);\r

  }"
sendReset: "function sendReset(settings) { logClientSend('reset', Username);
  Socket.emit('reset', { settings: settings, username: Username }); }"
sendRestart: "async function sendRestart(username) {\r

  \  _syncUsernameOfSender(username);\r

  \  if (TESTING) serverData = await loadInitialServerData(Username);\r

  \  else serverData = await route_begin_status(Username);\r

  }"
sendSettings: "function sendSettings() {\r

  \  logClientSend('settings', G.settings);\r

  \  console.assert(G.settings == Settings.o, \"wrong settings
  object!!!!!!!\")\r

  \  Socket.emit('settings', { settings: G.settings, nFields:
  calcNFields(G.settings) });\r

  }"
sendSettingsWithBoardImage: "function sendSettingsWithBoardImage(pack) {\r

  \  logClientSend('sendSettingsWithBoardImage', pack.filename);\r

  \  console.log('pack', pack);\r

  \  Socket.emit('settingsWithBoardImage', pack);\r

  }"
sendSIMSIM: "function sendSIMSIM(o, exclusive = false, saveFromZ = false) {\r

  \  o = data_from_client(o);\r

  \  let result = apiphp(o, saveFromZ);\r

  \  if (TESTING && o.cmd == 'startgame') { for (const func of DA.test.mods)
  func(result.table); }\r

  \  let res = JSON.stringify(result);\r

  \  if (exclusive) { if_hotseat_autoswitch(result); handle_result(res,
  o.cmd); } else { console.log('sendSIMSIM testresult', result); }\r

  }"
sendStartOrJoinPerlenGame: "function sendStartOrJoinPerlenGame() {\r

  \  if (STARTED) {\r

  \    if (isdef(G)) { saveStateAndSettings(); }\r

  \    console.log('SERVER RESTART?!?!?!!!');\r

  \    return;\r

  \  }\r

  \  STARTED = true;\r

  \  let data = Username;\r

  \  logClientSend('startOrJoinPerlen', data);\r

  \  Socket.emit('startOrJoinPerlen', data);\r

  \  window.onkeydown = keyDownHandler;\r

  \  window.onkeyup = keyUpHandler;\r

  \  mBy('sidebar').ondblclick = () => { closeAux(); hide('sidebar') };\r

  \  G = new SimpleClass7();\r

  \  startingSetup();\r

  }"
sendStatus: "async function sendStatus(username) {\r

  \  _syncUsernameOfSender(username);\r

  \  if (!TESTING) serverData = await route_status(Username);\r

  }"
sendToBack: "function sendToBack(ui) {\r

  \  ui.style.zIndex = 0;\r

  }"
sendUserMessage: "function sendUserMessage(data) { logClientSend('userMessage',
  data.username); Socket.emit('userMessage', { data: data }); }"
separateAtCapitals: "function separateAtCapitals(s) {\r

  \  let sNew = '';\r

  \  for (let i = 0; i < s.length; i++) {\r

  \    let ch = s[i];\r

  \    if (ch.toUpperCase() != ch) sNew += ch;\r

  \    else sNew += ' ' + ch.toLowerCase();\r

  \  }\r

  \  return sNew;\r

  }"
sepWordListFromString: "function sepWordListFromString(s, seplist) {\r

  \  let words = multiSplit(s, seplist);\r

  \  return words.map(x => x.replace('\"', '').trim());\r

  }"
sepWords: "function sepWords(text, voiceKey, s = '') {\r

  \  text = text.toLowerCase();\r

  \  if (voiceKey == 'zira') {\r

  \    return text;\r

  \  } else if (startsWith(voiceKey, 'u')) { return text; }\r

  \  let words = text.split(' ');\r

  \  //s='? ';//' - ';\r

  \  text = words.join(' '); text += s;\r

  \  return text;\r

  }"
serialize_all: "function serialize_all() {\r

  \  let list = [];\r

  \  for (const id in Items) {\r

  \    let res = default_item_serializer(Items[id]);\r

  \    list.push(res);\r

  \  }\r

  \  console.log('list', list)\r

  \  downloadAsYaml(list, '_all');\r

  \  toLocalStorage(list);\r

  }"
server_offline: "function server_offline(req, type) {\r

  \  if (type == 'user_info') console.log('_______to server offline!', 'req',
  req, 'type', type, 'Session.cur_user', Session.cur_user);\r

  \  let response = {};\r

  \  switch (type) {\r

  \    case 'user_info':\r

  \    case 'account':\r

  \      if (nundef(req.user)) req.user = Session.cur_user;\r

  \      let u = response.message = DB.users[req.user];\r

  \      console.log('udata', u);\r

  \      response.name = u.name;\r

  \      break;\r

  \    case 'contacts':\r

  \      let usernames = get_user_names().filter(x => x !=
  Session.cur_user);\r

  \      response.users = usernames.map(x => DB.users[x]);\r

  \      break;\r

  \  }\r

  \  response.type = type;\r

  \  from_server(JSON.stringify(response), type);\r

  }"
server_online: "function server_online(req, type) {\r

  \  var xml = new XMLHttpRequest();\r

  \  var loader_holder = mBy(\"loader_holder\");\r

  \  loader_holder.className = \"loader_on\";\r

  \  xml.onload = function () {\r

  \    if (xml.readyState == 4 || xml.status == 200) {\r

  \      loader_holder.className = \"loader_off\";\r

  \      from_server(xml.responseText, type);\r

  \    }\r

  \  }\r

  \  var data = { req: req, type: type };\r

  \  data = JSON.stringify(data);\r

  \  xml.open(\"POST\", \"./server/apisi.php\", true);\r

  \  xml.send(data);\r

  }"
serverGet: "function serverGet(cmd, { game = 'catan', iTuple = 0 }, callback)
  {\r

  \  S.count.msg += 1;\r

  \  let url = SERVER_URL + (cmd == 'init' ? 'init/' + game : cmd == 'action'
  ? 'action/' + G.player + '/' + iTuple : 'status/' + G.player);\r

  \  $.ajax({\r

  \    url: url,\r

  \    type: 'GET',\r

  \    success: response => {\r

  \      if (response[0] != '{') {\r

  \        error('server response is NOT JSON string!!!...
  transforming...');\r

  \        if (callback) callback(JSON.parse('{\"response\":\"' + response +
  '\"}'));\r

  \      } else {\r

  \        let data = JSON.parse(response);\r

  \        if ('error' in data) {\r

  \          error(data);\r

  \          alert(JSON.stringify(data.error));\r

  \        } else {\r

  \          if (callback) callback(data);\r

  \        }\r

  \      }\r

  \    },\r

  \    error: err => {\r

  \      error(err);\r

  \      alert(err);\r

  \    },\r

  \  });\r

  }"
serverTest00_postData: "async function serverTest00_postData() {\r

  \  console.log('hallo');\r

  \  let o = { liste: [1, 2, 3], hut: 'hutX' };\r

  \  let path = './DATA/file.yaml';\r

  \  let resp = await postData('http://localhost:3000/db', { obj: o, path:
  path });\r

  \  console.log('response', resp); return;\r

  }"
SessionStart: "async function SessionStart() {\r

  \  await loadCorrectWords(); await loadAssets(); ensureSymBySet();
  makeHigherOrderGroups();\r

  \  initTable();\r

  \  initSidebar();\r

  \  initSettingsP0();\r

  \  CurrentSessionData = { user: currentUser, games: [] };\r

  \  if (immediateStart && IS_TESTING) { hide('freezer'); show('divControls');
  startGame(); }\r

  \  else if (immediateStart) { show('freezer'); hide('divControls'); }\r

  \  else { hide('freezer'); hide('divControls'); openSettings(); }\r

  }"
set_auction_phase: "function set_auction_phase(o) {\r

  \  fen = o.fen;\r

  \  fen.phase = o.phase = 'jack';\r

  \  fen.turn = [fen.plorder[0]];\r

  \  fen.stage = 12;\r

  \  ensure_market(fen, 3);\r

  }"
set_background_color: "function set_background_color(color, elem) { if
  (nundef(elem)) elem = mBy('md').parentNode; mStyle(elem, { bg:
  getColorDictColor(color) }); }"
set_bar: "function set_bar(id, val, speed) {\r

  \  let bar = DA.bars[id];\r

  \  let goal = Math.min(100, Math.max(0, val));\r

  \  if (goal == bar.w) return;\r

  \  let i = goal > bar.w ? speed : -speed;\r

  \  clearInterval(bar.ti);\r

  \  bar.ti = setInterval(() => anim(bar, i, goal), 10);\r

  \  function anim(bar, i, goal) {\r

  \    if (i < 0 && bar.w <= goal || i > 0 && bar.w >= goal) {\r

  \      clearInterval(bar.ti);\r

  \    } else {\r

  \      bar.w += i;\r

  \      bar.div.style.width = bar.w + '%';\r

  \    }\r

  \  }\r

  }"
set_blackmail_owner_stage: "function set_blackmail_owner_stage(o) {\r

  \  set_queen_phase(o);\r

  \  let fen = o.fen;\r

  \  let uplayer = fen.turn[0];\r

  \  console.log('blackmailed is', uplayer)\r

  \  give_various_buildings_to(o, uplayer);\r

  \  let other = firstCond(fen.plorder, (p) => p != uplayer);\r

  \  let building = get_building_with_rumor(o.fen, uplayer);\r

  \  let payment = { o: null, a: 'coin', key: 'coin', friendly: 'coin', path:
  null };\r

  \  fen.blackmail = { blackmailer: other, blackmailed: uplayer, payment:
  payment, building_path: building.path };\r

  \  building.isblackmailed = true;\r

  \  fen.stage = o.stage = 33;\r

  }"
set_blackmail_owner_stage_defend: "function set_blackmail_owner_stage_defend(o)
  {\r

  \  set_blackmail_owner_stage(o);\r

  \  console.log('==>blackmailed is', o.fen.turn[0])\r

  \  let fen = o.fen;\r

  \  let uplayer = fen.turn[0];\r

  \  console.log('==>blackmailed is', uplayer)\r

  \  let building = path2fen(fen, fen.blackmail.building_path);\r

  \  let lead = building.lead;\r

  \  fen.players[uplayer].rumors.push(`${lead[0]}Cr`);\r

  \  let plname = fen.blackmail.blackmailed;\r

  \  let rumors = fen.players[plname].rumors;\r

  \  console.log('lead', lead, 'blackmailed rumors', rumors);\r

  }"
set_boa_score: function set_boa_score(inc) { S.score += inc; if (S.score < 0)
  S.score = 0; boa_save(); }
set_card_border: "function set_card_border(item, thickness = 1, color = 'black',
  dasharray) {\r

  \  let d = iDiv(item);\r

  \  let rect = lastDescendantOfType('rect', d);\r

  \  assertion(rect, 'NO RECT FOUND IN ELEM', d);\r

  \  if (rect) {\r

  \    rect.setAttribute('stroke-width', thickness);\r

  \    rect.setAttribute('stroke', color);\r

  \    if (isdef(dasharray)) rect.setAttribute('stroke-dasharray',
  dasharray);\r

  \  }\r

  }"
set_card_constants: "function set_card_constants(w, h, ranks, suits,
  deckletters, numjokers = 0, ovdeck = .25, ovw = '20%', ovh = '20%') {\r

  \  Card = {};\r

  \  Card.sz = valf(h, 300);\r

  \  Card.h = h;\r

  \  Card.w = isdef(w) ? w : Card.sz * .7;\r

  \  Card.gap = Card.sz * .05;\r

  \  Card.ovdeck = ovdeck;\r

  \  Card.ovw = isString(ovw) ? Card.w * firstNumber(ovw) / 100 : ovw;\r

  \  Card.ovh = isString(ovh) ? Card.h * firstNumber(ovh) / 100 : ovh;\r

  \  Card.ranks = valf(ranks, '23456789TJQKA');\r

  \  Card.suits = valf(suits, 'SHDC');\r

  \  Card.decks = valf(deckletters, 'rb');\r

  \  Card.numdecks = deckletters.length;\r

  \  Card.numjokers = numjokers;\r

  }"
set_card_style: "function set_card_style(item, styles = {}, className) {\r

  \  console.log('set_card_style', item, styles);\r

  \  let d = iDiv(item);\r

  \  let svg = findDescendantOfType('svg', d);\r

  \  let rect = findDescendantOfType('rect', svg);\r

  \  if (isdef(styles.shadow)) {\r

  \    let shadow = styles.shadow;\r

  \    delete styles.shadow;\r

  \    let hexcolor = colorFrom(styles.shadow);\r

  \    svg.style.filter = `drop-shadow(4px 5px 2px ${hexcolor})`;\r

  \  }\r

  \  if (isdef(styles.bg)) {\r

  \    let hexcolor = colorFrom(styles.bg);\r

  \    rect.setAttribute('stroke-width', 14); rect.setAttribute('stroke',
  hexcolor);\r

  \  }\r

  \  assertion(rect, 'NO RECT FOUND IN ELEM', d);\r

  \  mStyle(d, styles);\r

  \  if (isdef(className)) mClass(svg, className);\r

  }"
set_card_style_works: "function set_card_style_works(c, styles, className) {\r

  \  let d = iDiv(c);\r

  \  mStyle(d, styles);\r

  \  d.firstChild.setAttribute('class', className);\r

  }"
set_context: "function set_context(item) {\r

  \  CONTEXT = isDict(item) ? item\r

  \    : isString(item) && isdef(Items[item]) ? Items[item]\r

  \      : isNumber(item) && isdef(Items[`_${item}`]) ? Items[`_${item}`]\r

  \        : get_values(Items)[0];\r

  }"
set_cur_tid_for_game: "function set_cur_tid_for_game() {\r

  \  console.assert(isdef(Session.tables_by_game) && isdef(Session.cur_game),
  \"set_cur_tid_for_game\");\r

  \  let tables = Session.tables_by_game;\r

  \  let game = Session.cur_game;\r

  \  if (!isEmpty(tables[game])) Session.cur_tid = tables[game][0].id;\r

  \  else Session.cur_tid = null;\r

  }"
set_elo: function set_elo(user, game, val) { lookupSetOverride(DB.users, [user,
  'games', game, 'elo'], val); }
set_g_index: function set_g_index(i) { G.i = i; call_question(i); }
set_hover_card: "function set_hover_card(b, d, val = 'silver', prop = 'fill')
  {\r

  \  b.onmouseenter = () => {\r

  \    let rs = Array.from(d.getElementsByTagName('rect'));\r

  \    let r = arrLast(rs);\r

  \    b[prop] = r.getAttribute(prop);\r

  \    r.setAttribute(prop, val);\r

  \  }\r

  \  b.onmouseleave = () => {\r

  \    let rs = Array.from(d.getElementsByTagName('rect'));\r

  \    let r = arrLast(rs);\r

  \    r.setAttribute(prop, b[prop]);\r

  \  }\r

  }"
set_hover_div: "function set_hover_div(b, d, val, prop) {\r

  \  b.onmouseenter = () => {\r

  \    d[prop] = mGetStyleX(d, prop);\r

  \    let style = {}; style[prop] = val; mStyle(d, style);\r

  \  }\r

  \  b.onmouseleave = () => {\r

  \    let style = {}; style[prop] = d.bg; mStyle(d, style);\r

  \  }\r

  }"
set_hover_ui: "function set_hover_ui(b, item) {\r

  \  let isCard = isdef(item.c52key);\r

  \  let d = iDiv(item);\r

  \  b.onmouseenter = () => {\r

  \    if (isCard) {\r

  \      let rs = Array.from(d.getElementsByTagName('rect'));\r

  \      let r = arrLast(rs);\r

  \      let fill = b.fill = r.getAttribute('fill');\r

  \      r.setAttribute('fill', 'silver');\r

  \    } else {\r

  \      let hallo = mGetStyle(d, 'bg');\r

  \      let bg = isEmpty(hallo) ? 'transparent' : valf(mGetStyle(d, 'bg'),
  'transparent');\r

  \      d.setAttribute('bg', bg);\r

  \      mStyle(d, { bg: 'silver' });\r

  \    }\r

  \  }\r

  \  b.onmouseleave = () => {\r

  \    if (isCard) {\r

  \      let rs = Array.from(d.getElementsByTagName('rect'));\r

  \      let r = arrLast(rs);\r

  \      r.setAttribute('fill', b.fill);\r

  \    } else {\r

  \      let bg = d.getAttribute('bg');\r

  \      mStyle(d, { bg: bg });\r

  \    }\r

  \  }\r

  }"
set_image_as_background: "function set_image_as_background(id, elem) {\r

  \  window.scrollTo(0, 0);\r

  \  html2canvas(document.getElementById(id)).then(function (canvas) {\r

  \    console.log('haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\r

  \    let imgData = canvas.toDataURL(\"image/jpeg\", 0.9);\r

  \    const rgbArray = buildRgb(imageData.data);\r

  \    const quantColors = quantization(rgbArray, 0);\r

  \    buildPalette(quantColors);\r

  \  });\r

  }"
set_journey_or_stall_stage: "function set_journey_or_stall_stage(fen, options,
  phase) {\r

  \  let pljourney = exp_journeys(options) ?
  find_players_with_potential_journey(fen) : [];\r

  \  let stage, turn;\r

  \  if (isEmpty(pljourney)) { delete fen.passed; turn = [fen.plorder[0]];
  ari_ensure_deck(fen, phase == 'jack' ? 3 : 2); stage = 3; }\r

  \  else { turn = [pljourney[0]]; stage = 1; }\r

  \  return [stage, turn];\r

  }"
set_king_phase: function set_king_phase(o) { set_queen_phase(o); o.phase =
  o.fen.phase = 'king'; }
set_language: "function set_language(lang = 'E', update_ui = true) {\r

  \  console.log('lang', lang);\r

  \  if (isdef(G)) {\r

  \    G.language = G.lang = lang; lookupSetOverride(U.games, [G.id,
  'language'], lang);\r

  \    Speech.setLanguage(lang);\r

  \  }\r

  }"
set_most_recent_table_as_cur_tid: function
  set_most_recent_table_as_cur_tid(tables) { if (!isEmpty(tables))
  Session.cur_tid = tables[0].id; }
set_new_goal: "function set_new_goal(id, goal, speed = .1) {\r

  \  let bar = DA.bars[id];\r

  \  goal = Math.min(100, Math.max(0, goal));\r

  \  if (goal == bar.w) return;\r

  \  let i = goal > bar.w ? speed : -speed;\r

  \  clearInterval(bar.ti);\r

  \  bar.ti = setInterval(() => anim(bar, i, goal), 10);\r

  \  function anim(bar, i, goal) {\r

  \    if (i < 0 && bar.w <= goal || i > 0 && bar.w >= goal) {\r

  \      clearInterval(bar.ti);\r

  \    } else {\r

  \      bar.w += i;\r

  \      bar.div.style.width = bar.w + '%';\r

  \    }\r

  \  }\r

  }"
set_new_password: "function set_new_password() {\r

  \  let len = Math.min(20, S.master_password.length + 1);\r

  \  let pnew = rPassword(len);\r

  \  console.log('new password: ', pnew);\r

  \  S.master_password = pnew;\r

  \  S.score = 0;\r

  \  boa_save();\r

  }"
set_palette: "function set_palette(hue = 0, nHues = 2, sat = 100, a = 1) {\r

  \  palette = gen_palette(hue, nHues, sat, a);\r

  \  return palette;\r

  }"
set_player: "function set_player(name, fen) {\r

  \  if (isdef(PL) && PL.name != name) { Z.prev.pl = PL; Z.prev.uplayer =
  PL.name; }\r

  \  PL = Z.pl = firstCond(Serverdata.users, x => x.name == name);\r

  \  copyKeys(fen.players[name], PL);\r

  \  Z.uplayer = name;\r

  }"
set_player_strategy: "function set_player_strategy(val) {\r

  \  Z.strategy = Clientdata.strategy = Z.pl.strategy = val;\r

  \  mRemove('dOptions')\r

  }"
set_player_tides: "function set_player_tides(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let min = 1000, minplayer = null;\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    let hkey = pl.hand[0];\r

  \    let val = ari_get_card(hkey).val;\r

  \    pl.tides = { keys: [hkey], val: val };\r

  \    if (val < min) { min = val; minplayer = plname; }\r

  \    console.log('player', plname, 'tides', pl.tides);\r

  \  }\r

  \  let sorted = sortByDescending(fen.plorder, x =>
  fen.players[x].tides.val);\r

  \  fen.church_order = jsCopy(fen.plorder);\r

  \  fen.tide_minimum =\r

  \    fen.stage = 21;\r

  }"
set_player_tithes: "function set_player_tithes(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  let min = 1000, minplayer = null;\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    let hkey = pl.hand[0];\r

  \    let val = ari_get_card(hkey).val;\r

  \    pl.tithes = { keys: [hkey], val: val };\r

  \    if (val < min) { min = val; minplayer = plname; }\r

  \    console.log('player', plname, 'tithes', pl.tithes);\r

  \  }\r

  \  let sorted = sortByDescending(fen.plorder, x =>
  fen.players[x].tithes.val);\r

  \  fen.church_order = jsCopy(fen.plorder);\r

  \  fen.tithe_minimum =\r

  \    fen.stage = 21;\r

  }"
set_preferred_lang: function set_preferred_lang(uname, val) { val =
  val.toUpperCase(); if ('EDSFC'.indexOf(val) >= 0) return
  lookupSetOverride(DB.users, [uname, 'lang'], val); }
set_queen_phase: "function set_queen_phase(o) {\r

  \  fen = o.fen;\r

  \  fen.phase = o.phase = 'queen';\r

  \  arisim_stage_3(fen);\r

  \  arisim_stage_4_all(fen, 3, false);\r

  \  ensure_actions(fen);\r

  \  fen.turn = [fen.plorder[0]];\r

  }"
set_run_state: "function set_run_state(singleclient = true, sockets = false,
  port = 3000, localhost = true, testing = true, liveserver = true, nodejs =
  true) {\r

  \  SERVER = localhost ? '127.0.0.1' : '216.250.112.218';\r

  \  PORT = port;\r

  \  SERVERURL = `http:/` + `${SERVER}:${PORT}`;\r

  \  NODEJS = nodejs;\r

  \  LIVE_SERVER = liveserver;\r

  \  TESTING = testing;\r

  \  SINGLECLIENT = singleclient;\r

  \  if (sockets) {\r

  \    Socket = liveserver ? io(SERVERURL) : io();\r

  \    Socket.on('message', x => console.log('got message', x));\r

  \    Socket.on('disconnect', x => console.log('got disconnect', x));\r

  \    Socket.on('update', x => console.log('got update', x));\r

  \  }\r

  \  console.log('SERVER:' + SERVERURL, 'LIVE:' + LIVE_SERVER, 'Socket:' +
  Socket, TESTING ? 'TESTING' : '', SINGLECLIENT ? 'SINGLE' : '');\r

  }"
set_run_state_local: "function set_run_state_local() {\r

  \  set_run_state(true, false, 3000, true, false, true, true);\r

  }"
set_run_state_no_server: "function set_run_state_no_server() {\r

  \  set_run_state(true, false, 3000, true, true, true, false);\r

  }"
set_run_state_vps: "function set_run_state_vps() {\r

  \  set_run_state(false, false, 3000, false, false, false, true);\r

  }"
set_seen: function set_seen(e) { SEEN_STATUS = true; }
set_sound: "function set_sound(silent = false) {\r

  \  let b = mBy('b_sound');\r

  \  if (silent) {\r

  \    b.className = 'statusbutton sym enabled off';\r

  \    b.innerHTML = '🔈️';\r

  \  } else {\r

  \    b.className = 'statusbutton sym enabled on';\r

  \    b.innerHTML = '🔊';\r

  \  }\r

  }"
set_start_data_from_fen: "function set_start_data_from_fen(fen, game) {\r

  \  let parts = fen.split(',');\r

  \  for (const p of parts) {\r

  \    let [name, startlevel, lang] = p.split(':');\r

  \    startlevel = Number(startlevel);\r

  \    set_startlevel(name, game, startlevel);\r

  \    set_preferred_lang(name, lang);\r

  \  }\r

  }"
set_startlevel: function set_startlevel(user, game, val) { return
  lookupSetOverride(DB.users, [user, 'games', game, 'startlevel'], val); }
set_state_numbers: "function set_state_numbers(otree) {\r

  \  let [step, stage, iturn, round, phase] = [valf(otree.step, 0),
  valf(otree.stage, 0), valf(otree.iturn, 0), valf(otree.round, []),
  valf(otree.phase, 'king')];\r

  \  otree.step = step;\r

  \  otree.stage = stage;\r

  \  otree.iturn = iturn;\r

  \  otree.round = round;\r

  \  otree.phase = phase;\r

  \  let plturn = otree.plturn = otree.plorder[iturn];\r

  \  return [step, stage, iturn, round, phase, plturn];\r

  }"
set_style_from_options: "function set_style_from_options(layer, options = {})
  {\r

  \  let style = isdef(options.colorfunc) ? get_style_func(options.colorfunc,
  valf(options.bg, 'lime'), valf(options.fg, 'orange'))\r

  \    : get_style(valf(options.bg, 'yellow'), valf(options.fg, 'yellow'));\r

  \  layer.setStyle(style);\r

  }"
set_tables_by_game: "function set_tables_by_game(obj, is_set_cur_id = true) {\r

  \  let tables = Session.tables = obj.tables;\r

  \  let bygame = Session.tables_by_game = {};\r

  \  if (isEmpty(tables)) {\r

  \    Session.cur_tid = null;\r

  \    Session.tables_by_game = {};\r

  \  } else {\r

  \    if (is_set_cur_id) {\r

  \      let t = tables[0];\r

  \      Session.cur_tid = t.id;\r

  \      Session.cur_game = t.game;\r

  \    }\r

  \    for (const t of tables) { lookupAddToList(bygame, [t.game], t); }\r

  \  }\r

  \  return bygame;\r

  }"
set_user: "function set_user(name) {\r

  \  if (isdef(Z) && isdef(U) && U.name != name) {\r

  \    Z.prev.u = U;\r

  \    Z.prev.uname = U.name;\r

  \  }\r

  \  U = firstCond(Serverdata.users, x => x.name == name);\r

  \  if (isdef(Z)) {\r

  \    Z.u = U;\r

  \    Z.uname = Z.uplayer = name;\r

  \  }\r

  }"
set_user_tables_by_game: "function set_user_tables_by_game(obj) {\r

  \  let user_tables = obj.user_tables;\r

  \  let bygame = Session.user_tables_by_game = {};\r

  \  if (isEmpty(user_tables)) {\r

  \    Session.cur_tid = null;\r

  \    Session.user_tables_by_game = {};\r

  \  } else {\r

  \    Session.cur_tid = user_tables[0].id;\r

  \    for (const t of user_tables) { lookupAddToList(bygame, [t.game], t);
  }\r

  \  }\r

  \  return bygame;\r

  }"
setActiveButton: "function setActiveButton(button) {\r

  \  ActiveButton = button;\r

  \  mStyleX(button, { bg: 'dimgray', fg: 'white' });\r

  \  button.innerHTML = 'submit command!';\r

  }"
setApply: "function setApply(prop, val) {\r

  \  let s = G.settings;\r

  \  if (isNumber(val)) val = Number(val);\r

  \  s[prop] = val;\r

  \  G.clientBoard = applySettings(G.clientBoard, s);\r

  }"
setAreaHeight: "function setAreaHeight(areaName, h) {\r

  \  let varName = AREAS[areaName][1];\r

  \  let hAttr = isNumber(h) ? '' + h + 'px' : h;\r

  \  setCSSVariable(varName, hAttr);\r

  \  if (UIS[areaName]) UIS[areaName].h = h;\r

  }"
setAreaWidth: "function setAreaWidth(areaName, w) {\r

  \  if (!(areaName in AREAS)) { alert('not in AREAS!!! ' + areaName) }\r

  \  let wString;\r

  \  let wNum = null;\r

  \  if (isString(w)) {\r

  \    let n = firstNumber(w);\r

  \    if (isNumber(n)) wNum = n;\r

  \    wString = w;\r

  \  } else {\r

  \    wNum = w;\r

  \    wString = '' + w + 'px';\r

  \  }\r

  \  let varName = AREAS[areaName][0];\r

  \  setCSSVariable(varName, wString);\r

  \  if (UIS[areaName] && wNum) UIS[areaName].w = wNum;\r

  }"
setAutoplayFunctionForMode: "function setAutoplayFunctionForMode(mode, isStartup
  = false) {\r

  \  if (nundef(mode)) mode = S.settings.playmode;\r

  \  if (!isStartup) S_autoplayFunction = (_g, _) =>
  isFrontAIPlayer(_g.player);\r

  }"
setBackgroundColor: "function setBackgroundColor(c) { mStyleX(document.body, {
  bg: getColorDictColor(isdef(c) ? c : G.color) }); }"
setBackgroundToPlayerColor: "function setBackgroundToPlayerColor() {\r

  \  let c = G.playersAugmented[G.player].color;\r

  }"
setBadgeLevel: "function setBadgeLevel(i) {\r

  \  G.level = i;\r

  \  Score.levelChange = true;\r

  \  if (isEmpty(badges)) showBadgesX(dLeiste, G.level, onClickBadgeX,
  G.maxLevel);\r

  \  for (let iBadge = 0; iBadge < G.level; iBadge++) {\r

  \    let d1 = iDiv(badges[iBadge]);\r

  \    d1.style.opacity = .75;\r

  \    d1.style.border = 'transparent';\r

  \    d1.children[1].innerHTML = '* ' + (iBadge + 1) + ' *';\r

  \    d1.children[0].style.color = 'white';\r

  \  }\r

  \  let d = iDiv(badges[G.level]);\r

  \  d.style.border = '1px solid #00000080';\r

  \  d.style.opacity = 1;\r

  \  d.children[1].innerHTML = 'Level ' + (G.level + 1);\r

  \  d.children[0].style.color = 'white';\r

  \  for (let iBadge = G.level + 1; iBadge < badges.length; iBadge++) {\r

  \    let d1 = iDiv(badges[iBadge]);\r

  \    d1.style.border = 'transparent';\r

  \    d1.style.opacity = .25;\r

  \    d1.children[1].innerHTML = 'Level ' + (iBadge + 1);\r

  \    d1.children[0].style.color = 'black';\r

  \  }\r

  }"
setCategories: "function setCategories(groupNameList) {\r

  \  ensureSymBySet();\r

  \  let keys = [];\r

  \  for (const cat of groupNameList) {\r

  \    let name = cat.toLowerCase();\r

  \    for (const k of symKeysBySet[name]) {\r

  \      keys.push(k);\r

  \    }\r

  \  }\r

  \  return keys;\r

  }"
setColorPalette: "function setColorPalette(colors, type = 'shade') {\r

  \  let pals = colors.map(x => getPalette(x));\r

  \  let i = 0;\r

  \  let d = 0;\r

  \  let ch = ['0', '1', 'h'];\r

  \  for (const p of pals) {\r

  \    for (const c of p) {\r

  \      setCSSVariable('--pal' + ch[i] + '_' + d, c);\r

  \      d += 1;\r

  \    }\r

  \    i += 1;\r

  \    d = 0;\r

  \  }\r

  \  if (nundef(S.pals)) S.pals = pals;\r

  \  else { S.pals[0] = pals[0]; S.pals[1] = pals[1]; S.pals[2] = pals[2]; }\r

  }"
setCSSButtonColors: "function setCSSButtonColors(palset, ihue = 0) {\r

  \  let root = document.documentElement;\r

  \  let pal = palset[ihue];\r

  \  let len = pal.length;\r

  \  root.style.setProperty('--bbg', pal[2]);\r

  \  root.style.setProperty('--bhbg', pal[0]);\r

  \  root.style.setProperty('--babg', pal[5]);\r

  \  root.style.setProperty('--baltbg', pal[3]);\r

  }"
setCssVar: function setCssVar(varname, val) {
  document.body.style.setProperty(varname, val); }
setCSSVariable: "function setCSSVariable(varName, val) {\r

  \  let root = document.documentElement;\r

  \  root.style.setProperty(varName, val);\r

  }"
setCurrent: "function setCurrent(id) {\r

  \  if (dCurrent && dCurrent.id == id) return;\r

  \  else if (dCurrent) hideCurrent();\r

  \  dCurrent = mBy(id); mStyle(dCurrent, { overflow: 'hidden' }); show(id);
  return dCurrent;\r

  }"
setCurrentInfo: "function setCurrentInfo(item) {\r

  \  currentInfo = item.info;\r

  \  matchingWords = currentInfo.words;\r

  \  validSounds = currentInfo.valid;\r

  \  bestWord = Goal.label;\r

  \  hintWord = '_'.repeat(bestWord.length);\r

  }"
setCurrentPath: "function setCurrentPath(fname) {\r

  \  let pathDictionary = DOC_vault;\r

  \  let key = firstCondDict(pathDictionary, x =>
  sameCaseInsensitive(x.filename, fname));\r

  \  let entry = DOC_vault[key];\r

  \  let index = entry.index;\r

  \  setCurrentPathIndex(index);\r

  }"
setCurrentPathIndex: "function setCurrentPathIndex(i) {\r

  \  if (i == DOC_CURRENT_PATH_INDEX) {\r

  \    console.log('current path already set to', i);\r

  \    return;\r

  \  }\r

  \  let curPath = isdef(DOC_CURRENT_PATH_INDEX) ?
  DOC_dvIndex[DOC_CURRENT_PATH_INDEX] : null;\r

  \  let newPath = i >= 0 && i <= DOC_dvIndex.length ? DOC_dvIndex[i] :
  null;\r

  \  if (curPath) {\r

  \    let curEntry = DOC_vault[curPath];\r

  \    let idDiv = curEntry.idPathContainer;\r

  \    hide(idDiv);\r

  \  }\r

  \  if (newPath) {\r

  \    let newEntry = DOC_vault[newPath];\r

  \    let idDiv = newEntry.idPathContainer;\r

  \    show(idDiv);\r

  \    DOC_CURRENT_PATH_INDEX = i;\r

  \  }\r

  }"
setDefaultOptions: "function setDefaultOptions() {\r

  \  let opt = { present: { object: {}, player: {} }, game: {} };\r

  \  opt.present.object.createDefault = true;\r

  \  opt.present.player.createDefault = true;\r

  \  opt.present.object.optin = null;\r

  \  opt.present.object.optout = ['obj_type', 'id'];\r

  \  opt.present.player.optin = null;\r

  \  opt.present.player.optout = ['obj_type', 'id'];\r

  \  opt.colors = ['#07061c', '#6a1c81', '#f4695c'];\r

  \  opt.gap = 0;\r

  \  opt.outerGap = false;\r

  \  S.options = opt;\r

  }"
setDefaultRSGSettings: "function setDefaultRSGSettings() {\r

  \  S.settings.table.createDefault = true;\r

  \  S.settings.player.createDefault = true;\r

  \  S.settings.boardDetection = S_boardDetection;\r

  \  S.settings.deckDetection = S_deckDetection;\r

  \  S.settings.useColorHintForProperties = S_useColorHintForProperties;\r

  \  S.settings.useColorHintForObjects = S_useColorHintForObjects;\r

  \  S.settings.gameAreaSize = S_boardDetection ? [1000, 800] : [1000,
  '65vh'];\r

  \  S.settings.table.defaultArea = S_defaultObjectArea;\r

  \  S.settings.player.defaultArea = S_defaultPlayerArea;\r

  \  S.settings.table.optin = null;\r

  \  S.settings.table.optout = ['obj_type', 'id'];\r

  \  S.settings.onlySimpleValues = true;\r

  \  S.settings.player.optin = null;\r

  \  S.settings.player.optout = ['id', 'color', 'altName', 'index'];\r

  \  S.settings.extendedOptout = { color: 1, altName: 1, index: 1, username:
  1, playerType: 1, player: 1, agentType: 1, obj_type: 1, id: 1, visible: 1,
  neighbors: 1, fields: 1, edges: 1, corners: 1, row: 1, col: 1 };\r

  \  S.settings.useExtendedOptout = true;\r

  \  S.settings.table.ignoreTypes = [];\r

  \  S.settings.pieceSizeRelativeToLoc = {};\r

  \  S.settings.pieceSizeRelativeToLoc.corner = ['w', 100];\r

  \  S.settings.pieceSizeRelativeToLoc.field = ['w', 30];\r

  \  S.settings.pieceSizeRelativeToLoc.edge = ['length', 100];\r

  \  S.settings.addSymbolToEdges = false;\r

  \  S.settings.symbols = {};\r

  \  S.settings.color.theme = '#6B7A8F';\r

  \  S.settings.gap = 4;\r

  \  S.settings.outerGap = false;\r

  }"
setDefaultSettings: "function setDefaultSettings() {\r

  \  document.getElementById('c_b_TTip').textContent = 'tooltips: ' +
  S_tooltips;\r

  \  let checkedModeInput = document.getElementById('c_b_mm_' +
  PLAYMODE.toLowerCase());\r

  \  checkedModeInput.checked = true;\r

  \  S.settings = { table: {}, player: {}, game: {}, color: {} };\r

  \  S.settings.seed = SEED;\r

  \  S.settings.game = GAME;\r

  \  S.settings.playmode = PLAYMODE;\r

  \  S.settings.clickToSelect = true;\r

  \  S.settings.tooltips =
  document.getElementById('c_b_TTip').textContent.includes('ON');\r

  \  S.settings.openTab = S_openTab;\r

  \  S.settings.userSettings = S_userSettings;\r

  \  S.settings.userStructures = S_userStructures;\r

  \  S.settings.userBehaviors = S_userBehaviors;\r

  \  setDefaultRSGSettings();\r

  }"
setDivBg: "function setDivBg(d1, bg) {\r

  \  d1.style.setProperty('background-color', bg);\r

  }"
setDivSize: "function setDivSize(d1, w, h, unit = 'px') {\r

  \  d1.style.setProperty('width', makeUnitString(w, unit));\r

  \  d1.style.setProperty('height', makeUnitString(h, unit));\r

  }"
setDropPosition: "function setDropPosition(ev, elem, targetElem, dropPos) {\r

  \  if (dropPos == 'mouse') {\r

  \    var elm = $(targetElem);\r

  \    x = ev.pageX - elm.offset().left - dragStartOffset.x;\r

  \    y = ev.pageY - elm.offset().top - dragStartOffset.y;\r

  \    posXY(elem, targetElem, x, y);\r

  \  } else if (dropPos == 'none') {\r

  \    return;\r

  \  } else if (dropPos == 'center') {\r

  \    elem.style.position = elem.style.left = elem.style.top = '';\r

  \    elem.classList.add('centeredTL');\r

  \  } else if (dropPos == 'centerCentered') {\r

  \    elem.style.position = elem.style.left = elem.style.top = '';\r

  \    elem.classList.add('centerCentered');\r

  \  } else {\r

  \    dropPos(ev, elem, targetElem);\r

  \  }\r

  }"
setDropZones: "function setDropZones(items, handler) {\r

  \  DropZones = [];\r

  \  DropZoneItems = [];\r

  \  for (let i = 0; i < items.length; i++) {\r

  \    let d = iDiv(items[i]);\r

  \    d.onmouseup = () => handler(items[i]);\r

  \    mClass(d, 'dropzone');\r

  \    DropZones.push(d);\r

  \    DropZoneItems.push(items[i]);\r

  \  }\r

  }"
setEquationGoal: "function setEquationGoal() {\r

  \  let blank = blankWordInputs(G.words, G.numMissing, G.posMissing);\r

  \  Goal = { seq: G.seq, words: G.words, chars: G.letters, blankWords:
  blank.words, blankChars: blank.letters, iFocus: blank.iFocus };\r

  \  Goal.qCharIndices = Goal.blankChars.map(x => x.index);\r

  \  Goal.qWordIndices = Goal.blankWords.map(x => x.iWord);\r

  \  let yes = true;\r

  \  for (let i = 0; i < Goal.chars.length; i++) if (Goal.chars[i].index != i)
  yes = false;\r

  \  console.assert(yes == true);\r

  }"
setExpGoal: function setExpGoal() { }
setFixedSizeAndPos: "function setFixedSizeAndPos(n) {\r

  \  let ui = n.ui;\r

  \  if (nundef(n.params.size)) return;\r

  \  n.size = jsCopy(n.params.size);\r

  \  n.pos = jsCopy(n.params.pos);\r

  \  n.pos.cx = n.pos.x + n.size.w / 2;\r

  \  n.pos.cy = n.pos.y + n.size.h / 2;\r

  \  ui.style.position = 'absolute';\r

  \  ui.style.left = n.pos.x + 'px';\r

  \  ui.style.top = n.pos.y + 'px';\r

  \  ui.style.minWidth = n.size.w + 'px';\r

  \  ui.style.minHeight = n.size.h + 'px';\r

  }"
setFullscreenKey: "function setFullscreenKey() {\r

  \  addKeyup('F11', (ev) => {\r

  \    let k = ev.keyCode;\r

  \    let key = ev.key;\r

  \    toggleSidebar(ev, k, key);\r

  \  });\r

  }"
setGame: "function setGame(game, immediate = false) {\r

  \  cleanupOldGame();\r

  \  resetUIDs();\r

  \  if (isdef(G) && G.id != game) Score.gameChange = true;\r

  \  G = new (classByName(capitalize(game)))(game, DB.games[game]);\r

  \  Settings = new SettingsClass(G, dAux);\r

  \  if (nundef(U.games[game])) {\r

  \    if (G.controllerType == 'solitaire') { U.games[game] = { nTotal: 0,
  nCorrect: 0, nCorrect1: 0, startLevel: 0 }; }\r

  \    else U.games[game] = {};\r

  \  }\r

  \  if (isdef(G.maxLevel)) G.level = Math.min(getUserStartLevel(game),
  G.maxLevel);\r

  \  Settings.updateGameValues(U, G);\r

  \  saveUser();\r

  \  switch (G.controllerType) {\r

  \    case 'solitaire': GC = new ControllerSolitaire(G, U); break;\r

  \    case 'solo': GC = new ControllerTTT(G, U); break;\r

  \    case 'multi': GC = new ControllerMulti(G, U); break;\r

  \  }\r

  \  G.controller = GC;\r

  \  showGameTitle();\r

  \  if (immediate) GC.startGame();\r

  }"
setGame_dep: "function setGame_dep(game, immediate = false) {\r

  \  cleanupOldGame();\r

  \  resetUIDs();\r

  \  if (isdef(G) && G.id != game) Score.gameChange = true;\r

  \  G = new (classByName(capitalize(game)))(game, DB.games[game]);\r

  \  Settings = new SettingsClass(G, dAux);\r

  \  if (nundef(U.games[game])) {\r

  \    if (G.controllerType == 'solitaire') { U.games[game] = { nTotal: 0,
  nCorrect: 0, nCorrect1: 0, startlevel: 0 }; }\r

  \    else U.games[game] = {};\r

  \  }\r

  \  if (isdef(G.maxlevel)) G.level = Math.min(getUserStartLevel(game),
  G.maxlevel);\r

  \  Settings.updateGameValues(U, G);\r

  \  save_users();\r

  \  let s = valf(G.av_modes, 'training');\r

  \  let modes = s.split(',');\r

  \  if (!modes.includes(Session.def_playmode)) Session.def_playmode =
  modes[0];\r

  \  G.playmode = Session.def_playmode;\r

  \  if (nundef(G.controller_class)) G.controller_class =
  `Controller${capitalize(G.playmode)}`;\r

  \  GC = new (classByName(G.controller_class))(G, U);\r

  \  G.controller = GC;\r

  \  showGameTitle();\r

  \  if (immediate) GC.startGame();\r

  }"
setGamePlayer: "function setGamePlayer(username) {\r

  \  Username = username;\r

  \  GAMEPLID = firstCondDict(playerConfig[GAME].players, p => p.username ==
  username);\r

  }"
setGoal: "function setGoal(index) {\r

  \  if (nundef(index)) {\r

  \    let rnd = G.numPics < 2 ? 0 : randomNumber(0, G.numPics - 2);\r

  \    if (G.numPics >= 2 && rnd == lastPosition && coin(70)) rnd = G.numPics
  - 1;\r

  \    index = rnd;\r

  \  }\r

  \  lastPosition = index;\r

  \  Goal = Pictures[index];\r

  }"
setGradientImageBackground: "function setGradientImageBackground(d, path, color1
  = 'red', color2 = 'green') {\r

  \  d.style.background = color1;\r

  \  d.style.backgroundImage = `url(${path})`;\r

  \  d.style.backgroundImage = `url(${path}), linear-gradient(${color1},
  ${color2})`;\r

  \  d.style.backgroundSize = '100%';\r

  }"
setGranularityFactor: "function setGranularityFactor(s, f = 2) {\r

  \  let lines = s.split('\"');\r

  \  let lines1 = lines.filter(x => !isEmptyOrWhiteSpace(x));\r

  \  let lines2 = [];\r

  \  for (const l of lines1) {\r

  \    let lNew = '';\r

  \    for (let i = 0; i < l.length; i++) {\r

  \      if (l[i] == ' ') continue;\r

  \      for (let x = 0; x < f; x++) lNew += l[i] + ' ';\r

  \    }\r

  \    lines2.push(lNew.trim());\r

  \  }\r

  \  let lines3 = [];\r

  \  for (const l of lines2) { for (let i = 0; i < f; i++) { lines3.push(l); }
  }\r

  \  return lines3;\r

  }"
setGroup: "function setGroup(groupName) {\r

  \  ensureSymBySet();\r

  \  return jsCopy(symKeysBySet[groupName]);\r

  }"
setHNeeded: "function setHNeeded(elem) {\r

  \  let sz = getSizeNeeded(elem);\r

  \  let r = getRect(elem);\r

  \  if (sz.h > r.h && elem.style.height != '100%') { r.h = sz.h; mStyle(elem,
  { h: r.h }); }\r

  \  elem.setAttribute('rect', `${r.w} ${r.h} ${r.t} ${r.l} ${r.b} ${r.r}`);\r

  \  return r.h;\r

  }"
SetInitialBoardPieces: "function SetInitialBoardPieces() {\r

  \  var sq;\r

  \  var sq120;\r

  \  var file, rank;\r

  \  var rankName;\r

  \  var fileName;\r

  \  var imageString;\r

  \  var pieceFileName;\r

  \  var pce;\r

  \  ClearAllPieces();\r

  \  for (sq = 0; sq < 64; ++sq) {\r

  \    sq120 = SQ120(sq);\r

  \    pce = brd_pieces[sq120];\r

  \    if (GameController.BoardFlipped == BOOL.TRUE) {\r

  \      sq120 = MIRROR120(sq120);\r

  \    }\r

  \    file = FilesBrd[sq120];\r

  \    rank = RanksBrd[sq120];\r

  \    if (pce >= PIECES.wP && pce <= PIECES.bK) {\r

  \      rankName = \"rank\" + (rank + 1);\r

  \      fileName = \"file\" + (file + 1);\r

  \      pieceFileName = \"../base/assets/images/chess/\" +
  SideChar[PieceCol[pce]] + PceChar[pce].toUpperCase() + \".png\";\r

  \      imageString = \"<image src=\\\"\" + pieceFileName + \"\\\"
  class=\\\"Piece \" + rankName + \" \" + fileName + \"\\\"/>\";\r

  \      $(\"#ChessBoard\").append(imageString);\r

  \    }\r

  \  }\r

  }"
setIsReallyMultiplayer: "function setIsReallyMultiplayer() {\r

  \  let gc = S.gameConfig;\r

  \  let players = gc.players;\r

  \  let foreign = firstCond(players, x => !isMyPlayer(x.id) && x.playerType
  == 'human');\r

  \  isReallyMultiplayer = (foreign != null);\r

  \  disableButtonsForMultiplayerGame();\r

  }"
setKeys: "function setKeys({ allowDuplicates, nMin = 25, lang, key, keySets,
  filterFunc, param, confidence, sortByFunc } = {}) {\r

  \  let keys = jsCopy(keySets[key]);\r

  \  if (isdef(nMin)) {\r

  \    let diff = nMin - keys.length;\r

  \    let additionalSet = diff > 0 ? nMin > 100 ? firstCondDictKeys(keySets,
  k => k != key && keySets[k].length > diff) : 'best100' : null;\r

  \    if (additionalSet) KeySets[additionalSet].map(x => addIf(keys, x));\r

  \  }\r

  \  let primary = [];\r

  \  let spare = [];\r

  \  for (const k of keys) {\r

  \    let info = Syms[k];\r

  \    info.best = info[lang];\r

  \    if (nundef(info.best)) {\r

  \      let ersatzLang = (lang == 'D' ? 'D' : 'E');\r

  \      let klang = 'best' + ersatzLang;\r

  \      if (nundef(info[klang])) info[klang] = lastOfLanguage(k,
  ersatzLang);\r

  \    }\r

  \    let isMatch = true;\r

  \    if (isdef(filterFunc)) isMatch = isMatch && filterFunc(param, k,
  info.best);\r

  \    if (isdef(confidence)) isMatch = info[klang + 'Conf'] >= confidence;\r

  \    if (isMatch) { primary.push(k); } else { spare.push(k); }\r

  \  }\r

  \  if (isdef(nMin)) {\r

  \    let len = primary.length;\r

  \    let nMissing = nMin - len;\r

  \    if (nMissing > 0) { let list = choose(spare, nMissing); spare =
  arrMinus(spare, list); primary = primary.concat(list); }\r

  \  }\r

  \  if (isdef(sortByFunc)) { sortBy(primary, sortByFunc); }\r

  \  if (isdef(nMin)) console.assert(primary.length >= nMin);\r

  \  if (nundef(allowDuplicates)) {\r

  \    primary = removeDuplicates(primary);\r

  \  }\r

  \  return primary;\r

  }"
setKeysG: "function setKeysG(g, filterFunc, nMin, key) {\r

  \  if (nundef(nMin)) nMin = 25;\r

  \  if (isdef(g.numPics)) nMin = Math.max(25, g.numPics);\r

  \  return setKeys({ nMin: nMin, lang: g.language, key: valf(key, g.vocab),
  keySets: KeySets, filterFunc: filterFunc, param: g });\r

  }"
setKeysX: "function setKeysX({ cats, bestOnly = false, correctOnly = false,
  sortAccessor }) {\r

  \  currentKeys = getKeySetX(isdef(cats) ? cats : currentCategories,
  currentLanguage, MinWordLength, MaxWordLength,\r

  \    bestOnly, sortAccessor, correctOnly, reqOnly);\r

  \  if (isdef(sortByFunc)) { sortBy(currentKeys, sortAccessor); }\r

  }"
setLanguage: function setLanguage(x) { currentLanguage = x; startLevel(); }
setLanguageHALLO: function setLanguageHALLO(l) { Settings.language = G.language
  = l; Speech.setLanguage(l); console.log('SET LANGUAGE TO', l, G.language,
  G.lang); }
setLinearBackground: "function setLinearBackground(d, cInner = '#00000080',
  percentWide, cOuter = 'transparent') {\r

  \  if (typeof cInner == 'function') cInner = cInner();\r

  \  d.style.background = `linear-gradient(to right, ${cOuter} 0%, ${cInner}
  ${percentWide}%,${cInner} ${100 - percentWide}%, ${cOuter}) 100%`;\r

  }"
setMessage: function setMessage(msg) { const parent =
  document.getElementById('status_message'); parent.innerHTML = msg; }
setMultiGoal: "function setMultiGoal(n, indices) {\r

  \  Goal = { pics: [] };\r

  \  if (nundef(indices)) {\r

  \    Goal.pics = choose(Pictures, n);\r

  \  } else {\r

  \    for (const i of indices) Goal.pics.push(Pictures[i]);\r

  \  }\r

  }"
setNewBackgroundColor: "function setNewBackgroundColor(bg) {\r

  \  if (nundef(bg)) bg = randomDarkColor();\r

  \  BaseColor = bg; HeaderColor = colorDarker(BaseColor); SidebarColor =
  colorLighter(BaseColor, .125);\r

  \  setBackgroundColor(bg);\r

  \  mStyleX(dHeader, { bg: HeaderColor });\r

  \  mStyleX(mBy('sidebar'), { bg: SidebarColor });\r

  \  mStyleX(mBy('dAux'), { bg: SidebarColor });\r

  \  localStorage.setItem('BaseColor', BaseColor);\r

  \  if (isdef(G)) G.settings.baseColor = bg;\r

  }"
setNextGame: "function setNextGame() {\r

  \  let game = G.id;\r

  \  let i = U.avGames.indexOf(game);\r

  \  let iNew = (i + 1) % U.avGames.length;\r

  \  setGame(U.avGames[iNew]);\r

  }"
setNumberSequenceGoal: "function setNumberSequenceGoal() {\r

  \  let blank = blankWordInputs(G.words, G.numMissing, G.posMissing);\r

  \  Goal = { seq: G.seq, words: G.words, chars: G.letters, blankWords:
  blank.words, blankChars: blank.letters, iFocus: blank.iFocus };\r

  \  Goal.qCharIndices = Goal.blankChars.map(x => x.index);\r

  \  Goal.qWordIndices = Goal.blankWords.map(x => x.iWord);\r

  }"
setOrigin: "function setOrigin(g, center = true) {\r

  \  if (center) g.setAttribute('class', 'gCentered');\r

  \  else g.setAttribute('class', null);\r

  }"
setPageBackground: "function setPageBackground(bg, fg = 'white', isBase = true)
  {\r

  \  bg = colorHex(bg);\r

  \  if (isBase) DA.pageBaseColor = bg;\r

  \  mStyleX(dMain, { bg: bg, fg: isdef(fg) ? fg : 'contrast' });\r

  }"
setPicsPerLevel: "function setPicsPerLevel() {\r

  \  let inp = mBy('inputPicsPerLevel');\r

  \  inp.select();\r

  \  let x = getSelection();\r

  \  let n = Number(x.toString());\r

  \  inp.value = n;\r

  \  getSelection().removeAllRanges();\r

  \  PICS_PER_LEVEL = n;\r

  \  SAMPLES_PER_LEVEL = new Array(20).fill(PICS_PER_LEVEL);\r

  \  boundary = SAMPLES_PER_LEVEL[currentLevel];\r

  }"
setPlayer: "function setPlayer(g, pl) {\r

  \  let idx;\r

  \  if (isdef(g.iPlayer)) {\r

  \    idx = (g.iPlayer + 1) % g.players.length;\r

  \  } else if (isdef(pl)) {\r

  \    idx = g.players.indexOf(pl);\r

  \  } else idx = 0;\r

  \  pl = g.players[idx];\r

  \  [GC.iPlayer, GC.plTurn] = [g.iPlayer, g.plTurn] = [idx, pl];\r

  }"
setPlayMode: "function setPlayMode(mode, isStartup = false) {\r

  \  if (mode != S.settings.playMode) S.playModeChanged = true;\r

  \  PLAYMODE = mode;\r

  \  console.log('playMode:', S.settings.playMode, 'PLAYMODE', PLAYMODE)\r

  \  setAutoplayFunctionForMode(mode, isStartup);\r

  \  if (mode == 'solo') {\r

  \    hide(document.getElementById('c_b_join'));\r

  \    hide(document.getElementById('c_b_NextPlayer'));\r

  \    hide(document.getElementById('c_b_RunToEnd'));\r

  \  } else if (mode == 'hotseat') {\r

  \    hide(document.getElementById('c_b_join'));\r

  \    show(document.getElementById('c_b_NextPlayer'));\r

  \    show(document.getElementById('c_b_RunToEnd'));\r

  \  } else if (mode == 'multiplayer') {\r

  \    show(document.getElementById('c_b_join'));\r

  \    hide(document.getElementById('c_b_NextPlayer'));\r

  \    hide(document.getElementById('c_b_RunToEnd'));\r

  \  }\r

  }"
setPlaymode: "function setPlaymode(mode, isStartup = false) {\r

  \  if (mode != S.settings.playmode) S.playModeChanged = true;\r

  \  S.settings.playmode = PLAYMODE = mode;\r

  \  setAutoplayFunctionForMode(mode, isStartup);\r

  \  return mode;\r

  }"
setPositionData: "function setPositionData(g1) {\r

  \  let ids = g1.getNodeIds();\r

  \  for (const id of ids) {\r

  \    let pos = g1.getProp(id, 'center');\r

  \    g1.setPosition(id, pos.x, pos.y);\r

  \  }\r

  \  g1.reset();\r

  }"
setRect: "function setRect(elem, options) {\r

  \  let r = getRect(elem);\r

  \  elem.rect = r;\r

  \  elem.setAttribute('rect', `${r.w} ${r.h} ${r.t} ${r.l} ${r.b} ${r.r}`);\r

  \  if (isDict(options)) {\r

  \    if (options.hgrow) mStyle(elem, { hmin: r.h });\r

  \    else if (options.hfix) mStyle(elem, { h: r.h });\r

  \    else if (options.hshrink) mStyle(elem, { hmax: r.h });\r

  \    if (options.wgrow) mStyle(elem, { wmin: r.w });\r

  \    else if (options.wfix) mStyle(elem, { w: r.w });\r

  \    else if (options.wshrink) mStyle(elem, { wmax: r.w });\r

  \  }\r

  \  return r;\r

  }"
setRectInt: "function setRectInt(elem, options) {\r

  \  let r = getRectInt(elem);\r

  \  elem.rect = r;\r

  \  elem.setAttribute('rect', `${r.w} ${r.h} ${r.t} ${r.l} ${r.b} ${r.r}`);\r

  \  if (isDict(options)) {\r

  \    if (options.hgrow) mStyle(elem, { hmin: r.h });\r

  \    else if (options.hfix) mStyle(elem, { h: r.h });\r

  \    else if (options.hshrink) mStyle(elem, { hmax: r.h });\r

  \    if (options.wgrow) mStyle(elem, { wmin: r.w });\r

  \    else if (options.wfix) mStyle(elem, { w: r.w });\r

  \    else if (options.wshrink) mStyle(elem, { wmax: r.w });\r

  \  }\r

  \  return r;\r

  }"
setReloadOnClick: "function setReloadOnClick() {\r

  \  window.onclick = (ev) => {\r

  \    if (!['dStatusLine', 'header', 'inner_left_panel',
  'left_panel'].includes(ev.target.id)) return;\r

  \    reload();\r

  \    mBy('dStatusLine').innerHTML = 'last reload: ' + formatNow();\r

  \  };\r

  }"
setRSG_SOURCE: "function setRSG_SOURCE(val) {\r

  \  if (RSG_SOURCE == 'test' && val == 'main') {\r

  \    let d = mBy('table');\r

  \    clearElement(d);\r

  \    d.style.minHeight = 0;\r

  \    d.style.minWidth = 0;\r

  \  }\r

  \  RSG_SOURCE = val;\r

  \  showMenu(val);\r

  }"
setSettingsKeys: "function setSettingsKeys(elem) {\r

  \  let val = elem.type == 'number' ? Number(elem.value) : elem.type ==
  'checkbox' ? elem.checked : elem.value;\r

  \  lookupSetOverride(Settings, elem.keyList, val);\r

  \  SettingsChanged = true;\r

  \  console.log(elem.keyList, val)\r

  }"
setSettingsKeysSelect: "function setSettingsKeysSelect(elem) {\r

  \  let val;\r

  \  for (const opt of elem.children) {\r

  \    if (opt.selected) val = opt.value;\r

  \  }\r

  \  SettingsChanged = true;\r

  \  lookupSetOverride(Settings, elem.keyList, val);\r

  }"
setSide: "function setSide(cardDiv, newSide) {\r

  \  if (!cardDiv.isCard) return;\r

  \  let faceElem = cardDiv.faceElem;\r

  \  let backElem = cardDiv.backElem;\r

  \  if (newSide === 'front') {\r

  \    if (cardDiv.side === 'back') {\r

  \      cardDiv.removeChild(backElem);\r

  \    }\r

  \    cardDiv.side = 'front';\r

  \    cardDiv.appendChild(faceElem);\r

  \    cardDiv.setAttribute('class', 'cardMy ' + getSuitName(cardDiv.suit) + '
  rank' + cardDiv.rank);\r

  \  } else {\r

  \    if (cardDiv.side === 'front') {\r

  \      cardDiv.removeChild(faceElem);\r

  \    }\r

  \    cardDiv.side = 'back';\r

  \    cardDiv.appendChild(backElem);\r

  \    cardDiv.setAttribute('class', 'cardMy');\r

  \  }\r

  }"
setSizeNeeded: "function setSizeNeeded(elem) {\r

  \  let sz = getSizeNeeded(elem);\r

  \  let r = getRect(elem);\r

  \  if (sz.w > r.w && elem.style.width != '100%') { r.w = sz.w; mStyle(elem,
  { w: r.w }); }\r

  \  if (sz.h > r.h && elem.style.height != '100%') { r.h = sz.h; mStyle(elem,
  { h: r.h }); }\r

  \  elem.setAttribute('rect', `${r.w} ${r.h} ${r.t} ${r.l} ${r.b} ${r.r}`);\r

  \  return r;\r

  }"
setSP: "function setSP(n) {\r

  \  let ui = n.ui;\r

  \  let b = getBounds(ui, true);\r

  \  n.size = { w: b.width, h: b.height };\r

  \  n.pos = { x: b.x, y: b.y };\r

  }"
setSpeechResult: "function setSpeechResult(transcript, conf1, conf2, isFinal =
  false) {\r

  \  Goal.reqAnswer = bestWord;\r

  \  Goal.answer = transcript;\r

  \  Goal.confidence = conf1;\r

  \  Goal.confidence2 = conf2;\r

  \  Goal.isSpeechResultFinal = isFinal;\r

  \  if (RecogHighPriorityOutput)\r

  \    console.log('*=' + (isFinal ? 'final' : 'interim') + '==>', 'best:' +
  bestWord, 'got:' + transcript,\r

  \      '(confid: ' + conf1 + '/' + conf2 + ')');\r

  }"
SetSqSelected: "function SetSqSelected(sq) {\r

  \  if (GameController.BoardFlipped == BOOL.TRUE) {\r

  \    sq = MIRROR120(sq);\r

  \  }\r

  \  $(\".Square\").each(function (index) {\r

  \    if ((RanksBrd[sq] == 7 - Math.round($(this).position().top / 60)) &&
  (FilesBrd[sq] == Math.round($(this).position().left / 60))) {\r

  \      $(this).addClass('SqSelected');\r

  \    }\r

  \  });\r

  }"
setStatus: "function setStatus(s) {\r

  \  let areaName = isPlain() ? 'c_d_statusInHeaderText' : 'c_d_statusText';\r

  \  let d = document.getElementById(areaName);\r

  \  let mobj = UIS[areaName];\r

  \  mobj.clear(); clearElement(d);\r

  \  d.innerHTML = s;\r

  }"
setSubtitle: function setSubtitle(s) { mBy('dSubtitle').innerHTML = s; }
setSymLabel: "function setSymLabel(g, id, key, styles = {}) {\r

  \  if (nundef(Syms[key])) return;\r

  \  let info = Syms[key];\r

  \  console.log('family', info.family);\r

  \  g.setLabel(id, info.text, addKeys({ fz: 40, family: info.family },
  styles));\r

  }"
setTableBackground: "function setTableBackground(bg, fg = 'white', isBase =
  true) {\r

  \  bg = colorHex(bg);\r

  \  if (isBase) DA.tableBaseColor = bg;\r

  \  mStyleX(dTableBackground, { bg: bg, fg: isdef(fg) ? fg : 'contrast' });\r

  }"
setTableSize: "function setTableSize(w, h, unit = 'px') {\r

  \  let d = mBy('areaTable');\r

  \  mStyle(d, { 'min-width': w, 'min-height': h }, unit);\r

  }"
setText: "function setText(card, text, fz = '8') {\r

  \  let el = card.elem;\r

  \  if (el.children.length > 1) {\r

  \    let elTitle = el.firstChild;\r

  \    clearElement(el);\r

  \    el.appendChild(elTitle);\r

  \  }\r

  \  let dText = document.createElement('div');\r

  \  el.appendChild(dText);\r

  \  dText.style.color = 'black';\r

  \  dText.innerHTML = text;\r

  \  dText.style.margin = '8px';\r

  \  dText.style.fontSize = fz + 'px';\r

  }"
setTheme_dep: "function setTheme_dep(isDark = true) {\r

  \  let bg = dMain.style.backgroundColor;\r

  \  let lum = getBrightness(bg);\r

  \  console.log('bg is', bg, 'lum', lum)\r

  \  if (isDark) {\r

  \    if (lum < .5) return;\r

  \    else {\r

  \      bg = colorDarker(bg);\r

  \      setPageBackground(bg);\r

  \    }\r

  \  } else if (lum > .5) return; else { setPageBackground(colorLighter(bg));
  }\r

  }"
setTitle: function setTitle(s) { mBy('hTitle').innerHTML = s; }
setTransformDOM: "function setTransformDOM(el, { x, y, scaleX, scaleY, rotDeg }
  = {}) {\r

  \  let info = getTransformInfoDOM(el);\r

  \  console.log('______________\\n', info)\r

  \  let xNew, yNew, scaleXNew, scaleYNew, rotNew;\r

  \  if (isdef(x)) xNew = x; else xNew = info.translateX;\r

  \  if (isdef(y)) yNew = y; else yNew = info.translateY;\r

  \  if (isdef(scaleX)) scaleXNew = scaleX; else scaleXNew = info.scaleX;\r

  \  if (isdef(scaleY)) scaleYNew = scaleY; else scaleYNew = info.scaleY;\r

  \  if (isdef(rotDeg)) rotNew = rotDeg; else rotNew = info.rotation;\r

  \  let sTrans = ''; let sScale = ''; let sRot = '';\r

  \  console.log('xNew', xNew, 'yNew', yNew, 'scaleXNew', scaleXNew,
  'scaleYNew', scaleYNew, 'rotNew', rotNew)\r

  \  if (xNew != 0 || yNew != 0) sTrans = `translate(${xNew}, ${yNew})`;\r

  \  if (scaleXNew != 1 || scaleYNew != 1) sScale = `scale(${scaleXNew}
  ${scaleYNew})`;\r

  \  if (rotNew != 0) sRot = `rotate(${rotNew})`;\r

  \  let s = (sTrans + ' ' + sScale + ' ' + sRot).trim();\r

  \  console.log('new transform:', s)\r

  \  el.style.transform = s;\r

  }"
setup: "function setup() {\r

  \  axiom = system.axiom;\r

  \  rules = system.rules;\r

  \  factor = valf(system.factor, 1);\r

  \  angle = radians(valf(system.angle, 60));\r

  \  sentence = axiom;\r

  \  let button = createButton(\"generate\"); button.mousePressed(generate);\r

  \  button = createButton(\"animate\"); button.mousePressed(() => interval_id
  = setInterval(generate, 500));\r

  \  createCanvas(400, 400);\r

  \  background(51);\r

  \  createP(axiom);\r

  \  turtle();\r

  }"
setUpMinuteHands: "function setUpMinuteHands() {\r

  \  var containers = document.querySelectorAll('.minutes-container');\r

  \  var secondAngle = containers[0].getAttribute(\"data-second-angle\");\r

  \  if (secondAngle > 0) {\r

  \    var delay = (((360 - secondAngle) / 6) + 0.1) * 1000;\r

  \    setTimeout(function () {\r

  \      moveMinuteHands(containers);\r

  \    }, delay);\r

  \  }\r

  }"
setUserData: "function setUserData(username) {\r

  \  if (nundef(DB.users[username])) {\r

  \    U = DB.users[username] = jsCopy(DB.users.guest0);\r

  \    U.id = U.name = U.username = Username = username;\r

  \  } else {\r

  \    U = DB.users[username]; U.name = U.username = Username = U.id;\r

  \  }\r

  \  U.clientId = ClientId;\r

  }"
setUsername: "function setUsername(inputElem) {\r

  \  USERNAME = inputElem.value.toString();\r

  }"
setUserSpecAndCode: "function setUserSpecAndCode() {\r

  \  S.user.spec = userSpec;\r

  \  S.user.specText = userSpec.asText;\r

  \  S.user.script = userCode.asText;\r

  }"
setVocabulary: "function setVocabulary(words) {\r

  \  var grammar = '#JSGF V1.0; grammar colors; public <color> = hallo';\r

  \  for (const w of words) {\r

  \    grammar += ' | ' + w;\r

  \  }\r

  \  var speechRecognitionList = new webkitSpeechGrammarList();\r

  \  speechRecognitionList.addFromString(grammar, 1);\r

  \  recognition.grammars = speechRecognitionList;\r

  }"
setWNeeded: "function setWNeeded(elem) {\r

  \  let sz = getSizeNeeded(elem);\r

  \  let r = getRect(elem);\r

  \  if (sz.w > r.w && elem.style.width != '100%') { r.w = sz.w; mStyle(elem,
  { w: r.w }); }\r

  \  elem.setAttribute('rect', `${r.w} ${r.h} ${r.t} ${r.l} ${r.b} ${r.r}`);\r

  \  return r.w;\r

  }"
setzeEineCheckbox: "function setzeEineCheckbox(dParent, label, init, skeys) {\r

  \  let d = mDiv(dParent);\r

  \  let val = lookup(Settings, skeys);\r

  \  if (nundef(val)) val = init;\r

  \  let inp = createElementFromHTML(\r

  \    `<input type=\"checkbox\" class=\"checkbox\" ` + (val === true ?
  'checked=true' : '') + ` onfocusout=\"setSettingsKeys(this)\" >`\r

  \  );\r

  \  let labelui = createElementFromHTML(`<label>${label}</label>`);\r

  \  mAppend(d, labelui);\r

  \  mAppend(labelui, inp);\r

  \  mStyleX(inp, { maleft: 12, mabottom: 4 });\r

  \  mClass(inp, 'input');\r

  \  inp.keyList = skeys;\r

  }"
setzeEineZahl: "function setzeEineZahl(dParent, label, init, skeys) {\r

  \  let d = mDiv(dParent);\r

  \  let val = lookup(Settings, skeys);\r

  \  if (nundef(val)) val = init;\r

  \  let inp = createElementFromHTML(\r

  \    `<input type=\"number\" class=\"input\" value=\"${val}\"
  onfocusout=\"setSettingsKeys(this)\" />`);\r

  \  let labelui = createElementFromHTML(`<label>${label}</label>`);\r

  \  mAppend(d, labelui);\r

  \  mAppend(labelui, inp);\r

  \  mStyleX(inp, { maleft: 12, mabottom: 4 });\r

  \  mClass(inp, 'input');\r

  \  inp.keyList = skeys;\r

  }"
setzeEinOptions: "function setzeEinOptions(dParent, label, optionList,
  friendlyList, init, skeys) {\r

  \  let d = mDiv(dParent);\r

  \  let val = lookup(Settings, skeys);\r

  \  if (nundef(val)) val = init;\r

  \  let inp = createElementFromHTML(`<select class=\"options\"
  onfocusout=\"setSettingsKeysSelect(this)\"></select>`);\r

  \  for (let i = 0; i < optionList.length; i++) {\r

  \    let opt = optionList[i];\r

  \    let friendly = friendlyList[i];\r

  \    let optElem = createElementFromHTML(`<option
  value=\"${opt}\">${friendly}</option>`);\r

  \    mAppend(inp, optElem);\r

  \    if (opt == val) optElem.selected = true;\r

  \  }\r

  \  let labelui = createElementFromHTML(`<label>${label}</label>`);\r

  \  mAppend(d, labelui);\r

  \  mAppend(labelui, inp);\r

  \  mStyleX(inp, { maleft: 12, mabottom: 4 });\r

  \  inp.keyList = skeys;\r

  }"
shake_and_sieve: function shake_and_sieve(items) { }
sheriff: "function sheriff() {\r

  \  function sheriff_activate() {\r

  \    sheriff_pre_action();\r

  \  }\r

  \  function sheriff_check_gameover(z) {\r

  \    let [fen, round] = [z.fen, z.round];\r

  \    if (round <= z.rounds) return false;\r

  \    return arr_get_max(fen.plorder, x => fen.players[x].score);\r

  \  }\r

  \  function sheriff_setup(players, options) {\r

  \    let fen = { players: {}, plorder: jsCopy(players), history: [] };\r

  \    let di = SHERIFF.cards;\r

  \    let deck = fen.deck = [];\r

  \    deck.push(...Array(48).fill('apples'));\r

  \    deck.push(...Array(36).fill('cheese'));\r

  \    deck.push(...Array(24).fill('pineapple'));\r

  \    deck.push(...Array(36).fill('bread'));\r

  \    deck.push(...Array(22).fill('pepper'));\r

  \    deck.push(...Array(21).fill('mead'));\r

  \    deck.push(...Array(12).fill('silk'));\r

  \    deck.push(...Array(5).fill('crossbow'));\r

  \    for (const name of ['chestnut', 'pear', 'pie', 'baguette', 'cherries'])
  deck.push(...Array(2).fill(name));\r

  \    for (const name of ['pretzel', 'grapes']) deck.push(name);\r

  \    shuffle(deck);\r

  \    console.log('deck', deck);\r

  \    for (const plname of players) {\r

  \      let pl = fen.players[plname] = {\r

  \        hand: deck_deal(deck, 6),\r

  \        coins: 50,\r

  \        vps: 0,\r

  \        score: 0,\r

  \        color: get_user_color(plname),\r

  \      };\r

  \    }\r

  \    console.log('fen', fen)\r

  \    fen.phase = 'market';\r

  \    fen.stage = 1;\r

  \    fen.turn = [fen.plorder[0]];\r

  \    return fen;\r

  \  }\r

  \  function sheriff_present(z, dParent, uplayer) {\r

  \    let [fen, ui] = [z.fen, UI];\r

  \    let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent);\r

  \    ari_player_stats(z, dRechts);\r

  \    show_history(fen, dRechts);\r

  \    let deck = ui.deck = ui_type_deck(fen.deck, dOpenTable, { maleft: 12 },
  'deck', 'deck', ari_get_card);\r

  \    let market = ui.market = ui_type_market(fen.market, dOpenTable, {
  maleft: 12 }, 'market', 'market', ari_get_card, true);\r

  \    let open_discard = ui.open_discard = ui_type_market(fen.open_discard,
  dOpenTable, { maleft: 12 }, 'open_discard', 'discard', ari_get_card);\r

  \    let deck_discard = ui.deck_discard = ui_type_deck(fen.deck_discard,
  dOpenTable, { maleft: 12 }, 'deck_discard', '', ari_get_card);\r

  \    if (exp_commissions(z.options)) {\r

  \      let open_commissions = ui.open_commissions =
  ui_type_market(fen.open_commissions, dOpenTable, { maleft: 12 },
  'open_commissions', 'bank', ari_get_card);\r

  \      mMagnifyOnHoverControlPopup(ui.open_commissions.cardcontainer);\r

  \      let deck_commission = ui.deck_commission =
  ui_type_deck(fen.deck_commission, dOpenTable, { maleft: 4 },
  'deck_commission', '', ari_get_card);\r

  \      let comm = ui.commissioned = ui_type_rank_count(fen.commissioned,
  dOpenTable, {}, 'commissioned', 'sentiment', ari_get_card);\r

  \      if (comm.items.length > 0) { let isent = arrLast(comm.items); let
  dsent = iDiv(isent); set_card_border(dsent, 15, 'green'); }\r

  \    }\r

  \    let order = [uplayer].concat(fen.plorder.filter(x => x != uplayer));\r

  \    for (const plname of order) {\r

  \      let pl = fen.players[plname];\r

  \      let playerstyles = { w: '100%', bg: '#ffffff80', fg: 'black',
  padding: 4, margin: 4, rounding: 10, border: `2px ${get_user_color(plname)}
  solid` };\r

  \      let d = mDiv(dMiddle, playerstyles, null, get_user_pic_html(plname,
  25));\r

  \      mFlexWrap(d);\r

  \      mLinebreak(d, 10);\r

  \      ari_present_player(z, plname, d, plname != uplayer);\r

  \    }\r

  \    if (isdef(fen.winners)) ari_reveal_all_buildings(fen);\r

  \  }\r

  \  function ari_present_player(g, plname, d, ishidden = false) {\r

  \    let fen = g.fen;\r

  \    let pl = fen.players[plname];\r

  \    let ui = UI.players[plname] = {};\r

  \    pl.hand = fen.stage == '1' ? sort_cards(pl.hand, true, 'CDSH', true,
  'A23456789TJQK') : sort_cards(pl.hand, false, null, true, 'A23456789TJQK');\r

  \    let hand = ui.hand = ui_type_hand(pl.hand, d, {},
  `players.${plname}.hand`, 'hand', ari_get_card);\r

  \    if (ishidden) { hand.items.map(x => face_down(x)); }\r

  \    let stall = ui.stall = ui_type_market(pl.stall, d, { maleft: 12 },
  `players.${plname}.stall`, 'stall', ari_get_card);\r

  \    if (fen.stage < 5 && ishidden) { stall.items.map(x => face_down(x));
  }\r

  \    ui.buildinglist = [];\r

  \    for (const k in pl.buildings) {\r

  \      let i = 0;\r

  \      for (const b of pl.buildings[k]) {\r

  \        let type = k;\r

  \        let b_ui = ui_type_building(b, d, { maleft: 8 },
  `players.${plname}.buildings.${k}.${i}`, type, ari_get_card);\r

  \        b_ui.type = k;\r

  \        ui.buildinglist.push(b_ui);\r

  \        lookupAddToList(ui, ['buildings', k], b_ui);\r

  \        i += 1;\r

  \      }\r

  \    }\r

  \    if (exp_commissions(g.options) && (!ishidden || isdef(fen.winners)))
  {\r

  \      pl.commissions.sort();\r

  \      ui.commissions = ui_type_market(pl.commissions, d, { maleft: 12 },
  `players.${plname}.commissions`, 'commissions', ari_get_card);\r

  \      mMagnifyOnHoverControlPopup(ui.commissions.cardcontainer);\r

  \    }\r

  \    ui.journeys = [];\r

  \    let i = 0;\r

  \    for (const j of pl.journeys) {\r

  \      let jui = ui_type_hand(j, d, { maleft: 12 },
  `players.${plname}.journeys.${i}`, '', ari_get_card);\r

  \      i += 1;\r

  \      ui.journeys.push(jui);\r

  \    }\r

  \  }\r

  \  function ari_player_stats(z, dParent) {\r

  \    let player_stat_items = UI.player_stat_items = ui_player_info(z,
  dParent);\r

  \    let fen = z.fen;\r

  \    let herald = fen.heraldorder[0];\r

  \    for (const uname of fen.plorder) {\r

  \      let pl = fen.players[uname];\r

  \      let item = player_stat_items[uname];\r

  \      let d = iDiv(item); mCenterFlex(d); mLinebreak(d);\r

  \      if (uname == herald) {\r

  \        mSym('tied-scroll', d, { fg: 'gold', fz: 24, padding: 4 }, 'TR');\r

  \      }\r

  \      player_stat_count('coin', pl.coins, d);\r

  \      if (!isEmpty(fen.players[uname].stall) && fen.stage >= 5 && fen.stage
  <= 6) {\r

  \        player_stat_count('shinto shrine',
  !fen.actionsCompleted.includes(uname) || fen.stage < 6 ? calc_stall_value(fen,
  uname) : '_', d);\r

  \      }\r

  \      player_stat_count('star', uname == U.name || isdef(fen.winners) ?
  ari_calc_real_vps(fen, uname) : ari_calc_fictive_vps(fen, uname), d);\r

  \      if (fen.turn.includes(uname)) {\r

  \        show_hourglass(uname, d, 30, { left: 10, top: 'calc( 50% - 36px )'
  });\r

  \      }\r

  \    }\r

  \  }\r

  \  function sheriff_state(dParent) {\r

  \    function get_phase_html() {\r

  \      if (isEmpty(Z.phase) || Z.phase == 'over') return null;\r

  \      let rank = Z.phase[0].toUpperCase();\r

  \      let card = ari_get_card(rank + 'Hn', 40);\r

  \      let d = iDiv(card);\r

  \      mClassRemove(d.firstChild, 'card');\r

  \      return iDiv(card).outerHTML;\r

  \    }\r

  \    let user_html = get_user_pic_html(Z.uplayer, 30);\r

  \    let phase_html = get_phase_html();\r

  \    if (phase_html) dParent.innerHTML =
  `${Z.phase}:&nbsp;${phase_html}&nbsp;player: ${user_html} `;\r

  \  }\r

  \  return { state_info: sheriff_state, setup: sheriff_setup, present:
  sheriff_present, present_player: ari_present_player, check_gameover:
  sheriff_check_gameover, stats: ari_player_stats, activate_ui: sheriff_activate
  };\r

  }"
sheriff_card: "function sheriff_card(name, color) {\r

  \  let di = SHERIFF.cards;\r

  \  let info = valf(di[name], { ksym: 'crossbow', kcenter: 'green apple',
  label: 'crossbow', type: 'contraband', value: 9, penalty: 4 });\r

  \  let bcolor = SHERIFF.color[info.type];\r

  \  let c = cPortrait(null, { margin: 12, border: `solid 4px ${bcolor}`, bg:
  valf(color, colorLight('gold', 60)) });\r

  \  let d = iDiv(c);\r

  \  let ds = mSym(info.ksym, d, { sz: 30 }, 'tl');\r

  \  ds = mSymText(info.value, d, { sz: 25, rounding: '50%', bg: 'gold',
  margin: 3 }, 'tr');\r

  \  ds = mText(info.label.toUpperCase(), d, { family: 'Algerian', w: '100%',
  fz: 12, align: 'center', position: 'absolute', bottom: 0 });\r

  \  ds = mText(info.label.toUpperCase(), d, { family: 'Algerian', w: '100%',
  fz: 12, align: 'center', position: 'absolute', top: 0 });\r

  \  ds = mSymText(info.penalty, d, { sz: 25, rounding: '50%', bg: 'crimson',
  margin: 3 }, 'br');\r

  \  ds = mSym(info.kcenter, d, { sz: 70 }, 'cc'); mPos(ds, 'calc( 50% - 35px
  )', 'calc( 50% - 35px )');\r

  \  return c;\r

  }"
sheriff_pre_action: "function sheriff_pre_action() {\r

  \  let [stage, A, fen, phase, uplayer, deck, market] = [Z.stage, Z.A, Z.fen,
  Z.phase, Z.uplayer, Z.deck, Z.market];\r

  \  if (Z.num_actions > 0) fen.progress = `(action ${Z.action_number} of
  ${Z.total_pl_actions})`; else delete fen.progress;\r

  \  switch (ARI.stage[stage]) {\r

  \    case 'journey':
  select_add_items(ui_get_hand_and_journey_items(uplayer), process_journey, 'may
  form new journey or add cards to existing one'); break;\r

  \    case 'add new journey': post_new_journey(); break;\r

  \    case 'auto market': ari_open_market(fen, phase, deck, market); break;\r

  \    case 'stall selection': select_add_items(ui_get_hand_items(uplayer),
  post_stall_selected, 'must select your stall'); break;\r

  \    case 'action: command': Z.stage = 6;
  select_add_items(ui_get_commands(uplayer), process_command, 'must select an
  action', 1, 1); break;\r

  \    case 'tax': let n = fen.pl_tax[uplayer];
  select_add_items(ui_get_hand_items(uplayer), post_tax, 'must pay tax', n, n);
  break;\r

  \    case 'action step 2':\r

  \      switch (A.command) {\r

  \        case 'trade': select_add_items(ui_get_trade_items(uplayer),
  post_trade, 'must select 2 cards to trade', 2, 2); break;\r

  \        case 'build': select_add_items(ui_get_payment_items('K'),
  payment_complete, 'must select payment for building', 1, 1); break;\r

  \        case 'upgrade': select_add_items(ui_get_payment_items('K'),
  payment_complete, 'must select payment for upgrade', 1, 1); break;\r

  \        case 'downgrade': select_add_items(ui_get_building_items(uplayer,
  A.payment), process_downgrade, 'must select a building to downgrade', 1, 1);
  break;\r

  \        case 'pickup': select_add_items(ui_get_stall_items(uplayer),
  post_pickup, 'must select a stall card to take into your hand', 1, 1);
  break;\r

  \        case 'harvest': select_add_items(ui_get_harvest_items(uplayer),
  post_harvest, 'must select a farm to harvest from', 1, 1); break;\r

  \        case 'sell': select_add_items(ui_get_stall_items(uplayer),
  post_sell, 'must select 2 stall cards to sell', 2, 2); break;\r

  \        case 'buy': select_add_items(ui_get_payment_items('J'),
  payment_complete, 'must select payment option', 1, 1); break;\r

  \        case 'exchange': select_add_items(ui_get_exchange_items(uplayer),
  post_exchange, 'must select cards to exchange', 2, 2); break;\r

  \        case 'visit': select_add_items(ui_get_payment_items('Q'),
  payment_complete, 'must select payment for visiting', 1, 1); break;\r

  \        case 'commission':
  select_add_items(ui_get_commission_items(uplayer), process_commission, 'must
  select a card to commission', 1, 1); break;\r

  \        case 'pass': post_pass(); break;\r

  \      }\r

  \      break;\r

  \    case 'build': select_add_items(ui_get_build_items(uplayer, A.payment),
  post_build, 'must select cards to build (first card determines rank)', 4, 6);
  break;\r

  \    case 'commission new':
  select_add_items(ui_get_commission_new_items(uplayer), post_commission, 'must
  select a new commission', 1, 1); break;\r

  \    case 'upgrade': select_add_items(ui_get_build_items(uplayer,
  A.payment), process_upgrade, 'must select card(s) to upgrade a building', 1);
  break;\r

  \    case 'select building to upgrade':
  select_add_items(ui_get_farms_estates_items(uplayer), post_upgrade, 'must
  select a building', 1, 1); break;\r

  \    case 'select downgrade cards':
  select_add_items(A.possible_downgrade_cards, post_downgrade, 'must select
  card(s) to downgrade a building', 1); break;\r

  \    case 'buy': select_add_items(ui_get_open_discard_items(uplayer,
  A.payment), post_buy, 'must select a card to buy', 1, 1); break;\r

  \    case 'visit': select_add_items(ui_get_other_buildings(uplayer,
  A.payment), process_visit, 'must select a farm to visit', 1, 1); break;\r

  \    case 'visit destroy': select_add_items(ui_get_string_items(['destroy',
  'get cash']), post_visit, 'must destroy the building or select the cash', 1,
  1); break;\r

  \    case 'ball': select_add_items(ui_get_hand_items(uplayer), post_ball,
  'may add cards to the ball'); break;\r

  \    case 'auction: bid': select_add_items(ui_get_coin_amounts(uplayer),
  process_auction, 'must bid for the auction', 1, 1); break;\r

  \    case 'auction: buy': select_add_items(ui_get_market_items(),
  post_auction, 'must buy a card', 1, 1); break;\r

  \    case 'end game?': select_add_items(ui_get_endgame(uplayer),
  post_endgame, 'may end the game here and now or go on!', 1, 1); break;\r

  \    case 'pick luxury or journey cards':
  select_add_items(ui_get_string_items(['luxury cards', 'journey cards']),
  post_luxury_or_journey_cards, 'must select luxury cards or getting cards from
  the other end of the journey', 1, 1); break;\r

  \    default: console.log('stage is', stage); break;\r

  \  }\r

  }"
shield_off: "function shield_off() {\r

  \  mStyle('dAdmin', { bg: 'white' });\r

  }"
shield_on: "function shield_on() {\r

  \  mShield(dTable.firstChild.childNodes[1]);\r

  \  mStyle('dAdmin', { bg: 'silver' });\r

  }"
shortHintPic: "function shortHintPic() {\r

  \  mClass(mBy(Goal.id), 'onPulse1');\r

  \  TOMain = setTimeout(() => shortHintPicRemove(), 800);\r

  }"
shortHintPicRemove: "function shortHintPicRemove() {\r

  \  mRemoveClass(mBy(Goal.id), 'onPulse1');\r

  }"
show: "function show(elem, isInline = false) {\r

  \  if (isString(elem)) elem = document.getElementById(elem);\r

  \  if (isSvg(elem)) {\r

  \    elem.setAttribute('style', 'visibility:visible');\r

  \  } else {\r

  \    elem.style.display = isInline ? 'inline-block' : null;\r

  \  }\r

  \  return elem;\r

  }"
show_account: "function show_account() {\r

  \  if (isdef(mBy('dAccount').firstChild)) { console.log('NOPE!'); return;
  }\r

  \  DA.imageChanged = false;\r

  \  let dParent = mBy('dAccount');\r

  \  clearElement(dParent);\r

  \  let d = mDiv(dParent, { matop: 20 });\r

  \  let dir = '../base/assets/images/';\r

  \  let imagePath = dir + (Userdata.hasImage ? Username : 'unknown_user') +
  '.jpg';\r

  \  d.append(createElementFromHtml(`\r

  \  <div class=\"wrapper\" style=\"margin-top:5%; animation: appear 4s
  ease;\">\r

  \  <div id=\"error\">some text</div>\r

  \  <form id=\"myform\" autocomplete=\"off\" action=\"index.php\"
  method=\"POST\">\r

  \    <div id='dImage'>\r

  \      <span style=\"font-size:11px;\">drag and drop an image to
  change</span><br>\r

  \      <img id=\"imgPreview\" src='${imagePath}'
  ondragover=\"handle_drag_and_drop(event)\"
  ondrop=\"handle_drag_and_drop(event)\"
  ondragleave=\"handle_drag_and_drop(event)\"\r

  \        style=\"height:200px;margin:10px;\" />\r

  \    </div>\r

  \    <input id='iUsername' type=\"text\" name=\"username\"
  placeholder='username' value=\"${Username}\" autofocus />\r

  \    <br />\r

  \    <!-- <input type=\"password\" name=\"password\" />\r

  \    <br /> -->\r

  \    <input type=\"submit\" />\r

  \  </form>\r

  \  </div>\r

  \  `));\r

  \  var form = document.getElementById('myform');\r

  \  form.onsubmit = e => {\r

  \    e.preventDefault();\r

  \    let el = document.getElementById('iUsername');\r

  \    let val = el.value;\r

  \    if (Username != val) {\r

  \      onClickSubmitUsernameChange(val);\r

  \    } else if (DA.imageChanged) {\r

  \      onClickSubmitImageChange();\r

  \    }\r

  \  };\r

  }"
show_admin_ui: "function show_admin_ui() {\r

  \  for (const id of ['bSpotitStart', 'bClearAck', 'bRandomMove',
  'bSkipPlayer', 'bRestartMove']) hide(id);\r

  \  if (Z.game == 'spotit' && Z.uname == Z.host && Z.stage == 'init')
  show('bSpotitStart');\r

  \  else if (Z.game == 'bluff' && Z.uname == Z.host && Z.stage == 1)
  show('bClearAck');\r

  \  else if (Z.uname == Z.host && Z.stage == 'round_end')
  show('bClearAck');\r

  \  else if (Z.game == 'ferro' && Z.uname == 'mimi' && Z.stage !=
  'card_selection') show('bClearAck');\r

  \  if (['ferro', 'bluff', 'aristo', 'a_game'].includes(Z.game) && (Z.role ==
  'active' || Z.mode == 'hotseat')) {\r

  \    show('bRandomMove');\r

  \  }\r

  \  if (Z.uname == Z.host || Z.uname == 'mimi') show('dHostButtons'); else
  hide('dHostButtons');\r

  \  if (DA.TEST0 == true) show('dTestButtons'); else hide('dTestButtons');\r

  }"
show_advanced_ui: "function show_advanced_ui() {\r

  \  show('dButtons');\r

  \  show('dTest0');\r

  \  show('dTopAdvanced');\r

  \  DA.testing = true;\r

  \  DA.test = { iter: 0, maxiter: 200, running: false, step: true,
  suiteRunning: false, number: 0, list: [100, 101] };\r

  \  DA.test.list = arrRange(100, 101);\r

  \  DA.test.number = 306;\r

  \  DA.staged_moves = []; DA.iter = 100; DA.auto_moves = {};\r

  }"
show_all_players: function show_all_players() {
  populate_players(get_def_players_for_user(Session.cur_user)); }
show_apps: "function show_apps(ms = 500) {\r

  \  let dParent = mBy('dApps');\r

  \  if (!isEmpty(arrChildren(dParent))) { show(dParent); return; }\r

  \  show_standard_title(dParent, 'Apps');\r

  \  let d = mDiv(dParent, { fg: 'white' }, 'apps_menu');\r

  \  mCenterFlex(d);\r

  \  let applist = 'action book fitbit howto magic meditate therapy';\r

  \  for (const id of toWords(applist)) {\r

  \    let app = DB.apps[id]; app.name = id; let f =
  get_app_presenter(app.id); f(d, app);\r

  \  }\r

  }"
show_available_voices: function show_available_voices() { say('', 'english
  male', () => console.log(DA.voicelist.map(x => x.name))); }
show_bars: "function show_bars() {\r

  \  let d = mDiv(dTable, { w: '100%', box: true, opacity: 0 }, 'dBars');\r

  \  mLinebreak(d);\r

  \  let dgreen = get_plus_progressbar(d, 'green');\r

  \  mLinebreak(d);\r

  \  let dred = get_plus_progressbar(d, 'red');\r

  \  mLinebreak(d);\r

  \  DA.bars = {\r

  \    green: dgreen,\r

  \    red: dred,\r

  \  };\r

  \  return d;\r

  }"
show_bill_button: "function show_bill_button() {\r

  \  if (isdef(mBy('tbbill'))) return;\r

  \  let tb = mBy('dTopRight');\r

  \  let b = mDiv(tb, {}, `tbbill`, `<a
  href=\"javascript:onclick_bill()\"><img src=\"../rechnung/images/bill.png\"
  height=\"30\"/></a>`);\r

  \  mInsert(tb, b);\r

  }"
show_card: "function show_card(dParent, key, type = 'aristo') {\r

  \  if (type == 'spotit') {\r

  \    Card.sz = 200;\r

  \    let [rows, cols, numCards, setName] = [3, 2, 2, valf(key,
  'animals')];\r

  \    let infos = spotitDeal(rows, cols, numCards, setName);\r

  \    let items = [];\r

  \    for (const info of infos) {\r

  \      let item = spotitCard(info, dParent, { margin: 10 },
  spotitOnClickSymbol);\r

  \      mStyle(iDiv(item), { padding: 12 });\r

  \      items.push(item);\r

  \    }\r

  \  } else if (type == 'aristo') {\r

  \    let card = ari_get_card(valf(key, 'ASr'));\r

  \    mAppend(dParent, iDiv(card))\r

  \  }\r

  }"
show_checkmark: "function show_checkmark(dParent, styles = { fg: 'limegreen' })
  {\r

  \  let b = getRect(dParent);\r

  \  let fz = b.h;\r

  \  if (nundef(styles.fz)) styles.fz = fz;\r

  \  let d1 = mDiv(document.body, { position: 'fixed', w: b.w, h: b.h, top:
  b.t, left: b.l, align: 'center', overflow: 'visible' });\r

  \  let d2 = mDiv(d1);//,{},null,'A');  //&#10003;');//'H');\r

  \  mClass(d1, 'no_events');\r

  \  d2.innerHTML = 'A';\r

  \  d2.style.fontSize = '' + Math.round(b.h) + 'px';\r

  \  d2.style.color = 'green';\r

  \  Markers.push(d1);\r

  \  // let d=mDiv(document.body,styles1,null,'hallo'); //'&#10003;');\r

  }"
show_click_vocab: "function show_click_vocab() {\r

  \  let cmd = 'click';\r

  \  let vocab = Goal.label;\r

  \  let voice = G.language;\r

  \  let dParent = dTitle;\r

  \  let fz = 36;\r

  \  let fSpeak = () => {\r

  \    Speech.say(cmd, 1, .8, .9, 'random', () => {\r

  \      Speech.say(vocab, 1, .8, .9, voice);\r

  \    }, 'E');\r

  \  };\r

  \  fSpeak();\r

  \  clearElement(dParent);\r

  \  let d = mDiv(dParent);\r

  \  mStyle(d, { margin: 15 })\r

  \  mClass(d, 'flexWrap');\r

  \  let msg = cmd + \" \" + `<b>${vocab.toUpperCase()}</b>`;\r

  \  if (nundef(fz)) fz = 36;\r

  \  let d1 = mText(msg, d, { fz: fz, display: 'inline-block' });\r

  \  let sym = symbolDict.speaker;\r

  \  let d2 = mText(sym.text, d, {\r

  \    fz: fz + 2, weight: 900, display: 'inline-block',\r

  \    family: sym.family, 'padding-left': 14\r

  \  });\r

  \  dFeedback = dInstruction = d;\r

  \  dInstruction.addEventListener('click', () => ani_say(dInstruction, () =>
  {\r

  \    Speech.say(vocab, 1, .8, .9, voice);\r

  \  }));\r

  }"
show_code: "function show_code(res, download = false) {\r

  \  if (isdef(res.target)) { res.key = res.target.innerHTML; res.text =
  CODE.justcode[res.key]; }\r

  \  dTable = mBy('dTable');\r

  \  let ta = dTable.getElementsByTagName('textarea')[0];\r

  \  let text = res.text;\r

  \  if (nundef(ta)) ta = mTextarea(null, null, dTable, { w: '100%', h: '100%'
  });\r

  \  ta.value = text;\r

  \  if (download) downloadAsText(text, 'hallo', 'js');\r

  \  ta.scrollTop = ta.scrollHeight;\r

  \  return res;\r

  }"
show_code_editor: "function show_code_editor() {\r

  \  mHide('fSearch')\r

  \  mClear(dTable);\r

  \  mDiv(dTable, { w: '100%' }, null, 'Enter Code:');\r

  \  let d = mTextArea(25, 120, dTable, { fz: 16, margin: 'auto', padding: 10,
  outline: 'none', border: 'none' }, 'dCode');\r

  \  let dButtons = mDiv(dTable, { display: 'flex', w: '100%' });\r

  \  let asave = mLink(\"javascript:void(0)\", dButtons, {}, null, 'Save
  Code', 'a');\r

  \  asave.onclick = db_add_code;\r

  \  let aclear = mLink(\"javascript:void(0)\", dButtons, {}, null, 'Clear
  Code', 'a');\r

  \  aclear.onclick = () => d.value = '';\r

  }"
show_code_list: "function show_code_list(list) {\r

  \  mClear(dTable);\r

  \  for (const code of list) {\r

  \    let d = mDiv(dTable, { w: '100%' });\r

  \    let dkw = mDiv(d, {}, null, code.kw);\r

  \    let text = code.c; let lines = text.split('\\n'); let rows =
  lines.length;\r

  \    let dcode = mDiv(d, {}, null, `<textarea rows=${rows}
  cols=120>${code.c}</textarea>`);\r

  \  }\r

  }"
show_compose: function show_compose() { mCardButton('compose', onclick_compose, dTable); }
show_correct_location: "function show_correct_location(k) {\r

  \  hide('dPopup');\r

  \  for (const k1 in DIBOA) { hide(`d${capitalize(k1)}`); }\r

  \  S.location = k;\r

  \  show(`d${capitalize(k)}`);\r

  }"
show_dd_click_letters: "function show_dd_click_letters(word, dTable, wTotal, gap
  = 4) {\r

  \  let wmax = wTotal / word.length;\r

  \  let fzMax = wmax - 3 * gap;\r

  \  fz = Math.min(60, fzMax);\r

  \  let dp = createLetterInputsX(word, dTable, { bg: 'silver', display:
  'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: 4 });\r

  \  shuffle_children(dp);\r

  \  let letters = Array.from(dp.children);\r

  \  for (let i = 0; i < letters.length; i++) {\r

  \    let l = letters[i];\r

  \    l.setAttribute('draggable', true);\r

  \    ipaddX(l, 'source');\r

  \    l.id = 'letter' + i;\r

  \  }\r

  \  return letters;\r

  }"
show_div_ids: "function show_div_ids() {\r

  \  let divs = Array.from(document.getElementsByTagName('div')).filter(d =>
  !isEmptyOrWhiteSpace(d.id) && !isEmpty(d.innerHTML));\r

  \  for (const d of divs) {\r

  \    let d1 = mDiv(d, { fz: 12, bg: 'black', fg: 'white', hpadding: 4,
  rounding: 12 }, null, d.id);\r

  \    mPlace(d1, 'tr', 2, 2);\r

  \  }\r

  }"
show_emos: "function show_emos() {\r

  \  let d = mDiv(dTable, DA.styles);\r

  \  for (const k in EMO.emoscale) {\r

  \    let emo = EMO.emoscale[k];\r

  \    let sym = Syms[emo.key];\r

  \    let item = { name: k, key: emo.key, text: sym.text, color: emo.color,
  family: sym.family, list: emo.list };\r

  \    let handler = question2;\r

  \    let d1 = ui_type_item_line(d, item, { cursor: 'pointer', aitems:
  'center', vpadding: 6, hpadding: 12, gap: 4, margin: 6, rounding: 12, bg:
  item.color, fg: 'contrast' }, handler, ['text', 'list']);\r

  \    iAdd(item, { div: d1 });\r

  \  }\r

  }"
show_eval_message: "function show_eval_message(correct, msg = null, callback =
  null) {\r

  \  if (isdef(DA.anim)) { DA.anim.onfinish = null; DA.anim.cancel(); }\r

  \  if (nundef(msg)) msg = correct ? `Congratulations!!! You passed the
  ${DA.name} challenge!` : 'Wrong solution - Try Again!';\r

  \  let d = valf(mBy('dBandMessage'), mDiv(document.body, {},
  'dBandMessage'));\r

  \  show(d);\r

  \  clearElement(d);\r

  \  d.innerHTML = msg;
  //'blablablablabllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaa';
  //msg;\r

  \  mStyle(d, { display: 'block', position: 'fixed', top: 127, left: 0, bg:
  'red', fg: 'white', w: '100%', h: 40, hmin: 40, hmax: 40, fz: 24, align:
  'center', vpadding: 10, classname: 'slow_gradient_blink' });\r

  \  DA.anim = mFadeRemove(d, 4000, callback);\r

  }"
show_feedback: "function show_feedback(is_correct, correction = true) {\r

  \  function success() {\r

  \    if (isdef(Selected) && isdef(Selected.feedbackUI)) {\r

  \      let uilist;\r

  \      if (isdef(Selected.positiveFeedbackUI)) uilist =
  [Selected.positiveFeedbackUI];\r

  \      else uilist = isList(Selected.feedbackUI) ? Selected.feedbackUI :
  [Selected.feedbackUI];\r

  \      let sz = getRect(uilist[0]).h;\r

  \      for (const ui of uilist) {\r

  \        mpOver(markerSuccess(), ui, sz, 'green', 'segoeBlack');\r

  \      }\r

  \    }\r

  \    return 500;\r

  \  }\r

  \  function fail() {\r

  \    if (isdef(Selected) && isdef(Selected.feedbackUI)) {\r

  \      let uilist = isList(Selected.feedbackUI) ? Selected.feedbackUI :
  [Selected.feedbackUI];\r

  \      let sz = getRect(uilist[0]).h;\r

  \      for (const ui of uilist) {\r

  \        mpOver(markerFail(), ui, sz, 'red', 'segoeBlack');\r

  \      }\r

  \    }\r

  \    return 1000;\r

  \  }\r

  \  if (is_correct) { return success(); }\r

  \  else {\r

  \    if (correction) {\r

  \      let anim = valf(Selected.animation, 'onPulse5');\r

  \      for (const ui of Selected.correctUis) { mClass(ui, anim); }\r

  \    }\r

  \    return fail();\r

  \  }\r

  }"
show_fiddle: function show_fiddle() { fiddleInit(); }
show_fleeting_message: "function show_fleeting_message(s, dParent, styles, id,
  ms = 2000) {\r

  \  let d = mDiv(dParent, styles, id, s);\r

  \  mFadeRemove(d, ms);\r

  }"
show_game_name: function show_game_name(gname) { dGameTitle.innerHTML = gname; }
show_game_options: "function show_game_options(dParent, game) {\r

  \  mRemoveChildrenFromIndex(dParent, 2);\r

  \  let poss = Config.games[game].options;\r

  \  if (nundef(poss)) return;\r

  \  for (const p in poss) {\r

  \    let key = p;\r

  \    let val = poss[p];\r

  \    if (isString(val)) {\r

  \      let list = val.split(',');\r

  \      let fs = mRadioGroup(dParent, {}, `d_${key}`, key);\r

  \      for (const v of list) { mRadio(v, isNumber(v) ? Number(v) : v, key,
  fs, { cursor: 'pointer' }, null, key, true); }\r

  \      measure_fieldset(fs);\r

  \    }\r

  \  }\r

  }"
show_game_options_menu: "function show_game_options_menu(gamename) {\r

  \  let dMenu = mBy('dMenu'); iClear(dMenu);\r

  \  show_standard_title(dMenu, 'Game Options');\r

  \  let d = mDiv(dMenu, { align: 'center' }, 'fMenuInput');\r

  \  let dOptions = mDiv(d, {}, 'dMenuInput'); mCenterFlex(dOptions);\r

  \  let dButtons = mDiv(d, { display: 'flex', justify: 'center', w: '100%' },
  'dMenuButtons');\r

  \  DA.playerlist = null;\r

  \  show_game_options(dOptions, gamename);\r

  \  let astart = maButton('Start', start_game, dButtons);\r

  \  let acancel = maButton('Cancel', cancel_game, dButtons);\r

  }"
show_game_screen: "function show_game_screen(host = true) {\r

  \  if (in_game_screen) return;\r

  \  in_game_screen = true;\r

  \  screen_transition('dTable', 'dHeader');\r

  \  is_host = host;\r

  \  granularity = 100 / window.innerWidth; console.log('granularity:',
  granularity);\r

  \  mClear(dTable);\r

  \  mStyle(dTable, { hmin: 300 });\r

  \  let d = mDiv(dTable, { w: '100%', box: true, opacity: 0 }, 'dBars');\r

  \  mAppear(d, 500, null, 'linear');\r

  \  mLinebreak(d, 20);\r

  \  let dp = mDiv(d, { margin: 10, padding: 20 }, null, null, 'card')\r

  \  mLinebreak(dp, 20);\r

  \  dgreen = get_progressbar(dp, 'green', '+').bar;\r

  \  mLinebreak(dp, 20);\r

  \  dred = get_progressbar(dp, 'red', '-').bar;\r

  \  mLinebreak(dp, 20);\r

  \  if (!is_host) return;\r

  \  let d1 = mDiv(dp, { gap: 12 }, 'dButtons', null, ['d-flex',
  'justify-content-center']);\r

  \  mButton('reset', send_reset, d1, {}, 'button');\r

  \  mButton('pause', send_pause, d1, {}, 'button');\r

  \  mButton('resume', send_resume, d1, {}, 'button');\r

  \  mLinebreak(dp, 20);\r

  \  mBy('dSettingsButton').style.opacity = 1;\r

  }"
show_gameover: "function show_gameover(winners) {\r

  \  let pl = Session.cur_players[winners[0]];\r

  \  let styles = { bg: pl.color, fg: 'contrast', top: 220, };\r

  \  if (winners.length > 1) {\r

  \    status_message(`GAME OVER - The winners are ${winners.join(', ')}!!!`,
  styles);\r

  \  } else {\r

  \    status_message(`GAME OVER - The winner is ${winners[0]}!!!`, styles);\r

  \  }\r

  }"
show_gameover_new: "function show_gameover_new(winners) {\r

  \  let game = Session.cur_game;\r

  \  let table = Session.cur_table;\r

  \  if (!Session.scoring_complete) {\r

  \    console.log('======>scoring!!!!!', table.friendly);\r

  \    scoring_update(get_keys(Session.cur_players), winners, game);\r

  \    if (Session.level_setting == 'player') {\r

  \      inc_level_on_winstreak(winners, game);\r

  \      dec_level_on_losestreak();\r

  \    }\r

  \    out1();\r

  \    Session.scoring_complete = true;\r

  \  }\r

  \  let pl = Session.cur_players[winners[0]];\r

  \  let styles = { bg: pl.color, alpha: .75, fg: 'contrast', top: 220, };\r

  \  let msg = 'GAME OVER - The ' + (winners.length > 1 ? `winners are
  ${winners.join(', ')}!!!` : `winner is ${winners[0]}!!!`);\r

  \  let d = status_message(msg, styles);\r

  \  let end_scores = table.status == 'past' ? table.end_scoring :
  get_scores_from_cur_players();\r

  \  show_score_table(end_scores, table.friendly, d);\r

  \  mLinebreak(d);\r

  \  mButton('click to close', onclick_gameover_new, d, { fz: 20 },
  ['buttonClass', 'donebutton']);\r

  }"
show_games: "function show_games(ms = 500) {\r

  \  let dParent = mBy('dGames');\r

  \  mClear(dParent);\r

  \  mText(`<h2>start new game</h2>`, dParent, { maleft: 12 });\r

  \  let d = mDiv(dParent, { fg: 'white', animation: 'appear 1s ease both' },
  'game_menu');\r

  \  mCenterFlex(d);\r

  \  let gamelist = 'aristo bluff spotit ferro fritz'; if (DA.TEST0) gamelist
  += ' a_game';\r

  \  for (const g of dict2list(Config.games)) {\r

  \    if (gamelist.includes(g.id)) {\r

  \      let [sym, bg, color, id] = [Syms[g.logo], g.color, null, getUID()];\r

  \      let d1 = mDiv(d, { cursor: 'pointer', rounding: 10, margin: 10,
  vpadding: 15, wmin: 140, bg: bg, position: 'relative' }, g.id);\r

  \      d1.setAttribute('gamename', g.id);\r

  \      d1.onclick = onclick_game_menu_item;\r

  \      mCenterFlex(d1);\r

  \      mDiv(d1, { fz: 50, family: sym.family, 'line-height': 55 }, null,
  sym.text);\r

  \      mLinebreak(d1);\r

  \      mDiv(d1, { fz: 18, align: 'center' }, null, g.friendly);\r

  \    }\r

  \  }\r

  }"
show_games_menu: "function show_games_menu() {\r

  \  console.assert(isdef(S.tables_by_game), 'ERROR', getFunctionCallerName(),
  'S.tables_by_game not set!');\r

  \  console.log('tables for user', U.name, S.tables);\r

  \  let html = `<div id='game_menu' style=\"text-align: center; animation:
  appear 1s ease both\">`;\r

  \  for (const g of dict2list(DB.games)) { html += ui_game_menu_item(g,
  S.tables_by_game[g.id]); }\r

  \  mBy('inner_left_panel').innerHTML = html;\r

  \  mCenterCenterFlex(mBy('game_menu'));\r

  }"
show_gametable: "function show_gametable(dParent, clickplayer =
  'onclick_player_in_gametable', clickgame = 'onclick_game') {\r

  \  clear_gametable();\r

  \  if (isEmpty(Serverdata.games)) return [];\r

  \  let items = mDataTable(Serverdata.games, dParent, null, ['name',
  'gamename', 'turn', 'players', 'step', 'round']);\r

  \  mTableCommandify(items, {\r

  \    0: (item, val) => hFunc(val, clickgame, val),\r

  \    2: (item, val) => mTableCommandifyList(item, val, (rowitem, valpart) =>
  hFunc(valpart, clickplayer, valpart, rowitem.o.name)),\r

  \    3: (item, val) => mTableCommandifyList(item, val, (rowitem, valpart) =>
  hFunc(valpart, clickplayer, valpart, rowitem.o.name)),\r

  \  });\r

  \  return items;\r

  }"
show_guest_screen: function show_guest_screen() { get_intro(); }
show_handsorting_buttons_for: "function show_handsorting_buttons_for(plname,
  styles = {}) {\r

  \  if (Z.role == 'spectator' || isdef(mBy('dHandButtons'))) return;\r

  \  let fen = Z.fen;\r

  \  let pl = fen.players[plname];\r

  \  if (pl.hand.length <= 1) return;\r

  \  let d = UI.players[plname].hand.container; mStyle(d, { position:
  'relative', wmin: 155 });\r

  \  addKeys({ position: 'absolute', left: 58, bottom: -8, height: 25 },
  styles);\r

  \  let dHandButtons = mDiv(d, styles, 'dHandButtons');\r

  \  show_player_button('rank', dHandButtons, onclick_by_rank);\r

  \  show_player_button('suit', dHandButtons, onclick_by_suit);\r

  }"
show_history: "function show_history(fen, dParent) {\r

  \  if (!isEmpty(fen.history)) {\r

  \    let html = '';\r

  \    for (const o of jsCopy(fen.history).reverse()) {\r

  \      html += beautify_history(o.lines, o.title, fen);\r

  \    }\r

  \    let dHistory = mDiv(dParent, { paleft: 12, bg: colorLight('#EDC690',
  .5), box: true, matop: 4, rounding: 10, patop: 10, pabottom: 10, w: '100%',
  hmax: `calc( 100vh - 250px )`, 'overflow-y': 'auto', w: 260 }, null, html);\r

  \    UI.dHistoryParent = dParent;\r

  \    UI.dHistory = dHistory;\r

  \    if (isdef(Clientdata.historyLayout)) {\r

  \      show_history_layout(Clientdata.historyLayout);\r

  \    }\r

  \  }\r

  }"
show_history_layout: "function show_history_layout(layout) {\r

  \  assertion(isdef(UI.dHistoryParent) && isdef(UI.dHistory),
  'UI.dHistoryParent && UI.dHistory do NOT exist!!!');\r

  \  if (layout == 'ph') PHLayout();\r

  \  else if (layout == 'hp') HPLayout();\r

  \  else if (layout == 'prh') PRHLayout();\r

  \  else if (layout == 'hrp') HRPLayout();\r

  \  else PHLayout();\r

  }"
show_history_popup: "function show_history_popup() {\r

  \  if (isEmpty(Z.fen.history)) return;\r

  \  assertion(isdef(UI.dHistoryParent) && isdef(UI.dHistory),
  'UI.dHistoryParent && UI.dHistory do NOT exist!!!');\r

  \  let l = valf(Clientdata.historyLayout, 'ph');\r

  \  let cycle = ['ph', 'hp', 'prh', 'hrp'];\r

  \  let i = (cycle.indexOf(l) + 1) % cycle.length;\r

  \  show_history_layout(cycle[i]);\r

  }"
show_home: "function show_home() {\r

  \  console.log('hallo! should clear table!!!')\r

  \  mClear(dTable);\r

  \  show_motto();\r

  \  mLinebreak(dTable, 40);\r

  \  show_compose();\r

  \  mLinebreak(dTable, 4);\r

  \  show_recent_contributions();\r

  }"
show_home_logo: "function show_home_logo() {\r

  \  let bg = colorLight();\r

  \  let dParent = mBy('dAdminLeft');\r

  \  clearElement(dParent);\r

  \  let d = miPic('castle', dParent, { cursor: 'pointer', fz: 24, padding: 6,
  h: 36, box: true, margin: 2 });\r

  \  d.onclick = db_load;\r

  \  let version = 'v0.0.1';\r

  \  let html = `version ${version}`\r

  \  mText(html, dParent, { fz: 12 });\r

  }"
show_hourglass: "function show_hourglass(uname, d, sz, stylesPos = {}) {\r

  \  let html = get_waiting_html(sz);\r

  \  mStyle(d, { position: 'relative' });\r

  \  addKeys({ position: 'absolute' }, stylesPos);\r

  \  let dw = mDiv(d, stylesPos, `dh_${uname}`, html);\r

  }"
show_instruction: function show_instruction(msg) { mBy('dSelections0').innerHTML = msg; }
show_instruction_different: "function show_instruction_different(dParent, wlist,
  slist, styles) {\r

  \  wlist = [\r

  \    { phrase: 'click', styles: { fg: 'red' } },\r

  \    { phrase: 'tomato', styles: { fg: 'red' } },\r

  \  ];\r

  \  slist = [\r

  \    { phrase: 'click', voice: 'default', }\r

  \  ];\r

  \  console.assert(isdef(Speech));\r

  \  clearElement(dParent);\r

  \  let d = mDiv(dParent);\r

  \  mStyle(d, { margin: 15 })\r

  \  mClass(d, 'flexWrap');\r

  \  let msg = cmd + \" \" + `<b>${text.toUpperCase()}</b>`;\r

  \  if (nundef(fz)) fz = 36;\r

  \  let d1 = mText(msg, d, { fz: fz, display: 'inline-block' });\r

  \  if (nundef(fz)) fz = 36;\r

  \  d1 = mText(written, d, { fz: fz, display: 'inline-block' });\r

  \  if (isSpoken) {\r

  \    let sym = symbolDict.speaker;\r

  \    let d2 = mText(sym.text, d, {\r

  \      fz: fz + 2, weight: 900, display: 'inline-block',\r

  \      family: sym.family, 'padding-left': 14\r

  \    });\r

  \  }\r

  \  dFeedback = dInstruction = d;\r

  \  spoken = isSpoken ? isdef(spoken) ? spoken : cmd + \" \" + text : null;\r

  \  dInstruction.addEventListener('click', () => aniInstruction(spoken));\r

  \  if (!isSpoken) return;\r

  \  sayRandomVoice(isdef(spoken) ? spoken : (cmd + \" \" + text), null,
  \"david\");\r

  \  let sym = symbolDict.speaker;\r

  \  let d2 = mText(sym.text, d, {\r

  \    fz: fz + 2, weight: 900, display: 'inline-block',\r

  \    family: sym.family, 'padding-left': 14\r

  \  });\r

  \  dFeedback = dInstruction = d;\r

  \  dInstruction.addEventListener('click', () => aniInstruction(spoken));\r

  \  if (isdef(spoken)) sayRandomVoice(spoken, spoken, voice);\r

  }"
show_intro_screen: "function show_intro_screen() {\r

  \  if (!in_game_screen) return;\r

  \  in_game_screen = false;\r

  \  screen_transition('dHeader', 'dTable');\r

  \  mBy('dSettingsButton').style.opacity = 0;\r

  }"
show_jittering: "function show_jittering() { let b = mBy('bJittering');
  b.innerHTML = jittering ? 'repair' : 'desintegrate'; }"
show_letter_inputs: "function show_letter_inputs(word, dTable, wTotal, gap = 4)
  {\r

  \  let fzMax = wTotal / word.length - 3 * gap;\r

  \  let fz = Math.min(70, fzMax);\r

  \  let dpEmpty = createLetterInputsX(word, dTable, { pabottom: 5, bg:
  'grey', display: 'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: gap });\r

  \  let inputs = blankInputs(dpEmpty, range(0, word.length - 1), false);\r

  \  for (let i = 0; i < inputs.length; i++) {\r

  \    let l = iDiv(inputs[i]);\r

  \    ipaddX(l, 'both');\r

  \    mClass(l, 'dropzone');\r

  \    l.id = 'input' + i;\r

  \  }\r

  \  return inputs;\r

  }"
show_level: "function show_level(level, maxlevel) {\r

  \  let handicap = maxlevel - level;\r

  \  dLevel.innerHTML = `level: ${level}`;\r

  \  mStyle(dLevel, { fg: level >= 8 ? get_user_color() : 'white' });\r

  }"
show_logged_in_user_simple: "function show_logged_in_user_simple() {\r

  \  let uname = U.name;\r

  \  let sz = 36;\r

  \  let html = `\r

  \  <div username='${uname}'
  style='display:flex;align-items:center;gap:6px;height:100%'>\r

  \    <img src='../base/assets/images/${uname}.jpg' width='${sz}'
  height='${sz}' class='img_person' style='border:3px solid
  ${U.color};margin:0'>\r

  \    <span>${uname}</span>\r

  \  </div>`;\r

  \  show_title_right(html, { fg: U.color });\r

  }"
show_map_dims: "function show_map_dims() {\r

  \  let map = M.map;\r

  \  console.log('________ at zoom', map.getZoom());\r

  \  console.log('meters per pixel', get_meters_per_pixel());\r

  \  console.log('map dims in meters', get_map_dims_in_meters());\r

  \  console.log('map dims in lat lon', get_map_dims_in_lat_long());\r

  \  console.log('map dims in pixel', get_map_dims_in_pixel());\r

  }"
show_master_password: "function show_master_password() {\r

  \  let score = localStorage.getItem('score');\r

  \  show_special_message('the bitwarden master password is ' +
  S.master_password, false, 5000, 2000, { bg: 'dodgerblue', classname: '', top:
  400 });\r

  }"
show_medium_ui: function show_medium_ui() { DA.testing = false;
  hide('dButtons'); hide('dTest0'); hide('dTopAdvanced'); toggle_games_off(); }
show_message: "function show_message(msg = '', stay = false) {\r

  \  mStyle(dTable, { transition: 'all 1s ease' });\r

  \  let d = mBy('dMessage'); d.innerHTML = msg;\r

  \  if (stay) return;\r

  \  let ms = 1000, delay = 3000;\r

  \  let anim = d.animate([{ transform: `scale(1,1)`, opacity: 1 }, {
  transform: `scale(1,0)`, opacity: 0 },], { duration: 1000, easing: 'ease',
  delay: delay });\r

  \  dTable.animate([{ transform: 'translateY(0px)' }, { transform:
  'translateY(-56px)' },], { fill: 'none', duration: ms, easing: 'ease', delay:
  delay });\r

  \  anim.onfinish = () => {\r

  \    mClear(d);\r

  \  }\r

  }"
show_MMM: function show_MMM(msg) { show_fleeting_message(msg, mBy('dMMM')); }
show_motto: "function show_motto() {\r

  \  let d = mBy('dMotto');\r

  \  mLinebreak(d, 6);\r

  \  mDiv(d, {}, null, `Chillax. Dream. Let Go.`);\r

  \  mLinebreak(d);\r

  \  mDiv(d, {}, null, `Life made simple and light.`);\r

  }"
show_my_role: "function show_my_role(role) {\r

  \  let dRoles = mBy('dRoles');\r

  \  dRoles.innerHTML = `<h1>${role}</h1>`;\r

  \  Clientdata.role = role;\r

  \  mAppear(dRoles, 1000, null, 'linear');\r

  \  let d = show_bars();\r

  \  mAppear(d, 1000, null, 'linear');\r

  \  if (role == 'host') {\r

  \    mButton('reset', onclick_reset_progressbars, d, { h: 30, w: 100 });\r

  \    disable_bar_ui();\r

  \  } else if (role == 'guest') {\r

  \    if (nundef(Clientdata.uid)) Clientdata.uid = rUniqueId(30);\r

  \    Clientdata.new_clicks = 0;\r

  \  }\r

  \  autopoll();\r

  }"
show_my_score: function show_my_score() { let me =
  Session.cur_players[Session.cur_user]; console.log('my', me.name, 'score is',
  me.score); }
show_one_skype_message: "function show_one_skype_message(dParent, o) {\r

  \  let d = mDiv(dParent, { rounding: 12, hpadding: 6, vpadding: 6, margin:
  4, gap: 12 }); mFlex(d);\r

  \  let [sz] = [40];\r

  \  let dimg = get_skype_phone_icon(o.color);\r

  \  mAppend(d, dimg);\r

  \  let dmiddle = mDiv(d, { flex: 8, wmax: '75%' });\r

  \  let dnum = mDiv(dmiddle, { fz: 11, fg: 'grey' }, null, `<div>${o.num}
  ${format_date(o.date)}</div>`);\r

  \  let msg = get_skype_expanded_message(o.msg);\r

  \  S.boa_authorization_code = stringAfter(msg, 'Code ').substring(0, 6);\r

  \  let dmsg = mDiv(dmiddle, { bg: '#EEE', fz: 14, fg: 'black', rounding: 8,
  padding: 8 }, null, `<div>${msg}</div>`);\r

  }"
show_options_popup: "function show_options_popup(options) {\r

  \  let opresent = {};\r

  \  let di = { mode: 'gamemode', yes: true, no: false };\r

  \  let keys = get_keys(options);\r

  \  keys.sort();\r

  \  for (const k of get_keys(options).sort()) {\r

  \    let key = valf(di[k], k);\r

  \    let val = valf(di[options[k]], options[k]);\r

  \    opresent[key] = val;\r

  \  }\r

  \  let x = mYaml(mCreate('div'), opresent);\r

  \  let dpop = mPopup(x.innerHTML, dTable, { fz: 16, fg: 'white', top: 0,
  right: 0, border: 'white', padding: 10, bg: 'dimgray' }, 'dOptions');\r

  \  mInsert(dpop, mCreateFrom(`<div
  style=\"text-align:center;width:100%;font-family:Algerian;font-size:22px;\">$\
  {Z.game}</div>`));\r

  }"
show_player_button: "function show_player_button(caption, ui_item, handler) {\r

  \  let d = ui_item.container ?? iDiv(ui_item);\r

  \  let styles = { rounding: 6, bg: 'silver', fg: 'black', border: 0, maleft:
  10 };\r

  \  let b = mButton(caption, handler, d, styles, 'enabled');\r

  \  return b;\r

  }"
show_player_mode: "function show_player_mode(dParent, g, uname) {\r

  \  let dplmode = valf(mBy('dPlayerMode'), mDiv(dParent, { fg: 'blue', fz:
  12, padding: 4 }, 'dPlayerMode'));\r

  \  mCenterCenterFlex(dplmode);\r

  \  let plmode = lookupSet(g.fen, ['players', uname, 'playmode'], 'human');\r

  \  dplmode.innerHTML = plmode;\r

  \  if (g.fen.turn.includes(uname)) {\r

  \    dplmode.onclick = () => {\r

  \      let playermode = lookup(g.fen, ['players', uname, 'playmode']);\r

  \      playermode = lookupSetOverride(g.fen, ['players', uname, 'playmode'],
  playermode == 'human' ? 'bot' : 'human');\r

  \      dplmode.innerHTML = playermode;\r

  \      if (playermode == 'bot') ai_move();\r

  \    }\r

  \    mStyle(dplmode, { cursor: 'pointer' });\r

  \  }\r

  }"
show_playerdatastate: "function show_playerdatastate() {\r

  \  for (const pldata of Z.playerdata) {\r

  \    console.log('player', pldata.name,
  `status=${isEmpty(pldata.player_status) ? 'none' : pldata.player_status}`,
  pldata.state);\r

  \  }\r

  }"
show_polling_signal: "function show_polling_signal() {\r

  \  if (DA.TEST0 != true) return;\r

  \  let d1 = mDiv(mBy('dAdmin'), { position: 'fixed', top: 10, left: 73 });\r

  \  let bg = Z.skip_presentation == true ? 'grey' : 'green';\r

  \  let d2 = mDiv(d1, { width: 20, height: 20, bg: bg, rounding: 10, display:
  'inline-block' });\r

  \  mFadeRemove(d1, 1000);\r

  }"
show_project_editor: "function show_project_editor() {\r

  \  console.log('display the project editor!');\r

  \  mClear(dTable);\r

  \  let d = mCard(dTable, {}, 'coform'); mCenterFlex(d);\r

  \  mLinebreak(d, 40);\r

  \  let d1 = mText('New Composition', d, {}, 'fett');\r

  \  mPlace(d1, 'tl', 10);\r

  \  let d2 = mButtonX(d, onclick_close_project_editor);\r

  \  mPlace(d2, 'tr', 10);\r

  \  let i = 0;\r

  \  let d3 = mInput(d, {}, 'inTitle', 'Title', 'coinput', i++);\r

  \  let d4 = mInput(d, {}, 'inCreator', 'Creator', 'coinput', i++, isdef(U) ?
  U.name : '');\r

  \  let d5 = mInput(d, {}, 'inDescription', 'Short Description', 'coinput',
  i++);\r

  \  let b = mButton('next', onclick_add_question, d, {}, ['fett',
  'no_outline', 'btn']);\r

  }"
show_prompt: "function show_prompt(q, list, handler) {\r

  \  mClear(dTable);\r

  \  console.log('list', list)\r

  \  let dqcont = mDiv(dTable, G.stcont);\r

  \  mLinebreak(dTable);\r

  \  let dq = mDiv(dqcont, G.stq, `q_${G.i}`, q);\r

  \  let qitem = iAdd({ type: 'q', index: G.i, text: q }, { cont: dqcont, div:
  dq });\r

  \  let dacont = mDiv(dTable, G.stcont);\r

  \  mLinebreak(dTable);\r

  \  let tb = mToolbar(['back', 'clear', 'next'], handle_command, dTable, {
  align: 'center' }, { margin: 8, fz: 30, cursor: 'pointer' });\r

  \  G.buttons = tb.children;\r

  \  let aslist = [];\r

  \  list.map(x => {\r

  \    let da = ui_type_sym_text_line(dacont, x, dict_augment({ bg: x.color },
  G.sta), handler);\r

  \    let item = iAdd(x, { div: da });\r

  \    aslist.push(item.id);\r

  \  });\r

  \  G.q = qitem.id;\r

  \  G.alist = aslist;\r

  \  G.selist = [];\r

  \  dTable.setAttribute('transition-style', \"in:wipe:bottom-right\");\r

  \  toolbar_check();\r

  }"
show_question_editor: "function show_question_editor() {\r

  \  mLinebreak(dTable, 4)\r

  \  let d = mCard(dTable, {}, 'coform'); mCenterFlex(d);\r

  \  let iform = arrChildren(dTable).length;\r

  \  console.log('this is question number', iform);\r

  \  let d1 = mText('New Composition', d, {}, 'fett'); mPlace(d1, 'tl', 10);\r

  \  let d2 = mButtonX(d, onclick_close_question_editor);\r

  \  mPlace(d2, 'tr', 10);\r

  \  mLinebreak(d, 40);\r

  \  let i = 0;\r

  \  let d3 = mInput(d, {}, 'inTitle' + iform, 'Title', 'coinput', i++);\r

  \  let d4 = mInput(d, {}, 'inCreator' + iform, 'Creator', 'coinput', i++,
  isdef(U) ? U.name : '');\r

  \  let d5 = mInput(d, {}, 'inDescription' + iform, 'Short Description',
  'coinput', i++);\r

  \  let b = mButton('next', onclick_add_question, d, {}, ['fett',
  'no_outline', 'btn']);\r

  }"
show_rankings: "function show_rankings(dParent) {\r

  \  csv = make_csv_for_rankings();\r

  \  let ch = csv[csv.length - 1];\r

  \  if (ch == '%' || isNumber(ch)) {\r

  \    let d = mDiv(dParent, { align: 'center' }, null, `<h1>All Time
  Ranking</h1>`);\r

  \    let d1 = mDiv(d, { align: 'center', display: 'flex' });\r

  \    mCenterCenterFlex(d1);\r

  \    present_table_from_csv(csv, d1);\r

  \    mLinebreak(dParent);\r

  \  }\r

  }"
show_recent_contributions: "function show_recent_contributions() {\r

  \  let d = mCard(dTable);\r

  \  let contrib = Serverdata.contrib;\r

  \  if (isEmpty(contrib)) { d.innerHTML = 'no projects yet...'; return; }\r

  }"
show_role: "function show_role() {\r

  \  let d = mBy('dAdminMiddle');\r

  \  clearElement(d);\r

  \  let hotseatplayer = Z.uname != Z.uplayer && Z.mode == 'hotseat' && Z.host
  == Z.uname;\r

  \  let styles, text;\r

  \  let boldstyle = { fg: 'red', weight: 'bold', fz: 20 };\r

  \  let normalstyle = { fg: 'black', weight: null, fz: null };\r

  \  let location = '';\r

  \  if (hotseatplayer) {\r

  \    styles = boldstyle;\r

  \    text = `your turn for ${Z.uplayer}`;\r

  \  } else if (Z.role == 'spectator') {\r

  \    styles = normalstyle;\r

  \    text = `(spectating)`;\r

  \  } else if (Z.role == 'active') {\r

  \    styles = boldstyle;\r

  \    text = `It's your turn!!!`;\r

  \  } else if (Z.role == 'waiting') {\r

  \    text = `waiting for players to complete their moves...`;\r

  \  } else {\r

  \    assertion(Z.role == 'inactive', 'role is not active or inactive or
  spectating ' + Z.role);\r

  \    styles = normalstyle;\r

  \    text = `(${Z.turn[0]}'s turn)`;\r

  \  }\r

  \  d.innerHTML = location + text;\r

  \  mStyle(d, styles);\r

  }"
show_roles: "function show_roles() {\r

  \  let d = mDiv(dTable, {}, 'dRoles', null, 'grid_roles');\r

  \  mButton('host', () => onclick_role('host'), d, {}, ['donebutton',
  'enabled']);\r

  \  mButton('guest', () => onclick_role('guest'), d, {}, ['donebutton',
  'enabled']);\r

  }"
show_route: "function show_route(map, pts, color, callback) {\r

  \  let control = L.Routing.control({\r

  \    waypoints: points_to_waypoints(pts),\r

  \    lineOptions: { styles: [{ color: color, opacity: 1, weight: 3 }], },\r

  \    draggableWaypoints: false,\r

  \    createMarker: function () { return false; },\r

  \    show: false,\r

  \  }).addTo(map);\r

  \  control.on('routesfound', callback);\r

  \  return control;\r

  }"
show_score_table: "function show_score_table(fen, game_title, dParent) {\r

  \  let d = mDiv(dParent, { margin: 'auto', wmin: 300, wmax: 500 });\r

  \  html = `<div style='text-align:center;margin-top:100px'>\r

  \  <h1>${game_title}</h1>\r

  \  <table id='customers'><tr><th>player</th><th>score</th></tr>\r

  \  `;\r

  \  let plparts = fen.split(',');\r

  \  for (const pl of plparts) {\r

  \    html += `<tr><td>${stringBefore(pl, ':')}</td><td>${stringAfter(pl,
  ':')}</td></tr>`\r

  \  }\r

  \  html += '</table></div>';\r

  \  d.innerHTML = html;\r

  }"
show_settings: "function show_settings(dParent) {\r

  \  let [options, fen, uplayer] = [Z.options, Z.fen, Z.uplayer];\r

  \  clearElement(dParent);\r

  \  mFlex(dParent);\r

  \  mStyle(dParent, { 'justify-content': 'end', gap: 12, paright: 10 })\r

  \  let playmode = get_playmode(uplayer);\r

  \  let game_mode = Z.mode;\r

  \  let st = { fz: 20, padding: 0, h: 40, box: true, matop: 2, rounding:
  '50%', cursor: 'pointer' };\r

  \  let dHistoryButton = miPic('scroll', dParent, st);\r

  \  dHistoryButton.onclick = show_history_popup;\r

  \  if (isdef(Config.games[Z.game].options.strategy)) {\r

  \    let dStrategy = miPic('chess pawn', dParent, st);\r

  \    dStrategy.onclick = show_strategy_popup;\r

  \  }\r

  \  let d = miPic('gear', dParent, st);\r

  \  options.playmode = playmode;\r

  \  d.onmouseenter = () => show_options_popup(options);\r

  \  d.onmouseleave = hide_options_popup;\r

  }"
show_settings_orig: "function show_settings_orig(options) {\r

  \  clearElement('dTitleRight');\r

  \  let dParent = mDiv(mBy('dTitleRight'), { display: 'flex', fg: 'red' },
  null, options.mode == 'hotseat' ? 'h' : '');\r

  \  let d = miPic('gear', dParent, { fz: 20, padding: 6, h: 40, box: true,
  matop: 2, rounding: '50%', cursor: 'pointer' });\r

  \  d.onmouseenter = () => show_options_popup(options);\r

  \  d.onmouseleave = hide_options_popup;\r

  }"
show_shield: "function show_shield(msg) {\r

  \  mBy('dShield').style.display = 'block';\r

  \  mBy('dShield').innerHTML = msg;\r

  }"
show_sidebar: "function show_sidebar(list, handler) {\r

  \  dSidebar = mBy('dSidebar'); mClear(dSidebar); mStyle(dSidebar, { w: 200,
  h: window.innerHeight - 68, overy: 'auto' });\r

  \  for (const k of list) {\r

  \    let d = mDiv(dSidebar, { cursor: 'pointer', wmin: 100 }, null, k,
  'hop1')\r

  \    if (isdef(handler)) d.onclick = handler;\r

  \  }\r

  }"
show_simple_ui: "function show_simple_ui(name) {\r

  \  U = firstCond(Serverdata.users, x => x.name == name);\r

  \  localStorage.setItem('uname', U.name);\r

  \  dTitle = mBy('dTitle');\r

  \  show_title();\r

  \  show_logged_in_user_simple();\r

  \  dTitle.animate([{ opacity: 0 }, { opacity: 1 },], { fill: 'both',
  duration: 1000, easing: 'ease-in' });\r

  \  dTable = mBy('dTable');\r

  \  hide('dUsers'); show('aLogout');\r

  \  hide('dTopMenu')\r

  \  let dStatus = mBy('dStatus'); mStyle(dStatus, { left: 10, width: '50%',
  right: null });\r

  \  onclick_tables();\r

  \  DA.testing = false; return;\r

  \  hide('dButtons');\r

  \  hide('dTest0');\r

  \  hide('dTopAdvanced');\r

  \  toggle_games_off();\r

  \  toggle_tables_off();\r

  \  toggle_users_on();\r

  }"
show_simple_ui_orig: "function show_simple_ui_orig() {\r

  \  DA.testing = false;\r

  \  hide('dButtons');\r

  \  hide('dTest0');\r

  \  hide('dTopAdvanced');\r

  \  toggle_games_off();\r

  \  toggle_tables_off();\r

  \  toggle_users_on();\r

  }"
show_skype_contact: "function show_skype_contact(dParent) {\r

  \  let c = S.skype_contact;\r

  \  if (isdef(c)) {\r

  \    mClear(dParent);\r

  \    let d = mDiv(dParent, { h: 'calc( 100vh - 200px )', 'overflow-y':
  'scroll' });\r

  \    let dfooter = mDiv(dParent, { h: 190, padding: 10 });\r

  \    let address = c.num;\r

  \    dfooter.innerHTML = `to: ${address} via Skype<br>`;\r

  \    let dform = mDiv(dfooter, { vmargin: 14 }); mFlex(dform);\r

  \    let denter = mInput(dform, { border: 'none', w: '85%', h: 40, bg:
  '#EEE', fg: '#000', fz: 14, padding: 10, hmargin: 14, rounding: 25 }, null,
  'Type an SMS here');\r

  \    let b = skype_go_button();\r

  \    mAppend(dform, b);\r

  \    for (let i = 0; i < 20; i++) {\r

  \      show_one_skype_message(d, c)\r

  \    }\r

  \    d.scrollTop = d.scrollHeight;\r

  \  }\r

  }"
show_special_message: "function show_special_message(msg, stay = false, ms =
  3000, delay = 0, styles = {}, callback = null) {\r

  \  let dParent = mBy('dBandMessage');\r

  \  if (nundef(dParent)) dParent = mDiv(document.body, {}, 'dBandMessage');\r

  \  show(dParent);\r

  \  clearElement(dParent);\r

  \  addKeys({ position: 'fixed', top: 200, classname: 'slow_gradient_blink',
  vpadding: 10, align: 'center', position: 'absolute', fg: 'white', fz: 24, w:
  '100vw' }, styles);\r

  \  if (!isEmpty(styles.classname)) { mClass(dParent, styles.classname); }\r

  \  delete styles.classname;\r

  \  mStyle(dParent, styles);\r

  \  dParent.innerHTML = msg;\r

  \  if (delay > 0) TO.special = setTimeout(() => { mFadeRemove(dParent, ms,
  callback); }, delay);\r

  \  else mFadeRemove(dParent, ms, callback);\r

  }"
show_stage: "function show_stage() {\r

  \  if (isdef(Z.fen.progress)) {\r

  \    let d = mBy('dTitleLeft');\r

  \    let former = mBy('dProgress');\r

  \    if (isdef(former)) former.remove();\r

  \    let dprogress = mDiv(d, {}, 'dProgress',
  `<div>${Z.fen.progress}</div>`);\r

  \  }\r

  }"
show_standard_title: "function show_standard_title(dParent, title) {
  mText(title, dParent, { margin: 20, fz: 24 }); }"
show_status: "function show_status(s) {\r

  \  if (is_advanced_user()) {\r

  \    clear_status();\r

  \    if (!TESTING && !s.includes('reload')) show_fleeting_message(s,
  'dTest', { fz: 14, position: 'absolute', top: 5, right: 10 }, 'dStatus');\r

  \  }\r

  }"
show_status_orig: "function show_status_orig(msg = '', stay) {\r

  \  if (isdef(stay)) showFleetingMessage(msg, mBy('dStatus'), { fg: 'red' },
  1000, 0, false);\r

  \  else showFleetingMessage(msg, mBy('dStatus'), { fg: 'black' });\r

  }"
show_status_simple: "function show_status_simple() {\r\n}"
show_strategy_popup: "function show_strategy_popup() {\r

  \  let dpop = mPopup('', dTable, { fz: 16, fg: 'white', top: 0, right: 0,
  border: 'white', padding: 10, bg: 'dimgray' }, 'dOptions');\r

  \  mAppend(dpop, mCreateFrom(`<div
  style=\"text-align:center;width:100%;font-family:Algerian;font-size:22px;\">$\
  {Z.game}</div>`));\r

  \  mDiv(dpop, { matop: 5, maleft: 10 }, null, `choose strategy:`);\r

  \  let vals = Config.games[Z.game].options.strategy.split(',');\r

  \  let key = 'strategy';\r

  \  let fs = mRadioGroup(dpop, { fg: 'white' }, `d_${key}`);\r

  \  for (const v of vals) { mRadio(v, isNumber(v) ? Number(v) : v, key, fs, {
  cursor: 'pointer' }, set_player_strategy, key, v == Z.strategy); }\r

  \  measure_fieldset(fs);\r

  }"
show_table: "function show_table() {\r

  \  console.log('show_table S', S)\r

  }"
show_table_for: "function show_table_for(g, dParent, uname) {\r

  \  let present = false;\r

  \  if (!UBEF || uname != UBEF) present = true;\r

  \  else if (!GBEF || g.name != GBEF) present = true;\r

  \  else {\r

  \    if (!EBEF) present = true;\r

  \    else {\r

  \      let keybef = get_keys(EBEF);\r

  \      let keys = get_keys(g.expected);\r

  \      console.log('keys', keybef, keys);\r

  \      if (!sameList(keybef, keys)) present = true;\r

  \      console.log('uname', uname)\r

  \      let ubef = EBEF[uname];\r

  \      let u = g.expected[uname];\r

  \      console.log('uname', ubef, u)\r

  \      console.log('STEP!!!', ubef.step, u.step)\r

  \      if (ubef.type != u.type || ubef.step != u.step) present = true;\r

  \    }\r

  \  }\r

  \  console.log('need to present:', present);\r

  \  U = firstCond(Serverdata.users, x => x.name == uname);\r

  \  UBEF = U.name;\r

  \  G = g;\r

  \  GBEF = G.name;\r

  \  EBEF = jsCopy(G.expected);\r

  \  if (!present) return;\r

  \  show_title();\r

  \  show_user();\r

  \  clearElement(dParent);\r

  \  //dTable.innerHTML = `<img
  src='http://localhost:8080/aroot/base/assets/images/wolfgang.jpg' />`;\r

  \  ui_game_stats(dParent, G.fen.players);\r

  \  mLinebreak(dParent, 10)\r

  \  show_message(G.fen.message);\r

  \  show_instruction(isdef(G.expected[uname]) ? G.fen.instruction : 'NOT YOUR
  TURN');\r

  \  show_status(G.fen.status);\r

  \  window[`${G.gamename}_present`](G, dParent, uname);\r

  \  if (!isdef(G.expected[uname])) mShield(dParent);\r

  \  if (G.turn.includes(uname)) activate_ui();\r

  }"
show_table_for_old: "function show_table_for_old(g, dParent, uname) {\r

  \  console.assert(isdef(g.fen), `game ${g.name} does not have a fen!`)\r

  \  console.assert(isDict(g.fen), \"fen is NOT an object!!! \" + g.name)\r

  \  console.assert(isdef(uname), `uname ${uname}`);\r

  \  Prevturn = isdef(Turn) ? jsCopy(Turn) : null;\r

  \  console.log('g.fen.turn', g.fen.turn)\r

  \  Turn = jsCopy(g.fen.turn);\r

  \  let sameuser = isdef(U) && U.name == uname;\r

  \  let samegame = isdef(G) && G.name == g.name;\r

  \  let sameturn = sameuser && samegame && isList(Prevturn) && isList(Turn)
  && sameList(Prevturn, Turn);\r

  \  G = g;\r

  \  U = firstCond(Serverdata.users, x => x.name == uname);\r

  \  let wasmyturn = isList(Prevturn) && Prevturn.includes(U.name);\r

  \  let ismyturn = isList(Turn) && Turn.includes(U.name);\r

  \  if (sameturn) return;\r

  \  show_title();\r

  \  show_user();\r

  \  clearElement(dParent);\r

  \  //dTable.innerHTML = `<img
  src='http://localhost:8080/aroot/base/assets/images/wolfgang.jpg' />`;\r

  \  ui_game_stats(dParent, G.fen.players);\r

  \  mLinebreak(dParent, 10)\r

  \  show_message(G.fen.message);\r

  \  show_instruction(ismyturn ? G.fen.instruction : 'NOT YOUR TURN');\r

  \  show_status(G.fen.status);\r

  \  window[`${G.gamename}_present`](G, dParent, uname);\r

  \  if (!ismyturn) mShield(dParent);\r

  \  if (G.turn.includes(uname)) activate_ui();\r

  }"
show_table_if_winner: "function show_table_if_winner(otree) {\r

  \  table_shield_off();\r

  \  if (isdef(otree.winner)) {\r

  \    stop_game();\r

  \    ari_reveal_all_buildings(otree);\r

  \    if (!DA.test.running) turn_show_gameover(otree);\r

  \  }\r

  }"
show_table_simple: "function show_table_simple(tablename) {\r

  \  hide('dTables');\r

  \  show('dTable');\r

  \  stopgame();\r

  \  let table = firstCond(Serverdata.tables, x => x.friendly == tablename);\r

  \  ensure_polling();\r

  \  phpPost({ friendly: tablename }, 'table');\r

  }"
show_tables: "function show_tables(ms = 500) {\r

  \  clear_screen();\r

  \  let dParent = mBy('dTables');\r

  \  mClear(dParent);\r

  \  show_games();\r

  \  let tables = Serverdata.tables;\r

  \  if (isEmpty(tables)) { mText('no active game tables', dParent); return
  []; }\r

  \  tables.map(x => x.game_friendly = Config.games[x.game].friendly);\r

  \  mText(`<h2>game tables</h2>`, dParent, { maleft: 12 })\r

  \  let t = mDataTable(tables, dParent, null, ['friendly', 'game_friendly',
  'players'], 'tables', false);\r

  \  mTableCommandify(t.rowitems, {\r

  \    0: (item, val) => hFunc(val, 'onclick_table', val, item.id),\r

  \  });\r

  \  let d = iDiv(t);\r

  \  for (const ri of t.rowitems) {\r

  \    let r = iDiv(ri);\r

  \    let h = hFunc('delete', 'delete_table', ri.o.friendly);\r

  \    c = mAppend(r, mCreate('td'));\r

  \    c.innerHTML = h;\r

  \  }\r

  }"
show_tables_simple: "function show_tables_simple() {\r

  \  let dParent = mBy('dTables');\r

  \  show(dParent); hide('dTable');\r

  \  clearElement(dParent);\r

  \  let tables = Serverdata.tables;\r

  \  if (isEmpty(tables)) { mText('no active game tables', dParent); return
  []; }\r

  \  mText(`<h1>game tables</h1>`, dParent, { maleft: 12 })\r

  \  let t = mDataTable(tables, dParent, null, ['game', 'friendly',
  'players'], 'tables');\r

  \  mTableCommandify(t.rowitems, {\r

  \    1: (item, val) => hFunc(val, 'onclick_game_in_gametable', val,
  item.id),\r

  \  });\r

  }"
show_tagged: "function show_tagged() {\r

  \  if (isdef(DA.tags)) get_values(DA.tags).map(x => x.remove());\r

  \  let tpop = mPopup('', document.body)\r

  \  DA.tags = {};\r

  \  for (const id in Items) {\r

  \    let el = mBy(id);\r

  \    if (nundef(el)) {\r

  \      let item = Items[id];\r

  \      el = iDiv(item);\r

  \      if (nundef(el)) continue;\r

  \      if (nundef(item.live)) { item.live = { div: el }; el.id = id; delete
  Items[id].div; }\r

  \    }\r

  \    console.log('id', id)\r

  \    let r = getRect(el);\r

  \    let dtag = mDiv(tpop, { fz: 12, bg: 'black', fg: 'white', hpadding: 4,
  rounding: 12 }, null, id)\r

  \    mPos(dtag, r.l, r.t);\r

  \    DA.tags[id] = dtag;\r

  \  }\r

  }"
show_title: "function show_title() {\r

  \  Z.func.state_info(mBy('dTitleLeft'));\r

  \  show_settings(mBy('dTitleRight'));\r

  \  mBy('dTablename').innerHTML = Z.friendly;\r

  }"
show_title_left: "function show_title_left(s, styles, funnyLetters = false) {\r

  \  let d = mBy('dTitleLeft');\r

  \  d.innerHTML = `${funnyLetters ? mColorLetters(s) : s}`;\r

  \  if (isdef(styles)) mStyle(d, styles);\r

  }"
show_title_right: "function show_title_right(s, styles, funnyLetters = false)
  {\r

  \  let d = mBy('dTitleRight');\r

  \  d.innerHTML = `${funnyLetters ? mColorLetters(s) : s}`;\r

  \  if (isdef(styles)) mStyle(d, styles);\r

  }"
show_user: "function show_user() {\r

  \  if (isdef(U) && U.name != 'anonymous') {\r

  \    let uname = U.name;\r

  \    let sz = 36;\r

  \    let html = `\r

  \    <div username='${uname}'
  style='display:flex;align-items:center;gap:6px;height:100%'>\r

  \      <img src='../base/assets/images/${uname}.jpg' width='${sz}'
  height='${sz}' class='img_person' style='border:3px solid
  ${U.color};margin:0'>\r

  \      <span>${uname}</span>\r

  \    </div>`;\r

  \    show_title_left(html, { fg: U.color });\r

  \  }\r

  \  else show_home_logo();\r

  }"
show_user_image: "function show_user_image(uname, dParent, sz = 300) {\r

  \  let d = mDiv(dParent, { margin: 'auto', w: sz });\r

  \  let html = `\r

  \  <div style='text-align:center;margin-top:50px'>\r

  \    <img src='../base/assets/images/${uname}.jpg' class=\"img_person\"
  height=150 />\r

  \  </div>\r

  \  `;\r

  \  d.innerHTML = html;\r

  \  return d;\r

  }"
show_user_intro_screen: "function show_user_intro_screen(is_show_ranking =
  false, is_start_poll = true) {\r

  \  show('dIntro'); clearElement('dIntro');\r

  \  intro_show_user_image(Session.cur_user);\r

  \  status_message(`hi, ${capitalize(Session.cur_user)}, a game is starting
  soon...`, { top: 330, classname: 'slow_gradient_blink' });\r

  \  if (is_show_ranking) {\r

  \    let t = Session.cur_table;\r

  \    let fen = t.status == 'past' ? t.fen :
  get_score_fen_from_cur_players();\r

  \    intro_create_score_table(fen);\r

  \  }\r

  \  if (is_start_poll) poll_for_table_started();\r

  }"
show_user_version_0: "function show_user_version_0() {\r

  \  if (isdef(U) && U.name != 'anonymous') show_title_left(U.name, { fg:
  U.color });\r

  \  else show_home_logo();\r

  }"
show_username: "function show_username() {\r

  \  let uname = U.name;\r

  \  let dpic = get_user_pic(uname, 30);\r

  \  let d = mBy('dAdminRight');\r

  \  mClear(d);\r

  \  mAppend(d, get_logout_button());\r

  \  mAppend(d, dpic);\r

  \  if (is_advanced_user()) { show('dAdvanced1'); } else { hide('dAdvanced');
  hide('dAdvanced1'); }\r

  \  //console.log('DA.running',DA.running);
  //'Z',Z,'dTable',dTable,mBy('dTable'),isVisible('dTable'));\r

  \  if (!TESTING && !DA.running) phpPost({ app: 'easy' }, 'tables');\r

  }"
show_users: "function show_users(ms = 300) {\r

  \  let dParent = mBy('dUsers');\r

  \  mClear(dParent);\r

  \  for (const u of Serverdata.users) {\r

  \    if (['ally', 'bob', 'leo'].includes(u.name)) continue;\r

  \    let d = get_user_pic_and_name(u.name, dParent);\r

  \    d.onclick = () => onclick_user(u.name);\r

  \    mStyle(d, { cursor: 'pointer' });\r

  \  }\r

  \  mFall(dParent, ms);\r

  }"
show_users_version_0: "function show_users_version_0() {\r

  \  let dParent = mBy('dAllTables');\r

  \  show(dParent);\r

  \  clearElement(dParent);\r

  \  let headers = ['id', 'name', 'motto', 'commands'];\r

  \  let t = mDataTable(Serverdata.users, dParent, rec => ({ fg: 'contrast',
  bg: rec.color }), headers, 'users');\r

  \  mTableCommandify(t.rowitems, {\r

  \    1: (item, val) => hFunc(val, 'onclick_user', val),\r

  \  });\r

  \  return t;\r

  }"
show_view_buildings_button: "function show_view_buildings_button(plname) {\r

  \  if (Z.role == 'spectator' || isdef(mBy('dPlayerButtons'))) return;\r

  \  if (isEmpty(UI.players[plname].buildinglist)) return;\r

  \  let d1 = iDiv(UI.players[plname]); mStyle(d1, { position: 'relative'
  });\r

  \  let d2 = mDiv(d1, { position: 'absolute', top: 8, left: 50, height: 25 },
  'dPlayerButtons');\r

  \  show_player_button('view buildings', d2, onclick_view_buildings);\r

  }"
show_waiting_for_ack_message: "function show_waiting_for_ack_message() {\r

  \  let dInstruction = mBy('dSelections0');\r

  \  mClass(dInstruction, 'instruction');\r

  \  mCenterCenterFlex(dInstruction);\r

  \  mBy('dSelections0').innerHTML = 'waiting for next round to start...';\r

  }"
show_waiting_message: "function show_waiting_message(msg) {\r

  \  let dInstruction = mBy('dSelections0');\r

  \  mClass(dInstruction, 'instruction');\r

  \  mCenterCenterFlex(dInstruction);\r

  \  mBy('dSelections0').innerHTML = msg;\r

  }"
show_winners: "function show_winners() {\r

  \  let winners = Z.fen.winners;\r

  \  let multiple_winners = winners.length > 1;\r

  \  let winners_html = winners.map(x => get_user_pic_html(x, 35)).join('
  ');\r

  \  let msg = `\r

  \    <div style=\"display:flex;gap:10px;align-items:center\">\r

  \      <div style=\"color:red;font-size:22px;font-weight:bold;\">GAME OVER!
  the winner${multiple_winners ? 's are: ' : ' is '}</div>\r

  \      <div style=\"padding-top:5px;\">${winners_html}</div>\r

  \    </div>\r

  \  `;\r

  \  show_message(msg, true);\r

  \  mShield(dTable);\r

  \  hide('bRestartMove');\r

  \  return Z.fen.winners;\r

  }"
show_x_button: "function show_x_button(dParent) {\r

  \  let b = mButton('close', () => hide(dParent), dParent, { maleft: '95%'
  });\r

  }"
show0: function show0(id) { mBy(id).style.display = "block"; }
show100: "function show100() {\r

  \  let table = mBy('table');\r

  \  clearElement(table);\r

  \  let picLabelStyles = getHarmoniousStylesXX(100, 100, 10, 'arial',
  'random', 'random', true);\r

  \  let picStyles = getHarmoniousStylesXX(100, 100, 10, 'arial', 'random',
  'random', false);\r

  \  ensureSymByType();\r

  \  mButton('download key set', downloadKeySet, table, { fz: 30 });\r

  \  mButton('next 100', () => show100(), table, { fz: 30 });\r

  \  mLinebreak(table);\r

  \  let keys = takeFromTo(IconSet, lastIndex, lastIndex + 100);\r

  \  lastIndex += 100;\r

  \  console.log('JAJAJAJAJ lastIndex', lastIndex);\r

  \  gridLabeled(keys, picLabelStyles);\r

  }"
showActiveMessage: "function showActiveMessage(msg, handler, styles = {}, fade =
  false) {\r

  \  let defStyles = { fz: 22, rounding: 10, vpadding: 12, hpadding: 0, matop:
  50 };\r

  \  styles = mergeOverride(defStyles, styles);\r

  \  if (nundef(styles.fg)) styles.fg = colorIdealText(Session.color);\r

  \  clearFleetingMessage();\r

  \  let d = fleetingMessage(msg, styles, fade);\r

  \  d.onclick = handler;\r

  }"
showAllInnoCards: "function showAllInnoCards(dParent) {\r

  \  Pictures = [];\r

  \  let allKeys = Object.keys(cinno);\r

  \  console.group(allKeys);\r

  \  let dims = calcRowsColsX(allKeys.length);\r

  \  let idx = 0;\r

  \  for (let i = 0; i < dims.rows; i++) {\r

  \    for (let j = 0; j < dims.cols; j++) {\r

  \      if (allKeys.length <= idx) break;\r

  \      let c = cardInnoz(allKeys[idx]); idx += 1;\r

  \      mAppend(dParent, c.div);\r

  \      c.row = i;\r

  \      c.col = j;\r

  \      Pictures.push(c);\r

  \    }\r

  \  }\r

  }"
showAxes: "function showAxes(ctx, axes) {\r

  \  var x0 = axes.x0, w = ctx.canvas.width;\r

  \  var y0 = axes.y0, h = ctx.canvas.height;\r

  \  var xmin = axes.doNegativeX ? 0 : x0;\r

  \  ctx.beginPath();\r

  \  ctx.strokeStyle = \"rgb(128,128,128)\";\r

  \  ctx.moveTo(xmin, y0); ctx.lineTo(w, y0);\r

  \  ctx.moveTo(x0, 0); ctx.lineTo(x0, h);\r

  \  ctx.stroke();\r

  }"
showBadges: "function showBadges(dParent, level, clickHandler) {\r

  \  clearElement(dParent); badges = [];\r

  \  for (let i = 1; i <= level; i++) {\r

  \    addBadge(dParent, i, clickHandler);\r

  \  }\r

  }"
showBadgesX: "function showBadgesX(dParent, level, clickHandler, maxLevel) {\r

  \  clearElement(dParent);\r

  \  badges = [];\r

  \  for (let i = 1; i <= maxLevel + 1; i++) {\r

  \    if (i > level) {\r

  \      let b = addBadge(dParent, i, clickHandler, false);\r

  \      b.live.div.style.opacity = .25;\r

  \      b.achieved = false;\r

  \    } else {\r

  \      let b = addBadge(dParent, i, clickHandler, true);\r

  \      b.achieved = true;\r

  \    }\r

  \  }\r

  }"
showBoat: function showBoat(id) { let ms = UIS[id]; ms.show(); ms.o.weg = false; }
showCard: "function showCard(card, { size = 90, area, hand, layout } = {}) {\r

  \  let d = document.getElementById(area);\r

  \  mStyle(card, { width: size * .66, height: size });\r

  \  if (nundef(layout)) card.style.setProperty('float', 'left');\r

  \  let dHand = isdef(hand) ? d.getElementById(hand)\r

  \    : d.childElementCount >= 1 ? d.lastChild\r

  \      : addDivPosTo(d, 12, 25, 'auto', size, 'px', null);\r

  \  dHand.appendChild(card);\r

  }"
showCards: "function showCards(o, type) {\r

  \  let d2 = iDiv(o);\r

  \  if (nundef(type)) type = isdef(o.type) ? o.type : 'hand';\r

  \  let arr = type == 'deck' ? o.deck.cards() : o.cards;\r

  \  let cont = type == 'deck' ? stdDeckContainer(d2, arr.length) :
  startsWith(type, 'cards') ? stdCardsContainer(d2, arr.length) :
  stdHandContainer(d2, arr.length);\r

  \  let items = arr.map(x => Card52.getItem(x % 52));\r

  \  if (endsWith(type, 'Hidden') || type == 'deck') items.map(x =>
  Card52.turnFaceDown(x, BG_CARD_BACK));\r

  \  items.map(x => mAppend(cont, iDiv(x)));\r

  \  return items;\r

  }"
showCardSimple: "function showCardSimple(card, area) {\r

  \  let hCard = getBounds(mById(area)).height - 30;\r

  \  showCard(card, { size: 80, area: area });\r

  }"
showChatWindow: "function showChatWindow() { let d = mBy('dChatWindow');
  mStyle(d, { display: 'block' }); return d; }"
ShowChessMessage: "function ShowChessMessage(s, ms) {\r

  \  console.log('message:', s);\r

  \  $(\"#GameStatus\").text(s);\r

  \  if (isdef(ms)) setTimeout(() => $(\"#GameStatus\").text(''), ms)\r

  }"
showChildren: "function showChildren(n) {\r

  \  console.log('children:')\r

  \  if (nundef(n.children)) {\r

  \    console.log('NO Children!!!', n)\r

  \  } else if (isList(n.children)) {\r

  \    n.children.map(x => console.log(x));\r

  \  } else {\r

  \    console.log(n.children);\r

  \  }\r

  }"
showCollapsibleContent: "function showCollapsibleContent(ev) {\r

  \  let id = evToClosestId(ev);\r

  \  mBy('pageContent').scrollTo(0, 0);\r

  \  ev.cancelBubble = true;\r

  \  setCurrentPathIndex(firstNumber(id));\r

  }"
showCollection: "function showCollection(coll, idCollection) {\r

  \  if (coll.tbd == 'add' || coll.tbd == 'update') {\r

  \    _clearHand(idCollection, 'hand');\r

  \    let msCollection = UIS[idCollection];\r

  \    let collectionAreaName = getAreaName(idCollection);\r

  \    let els = coll.type == '_obj' ? coll.arr.map(x => x._obj) : coll.arr;\r

  \    if (coll.type == '_obj') {\r

  \      for (const oid of els) {\r

  \        let mobj = getVisual(oid);\r

  \        if (nundef(mobj)) {\r

  \          mobj = makeCard(oid, G.table[oid], idCollection);\r

  \        }\r

  \        if (!_isInHand(oid, idCollection)) {\r

  \          addCardToCollectionArea(oid, idCollection);\r

  \        }\r

  \      }\r

  \      repositionCards(msCollection);\r

  \    }\r

  \  }\r

  }"
showCollections: "function showCollections(pool, oid, keys, cardFunc, areaName)
  {\r

  \  let propName = keys.shift();\r

  \  let collDict = getCollections(pool, oid, propName);\r

  \  if (nundef(collDict)) return;\r

  \  let msArea = getMainArea(areaName);\r

  \  if (!msArea) {\r

  \    return;\r

  \  }\r

  \  for (const key in collDict) {\r

  \    let coll = collDict[key];\r

  \    let idCollection = getCollectionArea(key, msArea);\r

  \    showCollection(coll, idCollection);\r

  \  }\r

  }"
showCorrectLabelSwapping: "function showCorrectLabelSwapping() {\r

  \  for (const p of Pictures) {\r

  \    for (const l of p.letters) {\r

  \      let sw = l.swapInfo;\r

  \      if (isdef(sw)) {\r

  \        iDiv(l).innerHTML = sw.correct.l;\r

  \        if (l.i == p.iLetter) animate(iDiv(l), 'komisch', 2300);\r

  \      }\r

  \    }\r

  \  }\r

  \  DELAY = 3000;\r

  \  return 3000;\r

  }"
showCorrectPictureLabels: function showCorrectPictureLabels(sayit = true) { return 1000; }
showCorrectUis: "function showCorrectUis() {\r

  \  let anim = 'onPulse5';\r

  \  for (const ui of Selected.correctUis) { mClass(ui, anim); }\r

  \  return Selected.correctionDelay;\r

  }"
showCorrectWord: "function showCorrectWord(sayit = true) {\r

  \  let anim = G.spokenFeedback ? 'onPulse' : 'onPulse1';\r

  \  let div = mBy(Goal.id);\r

  \  mClass(div, anim);\r

  \  if (!sayit || !G.spokenFeedback) G.spokenFeedback ? 3000 : 300;\r

  \  let correctionPhrase = isdef(Goal.correctionPhrase) ?
  Goal.correctionPhrase : Goal.label;\r

  \  sayRandomVoice(correctionPhrase);\r

  \  return G.spokenFeedback ? 3000 : 300;\r

  }"
showCorrectWordInTitle: "function showCorrectWordInTitle(sayit = true) {\r

  \  let anim = G.spokenFeedback ? 'onPulse' : 'onPulse1';\r

  \  clearElement(dInstruction);\r

  \  let d1 = mText(`<b>${Goal.label}</b>`, dInstruction, { fz: 36, display:
  'inline-block' });\r

  \  mClass(dInstruction, anim);\r

  \  showFleetingMessage(Goal.label);\r

  \  if (!sayit || !G.spokenFeedback) G.spokenFeedback ? 3000 : 300;\r

  \  let correctionPhrase = isdef(Goal.correctionPhrase) ?
  Goal.correctionPhrase : Goal.label;\r

  \  sayRandomVoice(correctionPhrase);\r

  \  return G.spokenFeedback ? 3000 : 300;\r

  }"
showCorrectWords: "function showCorrectWords(sayit = true) {\r

  \  if (nundef(TOList)) TOList = {};\r

  \  TOList.correctWords = [];\r

  \  let anim = 'onPulse2';\r

  \  let to = 0;\r

  \  let speaking = sayit && G.spokenFeedback;\r

  \  let ms = speaking ? 2000 : 1000;\r

  \  for (const goal of Goal.pics) {\r

  \    TOList.correctWords.push(setTimeout(() => {\r

  \      let div = mBy(goal.id);\r

  \      mClass(div, anim);\r

  \      if (speaking) sayRandomVoice((G.language == 'E' ? 'the ' : ' ') +
  goal.correctionPhrase);\r

  \    }, to));\r

  \    to += ms;\r

  \  }\r

  \  if (!sayit || !G.spokenFeedback) return to;\r

  \  return to + ms;\r

  }"
showCurrent: "function showCurrent(id) { if (isdef(dCurrent) && dCurrent.id ==
  id) { return 0; } else { dCurrent = mBy(id); mStyle(dCurrent, { overflow:
  'hidden' }); show(id); return DELAY_APPEAR } };"
showDeck: "function showDeck(keys, dParent, splay, w, h) {\r

  \  let d = mDiv(dParent);\r

  \  mStyleX(d, { display: 'block', position: 'relative', bg: 'green',
  padding: 25 });\r

  \  let gap = 10;\r

  \  let ovPercent = 20;\r

  \  let overlap = w * ovPercent / 100;\r

  \  let x = y = gap;\r

  \  for (let i = 0; i < keys.length; i++) {\r

  \    let k = keys[i];\r

  \    let c = zInno(k, d);\r

  \    mAppend(d, c.div);\r

  \    mStyleX(c.div, { position: 'absolute', left: x, top: y });\r

  \    c.row = 0;\r

  \    c.col = i;\r

  \    x += overlap;\r

  \    Pictures.push(c);\r

  \  }\r

  \  d.style.width = (x - overlap + w) + 'px';\r

  \  console.log(Pictures[0])\r

  \  console.log(Pictures[0].div)\r

  \  d.style.height = firstNumber(Pictures[0].div.style.height) + 'px';\r

  }"
showElemProps: "function showElemProps(e) { console.log(e.id + '(' +
  getTypeOf(e) + ')' + ': x', e.offsetLeft, 'y', e.offsetTop, 'w',
  e.offsetWidth, 'h', e.offsetHeight, 'bg', e.style.backgroundColor, 'fg',
  e.style.color); }"
showElems: "function showElems(idlist) {\r

  \  for (const fid of idlist) {\r

  \    EID[fid].ms.show();\r

  \  }\r

  }"
showElemSize: "function showElemSize(e) { console.log(e.id + ': x',
  e.offsetLeft, 'y', e.offsetTop, 'w', e.offsetWidth, 'h', e.offsetHeight); }"
showEquation: "function showEquation(words, dParent, idForContainerDiv, sep =
  null, styleContainer = {}, styleWord = {}, styleLetter = {}, styleSep = {},
  colorWhiteSpaceChars = true, preserveColorsBetweenWhiteSpace = true) {\r

  \  if (isEmpty(styleWord)) {\r

  \    let sz = 80;\r

  \    let fg = helleFarbe(G.color);\r

  \    styleWord = {\r

  \      margin: 8, padding: 8, rounding: '50%', w: 'auto', h: sz, display:
  'flex', fg: fg, bg: 'transparent',\r

  \      'align-items': 'center', border: 'transparent', outline: 'none', fz:
  sz, 'justify-content': 'center',\r

  \    };\r

  \  }\r

  \  let dContainer = mDiv(dParent);\r

  \  if (!isEmpty(styleContainer)) mStyleX(dContainer, styleContainer); else
  mClass(dContainer, 'flexWrap');\r

  \  dContainer.id = idForContainerDiv;\r

  \  let inputGroups = [];\r

  \  let charInputs = [];\r

  \  let iWord = 0;\r

  \  let idx = 0;\r

  \  let numWords = words.length;\r

  \  for (const w of words) {\r

  \    let dGroup = mDiv(dContainer);\r

  \    mStyleX(dGroup, styleWord);\r

  \    dGroup.id = idForContainerDiv + '_' + iWord;\r

  \    let g = { dParent: dContainer, word: w, iWord: iWord, div: dGroup,
  oStyle: styleWord, ofg: dGroup.style.color, obg: dGroup.style.backgroundColor
  };\r

  \    inputGroups.push(g);\r

  \    let inputs = [];\r

  \    let iLetter = 0;\r

  \    let wString = w.toString();\r

  \    for (const l of wString) {\r

  \      let dLetter = mDiv(dGroup);\r

  \      if (!isEmpty(styleLetter)) mStyleX(dLetter, styleLetter);\r

  \      dLetter.innerHTML = l;\r

  \      let inp = { group: g, div: dLetter, letter: l, iLetter: iLetter,
  index: idx, oStyle: styleLetter, ofg: dLetter.style.color, obg:
  dLetter.style.backgroundColor };\r

  \      charInputs.push(inp);\r

  \      inputs.push(inp);\r

  \      iLetter += 1; idx += 1;\r

  \    }\r

  \    g.charInputs = inputs;\r

  \    if (iWord < words.length - 1 && isdef(sep)) {\r

  \      let dSep = mDiv(dContainer);\r

  \      dSep.innerHTML = sep;\r

  \      if (isdef(styleSep)) mStyleX(dSep, styleSep);\r

  \    }\r

  \    iWord += 1;\r

  \  }\r

  \  return [inputGroups, charInputs];\r

  }"
showEventList: function showEventList() {
  document.getElementById('events').style.display = null; }
ShowFenPosition: "function ShowFenPosition() {\r

  \  $(\"#currentFenSpan\").text(BoardToFen());\r

  \  let pl = SideChar[brd_side] == 'b' ? 'BLACK (AI)' : 'WHITE (you)';\r

  \  mStyle(dTitle, { align: 'left' });\r

  \  dTitle.innerHTML = `<div
  style='margin-left:78px;width:483px;text-align:center;'>Turn: ${pl}</div>`;\r

  }"
showFleetingMessage: "function showFleetingMessage(msg, dParent, styles = {}, ms
  = 3000, msDelay = 0, fade = true) {\r

  \  clearFleetingMessage();\r

  \  dFleetingMessage = mDiv(dParent);\r

  \  if (msDelay) {\r

  \    TOFleetingMessage = setTimeout(() => fleetingMessage(msg,
  dFleetingMessage, styles, ms, fade), msDelay);\r

  \  } else {\r

  \    TOFleetingMessage = setTimeout(() => fleetingMessage(msg,
  dFleetingMessage, styles, ms, fade), 10);\r

  \  }\r

  }"
showFullObject: "function showFullObject(o, indent = 0, onlySimple = false) {\r

  \  for (const k in o) {\r

  \    if (isSimple(o[k])) console.log(' '.repeat(indent), k, o[k]);\r

  \    else if (!onlySimple) console.log(' '.repeat(indent), k,
  anyString3(o[k]));\r

  \    else {\r

  \      console.log(' '.repeat(indent), k);\r

  \      showFullObject(o[k], indent + 2);\r

  \    }\r

  \  }\r

  }"
showGame: function showGame() {
  document.getElementById('R_d_root').style.display = null; }
showGameConfig: function showGameConfig() {
  document.getElementById('gameConfig').style.display = null; }
showGameTitle: function showGameTitle() { dGameTitle.innerHTML = G.friendly; }
showGlobals: "function showGlobals() {\r

  \  getGlobals();\r

  \  console.log('Globals', Globals)\r

  \  dTable = mBy('dTable');\r

  \  let d = mDiv(dTable);\r

  \  for (const k in Globals) {\r

  \    let d1 = mDiv(d, {}, null, k);\r

  \    let d2 = mDiv(d, {}, null, Globals[k].map(x => x.key).join(','));
  mFlexWrap(d2);\r

  \  }\r

  }"
showGrid: "function showGrid(cards, dParent) {\r

  }"
showHand52: "function showHand52(cards, dParent, splayed = 'left', w, h) {\r

  }"
showHands: "function showHands(oid, propList, cardFunc, areaName) {\r

  }"
showHiddenThumbsUpDown: "function showHiddenThumbsUpDown(sz = 100) {\r

  \  let d = mDiv(dTable, { hmin: sz * 1.5 });\r

  \  mCenterFlex(d);\r

  \  let keys = ['thumbs up', 'thumbs down'];\r

  \  let options = getOptionsMinimalistic(d, null, 300, 100, { bg:
  'transparent', display: 'inline' }, {}, G);\r

  \  let items = Pictures = genItemsFromKeys(keys, options);\r

  \  for (const item of items) {\r

  \    let d1 = makeItemDiv(item, options);\r

  \    mAppend(d, d1);\r

  \    mStyleX(d1.firstChild, { fz: sz, mabottom: 12 });\r

  \    mStyleX(d1, { opacity: 0 });\r

  \  }\r

  }"
showInnoCards: "function showInnoCards(keys, dParent, wCard = 200) {\r

  \  Pictures = [];\r

  \  let dims = calcRowsColsX(keys.length);\r

  \  let idx = 0;\r

  \  for (let i = 0; i < dims.rows; i++) {\r

  \    for (let j = 0; j < dims.cols; j++) {\r

  \      if (keys.length <= idx) break;\r

  \      let c = cardInnoz(keys[idx], wCard); idx += 1;\r

  \      mAppend(dParent, c.div);\r

  \      c.row = i;\r

  \      c.col = j;\r

  \      Pictures.push(c);\r

  \    }\r

  \  }\r

  }"
showInstruction: "function showInstruction(text, cmd, dParent, isSpoken, spoken,
  fz, voice) {\r

  \  clearElement(dParent);\r

  \  let d = mDiv(dParent);\r

  \  mStyleX(d, { margin: 15 })\r

  \  mClass(d, 'flexWrap');\r

  \  let msg = cmd + \" \" + `<b>${text.toUpperCase()}</b>`;\r

  \  if (nundef(fz)) fz = 36;\r

  \  let d1 = mText(msg, d, { fz: fz, display: 'inline-block' });\r

  \  if (isSpoken) {\r

  \    let sym = symbolDict.speaker;\r

  \    let d2 = mText(sym.text, d, {\r

  \      fz: fz + 2, weight: 900, display: 'inline-block',\r

  \      family: sym.family, 'padding-left': 14\r

  \    });\r

  \  }\r

  \  dFeedback = dInstruction = d;\r

  \  spoken = isSpoken ? isdef(spoken) ? spoken : cmd + \" \" + text : null;\r

  \  dInstruction.addEventListener('click', () => aniInstruction(spoken));\r

  \  if (!isSpoken) return;\r

  \  sayRandomVoice(isdef(spoken) ? spoken : (cmd + \" \" + text), null,
  \"david\");\r

  }"
showInstructionX: "function showInstructionX(written, dParent, spoken, { fz,
  voice } = {}) {\r

  \  clearElement(dParent);\r

  \  let d = mDiv(dParent);\r

  \  mStyleX(d, { margin: 15 })\r

  \  mClass(d, 'flexWrap');\r

  \  if (nundef(fz)) fz = 36;\r

  \  let d1 = mText(written, d, { fz: fz, display: 'inline-block' });\r

  \  let sym = symbolDict.speaker;\r

  \  let d2 = mText(sym.text, d, {\r

  \    fz: fz + 2, weight: 900, display: 'inline-block',\r

  \    family: sym.family, 'padding-left': 14\r

  \  });\r

  \  dFeedback = dInstruction = d;\r

  \  dInstruction.addEventListener('click', () => aniInstruction(spoken));\r

  \  if (isdef(spoken)) sayRandomVoice(spoken, spoken, voice);\r

  }"
showJoinConfig: function showJoinConfig() { show('joinConfig'); }
showLabelPercentHintAfter: "function showLabelPercentHintAfter(percent, msecs)
  {\r

  \  let len = Goal.label.length;\r

  \  let sublen = Math.floor(len * percent / 100); let restlen = len -
  sublen;\r

  \  let hintWord = Goal.label.substring(0, sublen);\r

  \  for (let i = 0; i < restlen; i++) hintWord += ' _';\r

  \  hintWord = hintWord.toUpperCase();\r

  \  showFleetingMessage(hintWord, msecs, { fz: 32 });\r

  }"
showLbls: "function showLbls(onClickPictureHandler, ifs = {}, options = {},
  keys, labels) {\r

  \  let items = getLbls(onClickPictureHandler, ifs, options, keys, labels);\r

  \  presentItems(items, dTable, 1);\r

  \  return items;\r

  }"
showLevel: "function showLevel() {\r

  \  dLevel.innerHTML = 'level: ' + (G.level + 1) + '/' + (G.maxLevel + 1);\r

  }"
showLevelComplete: "function showLevelComplete() {\r

  \  if (!skipAnimations) {\r

  \    soundLevelComplete();\r

  \    mClass(mBy('dLevelComplete'), 'aniFadeInOut');\r

  \    show('dLevelComplete');\r

  \    setTimeout(levelStep10, 1500);\r

  \  } else {\r

  \    addBadge(dLeiste, currentLevel);\r

  \    setBackgroundColor();\r

  \    proceedIfNotStepByStep();\r

  \  }\r

  }"
showListOfLists: function showListOfLists(arr) { let s = ''; arr.map(x => { s +=
  '[' + x.toString() + '] ' }); return s; }
showLoader: function showLoader() { mBy('dLoader').style.display = "unset"; }
showLobby: "function showLobby() {\r

  \  document.getElementById('a_d_lobby').style.display = null;\r

  \  if (!USE_SOCKETIO) { document.getElementById('a_d_chat').style.display =
  'none'; }\r

  }"
showLog: function showLog(pl) { let d = LOG[pl]; if (d) show(d); }
showLogin: function showLogin() {
  document.getElementById('a_d_login').style.display = null; }
showMenu: "function showMenu(desc) {\r

  \  let d = mBy('div' + desc);\r

  \  if (!isVisible(d)) {\r

  \    let b = mBy('b' + desc);\r

  \    show(d);\r

  \    d.style.display = 'inline';\r

  \    b.innerHTML = '-' + desc[0];\r

  \  }\r

  }"
showMouse: "function showMouse() {\r

  \  var x = dTable.getElementsByTagName(\"DIV\");\r

  \  if (nundef(x) || nundef(x[0]) || nundef(x[0].prevCursor)) {
  console.log('did NOT hide mouse!'); return; }\r

  \  for (const el of x) {\r

  \    mRemoveClass(el, 'noCursor');\r

  \  }\r

  \  for (const el of x) { el.style.cursor = el.prevCursor; }\r

  \  for (const p of Pictures) {\r

  \    mRemoveClass(iDiv(p), 'noCursor');\r

  \    mClass(iDiv(p), 'frameOnHover'); iDiv(p).style.cursor = 'pointer';\r

  \    for (const ch of iDiv(p).children) ch.style.cursor = 'pointer';\r

  \  }\r

  }"
showMouseAvatar: function showMouseAvatar(username) { show(getAvatar(username)); }
showNodeInfo: "function showNodeInfo(n, title, lst, lstOmit) {\r

  \  if (nundef(title)) title = 'node';\r

  \  let args = [];\r

  \  if (isList(lst)) {\r

  \    for (const prop of lst) {\r

  \      if (isdef(n[prop])) args.push(prop + ': ' + anyString3(n[prop]));\r

  \    }\r

  \  } else {\r

  \    for (const prop in n) {\r

  \      if (lstOmit.includes(prop)) continue;\r

  \      args.push(prop + ': ' + anyString3(n[prop]));\r

  \    }\r

  \  }\r

  \  let s = title + '\\n' + args.join('\\n');\r

  \  console.log(s);\r

  }"
showNumberSequence: "function showNumberSequence(words, dParent,
  idForContainerDiv = 'seqContainer', sep = null, styleContainer = {}, styleWord
  = {}, styleLetter = {}, styleSep = {}, colorWhiteSpaceChars = true,
  preserveColorsBetweenWhiteSpace = true) {\r

  \  if (isEmpty(styleWord)) {\r

  \    let sz = 80;\r

  \    styleWord = {\r

  \      margin: 10, padding: 4, rounding: '50%', w: sz, h: sz, display:
  'flex', fg: 'lime', bg: 'yellow', 'align-items': 'center',\r

  \      border: 'transparent', outline: 'none', fz: sz - 25,
  'justify-content': 'center',\r

  \    };\r

  \  }\r

  \  let dContainer = mDiv(dParent);\r

  \  if (!isEmpty(styleContainer)) mStyleX(dContainer, styleContainer); else
  mClass(dContainer, 'flexWrap');\r

  \  dContainer.id = idForContainerDiv;\r

  \  let inputGroups = [];\r

  \  let charInputs = [];\r

  \  let iWord = 0;\r

  \  let idx = 0;\r

  \  let numWords = words.length;\r

  \  let wheel = getHueWheel(G.color, 40, numWords <= 4 ? 60 : numWords <= 10
  ? 30 : 15, 0);\r

  \  wheel = wheel.map(x => colorHSLBuild(x, 100, 50));\r

  \  wheel = shuffle(wheel);\r

  \  let wheel1 = colorPalShadeX(colorFrom(wheel[0]), numWords);\r

  \  wheel = jsCopy(wheel1);\r

  \  if (G.op == 'plus') wheel.reverse();\r

  \  for (const w of words) {\r

  \    let dGroup = mDiv(dContainer);\r

  \    mStyleX(dGroup, styleWord);\r

  \    let bg = wheel[iWord]; //
  dGroup.style.backgroundColor=randomColorX(G.color,40,60,0,50,50);//'yellow';/\
  /randomColorX(G.color,70,80);\r

  \    dGroup.style.backgroundColor = bg;\r

  \    dGroup.style.color = colorIdealText(bg);\r

  \    dGroup.id = idForContainerDiv + '_' + iWord;\r

  \    let g = { dParent: dContainer, word: w, iWord: iWord, div: dGroup,
  oStyle: styleWord, ofg: dGroup.style.color, obg: dGroup.style.backgroundColor
  };\r

  \    inputGroups.push(g);\r

  \    let inputs = [];\r

  \    let iLetter = 0;\r

  \    let wString = w.toString();\r

  \    for (const l of wString) {\r

  \      let dLetter = mDiv(dGroup);\r

  \      if (!isEmpty(styleLetter)) mStyleX(dLetter, styleLetter);\r

  \      dLetter.innerHTML = l;\r

  \      let inp = { group: g, div: dLetter, letter: l, iLetter: iLetter,
  index: idx, oStyle: styleLetter, ofg: dLetter.style.color, obg:
  dLetter.style.backgroundColor };\r

  \      charInputs.push(inp);\r

  \      inputs.push(inp);\r

  \      iLetter += 1; idx += 1;\r

  \    }\r

  \    g.charInputs = inputs;\r

  \    if (iWord < words.length - 1 && isdef(sep)) {\r

  \      let dSep = mDiv(dContainer);\r

  \      dSep.innerHTML = sep;\r

  \      if (isdef(styleSep)) mStyleX(dSep, styleSep);\r

  \    }\r

  \    iWord += 1;\r

  \  }\r

  \  return [inputGroups, charInputs];\r

  \  return { words: inputGroups, letters: charInputs };\r

  \  return [wi.words, wi.letters];\r

  }"
showObject: "function showObject(o, indent = 0, simple = true, lstShow = null,
  lstOmit = null) {\r

  \  let s = extendedObjectString(o, indent, simple, lstShow, lstOmit);\r

  \  console.log(s);\r

  }"
showPackages: "function showPackages(data, domid = 'OLDCODE') {\r

  \  let d = mBy(domid);\r

  \  if (d) { d.innerHTML = '<pre>' + jsonToYaml(data) + '</pre>'; }\r

  }"
showPicLabel: "function showPicLabel(key, label, area, color = 'blue', x = 0, y
  = 0, sz = 50, gap = 4) {\r

  \  console.log(key, label, area, color, x, y, sz, gap)\r

  \  let dOuter = mCreate('div');\r

  \  let wOuter = sz;\r

  \  let wInner = sz - 2 * gap;\r

  \  mStyle(dOuter, {\r

  \    color: 'black',\r

  \    width: wOuter,\r

  \    left: x,\r

  \    top: y,\r

  \    padding: 0,\r

  \    position: 'absolute',\r

  \    'text-align': 'center',\r

  \    'background-color': randomColor(),\r

  \    display: 'inline'\r

  \  });\r

  \  let dPic = addPictoDiv(key, dOuter, color, wInner);\r

  \  mStyle(dPic, { margin: gap, 'margin-bottom': 1 })\r

  \  let dText = mAppendText(dOuter, label);\r

  \  dText.classList.add('truncate');\r

  \  mStyle(dText, { 'margin-bottom': gap, width: wOuter });\r

  \  area = asElem(area);\r

  \  mPosRel(area);\r

  \  mAppend(area, dOuter);\r

  }"
showPicLabelCentered: "function showPicLabelCentered(key, label, area, color =
  'blue', sz = 50, gap = 4) {\r

  \  let d = showPicLabel(key, label, area, color, 0, 0, sz, gap);\r

  }"
showPics: "function showPics(onClickPictureHandler, ifs = {}, options = {},
  keys, labels) {\r

  \  let items = getPics(onClickPictureHandler, ifs, options, keys, labels);\r

  \  console.log(items);\r

  \  presentItems(items, dTable, options.rows);\r

  \  return items;\r

  }"
showPicsS: "function showPicsS(onClickPictureHandler, ifs = {}, options = {},
  keys, labels) {\r

  \  let items = getPicsS(onClickPictureHandler, ifs, options, keys,
  labels);\r

  \  presentItems(items, dTable, options.rows);\r

  \  return items;\r

  }"
showPictoDiv: "function showPictoDiv(key, area, color = 'blue', x = 0, y = 0, w
  = 50, h = 0) {\r

  \  let d = pictoDiv(key, color, w, h ? h : w);\r

  \  mAppend(area, d);\r

  \  mPos(d, x, y);\r

  \  return d;\r

  }"
showPictoDivCentered: "function showPictoDivCentered(key, area, color = 'blue',
  sz = 50) {\r

  \  let d = pictoDiv(key, color, sz, sz);\r

  \  mAppend(area, d);\r

  \  posCIC(d);\r

  \  return d;\r

  }"
showPictureGrid: "function showPictureGrid(n = 9, dParent, ifs = {}, options =
  {}) {\r

  \  let items = detectItems(n);\r

  \  console.log('item', items[0]);\r

  \  for (let i = 0; i < items.length; i++) {\r

  \    let info = items[i].info;\r

  \    let d = mDiv(dParent, { w: 200, h: 200, bg: 'red' });\r

  \    d.innerHTML = 'hallo';\r

  \    let dpic = mDiv(d, { fz: 100, family: 'emoNoto' });\r

  \    dpic.innerHTML = info.text;\r

  \  }\r

  }"
showPictureHints: "function showPictureHints(items, dParentProp) {\r

  \  for (const item of items) {\r

  \    let d1 = item[dParentProp];\r

  \    mRemoveChildrenFromIndex(d1, 1);\r

  \    let dHint = item.dHint = miPic(item, d1);\r

  \  }\r

  }"
showPictures: "function showPictures(dParent, handler, ifs = {}, options = {},
  keys, labels) {\r

  \  options = getOptionsMinimalistic(dParent, handler, options.w, options.h,
  ifs, options, G);\r

  \  if (nundef(keys)) keys = choose(G.keys, G.numPics);\r

  \  let items = genItemsFromKeys(keys, options);\r

  \  if (isdef(labels)) {\r

  \    options.showLabels = true;\r

  \    for (let i = 0; i < items.length; i++) item[i].label = labels[i %
  labels.length];\r

  \  }\r

  \  let dArea = mDiv(dParent);\r

  \  let rect = myPresent(dArea, items, options);\r

  \  return items;\r

  }"
showPlayer: "function showPlayer(i) {\r

  \  let id;\r

  \  id = getidNum(i); show(id);\r

  \  id = getidSpan(i); show(id);\r

  \  id = getidType(i); show(id);\r

  }"
showPlayerHand: function showPlayerHand(oid, propName, cardFunc, areaName) {
  showCollections(collections, oid, [propName], cardFunc, areaName); }
showPlayerHand_dep: "function showPlayerHand_dep(plid, propName, areaName) {\r

  \  let oPlayer = G.playersAugmented[plid];\r

  \  let oCards = oPlayer[propName];\r

  \  if (isSet(oCards)) oCards = oCards._set;\r

  \  if (!isListOfLiterals(oCards)) { alert('wrong format of cards property: '
  + propName); }\r

  \  let oids = oCards.map(x => x._obj);\r

  \  let idHand = getIdArea(areaName);\r

  \  if (_handChanged(oids, idHand)) {\r

  \    _clearHand(idHand);\r

  \    _showHand(oids, idHand);\r

  \  }\r

  }"
showPlayerHandNew: "function showPlayerHandNew(name, cardArr, areaName) {\r

  \  if (isSet(cardArr)) cardArr = cardArr._set;\r

  \  if (!isListOfLiterals(cardArr)) { alert('wrong format of cards property:
  ' + propName); }\r

  \  let oids = cardArr.map(x => isdef(x._obj) ? x._obj : x);\r

  \  let idHand = getIdArea(areaName);\r

  \  if (_handChanged(oids, idHand)) {\r

  \    _clearHand(idHand, 'hand');\r

  \    _showHand(oids, idHand, 'hand');\r

  \  }\r

  }"
showPlayerStats: "function showPlayerStats(plid, propName, areaName) {\r

  \  let oPlayer = G.playersAugmented[plid];\r

  \  let oStatsVal = oPlayer[propName];\r

  \  let msStats = UIS[getIdArea(areaName)];\r

  }"
showProps: "function showProps(ms) { console.log(ms.id + '(' + getTypeOf(ms) +
  ')' + ': x', ms.x, 'y', ms.y, 'w', ms.w, 'h', ms.h, 'bg', ms.bg, 'fg', ms.fg);
  }"
showRect: "function showRect(s, o) {\r

  \  let r = o.rect;\r

  \  console.log('\\n', s, 'w', Math.round(r.w), '=', Math.round(r.l),
  Math.round(r.r), 'h', Math.round(r.h), '=', Math.round(r.t),
  Math.round(r.b));\r

  }"
showRectReal: "function showRectReal(s, o) {\r

  \  let r = o.rect;\r

  \  console.log('\\n', s, 'w', r.w, '=', r.l, r.r, 'h', r.h, '=', r.t,
  r.b);\r

  }"
showSayHint: "function showSayHint(i) {\r

  \  let [spoken, written] = G.hintFunc(i);\r

  \  if (spoken) sayRandomVoice(spoken);\r

  \  if (written) showFleetingMessage(written, 0, { fz: 40 });\r

  }"
showScore: "function showScore() {\r

  \  if (G.controllerType == 'solitaire') {\r

  \    if (Score.gameChange) showBadgesX(dLeiste, G.level, onClickBadgeX,
  G.maxLevel);\r

  \    let scoreString = 'question: ' + (Score.nTotal + 1) + '/' +
  G.samplesPerGame;\r

  \    if (Score.levelChange) {\r

  \      dScore.innerHTML = scoreString;\r

  \      setBadgeLevel(G.level);\r

  \    } else {\r

  \      setTimeout(() => {\r

  \        dScore.innerHTML = scoreString;\r

  \        setBadgeLevel(G.level);\r

  \      }, 300);\r

  \    }\r

  \  } else {\r

  \    setTimeout(() => { dScore.innerHTML = 'score ' + GC.human.score + ':' +
  GC.ai.score; }, 300);\r

  \  }\r

  }"
showScore_dep: "function showScore_dep(showScoreString = true) {\r

  \  if (G.controllerType == 'solitaire') {\r

  \    if (Score.gameChange) showBadgesX(dLeiste, G.level, onClickBadgeX,
  G.maxlevel);\r

  \    if (showScoreString) scoreString = 'question: ' + (Score.nTotal + 1) +
  '/' + G.samplesPerGame;\r

  \    if (Score.levelChange) {\r

  \      if (showScoreString) dScore.innerHTML = scoreString;\r

  \      setBadgeLevel(G.level);\r

  \    } else {\r

  \      setTimeout(() => {\r

  \        if (showScoreString) dScore.innerHTML = scoreString;\r

  \        setBadgeLevel(G.level);\r

  \      }, 300);\r

  \    }\r

  \  } else {\r

  \    setTimeout(() => { if (showScoreString) dScore.innerHTML = 'score ' +
  GC.human.score + ':' + GC.ai.score; }, 300);\r

  \  }\r

  }"
showServerData: "function showServerData(data, domid = 'SERVERDATA') {\r

  \  let d = mBy(domid);\r

  \  if (d && SHOW_SERVERDATA) { d.innerHTML = '<pre>' + jsonToYaml(data) +
  '</pre>'; }\r

  }"
showSetSizes: "function showSetSizes(nLast, R) {\r

  \  for (const uid in R.uiNodes) {\r

  \    let n = R.uiNodes[uid];\r

  \    if (nundef(n.size)) setSP(n);\r

  \  }\r

  }"
showShield: function showShield() { mBy('dShield').style.display = 'block'; }
showSignatureContent: "function showSignatureContent(ev) {\r

  \  let id = evToClosestId(ev);\r

  \  ev.cancelBubble = true;\r

  \  let ifunc = firstNumber(id);\r

  \  let path = stringAfter(id, '@');\r

  \  let pathEntry = DOC_vault[path];\r

  \  let funcName = pathEntry.funcIndex[ifunc];\r

  \  let funcEntry = pathEntry.funcDict[funcName];\r

  \  let divPath = document.getElementById(pathEntry.idPathContainer);\r

  \  if (!isVisible(divPath)) setCurrentPath(pathEntry.filename);\r

  \  let funcDiv = mBy(funcEntry.idDiv);\r

  \  funcDiv.scrollIntoView(true);\r

  }"
showSingle52: "function showSingle52(dParent, rank, suit, w, h) {\r

  \  let c = card52(rank, suit, w, h);\r

  \  mAppend(dParent, c.div);\r

  \  return c;\r

  }"
showSize: "function showSize(ms) { console.log(ms.id + ': x', ms.x, 'y', ms.y,
  'w', ms.w, 'h', ms.h); }"
showSizes: "function showSizes(nLast, R) {\r

  \  for (const uid in R.uiNodes) {\r

  \    let n = R.uiNodes[uid];\r

  \    if (isdef(n.size) && isdef(n.sizeNeeded)) {\r

  \      console.log(n.uid, 'size', n.size.w, n.size.h, 'measured',
  n.sizeMeasured.w, n.sizeMeasured.h, 'needed', n.sizeNeeded.w,
  n.sizeNeeded.h,);\r

  \    } else {\r

  \      setSP(n);\r

  \      console.log(n.uid, 'size', n.size.w, n.size.h, 'pos', n.pos.x,
  n.pos.y);\r

  \    }\r

  \  }\r

  }"
showSpoken: function showSpoken() { }
showState: "function showState() {\r

  \  console.log('______________', G.friendly);\r

  \  console.log(T.players)\r

  }"
showStats: "function showStats() {\r

  \  if (nundef(Score)) initScore();\r

  \  showGameTitle();\r

  \  showLevel();\r

  \  showScore();\r

  \  Score.levelChange = false;\r

  \  Score.gameChange = false;\r

  }"
showString: "function showString(x, proplist, include = true) {\r

  \  console.log(anyString3(x, 0, proplist, include));\r

  }"
showsub: "function showsub(n) {\r

  \  console.log('sub:')\r

  \  if (nundef(n.sub)) {\r

  \    console.log('NO sub!!!', n)\r

  \  } else if (isList(n.sub)) {\r

  \    n.sub.map(x => console.log(x));\r

  \  } else {\r

  \    console.log(n.sub);\r

  \  }\r

  }"
showSvg: "function showSvg(elem) {\r

  \  elem.setAttribute('style', 'visibility:visible');\r

  }"
showTextHints: "function showTextHints(items, dParentProp, textProp, removeFirst
  = true) {\r

  \  for (const item of items) {\r

  \    let d1 = item[dParentProp];\r

  \    let hint = item[textProp];\r

  \    let dHint = item.dHint = mText(hint, d1);\r

  \  }\r

  }"
showTree: "function showTree(o, childrenKeys = ['sub', 'elm'], plus, minus) {\r

  \  recShowTree(o, 0, childrenKeys, plus, minus);\r

  }"
showTrick: "function showTrick() {\r

  \  let dZone = Zones.table.dData;\r

  \  let d = mDiv(dZone);\r

  \  mStyleX(d, { display: 'flex', position: 'relative' });\r

  \  let zIndex = 1;\r

  \  for (let i = 0; i < T.trick.length; i++) {\r

  \    let c = T.trick[i];\r

  \    let direction = i == 0 ? { x: 0, y: -1 } : { x: 0, y: 1 };\r

  \    let displ = 10;\r

  \    let offset = { x: -35 + direction.x * displ, y: direction.y * displ
  };\r

  \    let d1 = c.div;\r

  \    mAppend(d, d1);\r

  \    mStyleX(d1, { position: 'absolute', left: offset.x, top: offset.y, z:
  zIndex });\r

  \    zIndex += 1;\r

  \  }\r

  }"
showTT: "function showTT(ev) {\r

  \  if (TTMS) {\r

  \    $(TTMS.elem).off('mouseover');\r

  \    console.log('hallo')\r

  \    let d = document.getElementById('tooltip');\r

  \    clearElement(d);\r

  \    let t = tableElem(TTMS.o);\r

  \    d.appendChild(t);\r

  \    $('div#tooltip').css({\r

  \      display: 'inline-block',\r

  \      top: ev.pageY,\r

  \      left: ev.pageX,\r

  \    });\r

  \    TTMS = null;\r

  \  }\r

  }"
showUsernameOnScreen: "function showUsernameOnScreen(isEditable = true) {\r

  \  let uiName = 'spUser';\r

  \  let dUser = mBy(uiName);\r

  \  if (isdef(dUser)) return;\r

  \  dUser = isEditable ? editableUsernameUi(dLineTopLeft) :
  mText(Session.cur_user, dLineTopLeft);\r

  \  dUser.id = uiName;\r

  }"
showWritten: function showWritten(cmd, vocab, dParent, styles) { }
shuffle: function shuffle(arr) { if (isEmpty(arr)) return []; else return
  fisherYates(arr); }
shuffle_children: "function shuffle_children(d) {\r

  \  let arr = Array.from(d.children);\r

  \  shuffle(arr);\r

  \  for (const ch of arr) { mAppend(d, ch); }\r

  }"
shuffleChildren: function shuffleChildren(dParent) { shuffle_children(dParent); }
shuffletest: "function shuffletest(list) {\r

  \  for (let i = 0; i < 100; i++) {\r

  \    shuffle(list);\r

  \    console.log('shuffle: ' + jsCopy(list));\r

  \  }\r

  }"
sidebar_transition_off: "function sidebar_transition_off() {\r

  \  let d = mBy('left_panel');\r

  \  mClass(d, 'notransition');\r

  }"
sidebar_transition_on: "function sidebar_transition_on() {\r

  \  let d = mBy('left_panel');\r

  \  mClass(d, 'alltransition');\r

  }"
sieveLocOids: "function sieveLocOids(R) {\r

  \  if (isEmpty(R.locOids)) return;\r

  \  calcCycles(R);\r

  \  for (const k in R.partitions) {\r

  \    let cycle = R.partitions[k];\r

  \    let max_cycles = cycle.isCycle ? DEFS.cycleLengthAllowed : 1;\r

  \    processLocOids(cycle.oids, max_cycles, cycle.isCycle, R);\r

  \  }\r

  }"
simple_gaussian: "function simple_gaussian(canvas) {\r

  \  var mean = 100;\r

  \  var b = 25;\r

  \  var stdev = 10;\r

  \  let variance = stdev * stdev;\r

  \  var cv = canvas.cv;\r

  \  var cx = canvas.cx;\r

  \  cx.strokeStyle = 'silver';\r

  \  let width_of_rect = cv.width / (4 * b); let w = width_of_rect;\r

  \  for (var j = 0; j < 2 * b; j++) {\r

  \    let x = j - b;\r

  \    var y = mean / Math.E ** (((j - b) ** 2) / (2 * variance));\r

  \    console.log('x', x, 'y', y)\r

  \    cx.rect(j * w + 125, cv.height - y, w, y);\r

  \    cx.stroke();\r

  \  }\r

  }"
simpleColors: "function simpleColors(c = 'powderblue') {\r

  \  let pal = getPalette(c);\r

  \  S.settings.palette = pal;\r

  \  ROOT.children.map(x => UIS[x].setBg(pal[2], true));\r

  \  setCSSVariable('--bgBody', pal[5]);\r

  \  UIS['a_d_header'].setBg(pal[7]);\r

  \  UIS['a_d_action_header'].setBg(pal[3]);\r

  \  UIS['a_d_history_header'].setBg(pal[3]);\r

  \  UIS['a_d_game'].setBg(pal[1]);\r

  \  let c1 = pal[1];\r

  \  setCSSVariable('--bgTabActive', c1);\r

  \  setCSSVariable('--bgTabContent', c1);\r

  \  UIS['a_d_testing'].setBg(pal[2]);\r

  \  UIS['a_d_testing'].children.map(x => { UIS[x].setBg(c1);
  UIS[x].setFg('silver'); });\r

  \  setCSSVariable('--bgButton', pal[0]);\r

  \  setCSSVariable('--fgButton', 'white');\r

  \  setCSSVariable('--bgButtonHover', pal[3]);\r

  \  setCSSVariable('--bgButtonActive', pal[5]);\r

  }"
simpleCompare: "function simpleCompare(o1, o2) {\r

  \  let s1 = object2string(o1);\r

  \  let s2 = object2string(o2);\r

  \  return s1 == s2;\r

  }"
simpleFit: "function simpleFit(text, wmax, hmax, fz) {\r

  \  let sz = { h: 10000 };\r

  \  while (sz.h > hmax && fz > 8) {\r

  \    sz = getSizeWithStyles(text, { w: wmax, fz: fz });\r

  \    fz -= 1;\r

  \  }\r

  \  sz.fz = fz;\r

  \  return sz;\r

  }"
simpleGridToServerData: "function simpleGridToServerData(b1) {\r

  \  let bo1 = {};\r

  \  let fields = bo1.fields = { _set: b1.fields.map(oid => { return { _obj:
  oid }; }) };\r

  \  let edges = null;\r

  \  if (b1.hasEdges) {\r

  \    edges = bo1.edges = { _set: b1.edges.map(oid => { return { _obj: oid };
  }) };\r

  \  }\r

  \  let corners = null;\r

  \  if (b1.hasNodes) {\r

  \    corners = bo1.corners = { _set: b1.corners.map(oid => { return { _obj:
  oid }; }) };\r

  \  }\r

  \  bo1.rows = b1.rows;\r

  \  bo1.cols = b1.mapData[0].length;\r

  \  let obj_type = bo1.obj_type = 'Board';\r

  \  if (this.shape == 'hex') {\r

  \    let maxColIndex = 2 * b1.colarr[b1.imiddleRow] - 1;\r

  \    console.assert(maxColIndex == bo1.cols, 'maxColIndex is NOT
  correct!!!!!!!!', maxColIndex, bo1.cols)\r

  \  }\r

  \  bo1.map = b1.mapData;\r

  \  return bo1;\r

  }"
simpleLayoutForOneChildPosition: "function
  simpleLayoutForOneChildPosition(nBoard, tile, R) {\r

  \  let ch = tile.children[0];\r

  \  let robber = R.uiNodes[ch];\r

  \  let ui = robber.ui;\r

  \  ui.style.position = 'absolute';\r

  \  ui.style.display = 'inline-block';\r

  \  let x = nBoard.size.w / 2 + tile.pos.x - robber.size.w / 2;\r

  \  let y = nBoard.size.h / 2 + tile.pos.y - robber.size.h / 2;\r

  \  ui.style.left = x + 'px';\r

  \  ui.style.top = y + 'px';\r

  \  robber.pos = { x: x, y: y };\r

  \  ui.style.margin = '0px';\r

  }"
simpleLayoutForOneChildSizeNeeded: "function
  simpleLayoutForOneChildSizeNeeded(ch, R) {\r

  \  let nChild = R.uiNodes[ch];\r

  \  let wNeeded = nChild.size.w + 12;\r

  \  let hNeeded = nChild.size.h + 12;\r

  \  return { w: wNeeded, h: hNeeded };\r

  }"
simpleRep: "function simpleRep(val) {\r

  \  if (nundef(val) || val === '') {\r

  \    return '_';\r

  \  } else if (isSimple(val)) return val;\r

  \  else if (isList(val)) {\r

  \    return '[' + val.map(x => simpleRep(x)).join(', ') + ']';\r

  \  } else if (typeof val == 'object') {\r

  \    let s = [];\r

  \    for (const k in val) {\r

  \      if (isEmpty(val[k])) continue;\r

  \      let s1 = simpleRep(val[k]);\r

  \      if (k == '_set') s1 = '{' + s1.substring(1, s1.length - 1) + '}';\r

  \      s.push(s1);\r

  \    }\r

  \    return s.join(', ');\r

  \  }\r

  }"
simpleSizes: "function simpleSizes(wGame = 1000, hGame = 800, wSide = 200) {\r

  \  return;\r

  \  setCSSVariable('--wGame', wGame + 'px');\r

  \  setCSSVariable('--hGame', hGame + 'px');\r

  \  setCSSVariable('--wActions', wSide + 'px');\r

  \  setCSSVariable('--wLog', wSide + 'px');\r

  \  setCSSVariable('--hStatus', 'auto');\r

  \  setCSSVariable('--hTesting', '100%');\r

  }"
simpleSizes_unused: "function simpleSizes_unused(wGame = 1000, hGame = 800,
  wSide = 200) {\r

  \  setCSSVariable('--wGame', wGame + 'px');\r

  \  setCSSVariable('--hGame', hGame + 'px');\r

  \  setCSSVariable('--wActions', wSide + 'px');\r

  \  setCSSVariable('--wLog', wSide + 'px');\r

  \  setCSSVariable('--hStatus', 'auto');\r

  \  setCSSVariable('--hTesting', '100%');\r

  }"
simplest_game_open_for_move_dep: "function simplest_game_open_for_move_dep(obj)
  {\r

  \  for (const k in obj) { if (isdef(Session[k])) copyKeys(obj[k],
  Session[k]); else Session[k] = obj[k]; }\r

  \  Session.cur_table = Session.table;\r

  \  console.assert(isdef(Session.cur_user) && Session.cur_game ==
  Session.table.game && Session.cur_tid == Session.table.id, \"SESSION MISMATCH
  IN GAME_OPEN_FOR_MOVE!!!!!!!!!!!!!!!!!!!!!\");\r

  \  open_game_ui();\r

  \  G = open_game(Session.cur_user, Session.cur_game);\r

  \  G.make_players(Session.table);\r

  \  G.startGame(Session.cur_fen);\r

  }"
simplestPerlenGame: "function simplestPerlenGame() {\r

  \  hide('dMainContent');\r

  \  show('dGameScreen');\r

  \  setTitle('Glasperlenspiel');\r

  \  setSubtitle('logged in as ' + Username);\r

  \  mStyleX(document.body, { opacity: 1 });\r

  \  initTable(null, 2); initSidebar(); initAux(); initScore();\r

  \  ColorThiefObject = new ColorThief();\r

  \  sendStartOrJoinPerlenGame();\r

  }"
simpleWordListFromString: "function simpleWordListFromString(s, sep = [' ']) {\r

  \  let lst = listFromString(s);\r

  \  let res = [];\r

  \  for (const w of lst) {\r

  \    let parts = w.split(sep);\r

  \    parts.map(x => addIf(res, x));\r

  \  }\r

  \  return res;\r

  }"
simplifyFraction: "function simplifyFraction(numerator, denominator) {\r

  \  var gcd = function gcd(a, b) {\r

  \    return b ? gcd(b, a % b) : a;\r

  \  };\r

  \  gcd = gcd(numerator, denominator);\r

  \  return [numerator / gcd, denominator / gcd];\r

  }"
simulateClick: "function simulateClick(elem) {\r

  \  var evt = new MouseEvent('click', { bubbles: true, cancelable: true,
  view: window });\r

  \  var canceled = !elem.dispatchEvent(evt);\r

  }"
single_poly_feature: "function single_poly_feature(f) {\r

  \  if (f.geometry.type == 'MultiPolygon') {\r

  \    let max_area_polygon;\r

  \    let max_area = 0;\r

  \    for (poly in (f.geometry.coordinates)) {\r

  \      let polygon1 = turf.polygon((f.geometry.coordinates)[poly])\r

  \      area = turf.area(polygon1);\r

  \      if (area > max_area) {\r

  \        max_area = area\r

  \        max_area_polygon = polygon1;\r

  \      }\r

  \    }\r

  \    return max_area_polygon;\r

  \  } else return f;\r

  }"
size2hex: "function size2hex(w = 100, h = 0, x = 0, y = 0) {\r

  \  let hexPoints = [{ X: 0.5, Y: 0 }, { X: 1, Y: 0.25 }, { X: 1, Y: 0.75 },
  { X: 0.5, Y: 1 }, { X: 0, Y: 0.75 }, { X: 0, Y: 0.25 }];\r

  \  if (h == 0) {\r

  \    h = (2 * w) / 1.73;\r

  \  }\r

  \  return polyPointsFrom(w, h, x, y, hexPoints);\r

  }"
size2tridown: "function size2tridown(w = 100, h = 0, x = 0, y = 0) {\r

  \  let triPoints = [{ X: 1, Y: 0 }, { X: 0.5, Y: 1 }, { X: 0, Y: 0 }];\r

  \  if (h == 0) { h = w; }\r

  \  return polyPointsFrom(w, h, x, y, triPoints);\r

  }"
size2triup: "function size2triup(w = 100, h = 0, x = 0, y = 0) {\r

  \  let triPoints = [{ X: 0.5, Y: 0 }, { X: 1, Y: 1 }, { X: 0, Y: 1 }];\r

  \  if (h == 0) { h = w; }\r

  \  return polyPointsFrom(w, h, x, y, triPoints);\r

  }"
sizedCard123: function sizedCard123(w, h) { return o => card123(o, w, h); }
sizeToContent: "function sizeToContent(uid) {\r

  \  let n = R.uiNodes[uid];\r

  \  if (nundef(n.children)) return { w: 0, h: 0 }\r

  \  parentPadding = isdef(n.params.paddingAroundChildren) ?
  n.params.paddingAroundChildren : DEFS.defaultPadding;\r

  \  childMargin = isdef(n.params.gapBetweenChildren) ?
  n.params.gapBetweenChildren : DEFS.defaultGap;\r

  \  let or = n.params.orientation;\r

  \  let bl = n.params.baseline;\r

  \  let [y0, wTitle] = calcParentContentYOffsetAndWidth(n, parentPadding);\r

  \  let children = n.children.map(x => R.uiNodes[x]);\r

  \  let axMain, ax2;\r

  \  if (or == 'v') { axMain = 'h'; ax2 = 'w'; } else { axMain = 'w'; ax2 =
  'h'; }\r

  \  let ax2Max = Math.max(...children.map(x => x.size[ax2]));\r

  \  let axMainSum = children.reduce((a, b) => a + (b.size[axMain] || 0),
  0);\r

  \  axMainSum += childMargin * (children.length - 1);\r

  \  let wmax = (or == 'v' ? ax2Max : axMainSum);\r

  \  let xoff = 0;\r

  \  if (wTitle > wmax) xoff = (wTitle - wmax) / 2;\r

  \  let x0 = parentPadding + xoff;\r

  \  let x = x0;\r

  \  let y = y0;\r

  \  let lastChild = R.uiNodes[n.children[n.children.length - 1]];\r

  \  for (const n1 of children) {\r

  \    if (or == 'v') {\r

  \      switch (bl) {\r

  \        case 'start': x = x0; break;\r

  \        case 'end': x = x0 + ax2Max - n1.size[ax2]; break;\r

  \        case 'centered': x = x0 + (ax2Max - n1.size[ax2]) / 2; break;\r

  \        case 'stretch':\r

  \          x = x0;\r

  \          if (n1.size.w < ax2Max) {\r

  \            n1.size.w = ax2Max;\r

  \            n1.ui.style.minWidth = n1.size.w + 'px';\r

  \          }\r

  \          break;\r

  \        default: x = x0 + (ax2Max - n1.size[ax2]) / 2; break;\r

  \      }\r

  \      n1.pos = { x: x, y: y, cx: x + n1.size.w / 2, cy: y + n1.size.h / 2
  };\r

  \      y += n1.size[axMain];\r

  \      if (n1 != lastChild) y += childMargin;\r

  \    } else {\r

  \      switch (bl) {\r

  \        case 'start': y = y0; break;\r

  \        case 'end': y = y0 + ax2Max - n1.size[ax2]; break;\r

  \        case 'centered': y = y0 + (ax2Max - n1.size[ax2]) / 2; break;\r

  \        case 'stretch':\r

  \          y = y0;\r

  \          if (n1.size.h < ax2Max) {\r

  \            n1.size.h = ax2Max;\r

  \            n1.ui.style.minHeight = n1.size.h + 'px';\r

  \          }\r

  \          break;\r

  \        default: y = y0 + (ax2Max - n1.size[ax2]) / 2; break;\r

  \      }\r

  \      n1.pos = { x: x, y: y, cx: x + n1.size.w / 2, cy: y + n1.size.h / 2
  };\r

  \      x += n1.size.w;\r

  \      if (n1 != lastChild) x += childMargin;\r

  \    }\r

  \    n1.ui.style.left = n1.pos.x + 'px';\r

  \    n1.ui.style.top = n1.pos.y + 'px';\r

  \  }\r

  \  let wParent, hParent;\r

  \  if (or == 'h') {\r

  \    wParent = Math.max(wTitle + parentPadding * 2, x + parentPadding);\r

  \    hParent = y0 + ax2Max + parentPadding;\r

  \  } else {\r

  \    wParent = Math.max(wTitle + parentPadding * 2, ax2Max + 2 * x0);\r

  \    hParent = y0 + axMainSum + parentPadding;\r

  \  }\r

  \  return { w: wParent, h: hParent };\r

  }"
skipToLine: "function skipToLine(lines, i, options) {\r

  \  options = convertToList(options);\r

  \  while (i < lines.length) {\r

  \    for (const s of options) {\r

  \      if (lines[i].includes(s)) {\r

  \        return { index: i, option: s };\r

  \      }\r

  \    }\r

  \    i += 1;\r

  \  }\r

  \  return { index: i, option: null };\r

  }"
skype_go_button: "function skype_go_button() {\r

  \  let html = `\r

  \    <button\r

  \      role=\"button\"\r

  \      title=\"Send message\"\r

  \      aria-label=\"Send message\"\r

  \      aria-disabled=\"false\"\r

  \      style=\"\r

  \        position: relative;\r

  \        display: flex;\r

  \        flex-direction: column;\r

  \        flex-grow: 0;\r

  \        flex-shrink: 0;\r

  \        overflow: visible;\r

  \        align-items: center;\r

  \        justify-content: center;\r

  \        app-region: no-drag;\r

  \        background-color: transparent;\r

  \        border-color: transparent;\r

  \        text-align: left;\r

  \        border-width: 0px;\r

  \        height: 44px;\r

  \        width: 44px;\r

  \        padding: 0px;\r

  \        cursor: pointer;\r

  \        border-style: solid;\r

  \      \"\r

  \    >\r

  \      <div\r

  \        role=\"none\"\r

  \        style=\"\r

  \          position: absolute;\r

  \          display: flex;\r

  \          flex-direction: column;\r

  \          flex-grow: 0;\r

  \          flex-shrink: 0;\r

  \          overflow: hidden;\r

  \          align-items: center;\r

  \          background: linear-gradient(135deg, rgb(0, 188, 242), rgb(0, 120,
  212));\r

  \          height: 40px;\r

  \          width: 40px;\r

  \          border-radius: 20px;\r

  \          top: 2px;\r

  \          left: 2px;\r

  \          justify-content: center;\r

  \        \"\r

  \      >\r

  \        <div\r

  \          role=\"none\"\r

  \          aria-hidden=\"true\"\r

  \          style=\"position: relative; display: flex; flex-direction:
  column; flex-grow: 0; flex-shrink: 0; overflow: hidden; align-items: stretch;
  margin-left: 2px\"\r

  \        >\r

  \          <svg width=\"20\" height=\"20\"
  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"#FFFFFF\"
  gradientcolor1=\"#FFFFFF\" gradientcolor2=\"#FFFFFF\">\r

  \            <path\r

  \              d=\"M5.694 12L2.299
  3.272c-.236-.608.356-1.189.942-.982l.093.04 18 9a.75.75 0 01.097
  1.283l-.097.058-18 9c-.583.291-1.217-.245-1.065-.847l.03-.096L5.694 12 2.299
  3.272 5.694 12zM4.402 4.54l2.61 6.71h6.627a.75.75 0 01.743.648l.007.102a.75.75
  0 01-.649.743l-.101.007H7.01l-2.609 6.71L19.322 12 4.401 4.54z\"\r

  \            ></path>\r

  \          </svg>\r

  \        </div>\r

  \      </div>\r

  \    </button>\r

  \  `;\r

  \  return mCreateFrom(html);\r

  }"
skype_start: "function skype_start() {\r

  \  let d = mBy('dSkype'); mClear(d);\r

  \  mStyle(d, { h: 'calc( 100vh - 56px )', 'overflow-y': 'hidden' });\r

  \  let d0 = mDiv(d);\r

  \  let [dl, dr] = mColFlex(d, [1, 3]);\r

  \  mStyle(dl, { border: '1px dotted silver' }); mStyle(dr, { border: '1px
  dotted silver' });\r

  \  mDiv(dl, {}, null, img_html('skypeTopLeft.jpg'));\r

  \  let d1 = mDiv(dl);\r

  \  DIBOA.skype.divRight = dr;\r

  \  DIBOA.skype.divLeft = dl;\r

  \  let contacts = DIBOA.skype.contacts = generate_skype_contacts(25);
  console.log(contacts)\r

  \  for (const o of contacts) {\r

  \    let dc = mDiv(d1, { rounding: 12, hpadding: 6, vpadding: 6, margin: 4,
  gap: 12, overflow: 'hidden' }, null, null, 'skypecontact');\r

  \    mFlex(dc);\r

  \    o.div = dc;\r

  \    dc.onclick = () => { S.skype_contact = toggleSelection(o,
  S.skype_contact, 'skypecontact_active'); show_skype_contact(dr) };\r

  \    let [sz] = [40];\r

  \    let dimg = get_skype_phone_icon(o.color);\r

  \    mAppend(dc, dimg);\r

  \    let dmiddle = mDiv(dc, { flex: 8 });\r

  \    let dnum = mDiv(dmiddle, { fz: 14, fg: 'black' }, null,
  `<div>${o.num}</div>`);\r

  \    let dmsg = mDiv(dmiddle, { fz: 11, fg: 'grey' }, null,
  `<div>${o.msg}</div>`);\r

  \    let ddate = mDiv(dc, { flex: 1, fz: 11, fg: 'grey' }, null,
  `<div>${format_date(o.date)}</div>`);\r

  \  }\r

  }"
sleepX: "function sleepX(msecs) {\r

  \  //#region doc \r

  \  //#endregion \r

  \  return new Promise(r => setTimeout(r, msecs));\r

  }"
slowlyTurnFaceDown: "function slowlyTurnFaceDown(pic, secs = 5, removeBg =
  false) {\r

  \  let ui = iDiv(pic);\r

  \  for (const p1 of ui.children) {\r

  \    p1.style.transition = `opacity ${secs}s ease-in-out`;\r

  \    p1.style.opacity = 0;\r

  \  }\r

  \  if (removeBg) {\r

  \    ui.style.transition = `background-color ${secs}s ease-in-out`;\r

  \    ui.style.backgroundColor = 'dimgray';\r

  \  }\r

  \  pic.isFaceUp = false;\r

  }"
small_hands: "function small_hands(o) {\r

  \  let [fen, uplayer] = [o.fen, o.fen.turn[0]];\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    pl.hand.sort();\r

  \    pl.hand = arrTake(pl.hand, 7);\r

  \  }\r

  }"
snail: "function snail(p, o, d) {\r

  \  if (o.length == 0) return;\r

  \  testHelpers(p, o);\r

  \  o[0].setPos(p.x, p.y);\r

  \  n = o.length;\r

  \  let step = 1;\r

  \  let k = 1;\r

  \  while (true) {\r

  \    for (i = 0; i < step; i++) {\r

  \      if (k < n) {\r

  \        p = mup(o[k], p, d);\r

  \        k += 1;\r

  \      } else return;\r

  \    }\r

  \    for (i = 0; i < step; i++) {\r

  \      if (k < n) {\r

  \        p = mri(o[k], p, d);\r

  \        k += 1;\r

  \      } else return;\r

  \    }\r

  \    step += 1;\r

  \    for (i = 0; i < step; i++) {\r

  \      if (k < n) {\r

  \        p = mdo(o[k], p, d);\r

  \        k += 1;\r

  \      } else return;\r

  \    }\r

  \    for (i = 0; i < step; i++) {\r

  \      if (k < n) {\r

  \        p = mle(o[k], p, d);\r

  \        k += 1;\r

  \      } else return;\r

  \    }\r

  \    step += 1;\r

  \  }\r

  }"
socketEmitChat: "function socketEmitChat(msg = '') {\r

  \  if (!USE_SOCKETIO) return;\r

  \  let text = msg + getInputValue('chat');\r

  \  if (!isEmpty(text)) { socket.emit('chat', text); }\r

  }"
socketEmitMessage: "function socketEmitMessage(msg) {\r

  \  if (!USE_SOCKETIO) return;\r

  \  if (isDict(msg)) msg = JSON.stringify(msg);\r

  \  socket.emit('message', msg);\r

  }"
solve: "function solve(board) {\r

  \  let updated = true, solved = false\r

  \  while (updated && !solved) {\r

  \    updated = one_value_cell_constraint(board)\r

  \    solved = is_solved(board)\r

  \  }\r

  \  if (!solved) {\r

  \    board = backtrack_based(board)\r

  \    solved = is_solved(board)\r

  \  }\r

  \  return board\r

  }"
someFunction: "function someFunction() {\r

  \  testHelpers('hhhhhhhhhhhhhhhhhhhhhhhhhhh');\r

  }"
someVisualExists: function someVisualExists(oid) { return
  firstCond(oid2ids[oid], x => x[0] == 'd' || x[0] == 'm'); }
sort_cards: "function sort_cards(hand, bySuit = true, suits = 'CDHS', byRank =
  true, rankstr = '23456789TJQKA') {\r

  \  if (bySuit && byRank) {\r

  \    let buckets = arrBuckets(hand, x => x[1], suits);\r

  \    for (const b of buckets) { sort_cards(b.list, false, null, true,
  rankstr); }\r

  \    hand.length = 0; buckets.map(x => x.list.map(y => hand.push(y)));\r

  \  } else if (bySuit) hand.sort((a, b) => suits.indexOf(a[1]) -
  suits.indexOf(b[1]));\r

  \  else if (byRank) hand.sort((a, b) => rankstr.indexOf(a[0]) -
  rankstr.indexOf(b[0]));\r

  \  return hand;\r

  }"
sort_cards_orig: "function sort_cards_orig(hand, bysuit = true, byrank = true)
  {\r

  \  let ranked = hand.map(x => ({ x: x, r: x[0], s: x[1] }));\r

  \  let rankstr = 'A23456789TJQK';\r

  \  if (bysuit && byrank) {\r

  \    sortByFunc(ranked, x => 3 * x.s.charCodeAt(0) + 2 *
  rankstr.indexOf(x.r));\r

  \  } else if (bysuit) {\r

  \    sortByFunc(ranked, x => x.s.charCodeAt(0));\r

  \  } else if (byrank) {\r

  \    sortByFunc(ranked, x => rankstr.indexOf(x.r));\r

  \  }\r

  \  return ranked.map(x => x.x);\r

  }"
sortBy: "function sortBy(arr, key) { arr.sort((a, b) => (a[key] < b[key] ? -1 :
  1)); return arr; }"
sortByDescending: "function sortByDescending(arr, key) { arr.sort((a, b) =>
  (a[key] > b[key] ? -1 : 1)); return arr; }"
sortByFunc: "function sortByFunc(arr, func) { arr.sort((a, b) => (func(a) <
  func(b) ? -1 : 1)); return arr; }"
sortByFuncDescending: "function sortByFuncDescending(arr, func) { arr.sort((a,
  b) => (func(a) > func(b) ? -1 : 1)); return arr; }"
sortByRank: "function sortByRank(ckeys, rankstr = '23456789TJQKA') {\r

  \  let ranks = toLetters(rankstr);\r

  \  ckeys.sort((a, b) => ranks.indexOf(a[0]) - ranks.indexOf(b[0]));\r

  \  return ckeys;\r

  }"
sortCardItemsByRank: "function sortCardItemsByRank(items, rankstr =
  '23456789TJQKA') {\r

  \  let ranks = toLetters(rankstr);\r

  \  items.sort((a, b) => ranks.indexOf(a.key[0]) -
  ranks.indexOf(b.key[0]));\r

  \  return items;\r

  }"
sortCardItemsBySuit: "function sortCardItemsBySuit(items, suitstr = 'CDSH') {\r

  \  let ranks = toLetters(suitstr);\r

  \  items.sort((a, b) => ranks.indexOf(a.key[1]) -
  ranks.indexOf(b.key[1]));\r

  \  return items;\r

  }"
sortCardItemsToSequence: "function sortCardItemsToSequence(items, rankstr =
  '23456789TJQKA', jolly_allowed = 1) {\r

  \  let ranks = toLetters(rankstr);\r

  \  let n = items.length;\r

  \  let jollies = items.filter(x => is_joker(x));\r

  \  if (jollies.length > jolly_allowed) { return null; }\r

  \  let no_jolly = items.filter(x => !is_joker(x));\r

  \  let sorted = sortCardItemsByRank(no_jolly, rankstr);\r

  \  let partial_sequences = [], seq = [sorted[0]], first, second;\r

  \  for (let i = 0; i < sorted.length - 1; i++) {\r

  \    first = sorted[i];\r

  \    second = sorted[i + 1];\r

  \    diff = second.irank - first.irank;\r

  \    if (diff == 1) { seq.push(second); }\r

  \    else {\r

  \      partial_sequences.push({ seq: seq, len: seq.length, diff_to_next:
  diff });\r

  \      seq = [second];\r

  \    }\r

  \  }\r

  \  diff = sorted[0].irank - (sorted[sorted.length - 1].irank -
  rankstr.length)\r

  \  if (!isEmpty(seq)) {\r

  \    partial_sequences.push({ seq: seq, len: seq.length, diff_to_next: diff
  });\r

  \  } else {\r

  \    arrLast(partial_sequences).diff_to_next = diff;\r

  \  }\r

  \  let i_max_diff = partial_sequences.findIndex(x => x.diff_to_next ==
  Math.max(...partial_sequences.map(x => x.diff_to_next)));\r

  \  let max_diff = partial_sequences[i_max_diff].diff_to_next;\r

  \  let istart = (i_max_diff + 1) % partial_sequences.length;\r

  \  let final_sequence = [];\r

  \  let jollies_needed = 0;\r

  \  let len = partial_sequences.length;\r

  \  let ij = 0;\r

  \  for (let i = 0; i < len; i++) {\r

  \    let index = (i + istart) % len;\r

  \    let list = partial_sequences[index].seq;\r

  \    final_sequence = final_sequence.concat(list);\r

  \    let nj = partial_sequences[index].diff_to_next - 1;\r

  \    if (i < len - 1) {\r

  \      for (let j = 0; j < nj; j++) { final_sequence.push(jollies[ij++]);
  }\r

  \      jollies_needed += nj;\r

  \    }\r

  \  }\r

  \  for (let i = 0; i < final_sequence.length; i++) { items[i] =
  final_sequence[i]; }\r

  \  return jollies_needed;\r

  }"
sortCaseInsensitive: "function sortCaseInsensitive(list) {\r

  \  list.sort((a, b) => { return
  a.toLowerCase().localeCompare(b.toLowerCase()); });\r

  \  return list;\r

  }"
sortClassKeys: "function sortClassKeys(di) {\r

  \  let classes = dict2list(di.cla, 'key');\r

  \  let classesWithoutExtends = classes.filter(x => !x.code.includes('
  extends '));\r

  \  let keys = sortCaseInsensitive(classesWithoutExtends.map(x => x.key));\r

  \  let dinew = {};\r

  \  for (const el of keys) { dinew[el] = di.cla[el]; }\r

  \  let classesWithExtends = classes.filter(x => x.code.includes(' extends
  '));\r

  \  let MAX = 150, i = 0;\r

  \  console.log('starting class loop')\r

  \  while (!isEmpty(classesWithExtends)) {\r

  \    if (++i > MAX) { console.log(\"WRONG!!!\"); return []; }\r

  \    let o = classesWithExtends.find(x => {\r

  \      let ext = firstWordAfter(x.code, 'extends', true).trim();\r

  \      if (nundef(di.cla[ext])) return true;\r

  \      return isdef(dinew[ext]);\r

  \    });\r

  \    if (isdef(o)) { dinew[o.key] = o; removeInPlace(classesWithExtends, o);
  }\r

  \  }\r

  \  return Object.keys(dinew);\r

  }"
sortConstKeys: "function sortConstKeys(di) {\r

  \  let tbd = dict2list(di.const, 'key');\r

  \  let donelist = [];\r

  \  tbd = sortBy(tbd, x => x.code.length);\r

  \  let dinew = {};\r

  \  let MAX = 3000, i1 = 0, i2 = 0, i3 = 0;\r

  \  console.log('starting const loop');\r

  \  console.log('const keys', tbd.length);\r

  \  while (!isEmpty(tbd)) {\r

  \    if (++i1 > MAX) { console.log(\"WRONG!!!\"); return donelist; }\r

  \    let o = null;\r

  \    i2 = 0;\r

  \    for (const c of tbd) {\r

  \      if (++i2 > MAX) { console.log(\"WRONG!!!\"); return donelist; }\r

  \      i3 = 0;\r

  \      let ok = true;\r

  \      for (const c1 of tbd) {\r

  \        if (++i3 > MAX) { console.log(\"WRONG!!!\"); return donelist; }\r

  \        if (c1 == c) continue;\r

  \        if (c.code.includes(c1.key)) ok = false;\r

  \      }\r

  \      if (ok) { o = c; break; }\r

  \    }\r

  \    if (isdef(o)) { donelist.push(o); dinew[o.key] = o; removeInPlace(tbd,
  o); }\r

  \  }\r

  \  return donelist;\r

  }"
sortKeys: "function sortKeys(o) {\r

  \  if (Array.isArray(o)) {\r

  \    return o.map(sortKeys);\r

  \  } else if (isObject(o)) {\r

  \    return Object\r

  \      .keys(o)\r

  \      .sort()\r

  \      .reduce(function (a, k) {\r

  \        a[k] = sortKeys(o[k]);\r

  \        return a;\r

  \      }, {});\r

  \  }\r

  \  return o;\r

  }"
"sortKeys ": "function sortKeys (o) {\r

  \  if (Array.isArray(o)) {\r

  \    return o.map(sortKeys); \r

  \  } else if (isObject(o)) {\r

  \    return Object\r

  \      .keys(o)\r

  \      .sort()\r

  \      .reduce(function (a, k) {\r

  \        a[k] = sortKeys(o[k]);\r

  \        return a;\r

  \      }, {});\r

  \  }\r

  \  return o;\r

  }"
sortKeysNonRecursive: "function sortKeysNonRecursive(o) {\r

  \  if (Array.isArray(o)) {\r

  \    return o.map(sortKeysNonRecursive);\r

  \  } else if (isObject(o)) {\r

  \    return Object\r

  \      .keys(o)\r

  \      .sort()\r

  \      .reduce(function (a, k) {\r

  \        a[k] = o[k];\r

  \        return a;\r

  \      }, {});\r

  \  }\r

  \  return o;\r

  }"
sortKeysNonRecursiveDescending: "function sortKeysNonRecursiveDescending(o) {\r

  \  if (Array.isArray(o)) {\r

  \    return o.map(sortKeysNonRecursiveDescending);\r

  \  } else if (isObject(o)) {\r

  \    return Object\r

  \      .keys(o)\r

  \      .reverse()\r

  \      .reduce(function (a, k) {\r

  \        a[k] = o[k];\r

  \        return a;\r

  \      }, {});\r

  \  }\r

  \  return o;\r

  }"
sortNumbers: function sortNumbers(ilist) { ilist.sort(function (a, b) { return a
  - b }); return ilist; }
Sound: "function Sound(src) {\r

  \  this.snd = document.createElement(\"audio\");\r

  \  this.snd.src = src;\r

  \  this.play = function () {\r

  \    this.snd.play();\r

  \  }\r

  }"
soundsSimilar: "function soundsSimilar(w1, w2, lang) {\r

  \  w1 = convertTimesAndNumbersToWords(w1);\r

  \  w2 = convertTimesAndNumbersToWords(w2);\r

  \  const syllableRegex =
  /[^aeiouy]*[aeiouy]+(?:[^aeiouy]*$|[^aeiouy](?=[^aeiouy]))?/gi;\r

  \  function syllabify(words) {\r

  \    return words.match(syllableRegex);\r

  \  }\r

  \  let a1 = syllabify(w1);\r

  \  let a2 = syllabify(w2);\r

  \  if (!a1) a1 = [w1];\r

  \  if (!a2) a2 = [w2];\r

  \  if (lang == 'D' && isdef(germanNumbers[a1]) && germanNumbers[a1] ==
  germanNumbers[a2]) return true;\r

  \  if (a1.length != a2.length) return false;\r

  \  let SUPER_WEAK_SIMILARTY = false;\r

  \  if (SUPER_WEAK_SIMILARTY) {\r

  \    for (let i = 0; i < a1.length; i++) {\r

  \      let s1 = a1[i];\r

  \      let s2 = a2[i];\r

  \      if (s1 == s2) return true;\r

  \      let x1 = stringAfterLeadingConsonants(s1);\r

  \      let x2 = stringAfterLeadingConsonants(s2);\r

  \      if (lang == 'E' && 'ou'.includes(x1) && 'ou'.includes(x2) &&
  x1.substring(1) == x2.substring(1)) return true;\r

  \      if (lang == 'E' && 'oa'.includes(x1) && 'ao'.includes(x2) &&
  x1.substring(1) == x2.substring(1)) return true;\r

  \      if (lang == 'E' && x1.replace('ee', 'i') == x2.replace('ee', 'i'))
  return true;\r

  \      if (lang == 'E' && x1.replace('ea', 'ai') == x2.replace('ea', 'ai'))
  return true;\r

  \      if (lang == 'E' && x1.replace('au', 'o') == x2.replace('au', 'o'))
  return true;\r

  \    }\r

  \  } else {\r

  \    for (let i = 0; i < a1.length; i++) {\r

  \      let yesItsAMatch = false;\r

  \      let s1 = a1[i];\r

  \      let s2 = a2[i];\r

  \      if (s1 == s2) yesItsAMatch = true;\r

  \      let x1 = stringAfterLeadingConsonants(s1);\r

  \      let x2 = stringAfterLeadingConsonants(s2);\r

  \      if (x1 == x2) yesItsAMatch = true;\r

  \      if (lang == 'E' && 'ou'.includes(x1) && 'ou'.includes(x2) &&
  x1.substring(1) == x2.substring(1)) yesItsAMatch = true;\r

  \      if (lang == 'E' && 'oa'.includes(x1) && 'ao'.includes(x2) &&
  x1.substring(1) == x2.substring(1)) yesItsAMatch = true;\r

  \      if (lang == 'E' && x1.replace('ee', 'i') == x2.replace('ee', 'i'))
  yesItsAMatch = true;\r

  \      if (lang == 'E' && x1.replace('ea', 'ai') == x2.replace('ea', 'ai'))
  yesItsAMatch = true;\r

  \      if (lang == 'E' && x1.replace('au', 'o') == x2.replace('au', 'o'))
  yesItsAMatch = true;\r

  \      if (!yesItsAMatch) return false;\r

  \    }\r

  \    return true;\r

  \  }\r

  \  return false;\r

  }"
specAndDOM: "function specAndDOM(callbacks = []) {\r

  \  flags.specAndDOM = false;\r

  \  initSETTINGS();\r

  \  initPageHeader();\r

  \  initTABLES();\r

  \  initDom();\r

  \  presentSpecAndCode();\r

  \  let hasStructure = false;\r

  \  if (S.settings.userStructures) hasStructure = initSTRUCTURES();\r

  \  if (!hasStructure && S.settings.boardDetection) {\r

  \    detectBoard(G.table, 'a_d_game');\r

  \    timit.showTime('*** board end ***')\r

  \  }\r

  \  if (!hasStructure && S.settings.deckDetection) {\r

  \    detectDecks(G.table, 'a_d_game');\r

  \  }\r

  \  openTabTesting(S.settings.openTab);\r

  \  if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));\r

  }"
specialTableElem: "function specialTableElem(o, keys) {\r

  \  let t = document.createElement('table');\r

  \  t.classList.add('tttable');\r

  \  let s = '';\r

  \  for (const k in o) {\r

  \    if (isdef(keys) && !keys.includes(k)) continue;\r

  \    s += '<tr><th>' + k + '</th><td>';\r

  \    let val = o[k];\r

  \    let sval = null;\r

  \    if (isListOf_Obj(val)) {\r

  \      sval = `<div class='obj' onmouseenter='highlightContentIds(this);'
  onmouseleave='unhighlightContentIds(this);'>${val.map(x => !x ? '_' :
  x._obj).toString()}</div>`;\r

  \    } else if (val && isDict(val) && '_obj' in val) {\r

  \      sval = `<button
  onclick='onClickListOfObj(this);'>${val._obj.toString()}</button>`;\r

  \    }\r

  \    if (!sval) sval = isSet(val) ? empty(val._set) ? '{ }' : simpleRep(val)
  : isDict(val) ? specialTreee2(val, 4) : simpleRep(val);\r

  \    s += sval + '</td>';\r

  \  }\r

  \  t.innerHTML = s;\r

  \  return t;\r

  }"
specialTreee2: "function specialTreee2(o) {\r

  \  let s = '<table class=\"tttable up10\">';\r

  \  for (const k in o) {\r

  \    s += '<tr><th>' + k + '</th><td>';\r

  \    let val = o[k];\r

  \    let sval = null;\r

  \    if (isListOf_Obj(val)) sval = `<button
  onclick='onClickListOfObj(this);'>${val.map(x => !x ? '_' :
  x._obj).toString()}</button>`;\r

  \    else if (val && isDict(val) && '_obj' in val) sval = `<button
  onclick='onClickListOfObj(this);'>${val._obj.toString()}</button>`;\r

  \    if (!sval) sval = isSet(val) ? empty(val._set) ? '{ }' : simpleRep(val)
  : isDict(val) ? specialTreee2(val) : simpleRep(val);\r

  \    s += sval + '</td>';\r

  \  }\r

  \  s += '</table>';\r

  \  return s;\r

  }"
speech00: "function speech00(lang) {\r

  \  if (typeof (webkitSpeechRecognition) != \"function\") { alert(\"Unable to
  use the Speech Recognition API\"); }\r

  \  recognition = new webkitSpeechRecognition();\r

  \  recognition.continuous = true;\r

  \  recognition.interimResults = true;\r

  \  recognition.maxAlternatives = 5;\r

  \  recognition.lang = isEnglish(lang) ? 'en-US' : 'de-DE';\r

  \  addErrorHandler();\r

  \  addStartHandler();\r

  \  addEndHandler();\r

  \  addResultHandler();\r

  }"
speechEngineGo: "function speechEngineGo(lang, matchingWords) {\r

  \  words = matchingWords;\r

  \  grammar = '#JSGF V1.0; grammar colors; public <color> = ' + words.join('
  | ') + ' ;'\r

  \  recognition = new SpeechRecognition();\r

  \  speechRecognitionList = new SpeechGrammarList();\r

  \  speechRecognitionList.addFromString(grammar, 1);\r

  \  recognition.grammars = speechRecognitionList;\r

  \  recognition.continuous = false;\r

  \  recognition.lang = isEnglish(lang) ? 'en-US' : 'de-DE'; //'en-US';\r

  \  recognition.interimResults = false;\r

  \  recognition.maxAlternatives = 1;\r

  \  recognition.onresult = function (event) {\r

  \    let word = event.results[0][0].transcript;\r

  \    resultMessage.textContent = 'Result received: ' + word + '.';\r

  \    console.log('Confidence: ' + event.results[0][0].confidence);\r

  \    recognition.stop();\r

  \    let b = mBy('bStart');\r

  \    b.innerHTML = 'NEXT';\r

  \    show('bStart');\r

  \  }\r

  \  recognition.onspeechend = function () {\r

  \    console.log('onSpeechEnd happened!')\r

  \    recognition.stop();\r

  \  }\r

  \  recognition.onnomatch = function (event) {\r

  \    resultMessage.textContent = \"I didn't recognise that word! - try
  again\";\r

  \    recognition.stop();\r

  \  }\r

  \  recognition.onerror = function (event) {\r

  \    resultMessage.textContent = 'Error occurred in recognition: ' +
  event.error;\r

  \    recognition.stop();\r

  \  }\r

  \  document.body.onclick = function () {\r

  \    recognition.start();\r

  \    console.log('Ready to receive a color command.');\r

  \  }\r

  }"
splayout: "function splayout(elems, dParent, w, h, x, y, overlap = 20, splay =
  'right') {\r

  \  function splayRight(elems, d, x, y, overlap) {\r

  \    for (const c of elems) {\r

  \      mAppend(d, c);\r

  \      mStyle(c, { position: 'absolute', left: x, top: y });\r

  \      x += overlap;\r

  \    }\r

  \    return [x, y];\r

  \  }\r

  \  function splayLeft(elems, d, x, y, overlap) {\r

  \    x += (elems.length - 2) * overlap;\r

  \    let xLast = x;\r

  \    for (const c of elems) {\r

  \      mAppend(d, c);\r

  \      mStyle(c, { position: 'absolute', left: x, top: y });\r

  \      x -= overlap;\r

  \    }\r

  \    return [xLast, y];\r

  \  }\r

  \  function splayDown(elems, d, x, y, overlap) {\r

  \    for (const c of elems) {\r

  \      mAppend(d, c);\r

  \      mStyle(c, { position: 'absolute', left: x, top: y });\r

  \      y += overlap;\r

  \    }\r

  \    return [x, y];\r

  \  }\r

  \  function splayUp(elems, d, x, y, overlap) {\r

  \    y += (elems.length - 1) * overlap;\r

  \    let yLast = y;\r

  \    for (const c of elems) {\r

  \      mAppend(d, c);\r

  \      mStyle(c, { position: 'absolute', left: x, top: y });\r

  \      y -= overlap;\r

  \    }\r

  \    return [x, yLast];\r

  \  }\r

  \  if (isEmpty(elems)) return { w: 0, h: 0 };\r

  \  mStyle(dParent, { display: 'block', position: 'relative' });\r

  \  [x, y] = (eval('splay' + capitalize(splay)))(elems, dParent, x, y,
  overlap);\r

  \  let isHorizontal = splay == 'right' || splay == 'left';\r

  \  let sz = { w: (isHorizontal ? (x - overlap + w) : w), h: (isHorizontal ?
  h : (y - overlap + h)) };\r

  \  return sz;\r

  }"
splitAtAnyOf: "function splitAtAnyOf(s, sep) {\r

  \  let arr = [], w = '';\r

  \  for (let i = 0; i < s.length; i++) {\r

  \    let ch = s[i];\r

  \    if (sep.includes(ch)) {\r

  \      if (!isEmpty(w)) arr.push(w);\r

  \      w = '';\r

  \    } else {\r

  \      w += ch;\r

  \    }\r

  \  }\r

  \  if (!isEmpty(w)) arr.push(w);\r

  \  return arr;\r

  }"
splitAtWhiteSpace: function splitAtWhiteSpace(s) { return s.split(/[-/ ,]+/); }
splitIntoNumbersAndWords: "function splitIntoNumbersAndWords(s) {\r

  \  let arr = [], i = 0;\r

  \  while (i < s.length) {\r

  \    let ch = s[i];\r

  \    let w = '';\r

  \    if (isDigit(ch)) while (i < s.length && isDigit(ch)) { w += ch; i++; ch
  = s[i]; }\r

  \    else if (isLetter(ch)) while (i < s.length && isLetter(ch)) { w += ch;
  i++; ch = s[i]; }\r

  \    else { i++; continue; }\r

  \    arr.push(w);\r

  \  }\r

  \  return arr;\r

  }"
spotit: "function spotit() {\r

  \  function setup(players, options) {\r

  \    let fen = { players: {}, plorder: jsCopy(players), turn: [players[0]],
  stage: 'init', phase: '' };\r

  \    for (const plname of players) {\r

  \      fen.players[plname] = {\r

  \        score: 0, name: plname, color: get_user_color(plname),\r

  \      };\r

  \    }\r

  \    fen.items = spotit_item_fen(options);\r

  \    if (nundef(options.mode)) options.mode = 'multi';\r

  \    return fen;\r

  \  }\r

  \  function check_gameover() {\r

  \    for (const uname of Z.plorder) {\r

  \      let cond = get_player_score(uname) >= Z.options.winning_score;\r

  \      if (cond) { Z.fen.winners = [uname]; return Z.fen.winners; }\r

  \    }\r

  \    return false;\r

  \  }\r

  \  function state_info(dParent) { spotit_state(dParent); }\r

  \  function present(dParent) { spotit_present(dParent); }\r

  \  function stats(dParent) { spotit_stats(dParent); }\r

  \  function activate_ui() { spotit_activate(); }\r

  \  return { setup, activate_ui, check_gameover, present, state_info, stats
  };\r

  }"
spotit_activate: "function spotit_activate() {\r

  \  let [stage, uplayer, host, plorder, fen] = [Z.stage, Z.uplayer, Z.host,
  Z.plorder, Z.fen];\r

  \  if (stage == 'move' && uplayer == host && get_player_score(host) >= 1)
  {\r

  \    let bots = plorder.filter(x => fen.players[x].playmode == 'bot');\r

  \    if (isEmpty(bots)) return;\r

  \    let bot = rChoose(bots);\r

  \    TO.main = setTimeout(() => spotit_move(bot, true), rNumber(2000,
  9000));\r

  \  }\r

  }"
spotit_card: "function spotit_card(info, dParent, cardStyles, onClickSym) {\r

  \  Card.sz = 300;\r

  \  copyKeys({ w: Card.sz, h: Card.sz }, cardStyles);\r

  \  let card = cRound(dParent, cardStyles, info.id);\r

  \  addKeys(info, card);\r

  \  card.faceUp = true;\r

  \  let zipped = [];\r

  \  for (let i = 0; i < card.keys.length; i++) {\r

  \    zipped.push({ key: card.keys[i], scale: card.scales[i] });\r

  \  }\r

  \  card.pattern = fillColarr(card.colarr, zipped);\r

  \  let symStyles = { sz: Card.sz / (card.rows + 1), fg: 'random', hmargin:
  10, vmargin: 6, cursor: 'pointer' };\r

  \  let syms = [];\r

  \  mRowsX(iDiv(card), card.pattern, symStyles, { 'justify-content': 'center'
  }, { 'justify-content': 'center' }, syms);\r

  \  for (let i = 0; i < info.keys.length; i++) {\r

  \    let key = card.keys[i];\r

  \    let sym = syms[i];\r

  \    card.live[key] = sym;\r

  \    sym.setAttribute('key', key);\r

  \    sym.onclick = ev => onClickSym(ev, key);\r

  \  }\r

  \  return card;\r

  }"
spotit_check_endcondition: "function spotit_check_endcondition() {\r

  \  let players = get_values(Session.cur_players);\r

  \  let winners = players.filter(x => x.score >= 2).map(x => x.name);\r

  \  return winners;\r

  }"
spotit_check_gameover: "function spotit_check_gameover(z) {\r

  \  for (const uname of z.plorder) {\r

  \    let cond = get_player_score(uname) >= z.options.winning_score;\r

  \    if (cond) { z.fen.winners = [uname]; return z.fen.winners; }\r

  \  }\r

  \  return false;\r

  }"
spotit_clear_score: "function spotit_clear_score() {\r

  \  assertion(isdef(Z.notes), 'Z.notes not defined');\r

  \  Z.notes = {};\r

  }"
spotit_create_sample: "function spotit_create_sample(numCards, numSyms, vocab,
  lang, min_scale, max_scale) {\r

  \  lang = valf(lang, 'E');\r

  \  let [rows, cols, colarr] = calc_syms(numSyms);\r

  \  let perCard = arrSum(colarr);\r

  \  let nShared = (numCards * (numCards - 1)) / 2;\r

  \  let nUnique = perCard - numCards + 1;\r

  \  let numKeysNeeded = nShared + numCards * nUnique;\r

  \  let nMin = numKeysNeeded + 3;\r

  \  let keypool = setKeys({ nMin: nMin, lang: valf(lang, 'E'), key:
  valf(vocab, 'animals'), keySets: KeySets, filterFunc: (_, x) => !x.includes('
  ') });\r

  \  let keys = choose(keypool, numKeysNeeded);\r

  \  let dupls = keys.slice(0, nShared);\r

  \  let uniqs = keys.slice(nShared);\r

  \  let infos = [];\r

  \  for (let i = 0; i < numCards; i++) {\r

  \    let keylist = uniqs.slice(i * nUnique, (i + 1) * nUnique);\r

  \    let info = { id: getUID(), shares: {}, keys: keylist, rows: rows, cols:
  cols, colarr: colarr, num_syms: perCard };\r

  \    infos.push(info);\r

  \  }\r

  \  let iShared = 0;\r

  \  for (let i = 0; i < numCards; i++) {\r

  \    for (let j = i + 1; j < numCards; j++) {\r

  \      let c1 = infos[i];\r

  \      let c2 = infos[j];\r

  \      let dupl = dupls[iShared++];\r

  \      c1.keys.push(dupl);\r

  \      c1.shares[c2.id] = dupl;\r

  \      c2.shares[c1.id] = dupl;\r

  \      c2.keys.push(dupl);\r

  \    }\r

  \  }\r

  \  for (const info of infos) { shuffle(info.keys); }\r

  \  for (const info of infos) {\r

  \    info.scales = info.keys.map(x => chooseRandom([.5, .75, 1, 1.2]));\r

  \  }\r

  \  for (const info of infos) {\r

  \    let zipped = [];\r

  \    for (let i = 0; i < info.keys.length; i++) {\r

  \      zipped.push({ key: info.keys[i], scale: info.scales[i] });\r

  \    }\r

  \    info.pattern = fillColarr(info.colarr, zipped);\r

  \  }\r

  \  return infos;\r

  }"
spotit_deal: "function spotit_deal(numCards, rows, cols, vocab, lang, min_scale,
  max_scale, fen) {\r

  \  lang = valf(lang, 'E');\r

  \  let colarr = _calc_hex_col_array(rows, cols);\r

  \  if (rows == 3 && cols == 1) { colarr = [1, 3, 1]; }\r

  \  else if (rows == 2 && cols == 1) { colarr = [1, 2]; }\r

  \  else if (rows == 4 && cols == 1) { rows = 3; colarr = [2, 3, 1]; }\r

  \  else if (rows == 5 && cols == 1) { rows = 4; cols = 1; colarr = [1, 3, 3,
  1]; }\r

  \  else if (rows == 5 && cols == 3) { rows = 5; cols = 1; colarr = [1, 3, 4,
  3, 1]; }\r

  \  else if (rows == 6 && cols == 2) { rows = 5.5; colarr = [2, 4, 5, 4, 2];
  }\r

  \  let perCard = arrSum(colarr);\r

  \  let nShared = (numCards * (numCards - 1)) / 2;\r

  \  let nUnique = perCard - numCards + 1;\r

  \  let numKeysNeeded = nShared + numCards * nUnique;\r

  \  let nMin = numKeysNeeded + 3;\r

  \  let keypool = setKeys({ nMin: nMin, lang: valf(lang, 'E'), key:
  valf(vocab, 'animals'), keySets: KeySets, filterFunc: (_, x) => !x.includes('
  ') });\r

  \  let keys = choose(keypool, numKeysNeeded);\r

  \  let dupls = keys.slice(0, nShared);\r

  \  let uniqs = keys.slice(nShared);\r

  \  let infos = [];\r

  \  for (let i = 0; i < numCards; i++) {\r

  \    let keylist = uniqs.slice(i * nUnique, (i + 1) * nUnique);\r

  \    let info = { id: getUID(), shares: {}, keys: keylist, rows: rows, cols:
  cols, colarr: colarr, num_syms: perCard };\r

  \    infos.push(info);\r

  \  }\r

  \  let iShared = 0;\r

  \  for (let i = 0; i < numCards; i++) {\r

  \    for (let j = i + 1; j < numCards; j++) {\r

  \      let c1 = infos[i];\r

  \      let c2 = infos[j];\r

  \      let dupl = dupls[iShared++];\r

  \      c1.keys.push(dupl);\r

  \      c1.shares[c2.id] = dupl;\r

  \      c2.shares[c1.id] = dupl;\r

  \      c2.keys.push(dupl);\r

  \    }\r

  \  }\r

  \  for (const info of infos) { shuffle(info.keys); }\r

  \  for (const info of infos) {\r

  \    info.scales = info.keys.map(x => randomNumber(min_scale * 100,
  max_scale * 100) / 100);\r

  \  }\r

  \  if (isdef(fen)) {\r

  \    let ks_for_cards = fen.split(',');\r

  \    for (let i = 0; i < infos.length; i++) {\r

  \      let info = infos[i];\r

  \      let ks_list = ks_for_cards[i].split(' ');\r

  \      info.keys = ks_list.map(x => stringBefore(x, ':'));\r

  \      info.scales = ks_list.map(x => stringAfter(x, ':')).map(x =>
  Number(x));\r

  \    }\r

  \  }\r

  \  let items = [];\r

  \  for (const info of infos) {\r

  \    let item = spotit_card(info, dTable, { margin: 20 },
  spotit_interact);\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
spotit_evaluate: "function spotit_evaluate() {\r

  \  if (!canAct()) return;\r

  \  uiActivated = false; clearTimeouts();\r

  \  IsAnswerCorrect = Selected.isCorrect;\r

  \  update_my_score(IsAnswerCorrect ? 1 : 0);\r

  \  let me = Session.cur_me;\r

  \  if (me.score >= Session.winning_score) me.player_status = 'done';\r

  \  let delay = show_feedback(IsAnswerCorrect);\r

  \  setTimeout(() => {\r

  \    in_game_open_prompt_off();\r

  \    clear_table_events();\r

  \    send_move();\r

  \  }, delay);\r

  }"
spotit_fail: function spotit_fail() { spotit_move(G, U.name, false); }
spotit_fen: "function spotit_fen() {\r

  \  let me = Session.cur_players[Session.cur_user];\r

  \  let items = Session.items;\r

  \  let fen = items.map(x => x.keys.join(' ')).join(',');\r

  \  let item_fens = [];\r

  \  for (const item of items) {\r

  \    let arr = arrFlatten(item.pattern);\r

  \    let ifen = arr.map(x => `${x.key}:${x.scale}`).join(' ');\r

  \    item_fens.push(ifen);\r

  \  }\r

  \  fen = item_fens.join(',');\r

  \  me.state = fen;\r

  }"
spotit_find_shared: "function spotit_find_shared(card, keyClicked) {\r

  \  let success = false, othercard = null;\r

  \  for (const c of Z.cards) {\r

  \    if (c == card) continue;\r

  \    if (c.keys.includes(keyClicked)) { success = true; othercard = c; }\r

  \  }\r

  \  return [success, othercard];\r

  }"
spotit_get_shared_symbols: "function spotit_get_shared_symbols() {\r

  \  let result = [];\r

  \  for (const item of Session.items) {\r

  \    for (const id in item.shares) {\r

  \      let k = item.shares[id];\r

  \      let ui = iGetl(item, k);\r

  \      result.push(ui);\r

  \    }\r

  \  }\r

  \  return result;\r

  }"
spotit_interact: "function spotit_interact(ev, key) {\r

  \  ev.cancelBubble = true;\r

  \  if (!uiActivated) { console.log('ui NOT activated'); return; }\r

  \  let keyClicked = evToProp(ev, 'key');\r

  \  let id = evToId(ev);\r

  \  if (isdef(keyClicked) && isdef(Items[id])) {\r

  \    let item = Items[id];\r

  \    let dsym = ev.target;\r

  \    let card = Items[id];\r

  \    let [success, othercard] = spotit_find_shared(card, keyClicked);\r

  \    spotit_move(Z.uplayer, success);\r

  \  }\r

  }"
spotit_item_fen: "function spotit_item_fen(options) {\r

  \  let o = {\r

  \    num_cards: valf(options.num_cards, 2),\r

  \    num_symbols: options.adaptive == 'yes' ? 14 : valf(options.num_symbols,
  7),\r

  \    vocab: valf(options.vocab, 'lifePlus'),\r

  \    lang: 'E',\r

  \    min_scale: valf(options.min_scale, 0.75),\r

  \    max_scale: valf(options.max_scale, 1.25),\r

  \  };\r

  \  let items = spotit_create_sample(o.num_cards, o.num_symbols, o.vocab,
  o.lang, o.min_scale, o.max_scale);\r

  \  let item_fens = [];\r

  \  for (const item of items) {\r

  \    let arr = arrFlatten(item.pattern);\r

  \    let ifen = arr.map(x => `${x.key}:${x.scale}`).join(' ');\r

  \    item_fens.push(ifen);\r

  \  }\r

  \  let res = item_fens.join(',');\r

  \  return res;\r

  }"
spotit_move: "function spotit_move(uplayer, success) {\r

  \  if (success) {\r

  \    inc_player_score(uplayer);\r

  \    assertion(get_player_score(uplayer) >= 1, 'player score should be >=
  1');\r

  \    Z.fen.items = spotit_item_fen(Z.options);\r

  \    Z.state = { score: get_player_score(uplayer) };\r

  \    take_turn_spotit();\r

  \  } else {\r

  \    let d = mShield(dTable, { bg: '#000000aa', fg: 'red', fz: 60, align:
  'center' });\r

  \    d.innerHTML = 'NOPE!!! try again!';\r

  \    TO.spotit_penalty = setTimeout(() => d.remove(), 2000);\r

  \  }\r

  }"
spotit_parse_fen: "function spotit_parse_fen() {\r\n}"
spotit_populate_settings: "function spotit_populate_settings(dParent) {\r

  \  Session.game_options.game = {};\r

  \  let poss = DB.games[Session.cur_game].options;\r

  \  if (nundef(poss)) return;\r

  \  for (const p in poss) {\r

  \    let key = p;\r

  \    let val = poss[p];\r

  \    if (isString(val)) {\r

  \      let list = val.split(',');\r

  \      let fs = mRadioGroup(dParent, {}, `d_${key}`, key);\r

  \      let checkfirst = true;\r

  \      for (const v of list) {\r

  \        let d = mRadio(v, isNumber(v) ? Number(v) : v, fs, { cursor:
  'pointer' }, null, key);\r

  \        if (checkfirst) {\r

  \          let inp = d.firstChild;\r

  \          inp.setAttribute('checked', true);\r

  \          checkfirst = false;\r

  \        }\r

  \      }\r

  \      measure_fieldset(fs);\r

  \    } else if (val === true || val === false) {\r

  \      console.log('should make a checkbox for', key);\r

  \    }\r

  \  }\r

  }"
spotit_present: "function spotit_present(dParent) {\r

  \  let [fen, ui, stage, uplayer] = [Z.fen, UI, Z.stage, Z.uplayer];\r

  \  let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent, 1,
  0);\r

  \  spotit_read_all_scores();\r

  \  let dt = dOpenTable; clearElement(dt); mCenterFlex(dt);\r

  \  spotit_stats(dt);\r

  \  mLinebreak(dt, 10);\r

  \  let ks_for_cards = fen.items.split(',');\r

  \  let numCards = ks_for_cards.length;\r

  \  let items = Z.items = [];\r

  \  Items = [];\r

  \  let i = 0;\r

  \  for (const s of ks_for_cards) {\r

  \    let ks_list = s.split(' ');\r

  \    let item = {};\r

  \    item.keys = ks_list.map(x => stringBefore(x, ':'));\r

  \    item.scales = ks_list.map(x => stringAfter(x, ':')).map(x =>
  Number(x));\r

  \    item.index = i; i++;\r

  \    let n = item.numSyms = item.keys.length;\r

  \    let [rows, cols, colarr] = calc_syms(item.numSyms);\r

  \    item.colarr = colarr;\r

  \    item.rows = rows;\r

  \    items.push(item);\r

  \  }\r

  \  Z.cards = [];\r

  \  let is_adaptive = Z.options.adaptive == 'yes';\r

  \  let nsyms = is_adaptive ? cal_num_syms_adaptive() :
  Z.options.num_symbols;\r

  \  for (const item of items) {\r

  \    if (is_adaptive) { modify_item_for_adaptive(item, items, nsyms); }\r

  \    let card = spotit_card(item, dt, { margin: 20, padding: 10 },
  spotit_interact);\r

  \    Z.cards.push(card);\r

  \    if (Z.stage == 'init') {\r

  \      face_down(card, GREEN, 'food');\r

  \    }\r

  \  }\r

  \  mLinebreak(dt, 10);\r

  }"
spotit_read_all_scores: "function spotit_read_all_scores() {\r

  \  if (nundef(Z.playerdata)) {\r

  \    Z.playerdata = [];\r

  \    for (const pl in Z.fen.players) {\r

  \      Z.playerdata.push({\r

  \        name: pl,\r

  \        state: { score: 0 },\r

  \      });\r

  \    }\r

  \  }\r

  \  for (const pldata of Z.playerdata) {\r

  \    let plname = pldata.name;\r

  \    let state = pldata.state;\r

  \    let score = !isEmpty(state) ? state.score : 0;\r

  \    let fenscore = lookupSet(Z.fen, ['players', plname, 'score'], score);\r

  \    Z.fen.players[plname].score = Math.max(fenscore, score);\r

  \  }\r

  }"
spotit_setup: "function spotit_setup(players) {\r

  \  Card.sz = 200;\r

  \  let fen = { cards: ['ASr', 'QHb'], players: {}, step: 0, plorder:
  jsCopy(players), turn: jsCopy(players) };\r

  \  let expected = {};\r

  \  for (const uname of players) {\r

  \    fen.players[uname] = { score: 0 };\r

  \    expected[uname] = { step: 0, type: 'move' }\r

  \  }\r

  \  return { fen: fen, expected: expected };\r

  }"
spotit_start: function spotit_start() { startgame('spotit', ['amanda', 'felix']); }
spotit_state: "function spotit_state(dParent) {\r

  \  let user_html = get_user_pic_html(Z.uplayer, 30);\r

  \  let msg = Z.stage == 'init' ? `getting ready...` : `player:
  ${user_html}`;\r

  \  dParent.innerHTML = `Round ${Z.round}:&nbsp;${msg} `;\r

  }"
spotit_stats: "function spotit_stats(d) {\r

  \  let players = Z.fen.players;\r

  \  let d1 = mDiv(d, { display: 'flex', 'justify-content': 'center',
  'align-items': 'space-evenly' });\r

  \  for (const plname of get_present_order()) {\r

  \    let pl = players[plname];\r

  \    let onturn = Z.turn.includes(plname);\r

  \    let sz = 50;\r

  \    let bcolor = plname == Z.uplayer ? 'lime' : 'silver';\r

  \    let border = pl.playmode == 'bot' ? `double 5px ${bcolor}` : `solid 5px
  ${bcolor}`;\r

  \    let rounding = pl.playmode == 'bot' ? '0px' : '50%';\r

  \    let d2 = mDiv(d1, { margin: 4, align: 'center' }, null, `<img
  src='../base/assets/images/${plname}.jpg'
  style=\"border-radius:${rounding};display:block;border:${border};box-sizing:b\
  order-box\" class='img_person' width=${sz}
  height=${sz}>${get_player_score(plname)}`);\r

  \  }\r

  }"
spotit_success: function spotit_success() { spotit_move(G, U.name, true); }
spotit_test1: "function spotit_test1(g, dParent, uname) {\r

  \  console.log('from server:', g, dParent, uname);\r

  \  spotit_present(g, dParent, uname)\r

  }"
spotitCard: "function spotitCard(info, dParent, cardStyles, onClickSym) {\r

  \  let styles = copyKeys({ w: Card.sz, h: Card.sz }, cardStyles);\r

  \  let card = cRound(dParent, cardStyles, info.id);\r

  \  addKeys(info, card);\r

  \  let d = iDiv(card);\r

  \  card.pattern = fillColarr(card.colarr, card.keys);\r

  \  let symStyles = { sz: Card.sz / (card.rows + 1), fg: 'random', hmargin:
  8, vmargin: 4, cursor: 'pointer' };\r

  \  let syms = [];\r

  \  mRows(iDiv(card), card.pattern, symStyles, { 'justify-content': 'center'
  }, { 'justify-content': 'center' }, syms);\r

  \  for (let i = 0; i < info.keys.length; i++) {\r

  \    let key = card.keys[i];\r

  \    let sym = syms[i];\r

  \    card.live[key] = sym;\r

  \    sym.setAttribute('key', key);\r

  \    sym.onclick = onClickSym;\r

  \  }\r

  \  return card;\r

  }"
spotitDeal: "function spotitDeal(rows, cols, numCards, setName) {\r

  \  let colarr = _calc_hex_col_array(rows, cols);\r

  \  let perCard = arrSum(colarr);\r

  \  let nShared = (numCards * (numCards - 1)) / 2;\r

  \  let nUnique = perCard - numCards + 1;\r

  \  let keys = choose(oneWordKeys(KeySets[setName]), nShared + numCards *
  nUnique);\r

  \  let dupls = keys.slice(0, nShared);\r

  \  let uniqs = keys.slice(nShared);\r

  \  let infos = [];\r

  \  for (let i = 0; i < numCards; i++) {\r

  \    let keylist = uniqs.slice(i * nUnique, i * nUnique + nUnique);\r

  \    let info = { id: getUID(), shares: {}, keys: keylist, rows: rows, cols:
  cols, colarr: colarr };\r

  \    infos.push(info);\r

  \  }\r

  \  let iShared = 0;\r

  \  for (let i = 0; i < numCards; i++) {\r

  \    for (let j = i + 1; j < numCards; j++) {\r

  \      let c1 = infos[i];\r

  \      let c2 = infos[j];\r

  \      let dupl = dupls[iShared++];\r

  \      c1.keys.push(dupl);\r

  \      c1.shares[c2.id] = dupl;\r

  \      c2.shares[c1.id] = dupl;\r

  \      c2.keys.push(dupl);\r

  \    }\r

  \  }\r

  \  for (const info of infos) { shuffle(info.keys); }\r

  \  return infos;\r

  }"
spotitFindCardSharingSymbol: "function spotitFindCardSharingSymbol(card, key)
  {\r

  \  let id = firstCondDict(card.shares, x => x == key);\r

  \  return Items[id];\r

  }"
spotitFindSymbol: function spotitFindSymbol(card, key) { let k =
  firstCondDictKey(card.live, x => x == key); return card.live[k]; }
spotitOnClickSymbol: "function spotitOnClickSymbol(ev) {\r

  \  let keyClicked = evToProp(ev, 'key');\r

  \  let id = evToId(ev);\r

  \  if (isdef(keyClicked) && isdef(Items[id])) {\r

  \    let item = Items[id];\r

  \    console.log('clicked key', keyClicked, 'of card', id, item);\r

  \    if (Object.values(item.shares).includes(keyClicked)) {\r

  \      console.log('success!!!');\r

  \      let otherCard = spotitFindCardSharingSymbol(item, keyClicked);\r

  \      let cardSymbol = ev.target;\r

  \      let otherSymbol = spotitFindSymbol(otherCard, keyClicked);\r

  \      Selected = { success: true, feedbackUI: [cardSymbol, otherSymbol]
  };\r

  \    } else {\r

  \      console.log('fail!!!!!!!!');\r

  \      let cardSymbol = ev.target;\r

  \      Selected = { success: false, feedbackUI: [cardSymbol] };\r

  \    }\r

  \  }\r

  }"
spread_hand: "function spread_hand(path, ov) {\r

  \  let hand = lookup(UI, path.split('.'));\r

  \  assertion(hand, 'hand does NOT exist', path);\r

  \  if (hand.ctype != 'hand') return;\r

  \  if (isEmpty(hand.items)) return;\r

  \  let card = hand.items[0];\r

  \  if (nundef(ov)) ov = card.ov;\r

  \  if (hand.ov == ov) return;\r

  \  hand.ov = ov;\r

  \  let cont = hand.cardcontainer;\r

  \  let items = hand.items;\r

  \  mContainerSplay(cont, hand.splay, card.w, card.h, items.length, ov *
  card.w);\r

  }"
Sprite: "function Sprite(scene, imageFile, width, height) {\r

  \  this.canvas = scene.canvas;\r

  \  this.context = this.canvas.getContext(\"2d\");\r

  \  this.image = new Image();\r

  \  this.image.src = imageFile;\r

  \  this.animation = false;\r

  \  this.width = width;\r

  \  this.height = height;\r

  \  this.cHeight = parseInt(this.canvas.height);\r

  \  this.cWidth = parseInt(this.canvas.width);\r

  \  this.x = 200;\r

  \  this.y = 200;\r

  \  this.dx = 10;\r

  \  this.dy = 0;\r

  \  this.imgAngle = 0;\r

  \  this.moveAngle = 0;\r

  \  this.speed = 10;\r

  \  this.camera = false;\r

  \  this.setPosition = function (x, y) {\r

  \    this.x = x;\r

  \    this.y = y;\r

  \  }\r

  \  this.setX = function (nx) { this.x = nx; }\r

  \  this.setY = function (ny) { this.y = ny; }\r

  \  this.setChangeX = function (ndx) { this.dx = ndx; }\r

  \  this.setChangeY = function (ndy) { this.dx = ndx; }\r

  \  this.changeXby = function (tdx) { this.x += tdx };\r

  \  this.changeYby = function (tdy) { this.y += tdy };\r

  \  this.draw = function () {\r

  \    ctx = this.context;\r

  \    ctx.save();\r

  \    if (this.camera) { ctx.translate(this.x - this.camera.cameraOffsetX,
  this.y - this.camera.cameraOffsetY); }\r

  \    else { ctx.translate(this.x, this.y); }\r

  \    ctx.rotate(this.imgAngle);\r

  \    if (this.animation != false) {\r

  \      this.animation.drawFrame(ctx);\r

  \    }\r

  \    else {\r

  \      ctx.drawImage(this.image,\r

  \        0 - (this.width / 2),\r

  \        0 - (this.height / 2),\r

  \        this.width, this.height);\r

  \    }\r

  \    ctx.restore();\r

  \  }\r

  \  this.update = function () {\r

  \    this.x += this.dx;\r

  \    this.y += this.dy;\r

  \    this.checkBounds();\r

  \    this.draw();\r

  \  }\r

  \  this.checkBounds = function () {\r

  \    camX = 0;\r

  \    camY = 0;\r

  \    if (this.camera) { camX = this.camera.cameraOffsetX; camY =
  this.camera.cameraOffsetY; }\r

  \    rightBorder = this.cWidth + camX;\r

  \    leftBorder = camX;\r

  \    topBorder = camY;\r

  \    bottomBorder = this.cHeight + camY;\r

  \    if (this.x > rightBorder) {\r

  \      this.x = leftBorder;\r

  \    }\r

  \    if (this.y > bottomBorder) {\r

  \      this.y = topBorder;\r

  \    }\r

  \    if (this.x < leftBorder) {\r

  \      this.x = rightBorder;\r

  \    }\r

  \    if (this.y < topBorder) {\r

  \      this.y = bottomBorder;\r

  \    }\r

  \  }\r

  \  this.loadAnimation = function (imgWidth, imgHeight, cellWidth,
  cellHeight) {\r

  \    this.animation = new Animation(this.image, imgWidth, imgHeight,
  cellWidth, cellHeight);\r

  \    this.animation.setup();\r

  \  }\r

  \  this.generateAnimationCycles = function (slicingFlag, framesArray) {\r

  \    cWidth = this.animation.cellWidth;\r

  \    cHeight = this.animation.cellHeight;\r

  \    iWidth = this.animation.imgWidth;\r

  \    iHeight = this.animation.imgHeight;\r

  \    numCycles = 0;\r

  \    nextStartingFrame = 0;\r

  \    if (typeof framesArray == \"number\" || typeof slicingFlag ==
  \"undefined\") {\r

  \      if (slicingFlag == SINGLE_COLUMN) { numCycles = (iHeight / cHeight) /
  framesArray; }\r

  \      else if (typeof slicingFlag == \"undefined\") { numCycles = (iHeight
  / cHeight); framesArray = iWidth / cWidth; }\r

  \      else { numCycles = (iWidth / cWidth) / framesArray; }\r

  \      for (i = 0; i < numCycles; i++) {\r

  \        cycleName = \"cycle\" + (i + 1);\r

  \        this.specifyCycle(cycleName, i * framesArray, framesArray);\r

  \      }\r

  \    }\r

  \    else {\r

  \      numCycles = framesArray.length;\r

  \      for (i = 0; i < numCycles; i++) {\r

  \        cycleName = \"cycle\" + (i + 1);\r

  \        this.specifyCycle(cycleName, nextStartingFrame, framesArray[i]);\r

  \        nextStartingFrame += framesArray[i];\r

  \      }\r

  \    }\r

  \    this.setCurrentCycle(\"cycle1\");\r

  \  }\r

  \  this.renameCycles = function (cycleNames) {
  this.animation.renameCycles(cycleNames); }\r

  \  this.specifyCycle = function (cycleName, startingCell, frames) {
  this.animation.addCycle(cycleName, startingCell, frames); }\r

  \  this.specifyState = function (stateName, cellName) {
  this.animation.addCycle(stateName, cellName, 1); }\r

  \  this.setCurrentCycle = function (cycleName) {
  this.animation.setCycle(cycleName); }\r

  \  this.pauseAnimation = function () { this.animation.pause(); }\r

  \  this.playAnimation = function () { this.animation.play(); }\r

  \  this.resetAnimation = function () { this.animation.reset(); }\r

  \  this.setAnimationSpeed = function (speed) {
  this.animation.setAnimationSpeed(speed); }\r

  \  this.calcVector = function () {\r

  \    this.dx = this.speed * Math.cos(this.moveAngle);\r

  \    this.dy = this.speed * Math.sin(this.moveAngle);\r

  \  }\r

  \  this.setSpeed = function (speed) {\r

  \    this.speed = speed;\r

  \    this.calcVector();\r

  \  }\r

  \  this.changeSpeedBy = function (diff) {\r

  \    this.speed += diff;\r

  \    this.calcVector();\r

  \  }\r

  \  this.setImgAngle = function (degrees) {\r

  \    degrees = degrees - 90;\r

  \    this.imgAngle = degrees * Math.PI / 180;\r

  \  }\r

  \  this.changeImgAngleBy = function (degrees) {\r

  \    rad = degrees * Math.PI / 180;\r

  \    this.imgAngle += rad;\r

  \  }\r

  \  this.setMoveAngle = function (degrees) {\r

  \    degrees = degrees - 90\r

  \    this.moveAngle = degrees * Math.PI / 180;\r

  \    this.calcVector();\r

  \  }\r

  \  this.changeMoveAngleBy = function (degrees) {\r

  \    diffRad = degrees * Math.PI / 180;\r

  \    this.moveAngle += diffRad;\r

  \    this.calcVector();\r

  \  }\r

  \  this.setAngle = function (degrees) {\r

  \    this.setMoveAngle(degrees);\r

  \    this.setImgAngle(degrees);\r

  \  }\r

  \  this.changeAngleBy = function (degrees) {\r

  \    this.changeMoveAngleBy(degrees);\r

  \    this.changeImgAngleBy(degrees);\r

  \  }\r

  \  this.collidesWith = function (sprite) {\r

  \    myLeft = this.x;\r

  \    myRight = this.x + this.width;\r

  \    myTop = this.y;\r

  \    myBottom = this.y + this.height;\r

  \    otherLeft = sprite.x;\r

  \    otherRight = sprite.x + sprite.width;\r

  \    otherTop = sprite.y;\r

  \    otherBottom = sprite.y + sprite.height;\r

  \    collision = true;\r

  \    if ((myBottom < otherTop) ||\r

  \      (myTop > otherBottom) ||\r

  \      (myRight < otherLeft) ||\r

  \      (myLeft > otherRight)) {\r

  \      collision = false;\r

  \    }\r

  \    return collision;\r

  \  }\r

  \  this.setCameraRelative = function (cam) { this.camera = cam; }\r

  \  this.report = function () {\r

  \    console.log(\"x: \" + this.x + \", y: \" + this.y + \", dx: \"\r

  \      + this.dx + \", dy: \" + this.dy\r

  \      + \", speed: \" + this.speed\r

  \      + \", angle: \" + this.moveAngle);\r

  \  }\r

  }"
SQ120: function SQ120(sq64) { return Sq64ToSq120[(sq64)]; }
SQ64: function SQ64(sq120) { return Sq120ToSq64[(sq120)]; }
SqAttacked: "function SqAttacked(sq, side) {\r

  \  var pce;\r

  \  var t_sq;\r

  \  var index;\r

  \  if (side == COLOURS.WHITE) {\r

  \    if (brd_pieces[sq - 11] == PIECES.wP || brd_pieces[sq - 9] ==
  PIECES.wP) {\r

  \      return BOOL.TRUE;\r

  \    }\r

  \  } else {\r

  \    if (brd_pieces[sq + 11] == PIECES.bP || brd_pieces[sq + 9] ==
  PIECES.bP) {\r

  \      return BOOL.TRUE;\r

  \    }\r

  \  }\r

  \  for (index = 0; index < 8; ++index) {\r

  \    pce = brd_pieces[sq + KnDir[index]];\r

  \    if (pce != SQUARES.OFFBOARD && PieceKnight[pce] == BOOL.TRUE &&
  PieceCol[pce] == side) {\r

  \      return BOOL.TRUE;\r

  \    }\r

  \  }\r

  \  for (index = 0; index < 4; ++index) {\r

  \    dir = RkDir[index];\r

  \    t_sq = sq + dir;\r

  \    pce = brd_pieces[t_sq];\r

  \    while (pce != SQUARES.OFFBOARD) {\r

  \      if (pce != PIECES.EMPTY) {\r

  \        if (PieceRookQueen[pce] == BOOL.TRUE && PieceCol[pce] == side) {\r

  \          return BOOL.TRUE;\r

  \        }\r

  \        break;\r

  \      }\r

  \      t_sq += dir;\r

  \      pce = brd_pieces[t_sq];\r

  \    }\r

  \  }\r

  \  for (index = 0; index < 4; ++index) {\r

  \    dir = BiDir[index];\r

  \    t_sq = sq + dir;\r

  \    pce = brd_pieces[t_sq];\r

  \    while (pce != SQUARES.OFFBOARD) {\r

  \      if (pce != PIECES.EMPTY) {\r

  \        if (PieceBishopQueen[pce] == BOOL.TRUE && PieceCol[pce] == side)
  {\r

  \          return BOOL.TRUE;\r

  \        }\r

  \        break;\r

  \      }\r

  \      t_sq += dir;\r

  \      pce = brd_pieces[t_sq];\r

  \    }\r

  \  }\r

  \  for (index = 0; index < 8; ++index) {\r

  \    pce = brd_pieces[sq + KiDir[index]];\r

  \    if (pce != SQUARES.OFFBOARD && PieceKing[pce] == BOOL.TRUE &&
  PieceCol[pce] == side) {\r

  \      return BOOL.TRUE;\r

  \    }\r

  \  }\r

  \  return BOOL.FALSE;\r

  }"
SqFromAlg: "function SqFromAlg(moveAlg) {\r

  \  if (moveAlg.length != 2) return SQUARES.NO_SQ;\r

  \  if (moveAlg[0] > 'h' || moveAlg[0] < 'a') return SQUARES.NO_SQ;\r

  \  if (moveAlg[1] > '8' || moveAlg[1] < '1') return SQUARES.NO_SQ;\r

  \  file = moveAlg[0].charCodeAt() - 'a'.charCodeAt();\r

  \  rank = moveAlg[1].charCodeAt() - '1'.charCodeAt();\r

  \  return FR2SQ(file, rank);\r

  }"
SQOFFBOARD: function SQOFFBOARD(sq) { if (FilesBrd[sq] == SQUARES.OFFBOARD)
  return BOOL.TRUE; return BOOL.FALSE; }
sss: function sss() { show_playerdatastate(); }
sss1: "function sss1() {\r

  \  let [fen, A, uplayer, plorder, data] = [Z.fen, Z.A, Z.uplayer, Z.plorder,
  Z.uplayer_data];\r

  \  let s = 'no data.state for player ' + uplayer;\r

  \  if (isDict(data.state)) {\r

  \    s = `${uplayer} passes `;\r

  \    for (const k in data.state.di) {\r

  \      s += `${k} ${data.state.di[k]}, `;\r

  \    }\r

  \  }\r

  \  console.log(s);\r

  }"
stabilizeBodyZoom: "function stabilizeBodyZoom() {\r

  \  if (Math.abs(bodyZoom - 1) < .2) bodyZoom = 1;\r

  }"
stadtland_accept: "function stadtland_accept(fen, plname) {\r

  \  let message = `${plname} has accepted`;\r

  \  arrRemovip(fen.turn, plname);\r

  \  fen.players[plname].hasAccepted = true;\r

  \  if (isEmpty(fen.turn)) { stadtland_newround(fen, true); }\r

  \  sendmove(plname, fen);\r

  }"
stadtland_answer: "function stadtland_answer(fen, plname) {\r

  \  let move = stadtland_createmove(fen, plname);\r

  \  let islegal = stadtland_evalmove(fen, plname, move);\r

  \  if (islegal) {\r

  \    fen.move = move;\r

  \    let message = `${move.uname} has answered first: `;\r

  \    for (const k in move.data) {\r

  \      message += `<div>${k}: ${move.data[k]}</div>`;\r

  \      fen.players[plname].answer[k] = move.data[k];\r

  \    }\r

  \    fen.first = plname;\r

  \    fen.content = message;\r

  \    fen.phase = 'accept';\r

  \    arrRemovip(fen.turn, plname);\r

  \    sendmove(plname, fen, true);\r

  \  } else {\r

  \    show_instruction('your move is not complete!')\r

  \  }\r

  }"
stadtland_createmove: "function stadtland_createmove(fen, plname) {\r

  \  let inputs = dParent.getElementsByTagName('input');\r

  \  let move = { uname: U.name, table: G.name, data: {} };\r

  \  for (const inp of inputs) {\r

  \    if (fen.cats.includes(inp.name)) {\r

  \      move.data[inp.name] = inp.value;\r

  \    }\r

  \  }\r

  \  return move;\r

  }"
stadtland_evalmove: "function stadtland_evalmove(fen, plname, move) {\r

  \  for (const cat of fen.cats) {\r

  \    if (isEmpty(move.data[cat])) move.data[cat] = 'hallo';\r

  \  }\r

  \  return true;\r

  }"
stadtland_newround: "function stadtland_newround(fen, score) {\r

  \  fen.phase = \"create\";\r

  \  fen.turn = jsCopy(fen.plorder);\r

  \  fen.round = [];\r

  \  fen.letter = rLetter(fen.letters);\r

  \  lookupAddToList(fen, ['letters'], fen.letter);\r

  \  fen.instruction = 'complete each category, then click DONE!';\r

  \  if (score && isdef(fen.first)) fen.players[fen.first].score += 1;\r

  \  for (const uname of fen.plorder) {\r

  \    for (const cat of fen.cats) fen.players[uname].answer[cat] = '';\r

  \  }\r

  \  delete fen.first;\r

  \  delete fen.move;\r

  \  delete fen.message;\r

  }"
stadtland_present: "function stadtland_present(fen, dParent, plname) {\r

  \  if (fen.phase == 'create') {\r

  \    let d1 = mDiv(dParent, { w: 400, align: 'left' }, null, `<h1>letter:
  ${fen.letter.toUpperCase()}</h1>`);\r

  \    for (const cat of fen.cats) {\r

  \      mLinebreak(d1, 10);\r

  \      let html = `\r

  \      <div
  style=\"display:inline-block;width:150px\">${cat.toUpperCase()}:</div>\r

  \      <input class:'input' style=\"width:150px\" type='text'
  name=\"${cat}\">\r

  \      `;\r

  \      let d2 = mDiv(d1, {}, null, html);\r

  \    }\r

  \    let d2 = mDiv(d1, { w: '100%', padding: 20 });\r

  \    mButton('SUBMIT', () => interaction(fen, plname, stadtland_answer), d2,
  {}, 'button', 'bSendMove');\r

  \  } else if (fen.phase == 'accept') {\r

  \    let d1 = mDiv(dParent, { w: 400, align: 'left' }, null,
  `<h1>${fen.content}</h1>`);\r

  \    let d2 = mDiv(d1, { w: '100%', padding: 20 });\r

  \    if (!fen.turn.includes(plname)) return;\r

  \    mButton('ACCEPT', () => interaction(fen, plname, stadtland_accept), d2,
  { hmargin: 20 }, 'button');\r

  \    mButton('REJECT', () => interaction(fen, plname, stadtland_reject), d2,
  {}, 'button');\r

  \  }\r

  }"
stadtland_reject: "function stadtland_reject(fen, plname) {\r

  \  let winner = fen.first;\r

  \  stadtland_newround(fen, false);\r

  \  fen.status = `last solution from ${winner} was rejected by ${plname}`;\r

  \  sendmove(fen, plname);\r

  }"
stadtland_setup: "function stadtland_setup(players) {\r

  \  let fen = {};\r

  \  fen.cats = rChoose(['stadt', 'land', 'tier', 'name', 'plant', 'sport',
  'object', 'brand', 'dessert', 'vegetable', 'fruit', 'profession', 'hobby',
  'noun', 'emotion', 'landmark'], 4);\r

  \  fen.players = {};\r

  \  fen.plorder = rPlayerOrder(players);\r

  \  fen.letters = ['q', 'x', 'y'];\r

  \  for (const uname of players) {\r

  \    let pl = fen.players[uname] = { answer: {}, score: 0 };\r

  \  }\r

  \  stadtland_newround(fen, false);\r

  \  return fen;\r

  }"
stage_building: "function stage_building(fen, i_pl, type) {\r

  \  let n = type == 'chateau' ? 6 : type == 'estate' ? 5 : 4;\r

  \  type += 's';\r

  \  let uname = fen.plorder[i_pl];\r

  \  fen.players[uname].buildings[type].push({ list: deck_deal(fen.deck, n),
  h: null });\r

  }"
stage_building_new: "function stage_building_new(fen, i_pl, type, n_openschwein,
  n_closedschwein) {\r

  \  let n = type == 'chateau' ? 6 : type == 'estate' ? 5 : 4;\r

  \  let plname = fen.plorder[i_pl];\r

  \  lookupSet(fen.players[plname], ['buildings', type], []);\r

  \  let building = { list: deck_deal(fen.deck, 1), h: null, type: type,
  schweine: [] };\r

  \  let k = building.lead = building.list[0];\r

  \  let other = k[0] == 'Q' ? '2' : 'Q';\r

  \  let i, j;\r

  \  for (i = 1; i <= n_openschwein; i++) { building.schweine.push(i);
  building.list.push(other + rSuit('CSHD') + 'n'); }\r

  \  for (j = 1; j <= n_closedschwein; j++) { building.list.push(other +
  rSuit('CSHD') + 'n'); }\r

  \  while (building.list.length < n) { building.list.push(k); j++; }\r

  \  fen.players[plname].buildings[type].push(building);\r

  \  return building;\r

  }"
stage_correct_buildings: "function stage_correct_buildings(fen, o) {\r

  \  let ranks = toLetters(RANKS);\r

  \  let irank = 0;\r

  \  for (const uname in o) {\r

  \    let pl = fen.players[uname];\r

  \    let bo = pl.buildings;\r

  \    let dinums = o[uname];\r

  \    for (const type in dinums) {\r

  \      let n = dinums[type];\r

  \      for (let i = 0; i < n; i++) {\r

  \        let r = ranks[irank]; irank++;\r

  \        let s = type == 'farms' ? `${r}Cy ${r}Sy ${r}Sy ${r}Dy` :\r

  \          type == 'estates' ? `${r}Cy ${r}Sy ${r}Sy ${r}Dy ${r}Cg` :
  `${r}Cy ${r}Sy ${r}Sy ${r}Dy ${r}Cg ${r}Hg`;\r

  \        bo[type].push({ list: s.split(' '), h: null });\r

  \      }\r

  \    }\r

  \  }\r

  }"
stage_moves: "function stage_moves() {\r

  \  for (const a of arguments) {\r

  \    let [uname, x, cardname] = a.split('.');\r

  \    DA.chain.push(() => {\r

  \      let g = Session;\r

  \      let state = { selected: {} };\r

  \      state.selected[uname] = [a];\r

  \      let o = { uname: uname, tid: g.table.id, state: state, player_status:
  'joined' };\r

  \      to_server(o, 'turn_update');\r

  \    })\r

  \  }\r

  }"
stage1_makeUis: "function stage1_makeUis(omap, objectPool, w, h, gap, domelFunc)
  {\r

  \  let olist = mapOMap(omap, objectPool);\r

  \  if (isEmpty(olist)) return null;\r

  \  let otrans = olist;\r

  \  let uis = getUis(otrans, domelFunc(w, h));\r

  \  return uis;\r

  }"
stage2_prepArea: function stage2_prepArea(area) { let d = mBy(area); mClass(d,
  'flexWrap'); return d; }
stage3_prepContainer: function stage3_prepContainer(area) { let container =
  mDiv(area); mPosRel(container); return container; }
stage4_layout: "function stage4_layout(uis, container, w, h, gap, layoutFunc)
  {\r

  \  let [wTotal, hTotal] = layoutFunc(uis, container, w, h, gap);\r

  \  mStyle(container, { width: wTotal, height: hTotal, 'border-radius': gap
  });\r

  }"
standardize_color: "function standardize_color(str) {\r

  \  var c = document.createElement('canvas').getContext('2d');\r

  \  c.fillStyle = str;\r

  \  return c.fillStyle;\r

  }"
start: "function start() { let uname = DA.secretuser =
  localStorage.getItem('uname'); if (isdef(uname)) U = { name: uname };
  phpPost({ app: 'simple' }, 'assets'); }"
start_advanced: "function start_advanced() {\r

  \  dTable = mBy('dTable'); dTitle = mBy('dTitle');\r

  \  show('dTopAdvanced');\r

  \  show_tables();\r

  \  show_games();\r

  \  show_title();\r

  \  show_home_logo();\r

  \  dTitle.animate([{ opacity: 0 }, { opacity: 1 },], { fill: 'both',
  duration: 1000, easing: 'ease-in' });\r

  \  dTable = mBy('dTable');\r

  \  show_users();\r

  \  if (!isEmpty(Serverdata.tables))
  onclick_game_in_gametable(Serverdata.tables[0].friendly);\r

  }"
start_bots: "function start_bots(obj) {\r

  \  if (is_admin() && DA.is_first_move == true) {\r

  \    DA.bots = [];\r

  \    let bots = { bob: 5000 };\r

  \    for (const botname in bots) {\r

  \      if (obj.table.players.includes(botname)) {
  start_poll_bot_send_move(botname, bots[botname]); }\r

  \    }\r

  \  }\r

  \  DA.is_first_move = false;\r

  }"
start_challenge1: "function start_challenge1() {\r

  \  DA.challenge = 1;\r

  \  DA.name = 'Login';\r

  \  scrollToTop();\r

  \  onclick_location('boa');\r

  }"
start_challenge2: "function start_challenge2() {\r

  \  DA.challenge = 2;\r

  \  DA.name = 'Bill Pay';\r

  \  scrollToTop();\r

  \  boamain_start();\r

  \  show_bill_button();\r

  }"
start_challenge3: "function start_challenge3() {\r

  \  DA.challenge = 3;\r

  \  DA.name = 'Full Bill Pay';\r

  \  scrollToTop();\r

  \  onclick_location('boa');\r

  }"
start_challenge4: "function start_challenge4() {\r

  \  DA.challenge = 4;\r

  \  DA.name = 'Password';\r

  \  scrollToTop();\r

  \  if (S.bw_state == 'loggedin') toggle_bw_symbol();\r

  \  S.bw_state = (coin(25) || !S.master_password) ? 'expired' :
  'loggedout';\r

  }"
start_chat: "function start_chat(e) {\r

  \  e.preventDefault(); e.cancelBubble = true;\r

  \  var username = e.target.getAttribute(\"username\");\r

  \  if (e.target.id == \"\") {\r

  \    username = e.target.parentNode.getAttribute(\"username\");\r

  \  }\r

  \  CURRENT_CHAT_USER = username;\r

  \  get_chats();\r

  \  mBy(\"radio_chat\").checked = true;\r

  }"
start_creeping_down: "function start_creeping_down() {\r

  \  for (const k in Z.fen) {\r

  \    set_new_goal(k, 0);\r

  \  }\r

  }"
start_downgrade_ticker: "function start_downgrade_ticker() {\r

  \  TO.main = setTimeout(degrade_bars, 5000);\r

  }"
start_game: "function start_game() {\r

  \  let gamename = DA.gamename;\r

  \  let options = collect_game_specific_options(gamename);\r

  \  let players = DA.playerlist ? DA.playerlist.map(x => ({ name: x.uname,
  playmode: x.playmode, strategy: valf(x.strategy, options.strategy, 'random')
  })) : create_random_players(options.nplayers);\r

  \  _start_game(gamename, players, options); hide('dMenu');\r

  }"
start_leaflet: "async function start_leaflet() {\r

  \  TESTING = 'nosockets';\r

  \  if (TESTING != 'nosockets') {\r

  \    Socket = TESTING == 'live' ? io('http://127.0.0.1:3000') : TESTING ==
  'nginx' ? io('http://216.250.112.218:3000') : io();\r

  \    Socket.on('message', x => console.log('got message', x));\r

  \    Socket.on('disconnect', x => console.log('got disconnect', x));\r

  \    Socket.on('update', x => console.log('got update', x));\r

  \  }\r

  \  var cities = L.layerGroup();\r

  \  var mLittleton = L.marker([39.61, -105.02]).bindPopup('This is Littleton,
  CO.').addTo(cities);\r

  \  var mDenver = L.marker([39.74, -104.99]).bindPopup('This is Denver,
  CO.').addTo(cities);\r

  \  var mAurora = L.marker([39.73, -104.8]).bindPopup('This is Aurora,
  CO.').addTo(cities);\r

  \  var mGolden = L.marker([39.77, -105.23]).bindPopup('This is Golden,
  CO.').addTo(cities);\r

  \  var mbAttr = 'Map data &copy; <a
  href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>
  contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>';\r

  \  var mbUrl =
  'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1\
  IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6\
  B5aw';\r

  \  var streets = L.tileLayer(mbUrl, { id: 'mapbox/streets-v11', tileSize:
  512, zoomOffset: -1, attribution: mbAttr });\r

  \  var osm = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png',
  {\r

  \    maxZoom: 19,\r

  \    attribution: '&copy; <a
  href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\r

  \  });\r

  \  var map = L.map('map', {\r

  \    center: [39.73, -104.99],\r

  \    zoom: 10,\r

  \    layers: [osm, cities]\r

  \  });\r

  \  var baseLayers = {\r

  \    'OpenStreetMap': osm,\r

  \    'Streets': streets\r

  \  };\r

  \  var overlays = {\r

  \    'Cities': cities\r

  \  };\r

  \  var layerControl = L.control.layers(baseLayers, overlays).addTo(map);\r

  \  var crownHill = L.marker([39.75, -105.09]).bindPopup('This is Crown Hill
  Park.');\r

  \  var rubyHill = L.marker([39.68, -105.00]).bindPopup('This is Ruby Hill
  Park.');\r

  \  var parks = L.layerGroup([crownHill, rubyHill]);\r

  \  var satellite = L.tileLayer(mbUrl, { id: 'mapbox/satellite-v9', tileSize:
  512, zoomOffset: -1, attribution: mbAttr });\r

  \  layerControl.addBaseLayer(satellite, 'Satellite');\r

  \  layerControl.addOverlay(parks, 'Parks');\r

  }"
start_loop: "function start_loop() {\r

  \  TO.running = setInterval(() => {\r

  \    for (const item of G.items) {\r

  \    }\r

  \  }, 100);\r

  }"
start_new_round_ferro: "function start_new_round_ferro() {\r

  \  let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen,
  Z.uplayer];\r

  \  let pl = fen.players[uplayer];\r

  \  Z.stage = 'card_selection';\r

  \  fen.plorder = arrCycle(plorder, 1);\r

  \  let starter = fen.plorder[0];\r

  \  Z.turn = fen.turn = [starter];\r

  \  let deck = fen.deck = create_fen_deck('n', fen.num_decks, fen.num_decks *
  4);\r

  \  let deck_discard = fen.deck_discard = [];\r

  \  shuffle(deck);\r

  \  let handsize = valf(Number(Z.options.handsize), 11);\r

  \  for (const plname of fen.plorder) {\r

  \    let pl = fen.players[plname];\r

  \    pl.hand = deck_deal(deck, plname == starter ? handsize + 1 :
  handsize);\r

  \    pl.journeys = [];\r

  \    pl.roundgoal = false;\r

  \    pl.roundchange = true;\r

  \    delete pl.handsorting;\r

  \  }\r

  \  Z.round += 1;\r

  \  if (Z.round > Z.options.maxrounds) {\r

  \    ari_history_list([`game over`], 'game');\r

  \    Z.stage = 'game_over';\r

  \    fen.winners = find_players_with_min_score();\r

  \  }\r

  }"
start_new_todo_list: "function start_new_todo_list(otree, r) {\r

  \  let i_last = otree.plorder.indexOf(r.uname);\r

  \  let i_next = (i_last + 1) % otree.plorder.length;\r

  \  otree.todo = inno_todo_regular(otree, otree.plorder[i_next]);\r

  }"
start_poll_bot_send_move: "function start_poll_bot_send_move(botname = 'bob', ms
  = 3000) {\r

  \  DA.bots.push(botname);\r

  \  if (DB.games[Session.cur_game].game_type == 'race') {\r

  \    let o = { tid: Session.cur_tid, player_status: 'joined', score: 0,
  state: 'bot', uname: botname };\r

  \    start_polling(o, 'poll_bot_send_move', on_poll_bot_send_move, ms,
  create_ai_move);\r

  \  } else {\r

  \  }\r

  }"
start_polling: "function start_polling(data, type, onsuccess, ms = 5000, func)
  {\r

  \  delete DA.poll; allow_polling();\r

  \  DA.poll = {\r

  \    data: data,\r

  \    type: type,\r

  \    onsuccess: onsuccess,\r

  \    ms: ms,\r

  \    func: func\r

  \  };\r

  \  poll();\r

  }"
start_prelims: "function start_prelims() {\r

  \  Speech = new Speaker('E');\r

  \  TOMan = new TimeoutManager();\r

  \  ColorThiefObject = new ColorThief();\r

  \  init_internet();\r

  \  init_keyhandlers();\r

  \  mBy('label_games').onclick = onclick_games;\r

  \  mBy('label_play').onclick = onclick_play;\r

  \  mBy('label_account').onclick = onclick_account;\r

  \  mBy('label_login').onclick = onclick_login;\r

  \  mBy('label_settings').onclick = onclick_settings;\r

  \  Session.cur_user = valf(queryStringToJson().user, 'guest');\r

  \  Session.cur_menu = 'games';\r

  \  Session.cur_game = 'gSpotit';\r

  \  Session.def_playmode = 'multi';\r

  \  Session.def_players = ['mimi', 'felix'];\r

  \  Session.def_players = ['mimi', 'afia', 'amanda', 'annabel', 'blade',
  'felix', 'gul', 'lauren', 'mac', 'nasi', 'sarah', 'valerie'];\r

  \  Session.cur_chatter = 'gul';\r

  \  go_online();\r

  \  get_data(queryStringToJson(), 'user_info');\r

  }"
start_simple: "function start_simple() {\r

  \  let uname = localStorage.getItem('uname');\r

  \  if (isdef(uname)) onclick_user(uname); else show_users();\r

  }"
start_simple_ack_round: "function start_simple_ack_round(ackstage, ack_players,
  nextplayer, callbackname_after_ack, keeppolling = false) {\r

  \  let fen = Z.fen;\r

  \  fen.ack_players = ack_players;\r

  \  fen.lastplayer = arrLast(ack_players);\r

  \  fen.nextplayer = nextplayer;\r

  \  fen.turn_after_ack = [nextplayer];\r

  \  fen.callbackname_after_ack = callbackname_after_ack;\r

  \  fen.keeppolling = keeppolling;\r

  \  Z.stage = ackstage;\r

  \  Z.turn = [ack_players[0]];\r

  }"
start_simple_timer: "function start_simple_timer(dtimer, msInterval, onTick,
  msTotal, onElapsed) {\r

  \  if (isdef(DA.timer)) { DA.timer.clear(); DA.timer = null; }\r

  \  let timer = DA.timer = new SimpleTimer(dtimer, msInterval, onTick,
  msTotal, onElapsed);\r

  \  timer.start();\r

  }"
start_sound: "function start_sound() {\r\n}"
start_table: "function start_table(uname, tid) {\r

  \  to_server({ uname: uname, tid: tid }, 'start_table');\r

  }"
start_table_dep: "function start_table_dep(tid) {\r

  \  let t = DB.tables[tid];\r

  \  Session.cur_tid = tid;\r

  \  t.status = 'started';\r

  \  t.moves = {};\r

  \  t.players.map(x => t.moves[x] = []);\r

  \  makemove(t);\r

  }"
start_tests: "function start_tests() {\r

  \  fentest_wise();\r

  \  //#region old tests\r

  \  //#endregion\r

  }"
start_transaction: "function start_transaction() {\r

  \  if (DA.simulate) return;\r

  \  DA.simulate = true;\r

  \  DA.snapshot = { fen: jsCopy(Z.fen), stage: Z.stage, round: Z.round,
  phase: Z.phase, turn: Z.turn };\r

  \  DA.transactionlist = [];\r

  }"
start_with_assets: "function start_with_assets() {\r

  \  DA.isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
  if (DA.isFirefox) console.log('using Firefox!')\r

  \  show_home_logo();\r

  \  if (nundef(U)) { show_users(); return; }\r

  \  show_username();\r

  \  if (DA.TEST0) show('dTestButtons');\r

  \  //#region TESTING\r

  \  //#endregion\r

  }"
start_with_basic_assets: "function start_with_basic_assets() {\r

  \  //wenn mit https://www.telecave.net/aroot/bg gestartet wird, ist man hier
  ein guest!\r

  \  if (is_admin()) {\r

  \    hide('dIntro');\r

  \    let user = load_user(Session.cur_user);\r

  \    loader_off();\r

  \    DA.next = get_dictionary();\r

  \    get_games();\r

  \    show('b_polling');\r

  \  } else {\r

  \    close_sidebar();\r

  \    mBy('user_info_mini').style.display = 'flex';\r

  \    mBy('b_toggle_sidebar').style.display = 'none';\r

  \    show('dIntro');\r

  \    get_intro();\r

  \  }\r

  }"
start0: "async function start0() {\r

  \  TESTING = 'nosockets';\r

  \  if (TESTING != 'nosockets') {\r

  \    Socket = TESTING == 'live' ? io('http://127.0.0.1:3000') : TESTING ==
  'nginx' ? io('http://216.250.112.218:3000') : io();\r

  \    Socket.on('message', x => console.log('got message', x));\r

  \    Socket.on('disconnect', x => console.log('got disconnect', x));\r

  \    Socket.on('update', x => console.log('got update', x));\r

  \  }\r

  \  let [citylist, capitals] = [M.cities, M.capitals] = await
  get_cities_and_capitals();\r

  \  await load_syms();\r

  \  let list = dict2list(citylist).filter(x => x.pop > 1000000 && x.type ==
  'capital');\r

  \  console.log('list', list);\r

  \  let cities = M.layers.cities = L.layerGroup();\r

  \  let markers = M.markers = [];\r

  \  for (const c of list) {\r

  \    let m = L.marker(c.center).bindPopup(c.name);\r

  \    addKeys(c, m);\r

  \    markers.push(m);\r

  \  }\r

  \  M.layers = {};\r

  \  cities.type == 'overlay';\r

  \  let osm = M.layers.osm = get_layer('osm', { opacity: 1, type: 'base'
  });\r

  \  let map = M.map = L.map('map', { center: Geo.places.tuerkenschanzpark,
  zoom: 2, layers: [osm, cities] });\r

  \  var baseMaps = { osm: osm };\r

  \  var overlayMaps = { cities: citylist };\r

  \  var layerControl = M.layer_control = L.control.layers(baseMaps,
  overlayMaps).addTo(map);\r

  \  return;\r

  \  let players = [{ name: 'felix', city: 'Paris' }, { name: 'amanda', city:
  'Vienna' }, { name: 'mimi', city: 'Madrid' }];\r

  \  M.markers = {};\r

  \  players.map(x => M.markers[x.name] = get_marker(map,
  citylist[x.city].center, { user: x.name, draggable: true }));\r

  \  map.on('zoomend', ev => {\r

  \    let x = ev.target;\r

  \    dZoom.innerHTML = 'zoom: ' + x.getZoom();\r

  \  });\r

  \  console.log('marker in geojson: ', M.markers.felix.toGeoJSON());\r

  \  map.on('click', function (e) {\r

  \    document.getElementById('dPosition').innerHTML =\r

  \      \"Lat, Lon : \" + e.latlng.lat + \", \" + e.latlng.lng;\r

  \  });\r

  \  L.streetView({ position: 'topleft', mapillaryId:
  'RC1ZRTBfaVlhWmJmUGVqRk5CYnAxQTpmMGE3OTU0MzM0MTljZTA4' }).addTo(map);\r

  \  var marker = L.marker(map.getCenter()).addTo(map);\r

  \  map.on('move', function () { marker.setLatLng(map.getCenter()); });\r

  }"
startBlinking: "function startBlinking(item, items, unique = true) {\r

  \  if (unique) {\r

  \    let prevLetter = firstCond(items, x => x.isBlinking == true);\r

  \    stopBlinking(prevLetter);\r

  \  }\r

  \  mClass(iDiv(item), 'blink');\r

  \  item.isBlinking = true;\r

  }"
StartChessGame: "function StartChessGame() {\r

  \  InitFilesRanksBrd();\r

  \  InitSq120To64();\r

  \  InitHashKeys();\r

  \  InitBoardVars();\r

  \  InitMvvLva();\r

  \  InitBoardSquares();\r

  \  EvalInit();\r

  \  srch_thinking = BOOL.FALSE;\r

  \  $('#fenIn').val(START_FEN);\r

  \  NewGame();\r

  \  NewGameAjax();\r

  }"
startClientTest: "async function startClientTest() {\r

  \  hide('dMainContent');\r

  \  show('dGameScreen');\r

  \  setTitle('*** Testing ***');\r

  \  setSubtitle('logged in as ' + Username);\r

  \  mStyleX(document.body, { opacity: 1 });\r

  \  initTable(null, 2); initSidebar(); initAux(); initScore();\r

  \  runClientTest();\r

  }"
startgame: "function startgame(game, players, options = {}) {\r

  \  if (nundef(game)) game = 'a_game';\r

  \  let default_options = {}; for (const k in Config.games[game].options)
  default_options[k] = arrLast(Config.games[game].options[k].split(','));\r

  \  addKeys(default_options, options);\r

  \  if (nundef(players)) players = rChoose(Serverdata.users, 2).map(x => ({
  name: x.name }));\r

  \  let playernames = players.map(x => x.name);\r

  \  let fen = window[game]().setup(playernames, options);\r

  \  if (nundef(fen.round)) fen.round = 1;\r

  \  if (nundef(fen.phase)) fen.phase = '';\r

  \  if (nundef(fen.stage)) fen.stage = 0;\r

  \  if (nundef(fen.step)) fen.step = 0;\r

  \  if (nundef(fen.turn)) fen.turn = [fen.plorder[0]]; else if (DA.TESTSTART1
  && fen.turn.length == 1) fen.turn = [playernames[0]];\r

  \  players.map(x => { let pl = fen.players[x.name]; pl.playmode =
  valf(x.playmode, 'human'); pl.strategy = valf(x.strategy,
  valf(options.strategy, 'random')); });\r

  \  if (options.mode == 'solo') {\r

  \    let me = isdef(U) && isdef(fen.players[U.name]) ? U.name :
  rChoose(playernames);\r

  \    for (const plname of playernames) {\r

  \      if (plname == me) continue;\r

  \      fen.players[plname].playmode = 'bot';\r

  \    }\r

  \    options.mode = 'hotseat';\r

  \  }\r

  \  for (const k in options) { if (isNumber(options[k])) options[k] =
  parseInt(options[k]); }\r

  \  let o = {\r

  \    friendly: generate_table_name(players.length), game: game, host:
  playernames[0], players: playernames,\r

  \    fen: fen, options: options\r

  \  };\r

  \  ensure_polling();\r

  \  phpPost(o, 'startgame');\r

  }"
startGame: "function startGame() {\r

  \  meme = new component(30, 30, 'red', 10, 120);\r

  \  meme.gravity = 0.05;\r

  \  score = new component('30px', 'Consolas', 'black', 280, 40, 'text');\r

  \  myGameArea.start();\r

  }"
startGameML: function startGameML() { }
startGameSP: function startGameSP() { }
startGameSPA: function startGameSPA() { }
startGameTC: function startGameTC() { }
startGameTP: function startGameTP() { }
startGameWP: "function startGameWP() {\r

  \  onkeydown = ev => {\r

  \    if (uiPaused) return;\r

  \    if (isdef(inputBox)) { inputBox.focus(); }\r

  \  }\r

  }"
startingSetup: "function startingSetup() {\r\n}"
startInteraction: "function startInteraction() {\r

  \  boatFilters = [];\r

  \  if (isdef(IdOwner.a)) IdOwner.a.map(x => _addStandardInteraction(x));\r

  \  if (isdef(IdOwner.l)) IdOwner.l.map(x => _addStandardInteraction(x));\r

  \  if (isdef(IdOwner.p)) IdOwner.p.map(x => _addStandardInteraction(x));\r

  \  if (isdef(IdOwner.r)) IdOwner.r.map(x => _addStandardInteraction(x));\r

  \  if (isdef(IdOwner.t)) IdOwner.t.map(x => _addStandardInteraction(x));\r

  \  _preselectFirstVisualsForBoats();\r

  \  choiceCompleted = false;\r

  \  let nBoats = getBoatIds().length;\r

  \  let autoplay = S_autoplayFunction(G) || nBoats < 2 ||
  robbedDescInBoats();\r

  \  if (autoplay) {\r

  \    setTimeout(onClickStep, S_AIThinkingTime);\r

  \    return;\r

  \  } else if (!isEmpty(scenarioQ)) {\r

  \    let func = scenarioQ.shift();\r

  \    func();\r

  \  } else {\r

  \    scenarioRunning = false;\r

  \    setAutoplayFunctionForMode();\r

  \    unfreezeUI();\r

  \  }\r

  }"
startLevel: "function startLevel() {\r

  \  Speech.setLanguage(Settings.language);\r

  \  getGameValues(Username, G.id, G.level);\r

  \  G.instance.startLevel();\r

  \  if (G.keys.length < G.numPics) { updateKeySettings(G.numPics + 5); }\r

  \  startRound();\r

  }"
startLevelML: function startLevelML() { levelML(); }
startLevelSP: function startLevelSP() { levelSP(); }
startLevelSPA: function startLevelSPA() { levelSPA(); }
startLevelTC: function startLevelTC() { levelTC(); }
startLevelTP: function startLevelTP() { levelTP(); }
startLevelWP: function startLevelWP() { levelWP(); }
startloading: "async function startloading() {\r

  \  let path = `${Basepath}/DB.yaml`;\r

  \  var DB = await route_path_yaml_dict(path);\r

  }"
startloop: function startloop() { FR = 30; DA.interval =
  setInterval(update_draw_items, 1000 / FR) }
startPulsating: "function startPulsating(item, items, unique = true) {\r

  \  if (unique) {\r

  \    let prevLetter = firstCond(items, x => x.isPulsating == true);\r

  \    stopPulsating(prevLetter);\r

  \  }\r

  \  mClass(iDiv(item), 'onPulse');\r

  \  item.isPulsating = true;\r

  }"
startQRunner: "function startQRunner() {\r

  \  if (QRunnerRunning) return;\r

  \  QRunnerRunning = true;\r

  \  QRunner();\r

  }"
startRound: "function startRound() {\r

  \  if (G.addonActive != true && isTimeForAddon()) {\r

  \    G.addonActive = true;\r

  \    exitToAddon(startRound); return;\r

  \  } else G.addonActive = false;\r

  \  resetRound();\r

  \  uiActivated = false;\r

  \  G.instance.startRound();\r

  \  TOMain = setTimeout(() => prompt(), 300);\r

  }"
startRoundML: function startRoundML() { }
startRoundReally: "function startRoundReally() {\r

  \  clearFleetingMessage();\r

  \  showStats();\r

  \  LevelChange = false;\r

  \  if (ROUND_OUTPUT) {\r

  \  }\r

  \  trialNumber = 0;\r

  \  GFUNC[currentGame].startRound();\r

  \  promptStart();\r

  }"
startRoundSP: function startRoundSP() { }
startRoundSPA: function startRoundSPA() { }
startRoundTC: "function startRoundTC() {\r

  \  uiActivatedTC = false;\r

  }"
startRoundTP: "function startRoundTP() {\r

  \  uiActivated = false;\r

  }"
startRoundWP: function startRoundWP() { }
StartSearch: "function StartSearch() {\r

  \  srch_depth = MAXDEPTH;\r

  \  var t = $.now();\r

  \  var tt = $('#ThinkTimeChoice').val();\r

  \  if (nundef(tt)) tt = 6;\r

  \  srch_time = parseInt(tt) * 1000;\r

  \  SearchPosition();\r

  \  StopThinking();\r

  \  if (FLAG_HINT_ONLY) {\r

  \    FLAG_HINT_ONLY = false;\r

  \    let info = Move2FromTo(srch_best);\r

  \    let sq = info.from.sq;\r

  \    HintAnimation(sq, 1000);\r

  \  } else {\r

  \    MakeMove(srch_best);\r

  \    MoveGUIPiece(srch_best);\r

  \    CheckAndSet();\r

  \  }\r

  }"
startsWith: "function startsWith(s, sSub) {\r

  \  return s.substring(0, sSub.length) == sSub;\r

  }"
startsWithCaseIn: "function startsWithCaseIn(s, ssub) {\r

  \  return startsWith(s.toLowerCase(), ssub.toLowerCase());\r

  }"
startsWithCaseIndep: "function startsWithCaseIndep(s, ssub) {\r

  \  return startsWith(s.toLowerCase(), ssub.toLowerCase());\r

  }"
startsWithCaseInsensitive: "function startsWithCaseInsensitive(s, ssub) {\r

  \  return startsWith(s.toLowerCase(), ssub.toLowerCase());\r

  }"
startTesting: "async function startTesting() {\r

  \  hide('dMainContent');\r

  \  show('dGameScreen');\r

  \  setTitle('*** Testing ***');\r

  \  setSubtitle('logged in as ' + Username);\r

  \  let color = USERNAME_SELECTION == 'local' ?
  localStorage.getItem('BaseColor') : null;\r

  \  setNewBackgroundColor(color);\r

  \  mStyleX(document.body, { opacity: 1 });\r

  \  initTable(null, 2); initSidebar(); initAux(); initScore();\r

  \  runTest();\r

  }"
startTestLoop: "function startTestLoop() {\r

  \  if (isLastTestOfSeries()) {\r

  \    isTraceOn = SHOW_TRACE;\r

  \    console.log('TESTS COMPLETED!');\r

  \  } else {\r

  \    nextTestOfSeries();\r

  \    if (!isLastTestOfSeries()) setTimeout(startTestLoop, 1000);\r

  \  }\r

  }"
startTestSeries: "function startTestSeries() {\r

  \  let numSeries = Object.keys(ALLTESTS).length;\r

  \  if (iTESTSERIES >= numSeries) {\r

  \    console.log('TEST SERIES COMPLETED!');\r

  \    isTraceOn = SHOW_TRACE;\r

  \    return;\r

  \  } else if (isLastTestOfSeries()) {\r

  \    iTESTSERIES += 1;\r

  \    iTEST = 0;\r

  \  } else {\r

  \    nextTestOfSeries();\r

  \  }\r

  \  if (iTESTSERIES < numSeries) setTimeout(startTestSeries, 1000);\r

  }"
StartThinking: "function StartThinking() {\r

  \  let img = mBy('ThinkingPng');\r

  \  show(img);\r

  \  mClass(img, 'blinkFast');\r

  \  mBy('dShield').style.display = 'block';\r

  }"
startTime: "function startTime(elem) {\r

  \  if (nundef(Settings.showTime) || !Settings.showTime) return;\r

  \  if (nundef(TimestampStarted)) { TimestampStarted = msNow(); TimeElapsed =
  0; }\r

  \  if (nundef(elem) && isdef(TimeElem)) { elem = TimeElem; }\r

  \  else { if (isString(elem)) elem = mBy(elem); TimeElem = elem; }\r

  \  var timeLeft = TimeLeft = Settings.minutesPerUnit * 60000 -
  getTimeElapsed();\r

  \  if (timeLeft > 0) {\r

  \    let t = msToTime(timeLeft);\r

  \    let s = format2Digits(t.h) + \":\" + format2Digits(t.m) + \":\" +
  format2Digits(t.s);\r

  \    elem.innerHTML = s;\r

  \    setTimeout(() => startTime(elem), 500);\r

  \  } else {\r

  \    elem.innerHTML = '00:00:00';\r

  \    if (OnTimeOver) OnTimeOver();\r

  \  }\r

  }"
startTimeCD: "function startTimeCD(elem, ms, callback) {\r

  \  if (isdef(ms)) { MSTimeClock = ms; MSTimeDiff = 0; MSTimeStart =
  Date.now(); MSTimeCallback = callback; }\r

  \  else { MSTimeDiff = (Date.now() - MSTimeStart); }\r

  \  if (MSTimeDiff > MSTimeClock) {\r

  \    MSTimeCallback();\r

  \    return;\r

  \  }\r

  \  let t = msToTime(MSTimeClock - MSTimeDiff);\r

  \  if (isString(elem)) elem = mBy(elem); elem.innerHTML = t.h + \":\" +
  format2Digits(t.m) + \":\" + format2Digits(t.s);\r

  \  MSTimeTO = setTimeout(() => startTimeCD(elem), 500);\r

  }"
startTimeClock: "function startTimeClock(elem) {\r

  \  if (nundef(Settings.showTime) || !Settings.showTime) return;\r

  \  var today = new Date(),\r

  \    h = format2Digits(today.getHours()),\r

  \    m = format2Digits(today.getMinutes()),\r

  \    s = format2Digits(today.getSeconds());\r

  \  if (isString(elem)) elem = mBy(elem); elem.innerHTML = h + \":\" + m +
  \":\" + s;\r

  \  TOList.clock = setTimeout(() => startTimeClock(elem), 500);\r

  }"
startTurn: "function startTurn() {\r

  \  let me = getTurnPlayer();\r

  \  changeUserTo(me.id)\r

  \  showHands();\r

  \  present();\r

  \  optionsFor(me);\r

  }"
startUnit: "function startUnit() {\r

  \  renewTimer(G, 'time');\r

  \  U.session = {};\r

  \  if (START_IN_MENU) { START_IN_MENU = false; onClickTemple(); } else
  GC.startGame();\r

  }"
staticArea: "function staticArea(areaName, oSpec) {\r

  \  func = correctFuncName(oSpec.type);\r

  \  oSpec.ui = window[func](areaName, oSpec);\r

  }"
staticPos: "function staticPos(ms) {\r

  \  let gameArea = UIS['a_d_game'];\r

  \  let actionArea = UIS['a_d_actions'];\r

  \  let pageHeaderArea = UIS['a_d_header'];\r

  \  let statusArea = UIS['a_d_status'];\r

  \  let x = actionArea.w + gameArea.w / 2 + ms.x;\r

  \  let y = pageHeaderArea.h + statusArea.h + gameArea.h / 2 + ms.y;\r

  \  return { x: x, y: y };\r

  }"
staticTitle: "function staticTitle() {\r

  \  clearInterval(TO.titleInterval);\r

  \  let url = window.location.href;\r

  \  let loc = url.includes('telecave') ? 'telecave' : 'local';\r

  \  let game = isdef(Z) ? stringAfter(Z.friendly, 'of ') : '♠ GAMES ♠';\r

  \  document.title = `(${loc}) ${game}`;\r

  }"
status_message: "function status_message(msg, styles = {}) {\r

  \  let d = mBy('dMessage'); show(d); clearElement(d);\r

  \  let def_styles = { padding: 20, align: 'center', position: 'absolute',
  fg: 'contrast', fz: 24, w: '100vw' };\r

  \  copyKeys(styles, def_styles);\r

  \  let dContent = mDiv(d, def_styles, null, msg);\r

  \  return dContent;\r

  }"
status_message_new: "function status_message_new(msg, dParent, styles = {}) {\r

  }"
status_message_off: "function status_message_off() {\r

  \  let d = mBy('dMessage');\r

  \  clearElement(d);\r

  \  hide(d);\r

  \  onclick = null;\r

  }"
std2fold: "function std2fold(dMain) {\r

  \  let dOuter = mDiv(dMain, { bg: 'random', flex: '1 0 auto', display:
  'flex', 'flex-flow': 'row wrap' });\r

  \  let dLeft = mDiv(dOuter, { bg: 'random', w: 100 }, 'dLeft', 'left');\r

  \  let dMiddle = mDiv(dOuter, { bg: 'random', flex: '1 0 auto' }, 'dMiddle',
  'middle');\r

  \  return [dLeft, dMiddle];\r

  }"
std3fold: "function std3fold(dMain) {\r

  \  let dOuter = mDiv(dMain, { flex: '1 0 auto', display: 'flex',
  'flex-flow': 'row' });\r

  \  let dLeft = mDiv(dOuter, { w: 100 }, 'dLeft', 'left');\r

  \  let dMiddle = mDiv(dOuter, { position: 'relative', bg: '#ffffff80', flex:
  '1 0 auto' }, 'dMiddle');\r

  \  let dRight = mDiv(dOuter, { w: 100, overflow: 'hidden' }, 'dRight',
  'right');\r

  \  return [dLeft, dMiddle, dRight];\r

  }"
std3title: "function std3title(dMain, title, titleStyles) {\r

  \  let prefix = 'title';\r

  \  let dOuter = mDiv(dMain, { bg: '#000000', alpha: .5, display: 'flex',
  'flex-flow': 'row' });\r

  \  let dLeft = mDiv(dOuter, { w: 100 }, `d${prefix}Left`);\r

  \  let dMiddle = mDiv(dOuter, { align: 'center', flex: '1 0 auto' },
  `d${prefix}Middle`, title);\r

  \  mCenterCenterFlex(dMiddle);\r

  \  if (isdef(titleStyles)) mStyle(dMiddle, titleStyles);\r

  \  let dRight = mDiv(dOuter, { align: 'right', wmin: 100, overflow: 'hidden'
  }, `d${prefix}Right`);\r

  \  return [dLeft, dMiddle, dRight];\r

  }"
stdCardsContainer: "function stdCardsContainer(dParent, n, ov = 80, styles = {})
  { return stdRowOverlapContainer(dParent, n, n * ov + 22, ov, addKeys({ paleft:
  20, patop: 10 }, styles)); }"
stdColOverlapContainer: "function stdColOverlapContainer(dParent, n, wGrid,
  wCell, styles) {\r

  \  addKeys({\r

  \    h: wGrid,\r

  \    gap: 0,\r

  \    display: 'inline-grid',\r

  \    'grid-template-rows': `repeat(${n}, ${wCell}px)`\r

  \  }, styles);\r

  \  return mDiv(dParent, styles);\r

  }"
stdContainerCenterColWrap: "function stdContainerCenterColWrap(dParent) { return
  stdFlexContainer(dParent, { dir: 'col', 'align-content': 'center' }); }"
stdContainerCenterRowWrap: "function stdContainerCenterRowWrap(dParent) { return
  stdFlexContainer(dParent, { 'justify-content': 'center' }); }"
stdContainerColWrap: "function stdContainerColWrap(dParent) { return
  stdFlexContainer(dParent, { dir: 'col' }); }"
stdContainerRowWrap: function stdContainerRowWrap(dParent) { return stdFlexContainer(dParent); }
stdDeckContainer: "function stdDeckContainer(dParent, n, ov = .25, styles = {})
  { return stdRowOverlapContainer(dParent, n, 140, ov, addKeys({ padding: 10 },
  styles)); }"
stdFlexContainer: "function stdFlexContainer(dParent, styles = {}) {\r

  \  addKeys({\r

  \    wmax: '96%',\r

  \    margin: 'auto',\r

  \    padding: 10,\r

  \    gap: 10,\r

  \    display: 'flex',\r

  \    flex: '1 0 auto',\r

  \    wrap: true,\r

  \  }, styles);\r

  \  return mDiv(dParent, styles);\r

  }"
stdGridContainer: "function stdGridContainer(dParent, wCell, styles = {}) {\r

  \  addKeys({\r

  \    wmax: 500,\r

  \    margin: 'auto',\r

  \    padding: 10,\r

  \    gap: 0,\r

  \    display: 'grid',\r

  \    bg: 'green',\r

  \    'grid-template-columns': `repeat(${20}, ${wCell}px)`\r

  \  }, styles);\r

  \  return mDiv(dParent, styles);\r

  }"
stdHandContainer: "function stdHandContainer(dParent, n, ov = 20, styles = {}) {
  return stdRowOverlapContainer(dParent, n, 76 + n * ov + 22, ov, addKeys({
  padding: 10 }, styles)); }"
stdInput: "function stdInput(dParent, styles) {\r

  \  let defStyles = { fz: 20, padding: 12 };\r

  \  if (nundef(styles)) styles = {};\r

  \  let newStyles = deepmergeOverride(defStyles, styles);\r

  \  return mInputX(dParent, newStyles,\r

  \    { textPadding: 4, autoComplete: 'off', autoFocus: true, autoSelect:
  false })\r

  }"
stdInputSubmit: "function stdInputSubmit(dParent, styles, handler) {\r

  \  let defStyles = { fz: 20, padding: 12 };\r

  \  if (nundef(styles)) styles = {};\r

  \  let newStyles = deepmergeOverride(defStyles, styles);\r

  \  return mInputX(dParent, newStyles,\r

  \    { textPadding: 4, autoComplete: 'off', submitOnEnter: true, autoFocus:
  true, autoSelect: false, handler: handler })\r

  }"
stdInputVal: "function stdInputVal(dParent, styles, val, autoSelect = true) {\r

  \  let defStyles = { fz: 20, padding: 12 };\r

  \  if (nundef(styles)) styles = {};\r

  \  let newStyles = deepmergeOverride(defStyles, styles);\r

  \  return mInputX(dParent, newStyles,\r

  \    { value: val, textPadding: 4, autoComplete: 'off', submitOnEnter: true,
  autoFocus: true, autoSelect: autoSelect })\r

  }"
stdInstruction: "function stdInstruction(written, dParent, spoken, { fz, voice,
  lang } = {}) {\r

  \  if (isdef(lang) && lang == 'D' && nundef(voice)) voice = 'deutsch';\r

  \  else if (isdef(lang) && lang == 'E' && nundef(voice)) voice = 'random';\r

  \  if (nundef(voice)) voice = 'random';\r

  \  let d;\r

  \  if (isdef(dParent)) clearElement(dParent);\r

  \  dInstruction = d = mDiv(dParent);\r

  \  mStyleX(d, { margin: 15 })\r

  \  mClass(d, 'flexWrap');\r

  \  if (nundef(fz)) fz = 36;\r

  \  let d1 = mText(written, d, { fz: fz, display: 'inline-block' });\r

  \  if (isdef(spoken)) {\r

  \    let sym = symbolDict.speaker;\r

  \    let d2 = mText(sym.text, d, {\r

  \      fz: fz + 2, weight: 900, display: 'inline-block',\r

  \      family: sym.family, 'padding-left': 14\r

  \    });\r

  \    sayRandomVoice(spoken, spoken, voice);\r

  \  }\r

  \  dInstruction.onclick = () => aniInstruction(spoken);\r

  \  return d;\r

  }"
stdMenuButton: function stdMenuButton(parent, styles = {}) { return
  mButton(UnicodeSymbols.menu, null, parent, styles, 'mybutton'); }
stdRowOverlapContainer: "function stdRowOverlapContainer(dParent, n, wGrid,
  wCell, styles) {\r

  \  addKeys({\r

  \    w: wGrid,\r

  \    gap: 0,\r

  \    display: 'inline-grid',\r

  \    'grid-template-columns': `repeat(${n}, ${wCell}px)`\r

  \  }, styles);\r

  \  return mDiv(dParent, styles);\r

  }"
stdRowsColsContainer: "function stdRowsColsContainer(dParent, cols, styles = {})
  {\r

  \  addKeys({\r

  \    margin: 'auto',\r

  \    padding: 10,\r

  \    gap: 10,\r

  \    display: 'grid',\r

  \    bg: 'green',\r

  \    'grid-template-columns': `repeat(${cols}, 1fr)`\r

  \  }, styles);\r

  \  return mDiv(dParent, styles);\r

  }"
stdSidebarController: "function stdSidebarController(button, id) {\r

  \  let [ms, easing] = [500, 'cubic-bezier(.1,.67,.81,.68)'];\r

  \  button.onclick = () => {\r

  \    let d = mBy(id);\r

  \    let open = nundef(d.isOpen) || d.isOpen == true;\r

  \    d.isOpen = !open;\r

  \    let [from, to] = open ? [100, 0] : [0, 100];\r

  \    d.animate([{ width: `${from}px` }, { width: `${to}px` }], { duration:
  ms, easing: easing });\r

  \    setTimeout(() => d.style.width = `${to}px`, ms - 10);\r

  \  }\r

  }"
step: "function step() {\r\n}"
stop_game: function stop_game() { console.log('stopgame'); }
stop_polling: function stop_polling() { clearTimeout(TOTicker);
  IS_POLLING_ALLOWED = false; if (isdef(DA.poll)) console.log('...polling is
  OFF'); }
stop_simple_timer: function stop_simple_timer() { if (isdef(DA.timer)) {
  DA.timer.clear(); DA.timer = null; } }
stop_timer: "function stop_timer() {\r

  \  if (isdef(DA.timer)) {\r

  \    let res = DA.timer.clear();\r

  \    DA.timer = null;\r

  \    return isNumber(res) ? res : 0;\r

  \  }\r

  \  return 0;\r

  }"
stopAllHighlighting: "function stopAllHighlighting() {\r

  \  if (isdef(IdOwner.a)) IdOwner.a.map(x => _removeAllHighlighting(x));\r

  \  if (isdef(IdOwner.l)) IdOwner.l.map(x => _removeAllHighlighting(x));\r

  \  if (isdef(IdOwner.p)) IdOwner.p.map(x => _removeAllHighlighting(x));\r

  \  if (isdef(IdOwner.r)) IdOwner.r.map(x => _removeAllHighlighting(x));\r

  \  if (isdef(IdOwner.s)) IdOwner.s.map(x => _removeAllHighlighting(x));\r

  \  if (isdef(IdOwner.t)) IdOwner.t.map(x => _removeAllHighlighting(x));\r

  \  setTimeout(hideTooltip, 500);\r

  }"
stopBlinking: function stopBlinking(item) { if (isdef(item)) { item.isBlinking =
  false; mRemoveClass(iDiv(item), 'blink'); } }
stopgame: "function stopgame() {\r

  \  if (!DA.running) return;\r

  \  DA.running = false;\r

  \  DA.noshow = 0;\r

  \  clear_timeouts();\r

  \  hide('bRestartMove');\r

  \  hide('dHostButtons');\r

  \  mStyle('dAdmin', { bg: 'white' });\r

  \  mClear('dAdminMiddle')\r

  \  for (const id of ['bSpotitStart', 'bClearAck', 'bRandomMove',
  'bSkipPlayer']) hide(id);\r

  \  pollStop();\r

  \  Z = null; delete Serverdata.table; delete Serverdata.playerdata;
  Clientdata = {};\r

  \  staticTitle();\r

  }"
stopGame: "function stopGame() {\r

  \  resetState();\r

  }"
stopInteraction: "function stopInteraction() {\r

  \  if (isdef(IdOwner.a)) IdOwner.a.map(x => _removeInteraction(x));\r

  \  if (isdef(IdOwner.l)) IdOwner.l.map(x => _removeInteraction(x));\r

  \  if (isdef(IdOwner.p)) IdOwner.p.map(x => _removeInteraction(x));\r

  \  if (isdef(IdOwner.r)) IdOwner.r.map(x => _removeInteraction(x));\r

  \  if (isdef(IdOwner.s)) IdOwner.s.map(x => _removeInteraction(x));\r

  \  if (isdef(IdOwner.t)) IdOwner.t.map(x => _removeInteraction(x));\r

  \  setTimeout(hideTooltip, 500);\r

  }"
stopInteractionH: "function stopInteractionH() {\r

  \  if (isdef(IdOwner.a)) IdOwner.a.map(x => removeAllHighlighting(x));\r

  \  if (isdef(IdOwner.l)) IdOwner.l.map(x => removeAllHighlighting(x));\r

  \  if (isdef(IdOwner.p)) IdOwner.p.map(x => removeAllHighlighting(x));\r

  \  if (isdef(IdOwner.r)) IdOwner.r.map(x => removeAllHighlighting(x));\r

  \  if (isdef(IdOwner.s)) IdOwner.s.map(x => removeAllHighlighting(x));\r

  \  if (isdef(IdOwner.t)) IdOwner.t.map(x => removeAllHighlighting(x));\r

  \  setTimeout(hideTooltip, 500);\r

  }"
STOPP: function STOPP() { stopgame(); clear_screen(); assertion(Z == null,
  "ZZZZZZZZZZ NOT NULL") }
stopPolling: function stopPolling() { pollStop(); }
stopPulsating: function stopPulsating(item) { if (isdef(item)) {
  item.isPulsating = false; mRemoveClass(iDiv(item), 'onPulse'); } }
StopThinking: "function StopThinking() {\r

  \  let img = mBy('ThinkingPng');\r

  \  mClassRemove(img, 'blinkFast');\r

  \  hide(img);\r

  \  hideShield();\r

  }"
storePositionData: "function storePositionData(g1) {\r

  \  let ids = g1.getNodeIds();\r

  \  let x = 10; let y = 10;\r

  \  for (const id of ids) {\r

  \    g1.setProp(id, 'center', { x: x, y: y });\r

  \    x += 50; y += 50; if (y > 250) { y = 10; } if (x > 550) { x = 10; }\r

  \  }\r

  }"
StorePvMove: "function StorePvMove(move) {\r

  \  var index = brd_posKey % PVENTRIES;\r

  \  brd_PvTable[index].move = move;\r

  \  brd_PvTable[index].posKey = brd_posKey;\r

  }"
storeRoomPositions: "function storeRoomPositions(g1, house) {\r

  \  let ids = g1.getNodeIds();\r

  \  let di = g1.posDict = {};\r

  \  for (const id of ids) {\r

  \    let r = Items[id];\r

  \    let center = getCenter(iDiv(r));\r

  \    center.x += r.rect.x;\r

  \    center.y += r.rect.y;\r

  \    g1.setProp(id, 'center', center);\r

  \    di[id] = center;\r

  \  }\r

  }"
strategicBoat: "function strategicBoat(goodlist, badlist) {\r

  \  let boats = getBoats();\r

  \  let goodBoats = boats;\r

  \  if (isdef(badlist)) {\r

  \    goodBoats = [];\r

  \    for (const b of boats) {\r

  \      if (isEmpty(badlist.filter(x => b.o.text.join(',').includes(x))))
  goodBoats.push(b);\r

  \    }\r

  \  }\r

  \  if (isdef(goodlist)) {\r

  \    for (const kw of goodlist) {\r

  \      for (const b of boats) {\r

  \        if (b.o.text.join(',').includes(kw) || b.o.desc.includes(kw))
  return b;\r

  \      }\r

  \    }\r

  \  }\r

  \  return chooseRandom(goodBoats);\r

  }"
stressTest: "function stressTest() {\r

  \  initRSGData(); showGame(); initDom();\r

  \  timit.reset();\r

  \  let board = makeDrawingArea('board', 'a_d_game', true);\r

  \  coll = drawTest(board, 3);\r

  }"
stressTest01: "function stressTest01(area) {\r

  \  timit.showTime('*test')\r

  \  let n = 500;\r

  \  for (let index = 0; index < n; index++) {\r

  \    showPictoDivCentered('crow', area, randomColor(), n + 25 - index);\r

  \  }\r

  \  timit.showTime('*test done...');\r

  \  if (testCounter > 0) { testCounter -= 1; setTimeout(_startStep, 0); }\r

  \  else {\r

  \    let t = timit.getTotalTimeElapsed();\r

  \    console.log('avg msecs per cycle:', t / 100, 'cycle size:', n)\r

  \  }\r

  }"
stringAfter: "function stringAfter(sFull, sSub) {\r

  \  let idx = sFull.indexOf(sSub);\r

  \  if (idx < 0) return '';\r

  \  return sFull.substring(idx + sSub.length);\r

  }"
stringAfterLast: "function stringAfterLast(sFull, sSub) {\r

  \  let parts = sFull.split(sSub);\r

  \  return arrLast(parts);\r

  }"
stringAfterLeadingConsonants: "function stringAfterLeadingConsonants(s) {\r

  \  let regexpcons = /^([^aeiou])+/g;\r

  \  let x = s.match(regexpcons);\r

  \  return x ? s.substring(x[0].length) : s;\r

  }"
stringBefore: "function stringBefore(sFull, sSub) {\r

  \  let idx = sFull.indexOf(sSub);\r

  \  if (idx < 0) return sFull;\r

  \  return sFull.substring(0, idx);\r

  }"
stringBeforeLast: "function stringBeforeLast(sFull, sSub) {\r

  \  let parts = sFull.split(sSub);\r

  \  return sFull.substring(0, sFull.length - arrLast(parts).length - 1);\r

  }"
stringBetween: "function stringBetween(sFull, sStart, sEnd) {\r

  \  return stringBefore(stringAfter(sFull, sStart), isdef(sEnd) ? sEnd :
  sStart);\r

  }"
stringBetweenLast: "function stringBetweenLast(sFull, sStart, sEnd) {\r

  \  let s1 = stringBeforeLast(sFull, isdef(sEnd) ? sEnd : sStart);\r

  \  return stringAfterLast(s1, sStart);\r

  }"
stringDivider: "function stringDivider(str, width, spaceReplacer) {\r

  \  if (str.length > width) {\r

  \    let p = width;\r

  \    while (p > 0 && str[p] != ' ' && str[p] != '-') {\r

  \      p--;\r

  \    }\r

  \    if (p > 0) {\r

  \      let left;\r

  \      if (str.substring(p, p + 1) == '-') {\r

  \        left = str.substring(0, p + 1);\r

  \      } else {\r

  \        left = str.substring(0, p);\r

  \      }\r

  \      const right = str.substring(p + 1);\r

  \      return left + spaceReplacer + stringDivider(right, width,
  spaceReplacer);\r

  \    }\r

  \  }\r

  \  return str;\r

  }"
stringLast: function stringLast(s, n) { return s.substring(s.length - n, s.length); }
stringToMatrix: "function stringToMatrix(s, rows, cols) {\r

  \  if (isNumber(s)) s = String(s);\r

  \  let letters = toLetterArray(s);\r

  \  let nums = letters.map(x => Number(x));\r

  \  let matrix = arrToMatrix(nums, rows, cols);\r

  }"
stripObject: "function stripObject(o, keysToDelete) {\r

  \  for (const k of keysToDelete) {\r

  \    if (isdef(o[k])) delete o[k];\r

  \  }\r

  }"
stripSet: "function stripSet(x) {\r

  \  if (isListOfListOfActions(x)) return x;\r

  \  else if (isActionElement(x)) return [[x]];\r

  \  else if (isList(x) && isActionElement(x[0])) return [x];\r

  \  else return [].concat(...x.map(stripSet));\r

  }"
stripToKeys: "function stripToKeys(o, di) {\r

  \  let res = {};\r

  \  for (const k in o) {\r

  \    if (isdef(di[k])) res[k] = o[k];\r

  \  }\r

  \  return res;\r

  }"
strKeys: function strKeys(dict) { return getKeys(dict).toString(); }
stubPlayerConfig: "function stubPlayerConfig(gameInfo) {\r

  \  gcs = {};\r

  \  for (const gName in gameInfo) {\r

  \    let info = gameInfo[gName]\r

  \    let nPlayers = info.num_players[0];\r

  \    let pls = [];\r

  \    for (let i = 0; i < nPlayers; i++) {\r

  \      let pl = { id: info.player_names[i], playerType: 'me', agentType:
  null, username: USERNAME + (i > 0 ? i : '') };\r

  \      pls.push(pl);\r

  \    }\r

  \    gcs[gName] = { numPlayers: nPlayers, players: pls };\r

  \  }\r

  \  return gcs;\r

  }"
style_not_playing: "function style_not_playing(item, game, list) {\r

  \  console.log('item', item, 'game', game, 'list', list)\r

  \  let ui = iDiv(item); let uname = ui.getAttribute('username');\r

  \  mStyle(ui, { bg: 'transparent', fg: 'black' });\r

  \  arrLast(arrChildren(ui)).innerHTML = uname;\r

  \  item.ifunc = 0; item.playmode = 'none'; removeInPlace(list, item);\r

  }"
style_playing_as_bot: "function style_playing_as_bot(item, game, list) {\r

  \  let ui = iDiv(item); let uname = ui.getAttribute('username'); let bg =
  get_game_color(game);\r

  \  mStyle(ui, { bg: bg, fg: colorIdealText(bg) });\r

  \  arrLast(arrChildren(ui)).innerHTML = uname.substring(0, 3) + 'bot';\r

  \  item.ifunc = 2; item.playmode = 'bot';\r

  }"
style_playing_as_human: "function style_playing_as_human(item, game, list) {\r

  \  let ui = iDiv(item); let uname = ui.getAttribute('username');\r

  \  mStyle(ui, { bg: get_user_color(uname), fg:
  colorIdealText(get_user_color(uname)) });\r

  \  arrLast(arrChildren(ui)).innerHTML = uname;\r

  \  item.ifunc = 1; item.playmode = 'human'; list.push(item);\r

  }"
styles_to_leaflet_options: "function styles_to_leaflet_options(o) {\r

  \  let res = {};\r

  \  let di = {\r

  \    fg: 'color', bg: 'fillColor', opacity: 'fillOpacity', sz: 'radius'\r

  \  };\r

  \  for (const k in o) {\r

  \    if (k == 'sz') o[k] /= 2;\r

  \    res[isdef(di[k]) ? di[k] : k] = o[k];\r

  \  }\r

  \  return res;\r

  }"
subDict: "function subDict(d, keys) {\r

  \  let dNew = {};\r

  \  for (const key of keys) {\r

  \    if (key in d) {\r

  \      dNew[key] = d[key];\r

  \    }\r

  \  }\r

  \  return dNew;\r

  }"
subdictOf: "function subdictOf(dict1, keylist) {\r

  \  let res = {};\r

  \  for (const k of keylist) {\r

  \    res[k] = dict1[k];\r

  \  }\r

  \  return res;\r

  }"
submit_form: "function submit_form(fname) {\r

  \  if (typeof document.getElementById(fname).submit === \"object\") {\r

  \    document.getElementById(fname).submit.remove();\r

  \  }\r

  \  document.getElementById(fname).submit();\r

  }"
substringOfMinLength: "function substringOfMinLength(s, minStartIndex,
  minLength) {\r

  \  let res = s.substring(minStartIndex).trim();\r

  \  let i = 0;\r

  \  let res1 = '';\r

  \  while (res1.trim().length < minLength && i < res.length) { res1 +=
  res[i]; i += 1; }\r

  \  return res1.trim();\r

  }"
success_pic_goal: "function success_pic_goal(withComment = true) {\r

  \  let lang = G.language;\r

  \  if (withComment && G.spokenFeedback) {\r

  \    const comments = {\r

  \      E: ['YEAH!', 'Excellent!!!', 'CORRECT!', 'Great!!!'],\r

  \      D: ['gut', 'Sehr Gut!!!', 'richtig!!', 'Bravo!!!'],\r

  \      S: ['bien', 'muy bien!!!', 'eccelente!!', 'bravo!!!'],\r

  \      F: ['bien', 'tres bien!!!', 'fantastique!!', 'bravo!!!',
  'excellent!!!'],\r

  \      C: ['优秀', '好的!!!', '正确的!!', 'Bravo!!!'],\r

  \    }[lang];\r

  \    say(chooseRandom(comments), lang);\r

  \  }\r

  \  if (isdef(Selected) && isdef(Selected.feedbackUI)) {\r

  \    let uilist;\r

  \    if (isdef(Selected.positiveFeedbackUI)) uilist =
  [Selected.positiveFeedbackUI];\r

  \    else uilist = isList(Selected.feedbackUI) ? Selected.feedbackUI :
  [Selected.feedbackUI];\r

  \    let sz = getRect(uilist[0]).h;\r

  \    for (const ui of uilist) {\r

  \      let d = markerSuccess();\r

  \      mpOver(d, ui, sz * (4 / 5), 'limegreen', 'segoeBlack');\r

  \    }\r

  \  }\r

  }"
successPictureGoal: "function successPictureGoal(withComment = true) {\r

  \  if (withComment && G.spokenFeedback) {\r

  \    const comments = (G.language == 'E' ? ['YEAH!', 'Excellent!!!',
  'CORRECT!', 'Great!!!'] : ['gut', 'Sehr Gut!!!', 'richtig!!', 'Bravo!!!']);\r

  \    sayRandomVoice(chooseRandom(comments));\r

  \  }\r

  \  if (isdef(Selected) && isdef(Selected.feedbackUI)) {\r

  \    let uilist;\r

  \    if (isdef(Selected.positiveFeedbackUI)) uilist =
  [Selected.positiveFeedbackUI];\r

  \    else uilist = isList(Selected.feedbackUI) ? Selected.feedbackUI :
  [Selected.feedbackUI];\r

  \    let sz = getRect(uilist[0]).h;\r

  \    for (const ui of uilist) {\r

  \      let d = markerSuccess();\r

  \      mpOver(d, ui, sz * (4 / 5), 'limegreen', 'segoeBlack');\r

  \    }\r

  \  }\r

  }"
successThumbsUp: "function successThumbsUp(withComment = true) {\r

  \  if (withComment && G.spokenFeedback) {\r

  \    const comments = (G.language == 'E' ? ['YEAH!', 'Excellent!!!',
  'CORRECT!', 'Great!!!'] : ['gut', 'Sehr Gut!!!', 'richtig!!', 'Bravo!!!']);\r

  \    sayRandomVoice(chooseRandom(comments));\r

  \  }\r

  \  let p1 = firstCond(Pictures, x => x.key == 'thumbs up');\r

  \  iDiv(p1).style.opacity = 1;\r

  \  let p2 = firstCond(Pictures, x => x.key == 'thumbs down');\r

  \  iDiv(p2).style.display = 'none';\r

  }"
successThumbsUpPlus: "function successThumbsUpPlus(withComment = true) {\r

  \  if (withComment && G.spokenFeedback) {\r

  \    const comments = (G.language == 'E' ? ['YEAH!', 'Excellent!!!',
  'CORRECT!', 'Great!!!'] : ['gut', 'Sehr Gut!!!', 'richtig!!', 'Bravo!!!']);\r

  \    sayRandomVoice(chooseRandom(comments));\r

  \  }\r

  \  let p1 = firstCond(Pictures, x => x.key == 'thumbs up');\r

  \  iDiv(p1).style.opacity = 1;\r

  \  let p2 = firstCond(Pictures, x => x.key == 'thumbs down');\r

  \  iDiv(p2).style.display = 'none';\r

  \  if (isdef(Selected) && isdef(Selected.feedbackUI)) {\r

  \    let uilist;\r

  \    if (isdef(Selected.positiveFeedbackUI)) uilist =
  [Selected.positiveFeedbackUI];\r

  \    else uilist = isList(Selected.feedbackUI) ? Selected.feedbackUI :
  [Selected.feedbackUI];\r

  \    let sz = getRect(uilist[0]).h;\r

  \    for (const ui of uilist) {\r

  \      let d = markerSuccess();\r

  \      mpOver(d, ui, sz * (4 / 5), 'limegreen', 'segoeBlack');\r

  \    }\r

  \  }\r

  }"
sudoku99Examples: "function sudoku99Examples() {\r

  \  var veryeasyGameArr = [\r

  \    [2, 0, 3, 0, 0, 8, 6, 0, 7],\r

  \    [1, 4, 0, 7, 2, 6, 0, 0, 9],\r

  \    [5, 0, 7, 1, 3, 9, 4, 2, 8],\r

  \    [0, 2, 5, 0, 8, 1, 9, 0, 4],\r

  \    [4, 1, 0, 9, 0, 3, 2, 0, 5],\r

  \    [0, 7, 9, 2, 0, 5, 0, 3, 6],\r

  \    [6, 0, 2, 0, 1, 0, 0, 9, 3],\r

  \    [7, 0, 0, 5, 0, 2, 0, 0, 1],\r

  \    [0, 8, 1, 3, 6, 7, 0, 4, 0]\r

  \  ];\r

  \  var easyGameArr = [\r

  \    [0, 3, 0, 0, 0, 0, 0, 0, 0],\r

  \    [0, 2, 0, 9, 0, 6, 3, 0, 0],\r

  \    [0, 6, 0, 4, 0, 2, 0, 9, 0],\r

  \    [1, 0, 0, 0, 9, 0, 4, 0, 0],\r

  \    [0, 0, 8, 1, 0, 3, 5, 0, 0],\r

  \    [0, 0, 5, 0, 7, 0, 0, 0, 3],\r

  \    [0, 5, 0, 3, 0, 1, 0, 6, 0],\r

  \    [0, 0, 4, 6, 0, 7, 0, 3, 0],\r

  \    [0, 0, 0, 0, 0, 0, 0, 8, 0]\r

  \  ];\r

  \  var mediumGameArr = [\r

  \    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r

  \    [0, 0, 0, 0, 0, 3, 0, 8, 5],\r

  \    [0, 0, 1, 0, 2, 0, 0, 0, 0],\r

  \    [0, 0, 0, 5, 0, 7, 0, 0, 0],\r

  \    [0, 0, 4, 0, 0, 0, 1, 0, 0],\r

  \    [0, 9, 0, 0, 0, 0, 0, 0, 0],\r

  \    [5, 0, 0, 0, 0, 0, 0, 7, 3],\r

  \    [0, 0, 2, 0, 1, 0, 0, 0, 0],\r

  \    [0, 0, 0, 0, 4, 0, 0, 0, 9]\r

  \  ];\r

  \  var hardGameArr = [\r

  \    [0, 0, 0, 0, 0, 7, 0, 0, 0],\r

  \    [0, 0, 2, 4, 0, 6, 3, 0, 0],\r

  \    [0, 1, 7, 0, 0, 0, 9, 6, 0],\r

  \    [5, 8, 0, 0, 0, 0, 0, 3, 0],\r

  \    [0, 0, 0, 0, 9, 0, 0, 0, 0],\r

  \    [0, 7, 0, 0, 0, 0, 0, 4, 2],\r

  \    [0, 9, 4, 0, 0, 0, 6, 5, 0],\r

  \    [0, 0, 5, 2, 0, 8, 1, 0, 0],\r

  \    [0, 0, 0, 5, 0, 0, 0, 0, 0]\r

  \  ];\r

  \  var hardGameArr2 = [\r

  \    [0, 4, 3, 0, 1, 0, 0, 0, 0],\r

  \    [0, 0, 2, 0, 7, 0, 0, 3, 1],\r

  \    [8, 0, 0, 0, 0, 9, 0, 0, 0],\r

  \    [3, 0, 9, 0, 0, 5, 0, 0, 0],\r

  \    [0, 2, 5, 0, 0, 0, 4, 7, 0],\r

  \    [0, 0, 0, 7, 0, 0, 3, 0, 6],\r

  \    [0, 0, 0, 9, 0, 0, 0, 0, 5],\r

  \    [9, 5, 0, 0, 2, 0, 1, 0, 0],\r

  \    [0, 0, 0, 0, 5, 0, 6, 9, 0]\r

  \  ];\r

  \  var hardGameArr3 = [\r

  \    [0, 3, 0, 0, 5, 0, 2, 0, 8],\r

  \    [0, 0, 4, 0, 0, 0, 9, 0, 0],\r

  \    [0, 0, 0, 6, 0, 0, 0, 1, 0],\r

  \    [0, 6, 7, 5, 0, 0, 1, 0, 0],\r

  \    [0, 0, 0, 0, 8, 0, 0, 0, 0],\r

  \    [0, 0, 1, 0, 0, 9, 8, 4, 0],\r

  \    [0, 7, 0, 0, 0, 6, 0, 0, 0],\r

  \    [0, 0, 8, 0, 0, 0, 3, 0, 0],\r

  \    [1, 0, 2, 0, 4, 0, 0, 8, 0]\r

  \  ];\r

  \  var evilGameArr = [\r

  \    [8, 0, 0, 0, 0, 0, 0, 0, 0],\r

  \    [0, 0, 3, 6, 0, 0, 0, 0, 0],\r

  \    [0, 7, 0, 0, 9, 0, 2, 0, 0],\r

  \    [0, 5, 0, 0, 0, 7, 0, 0, 0],\r

  \    [0, 0, 0, 0, 4, 5, 7, 0, 0],\r

  \    [0, 0, 0, 1, 0, 0, 0, 3, 0],\r

  \    [0, 0, 1, 0, 0, 0, 0, 6, 8],\r

  \    [0, 0, 8, 5, 0, 0, 0, 1, 0],\r

  \    [0, 9, 0, 0, 0, 0, 4, 0, 0]\r

  \  ];\r

  \  var evilGameArr2 = [\r

  \    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r

  \    [0, 0, 0, 0, 0, 3, 0, 8, 5],\r

  \    [0, 0, 1, 0, 2, 0, 0, 0, 0],\r

  \    [0, 0, 0, 5, 0, 7, 0, 0, 0],\r

  \    [0, 0, 4, 0, 0, 0, 1, 0, 0],\r

  \    [0, 9, 0, 0, 0, 0, 0, 0, 0],\r

  \    [5, 0, 0, 0, 0, 0, 0, 7, 3],\r

  \    [0, 0, 2, 0, 1, 0, 0, 0, 0],\r

  \    [0, 0, 0, 0, 4, 0, 0, 0, 9]\r

  \  ];\r

  \  console.log(\"\");\r

  \  console.log(\"Starting game - VERY EASY\")\r

  \  print_board(veryeasyGameArr)\r

  \  console.log(\"\");\r

  \  console.log(\"Completed solution\")\r

  \  print_board(solve(veryeasyGameArr))\r

  \  console.log(\"\");\r

  \  console.log(\"Starting game - EASY\")\r

  \  print_board(easyGameArr)\r

  \  console.log(\"\");\r

  \  console.log(\"Completed solution\")\r

  \  print_board(solve(easyGameArr))\r

  \  console.log(\"\");\r

  \  console.log(\"Starting game - MEDIUM\")\r

  \  print_board(mediumGameArr)\r

  \  console.log(\"\");\r

  \  console.log(\"Completed solution\")\r

  \  print_board(solve(mediumGameArr))\r

  \  console.log(\"\");\r

  \  console.log(\"Starting game - HARD\")\r

  \  print_board(hardGameArr)\r

  \  console.log(\"\");\r

  \  console.log(\"Completed solution\")\r

  \  print_board(solve(hardGameArr))\r

  \  console.log(\"\");\r

  \  console.log(\"Starting game - HARD #2\")\r

  \  print_board(hardGameArr2)\r

  \  console.log(\"\");\r

  \  console.log(\"Completed solution\")\r

  \  print_board(solve(hardGameArr2))\r

  \  console.log(\"\");\r

  \  console.log(\"Starting game - HARD #3\")\r

  \  print_board(hardGameArr3)\r

  \  console.log(\"\");\r

  \  console.log(\"Completed solution\")\r

  \  print_board(solve(hardGameArr3))\r

  \  console.log(\"\");\r

  \  console.log(\"Starting game - EVIL\")\r

  \  print_board(evilGameArr)\r

  \  console.log(\"\");\r

  \  console.log(\"Completed solution\")\r

  \  print_board(solve(evilGameArr))\r

  \  console.log(\"\");\r

  \  console.log(\"Starting game - EVIL #2\")\r

  \  print_board(evilGameArr2)\r

  \  console.log(\"\");\r

  \  console.log(\"Completed solution\")\r

  \  print_board(solve(evilGameArr2))\r

  }"
sudokuSampleToIndexMatrix: "function sudokuSampleToIndexMatrix(s, rows, cols)
  {\r

  \  if (isNumber(s)) s = String(s);\r

  \  let letters = toLetterArray(s);\r

  \  let nums = letters.map(x => Number(x));\r

  \  let res = [];\r

  \  for (const n of nums) {\r

  \    if (n === 0) res.push(' ');\r

  \    else res.push(n - 1);\r

  \  }\r

  \  let matrix = arrToMatrix(res, rows, cols);\r

  \  return matrix;\r

  }"
sumProp: "function sumProp(olist, prop) {\r

  \  let res = 0;\r

  \  for (const d of olist) {\r

  \    res += d[prop];\r

  \  }\r

  \  return res;\r

  }"
suTest00: "function suTest00() {\r

  \  let [rows, cols] = [4, 4];\r

  \  let pattern = getSudokuPattern(rows, cols);\r

  \  printMatrix(pattern, 'pattern');\r

  \  let colarrs = bGetCols(pattern); printMatrix(colarrs, 'transposed');\r

  \  let rowarrs = bGetCols(colarrs); printMatrix(rowarrs, 'normal');\r

  \  let cFlat = arrFlatten(rowarrs);\r

  \  let aRows = bGetRows(pattern);\r

  \  let rFlat = arrFlatten(aRows);\r

  \  console.assert(sameList(cFlat, rFlat), 'TRANSPOSE DOES NOT
  WORK!!!!!!!!!!!!!!!')\r

  \  let correct = checkSudokuRule(pattern);\r

  }"
switch_uname: "function switch_uname(plname) {\r

  \  set_user(plname);\r

  \  show_username();\r

  }"
switchPlayerArea: "function switchPlayerArea() {\r

  \  if (G.previousPlayer) {\r

  \    let msPrevPlayerArea = getPlayerArea(G.previousPlayer);\r

  \    if (msPrevPlayerArea) {\r

  \      msPrevPlayerArea.hide();\r

  \    }\r

  \  }\r

  \  let msPlayerArea = getPlayerArea(G.player);\r

  \  if (msPlayerArea) {\r

  \    msPlayerArea.show();\r

  \  }\r

  }"
symbolcolor: "function symbolcolor(card, color) {\r

  \  let d = iDiv(card);\r

  \  let els = d.getElementsByTagName('symbol');\r

  \  console.log('list', els)\r

  \  for (const el of els) {\r

  \    let html = el.innerHTML;\r

  \    let html1 = replaceAll(html, 'red', color);\r

  \    let html2 = replaceAll(html1, 'black', color);\r

  \    el.innerHTML = html2;\r

  \  }\r

  }"
symbolMeasuring: "function symbolMeasuring() {\r

  \  clearElement('wrapper');\r

  \  dTable = mDiv(mBy('wrapper'), { position: 'absolute', padding: 10, bg:
  'white', overflow: 'scroll' });\r

  \  let items = []; let n = SymKeys.length;\r

  \  for (let i = 0; i < n; i++) {\r

  \    let k = SymKeys[i];\r

  \    let info = Syms[k];\r

  \    let d = mDiv(dTable, { fz: 100, family: info.family, bg: 'random',
  display: 'inline' }, null, info.text);\r

  \    let item = { div: d, k: k, info: info };\r

  \    items.push(item);\r

  \  }\r

  \  setTimeout(() => symbolMeasuring2(items), 5000);\r

  }"
symbolMeasuring2: "function symbolMeasuring2(items) {\r

  \  for (let i = 0; i < items.length; i++) {\r

  \    let item = items[i];\r

  \    let r = getRect(item.div);\r

  \    item.info.w = Math.round(r.w);\r

  \    item.info.h = Math.round(r.h);\r

  \  }\r

  \  let newDict = {};\r

  \  for (const item of items) {\r

  \    newDict[item.k] = item.info;\r

  \  }\r

  \  downloadAsYaml(newDict, 'syms');\r

  }"
sync_users: "function sync_users(php_users) {\r

  \  let result = [];\r

  \  let changed = false;\r

  \  for (const udata of php_users) {\r

  \    if (nundef(udata.id)) return php_users;\r

  \    let name = udata.username;\r

  \    let u = DB.users[name];\r

  \    if (nundef(u)) {\r

  \      changed = true;\r

  \      let db_user = { name: name, color: randomColor(), motto:
  random_motto(), image: startsWith(udata.image, name), games: {}, tables: {},
  };\r

  \      add_new_user(db_user, false);\r

  \      result.push(db_user);\r

  \    } else result.push(u)\r

  \  }\r

  \  if (changed) db_save();\r

  \  if (!is_online()) return result;\r

  \  let di = {}; php_users.map(x => di[x.username] = x);\r

  \  let not_in_sql_db = [];\r

  \  for (const name in DB.users) {\r

  \    let u = DB.users[name];\r

  \    if (nundef(di[name]) && name != Session.cur_user) {
  not_in_sql_db.push(name); addIf(result, u); }\r

  \  }\r

  \  if (!isEmpty(not_in_sql_db)) add_users_to_sql_db(not_in_sql_db);\r

  \  return result;\r

  }"
sysColor: function sysColor(iPalette, ipal) { return S.pals[iPalette][ipal]; }
t0_textarea: "function t0_textarea() {\r

  \  dTable = mBy('dTable'); mCenterFlex(dTable);\r

  \  mDiv(dTable, { w: '100%' }, null, 'Enter Code:');\r

  \  let d = mTextArea(25, 120, dTable, { fz: 16, margin: 'auto', padding: 10,
  outline: 'none', border: 'none' }, 'dCode');\r

  \  let dButtons = mDiv(dTable, { display: 'flex', w: '100%' });\r

  \  let asave = mLink(\"javascript:void(0)\", dButtons, {}, null, 'Save
  Code', 'a');\r

  \  asave.onclick = db_add_code;\r

  \  let aclear = mLink(\"javascript:void(0)\", dButtons, {}, null, 'Clear
  Code', 'a');\r

  \  aclear.onclick = () => console.log('click clear code!');\r

  }"
t00_makeWordProblemsDict: async function t00_makeWordProblemsDict() { let wp =
  await makeWordProblemsDict(); }
t00_oldTests: "async function t00_oldTests() {\r\n}"
t00_timitTests: "async function t00_timitTests() {\r

  \  timit.show('*'); console.assert(isdef(DB));\r

  \  timit.show('DONE')\r

  }"
t00_wpInstantiate: "async function t00_wpInstantiate() {\r

  \  let wp = await route_path_yaml_dict('../assets/math/allWP.yaml');\r

  \  let p = firstCond(wp, x => x.index == 40);\r

  \  instantiateWP(p);\r

  }"
t01: "function t01() {\r

  \  showPictureGrid(['cockroach'], dTable)\r

  }"
t01_fractions: "function t01_fractions() {\r

  \  console.log(math.add(math.fraction(0.1), math.fraction(0.2)))\r

  \  console.log(math.divide(math.fraction(0.3), math.fraction(0.2)))\r

  \  console.log(math.subtract(math.fraction(0.1), math.fraction(0.2)))\r

  }"
t01_getTextForFraction: "function t01_getTextForFraction() { mText('you have 5 '
  + getTextForFraction(1, 2) + ' muffins', dTable, { fz: 100 }); }"
t01_numbers: "function t01_numbers() {\r

  \  var array1 = [0, 1, 2];\r

  \  var array2 = [3, 4, 5];\r

  \  let x = numbers.matrix.addition(array1, array2);\r

  \  console.log(x);\r

  \  numbers.matrix.transpose(x);\r

  \  console.log(numbers.prime.simple(171));\r

  }"
t1: "function t1() {\r

  \  let a1 = { type: 1 };\r

  \  let a2 = { type: 2 };\r

  \  let a3 = { type: 3 };\r

  \  let a = {\r

  \    tic: {\r

  \      actions:\r

  \      {\r

  \        _set:\r

  \          [{ _tuple: [{ _set: [a1, a2, a3] }] }]\r

  \      }\r

  \    }\r

  \  };\r

  }"
t2: "function t2(act) {\r

  \  let res = [];\r

  \  for (const key in act) {\r

  \    let data = act[key].actions;\r

  \    let e = exp(data);\r

  \    res.push(e)\r

  \  }\r

  \  return res;\r

  }"
table_options_to_game_options: "function table_options_to_game_options(t) {\r

  \  console.log('t', t);\r

  \  let settings = { game: {} };\r

  \  copyKeys(t.options, settings.game);\r

  \  return settings;\r

  }"
table_shield_off: "function table_shield_off() {\r

  \  if (isdef(dTableShield)) { dTableShield.remove(); dTableShield = null;
  }\r

  }"
table_shield_on: "function table_shield_on() {\r

  \  if (nundef(dTableShield)) {\r

  \    dTableShield = mDiv(dTable, { position: 'absolute', bg: '#0000ff80', w:
  '100%', h: '100%' });\r

  \    dTableShield.style.zIndex = 1000;\r

  \  }\r

  }"
tableDimensions: "function tableDimensions(w, h) {\r

  \  setCSSVariable('--wGame', '' + w + 'px');\r

  \  setCSSVariable('--hGame', '' + h + 'px');\r

  \  return { w: w, h: h };\r

  }"
tableElem: "function tableElem(o, keys) {\r

  \  let t = document.createElement('table');\r

  \  t.classList.add('tttable');\r

  \  let s = '';\r

  \  for (const k in o) {\r

  \    if (isdef(keys) && !keys.includes(k)) continue;\r

  \    s += '<tr><th>' + k + '</th><td>';\r

  \    let val = o[k];\r

  \    let sval = null;\r

  \    if (isListOf_Obj(val)) {\r

  \      sval = `<div class='up10 hallo'>${val.map(x => !x ? '_' :
  x._obj).toString()}</div>`;\r

  \    } else if (val && isDict(val) && '_obj' in val) {\r

  \      sval = `<div class='up10 hallo'>${val._obj.toString()}</div>`;\r

  \    }\r

  \    if (!sval) sval = isSet(val) ? empty(val._set) ? '{ }' : simpleRep(val)
  : isDict(val) ? tableHTML(val, 4) : simpleRep(val);\r

  \    s += sval + '</td>';\r

  \  }\r

  \  t.innerHTML = s;\r

  \  return t;\r

  }"
tableElemX: "function tableElemX(o, keys) {\r

  \  let t = document.createElement('table');\r

  \  t.classList.add('tttable');\r

  \  let refs = [];\r

  \  let s = '';\r

  \  for (const k in o) {\r

  \    if (isdef(keys) && !keys.includes(k)) continue;\r

  \    s += '<tr><th>' + k + '</th><td>';\r

  \    let sval = transformToString(k, o[k], refs);\r

  \    s += sval + '</td>';\r

  \  }\r

  \  t.innerHTML = s;\r

  \  return { table: t, refs: refs };\r

  }"
tableElemY: "function tableElemY(o, keys) {\r

  \  let t = document.createElement('table');\r

  \  t.classList.add('tttable');\r

  \  let refs = [];\r

  \  let s = '';\r

  \  for (const k in o) {\r

  \    if (isdef(keys) && !keys.includes(k)) continue;\r

  \    s += '<tr><th>' + k + '</th><td>';\r

  \    let val = o[k];\r

  \    let sval = null;\r

  \    if (isListOf(val, '_obj')) {\r

  \      let cl = 't_r_' + getUID(); let ref = { oids: val.filter(x =>
  isdef(x)).map(x => x._obj), id: cl }; refs.push(ref);\r

  \      sval = `<div id=${cl} class='up10 hallo'>${val.map(x => !x ? '_' :
  x._obj).toString()}</div>`;\r

  \    } else if (val && isDict(val) && '_obj' in val) {\r

  \      let cl = 't_r_' + getUID(); let ref = { oids: [val._obj], id: cl };
  refs.push(ref);\r

  \      sval = `<div id=${cl} class='up10
  hallo'>${val._obj.toString()}</div>`;\r

  \    } else if (val && isDict(val) && '_ndarray' in val) {\r

  \      let rows = val._ndarray;\r

  \      sval = `<div>`;\r

  \      let rowClass = 'up2 hallo';\r

  \      for (const row of rows) {\r

  \        let cl = 't_r_' + getUID(); let ref = { oids: row.filter(x =>
  isdef(x)).map(x => x._obj), id: cl }; refs.push(ref);\r

  \        sval += `<div id=${cl} class='${rowClass}'>${row.map(x => !x ? '_'
  : x._obj).toString()}</div><br>`;\r

  \        rowClass = 'hallo';\r

  \      }\r

  \      sval += '</div>';\r

  \    } else if (val && isDict(val) && '_player' in val) {\r

  \      let cl = 'p_r_' + getUID(); let ref = { oids: [val._player], id: cl
  }; refs.push(ref);\r

  \      sval = `<div id=${cl} class='up10
  hallo'>${val._player.toString()}</div>`;\r

  \    }\r

  \    if (!sval) {\r

  \      sval = isSet(val) ? empty(val._set) ? '{ }' : simpleRep(val) :
  isDict(val) ? tableHTMLY(val, refs) : simpleRep(val);\r

  \    }\r

  \    s += sval + '</td>';\r

  \  }\r

  \  t.innerHTML = s;\r

  \  return { table: t, refs: refs };\r

  }"
tableHTML: "function tableHTML(o) {\r

  \  let s = '<table class=\"tttable up10\">';\r

  \  for (const k in o) {\r

  \    s += '<tr><th>' + k + '</th><td>';\r

  \    let val = o[k];\r

  \    let sval = null;\r

  \    if (isListOf_Obj(val)) sval = `<div class='up10 hallo'>${val.map(x =>
  !x ? '_' : x._obj).toString()}</div>`;\r

  \    else if (val && isDict(val) && '_obj' in val) sval = `<div class='up10
  hallo'>${val._obj.toString()}</div>`;\r

  \    if (!sval) sval = isSet(val) ? empty(val._set) ? '{ }' : simpleRep(val)
  : isDict(val) ? tableHTML(val) : simpleRep(val);\r

  \    s += sval + '</td>';\r

  \  }\r

  \  s += '</table>';\r

  \  return s;\r

  }"
tableHTMLX: "function tableHTMLX(o, refs) {\r

  \  let s = '<table class=\"tttable up10\">';\r

  \  for (const k in o) {\r

  \    s += '<tr><th>' + k + '</th><td>';\r

  \    let sval = transformToString(k, o[k], refs);\r

  \    s += sval + '</td>';\r

  \  }\r

  \  s += '</table>';\r

  \  return s;\r

  }"
tableHTMLY: "function tableHTMLY(o, refs) {\r

  \  let s = '<table class=\"tttable up10\">';\r

  \  for (const k in o) {\r

  \    s += '<tr><th>' + k + '</th><td>';\r

  \    let val = o[k];\r

  \    let sval = null;\r

  \    if (isListOf_Obj(val)) {\r

  \      let cl = 't_r_' + getUID(); let ref = { oids: val.filter(x =>
  isdef(x)).map(x => x._obj), id: cl }; refs.push(ref);\r

  \      sval = `<div class='up10 hallo'>${val.map(x => !x ? '_' :
  x._obj).toString()}</div>`;\r

  \    } else if (val && isDict(val) && '_obj' in val) {\r

  \      let cl = 't_r_' + getUID(); let ref = { oids: [val._obj], id: cl };
  refs.push(ref);\r

  \      sval = `<div class='up10 hallo'>${val._obj.toString()}</div>`;\r

  \    }\r

  \    if (!sval) sval = isSet(val) ? empty(val._set) ? '{ }' : simpleRep(val)
  : isDict(val) ? tableHTMLY(val, refs) : simpleRep(val);\r

  \    s += sval + '</td>';\r

  \  }\r

  \  s += '</table>';\r

  \  return s;\r

  }"
tableLayoutMR: "function tableLayoutMR(dParent, m = 7, r = 1) {\r

  \  let ui = UI; ui.players = {};\r

  \  clearElement(dParent);\r

  \  let bg = 'transparent';\r

  \  let [dMiddle, dRechts] = [ui.dMiddle, ui.dRechts] = mColFlex(dParent, [m,
  r], [bg, bg]);\r

  \  mCenterFlex(dMiddle, false);\r

  \  let dOben = ui.dOben = mDiv(dMiddle, { w: '100%', display: 'block' },
  'dOben');\r

  \  let dSelections = ui.dSelections = mDiv(dOben, {}, 'dSelections');\r

  \  for (let i = 0; i <= 5; i++) { ui[`dSelections${i}`] = mDiv(dSelections,
  {}, `dSelections${i}`); }\r

  \  let dActions = ui.dActions = mDiv(dOben, { w: '100%' });\r

  \  for (let i = 0; i <= 5; i++) { ui[`dActions${i}`] = mDiv(dActions, { w:
  '100%' }, `dActions${i}`); }\r

  \  ui.dError = mDiv(dOben, { w: '100%', bg: 'red', fg: 'yellow', hpadding:
  12, box: true }, 'dError');\r

  \  let dSubmitOrRestart = ui.dSubmitOrRestart = mDiv(dOben, { w: '100%'
  });\r

  \  let dOpenTable = ui.dOpenTable = mDiv(dMiddle, { w: '100%', padding: 10
  }); mFlexWrap(dOpenTable);\r

  \  return [dOben, dOpenTable, dMiddle, dRechts];\r

  }"
take_feedback_host: "function take_feedback_host(write_fen = true, write_player
  = false, clear_players = false, player_status = null) {\r

  \  prep_move();\r

  \  let o = { uname: Z.uplayer, friendly: Z.friendly };\r

  \  if (isdef(Z.fen)) o.fen = Z.fen;\r

  \  if (write_fen) { assertion(isdef(Z.fen) && isdef(Z.fen.turn), 'write_fen
  without fen!!!!'); o.write_fen = true; }\r

  \  if (write_player) { o.write_player = true; o.state = Z.state; }\r

  \  if (clear_players) o.clear_players = true;\r

  \  o.player_status = player_status;\r

  \  o.auto = true;\r

  \  let cmd = 'table';\r

  \  send_or_sim(o, cmd);\r

  }"
take_turn: "function take_turn(write_fen = true, write_player = false,
  clear_players = false, player_status = null) {\r

  \  prep_move();\r

  \  let o = { uname: Z.uplayer, friendly: Z.friendly };\r

  \  if (isdef(Z.fen)) o.fen = Z.fen;\r

  \  if (write_fen) { assertion(isdef(Z.fen) && isdef(Z.fen.turn), 'write_fen
  without fen!!!!'); o.write_fen = true; }\r

  \  if (write_player) { o.write_player = true; o.state = Z.state; }\r

  \  if (clear_players) o.clear_players = true;\r

  \  o.player_status = player_status;\r

  \  let cmd = 'table';\r

  \  send_or_sim(o, cmd);\r

  }"
take_turn_ack: "function take_turn_ack() {\r

  \  prep_move();\r

  \  let o = { uname: Z.uplayer, friendly: Z.friendly, fen: Z.fen, state: {
  ack: true }, write_player: true };\r

  \  let cmd = 'table';\r

  \  send_or_sim(o, cmd);\r

  }"
take_turn_clear: "function take_turn_clear() {\r

  \  prep_move();\r

  \  let o = { uname: Z.uplayer, friendly: Z.friendly, fen: Z.fen, players:
  Z.playerlist };\r

  \  let cmd = 'clear';\r

  \  send_or_sim(o, cmd);\r

  }"
take_turn_collect_open: "function take_turn_collect_open() {\r

  \  prep_move();\r

  \  let o = { uname: Z.uplayer, friendly: Z.friendly, fen: Z.fen, state:
  Z.state, write_player: true };\r

  \  let cmd = 'table';\r

  \  send_or_sim(o, cmd);\r

  }"
take_turn_fen: function take_turn_fen() { take_turn(); }
take_turn_fen_clear: function take_turn_fen_clear() { take_turn(true, false, true); }
take_turn_fen_write: function take_turn_fen_write() { take_turn(true, true); }
take_turn_multi: function take_turn_multi() { if (isdef(Z.state))
  take_turn(false, true); else take_turn(false, false); }
take_turn_resolve: "function take_turn_resolve(notes) {\r

  \  prep_move();\r

  \  let o = { uname: Z.uplayer, friendly: Z.friendly, fen: Z.fen, write_fen:
  true, write_notes: notes };\r

  \  let cmd = 'table';\r

  \  send_or_sim(o, cmd);\r

  }"
take_turn_spotit: function take_turn_spotit() { take_turn(true, true); }
take_turn_waiting: function take_turn_waiting() { take_turn(true, false, false, null); }
take_turn_write: function take_turn_write() { take_turn_multi(); }
takeFromStart: "function takeFromStart(ad, n) {\r

  \  if (isDict(ad)) {\r

  \    let keys = Object.keys(ad);\r

  \    return keys.slice(0, n).map(x => (ad[x]));\r

  \  } else return ad.slice(0, n);\r

  }"
takeFromTo: "function takeFromTo(ad, from, to) {\r

  \  if (isDict(ad)) {\r

  \    let keys = Object.keys(ad);\r

  \    return keys.slice(from, to).map(x => (ad[x]));\r

  \  } else return ad.slice(from, to);\r

  }"
TakeMove: "function TakeMove() {\r

  \  brd_hisPly--;\r

  \  brd_ply--;\r

  \  var move = brd_history[brd_hisPly].move;\r

  \  var from = FROMSQ(move);\r

  \  var to = TOSQ(move);\r

  \  if (brd_enPas != SQUARES.NO_SQ) HASH_EP();\r

  \  HASH_CA();\r

  \  brd_castlePerm = brd_history[brd_hisPly].castlePerm;\r

  \  brd_fiftyMove = brd_history[brd_hisPly].fiftyMove;\r

  \  brd_enPas = brd_history[brd_hisPly].enPas;\r

  \  if (brd_enPas != SQUARES.NO_SQ) HASH_EP();\r

  \  HASH_CA();\r

  \  brd_side ^= 1;\r

  \  HASH_SIDE();\r

  \  if ((MFLAGEP & move) != 0) {\r

  \    if (brd_side == COLOURS.WHITE) {\r

  \      AddPiece(to - 10, PIECES.bP);\r

  \    } else {\r

  \      AddPiece(to + 10, PIECES.wP);\r

  \    }\r

  \  } else if ((MFLAGCA & move) != 0) {\r

  \    switch (to) {\r

  \      case SQUARES.C1: MovePiece(SQUARES.D1, SQUARES.A1); break;\r

  \      case SQUARES.C8: MovePiece(SQUARES.D8, SQUARES.A8); break;\r

  \      case SQUARES.G1: MovePiece(SQUARES.F1, SQUARES.H1); break;\r

  \      case SQUARES.G8: MovePiece(SQUARES.F8, SQUARES.H8); break;\r

  \      default: break;\r

  \    }\r

  \  }\r

  \  MovePiece(to, from);\r

  \  var captured = CAPTURED(move);\r

  \  if (captured != PIECES.EMPTY) {\r

  \    AddPiece(to, captured);\r

  \  }\r

  \  if (PROMOTED(move) != PIECES.EMPTY) {\r

  \    ClearPiece(from);\r

  \    AddPiece(from, (PieceCol[PROMOTED(move)] == COLOURS.WHITE ? PIECES.wP :
  PIECES.bP));\r

  \  }\r

  }"
takeYourSeats: "function takeYourSeats() {\r

  \  Zones = {};\r

  \  if (T.numPlayers == 2) {\r

  \    Zones[T.players[0].id] = createPlayerZone(T.players[0]);\r

  \    mLinebreak(dTable);\r

  \    Zones.table = createTableZone(true);\r

  \    mLinebreak(dTable);\r

  \    Zones[T.players[1].id] = createPlayerZone(T.players[1], 'bottom');\r

  \  }\r

  }"
test: "function test() {\r

  \  for (i = 0; i < 10; i++) {\r

  \    circles += 1;\r

  \    createcircle((i * w / 10), \"50%\", \"100\", \"0\", \"hsla(\" + (i *
  36) + \",100%,50%,0.5)\", \"url(#f\" + circles + \")\");
  createfilter(\"-50%\", \"-50%\", \"200%\", \"200%\", [\"feGaussianBlur\"],
  [\"stdDeviation\", \"5\"]);\r

  \  }\r

  }"
test_1: "function test_1() {\r

  \  deck.mount(d);\r

  }"
test_add_building: "function test_add_building() {\r

  \  let [A, fen, uname] = [Z.A, Z.fen, Z.uname];\r

  \  let type = rChoose(['farm', 'estate', 'chateau']);\r

  \  add_a_correct_building_to(fen, uname, type);\r

  \  take_turn_fen();\r

  }"
test_add_schwein: "function test_add_schwein() {\r

  \  let [A, fen, uname] = [Z.A, Z.fen, Z.uname];\r

  \  let type = rChoose(['farm', 'estate', 'chateau']);\r

  \  let keys = deck_deal(fen.deck, type[0] == 'f' ? 4 : type[0] == 'e' ? 5 :
  6);\r

  \  fen.players[uname].buildings[type].push({ list: keys, h: null });\r

  \  take_turn_fen();\r

  }"
test_endgame: "function test_endgame() {\r

  \  let [A, fen, uname] = [Z.A, Z.fen, Z.uname];\r

  \  fen.actionsCompleted = [];\r

  \  for (const plname of fen.plorder) {\r

  \    add_a_correct_building_to(fen, plname, 'chateau');\r

  \    add_a_correct_building_to(fen, plname, rChoose(['farm', 'estate',
  'chateau']));\r

  \    if (coin()) add_a_correct_building_to(fen, plname, rChoose(['farm',
  'estate', 'chateau']));\r

  \    fen.actionsCompleted.push(plname);\r

  \  }\r

  \  Z.stage = 5;\r

  \  Z.phase = 'king';\r

  \  take_turn_fen();\r

  }"
test_engine_run_next: "function test_engine_run_next(list) {\r

  \  if (nundef(list)) {\r

  \    list = TestList = arrRange(100, TestNumber - 1);\r

  \  }\r

  \  if (isEmpty(list)) {\r

  \    console.log('*** all tests finished ***');\r

  \    TestSuiteRunning = TestRunning = false;\r

  \    shield_off();\r

  \    return;\r

  \  }\r

  \  let n = list.shift();\r

  \  ITER = 0;\r

  \  onclick_ut_n('ari', n);\r

  }"
test_ferro_goal_sorting: "function test_ferro_goal_sorting() {\r

  \  let av = ['7R', '3', '5', '33'];\r

  \  av = ['33', '3', '5', '4'];\r

  \  av.sort((a, b) => Z.fen.allGoals.indexOf(a) -
  Z.fen.allGoals.indexOf(b));\r

  \  return av;\r

  }"
test_ferro_is_set: "function test_ferro_is_set() {\r

  \  let cards = ['9Sn', '7Sn', '8Sn', '9Sn'].map(x => fritz_get_card(x));\r

  \  let set = ferro_is_set(cards, 1, 3);\r

  \  console.log(set);\r

  }"
test_formula0: "function test_formula0() {\r

  \  let fi = nerdamer(`integrate(formula1(x),x)`).buildFunction();\r

  \  let y = fi(100);\r

  \  console.log('')\r

  \  let f = x => formula0(x, 100, 115);\r

  \  let sum = 0;\r

  \  for (let x = 100; x <= 145; x++) {\r

  \    let y = formula0(x, 100, 15);\r

  \    sum += y;\r

  \    console.log('x', x, 'y', Math.round(y * 100), Math.round(sum));\r

  \  }\r

  }"
test_mNode0: "function test_mNode0() {\r

  \  console.log('liste', [1, 2, 3].toString());\r

  \  let o = dixit_setup(['felix', 'amanda', 'mimi']);\r

  \  console.log('o', o);\r

  \  recConvertLists(o);\r

  \  console.log('converted', o);\r

  \  mNode(o, mBy('inpre'), 'setup');\r

  \  inpost.innerHTML = jsonToYaml(o)\r

  }"
test_skip_to_actions: "function test_skip_to_actions() {\r

  \  let [A, fen, uname] = [Z.A, Z.fen, Z.uname];\r

  \  Z.phase = 'king';\r

  \  Z.stage = 5;\r

  \  fen.actionsCompleted = [];\r

  \  let i = arrMinMax(fen.plorder, x => fen.players[x].hand.length).imin;\r

  \  let pl_min_hand = fen.plorder[i];\r

  \  console.log('pl w/ min hand is', pl_min_hand);\r

  \  let pl = fen.players[pl_min_hand];\r

  \  pl.hand = pl.hand.concat(fen.market);\r

  \  fen.market = deck_deal(fen.deck, 2);\r

  \  for (const plname of fen.plorder) {\r

  \    pl = fen.players[plname];\r

  \    let n = rNumber(1, pl.hand.length);\r

  \    pl.stall = pl.hand.splice(0, n);\r

  \  }\r

  \  Z.turn = [fen.plorder[rNumber(0, fen.plorder.length - 1)]];\r

  \  fen.total_pl_actions = fen.num_actions =
  fen.players[Z.turn[0]].stall.length;\r

  \  fen.action_number = 1;\r

  \  take_turn_fen();\r

  }"
test_skip_to_tax: "function test_skip_to_tax() {\r

  \  let [A, fen, uname] = [Z.A, Z.fen, Z.uname];\r

  \  Z.phase = 'jack';\r

  \  Z.stage = 5;\r

  \  let iturn = fen.plorder.length - 1;\r

  \  Z.turn = [fen.plorder[iturn]];\r

  \  fen.actionsCompleted = fen.plorder.slice(0, iturn);\r

  \  console.log('fen.actionsCompleted', fen.actionsCompleted);\r

  \  for (const plname in fen.players) {\r

  \    let pl = fen.players[plname];\r

  \    pl.hand = pl.hand.concat(deck_deal(fen.deck, rNumber(0, 5)));\r

  \  }\r

  \  take_turn_fen();\r

  }"
test_start_aristo: "function test_start_aristo(n = 3, mode = 'multi') {\r

  \  let game = 'aristo';\r

  \  let playernames = arrTake(['mimi', 'felix', 'amanda', 'lauren', 'gul',
  'nasi'], n);\r

  \  let playmodes = ['human', 'human', 'human', 'human', 'human', 'human'];\r

  \  let strategies = ['random', 'random', 'random', 'random', 'random',
  'random', 'random'];\r

  \  let i = 0; let players = playernames.map(x => ({ name: x, strategy:
  strategies[i], playmode: playmodes[i++] }));\r

  \  let options = { mode: mode, commission: 'no' };\r

  \  start_game(game, players, options);\r

  }"
test_start_ferro: "function test_start_ferro(mode = 'multi') {\r

  \  let game = 'ferro';\r

  \  let playernames = ['mimi', 'lauren', 'felix'];\r

  \  let playmodes = ['human', 'human', 'human'];\r

  \  let strategies = ['random', 'random', 'random'];\r

  \  let i = 0; let players = playernames.map(x => ({ name: x, strategy:
  strategies[i], playmode: playmodes[i++] }));\r

  \  let options = { mode: mode, thinking_time: 20 };\r

  \  start_game(game, players, options);\r

  }"
test_start_test_user_endscreen: "async function test_start_test_user_endscreen()
  {\r

  \  console.log('na geh');\r

  \  let fen = \"felix:20,amanda:14,mimi:13,gul:12\";\r

  \  DB = await route_path_yaml_dict('./DB.yaml');\r

  \  console.log('DB', DB);\r

  \  present_non_admin_user('gul');\r

  }"
test_timestep_js_vs_php: "function test_timestep_js_vs_php() {\r

  \  console.log('js', get_timestamp());\r

  \  to_server({}, 'timestamp_test');\r

  }"
test0: "function test0() {\r

  \  dTable.onclick = game_add_default_item;\r

  }"
test0_ari_flip_one_card: "function test0_ari_flip_one_card() {\r

  \  let c = ari_get_card('QHo');\r

  \  mAppend(dTable, iDiv(c));\r

  \  face_down(c);\r

  \  iDiv(c).onclick = () => anim_toggle_face(c);\r

  }"
test0_aristo_setup: "function test0_aristo_setup() {\r

  \  let g = { func: aristo(), options: get_default_options('aristo') };\r

  \  g.fen = g.func.setup(['felix', 'mimi'], {});\r

  \  console.log('fen', g.fen);\r

  }"
test0_boa_bw_fa: "function test0_boa_bw_fa() {\r

  \  let d = mDiv('dHome', { w: 200, h: 200, bg: 'red' }, 'd', `<i class=\"fa
  fa-car\"></i>`);\r

  \  d.onclick = () => toggle_bw_symbol(d.firstChild);\r

  }"
test0_canvas_overlay: "function test0_canvas_overlay() {\r

  \  let pin = canvas_overlay();\r

  \  let f = x => x + rGaussian(-.01, .04);\r

  \  run_for_seconds(2, () => map_moveby(pin, f, f))\r

  }"
test0_car_nomath: "function test0_car_nomath() {\r

  \  C = new CCanvas(dTable, {}, {}, gameloop_start, gameloop_stop);\r

  \  C.add({ w: 30, h: 25, color: 'red', draw: draw_car, update: update_car,
  turn_inc: 10, v: { a: 280, mag: 5 } });\r

  \  C.add({ x: 30, y: -100, color: 'green', w: 35, h: 25, draw: draw_car,
  update: update_car, v: { a: 0, mag: 3 } });\r

  \  C.draw();\r

  }"
test0_divRestOfPage: "function test0_divRestOfPage() {\r

  \  console.log('DB', DB);\r

  \  console.log('C52', C52);\r

  \  let state = DB.tables.t0;\r

  \  console.log('state', state);\r

  \  var dMain = document.getElementById('dMain');\r

  \  let dMenu = mDiv(dMain, { bg: 'blue' }, null, '<span>hallo</span>');\r

  \  let bMenu = mButton(UnicodeSymbols.menu, null, null, null, 'mybutton');\r

  \  mInsertFirst(dMenu, bMenu);\r

  \  let dRest = mDivRestOfPage(dMain, dMenu);\r

  \  let bTest = mButton('test', () => mSize(dMenu, 20, 80, '%'), dMenu, null,
  'mybutton');\r

  }"
test0_load_user: "function test0_load_user() {\r

  \  let user = load_user(queryStringToJson().user);\r

  }"
test0_nerd: "function test0_nerd() {\r

  \  var core = nerdamer.getCore();\r

  \  var _ = core.PARSER;\r

  \  core.Math2.custom = function (x) { return (100 * formula1(x)).toFixed(4);
  };\r

  \  _.functions.custom = [, 1];\r

  \  var x = nerdamer('custom(140)').evaluate();\r

  \  console.log(x.toString());\r

  }"
test0_orig: "function test0_orig() {\r

  \  var map = L.map('map');\r

  \  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r

  \    attribution: '© OpenStreetMap contributors'\r

  \  }).addTo(map);\r

  \  L.Routing.control({\r

  \    waypoints: [\r

  \      L.latLng(57.74, 11.94),\r

  \      L.latLng(57.6792, 11.949)\r

  \    ],\r

  \    routeWhileDragging: true\r

  \  }).addTo(map);\r

  }"
test0_random: "function test0_random() {\r

  \  let n = rNumber(12, 20);\r

  \  console.log('n', n)\r

  }"
test0_show_all_inno_cards: "function test0_show_all_inno_cards() {\r

  \  clearElement(dTable);\r

  \  for (const k in InnoById) {\r

  \    let ci = InnoById[k];\r

  \    console.log('ci', ci);\r

  \    if (ci.exp[0] == 'F') inno_present_card(dTable, k);\r

  \  }\r

  }"
test0_simulateClick: "async function test0_simulateClick() {\r

  \  let info = await
  route_path_yaml_dict('../base/assets/lists/info.yaml');\r

  \  downloadAsYaml(info, 'info');\r

  }"
test0_turn_loader_off: "function test0_turn_loader_off() {\r

  \  mClassReplace(mBy('loader_holder'), 'loader_off');\r

  }"
test00: "async function test00() {\r

  \  set_run_state_no_server(); \r

  \  onpagedeactivated(() => { fiddleSave(); dbSave(); });\r

  \  await load_syms(); \r

  \  await load_db(); \r

  \  let dicode = CODE.di = await
  route_path_yaml_dict('../basejs/z_all.yaml');\r

  \  let dijustcode = CODE.justcode = await
  route_path_yaml_dict('../basejs/z_allcode.yaml');\r

  \  let dihistory = CODE.history = await
  route_path_yaml_dict('../basejs/z_allhistory.yaml');\r

  \  dTable = mSection({ h: window.innerHeight - 68 }, 'dTable');\r

  \  fiddleInit();\r

  \  show_sidebar(sortCaseInsensitive(get_keys(dicode.func)),
  onclickCodeInSidebar);\r

  \  onclickCodeInSidebar('mAutocomplete')\r

  }"
test00_div_mit_sidebar: "function test00_div_mit_sidebar() {\r

  \  let dMain = mBy('dMain');\r

  \  mStyleX(dMain, { h: '100%', w: '100%', box: true, bg: 'silver', padding:
  10 });\r

  \  let d = mDiv100(dMain, { bg: 'blue', position: 'relative', });\r

  \  let d1 = mDiv(d, { h: '100%', w: 100, position: 'absolute', z: 1, top: 0,
  left: 0, overflow: 'hidden', transition: '0.5s' }, null, 'hallo',
  ['w3-blue']);\r

  \  let d2 = mDiv(d, { maleft: 100, h: '100%', box: true, transition: '0.5s'
  }, null, null, ['w3-orange'])\r

  \  d2.onclick = () => {\r

  \    mToggle(d1, 'width', 0, 100); mToggle(d2, 'margin-left', 0, 100);\r

  \  }\r

  }"
test0000000: "function test0000000() {\r

  \  return 4;\r

  }"
test01: "function test01() {\r

  \  UIS.a_d_game.elem.style.textAlign = 'center';\r

  \  let svg = new MMS({ parent: UIS.a_d_game, type: 'svg'
  }).setDefaults().attach();\r

  \  let g = new MMS({ parent: svg, type: 'g' }).attach();\r

  \  addManualCircle(g);\r

  }"
test01_modifyUser: "function test01_modifyUser() {\r

  \  lookupAddToList(U, ['games', 'gAristocracy', 'running'], 2);\r

  \  changeUserTo('mia');\r

  }"
test01_one_deck: "function test01_one_deck() {\r

  \  let d1 = document.createElement('div');\r

  \  d1.id = 'myContainer';\r

  \  document.body.appendChild(d1);\r

  \  var d = d1;\r

  \  let deck = createDeckWithJokers();\r

  \  attachTo(d, deck);\r

  }"
test01_show_w3colors: "function test01_show_w3colors() {\r

  \  let dMain = mBy('dMain');\r

  \  mCenterCenterFlex(dMain);\r

  \  for (const c of [wblue, wred, worange, wgreen, wamber, wyellow, wbrown])
  {\r

  \    let d = mDiv(dMain, { w: 100, h: 100, bg: c, margin: 10 });\r

  \  }\r

  }"
test02: "function test02() {\r

  \  let code = AU.ta.value;\r

  \  let disub = computeClosure(code);\r

  \  let keys = {};\r

  \  for (const type in disub) {\r

  \    let klist = sortCaseInsensitive(get_keys(disub[type]));\r

  \    klist.map(x => keys[x] = disub[type][x]);\r

  \  }\r

  \  CODE.lastClosure = disub;\r

  \  CODE.closureKeys = keys;\r

  \  let ksorted = [];\r

  \  for (const k of CODE.keysSorted) {\r

  \    if (isdef(CODE.closureKeys[k])) ksorted.push(k);\r

  \  }\r

  \  CODE.closureKeysSorted = ksorted;\r

  }"
test02_div_mit_sidebar: "function test02_div_mit_sidebar() {\r

  \  let dMain = mBy('dMain');\r

  \  mStyleX(dMain, { h: '100%', w: '100%', box: true, bg: 'silver', padding:
  10 });\r

  \  let d = mDiv100(dMain, { position: 'relative', });\r

  \  let d1 = mDiv(d, { bg: wdeeporange });\r

  \  let d2 = mDiv(d, { bg: worange });\r

  \  makeSidebar00(d, d1, d2);\r

  }"
test02_grid_rxc: "function test02_grid_rxc() {\r

  \  let d = addGridToBody(8, 8);\r

  \  d.style.setProperty('height', '50%')\r

  }"
test02_show4Decks: "function test02_show4Decks() {\r

  \  let hand = G.instance.players[0].hand.getIndices();\r

  \  console.log(hand)\r

  \  showCards52(hand, 'down');\r

  \  showCards52(hand);\r

  \  showCards52(hand, 'up');\r

  \  showCards52(hand, 'left');\r

  \  mLinebreak(dTable);\r

  }"
test02_showCard: "function test02_showCard() {\r

  \  G.instance.players[0].hand.map(x => Card52.show(x, dTable));\r

  \  mLinebreak(dTable, 25);\r

  \  G.instance.players[1].hand.map(x => Card52.show(x, dTable));\r

  }"
test02_showDeckFaceDown: "function test02_showDeckFaceDown() {\r

  \  let hand = G.instance.players[0].hand;\r

  \  hand.showDeck(dTable);\r

  \  console.log(hand[0].faceUp)\r

  \  hand.turnFaceDown();\r

  }"
test02_turnCard: "function test02_turnCard() {\r

  \  let pl = G.instance.players[0];\r

  \  let card = pl.hand.topCard();\r

  \  console.log(card);\r

  \  Card52.show(card, dTable);\r

  \  setTimeout(() => Card52.turnFaceDown(card), 1000)\r

  \  setTimeout(() => Card52.turnFaceUp(card), 2000)\r

  }"
test02_turnDeckFaceDown: "function test02_turnDeckFaceDown() {\r

  \  let hand = G.instance.players[0].hand;\r

  \  showCards52(hand, 'down');\r

  \  console.log(hand[0].faceUp)\r

  \  hand.turnFaceDown();\r

  }"
test03: "function test03() {\r

  \  if (nundef(CODE.closureKeysSorted)) test1();\r

  \  console.log('closure', CODE.closureKeysSorted);\r

  \  let text = CODE.closureKeysSorted.map(x =>
  CODE.justcode[x]).join('\\r\\n');\r

  \  downloadAsText(text, 'hallo', 'js');\r

  }"
test03_2Hands: "function test03_2Hands() {\r

  \  let h1 = iMakeHand([0, 1, 2, 3, 4], 'h1');\r

  \  let h2 = iMakeHand([13, 14, 15, 16, 17], 'h2');\r

  \  setTimeout(test03_2Hands_transferStarts, 1000);\r

  }"
test03_2Hands_transfer: "function test03_2Hands_transfer() {\r

  \  let deck1 = Daat.h1.deck;\r

  \  let deck2 = Daat.h2.deck;\r

  \  let item = Daat.item;\r

  \  deck1.addTop(item.val);\r

  \  deck2.remove(item.val);\r

  \  iPresentHand(Daat.h1);\r

  \  iPresentHand(Daat.h2);\r

  \  iSortHand(Daat.h1)\r

  }"
test03_2Hands_transferStarts: "function test03_2Hands_transferStarts() {\r

  \  let h1 = Daat.h1.iHand;\r

  \  let n1 = h1.items.length;\r

  \  let h2 = Daat.h2.iHand;\r

  \  let n2 = h2.items.length;\r

  \  let c = chooseRandom(h2.items);\r

  \  Daat.item = c;\r

  \  let w = c.w;\r

  \  let ov = w / 4;\r

  \  let xOffset = n1 * ov;\r

  \  iMoveFromTo(c, h2.div, h1.div, test03_2Hands_transfer, { x: xOffset, y: 0
  });\r

  }"
test03_2HandsRandom: "function test03_2HandsRandom() {\r

  \  let h1 = iMakeHand([0, 1, 2, 3, 4], 'h1');\r

  \  let h2 = iMakeHand([13, 14, 15, 16, 17], 'h2');\r

  \  setTimeout(test03_2Hands_transferStarts, 1000);\r

  }"
test03_addCard: "function test03_addCard() {\r

  \  let h = Daat.hand;\r

  \  let n = h.count();\r

  \  console.log('hand has', n, 'cards');\r

  \  let c = Daat.item;\r

  \  let w = c.w;\r

  \  let ov = w / 4;\r

  \  let xOffset = n * ov;\r

  \  iMoveFromTo(Daat.item, Daat.item.div.parentNode, Daat.zone,
  transferElement, { x: xOffset, y: 0 });\r

  }"
test03_addToZone: "function test03_addToZone() {\r

  \  let items = i52([3, 13, 23]);\r

  \  let z1 = mZone(dTable);\r

  \  iAppend(z1, items[0]);\r

  \  iStyle(z1, { padding: 20, box: true });\r

  \  let item2 = i52(20);\r

  \  iAppend(z1, item2)\r

  \  iCenter(item2, -25, 0);\r

  \  return;\r

  \  let iHand = iSplay(items, z1.div, null, 'right', 20, '%', false,
  false);\r

  \  console.log(iHand);\r

  \  mStyleX(iHand.div, { padding: 20, rounding: 10, bg: 'pink' });\r

  }"
test03_basics: "function test03_basics() {\r

  \  let b = getBounds(dTable); console.log(b.width, b.height);
  mStyleX(dTable, { bg: 'red' });\r

  \  let deck = range(0, 51).map(x => i52(x));\r

  \  iResize52(deck, 40);\r

  \  iSplay(deck, dTable)\r

  \  mLinebreak(dTable, 10);\r

  \  let d = mCanvas(dTable);\r

  \  let item = iAppend52(13, d);\r

  \  mRot(item.div, 45);\r

  \  mLinebreak(dTable, 10);\r

  }"
test03_centerToCenter: "function test03_centerToCenter() {\r

  \  let styles = { w: 200, h: 200, bg: 'random' };\r

  \  mStyleX(dTable, { bg: 'yellow' });\r

  \  let z1 = mZone(dTable, styles); z1.id = 'z1';\r

  \  mLinebreak(dTable, 10);\r

  \  let z2 = mZone(dTable, styles); z2.id = 'z2';\r

  \  let item1 = iAppend52(24, z1);\r

  \  let di1 = item1.div;\r

  \  mCenterAbs(di1);\r

  \  let item2 = iAppend52(28, z2);\r

  \  let di2 = item2.div;\r

  \  mCenterAbs(di2);\r

  \  console.log(di1.parentNode)\r

  \  iMoveFromTo(item2, z2, z1);\r

  \  setTimeout(() => iMoveFromTo(item1, z1, z2), 1000);\r

  \  setTimeout(() => iMoveFromTo(item2, z1, z2), 2000);\r

  }"
test03_centerToCenter_trial1: "function test03_centerToCenter_trial1() {\r

  \  let z1 = mZone(dTable); z1.id = 'z1';\r

  \  mLinebreak(dTable, 10);\r

  \  let item = iAppend52(24, z1);\r

  \  let di = item.div;\r

  \  mCenterAbs(di);\r

  \  return;\r

  \  let z2 = mZone(dTable); z2.id = 'z2';\r

  \  let item2 = iAppend52(28, z2);\r

  \  let di2 = item2.div;\r

  \  mCenter(di2);\r

  \  console.log(di.parentNode)\r

  \  di.onclick = moveFromTo(item2, z2, z1);\r

  }"
test03_div_mit_sidebar: "function test03_div_mit_sidebar() {\r

  \  let dMain = mBy('dMain');\r

  \  mStyleX(dMain, { h: '100%', w: '100%', box: true, bg: 'silver', padding:
  10 });\r

  \  let d = mDiv100(dMain, { position: 'relative', });\r

  \  let d1 = mDiv(d, { bg: wdeeporange });\r

  \  let d2 = mDiv(d, { bg: worange });\r

  \  let sb = iSidebar01(d, d1, d2, d2, 200);\r

  \  sb.fToggle();\r

  }"
test03_grid_whrc: "function test03_grid_whrc() {\r

  \  let d1 = addDivToBody(100, 50, '%')\r

  \  addGridTo(d1, 8, 8);\r

  }"
test03_habenItemsEinZNachSplay: "function test03_habenItemsEinZNachSplay() {\r

  \  let items = i52([3, 13, 23]);\r

  \  console.log(items)\r

  \  console.log(items[0].z);\r

  \  iSplay(items, dTable);\r

  \  console.log(items[0].z);\r

  }"
test03_komischeBubbles: "function test03_komischeBubbles() {\r

  \  let dover = mDover(dTable); mStyleX(dover, { bg: '#00000080' });\r

  \  item = i52(25);\r

  \  item.div = mText('hallo', dover, { padding: 25 });\r

  \  container = dover;\r

  \  mClass(container, 'container');\r

  \  mClass(item.div, 'bubble2')\r

  \  item.div.style.setProperty('--xStart', '0px');\r

  \  item.div.style.setProperty('--xEnd', '100px');\r

  \  item.div.style.setProperty('--yStart', '0px');\r

  \  item.div.style.setProperty('--yEnd', '-100px');\r

  \  dTable.addEventListener(\"mousemove\", updateBubbleColors);\r

  }"
test03_left: "function test03_left() {\r

  \  let d = mDover(dTable);\r

  \  let item = iAppend52(13, d);\r

  \  item.div.animate([\r

  \    { position: 'absolute', left: '0px', top: '0px' },\r

  \    { position: 'absolute', left: '220px', top: '110px' },\r

  \  ], {\r

  \    duration: 500,\r

  \    fill: 'forwards',\r

  \  });\r

  }"
test03_richtungCenter: "function test03_richtungCenter() {\r

  \  let d = mDover(dTable);\r

  \  let item = iAppend52(13, d);\r

  \  let di = item.div;\r

  \  di.style.position = 'absolute';\r

  \  let parent = d;\r

  \  let tablePos = getBounds(di, false, dTable);\r

  \  console.log('tablePos', tablePos.x, tablePos.y);\r

  \  mLinebreak(dTable, 100)\r

  \  let dParent = mDiv(dTable, { w: 200, h: 200, bg: 'yellow' });\r

  \  let center = actualCenter(dParent, false, dTable);\r

  \  let b = getBounds(dParent, false, dTable);\r

  \  console.log('center of yellow', center.x, center.y, b)\r

  \  let offset = { w: 35, h: 55 };\r

  \  center.x -= offset.w;\r

  \  center.y -= offset.h;\r

  \  item.div.animate([\r

  \    { position: 'absolute', left: '0px', top: '0px' },\r

  \    { position: 'absolute', left: '' + center.x + 'px', top: center.y +
  'px' },\r

  \  ], {\r

  \    duration: 500,\r

  \    fill: 'forwards',\r

  \  });\r

  }"
test03_rotate: "function test03_rotate() {\r

  \  let d = mCanvas(dTable);\r

  \  let item = iAppend52(13, d);\r

  \  item.div.animate([\r

  \    { transform: 'rotate(90deg)' },\r

  \  ], {\r

  \    duration: 500,\r

  \  });\r

  }"
test03_sortDeck: "function test03_sortDeck() {\r

  \  let h1 = iMakeHand([7, 10, 21, 2, 43, 4], 'h1');\r

  \  iSortHand(h1);\r

  }"
test03_splayHand: "function test03_splayHand() {\r

  \  let h = Daat.hand = new Deck();\r

  \  h.init([3, 4, 5, 6, 13, 23]);\r

  \  console.log(h); let cards = h.cards(); console.log(cards);\r

  \  let zHand = Daat.zone = iHandZone();\r

  \  let items = i52(h.cards());\r

  \  let handItem = Daat.iHand = iSplay(items, zHand);\r

  \  let z = iHandZone();\r

  \  let item = Daat.item = iAppend52(18, z);\r

  \  console.log('Daat', Daat)\r

  \  setTimeout(test03_addCard, 1000);\r

  }"
test03_translate: "function test03_translate() {\r

  \  let d = mCanvas(dTable);\r

  \  let item = iAppend52(13, d);\r

  \  item.div.animate([\r

  \    { transform: 'translate(0px,0px)' },\r

  \    { transform: 'translate(300px,200px)' }\r

  \  ], {\r

  \    duration: 500,\r

  \    iterations: Infinity,\r

  \    direction: 'alternate'\r

  \  });\r

  }"
test03_trash: "function test03_trash() {\r

  \  let dover = mDover(dTable); mStyleX(dover, { bg: 'pink' });\r

  \  b = getBounds(dover); console.log('dover', b.width, b.height);\r

  \  mRemoveStyle(dover, ['background-color']);\r

  \  item = i52(35);\r

  \  mAppend(item.div, dover);\r

  \  anim1(item.div, 'left', 0, 200, 1000);\r

  }"
test04: "function test04() {\r

  \  dTable = mSection({ h: window.innerHeight - 68 }, 'dTable');\r

  \  dSearch = mSection({}, 'dSearch'); mInputLineWithButtons(dSearch, { Go:
  fiddleSearch }, 'grid');\r

  \  show_sidebar(sortCaseInsensitive(get_keys(CODE.di.func)),
  onclickCodeInSidebar);\r

  \  onclickCodeInSidebar(rChoose(CODE.keylist)); //'mAutocomplete')\r

  }"
test04_div_mit_sidebar: "function test04_div_mit_sidebar() {\r

  \  let dMain = mBy('dMain');\r

  \  mStyleX(dMain, { h: '100%', w: '100%', box: true, bg: 'silver', padding:
  10 });\r

  \  let d = mDiv100(dMain, { position: 'relative', });\r

  \  let d1 = mDiv(d, { bg: wdeeporange });\r

  \  let d2 = mDiv(d, { bg: worange });\r

  \  let sb = iSidebar04(d, d1, d2, d2, 50);\r

  \  sb.addContent('wwwwwwwwwwwwwwwwwwwwwwwwww');\r

  \  sb.toggle();\r

  \  sb.addContent('s');\r

  \  sb.toggle();\r

  }"
test04_grid9_whrc: "function test04_grid9_whrc() {\r

  \  let d1 = addDivToBody(100, 50, '%')\r

  \  let cells = addGrid9To(d1, 1, 1);\r

  \  console.log(cells)\r

  \  let d = cells[1][1];\r

  \  describe(d);\r

  \  clearElement(d);\r

  \  describe(d);\r

  \  addGrid9To(d, 1, 1);\r

  \  describe(d);\r

  }"
test04_textItems: "function test04_textItems() {\r

  \  clearElement(dTable);\r

  \  let items = getRandomItems(24, 'object', true, false);\r

  \  registerItems(items);\r

  \  items.map(x => x.div.onclick = togglePic)\r

  \  console.log('items', items)\r

  \  presentItems(items, dTable, 4);\r

  }"
test05: "function test05() {\r

  \  dTable = mSection({ h: window.innerHeight - 128 }, 'dTable');\r

  \  dSearch = mSection({ padding: 2 }, 'dSearch');
  mInputLineWithButtons(dSearch, { Go: fiddleSearch }, 'grid');\r

  \  show_sidebar(sortCaseInsensitive(get_keys(CODE.di.func)),
  onclickCodeInSidebar);\r

  \  onclickCodeInSidebar('SimpleGrid');\r

  }"
test05_deck_in_grid: "function test05_deck_in_grid() {\r

  \  let d1 = addDivToBody(100, 50, '%')\r

  \  let deck = createDeckWithJokers();\r

  \  attachTo(d1, deck);\r

  }"
test05_div_mit_sidebar: "function test05_div_mit_sidebar() {\r

  \  let dMain = mBy('dMain');\r

  \  mStyleX(dMain, { h: '100%', w: '100%', box: true, bg: 'silver', padding:
  10 });\r

  \  let b = mButton('☰', null, dMain, { fz: 36 }, 'mybutton');\r

  \  let d = mDiv100(dMain, { matop: 4, position: 'relative', });\r

  \  let dSide = mDiv(d, { bg: 'silver' });\r

  \  let dContent = mDiv(d, { bg: worange });\r

  \  let sb = iSidebar(d, dSide, dContent, b, 120, false);\r

  }"
test06: "function test06() {\r

  \  let divnames = get_keys(CODE.di.var);\r

  \  divnames = divnames.filter(x => x[0] == 'd' && x[1] == x[1].toUpperCase()
  && !isNumber(x[x.length - 1]));\r

  \  show_sidebar(sortCaseInsensitive(divnames), onclickCodeInSidebar);\r

  \  console.log('divnames', divnames.join());\r

  \  let s =
  'dActions,dAux,dAuxContent,dBottom,dButtons,dCenter,dCode,dConsole,dContent,d\
  Current,dError';\r

  \  let s1 =
  'dFeedback,dFiddle,dFleetingMessage,dFooter,dGameControls,dGames,dGameTitle,d\
  Header,dHelp,dHint';\r

  \  let s2 = 'dInstruction,dLeft,dLeiste,dLevel';\r

  \  let s3 =
  'dLineBottom,dLineBottomLeft,dLineBottomMiddle,dLineBottomOuter,dLineBottomRi\
  ght';\r

  \  let s4 =
  'dLineTable,dLineTableLeft,dLineTableMiddle,dLineTableOuter,dLineTableRight';\
  \r

  \  let s5 =
  'dLineTitle,dLineTitleLeft,dLineTitleMiddle,dLineTitleOuter,dLineTitleRight';\
  \r

  \  let s6 =
  'dLineTop,dLineTopLeft,dLineTopMiddle,dLineTopOuter,dLineTopRight';\r

  \  let s7 =
  'dLinks,dLoggedIn,dLogo,dMain,dMap,dMenu,dMessage,dMoveControls,dOben';\r

  \  let s7a = 'dPage,dParent,dPlayerNames,dPlayerStats';\r

  \  let s8 =
  'dPuppet,dRechts,dRight,dScore,dSettings,dSidebar,dStatus,dSubmitMove';\r

  \  let s9 =
  'dTable,dTableName,dTables,dTableShield,dTitle,dTop,dUnten,dUserControls,dUse\
  rs';\r

  }"
test06_coButtonSidebarDiv: "function test06_coButtonSidebarDiv() {\r

  \  let dMain = mBy('dMain');\r

  \  mStyleX(dMain, { h: '100%', w: '100%', box: true, bg: 'silver', padding:
  10 });\r

  \  let co = coButtonSidebarDiv(dMain);\r

  \  console.log('co', co)\r

  \  let co2 = coButtonSidebarDiv(co.div);\r

  }"
test06_one_deck: "function test06_one_deck() {\r

  \  let d1 = document.createElement('div');\r

  \  d1.id = 'myContainer';\r

  \  document.body.appendChild(d1);\r

  \  var d = d1;\r

  \  d.style.width = '100px';\r

  \  d.style.height = '100px';\r

  \  d.style.backgroundColor = 'blue';\r

  \  let deck = createDeckWithJokers();\r

  \  let card = deck.cards[54];\r

  \  deck.flip()\r

  \  attachTo(d, card);\r

  \  let domel = card.elem;\r

  \  let info = getTransformInfoDOM(domel)\r

  }"
test07: "function test07() {\r

  \  document.body.style.height = '100vh';\r

  \  let div1 = addDivToBody(100, 50, '%', 'blue');\r

  \  let div2 = addDivToBody(100, 50, '%', 'green');\r

  \  var deck1 = makeDeck({ kind: 'deck52', N: 30, nJokers: 5 });\r

  \  let ms1 = new DeckMS('deck1', deck1);\r

  \  ms1.attachTo(div1);\r

  \  deck1.cards.forEach(function (card, i) { card.enableDragging();
  card.enableFlipping(); });\r

  \  var deck2 = makeDeck({ kind: 'deck52', N: 30, nJokers: 5 });\r

  \  let ms2 = new DeckMS('deck2', deck2);\r

  \  ms2.attachTo(div2);\r

  }"
test07_menu_sidebar_div: "function test07_menu_sidebar_div() {\r

  \  let dMain = mBy('dMain');\r

  \  mStyleX(dMain, { h: '100%', w: '100%', box: true, bg: 'silver', padding:
  10 });\r

  \  setRect(dMain);\r

  \  let item = iMenuSidebarDiv(dMain, options);\r

  \  let dover = mDover(dMain, { bg: 'red', alpha: .25 });\r

  \  setTimeout(() => iDelete(item.live.sidebar), 5000)\r

  }"
test08: "function test08() {\r

  \  document.body.style.height = '100vh';\r

  \  let div1 = addDivToBody(100, 50, '%', 'blue');\r

  \  let div2 = addDivToBody(100, 50, '%', 'green');\r

  \  var deck1 = makeDeck({ kind: 'deck52', N: 30, nJokers: 5 });\r

  \  let ms1 = new DeckMS('deck1', deck1);\r

  \  ms1.attachTo(div1);\r

  \  let cells = addGridTo(div2, 2, 2, '10px');\r

  \  let d = cells[0][1];\r

  \  clearElement(d);\r

  \  var deck2 = makeDeck({ kind: 'deck52', N: 30, nJokers: 5 });\r

  \  let ms2 = new DeckMS('deck2', deck2);\r

  \  ms2.attachTo(d);\r

  }"
test08_WTF: "function test08_WTF() {\r

  \  let d = mBy('dMain');\r

  \  let menu = iMenuLine(d, { bg: 'dark' });\r

  \  console.log('iDiv', iDiv(menu));\r

  \  let title = mText('hello!', iDiv(menu), { fz: 30 });\r

  }"
test09: "function test09() {\r

  \  document.body.style.height = '100vh';\r

  \  let div1 = addDivToBody(100, 50, '%', 'blue');\r

  \  let div2 = addDivToBody(100, 50, '%', 'green');\r

  \  let rows1 = 3;\r

  \  let cols1 = 3;\r

  \  let cells = addGridTo(div2, rows1, cols1, '10px');\r

  \  console.log(cells);\r

  \  for (let i = 0; i < rows1; i++) {\r

  \    for (let j = 0; j < cols1; j++) {\r

  \      let cell = cells[i][j];\r

  \      clearElement(cell);\r

  \      let mobj = new DeckMS('d' + rows1 + '_' + cols1, makeDeck({ kind:
  'deck52', N: 30, nJokers: 5 }));\r

  \      mobj.attachTo(cell);\r

  \      enableFlipForDeck(mobj.o);\r

  \      enableDragForDeck(mobj.o);\r

  \    }\r

  \  }\r

  }"
test09_WTF_das_ist_ambra: "function test09_WTF_das_ist_ambra() {\r

  \  let comp = qPageMST(mBy('dMain'), qOptions());\r

  \  ex00_sidebar(comp.sidebar);\r

  }"
test09_WTF_start: "function test09_WTF_start() {\r

  \  ex01_table(comp.dContent);\r

  \  mCenterFlex(dTable);\r

  \  let tileStyles1 = { bg: 'pink', w: 300, h: 300, margin: 20 };\r

  \  let [rows, cols] = [5, 5];\r

  \  for (let r = 0; r < rows; r++) {\r

  \    for (let c = 0; c < cols; c++) {\r

  \      let d1 = mDiv(dTable, tileStyles1);\r

  \      if (coin()) iMenuSidebarDiv(d1, qOptions());\r

  \    }\r

  \    mGap(dTable, 0);\r

  \  }\r

  }"
test1: "function test1(map) {\r

  \  var baseballIcon = L.icon({\r

  \    iconUrl: '../leaf94/baseball-marker.png',\r

  \    iconSize: [32, 37],\r

  \    iconAnchor: [16, 37],\r

  \    popupAnchor: [0, -28]\r

  \  });\r

  \  function onEachFeature(feature, layer) {\r

  \    var popupContent = '<p>I started out as a GeoJSON ' +\r

  \      feature.geometry.type + ', but now I\\'m a Leaflet vector!</p>';\r

  \    if (feature.properties && feature.properties.popupContent) {\r

  \      popupContent += feature.properties.popupContent;\r

  \    }\r

  \    layer.bindPopup(popupContent);\r

  \  }\r

  \  var bicycleRentalLayer = L.geoJSON([bicycleRental, campus], {\r

  \    style: function (feature) {\r

  \      return feature.properties && feature.properties.style;\r

  \    },\r

  \    onEachFeature: onEachFeature,\r

  \    pointToLayer: function (feature, latlng) {\r

  \      return L.circleMarker(latlng, {\r

  \        radius: 8,\r

  \        fillColor: '#ff7800',\r

  \        color: '#000',\r

  \        weight: 1,\r

  \        opacity: 1,\r

  \        fillOpacity: 0.8\r

  \      });\r

  \    }\r

  \  }).addTo(map);\r

  \  var freeBusLayer = L.geoJSON(freeBus, {\r

  \    filter: function (feature, layer) {\r

  \      if (feature.properties) {\r

  \        return feature.properties.underConstruction !== undefined ?
  !feature.properties.underConstruction : true;\r

  \      }\r

  \      return false;\r

  \    },\r

  \    onEachFeature: onEachFeature\r

  \  }).addTo(map);\r

  \  var coorsLayer = L.geoJSON(coorsField, {\r

  \    pointToLayer: function (feature, latlng) {\r

  \      return L.marker(latlng, { icon: baseballIcon });\r

  \    },\r

  \    onEachFeature: onEachFeature\r

  \  }).addTo(map);\r

  }"
test1_3colHeaderFooter: "function test1_3colHeaderFooter() {\r

  \  var dMain = document.getElementById('dMain');\r

  \  let dHeader = mDiv(dMain, { bg: '#ABC', hmin: 150 }, 'dHeader',
  'header');\r

  \  let dOuter = mDiv(dMain, { bg: '#678', hmin: 500, display: 'flex',
  'flex-flow': 'row wrap' }, 'dOuter');\r

  \  let dLeft = mDiv(dOuter, { bg: 'random', flex: '0 0 200px' }, 'dLeft',
  'left');\r

  \  let dMiddle = mDiv(dOuter, { bg: 'random', flex: '1 0 auto' }, 'dMiddle',
  'middle');\r

  \  let dRight = mDiv(dOuter, { bg: 'random', flex: '0 0 200px' }, 'dRight',
  'right');\r

  \  let dFooter = mDiv(dMain, { bg: '#456', hmin: 100 }, 'dFooter',
  'footer');\r

  }"
test1_ari_10cards: "function test1_ari_10cards(otree) {\r

  \  let n = 10;\r

  \  let list = choose(get_keys(Aristocards), n);\r

  \  let items = list.map(x => ari_get_card(x));\r

  \  let cont = ui_make_deck_container(n, dTable, { bg: 'random', padding: 4
  });\r

  \  let topmost = ui_add_cards_to_deck_container(cont, items, list);\r

  \  iDiv(topmost).onclick = () => anim_toggle_face(topmost);\r

  }"
test1_basic: "function test1_basic() {\r

  \  var map = L.map('map');\r

  \  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r

  \    attribution: '© OpenStreetMap contributors'\r

  \  }).addTo(map);\r

  \  console.log('geo', Geo)\r

  \  let [p1, p2] = [Geo.places.tuerkenschanzpark, Geo.places.vegagasse];\r

  \  map.setView(p1, 16)\r

  \  M = L.Routing.control({\r

  \    waypoints: [\r

  \      L.latLng(p1[0], p1[1]),\r

  \      L.latLng(p2[0], p2[1])\r

  \    ],\r

  \    routeWhileDragging: true\r

  \  }).addTo(map);\r

  }"
test1_bw_widget_boa: "function test1_bw_widget_boa() {\r

  \  let dpop = mBy('dPopup');\r

  \  show(dpop);\r

  \  mStyle(dpop, { top: 50, right: 10 });\r

  \  let prefix = 'boa';\r

  \  let d = mDiv(dpop, { wmin: 200, hmin: 200, bg: 'red' }, 'dBw');\r

  \  let d2 = mDiv(d, { bg: 'dodgerblue', fg: 'white' }, null, 'your bitwarden
  vault');\r

  \  let d3 = mDiv(d, { bg: '#eee', fg: 'dimgray', padding: 8 }, null,
  'LOGINS');\r

  \  let d4 = mDiv(d, { bg: 'white', fg: 'black' });\r

  \  let d5 = mDiv(d4, { display: 'flex' });\r

  \  let dimg = mDiv(d5, { bg: 'white', fg: 'black' }, null, `<img
  src='../rechnung/images/boa.png' height=14 style=\"margin:8px\">`);\r

  \  let dtext = mDiv(d5, { cursor: 'pointer' }, null, `<div>boa</div><div
  style=\"font-size:12px;color:gray\">gleeb69</div>`);\r

  \  dtext.onclick = () => onclick_bw_symbol(prefix)\r

  \  let d6 = mDiv(d4, { display: 'flex', padding: 2 });\r

  \  let disyms = {\r

  \    bwtext: { postfix: 'userid', matop: 2, maright: 0, mabottom: 0, maleft:
  0, sz: 27 },\r

  \    bwcross: { postfix: 'cross', matop: 2, maright: 0, mabottom: 0, maleft:
  -13, sz: 25 },\r

  \    bwkey: { postfix: 'pwd', matop: 0, maright: 0, mabottom: 0, maleft:
  -12, sz: 27 },\r

  \    bwclock: { postfix: 'clock', matop: 0, maright: 0, mabottom: 0, maleft:
  0, sz: 25 },\r

  \  }\r

  \  for (const k of ['bwtext', 'bwcross', 'bwkey']) {\r

  \    let o = disyms[k];\r

  \    let [filename, styles] = [k, disyms[k]];\r

  \    let path = `../rechnung/images/${filename}.png`;\r

  \    let [sz, ma] = [styles.sz, `${styles.matop}px ${styles.maright}px
  ${styles.mabottom}px ${styles.maleft}px`];\r

  \    console.log('ma', ma);\r

  \    let img = mDiv(d6, { paright: 16 }, null, `<img src='${path}'
  height=${sz} style=\"margin:${ma}\">`);\r

  \    if (k != 'bwcross') {\r

  \      mStyle(img, { cursor: 'pointer' });\r

  \      img.onclick = () => onclick_bw_symbol(prefix, o.postfix);\r

  \    }\r

  \  }\r

  \  mFlexSpacebetween(d4);\r

  \  let d7 = mDiv(d, { bg: '#eee', fg: 'dimgray', padding: 7 }, null,
  'CARDS');\r

  \  let d8 = mDiv(d, { bg: 'dodgerblue', fg: 'white' }, null, `<img
  src='../rechnung/images/rest_bw.jpg'>`);\r

  }"
test1_can_I_get_new_cities: "async function test1_can_I_get_new_cities(min =
  25000) {\r

  \  let info = await
  route_path_yaml_dict('../base/assets/lists/info.yaml');\r

  \  let text = await route_path_text('../base/mapdata/cities.csv');\r

  \  let cities = M.cities = csv2list(text);\r

  \  let capitals = [];\r

  \  let new_cities = {};\r

  \  let num = 0;\r

  \  for (const o of cities) {\r

  \    let n = o.population;\r

  \    if (nundef(n)) continue;\r

  \    n = Number(n);\r

  \    if (n < min) continue;\r

  \    let w1 = o.city_ascii.toLowerCase();\r

  \    if (nundef(o.country)) {\r

  \      console.log('missing country', o);\r

  \      continue;\r

  \    }\r

  \    num += 1;\r

  \    let land1 = o.country.toLowerCase();\r

  \    for (const k of info.capital) {\r

  \      let w = k.toLowerCase();\r

  \      if (w.includes(w1) && w.includes(land1)) {\r

  \        capitals.push(o);\r

  \        o.capital = 'capital';\r

  \      }\r

  \      let name = o.name = o.city_ascii;\r

  \      if (isdef(new_cities[name]) && new_cities[name].includes('capital'))
  continue;\r

  \      new_cities[name] =
  `${o.lng},${o.lat},${o.country},${o.capital},${o.population}`;\r

  \    }\r

  \  }\r

  \  downloadAsYaml(new_cities, 'cities');\r

  \  return new_cities;\r

  }"
test1_car_math: "function test1_car_math() {\r

  \  C = new CCanvas(dTable, {}, {}, gameloop_start, gameloop_stop, 'cc',
  null, true);\r

  \  C.add({ w: 30, h: 25, color: 'red', draw: draw_car, update: update_car,
  turn_inc: 10, v: { a: 280, mag: 5 } });\r

  \  C.add({ x: 30, y: -100, color: 'green', w: 35, h: 25, draw: draw_car,
  update: update_car, v: { a: 0, mag: 3 } });\r

  \  C.draw();\r

  }"
test1_change_user: "function test1_change_user() {\r

  \  setTimeout(() => {\r

  \    mStyle(mBy('user_info'), { opacity: 0 });\r

  \    setTimeout(() => {\r

  \      let name = chooseRandom(get_user_names(), x => x !=
  Session.cur_user);\r

  \      load_user(name);\r

  \    }, 1000);\r

  \  }, 2000)\r

  }"
test1_maxBounds: "function test1_maxBounds() { let m1 = create_map({ zoom: 0 }); }"
test1_nerd: "function test1_nerd() {\r

  \  test0_nerd();\r

  \  let fi = nerdamer(`integrate(custom(x),x)`).buildFunction();\r

  \  let y = fi(100);\r

  \  console.log('fi(100)', y)\r

  }"
test1_open_sidebar: "function test1_open_sidebar() {\r

  \  mBy('b_test').onclick = open_sidebar;\r

  }"
test1_p5_init: "function test1_p5_init() {\r

  \  dTable = mBy('dTable'); mCenterFlex(dTable);\r

  \  let o = mCanvas(dTable, { w: 600, h: 400 }, {}, startloop, pauseloop,
  'cc');\r

  \  iAdd(o, {}, { draw: draw_random_walk });\r

  }"
test1_show_users: "function test1_show_users() {\r

  \  show_users();\r

  }"
test10: "function test10(list) {\r

  \  console.log('codebase list', list);\r

  \  let text = list.map(x => x.text).join('\\n');\r

  \  let funcnames = list[0].di.func;\r

  \  addModuleExports(funcnames);\r

  }"
test10_0: "function test10_0() {\r

  \  lookupSet(DA, ['svgsym', suit, color], html);\r

  \  let color = 'orange';\r

  \  let treff = `\r

  \  <path  d=\"M30 150C35 385 85 400 130 500L-130 500C-85 400 -35 385 -30
  150A10 10 0 0 0 -50 150A210 210 0 1 1 -124 -51A10 10 0 0 0 -110 -65A230 230 0
  1 1 110 -65A10 10 0 0 0 124 -51A210 210 0 1 1 50 150A10 10 0 0 0 30
  150Z\"  fill=\"${color}\"></path>\r

  \  `;\r

  \  let idsym = getUID('x');\r

  \  let sym = `\r

  \  <symbol id=\"Treff\" viewBox=\"-600 -600 1200 1200\"
  preserveAspectRatio=\"xMinYMid\">\r

  \  `\r

  }"
test10_autocomplete: "function test10_autocomplete() {\r

  \  let map = M.map = create_map({ zoom: 16 });\r

  \  map.on('moveend', function (e) { calc_map_dims(); console.log(\"dims\",
  M.dims); });\r

  \  let tb = M.toolbar = create_toolbar(map);\r

  \  mButton('Dummy', dummy_reaction, tb);\r

  \  mAutocomplete(tb);\r

  }"
test10_function: "function test10_function() {\r

  \  C = new Plotter(dTable, {}, {}, gameloop_start, gameloop_stop, 'cc');\r

  \  let canvas = C.cv;\r

  \  C.add({ astep: .1, a: 0, bstep: .1, b: 0, func: x => Math.sin(x), update:
  test10_update });\r

  }"
test10_queen_html: "function test10_queen_html() {\r

  \  let htmlWORKS = `\r

  \    <svg\r

  \      xmlns=\"http://www.w3.org/2000/svg\"\r

  \      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r

  \      face=\"QS\"\r

  \      height=\"100%\"\r

  \      preserveAspectRatio=\"none\"\r

  \      viewBox=\"-120 -168 240 336\"\r

  \      width=\"100%\"\r

  \      fill=\"#ffff00\"\r

  \      stroke=\"green\"\r

  \      >\r

  \      <defs><rect id=\"XSQ\" width=\"164.8\" height=\"260.8\" x=\"-82.4\"
  y=\"-130.4\"></rect></defs>\r

  \      <symbol id=\"VSQ\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \        <path\r

  \          d=\"M-260 100C40 100 -40 460 260 460M-175 0L-175 -285A175 175 0 0
  1 175 -285L175 285A175 175 0 0 1 -175 285Z\"\r

  \          stroke=\"green\"\r

  \          stroke-width=\"80\"\r

  \          stroke-linecap=\"square\"\r

  \          stroke-miterlimit=\"1.5\"\r

  \          fill=\"none\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SSQ\" viewBox=\"-600 -600 1200 1200\"
  preserveAspectRatio=\"xMinYMid\">\r

  \        <path\r

  \          d=\"M0 -500C100 -250 355 -100 355 185A150 150 0 0 1 55 185A10 10
  0 0 0 35 185C35 385 85 400 130 500L-130 500C-85 400 -35 385 -35 185A10 10 0 0
  0 -55 185A150 150 0 0 1 -355 185C-355 -100 -100 -250 0 -500Z\"\r

  \          fill=\"green\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SQ1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \        <path\r

  \          fill=\"green\"\r

  \          d=\"M635.39648,0 851.86719,312.33789C895.10685,299.11869
  938.83136,290.34833 975,285 924.90197,188.22401 899.89439,94.153799
  874.11133,0ZM295.52539,27.285156C246.27551,180.9799 142.75435,335.54042
  209.25195,483.08398l-17.43359,13.44922c1.76531,151.10099 30.08527,286.57163
  74.54102,398.60938 18.12594,21.287 38.56227,42.11564 61.47851,64.11523
  3.61128,3.46683 7.28461,6.96262
  11.33789,10.61914L901.47852,970l-0.41407,-0.51953c-0.12219,-0.138
  -0.23745,-0.27418 -0.35937,-0.41211 15.27725,17.28278 32.6506,35.12574
  52.3164,53.54294C1030.1434,1094.8366 1080,1150 1130,1250c52.9819,-70.6425
  98.186,-110.0972 170,-152.7871v-37.6016c-68.6196,39.3343 -116.9422,76.6549
  -164.5547,131.9668 -44.9491,-77.8482 -93.9175,-130.6069 -160.20897,-192.68943
  -76.05982,-71.23062 -114.27421,-131.59148 -129.3711,-180.42578
  -15.09688,-48.8343 -8.90849,-86.60287 7.94922,-120.96875 28.31708,-57.72677
  91.51367,-102.35489
  139.07032,-133.86328l-26.7793,-21.49024C896.53697,588.11019
  793.22595,665.67487 806.10938,786.48828L699.86133,787.5 568.0625,939.89258
  429.48438,939.86328C578.06034,763.29892 745.82856,594.02803
  899.1875,455.09961l-9.56836,-10.99023c-28.86687,-3.02061 -55.64392,-10.37642
  -80.51758,-21.42774 -1.77605,4.17261 -4.43372,8.02096
  -7.94336,11.23438C665.11643,558.39566 525.46983,665.166
  419.78906,829.43164L392.45703,811.84766C501.69344,642.05529
  644.58723,533.12674 779.21875,409.9375l17.51367,6.86328c-17.74437,-8.98707
  -34.48695,-19.8921 -50.29101,-32.48437 -124.71285,29.03155 -208.27492,36.48099
  -267.26758,31.98242 0,0 -19.31641,14.60547 -29.31641,14.60547 -15,0
  -25.58008,-5.64453 -30.58008,-5.64453 -5,0 -10,5 -25,5 -15,0 -30,-25 -40,-50
  -1.51422,-2.01895 -3.01443,-4.07919 -4.23242,-5.79297l-39.21875,30.25586
  10.50977,-0.54493c7.17244,138.45299 -1.25836,281.23598
  43.02929,408.13477l-27.41796,17.66602c-1.32891,-2.13106 -2.43311,-4.45616
  -3.26758,-6.95704C288.22851,692.7888 295.29422,552.70428
  289.59766,421.09961l-69.70313,53.77344 20.20508,-16.59375C187.08454,297.85994
  265.54029,182.85491 300.0957,58.960938ZM85,80c-55.000004,50 -100.000004,145
  -35,145 9.343263,0 15.215964,-5.70961
  19.599609,-15.58984l-0.05469,54.80664C63.116922,255.80043 55.218717,250
  45,250c-34.999996,0 -39.999996,70 -5,70 24.46345,0 22.957588,-43.08208
  10.8125,-44.93164 53.48157,5.0855 -15.809214,250.16385 -15.302734,296.2207
  0.268193,24.38822 6.628431,48.73678 31.46289,56.20899C48.176742,632.49354
  35,645.1697 35,660 35,674.30844 47.265656,686.61054 65.384766,692.25586
  41.674751,699.57565 35,720.74035 35,740 35,776.24391 48.1356,836.13212
  55.517578,866.33008 82.604368,846.54619 106.08392,825.42866
  128.83984,800.21875 132.14826,778.91478 135,756.88968 135,740 135,720.60063
  128.2285,699.26867 104.15234,691.95898 118.02756,686.75065 129.28173,676.58841
  135,660c0,-14.83344 -13.18185,-27.51102 -30.78711,-32.89844 24.05654,-8.65812
  30.01787,-32.21714 30.27734,-55.8125C134.99671,525.23221 65.705931,280.15386
  119.1875,275.06836 107.04241,276.91792 105.53655,320 130,320c35,0 30,-70
  -5,-70 -10.83425,0 -19.06007,6.52154
  -25.074219,15.02148L100.25195,209.2793C104.49041,218.99863 110.42097,225
  120,225 185,225 140,130 85,80Zm641.48047,287.83789c-86.62544,19.83455
  -151.78802,28.17022 -200.80469,29.24219 -14.2248,6.27415 -30.07191,11.92239
  -45.7793,18.95898 58.99266,4.49857 142.55438,-2.95118 267.19727,-32.03711
  -7.7527,-5.20716 -14.38853,-10.76914
  -20.61328,-16.16406zm-370.49024,88.29102c29.62693,11.74538 64.9141,21.55877
  110.0293,25.15039 51.3028,4.08421 115.55629,0.48608
  200.56445,-14.4043C568.01187,553.99998 468.15967,644.25595 384.25,765.71289
  359.23837,670.90747 359.53927,564.67648
  355.99023,456.12891ZM1182.5,473.75c-24.0403,0 -48.0562,17.34722
  -29.8594,52.02344A45,42.5 0 0 1 1182.5,515a45,42.5 0 0 1
  29.8652,10.76367C1230.552,491.09427 1206.538,473.75
  1182.5,473.75Zm-54.6914,47.48047c-45.2477,0.77462 -37.6424,97.7377
  22.793,66.2168A45,42.5 0 0 1 1137.5,557.5a45,42.5 0 0 1
  13.1113,-29.94336c-8.6891,-4.53343 -16.2978,-6.43753
  -22.8027,-6.32617zm109.3828,0c-6.5027,-0.11132 -14.1076,1.79222
  -22.793,6.32226A45,42.5 0 0 1 1227.5,557.5a45,42.5 0 0 1
  -13.1094,29.94336c60.4429,31.53409 68.0505,-65.43824
  22.8008,-66.21289zm-24.8301,67.99414A45,42.5 0 0 1 1182.5,600 45,42.5 0 0 1
  1152.6348,589.23633c-11.9875,22.85174 -5.6311,38.16959 6.9726,45.95898
  -23.6821,34.46419 -48.941,66.02584 -74.9492,96.20703C1079.1653,675.69528
  1058.4509,645.45798 1005,670c37.225,16.12754 38.5709,70.31699 75.9492,65.69727
  -5.8664,6.76063 -11.768,13.45662
  -17.6972,20.10156l15.207,1.88672c7.2551,-8.19076 14.4623,-16.46748
  21.6113,-24.85352 5.1929,39.08146 35.0698,-7.57452 67.2129,-5.5
  -16.4802,-41.743 -32.0495,-10.50502 -66.4785,4.63672 24.5708,-28.86629
  48.4073,-59.08334 70.8027,-91.95508 26.5679,6.12811 61.7407,-10.79807
  40.7539,-50.78906zM1255,655c-32.9633,38.74398 -63.8666,77.97963 -125,110
  16.8191,30.21345 26.6544,60.2083 30,90 47.2312,18.32372 82.8871,51.83723
  115,90 2.3419,-37.0436 -4.2974,-71.38724 -30,-100 23.3498,-4.99857
  40.0029,-20.01884 50,-45 -14.5281,-24.40208 -35.9759,-32.69918 -60,-35
  44.8752,-32.16719 30.2665,-71.33926
  20,-110zM811.88477,817.78516c10.86486,41.66548 35.34229,88.00659
  78.58593,139.42382 -4.92291,-5.82285 -9.66276,-11.58316
  -14.2207,-17.2539l-286.46289,-0.0586 64.60547,-0.45703 75.1914,-86.93945
  93.88282,-0.33984c-4.9028,-11.9067 -8.74345,-23.39087
  -11.58203,-34.375zM377.5,842.5c4.42321,0 9.31831,2.00257
  14.86719,9.24023C397.91606,858.97789 402.5,871.0223 402.5,885c0,13.9777
  -4.58394,26.0221 -10.13281,33.25977C386.81831,925.49743 381.92321,927.5
  377.5,927.5c-4.42321,0 -9.31831,-2.00257 -14.86719,-9.24023C357.08394,911.0221
  352.5,898.9777 352.5,885c0,-13.9777 4.58394,-26.02211
  10.13281,-33.25977C368.18169,844.50257 373.07679,842.5 377.5,842.5Z\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SQ2\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \        <path\r

  \          fill=\"red\"\r

  \          d=\"M557.51758,0 805.9668,330.45703 851.01367,311.99805
  635.36719,0Zm78.02148,0 63.76563,90.75C709.99966,65.000167 725,65 725,65
  716.50651,26.779299 728.31462,17.104416 733.20117,0ZM820,265
  851.86719,312.33789C877.5079,304.49903 903.31958,298.22492 927.6543,293.26562
  907.75762,290.72138 885.5191,284.6565 865,270c-10,5 -30,10
  -45,-5zm99.12695,216.28711C764.14521,621.01648 595.55342,787.07572
  470.35547,940.01172L525,940
  685,755h120.41797l-0.0547,-0.41211c6.37431,-102.76161 97.50088,-170.65811
  160.41211,-212.22851zm-727.41992,15.5625 -59.86133,46.34766
  -0.39648,0.30468c1.93099,12.0459 3.10803,21.69313 3.04101,27.78711
  -0.25947,23.59536 -6.2208,47.15438 -30.27734,55.8125C121.81815,632.48898
  135,645.16656 135,660 129.28173,676.58841 118.02756,686.75065
  104.15234,691.95898 128.2285,699.26867 135,720.60063 135,740c0,16.88968
  -2.85174,38.91478 -6.16016,60.21875 -1.95154,2.162 -3.90854,4.29257
  -5.87304,6.39453C138.56664,789.96704 153.92711,771.43051 170,750
  200.25102,810.50205 230.44886,854.59181 266.85742,895.71484
  221.90196,783.10482 193.58426,647.63449
  191.70703,496.84961ZM44.53125,610.36133
  0,644.61523V902.7832C30.797744,884.46615 56.707359,866.73637
  80.427734,846.89844 72.427991,853.57027 64.158102,860.01913
  55.517578,866.33008 48.1356,836.13212 35,776.24391 35,740 35,720.74035
  41.674751,699.57565 65.384766,692.25586 47.265656,686.61054 35,674.30844
  35,660 35,645.1697 48.176742,632.49354 66.972656,627.49805 56.528563,624.35562
  49.361734,618.22105 44.53125,610.36133Zm1190.09765,68.79687
  -1.1211,1.04688c-20.0542,23.0427 -41.8711,45.665 -71.7441,65.72265
  27.117,39.37142 36.6532,80.37363 27.7441,123.12891 25.4392,14.76465
  47.2329,33.87001 67.875,55.8418 -10.0896,-28.95393 -26.9566,-68.05217
  -64.6191,-89.36328C1229.865,829.72137 1245.3631,819.51581
  1260,800c-28.5778,-21.24841 -50.4759,-15.94491 -77.3027,-15.66992
  39.149,-21.89578 49.9371,-64.78262
  51.9316,-105.17188zM110.74609,819.23828c-0.7889,0.78628 -1.58065,1.56702
  -2.37304,2.3457 0.792,-0.77791 1.58362,-1.55961
  2.37304,-2.3457zm-5.15234,5.05078c-0.76819,0.74251 -1.53476,1.48679
  -2.30664,2.22266 0.77112,-0.73534 1.53841,-1.48017
  2.30664,-2.22266zm-5.26172,5.00586c-2.077449,1.94603 -4.165139,3.87648
  -6.273436,5.7793 2.104356,-1.90192 4.194747,-3.83083
  6.273436,-5.7793zm-6.539061,6.02149c-1.467973,1.32281 -2.945132,2.63598
  -4.429688,3.93945 1.482456,-1.30407 2.961518,-2.61456
  4.429688,-3.93945zM377.5,862.5a11,22.5 0 0 0 -11,22.5 11,22.5 0 0 0 11,22.5
  11,22.5 0 0 0 11,-22.5 11,22.5 0 0 0 -11,-22.5zm225.17578,127.46484a10,10 0 0
  0 -10,10 10,10 0 0 0 10,9.99996 10,10 0 0 0 10,-9.99996 10,10 0 0 0
  -10,-10zM420,990a10,10 0 0 0 -10,10 10,10 0 0 0 10,10 10,10 0 0 0 10,-10 10,10
  0 0 0 -10,-10zm91.13281,0.41016a10,10 0 0 0 -10,10.00004 10,10 0 0 0 10,10
  10,10 0 0 0 10,-10 10,10 0 0 0 -10,-10.00004z\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SQ3\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \        <path\r

  \          fill=\"#44F\"\r

  \          d=\"M472.5,150a12.5,20 0 0 0 -12.5,20 12.5,20 0 0 0 12.5,20
  12.5,20 0 0 0 12.5,-20 12.5,20 0 0 0 -12.5,-20zm-140,5a12.5,20 0 0 0 -12.5,20
  12.5,20 0 0 0 12.5,20 12.5,20 0 0 0 12.5,-20 12.5,20 0 0 0
  -12.5,-20zm23.49023,301.12891c3.54904,108.54757 3.24814,214.77856
  28.25977,309.58398 83.90967,-121.45694 183.76187,-211.71291
  282.33398,-298.83789 -85.00816,14.89038 -149.26165,18.48851 -200.56445,14.4043
  -45.1152,-3.59162 -80.40237,-13.40501
  -110.0293,-25.15039zm42.92579,22.92187c22.57573,0.10326 52.52779,2.34383
  83.49804,6.2461 65.74558,8.28415 118.15335,21.65893 117.05469,29.87304
  -1.09829,8.2139 -56.30922,5.07893 -122.05273,-3.20508 -65.73948,-8.28354
  -117.1185,-18.57868 -116.02735,-26.79296 0.53448,-4.02047 14.07178,-6.22853
  37.52735,-6.1211zM1117.5,492.5c2.4011,8.40385 4.2266,18.24941
  5.4746,28.84375v0.36133c7.3876,-1.36391 16.4655,0.0837
  27.2324,5.62304l-21.2675,-21.26757a1.50015,1.50015 0 0 1 1.0449,-2.57617
  1.50015,1.50015 0 0 1 1.0761,0.45507l21.2676,21.26758c-5.5291,-10.74776
  -6.9807,-19.81297 -5.6289,-27.19336 -10.7286,-1.24895 -20.7021,-3.08593
  -29.1992,-5.51367zm130,0c-8.4251,2.40718 -18.2988,4.23414
  -28.9238,5.48242h-0.2793c1.3613,7.38557 -0.087,16.46062
  -5.6231,27.22266l21.2657,-21.26563a1.50015,1.50015 0 0 1 1.0312,-0.45312
  1.50015,1.50015 0 0 1 1.0898,2.57422l-21.2675,21.26757c10.7565,-5.53399
  19.8272,-6.98416 27.2109,-5.62695v-0.17187c1.2486,-10.6649 3.081,-20.57644
  5.4961,-29.0293zm-853.59961,15.25781c20.38428,0.10329 47.42876,2.34386
  75.39258,6.2461 59.36368,8.28422 106.68388,21.65899 105.69141,29.87304
  -0.99271,8.21355 -49.91699,8.15671 -109.27735,-0.12695 -59.36371,-8.28422
  -106.68391,-21.659 -105.69141,-29.87305 0.48636,-4.01928 12.70935,-6.22659
  33.88477,-6.11914zm7.69531,34.67969c15.09367,-0.0753 32.61454,0.81411
  50.47852,2.5625 51.50146,5.04084 94.00823,14.75226 93.67578,23.00391
  -0.32891,8.2521 -42.34749,10.85536 -93.84961,5.81445C400.39893,568.77752
  358.91755,558.00165 359.25,549.75c0.20345,-5.08688 15.52034,-7.17888
  42.3457,-7.3125zm590.81446,21.09375c-26.28817,17.83124 -58.00395,39.71623
  -85.84375,65.82227L1063.252,755.79883c5.9292,-6.64494 11.8308,-13.34093
  17.6972,-20.10156C1043.5709,740.31699 1042.225,686.12754
  1005,670c53.4509,-24.54202 74.1653,5.69528 79.6582,61.40234 18.288,-21.22222
  36.2025,-43.13214 53.4609,-66.25 -50.4965,-31.89003 -99.3677,-65.63189
  -145.70894,-101.62109zm92.24804,167.87109c-1.2353,1.43353 -2.4703,2.86748
  -3.709,4.29493 1.3064,-0.16146 2.6533,-0.388 4.0508,-0.69727 -0.1038,-1.21628
  -0.2241,-2.40447 -0.3418,-3.59766zm-21.4062,24.39649
  1.3242,1.02344C1092.8236,758.22045 1130,765 1130,765c33.2353,-17.40792
  57.5278,-36.95014 78.082,-57.38477 -19.9562,-11.65548 -39.7017,-23.55345
  -59.2109,-35.71875 -15.5528,20.88792 -31.6462,40.7815 -48.0664,60.07227
  34.429,-15.14174 49.9983,-46.37972 66.4785,-4.63672 -32.1431,-2.07452
  -62.02,44.58146 -67.2129,5.5 -7.149,8.38604 -14.3562,16.66276
  -21.6113,24.85352zM399.88477,574.98828c12.13924,-0.0753 26.23048,0.81416
  40.59765,2.5625 41.42116,5.04089 74.78321,15.81675 74.51563,24.06836
  -0.26463,8.25206 -34.05885,10.85531 -75.48047,5.81445 -41.42116,-5.04089
  -74.78321,-15.81675 -74.51563,-24.06836 0.16364,-5.08693 13.30756,-8.24338
  34.88282,-8.37695zm814.90823,12.6836 21.2675,21.26757a1.50015,1.50015 0 1 1
  -2.121,2.1211l-21.2657,-21.26563c5.5369,10.76367 6.9837,19.84044
  5.6211,27.22656h0.3223c10.6094,1.24816 20.4685,3.07443 28.8828,5.47852
  -2.4278,-8.49731 -4.2627,-18.47029 -5.5117,-29.19922 -7.3807,1.35234
  -16.4468,-0.0994 -27.1953,-5.6289zm-64.5879,0.002c-10.7501,5.53028
  -19.8161,6.98044 -27.1973,5.62695v0.0723c-1.2488,10.70195 -3.0853,20.64836
  -5.5078,29.12695 8.4975,-2.42785 18.4701,-4.26471 29.1992,-5.51367
  -1.3518,-7.38039 0.1,-16.44561
  5.6289,-27.19336l-21.2676,21.26758a1.50015,1.50015 0 1 1
  -2.121,-2.1211zM399.95117,608.2207c7.75591,-0.014 16.33902,0.59569
  25.04883,1.7793 30.51033,4.14665 55.19775,16.74619 55.24414,25 0.0491,8.25469
  -24.64792,11.5847 -55.16016,7.4375 -30.51033,-4.14665 -55.28173,-14.19933
  -55.32812,-22.45312 -0.0324,-5.62262 11.68692,-11.73096
  30.19531,-11.76368zm2.94141,36.28321c3.92832,-0.0157 8.00124,0.15115
  12.10742,0.49609 25.08573,2.10744 44.77796,7.02839 45.42188,14.97852
  0.64298,7.94981 -19.17087,12.68576 -44.25586,10.57812 -25.08573,-2.10744
  -45.94398,-10.26081 -46.5879,-18.21094 -0.52278,-6.4668 13.79255,-7.76393
  33.31446,-7.84179zm-6.3711,30.78125c1.53788,10e-4 3.10151,0.0612
  4.67383,0.17968 15.24356,1.1523 28.12847,7.43255 28.7793,14.02735
  0.6519,6.59512 -11.17778,11.00764 -26.42188,9.85547 -15.24356,-1.1523
  -28.12847,-7.43255 -28.77929,-14.02735 -0.57317,-5.81151 8.60794,-10.04793
  21.74804,-10.03515zm-2.7207,30.4707c0.97501,0.002 1.96625,0.0499
  2.96289,0.14453 9.66123,0.91446 17.82809,5.89851 18.24219,11.13281
  0.4126,5.23472 -7.08576,8.73687 -16.74805,7.82227 -9.66123,-0.91446
  -17.82809,-5.89851 -18.24219,-11.13281 -0.3645,-4.61356 5.45528,-7.97697
  13.78516,-7.9668zm906.19922,0.0781 -34.2773,2.85547c0.2249,20.00253
  -6.7832,39.15319 -30.7188,56.31055 24.0241,2.30082 45.4719,10.59792 60,35
  -9.9971,24.98116 -26.6502,40.00143 -50,45 19.6816,21.91005 28.1768,47.18324
  30.0293,74.45312l0.01,0.008 24.957,11.09375zm-167.2656,64.20508c0.2372,0.44647
  0.4708,0.89347 0.7051,1.33985 -0.2343,-0.44637 -0.4679,-0.89339
  -0.7051,-1.33985zm3.041,5.88282c0.083,0.16606 0.171,0.33199 0.2539,0.49804
  -0.083,-0.16604 -0.1705,-0.33202
  -0.2539,-0.49804zm2.6758,5.48437c0.2147,0.45253 0.425,0.90499 0.6367,1.35742
  -0.2117,-0.45239 -0.4219,-0.90493
  -0.6367,-1.35742zm2.455,5.32422c0.1795,0.40036 0.3641,0.80089 0.5411,1.20117
  -0.177,-0.40029 -0.3615,-0.80081
  -0.5411,-1.20117zm2.5958,5.98437c0.2099,0.50184 0.413,1.00415 0.6191,1.50586
  -0.2062,-0.5018 -0.4092,-1.00393
  -0.6191,-1.50586zm2.0703,5.11719c0.1975,0.50277 0.4,1.00516 0.5937,1.50781
  -0.1937,-0.50252 -0.3962,-1.00516
  -0.5937,-1.50781zm2.3418,6.1875c0.1922,0.53072 0.3764,1.06121 0.5644,1.5918
  -0.188,-0.53055 -0.3722,-1.06112
  -0.5644,-1.5918zm1.7324,4.96485c0.2042,0.60477 0.4106,1.20984 0.6094,1.81445
  -0.1988,-0.60461 -0.4051,-1.20971
  -0.6094,-1.81445zm2.0273,6.26562c0.1846,0.60177 0.3579,1.20308 0.5371,1.80469
  -0.1792,-0.60139 -0.3525,-1.20313
  -0.5371,-1.80469zm1.4688,5.00977c0.1799,0.63781 0.3593,1.27644 0.5332,1.91406
  -0.174,-0.63786 -0.3532,-1.27602 -0.5332,-1.91406zM377.5,842.5c-4.42321,0
  -9.31831,2.00257 -14.86719,9.24023C357.08394,858.97789 352.5,871.0223
  352.5,885c0,13.9777 4.58394,26.0221 10.13281,33.25977 5.54888,7.23766
  10.44398,9.24023 14.86719,9.24023 4.42321,0 9.31831,-2.00257
  14.86719,-9.24023C397.91606,911.0221 402.5,898.9777 402.5,885c0,-13.9777
  -4.58394,-26.02211 -10.13281,-33.25977C386.81831,844.50257 381.92321,842.5
  377.5,842.5Zm-0.27344,4.79492c2.95574,0.0879 5.94922,5.08008 5.94922,10.70508
  10.93128,-0.11104 14.67749,3.31056 5.67578,13 13.69744,3.7436 10.6454,8.69968
  2.83789,14 7.80751,5.30032 10.85955,10.2564 -2.83789,14 9.00171,9.68944
  5.2555,13.11104 -5.67578,13 0,10 -9.4596,18 -11.35156,0 -10.93128,0.11104
  -14.67748,-3.31056 -5.67578,-13 -13.69744,-3.7436 -10.6454,-8.69968
  -2.83789,-14 -7.80751,-5.30032 -10.85955,-10.2564 2.83789,-14 -9.0017,-9.68944
  -5.2555,-13.11104 5.67578,-13 0.82773,-7.875 3.10344,-10.77344
  5.40234,-10.70508zm352.35742,5.20508 -75.1914,86.93945
  43.0039,-0.041L744.44531,885H840l-15,-32.5zm29.72266,65
  -19.23047,22.23633L876.25,939.95508 860,917.5Zm-104.13476,52.41992
  -315.75977,0.17969c2.43984,2.47881 4.98787,4.87423 7.56641,7.28906
  15.37025,14.39437 29.32058,28.43253 41.91015,42.12693 1.06974,-4.4442
  6.04965,-11.1309 16.11133,-19.5156 -30,-25 -15,-34.99999 15,-15 30,-19.99999
  45,-10 15,15 30,25 15,35 -15,15 -11.06914,7.3794 -20.08451,10.6644
  -25.5625,10.6289 1.31057,1.4627 2.62767,2.9262
  3.90625,4.3809l256.41797,-0.1328zm-170.01172,4.44531C490.60938,974.21875
  499.75,977.5 511,985c30,-19.99999 45,-10 15,15 30,25 15,35 -15,15 -30,20
  -45,10 -15,-15 -18.75,-15.625 -19.92188,-25.39063
  -10.83984,-25.63477zm91,0C581.60938,974.21875 590.75,977.5
  602,985c30,-19.99999 45,-10 15,15 30,25 15,35 -15,15 -30,20 -45,10 -15,-15
  -18.75,-15.625 -19.92188,-25.39063 -10.83984,-25.63477z\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SQ4\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \        <path\r

  \          fill=\"green\"\r

  \          d=\"M499.67383,0C598.83088,212.42554 698.5156,423.78371
  891.07812,444.24805L557.50781,0ZM299.89844,59.855469C265.54099,182.85387
  187.08454,297.85994 240.09961,458.2793L349.875,372.94531C322.20549,333.64118
  300,282.28964 300,255c0,-20 5.00324,-149.9992 5,-155 -10e-4,-2.004308
  -2.41143,-19.27436 -5.10156,-40.144531zM899.91016,454.8418C746.55122,593.77022
  578.78424,763.04072 429.50781,939.46875l40.84766,0.54297C595.55342,787.07576
  764.14431,621.01748 918.95508,481.37891Zm65.79101,87.45703c-28.87179,19.18723
  -64.12524,44.12835 -93.97851,75.52344l25.55078,20.04296c30.22964,-29.84438
  65.96002,-54.59002 95.59961,-73.97851 -9.28135,-6.87909 -18.47109,-14.10656
  -27.17188,-21.58789zM685,755 525.10156,939.88281 570,940
  699.86133,787.5H806.65039L805,755Z\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SQ5\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \        <path\r

  \          stroke=\"#44F\"\r

  \          stroke-linecap=\"round\"\r

  \          stroke-linejoin=\"round\"\r

  \          stroke-width=\"6\"\r

  \          fill=\"none\"\r

  \          d=\"M435,885A57.5,75.000002 0 0 1 377.5,960.00001 57.5,75.000002
  0 0 1 320,885 57.5,75.000002 0 0 1 377.5,810 57.5,75.000002 0 0 1
  435,885v0M417.07718,940H876.02627M308.27069,940h28.75722M339.49097,970H901.47\
  783M131.84482,543.19629 351.03451,374.58883M6.9310566e-5,644.61533
  44.832165,610.1291M1138.1663,665.18229C1077.9926,627.18313 1020.1253,586.55302
  965.29601,542.45758M1208.5796,707.90733c-20.1878,-11.78458 -40.1599,-23.81534
  -59.8906,-36.12132M557.51806,-3.5577172e-4
  965.44559,542.57786M1299.7291,1059.765c-68.4773,39.2778 -116.7334,76.5733
  -164.2838,131.8131 -44.9491,-77.8482 -93.9175,-130.6069 -160.20897,-192.68943
  -76.05982,-71.23062 -114.27421,-131.59148 -129.3711,-180.42578
  -15.09688,-48.8343 -8.90849,-86.60287 7.94922,-120.96875 28.31708,-57.72677
  91.51285,-102.35515
  139.0695,-133.86354M499.68528,0.03748108C598.83742,212.45251
  698.51437,423.77834 890.34164,443.851M364.36489,812.31243C320.07724,685.41364
  328.50886,542.63024 321.33642,404.17725c76.71711,39.85219 163.35704,77.44074
  457.8821,5.76082C644.587,533.12731 501.69292,642.05444
  392.45651,811.84681M355.97656,456.125c29.62956,11.74764 64.92126,21.56216
  110.04297,25.1543 51.30556,4.08443 115.56309,0.48617 200.57813,-14.40625
  -98.57798,87.12824 -198.39177,177.48156 -282.2461,298.86133
  -24.96545,-94.92731 -24.7974,-201.06283
  -28.375,-309.60938v0M867.34252,440.4065C719.62961,574.07588 560.4386,730.57461
  436.09373,879.43791M223.89186,472.86906c-0.82324,183.16931 37.98603,343.48203
  98.11552,466.27071M191.49798,496.71315c2.08648,150.92196 30.40471,286.39171
  75.55251,398.73891M429.507,939.46794C578.78343,763.03991 746.55158,593.76963
  899.91052,454.84121M470.35494,940.01166C595.55289,787.0757 764.14488,621.01728
  918.95565,481.37871M525,940 685,755h120.41872M567.92551,940.0502
  699.86133,787.5h106.78892M611.46541,939.39021
  714.72266,820h97.2642M654.39213,939.43943
  729.58398,852.5h93.89714M697.39662,939.39902
  744.44531,885h95.04566M740.07521,939.73575
  759.30664,917.5H860M906.39152,629.42293 1063.7852,756.67736M871.92369,617.813
  1043.2441,757.01082M459.61865,481.34795C414.86903,573.51288
  406.45192,669.62669 385,765M303.65592,-0.00221915C259.09343,162.78907
  138.61386,327.07777 209.42337,483.4732M240.09997,458.27954C187.0849,297.86018
  265.54056,182.85405 300.09597,58.960082M805.81085,330.134c14.88787,-6.44544
  30.42237,-12.16006 46.14865,-17.2138M0.09725143,902.73906C71.866196,860.06685
  117.03718,820.61709 170,750c50,100 99.8567,155.1639 176.97865,227.3892
  281.56105,263.6842 94.15072,409.6105 -13.08443,480.4695M377.5,842.5c4.42321,0
  9.31831,2.00257 14.86719,9.24023C397.91606,858.97789 402.5,871.0223
  402.5,885c0,13.9777 -4.58394,26.0221 -10.13281,33.25977C386.81831,925.49743
  381.92321,927.5 377.5,927.5c-4.42321,0 -9.31831,-2.00257
  -14.86719,-9.24023C357.08394,911.0221 352.5,898.9777 352.5,885c0,-13.9777
  4.58394,-26.02211 10.13281,-33.25977C368.18169,844.50257 373.07679,842.5
  377.5,842.5v0M1130,765c16.8191,30.21345 26.6544,60.2083 30,90 47.2312,18.32372
  82.8871,51.83723 115,90 2.3419,-37.0436 -4.2974,-71.38724 -30,-100
  23.3498,-4.99857 40.0029,-20.01884 50,-45 -14.5281,-24.40208
  -35.9759,-32.69918 -60,-35 44.8752,-32.16719 30.2665,-71.33926 20,-110
  -32.9633,38.74398 -63.8666,77.97963
  -125,110v0M1300,705.83334l-34.3239,2.86032M1299.9997,930.55544l-26.1711,-11.6\
  3161M1192.7269,836.42558c37.6985,20.41997 54.5672,59.51932
  65.2796,89.01033M1182.9686,784.9233c26.555,-0.86899 48.4536,-6.17171
  77.0314,15.0767 -14.6369,19.51581 -30.1358,29.72065
  -67.2011,34.6433M1234.6287,679.15791c-1.9945,40.38926 -12.7829,83.27561
  -52.2037,104.5774M1162.3431,745.42454c26.5383,39.87481 36.0743,80.87688
  26.979,123.43436M1130,765c0,0 -82.1675,-15 -95,-5 -12.8325,10
  -32.9691,31.30714 -40,40 -31.97044,39.52731 3.64509,49.72935
  20,30M1050,800c-59.31161,25.45028 -64.22618,120.61499
  20,25M1041.1933,853.52948c-14.9444,32.29436 0.7581,60.30105
  58.5,-5.24847M1062.1853,882.59071C1040.9944,921.29246 1103.755,918.14402
  1160,855M1063.2524,755.79961c33.572,-37.62441 66.2866,-76.82735
  96.4461,-120.73492M1078.4582,757.6865c32.4929,-36.68328 64.0954,-75.00591
  93.2554,-117.82589M1085,735c-4.9523,-58.0017 -25.4042,-90.06768 -80,-65
  38.526,16.69119 38.6175,74.15849 80,65v0M1005,670c37.8073,-6.25375
  56.1399,40.79694 80,65M1100,732.33169c35,-15 50.6726,-47.07119 67.2824,-5
  -32.2824,-2.08351 -62.2824,45 -67.2824,5v0M1100.0662,732.84533c26.3257,8.26747
  52.4616,-23.9051 67.2162,-5.51364M1155.0001,585.00001C1080.0001,630
  1080,484.99999 1155,530c-45,-75 100,-75 55,0 75,-45 75,100 10e-5,55
  45,75.00001 -100.0001,74.99999 -55,10e-6v0M1242.5,557.5c-60,0 -60,0 -60,-60
  0,60 0,60 -60,60 60,0 60,0 60,60 0,-60 0,-60
  60,-60v0M1122.9743,521.34338c-1.248,-10.59434 -3.0726,-20.43952
  -5.4737,-28.84337 8.5766,2.45046 18.6544,4.30045
  29.4977,5.54996M1146.7554,616.97813c-10.7509,1.24908 -20.7424,3.08971
  -29.255,5.52188 2.4225,-8.47859 4.2581,-18.42426
  5.5069,-29.12621M1241.9485,592.9857c1.2496,10.84959 3.1002,20.93331
  5.5519,29.5143 -8.4143,-2.40409 -18.2735,-4.23021
  -28.8829,-5.47837M1218.5761,497.98319c10.625,-1.24828 20.4988,-3.07601
  28.9239,-5.48319 -2.4151,8.45286 -4.2469,18.3639
  -5.4955,29.0288M357.95908,386.26136c-4.7848,-2.30618 -9.52375,-4.6875
  -14.28345,-7.12611M748.06895,383.93902C622.45119,413.08814 538.88863,420.5377
  479.79194,417.07826M355.99023,456.12891c29.62693,11.74538 64.9141,21.55877
  110.0293,25.15039 51.3028,4.08421 115.55629,0.48608
  200.56445,-14.4043C568.01187,553.99998 468.15967,644.25595 384.25,765.71289
  359.23837,670.90747 359.53927,564.67648
  355.99023,456.12891v0M85,135c10.787262,31.12992 5,90 35,90 65,0 20,-95
  -35,-145 -55.000004,50 -100.000004,145 -35,145 30,0 24.21273,-58.87008
  35,-90v0M40,285c0,0 0,-10 10,-10 12.88094,0 15,45 -10,45 -34.999996,0
  -29.999996,-70 5,-70 30,0 40,50 40,50 0,0 10,-50 40,-50 35,0 40,70 5,70 -25,0
  -22.88094,-45 -10,-45 10,0 10,10 10,10M120,275c-55,2.66831 15,250
  14.49097,296.289C134.16784,600.67311 125,630 85,630 45,630 35.832163,600.67311
  35.509031,571.289 35,525 105,277.66831
  50,275M70,264.98358V208.33333M100,265.18883V208.74384M103.20611,627.39263C121\
  .81764,632.48836 135,645.16656 135,660c0,19.32997 -22.38576,35 -50,35
  -27.614237,0 -50,-15.67003 -50,-35 0,-14.8303 13.176786,-27.50627
  31.782083,-32.60414M65.931232,692.4756C41.674852,699.57662 35,720.74035
  35,740c0,36.24391 13.136211,96.133
  20.364326,126.34321M128.36935,800.67704C132.14739,778.91407 135,756.88968
  135,740c0,-19.39937 -6.77205,-40.73054
  -31.46191,-47.67672M256.89224,885h6.38602M1.1417102e-4,884.99999
  28.737098,885M245.57157,870h11.90122M2.5229169e-5,870.00002
  51.088175,870M233.67034,855h18.57752M4.1609595e-5,854.99999
  52.539543,855M222.93022,840h24.09272M7.6084636e-5,840.00001
  49.346532,840M212.77064,825h29.89819M4.2336546e-5,825.00002
  46.443795,825M203.1916,810h34.54258M4.0905762e-6,810.00002
  43.541058,810M194.48339,795h38.89668M129.46208,795h5.22493M-3.8457096e-5,795.\
  00001
  40.638321,795M186.06545,780h42.96051M131.78427,780h14.51368M-3.1733115e-5,780\
  .00001
  38.316131,780M178.22806,765h46.73407M133.81618,765h24.67327M10,765H36.284215M\
  134.68701,750h86.50156M10,750H34.542573M134.97728,735h83.01828M15,735H35.1231\
  2M132.65509,720H205M15,720H37.844594M155,705h45M325,510c-11.82334,-17.57111
  -24.45521,-31.94743 -45.42097,-47.16261 -21.67788,-15.73198 -32.01525,9.6364
  -23.86278,22.70472M325,540c-13.68399,-15.7169 -40.72661,-39.31758
  -62.25684,-51.80699 -20.39713,-11.83211 -26.52283,15.09906
  -9.53546,27.99468M326.64903,572.53873c-13.68399,-15.7169 -40.42328,-39.85576
  -62.25684,-51.80699 -33.04187,-18.08643 -43.83934,14.15892
  -2.74316,31.80699M329.68204,632.14459c-13.68399,-15.7169 -40.42328,-39.85576
  -62.25684,-51.80699 -30.81157,-16.86561 -37.65608,16.8659
  -5.11631,35.80661M328.06764,597.68777c-13.86078,-13.59047 -33.31597,-27.70524
  -50.77313,-39.51278 -22.07438,-14.9305 -34.10496,4.47364
  -22.83565,17.22609M332.19576,659.38835c-13.77031,-13.23256 -32.62008,-26.88451
  -49.58329,-38.35795 -24.04479,-16.26322 -36.17268,12.27173
  -19.25152,25.31598M335.48063,686.60634C319.24375,673.64242 295.51352,659.7442
  277.4252,650.3376c-31.2697,-16.26141 -36.88691,20.47944
  -3.29829,37.12122M339.44241,709.94356C293.812,671.34406 241.20364,684.64228
  285,715M345.57813,743.85785c-49.78299,-42.23381 -140.14002,-42.27022
  -51.45386,5.50004M359.15379,797.42734C296.30783,757.35598 217.41506,767.9862
  315.25691,808.08817M356.15219,815.71589c-43.41581,-18.1629 -92.79129,0.20988
  -43.97099,13.65755M335.79649,833.55074c-36.46249,-11.38361 -55.92576,9.42664
  -11.42381,20.21059M323.63736,467.38673c-7.1925,-7.58612 -15.51039,-14.89158
  -25.85855,-22.4014 -17.52111,-12.71535 -26.71907,0.32727
  -25.12324,12.4885M322.15877,428.22708c-1.31784,-1.00168 -2.67007,-2.00587
  -4.05887,-3.01374 -19.41173,-14.0874 -28.60717,3.4419
  -24.22651,16.36102M351.5017,769.34668c-41.8286,-32.62324 -87.13007,-22.98664
  -57.82646,2.59886M396.50984,805.03398c97.55186,1.04019 65.93584,25.61549
  21.19412,25.63392M410.20409,785.71584c31.87867,-11.92022 60.58013,-9.17207
  74.95842,-1.62887 16.81695,8.82258 14.04006,24.2047
  -26.16419,30.34906M430.54986,757.7319c58.57662,-11.0001 103.69453,13.94896
  55.48459,26.1888M451.62343,729.60393c67.42086,-18.09697 125.45489,10.74224
  49.42624,33.66324M469.15226,707.61747c69.25339,-23.47062 135.42699,4.47512
  67.15155,28.14525M497.03474,675.73394c50.50234,-8.00778 88.6752,9.66559
  55.551,28.0217M514.06286,656.56715c77.25396,-19.94453 157.95502,17.262
  48.7626,27.75334M550.91529,618.31036c57.1762,-5.00205 100.00874,18.02731
  40.2256,35.03407M568.89077,600.93936c75.24789,-19.79781 151.84194,14.60918
  51.22446,34.33609M596.84001,574.15634c55.64482,-7.64299 102.46778,11.7471
  64.24628,28.76475M620.73761,552.10789c71.56974,-16.51587 140.66537,14.62009
  53.45997,34.06378M660.73433,515.56983c57.1151,-4.52529 99.00079,18.87447
  36.45506,35.78648M684.38719,494.58861c73.88041,-16.89549 144.8643,16.89901
  43.68109,36.08147M722.79564,460.82624c57.76542,-5.50387 101.75016,17.65976
  42.02455,34.7974M748.43052,437.7647c68.01755,-11.92015 127.59071,17.4385
  43.80212,36.02686M645.55164,273.86211C640.4516,285.47932 635.59316,297.26013
  610,295c-14.37233,81.30224 -73.77303,98.38804 -130,120 0,0 -19.41945,15.64589
  -29.41945,15.64589C435.58055,430.64589 425,425 420,425c-5,0 -10,5 -25,5 -15,0
  -30,-25 -40,-50 -30,-40 -55,-96.04455 -55,-125 0,-20 5.003,-149.9992 5,-155
  -0.002,-3.089335 -5.72781,-42.445846
  -10.1037,-72.07356M622.93321,240.32144C616.61632,250.552 609.19352,264.74236
  615,265c2.73428,0.12132 6.96971,-10.37759
  10.24354,-19.90618M904.16018,494.81448l50.56379,54.17549M889.99031,508.2039l4\
  8.73454,52.21558M875.34795,521.08709l48.01937,51.44933M861.63691,534.96812l46\
  .15447,49.45122M847.01655,547.87487l45.96336,49.24646M832.83302,561.24966l35.\
  28817,37.80876M818.66315,574.63908l24.02599,25.74214M803.86532,587.3557l17.84\
  203,19.11646M790.06402,601.14003l8.92784,9.56554M482.75862,925h55.41872M495.8\
  9491,910h55.00821M508.21018,895h55.82923M521.34647,880h55.41872M534.48276,865\
  h55.41872M552.95566,845H585M790,820v32.5M765,820v32.5M740,820v32.5M703.26765,\
  833.26765l22.578,22.578M684.08867,854.08867l23.39901,23.39901M665.93596,875.9\
  3596l22.78325,22.78325M648.19376,898.19376l22.578,22.578M629.22003,919.22003l\
  20.73071,20.73071M791.29599,310.75526c15.62961,-6.29692 31.83381,-11.83473
  48.11454,-16.69002M776.15664,290.35133c15.84539,-6.35519 32.2728,-11.93292
  48.76488,-16.81275M760.82223,270.4856c16.18061,-6.50419 32.97255,-12.19625
  49.8241,-17.16102M746.54814,252.22866c16.42632,-6.7965 33.54246,-12.73644
  50.75899,-17.91046M739.12096,229.17409c11.71799,-4.608 23.73402,-8.79725
  35.84163,-12.5995M726.54679,208.22774c8.46394,-3.2756 17.07495,-6.33535
  25.75602,-9.1911M711.68624,188.33917c5.39484,-2.00758 10.85695,-3.94932
  16.37032,-5.82515M900.40882,94.431781C848.5463,114.25376 796.72828,69.769511
  761.4322,93.621964 715,125.00001 755,185 789.33498,165.18883
  821.13528,146.84017 790,105 775,115c-9.30261,6.20174 -14.88842,18.30946 -10,25
  6.18042,8.45885 10.48873,9.62814 20,5M901.46652,97.13303C861.76115,135.4564
  879.34663,201.01228 842.74068,222.52055 794.42332,250.91 757.5027,188.96753
  790.17065,166.51363c30.25635,-20.79631 54.6061,25.32412 39.1205,34.55428
  -9.60379,5.72429 -22.93675,5.55043 -26.86936,-1.74304 -4.972,-9.22111
  -4.17161,-13.61293 4.10189,-20.20332M765,180l90,-60M845,160c-10,-10
  -45.467,-11.35662 -55,5 22.00764,-11.03808 34.76336,-24.75676
  25,-45M795,230c25,30 50,20 75,10 24.05541,32.7653 64.66095,38.66637
  105,45M725,130C715,110 740,85 755,75 749.14905,51.948962 757.70702,26.00987
  766.59362,0.00490542M700,90c10,-25 25,-25 25,-25 -8.48271,-38.172217
  3.28893,-47.867055
  8.18679,-64.93099617M427.96416,0.01822477C445.06535,51.748024
  483.31343,78.400493
  539.31946,83.994433M446.67053,0.04362022C462.63103,38.843647
  492.03631,61.699978
  533.14043,70.683071M461.24526,0.01603427C475.22521,27.447203
  496.92922,45.718691
  525.58366,55.74792M476.99588,0.10806452C487.38028,16.453559
  500.99836,28.964352
  517.63646,37.893813M371.26432,0.04443925C356.34418,40.196712
  340.91798,80.075485
  304.69652,100.28589M355.60874,0.04353776C343.34293,31.804187
  329.13875,61.845937
  302.67098,80.298673M339.57059,0.02060224C329.73362,23.196287
  317.89132,44.53011
  299.71459,59.883794M325.15652,0.08430598C317.46458,14.722402
  308.27692,27.964826 296.26758,38.544057M305,120c41.1016,-25.066138
  61.56092,-14.28714 80,0 20,55 -15,110 -14.41945,151.6763 0.21559,15.47674
  11.72696,13.44856 19.41945,13.3237 4.99934,-0.0811 15,10
  15,10M305,125c29.58587,-20.97635 55.47603,-17.50669 80,-5M430,245c20,0 20,30
  5,30 -40,5 -40,-10 -5,0M365,315v10l5,-5
  -5,-5v0M455,320l5,-5v10l-5,-5v0M370,320c0,0 5,5 10,5 5,0 5.24415,-4.00984
  12.32219,-4.4848C400,320 400,325 405,325c5,0 15,-10 20,-10 5,0 15,5
  20,5h10M390,340c3.06957,28.45212 45.6136,8.68856 45,5 -5,5 -44.77199,31.85105
  -45,-5v0M430,135c51.53607,-36.718861 85.86501,-16.18211 120,5
  -35.40475,-25.98218 -85,-45 -120,-5v0M540,160C525,160 503.52953,134.61544
  483.61398,136.45137 453.79885,139.1999 445,175 430,180 447.93464,158.59181
  463.7944,151.78059 478.07024,151.93493 507.27438,152.25068 515,185
  550,175M430,180c15,-10 32.80939,10.04302 45.17423,9.94542C504.08195,189.71723
  519.49385,175 530,175M380,175c-20,0 -30.87367,-19.1648 -47.03192,-20.29027
  -12.3413,-0.85961 -29.19452,12.61246 -29.19452,17.61246 0,7.07107
  11.23734,20.70784 22.74316,23.25836C342.90794,199.21402 362.81244,175.3491
  380,175v0M305,165c22.64276,-42.75014 64.95345,-9.49214 65,-5M820,265c15,15
  35,10 45,5 20.5191,14.6565 42.75671,20.72048 62.68286,23.22939M851.86653
  312.33707C895.10619 299.11787 938.83136 290.34833 975 285C924.90149 188.22308
  899.90057 94.152754 874.11725 -0.0019513659
  M851.86653,312.33707C895.10619,299.11787 938.83136,290.34833 975,285
  924.90149,188.22308 899.90057,94.152754
  874.11725,-0.00195137M851.01315,311.99775
  635.36748,-2.4089679e-4M927.65339,293.26472C907.75671,290.72048
  885.5191,284.6565 865,270c-10,5 -30,10 -45,-5\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SQ6\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \        <path\r

  \          stroke=\"#44F\"\r

  \          stroke-linecap=\"round\"\r

  \          stroke-linejoin=\"round\"\r

  \          stroke-width=\"3\"\r

  \          fill=\"none\"\r

  \          d=\"M986.60333,811.20184l17.52527,26.83701m3.5763,5.47663
  14.2883,21.88014M993.49031,800.86775c12.59499,20.81314 26.36539,39.79428
  40.67199,57.93996m3.6811,4.63683c6.0574,7.57938 12.2001,15.02588
  18.3803,22.41378m3.5795,4.26824c4.9357,5.87225 9.8895,11.71638
  14.8372,17.56998M1002.2895,791.27746c25.6547,42.89167 56.3312,77.95704
  86.5273,113.77117M1011.3206,782.24417c26.5981,44.89853 58.7236,81.18275
  90.1523,118.55299M1018.2105,775.40469C1045.4382,820.51985 1078.1971,857.01507
  1110,895M91.990234,409.08984c5.346491,34.39969 12.364566,69.89746
  17.978516,99.54297 5.61395,29.64551 9.60751,54.84672 9.52344,62.49219
  -0.14502,13.18721 -2.60383,25.09508 -7.35157,32.2207C107.39289,610.47133
  101.33414,615 85,615 68.665861,615 62.607113,610.47133
  57.859375,603.3457M95.230469,511.42383c2.783382,14.69817 5.162021,28.28252
  6.812501,38.99023 1.65048,10.70771 2.46055,19.51658 2.44922,20.54688
  -0.12561,11.42229 -3.03694,21.37127 -4.833987,24.06836 -1.554361,2.33286
  -1.96098,2.67133 -3.316406,3.33203C94.986371,599.02203 91.780811,600
  85,600M99.244141,641.85938C113.48363,645.75807 120,654.05348 120,660c0,3.87456
  -2.13436,8.18273 -8.24609,12.46094C105.64218,676.73915 95.96981,680 85,680
  74.030191,680 64.357824,676.73915
  58.246094,672.46094M99.476562,706.76367c8.835718,2.48582 12.847888,6.43575
  15.929688,11.99805C118.48805,724.32402 120,732.04575 120,740c0,15.20071
  -2.70618,36.77501 -6.41016,58.11133M102.94922,660.2832C99.903483,662.33803
  92.860098,665 85,665c-7.997241,0 -15.198086,-2.76015
  -18.152344,-4.82812M102.28516,726.03125C103.52282,728.2651 105,733.94656
  105,740c0,13.42041 -2.56634,34.6744
  -6.189453,55.54492M726.75998,368.27894C639.85431,387.67178 574.6926,396.00751
  524.83867,397.57475M715.61309,356.58894C649.94086,370.7787 597.12268,378.4618
  554.16847,381.63062M703.03893,344.25945c-49.76763,10.38288 -91.8849,16.91189
  -127.75629,20.52287M690.7875,331.76901c-38.30305,7.6982 -71.90839,13.04175
  -101.50758,16.49148M680.13806,318.87243c-30.03631,5.82677 -57.08899,10.16495
  -81.51547,13.25269M670.20516,305.76564c-23.347,4.36958 -44.8345,7.81564
  -64.64196,10.45774M659.57286,292.71511c-18.04772,3.23925 -34.94556,5.91034
  -50.78275,8.07274M390,380c11.94547,-13.95601 27.22073,-12.69836
  45,0M440,195c10,15 30,15 45,15M310,205c50,25 60,-30
  70,-30M350.01995,162.05531c1.14299,3.17833 1.7863,6.76631 1.7863,10.56373
  0,13.03628 -7.58139,23.60427 -16.9335,23.60427 -9.35211,0 -16.93349,-10.568
  -16.93349,-23.60427 0,-5.79795 1.49965,-11.10766
  3.98776,-15.21654M488.55832,153.60687c1.90775,3.81995 3.02626,8.46304
  3.02626,13.4703 0,13.03628 -7.58139,23.60427 -16.9335,23.60427 -9.35211,0
  -16.93349,-10.568 -16.93349,-23.60427 0,-4.03258 0.72545,-7.82898
  2.00436,-11.14943\"\r

  \        ></path>\r

  \        <use xlink:href=\"#SSQ\" height=\"90\"
  transform=\"translate(1188,935)scale(1,0.972)rotate(-40)translate(-45,-45)\">\
  </use>\r

  \        <use xlink:href=\"#SSQ\" height=\"90\"
  transform=\"translate(1194,1043)scale(1,0.972)rotate(-40)translate(-45,-45)\"\
  ></use>\r

  \        <use xlink:href=\"#SSQ\" height=\"90\"
  transform=\"translate(1096,1033)scale(1,0.972)rotate(-40)translate(-45,-45)\"\
  ></use>\r

  \        <use xlink:href=\"#SSQ\" height=\"90\"
  transform=\"translate(1022,947)scale(1,0.972)rotate(-40)translate(-45,-45)\">\
  </use>\r

  \        <use xlink:href=\"#SSQ\" height=\"90\"
  transform=\"translate(918,851)scale(1,0.972)rotate(-40)translate(-45,-45)\"><\
  /use>\r

  \        <use xlink:href=\"#SSQ\" height=\"90\"
  transform=\"translate(897,726)scale(1,0.972)rotate(-40)translate(-45,-45)\"><\
  /use>\r

  \      </symbol>\r

  \      <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"green\"></rect>\r

  \      <use width=\"164.8\" height=\"260.8\" x=\"-82.4\" y=\"-130.4\"
  xlink:href=\"#SQ1\"></use>\r

  \      <use transform=\"rotate(180)\" width=\"164.8\" height=\"260.8\"
  x=\"-82.4\" y=\"-130.4\" xlink:href=\"#SQ1\"></use>\r

  \      <use width=\"164.8\" height=\"260.8\" x=\"-82.4\" y=\"-130.4\"
  xlink:href=\"#SQ2\"></use>\r

  \      <use transform=\"rotate(180)\" width=\"164.8\" height=\"260.8\"
  x=\"-82.4\" y=\"-130.4\" xlink:href=\"#SQ2\"></use>\r

  \      <use width=\"164.8\" height=\"260.8\" x=\"-82.4\" y=\"-130.4\"
  xlink:href=\"#SQ3\"></use>\r

  \      <use transform=\"rotate(180)\" width=\"164.8\" height=\"260.8\"
  x=\"-82.4\" y=\"-130.4\" xlink:href=\"#SQ3\"></use>\r

  \      <use width=\"164.8\" height=\"260.8\" x=\"-82.4\" y=\"-130.4\"
  xlink:href=\"#SQ4\"></use>\r

  \      <use transform=\"rotate(180)\" width=\"164.8\" height=\"260.8\"
  x=\"-82.4\" y=\"-130.4\" xlink:href=\"#SQ4\"></use>\r

  \      <use width=\"164.8\" height=\"260.8\" x=\"-82.4\" y=\"-130.4\"
  xlink:href=\"#SQ5\"></use>\r

  \      <use transform=\"rotate(180)\" width=\"164.8\" height=\"260.8\"
  x=\"-82.4\" y=\"-130.4\" xlink:href=\"#SQ5\"></use>\r

  \      <use width=\"164.8\" height=\"260.8\" x=\"-82.4\" y=\"-130.4\"
  xlink:href=\"#SQ6\"></use>\r

  \      <use transform=\"rotate(180)\" width=\"164.8\" height=\"260.8\"
  x=\"-82.4\" y=\"-130.4\" xlink:href=\"#SQ6\"></use>\r

  \      <use xlink:href=\"#VSQ\" height=\"32\" x=\"-114.4\"
  y=\"-156\"></use>\r

  \      <use xlink:href=\"#SSQ\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \      <use xlink:href=\"#SSQ\" height=\"55.68\" x=\"36.088\"
  y=\"-132.16\"></use>\r

  \      <g transform=\"rotate(180)\">\r

  \        <use xlink:href=\"#VSQ\" height=\"32\" x=\"-114.4\"
  y=\"-156\"></use>\r

  \        <use xlink:href=\"#SSQ\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \        <use xlink:href=\"#SSQ\" height=\"55.68\" x=\"36.088\"
  y=\"-132.16\"></use>\r

  \      </g>\r

  \      <use xlink:href=\"#XSQ\" stroke=\"#44F\" fill=\"none\"></use>\r

  \    </svg>\r

  \    `;\r

  \  let d1 = mDiv();\r

  \  d1.innerHTML = html;\r

  \  mAppend(dTable, d1);\r

  }"
test10_update: "function test10_update(canvas, item) {\r

  \  let [astep, a, bstep, b, func] = [item.astep, item.a, item.bstep, item.b,
  item.func];\r

  \  canvas.clear();\r

  \  [a, astep] = oscillate_between(a, 0, 5, astep);\r

  \  [b, bstep] = oscillate_between(b, 0, 5, bstep);\r

  \  [item.astep, item.a, item.bstep, item.b] = [astep, a, bstep, b];\r

  \  canvas.plot(x => b * func(a * x), \"rgb(11,153,11)\", 1);\r

  \  return false;\r

  }"
test10_verrueckt: "function test10_verrueckt() {\r

  \  let styles = { bg: 'yellow', fg: 'red', border: 'random', thickness: 20,
  shadow: 'green', rotate: 45, scale: 2 };\r

  \  let html = `\r

  \      <svg\r

  \      xmlns=\"http://www.w3.org/2000/svg\"\r

  \      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r

  \      class=\"card\"\r

  \      face=\"QS\"\r

  \      height=\"100%\"\r

  \      preserveAspectRatio=\"none\"\r

  \      viewBox=\"-120 -168 240 336\"\r

  \      width=\"100%\"\r

  \      fill=\"#ffff00\"\r

  \      stroke=\"#ff0000\"\r

  \      >\r

  \      <defs><rect id=\"XSQ\" width=\"164.8\" height=\"260.8\" x=\"-82.4\"
  y=\"-130.4\"></rect></defs>\r

  \      <symbol id=\"VSQ\" viewBox=\"-500 -500 1000 1000\"
  preserveAspectRatio=\"xMinYMid\">\r

  \        <path\r

  \          d=\"M-260 100C40 100 -40 460 260 460M-175 0L-175 -285A175 175 0 0
  1 175 -285L175 285A175 175 0 0 1 -175 285Z\"\r

  \          stroke=\"black\"\r

  \          stroke-width=\"80\"\r

  \          stroke-linecap=\"square\"\r

  \          stroke-miterlimit=\"1.5\"\r

  \          fill=\"none\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SSQ\" viewBox=\"-600 -600 1200 1200\"
  preserveAspectRatio=\"xMinYMid\">\r

  \        <path\r

  \          d=\"M0 -500C100 -250 355 -100 355 185A150 150 0 0 1 55 185A10 10
  0 0 0 35 185C35 385 85 400 130 500L-130 500C-85 400 -35 385 -35 185A10 10 0 0
  0 -55 185A150 150 0 0 1 -355 185C-355 -100 -100 -250 0 -500Z\"\r

  \          fill=\"black\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SQ1\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \        <path\r

  \          fill=\"#FC4\"\r

  \          d=\"M635.39648,0 851.86719,312.33789C895.10685,299.11869
  938.83136,290.34833 975,285 924.90197,188.22401 899.89439,94.153799
  874.11133,0ZM295.52539,27.285156C246.27551,180.9799 142.75435,335.54042
  209.25195,483.08398l-17.43359,13.44922c1.76531,151.10099 30.08527,286.57163
  74.54102,398.60938 18.12594,21.287 38.56227,42.11564 61.47851,64.11523
  3.61128,3.46683 7.28461,6.96262
  11.33789,10.61914L901.47852,970l-0.41407,-0.51953c-0.12219,-0.138
  -0.23745,-0.27418 -0.35937,-0.41211 15.27725,17.28278 32.6506,35.12574
  52.3164,53.54294C1030.1434,1094.8366 1080,1150 1130,1250c52.9819,-70.6425
  98.186,-110.0972 170,-152.7871v-37.6016c-68.6196,39.3343 -116.9422,76.6549
  -164.5547,131.9668 -44.9491,-77.8482 -93.9175,-130.6069 -160.20897,-192.68943
  -76.05982,-71.23062 -114.27421,-131.59148 -129.3711,-180.42578
  -15.09688,-48.8343 -8.90849,-86.60287 7.94922,-120.96875 28.31708,-57.72677
  91.51367,-102.35489
  139.07032,-133.86328l-26.7793,-21.49024C896.53697,588.11019
  793.22595,665.67487 806.10938,786.48828L699.86133,787.5 568.0625,939.89258
  429.48438,939.86328C578.06034,763.29892 745.82856,594.02803
  899.1875,455.09961l-9.56836,-10.99023c-28.86687,-3.02061 -55.64392,-10.37642
  -80.51758,-21.42774 -1.77605,4.17261 -4.43372,8.02096
  -7.94336,11.23438C665.11643,558.39566 525.46983,665.166
  419.78906,829.43164L392.45703,811.84766C501.69344,642.05529
  644.58723,533.12674 779.21875,409.9375l17.51367,6.86328c-17.74437,-8.98707
  -34.48695,-19.8921 -50.29101,-32.48437 -124.71285,29.03155 -208.27492,36.48099
  -267.26758,31.98242 0,0 -19.31641,14.60547 -29.31641,14.60547 -15,0
  -25.58008,-5.64453 -30.58008,-5.64453 -5,0 -10,5 -25,5 -15,0 -30,-25 -40,-50
  -1.51422,-2.01895 -3.01443,-4.07919 -4.23242,-5.79297l-39.21875,30.25586
  10.50977,-0.54493c7.17244,138.45299 -1.25836,281.23598
  43.02929,408.13477l-27.41796,17.66602c-1.32891,-2.13106 -2.43311,-4.45616
  -3.26758,-6.95704C288.22851,692.7888 295.29422,552.70428
  289.59766,421.09961l-69.70313,53.77344 20.20508,-16.59375C187.08454,297.85994
  265.54029,182.85491 300.0957,58.960938ZM85,80c-55.000004,50 -100.000004,145
  -35,145 9.343263,0 15.215964,-5.70961
  19.599609,-15.58984l-0.05469,54.80664C63.116922,255.80043 55.218717,250
  45,250c-34.999996,0 -39.999996,70 -5,70 24.46345,0 22.957588,-43.08208
  10.8125,-44.93164 53.48157,5.0855 -15.809214,250.16385 -15.302734,296.2207
  0.268193,24.38822 6.628431,48.73678 31.46289,56.20899C48.176742,632.49354
  35,645.1697 35,660 35,674.30844 47.265656,686.61054 65.384766,692.25586
  41.674751,699.57565 35,720.74035 35,740 35,776.24391 48.1356,836.13212
  55.517578,866.33008 82.604368,846.54619 106.08392,825.42866
  128.83984,800.21875 132.14826,778.91478 135,756.88968 135,740 135,720.60063
  128.2285,699.26867 104.15234,691.95898 118.02756,686.75065 129.28173,676.58841
  135,660c0,-14.83344 -13.18185,-27.51102 -30.78711,-32.89844 24.05654,-8.65812
  30.01787,-32.21714 30.27734,-55.8125C134.99671,525.23221 65.705931,280.15386
  119.1875,275.06836 107.04241,276.91792 105.53655,320 130,320c35,0 30,-70
  -5,-70 -10.83425,0 -19.06007,6.52154
  -25.074219,15.02148L100.25195,209.2793C104.49041,218.99863 110.42097,225
  120,225 185,225 140,130 85,80Zm641.48047,287.83789c-86.62544,19.83455
  -151.78802,28.17022 -200.80469,29.24219 -14.2248,6.27415 -30.07191,11.92239
  -45.7793,18.95898 58.99266,4.49857 142.55438,-2.95118 267.19727,-32.03711
  -7.7527,-5.20716 -14.38853,-10.76914
  -20.61328,-16.16406zm-370.49024,88.29102c29.62693,11.74538 64.9141,21.55877
  110.0293,25.15039 51.3028,4.08421 115.55629,0.48608
  200.56445,-14.4043C568.01187,553.99998 468.15967,644.25595 384.25,765.71289
  359.23837,670.90747 359.53927,564.67648
  355.99023,456.12891ZM1182.5,473.75c-24.0403,0 -48.0562,17.34722
  -29.8594,52.02344A45,42.5 0 0 1 1182.5,515a45,42.5 0 0 1
  29.8652,10.76367C1230.552,491.09427 1206.538,473.75
  1182.5,473.75Zm-54.6914,47.48047c-45.2477,0.77462 -37.6424,97.7377
  22.793,66.2168A45,42.5 0 0 1 1137.5,557.5a45,42.5 0 0 1
  13.1113,-29.94336c-8.6891,-4.53343 -16.2978,-6.43753
  -22.8027,-6.32617zm109.3828,0c-6.5027,-0.11132 -14.1076,1.79222
  -22.793,6.32226A45,42.5 0 0 1 1227.5,557.5a45,42.5 0 0 1
  -13.1094,29.94336c60.4429,31.53409 68.0505,-65.43824
  22.8008,-66.21289zm-24.8301,67.99414A45,42.5 0 0 1 1182.5,600 45,42.5 0 0 1
  1152.6348,589.23633c-11.9875,22.85174 -5.6311,38.16959 6.9726,45.95898
  -23.6821,34.46419 -48.941,66.02584 -74.9492,96.20703C1079.1653,675.69528
  1058.4509,645.45798 1005,670c37.225,16.12754 38.5709,70.31699 75.9492,65.69727
  -5.8664,6.76063 -11.768,13.45662
  -17.6972,20.10156l15.207,1.88672c7.2551,-8.19076 14.4623,-16.46748
  21.6113,-24.85352 5.1929,39.08146 35.0698,-7.57452 67.2129,-5.5
  -16.4802,-41.743 -32.0495,-10.50502 -66.4785,4.63672 24.5708,-28.86629
  48.4073,-59.08334 70.8027,-91.95508 26.5679,6.12811 61.7407,-10.79807
  40.7539,-50.78906zM1255,655c-32.9633,38.74398 -63.8666,77.97963 -125,110
  16.8191,30.21345 26.6544,60.2083 30,90 47.2312,18.32372 82.8871,51.83723
  115,90 2.3419,-37.0436 -4.2974,-71.38724 -30,-100 23.3498,-4.99857
  40.0029,-20.01884 50,-45 -14.5281,-24.40208 -35.9759,-32.69918 -60,-35
  44.8752,-32.16719 30.2665,-71.33926
  20,-110zM811.88477,817.78516c10.86486,41.66548 35.34229,88.00659
  78.58593,139.42382 -4.92291,-5.82285 -9.66276,-11.58316
  -14.2207,-17.2539l-286.46289,-0.0586 64.60547,-0.45703 75.1914,-86.93945
  93.88282,-0.33984c-4.9028,-11.9067 -8.74345,-23.39087
  -11.58203,-34.375zM377.5,842.5c4.42321,0 9.31831,2.00257
  14.86719,9.24023C397.91606,858.97789 402.5,871.0223 402.5,885c0,13.9777
  -4.58394,26.0221 -10.13281,33.25977C386.81831,925.49743 381.92321,927.5
  377.5,927.5c-4.42321,0 -9.31831,-2.00257 -14.86719,-9.24023C357.08394,911.0221
  352.5,898.9777 352.5,885c0,-13.9777 4.58394,-26.02211
  10.13281,-33.25977C368.18169,844.50257 373.07679,842.5 377.5,842.5Z\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SQ2\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \        <path\r

  \          fill=\"red\"\r

  \          d=\"M557.51758,0 805.9668,330.45703 851.01367,311.99805
  635.36719,0Zm78.02148,0 63.76563,90.75C709.99966,65.000167 725,65 725,65
  716.50651,26.779299 728.31462,17.104416 733.20117,0ZM820,265
  851.86719,312.33789C877.5079,304.49903 903.31958,298.22492 927.6543,293.26562
  907.75762,290.72138 885.5191,284.6565 865,270c-10,5 -30,10
  -45,-5zm99.12695,216.28711C764.14521,621.01648 595.55342,787.07572
  470.35547,940.01172L525,940
  685,755h120.41797l-0.0547,-0.41211c6.37431,-102.76161 97.50088,-170.65811
  160.41211,-212.22851zm-727.41992,15.5625 -59.86133,46.34766
  -0.39648,0.30468c1.93099,12.0459 3.10803,21.69313 3.04101,27.78711
  -0.25947,23.59536 -6.2208,47.15438 -30.27734,55.8125C121.81815,632.48898
  135,645.16656 135,660 129.28173,676.58841 118.02756,686.75065
  104.15234,691.95898 128.2285,699.26867 135,720.60063 135,740c0,16.88968
  -2.85174,38.91478 -6.16016,60.21875 -1.95154,2.162 -3.90854,4.29257
  -5.87304,6.39453C138.56664,789.96704 153.92711,771.43051 170,750
  200.25102,810.50205 230.44886,854.59181 266.85742,895.71484
  221.90196,783.10482 193.58426,647.63449
  191.70703,496.84961ZM44.53125,610.36133
  0,644.61523V902.7832C30.797744,884.46615 56.707359,866.73637
  80.427734,846.89844 72.427991,853.57027 64.158102,860.01913
  55.517578,866.33008 48.1356,836.13212 35,776.24391 35,740 35,720.74035
  41.674751,699.57565 65.384766,692.25586 47.265656,686.61054 35,674.30844
  35,660 35,645.1697 48.176742,632.49354 66.972656,627.49805 56.528563,624.35562
  49.361734,618.22105 44.53125,610.36133Zm1190.09765,68.79687
  -1.1211,1.04688c-20.0542,23.0427 -41.8711,45.665 -71.7441,65.72265
  27.117,39.37142 36.6532,80.37363 27.7441,123.12891 25.4392,14.76465
  47.2329,33.87001 67.875,55.8418 -10.0896,-28.95393 -26.9566,-68.05217
  -64.6191,-89.36328C1229.865,829.72137 1245.3631,819.51581
  1260,800c-28.5778,-21.24841 -50.4759,-15.94491 -77.3027,-15.66992
  39.149,-21.89578 49.9371,-64.78262
  51.9316,-105.17188zM110.74609,819.23828c-0.7889,0.78628 -1.58065,1.56702
  -2.37304,2.3457 0.792,-0.77791 1.58362,-1.55961
  2.37304,-2.3457zm-5.15234,5.05078c-0.76819,0.74251 -1.53476,1.48679
  -2.30664,2.22266 0.77112,-0.73534 1.53841,-1.48017
  2.30664,-2.22266zm-5.26172,5.00586c-2.077449,1.94603 -4.165139,3.87648
  -6.273436,5.7793 2.104356,-1.90192 4.194747,-3.83083
  6.273436,-5.7793zm-6.539061,6.02149c-1.467973,1.32281 -2.945132,2.63598
  -4.429688,3.93945 1.482456,-1.30407 2.961518,-2.61456
  4.429688,-3.93945zM377.5,862.5a11,22.5 0 0 0 -11,22.5 11,22.5 0 0 0 11,22.5
  11,22.5 0 0 0 11,-22.5 11,22.5 0 0 0 -11,-22.5zm225.17578,127.46484a10,10 0 0
  0 -10,10 10,10 0 0 0 10,9.99996 10,10 0 0 0 10,-9.99996 10,10 0 0 0
  -10,-10zM420,990a10,10 0 0 0 -10,10 10,10 0 0 0 10,10 10,10 0 0 0 10,-10 10,10
  0 0 0 -10,-10zm91.13281,0.41016a10,10 0 0 0 -10,10.00004 10,10 0 0 0 10,10
  10,10 0 0 0 10,-10 10,10 0 0 0 -10,-10.00004z\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SQ3\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \        <path\r

  \          fill=\"#44F\"\r

  \          d=\"M472.5,150a12.5,20 0 0 0 -12.5,20 12.5,20 0 0 0 12.5,20
  12.5,20 0 0 0 12.5,-20 12.5,20 0 0 0 -12.5,-20zm-140,5a12.5,20 0 0 0 -12.5,20
  12.5,20 0 0 0 12.5,20 12.5,20 0 0 0 12.5,-20 12.5,20 0 0 0
  -12.5,-20zm23.49023,301.12891c3.54904,108.54757 3.24814,214.77856
  28.25977,309.58398 83.90967,-121.45694 183.76187,-211.71291
  282.33398,-298.83789 -85.00816,14.89038 -149.26165,18.48851 -200.56445,14.4043
  -45.1152,-3.59162 -80.40237,-13.40501
  -110.0293,-25.15039zm42.92579,22.92187c22.57573,0.10326 52.52779,2.34383
  83.49804,6.2461 65.74558,8.28415 118.15335,21.65893 117.05469,29.87304
  -1.09829,8.2139 -56.30922,5.07893 -122.05273,-3.20508 -65.73948,-8.28354
  -117.1185,-18.57868 -116.02735,-26.79296 0.53448,-4.02047 14.07178,-6.22853
  37.52735,-6.1211zM1117.5,492.5c2.4011,8.40385 4.2266,18.24941
  5.4746,28.84375v0.36133c7.3876,-1.36391 16.4655,0.0837
  27.2324,5.62304l-21.2675,-21.26757a1.50015,1.50015 0 0 1 1.0449,-2.57617
  1.50015,1.50015 0 0 1 1.0761,0.45507l21.2676,21.26758c-5.5291,-10.74776
  -6.9807,-19.81297 -5.6289,-27.19336 -10.7286,-1.24895 -20.7021,-3.08593
  -29.1992,-5.51367zm130,0c-8.4251,2.40718 -18.2988,4.23414
  -28.9238,5.48242h-0.2793c1.3613,7.38557 -0.087,16.46062
  -5.6231,27.22266l21.2657,-21.26563a1.50015,1.50015 0 0 1 1.0312,-0.45312
  1.50015,1.50015 0 0 1 1.0898,2.57422l-21.2675,21.26757c10.7565,-5.53399
  19.8272,-6.98416 27.2109,-5.62695v-0.17187c1.2486,-10.6649 3.081,-20.57644
  5.4961,-29.0293zm-853.59961,15.25781c20.38428,0.10329 47.42876,2.34386
  75.39258,6.2461 59.36368,8.28422 106.68388,21.65899 105.69141,29.87304
  -0.99271,8.21355 -49.91699,8.15671 -109.27735,-0.12695 -59.36371,-8.28422
  -106.68391,-21.659 -105.69141,-29.87305 0.48636,-4.01928 12.70935,-6.22659
  33.88477,-6.11914zm7.69531,34.67969c15.09367,-0.0753 32.61454,0.81411
  50.47852,2.5625 51.50146,5.04084 94.00823,14.75226 93.67578,23.00391
  -0.32891,8.2521 -42.34749,10.85536 -93.84961,5.81445C400.39893,568.77752
  358.91755,558.00165 359.25,549.75c0.20345,-5.08688 15.52034,-7.17888
  42.3457,-7.3125zm590.81446,21.09375c-26.28817,17.83124 -58.00395,39.71623
  -85.84375,65.82227L1063.252,755.79883c5.9292,-6.64494 11.8308,-13.34093
  17.6972,-20.10156C1043.5709,740.31699 1042.225,686.12754
  1005,670c53.4509,-24.54202 74.1653,5.69528 79.6582,61.40234 18.288,-21.22222
  36.2025,-43.13214 53.4609,-66.25 -50.4965,-31.89003 -99.3677,-65.63189
  -145.70894,-101.62109zm92.24804,167.87109c-1.2353,1.43353 -2.4703,2.86748
  -3.709,4.29493 1.3064,-0.16146 2.6533,-0.388 4.0508,-0.69727 -0.1038,-1.21628
  -0.2241,-2.40447 -0.3418,-3.59766zm-21.4062,24.39649
  1.3242,1.02344C1092.8236,758.22045 1130,765 1130,765c33.2353,-17.40792
  57.5278,-36.95014 78.082,-57.38477 -19.9562,-11.65548 -39.7017,-23.55345
  -59.2109,-35.71875 -15.5528,20.88792 -31.6462,40.7815 -48.0664,60.07227
  34.429,-15.14174 49.9983,-46.37972 66.4785,-4.63672 -32.1431,-2.07452
  -62.02,44.58146 -67.2129,5.5 -7.149,8.38604 -14.3562,16.66276
  -21.6113,24.85352zM399.88477,574.98828c12.13924,-0.0753 26.23048,0.81416
  40.59765,2.5625 41.42116,5.04089 74.78321,15.81675 74.51563,24.06836
  -0.26463,8.25206 -34.05885,10.85531 -75.48047,5.81445 -41.42116,-5.04089
  -74.78321,-15.81675 -74.51563,-24.06836 0.16364,-5.08693 13.30756,-8.24338
  34.88282,-8.37695zm814.90823,12.6836 21.2675,21.26757a1.50015,1.50015 0 1 1
  -2.121,2.1211l-21.2657,-21.26563c5.5369,10.76367 6.9837,19.84044
  5.6211,27.22656h0.3223c10.6094,1.24816 20.4685,3.07443 28.8828,5.47852
  -2.4278,-8.49731 -4.2627,-18.47029 -5.5117,-29.19922 -7.3807,1.35234
  -16.4468,-0.0994 -27.1953,-5.6289zm-64.5879,0.002c-10.7501,5.53028
  -19.8161,6.98044 -27.1973,5.62695v0.0723c-1.2488,10.70195 -3.0853,20.64836
  -5.5078,29.12695 8.4975,-2.42785 18.4701,-4.26471 29.1992,-5.51367
  -1.3518,-7.38039 0.1,-16.44561
  5.6289,-27.19336l-21.2676,21.26758a1.50015,1.50015 0 1 1
  -2.121,-2.1211zM399.95117,608.2207c7.75591,-0.014 16.33902,0.59569
  25.04883,1.7793 30.51033,4.14665 55.19775,16.74619 55.24414,25 0.0491,8.25469
  -24.64792,11.5847 -55.16016,7.4375 -30.51033,-4.14665 -55.28173,-14.19933
  -55.32812,-22.45312 -0.0324,-5.62262 11.68692,-11.73096
  30.19531,-11.76368zm2.94141,36.28321c3.92832,-0.0157 8.00124,0.15115
  12.10742,0.49609 25.08573,2.10744 44.77796,7.02839 45.42188,14.97852
  0.64298,7.94981 -19.17087,12.68576 -44.25586,10.57812 -25.08573,-2.10744
  -45.94398,-10.26081 -46.5879,-18.21094 -0.52278,-6.4668 13.79255,-7.76393
  33.31446,-7.84179zm-6.3711,30.78125c1.53788,10e-4 3.10151,0.0612
  4.67383,0.17968 15.24356,1.1523 28.12847,7.43255 28.7793,14.02735
  0.6519,6.59512 -11.17778,11.00764 -26.42188,9.85547 -15.24356,-1.1523
  -28.12847,-7.43255 -28.77929,-14.02735 -0.57317,-5.81151 8.60794,-10.04793
  21.74804,-10.03515zm-2.7207,30.4707c0.97501,0.002 1.96625,0.0499
  2.96289,0.14453 9.66123,0.91446 17.82809,5.89851 18.24219,11.13281
  0.4126,5.23472 -7.08576,8.73687 -16.74805,7.82227 -9.66123,-0.91446
  -17.82809,-5.89851 -18.24219,-11.13281 -0.3645,-4.61356 5.45528,-7.97697
  13.78516,-7.9668zm906.19922,0.0781 -34.2773,2.85547c0.2249,20.00253
  -6.7832,39.15319 -30.7188,56.31055 24.0241,2.30082 45.4719,10.59792 60,35
  -9.9971,24.98116 -26.6502,40.00143 -50,45 19.6816,21.91005 28.1768,47.18324
  30.0293,74.45312l0.01,0.008 24.957,11.09375zm-167.2656,64.20508c0.2372,0.44647
  0.4708,0.89347 0.7051,1.33985 -0.2343,-0.44637 -0.4679,-0.89339
  -0.7051,-1.33985zm3.041,5.88282c0.083,0.16606 0.171,0.33199 0.2539,0.49804
  -0.083,-0.16604 -0.1705,-0.33202
  -0.2539,-0.49804zm2.6758,5.48437c0.2147,0.45253 0.425,0.90499 0.6367,1.35742
  -0.2117,-0.45239 -0.4219,-0.90493
  -0.6367,-1.35742zm2.455,5.32422c0.1795,0.40036 0.3641,0.80089 0.5411,1.20117
  -0.177,-0.40029 -0.3615,-0.80081
  -0.5411,-1.20117zm2.5958,5.98437c0.2099,0.50184 0.413,1.00415 0.6191,1.50586
  -0.2062,-0.5018 -0.4092,-1.00393
  -0.6191,-1.50586zm2.0703,5.11719c0.1975,0.50277 0.4,1.00516 0.5937,1.50781
  -0.1937,-0.50252 -0.3962,-1.00516
  -0.5937,-1.50781zm2.3418,6.1875c0.1922,0.53072 0.3764,1.06121 0.5644,1.5918
  -0.188,-0.53055 -0.3722,-1.06112
  -0.5644,-1.5918zm1.7324,4.96485c0.2042,0.60477 0.4106,1.20984 0.6094,1.81445
  -0.1988,-0.60461 -0.4051,-1.20971
  -0.6094,-1.81445zm2.0273,6.26562c0.1846,0.60177 0.3579,1.20308 0.5371,1.80469
  -0.1792,-0.60139 -0.3525,-1.20313
  -0.5371,-1.80469zm1.4688,5.00977c0.1799,0.63781 0.3593,1.27644 0.5332,1.91406
  -0.174,-0.63786 -0.3532,-1.27602 -0.5332,-1.91406zM377.5,842.5c-4.42321,0
  -9.31831,2.00257 -14.86719,9.24023C357.08394,858.97789 352.5,871.0223
  352.5,885c0,13.9777 4.58394,26.0221 10.13281,33.25977 5.54888,7.23766
  10.44398,9.24023 14.86719,9.24023 4.42321,0 9.31831,-2.00257
  14.86719,-9.24023C397.91606,911.0221 402.5,898.9777 402.5,885c0,-13.9777
  -4.58394,-26.02211 -10.13281,-33.25977C386.81831,844.50257 381.92321,842.5
  377.5,842.5Zm-0.27344,4.79492c2.95574,0.0879 5.94922,5.08008 5.94922,10.70508
  10.93128,-0.11104 14.67749,3.31056 5.67578,13 13.69744,3.7436 10.6454,8.69968
  2.83789,14 7.80751,5.30032 10.85955,10.2564 -2.83789,14 9.00171,9.68944
  5.2555,13.11104 -5.67578,13 0,10 -9.4596,18 -11.35156,0 -10.93128,0.11104
  -14.67748,-3.31056 -5.67578,-13 -13.69744,-3.7436 -10.6454,-8.69968
  -2.83789,-14 -7.80751,-5.30032 -10.85955,-10.2564 2.83789,-14 -9.0017,-9.68944
  -5.2555,-13.11104 5.67578,-13 0.82773,-7.875 3.10344,-10.77344
  5.40234,-10.70508zm352.35742,5.20508 -75.1914,86.93945
  43.0039,-0.041L744.44531,885H840l-15,-32.5zm29.72266,65
  -19.23047,22.23633L876.25,939.95508 860,917.5Zm-104.13476,52.41992
  -315.75977,0.17969c2.43984,2.47881 4.98787,4.87423 7.56641,7.28906
  15.37025,14.39437 29.32058,28.43253 41.91015,42.12693 1.06974,-4.4442
  6.04965,-11.1309 16.11133,-19.5156 -30,-25 -15,-34.99999 15,-15 30,-19.99999
  45,-10 15,15 30,25 15,35 -15,15 -11.06914,7.3794 -20.08451,10.6644
  -25.5625,10.6289 1.31057,1.4627 2.62767,2.9262
  3.90625,4.3809l256.41797,-0.1328zm-170.01172,4.44531C490.60938,974.21875
  499.75,977.5 511,985c30,-19.99999 45,-10 15,15 30,25 15,35 -15,15 -30,20
  -45,10 -15,-15 -18.75,-15.625 -19.92188,-25.39063
  -10.83984,-25.63477zm91,0C581.60938,974.21875 590.75,977.5
  602,985c30,-19.99999 45,-10 15,15 30,25 15,35 -15,15 -30,20 -45,10 -15,-15
  -18.75,-15.625 -19.92188,-25.39063 -10.83984,-25.63477z\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SQ4\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \        <path\r

  \          fill=\"black\"\r

  \          d=\"M499.67383,0C598.83088,212.42554 698.5156,423.78371
  891.07812,444.24805L557.50781,0ZM299.89844,59.855469C265.54099,182.85387
  187.08454,297.85994 240.09961,458.2793L349.875,372.94531C322.20549,333.64118
  300,282.28964 300,255c0,-20 5.00324,-149.9992 5,-155 -10e-4,-2.004308
  -2.41143,-19.27436 -5.10156,-40.144531zM899.91016,454.8418C746.55122,593.77022
  578.78424,763.04072 429.50781,939.46875l40.84766,0.54297C595.55342,787.07576
  764.14431,621.01748 918.95508,481.37891Zm65.79101,87.45703c-28.87179,19.18723
  -64.12524,44.12835 -93.97851,75.52344l25.55078,20.04296c30.22964,-29.84438
  65.96002,-54.59002 95.59961,-73.97851 -9.28135,-6.87909 -18.47109,-14.10656
  -27.17188,-21.58789zM685,755 525.10156,939.88281 570,940
  699.86133,787.5H806.65039L805,755Z\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SQ5\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \        <path\r

  \          stroke=\"#44F\"\r

  \          stroke-linecap=\"round\"\r

  \          stroke-linejoin=\"round\"\r

  \          stroke-width=\"6\"\r

  \          fill=\"none\"\r

  \          d=\"M435,885A57.5,75.000002 0 0 1 377.5,960.00001 57.5,75.000002
  0 0 1 320,885 57.5,75.000002 0 0 1 377.5,810 57.5,75.000002 0 0 1
  435,885v0M417.07718,940H876.02627M308.27069,940h28.75722M339.49097,970H901.47\
  783M131.84482,543.19629 351.03451,374.58883M6.9310566e-5,644.61533
  44.832165,610.1291M1138.1663,665.18229C1077.9926,627.18313 1020.1253,586.55302
  965.29601,542.45758M1208.5796,707.90733c-20.1878,-11.78458 -40.1599,-23.81534
  -59.8906,-36.12132M557.51806,-3.5577172e-4
  965.44559,542.57786M1299.7291,1059.765c-68.4773,39.2778 -116.7334,76.5733
  -164.2838,131.8131 -44.9491,-77.8482 -93.9175,-130.6069 -160.20897,-192.68943
  -76.05982,-71.23062 -114.27421,-131.59148 -129.3711,-180.42578
  -15.09688,-48.8343 -8.90849,-86.60287 7.94922,-120.96875 28.31708,-57.72677
  91.51285,-102.35515
  139.0695,-133.86354M499.68528,0.03748108C598.83742,212.45251
  698.51437,423.77834 890.34164,443.851M364.36489,812.31243C320.07724,685.41364
  328.50886,542.63024 321.33642,404.17725c76.71711,39.85219 163.35704,77.44074
  457.8821,5.76082C644.587,533.12731 501.69292,642.05444
  392.45651,811.84681M355.97656,456.125c29.62956,11.74764 64.92126,21.56216
  110.04297,25.1543 51.30556,4.08443 115.56309,0.48617 200.57813,-14.40625
  -98.57798,87.12824 -198.39177,177.48156 -282.2461,298.86133
  -24.96545,-94.92731 -24.7974,-201.06283
  -28.375,-309.60938v0M867.34252,440.4065C719.62961,574.07588 560.4386,730.57461
  436.09373,879.43791M223.89186,472.86906c-0.82324,183.16931 37.98603,343.48203
  98.11552,466.27071M191.49798,496.71315c2.08648,150.92196 30.40471,286.39171
  75.55251,398.73891M429.507,939.46794C578.78343,763.03991 746.55158,593.76963
  899.91052,454.84121M470.35494,940.01166C595.55289,787.0757 764.14488,621.01728
  918.95565,481.37871M525,940 685,755h120.41872M567.92551,940.0502
  699.86133,787.5h106.78892M611.46541,939.39021
  714.72266,820h97.2642M654.39213,939.43943
  729.58398,852.5h93.89714M697.39662,939.39902
  744.44531,885h95.04566M740.07521,939.73575
  759.30664,917.5H860M906.39152,629.42293 1063.7852,756.67736M871.92369,617.813
  1043.2441,757.01082M459.61865,481.34795C414.86903,573.51288
  406.45192,669.62669 385,765M303.65592,-0.00221915C259.09343,162.78907
  138.61386,327.07777 209.42337,483.4732M240.09997,458.27954C187.0849,297.86018
  265.54056,182.85405 300.09597,58.960082M805.81085,330.134c14.88787,-6.44544
  30.42237,-12.16006 46.14865,-17.2138M0.09725143,902.73906C71.866196,860.06685
  117.03718,820.61709 170,750c50,100 99.8567,155.1639 176.97865,227.3892
  281.56105,263.6842 94.15072,409.6105 -13.08443,480.4695M377.5,842.5c4.42321,0
  9.31831,2.00257 14.86719,9.24023C397.91606,858.97789 402.5,871.0223
  402.5,885c0,13.9777 -4.58394,26.0221 -10.13281,33.25977C386.81831,925.49743
  381.92321,927.5 377.5,927.5c-4.42321,0 -9.31831,-2.00257
  -14.86719,-9.24023C357.08394,911.0221 352.5,898.9777 352.5,885c0,-13.9777
  4.58394,-26.02211 10.13281,-33.25977C368.18169,844.50257 373.07679,842.5
  377.5,842.5v0M1130,765c16.8191,30.21345 26.6544,60.2083 30,90 47.2312,18.32372
  82.8871,51.83723 115,90 2.3419,-37.0436 -4.2974,-71.38724 -30,-100
  23.3498,-4.99857 40.0029,-20.01884 50,-45 -14.5281,-24.40208
  -35.9759,-32.69918 -60,-35 44.8752,-32.16719 30.2665,-71.33926 20,-110
  -32.9633,38.74398 -63.8666,77.97963
  -125,110v0M1300,705.83334l-34.3239,2.86032M1299.9997,930.55544l-26.1711,-11.6\
  3161M1192.7269,836.42558c37.6985,20.41997 54.5672,59.51932
  65.2796,89.01033M1182.9686,784.9233c26.555,-0.86899 48.4536,-6.17171
  77.0314,15.0767 -14.6369,19.51581 -30.1358,29.72065
  -67.2011,34.6433M1234.6287,679.15791c-1.9945,40.38926 -12.7829,83.27561
  -52.2037,104.5774M1162.3431,745.42454c26.5383,39.87481 36.0743,80.87688
  26.979,123.43436M1130,765c0,0 -82.1675,-15 -95,-5 -12.8325,10
  -32.9691,31.30714 -40,40 -31.97044,39.52731 3.64509,49.72935
  20,30M1050,800c-59.31161,25.45028 -64.22618,120.61499
  20,25M1041.1933,853.52948c-14.9444,32.29436 0.7581,60.30105
  58.5,-5.24847M1062.1853,882.59071C1040.9944,921.29246 1103.755,918.14402
  1160,855M1063.2524,755.79961c33.572,-37.62441 66.2866,-76.82735
  96.4461,-120.73492M1078.4582,757.6865c32.4929,-36.68328 64.0954,-75.00591
  93.2554,-117.82589M1085,735c-4.9523,-58.0017 -25.4042,-90.06768 -80,-65
  38.526,16.69119 38.6175,74.15849 80,65v0M1005,670c37.8073,-6.25375
  56.1399,40.79694 80,65M1100,732.33169c35,-15 50.6726,-47.07119 67.2824,-5
  -32.2824,-2.08351 -62.2824,45 -67.2824,5v0M1100.0662,732.84533c26.3257,8.26747
  52.4616,-23.9051 67.2162,-5.51364M1155.0001,585.00001C1080.0001,630
  1080,484.99999 1155,530c-45,-75 100,-75 55,0 75,-45 75,100 10e-5,55
  45,75.00001 -100.0001,74.99999 -55,10e-6v0M1242.5,557.5c-60,0 -60,0 -60,-60
  0,60 0,60 -60,60 60,0 60,0 60,60 0,-60 0,-60
  60,-60v0M1122.9743,521.34338c-1.248,-10.59434 -3.0726,-20.43952
  -5.4737,-28.84337 8.5766,2.45046 18.6544,4.30045
  29.4977,5.54996M1146.7554,616.97813c-10.7509,1.24908 -20.7424,3.08971
  -29.255,5.52188 2.4225,-8.47859 4.2581,-18.42426
  5.5069,-29.12621M1241.9485,592.9857c1.2496,10.84959 3.1002,20.93331
  5.5519,29.5143 -8.4143,-2.40409 -18.2735,-4.23021
  -28.8829,-5.47837M1218.5761,497.98319c10.625,-1.24828 20.4988,-3.07601
  28.9239,-5.48319 -2.4151,8.45286 -4.2469,18.3639
  -5.4955,29.0288M357.95908,386.26136c-4.7848,-2.30618 -9.52375,-4.6875
  -14.28345,-7.12611M748.06895,383.93902C622.45119,413.08814 538.88863,420.5377
  479.79194,417.07826M355.99023,456.12891c29.62693,11.74538 64.9141,21.55877
  110.0293,25.15039 51.3028,4.08421 115.55629,0.48608
  200.56445,-14.4043C568.01187,553.99998 468.15967,644.25595 384.25,765.71289
  359.23837,670.90747 359.53927,564.67648
  355.99023,456.12891v0M85,135c10.787262,31.12992 5,90 35,90 65,0 20,-95
  -35,-145 -55.000004,50 -100.000004,145 -35,145 30,0 24.21273,-58.87008
  35,-90v0M40,285c0,0 0,-10 10,-10 12.88094,0 15,45 -10,45 -34.999996,0
  -29.999996,-70 5,-70 30,0 40,50 40,50 0,0 10,-50 40,-50 35,0 40,70 5,70 -25,0
  -22.88094,-45 -10,-45 10,0 10,10 10,10M120,275c-55,2.66831 15,250
  14.49097,296.289C134.16784,600.67311 125,630 85,630 45,630 35.832163,600.67311
  35.509031,571.289 35,525 105,277.66831
  50,275M70,264.98358V208.33333M100,265.18883V208.74384M103.20611,627.39263C121\
  .81764,632.48836 135,645.16656 135,660c0,19.32997 -22.38576,35 -50,35
  -27.614237,0 -50,-15.67003 -50,-35 0,-14.8303 13.176786,-27.50627
  31.782083,-32.60414M65.931232,692.4756C41.674852,699.57662 35,720.74035
  35,740c0,36.24391 13.136211,96.133
  20.364326,126.34321M128.36935,800.67704C132.14739,778.91407 135,756.88968
  135,740c0,-19.39937 -6.77205,-40.73054
  -31.46191,-47.67672M256.89224,885h6.38602M1.1417102e-4,884.99999
  28.737098,885M245.57157,870h11.90122M2.5229169e-5,870.00002
  51.088175,870M233.67034,855h18.57752M4.1609595e-5,854.99999
  52.539543,855M222.93022,840h24.09272M7.6084636e-5,840.00001
  49.346532,840M212.77064,825h29.89819M4.2336546e-5,825.00002
  46.443795,825M203.1916,810h34.54258M4.0905762e-6,810.00002
  43.541058,810M194.48339,795h38.89668M129.46208,795h5.22493M-3.8457096e-5,795.\
  00001
  40.638321,795M186.06545,780h42.96051M131.78427,780h14.51368M-3.1733115e-5,780\
  .00001
  38.316131,780M178.22806,765h46.73407M133.81618,765h24.67327M10,765H36.284215M\
  134.68701,750h86.50156M10,750H34.542573M134.97728,735h83.01828M15,735H35.1231\
  2M132.65509,720H205M15,720H37.844594M155,705h45M325,510c-11.82334,-17.57111
  -24.45521,-31.94743 -45.42097,-47.16261 -21.67788,-15.73198 -32.01525,9.6364
  -23.86278,22.70472M325,540c-13.68399,-15.7169 -40.72661,-39.31758
  -62.25684,-51.80699 -20.39713,-11.83211 -26.52283,15.09906
  -9.53546,27.99468M326.64903,572.53873c-13.68399,-15.7169 -40.42328,-39.85576
  -62.25684,-51.80699 -33.04187,-18.08643 -43.83934,14.15892
  -2.74316,31.80699M329.68204,632.14459c-13.68399,-15.7169 -40.42328,-39.85576
  -62.25684,-51.80699 -30.81157,-16.86561 -37.65608,16.8659
  -5.11631,35.80661M328.06764,597.68777c-13.86078,-13.59047 -33.31597,-27.70524
  -50.77313,-39.51278 -22.07438,-14.9305 -34.10496,4.47364
  -22.83565,17.22609M332.19576,659.38835c-13.77031,-13.23256 -32.62008,-26.88451
  -49.58329,-38.35795 -24.04479,-16.26322 -36.17268,12.27173
  -19.25152,25.31598M335.48063,686.60634C319.24375,673.64242 295.51352,659.7442
  277.4252,650.3376c-31.2697,-16.26141 -36.88691,20.47944
  -3.29829,37.12122M339.44241,709.94356C293.812,671.34406 241.20364,684.64228
  285,715M345.57813,743.85785c-49.78299,-42.23381 -140.14002,-42.27022
  -51.45386,5.50004M359.15379,797.42734C296.30783,757.35598 217.41506,767.9862
  315.25691,808.08817M356.15219,815.71589c-43.41581,-18.1629 -92.79129,0.20988
  -43.97099,13.65755M335.79649,833.55074c-36.46249,-11.38361 -55.92576,9.42664
  -11.42381,20.21059M323.63736,467.38673c-7.1925,-7.58612 -15.51039,-14.89158
  -25.85855,-22.4014 -17.52111,-12.71535 -26.71907,0.32727
  -25.12324,12.4885M322.15877,428.22708c-1.31784,-1.00168 -2.67007,-2.00587
  -4.05887,-3.01374 -19.41173,-14.0874 -28.60717,3.4419
  -24.22651,16.36102M351.5017,769.34668c-41.8286,-32.62324 -87.13007,-22.98664
  -57.82646,2.59886M396.50984,805.03398c97.55186,1.04019 65.93584,25.61549
  21.19412,25.63392M410.20409,785.71584c31.87867,-11.92022 60.58013,-9.17207
  74.95842,-1.62887 16.81695,8.82258 14.04006,24.2047
  -26.16419,30.34906M430.54986,757.7319c58.57662,-11.0001 103.69453,13.94896
  55.48459,26.1888M451.62343,729.60393c67.42086,-18.09697 125.45489,10.74224
  49.42624,33.66324M469.15226,707.61747c69.25339,-23.47062 135.42699,4.47512
  67.15155,28.14525M497.03474,675.73394c50.50234,-8.00778 88.6752,9.66559
  55.551,28.0217M514.06286,656.56715c77.25396,-19.94453 157.95502,17.262
  48.7626,27.75334M550.91529,618.31036c57.1762,-5.00205 100.00874,18.02731
  40.2256,35.03407M568.89077,600.93936c75.24789,-19.79781 151.84194,14.60918
  51.22446,34.33609M596.84001,574.15634c55.64482,-7.64299 102.46778,11.7471
  64.24628,28.76475M620.73761,552.10789c71.56974,-16.51587 140.66537,14.62009
  53.45997,34.06378M660.73433,515.56983c57.1151,-4.52529 99.00079,18.87447
  36.45506,35.78648M684.38719,494.58861c73.88041,-16.89549 144.8643,16.89901
  43.68109,36.08147M722.79564,460.82624c57.76542,-5.50387 101.75016,17.65976
  42.02455,34.7974M748.43052,437.7647c68.01755,-11.92015 127.59071,17.4385
  43.80212,36.02686M645.55164,273.86211C640.4516,285.47932 635.59316,297.26013
  610,295c-14.37233,81.30224 -73.77303,98.38804 -130,120 0,0 -19.41945,15.64589
  -29.41945,15.64589C435.58055,430.64589 425,425 420,425c-5,0 -10,5 -25,5 -15,0
  -30,-25 -40,-50 -30,-40 -55,-96.04455 -55,-125 0,-20 5.003,-149.9992 5,-155
  -0.002,-3.089335 -5.72781,-42.445846
  -10.1037,-72.07356M622.93321,240.32144C616.61632,250.552 609.19352,264.74236
  615,265c2.73428,0.12132 6.96971,-10.37759
  10.24354,-19.90618M904.16018,494.81448l50.56379,54.17549M889.99031,508.2039l4\
  8.73454,52.21558M875.34795,521.08709l48.01937,51.44933M861.63691,534.96812l46\
  .15447,49.45122M847.01655,547.87487l45.96336,49.24646M832.83302,561.24966l35.\
  28817,37.80876M818.66315,574.63908l24.02599,25.74214M803.86532,587.3557l17.84\
  203,19.11646M790.06402,601.14003l8.92784,9.56554M482.75862,925h55.41872M495.8\
  9491,910h55.00821M508.21018,895h55.82923M521.34647,880h55.41872M534.48276,865\
  h55.41872M552.95566,845H585M790,820v32.5M765,820v32.5M740,820v32.5M703.26765,\
  833.26765l22.578,22.578M684.08867,854.08867l23.39901,23.39901M665.93596,875.9\
  3596l22.78325,22.78325M648.19376,898.19376l22.578,22.578M629.22003,919.22003l\
  20.73071,20.73071M791.29599,310.75526c15.62961,-6.29692 31.83381,-11.83473
  48.11454,-16.69002M776.15664,290.35133c15.84539,-6.35519 32.2728,-11.93292
  48.76488,-16.81275M760.82223,270.4856c16.18061,-6.50419 32.97255,-12.19625
  49.8241,-17.16102M746.54814,252.22866c16.42632,-6.7965 33.54246,-12.73644
  50.75899,-17.91046M739.12096,229.17409c11.71799,-4.608 23.73402,-8.79725
  35.84163,-12.5995M726.54679,208.22774c8.46394,-3.2756 17.07495,-6.33535
  25.75602,-9.1911M711.68624,188.33917c5.39484,-2.00758 10.85695,-3.94932
  16.37032,-5.82515M900.40882,94.431781C848.5463,114.25376 796.72828,69.769511
  761.4322,93.621964 715,125.00001 755,185 789.33498,165.18883
  821.13528,146.84017 790,105 775,115c-9.30261,6.20174 -14.88842,18.30946 -10,25
  6.18042,8.45885 10.48873,9.62814 20,5M901.46652,97.13303C861.76115,135.4564
  879.34663,201.01228 842.74068,222.52055 794.42332,250.91 757.5027,188.96753
  790.17065,166.51363c30.25635,-20.79631 54.6061,25.32412 39.1205,34.55428
  -9.60379,5.72429 -22.93675,5.55043 -26.86936,-1.74304 -4.972,-9.22111
  -4.17161,-13.61293 4.10189,-20.20332M765,180l90,-60M845,160c-10,-10
  -45.467,-11.35662 -55,5 22.00764,-11.03808 34.76336,-24.75676
  25,-45M795,230c25,30 50,20 75,10 24.05541,32.7653 64.66095,38.66637
  105,45M725,130C715,110 740,85 755,75 749.14905,51.948962 757.70702,26.00987
  766.59362,0.00490542M700,90c10,-25 25,-25 25,-25 -8.48271,-38.172217
  3.28893,-47.867055
  8.18679,-64.93099617M427.96416,0.01822477C445.06535,51.748024
  483.31343,78.400493
  539.31946,83.994433M446.67053,0.04362022C462.63103,38.843647
  492.03631,61.699978
  533.14043,70.683071M461.24526,0.01603427C475.22521,27.447203
  496.92922,45.718691
  525.58366,55.74792M476.99588,0.10806452C487.38028,16.453559
  500.99836,28.964352
  517.63646,37.893813M371.26432,0.04443925C356.34418,40.196712
  340.91798,80.075485
  304.69652,100.28589M355.60874,0.04353776C343.34293,31.804187
  329.13875,61.845937
  302.67098,80.298673M339.57059,0.02060224C329.73362,23.196287
  317.89132,44.53011
  299.71459,59.883794M325.15652,0.08430598C317.46458,14.722402
  308.27692,27.964826 296.26758,38.544057M305,120c41.1016,-25.066138
  61.56092,-14.28714 80,0 20,55 -15,110 -14.41945,151.6763 0.21559,15.47674
  11.72696,13.44856 19.41945,13.3237 4.99934,-0.0811 15,10
  15,10M305,125c29.58587,-20.97635 55.47603,-17.50669 80,-5M430,245c20,0 20,30
  5,30 -40,5 -40,-10 -5,0M365,315v10l5,-5
  -5,-5v0M455,320l5,-5v10l-5,-5v0M370,320c0,0 5,5 10,5 5,0 5.24415,-4.00984
  12.32219,-4.4848C400,320 400,325 405,325c5,0 15,-10 20,-10 5,0 15,5
  20,5h10M390,340c3.06957,28.45212 45.6136,8.68856 45,5 -5,5 -44.77199,31.85105
  -45,-5v0M430,135c51.53607,-36.718861 85.86501,-16.18211 120,5
  -35.40475,-25.98218 -85,-45 -120,-5v0M540,160C525,160 503.52953,134.61544
  483.61398,136.45137 453.79885,139.1999 445,175 430,180 447.93464,158.59181
  463.7944,151.78059 478.07024,151.93493 507.27438,152.25068 515,185
  550,175M430,180c15,-10 32.80939,10.04302 45.17423,9.94542C504.08195,189.71723
  519.49385,175 530,175M380,175c-20,0 -30.87367,-19.1648 -47.03192,-20.29027
  -12.3413,-0.85961 -29.19452,12.61246 -29.19452,17.61246 0,7.07107
  11.23734,20.70784 22.74316,23.25836C342.90794,199.21402 362.81244,175.3491
  380,175v0M305,165c22.64276,-42.75014 64.95345,-9.49214 65,-5M820,265c15,15
  35,10 45,5 20.5191,14.6565 42.75671,20.72048 62.68286,23.22939M851.86653
  312.33707C895.10619 299.11787 938.83136 290.34833 975 285C924.90149 188.22308
  899.90057 94.152754 874.11725 -0.0019513659
  M851.86653,312.33707C895.10619,299.11787 938.83136,290.34833 975,285
  924.90149,188.22308 899.90057,94.152754
  874.11725,-0.00195137M851.01315,311.99775
  635.36748,-2.4089679e-4M927.65339,293.26472C907.75671,290.72048
  885.5191,284.6565 865,270c-10,5 -30,10 -45,-5\"\r

  \        ></path>\r

  \      </symbol>\r

  \      <symbol id=\"SQ6\" preserveAspectRatio=\"none\" viewBox=\"0 0 1300
  2000\">\r

  \        <path\r

  \          stroke=\"#44F\"\r

  \          stroke-linecap=\"round\"\r

  \          stroke-linejoin=\"round\"\r

  \          stroke-width=\"3\"\r

  \          fill=\"none\"\r

  \          d=\"M986.60333,811.20184l17.52527,26.83701m3.5763,5.47663
  14.2883,21.88014M993.49031,800.86775c12.59499,20.81314 26.36539,39.79428
  40.67199,57.93996m3.6811,4.63683c6.0574,7.57938 12.2001,15.02588
  18.3803,22.41378m3.5795,4.26824c4.9357,5.87225 9.8895,11.71638
  14.8372,17.56998M1002.2895,791.27746c25.6547,42.89167 56.3312,77.95704
  86.5273,113.77117M1011.3206,782.24417c26.5981,44.89853 58.7236,81.18275
  90.1523,118.55299M1018.2105,775.40469C1045.4382,820.51985 1078.1971,857.01507
  1110,895M91.990234,409.08984c5.346491,34.39969 12.364566,69.89746
  17.978516,99.54297 5.61395,29.64551 9.60751,54.84672 9.52344,62.49219
  -0.14502,13.18721 -2.60383,25.09508 -7.35157,32.2207C107.39289,610.47133
  101.33414,615 85,615 68.665861,615 62.607113,610.47133
  57.859375,603.3457M95.230469,511.42383c2.783382,14.69817 5.162021,28.28252
  6.812501,38.99023 1.65048,10.70771 2.46055,19.51658 2.44922,20.54688
  -0.12561,11.42229 -3.03694,21.37127 -4.833987,24.06836 -1.554361,2.33286
  -1.96098,2.67133 -3.316406,3.33203C94.986371,599.02203 91.780811,600
  85,600M99.244141,641.85938C113.48363,645.75807 120,654.05348 120,660c0,3.87456
  -2.13436,8.18273 -8.24609,12.46094C105.64218,676.73915 95.96981,680 85,680
  74.030191,680 64.357824,676.73915
  58.246094,672.46094M99.476562,706.76367c8.835718,2.48582 12.847888,6.43575
  15.929688,11.99805C118.48805,724.32402 120,732.04575 120,740c0,15.20071
  -2.70618,36.77501 -6.41016,58.11133M102.94922,660.2832C99.903483,662.33803
  92.860098,665 85,665c-7.997241,0 -15.198086,-2.76015
  -18.152344,-4.82812M102.28516,726.03125C103.52282,728.2651 105,733.94656
  105,740c0,13.42041 -2.56634,34.6744
  -6.189453,55.54492M726.75998,368.27894C639.85431,387.67178 574.6926,396.00751
  524.83867,397.57475M715.61309,356.58894C649.94086,370.7787 597.12268,378.4618
  554.16847,381.63062M703.03893,344.25945c-49.76763,10.38288 -91.8849,16.91189
  -127.75629,20.52287M690.7875,331.76901c-38.30305,7.6982 -71.90839,13.04175
  -101.50758,16.49148M680.13806,318.87243c-30.03631,5.82677 -57.08899,10.16495
  -81.51547,13.25269M670.20516,305.76564c-23.347,4.36958 -44.8345,7.81564
  -64.64196,10.45774M659.57286,292.71511c-18.04772,3.23925 -34.94556,5.91034
  -50.78275,8.07274M390,380c11.94547,-13.95601 27.22073,-12.69836
  45,0M440,195c10,15 30,15 45,15M310,205c50,25 60,-30
  70,-30M350.01995,162.05531c1.14299,3.17833 1.7863,6.76631 1.7863,10.56373
  0,13.03628 -7.58139,23.60427 -16.9335,23.60427 -9.35211,0 -16.93349,-10.568
  -16.93349,-23.60427 0,-5.79795 1.49965,-11.10766
  3.98776,-15.21654M488.55832,153.60687c1.90775,3.81995 3.02626,8.46304
  3.02626,13.4703 0,13.03628 -7.58139,23.60427 -16.9335,23.60427 -9.35211,0
  -16.93349,-10.568 -16.93349,-23.60427 0,-4.03258 0.72545,-7.82898
  2.00436,-11.14943\"\r

  \        ></path>\r

  \        <use xlink:href=\"#SSQ\" height=\"90\"
  transform=\"translate(1188,935)scale(1,0.972)rotate(-40)translate(-45,-45)\">\
  </use>\r

  \        <use xlink:href=\"#SSQ\" height=\"90\"
  transform=\"translate(1194,1043)scale(1,0.972)rotate(-40)translate(-45,-45)\"\
  ></use>\r

  \        <use xlink:href=\"#SSQ\" height=\"90\"
  transform=\"translate(1096,1033)scale(1,0.972)rotate(-40)translate(-45,-45)\"\
  ></use>\r

  \        <use xlink:href=\"#SSQ\" height=\"90\"
  transform=\"translate(1022,947)scale(1,0.972)rotate(-40)translate(-45,-45)\">\
  </use>\r

  \        <use xlink:href=\"#SSQ\" height=\"90\"
  transform=\"translate(918,851)scale(1,0.972)rotate(-40)translate(-45,-45)\"><\
  /use>\r

  \        <use xlink:href=\"#SSQ\" height=\"90\"
  transform=\"translate(897,726)scale(1,0.972)rotate(-40)translate(-45,-45)\"><\
  /use>\r

  \      </symbol>\r

  \      <rect width=\"239\" height=\"335\" x=\"-119.5\" y=\"-167.5\"
  rx=\"12\" ry=\"12\" fill=\"white\" stroke=\"black\"></rect>\r

  \      <use width=\"164.8\" height=\"260.8\" x=\"-82.4\" y=\"-130.4\"
  xlink:href=\"#SQ1\"></use>\r

  \      <use transform=\"rotate(180)\" width=\"164.8\" height=\"260.8\"
  x=\"-82.4\" y=\"-130.4\" xlink:href=\"#SQ1\"></use>\r

  \      <use width=\"164.8\" height=\"260.8\" x=\"-82.4\" y=\"-130.4\"
  xlink:href=\"#SQ2\"></use>\r

  \      <use transform=\"rotate(180)\" width=\"164.8\" height=\"260.8\"
  x=\"-82.4\" y=\"-130.4\" xlink:href=\"#SQ2\"></use>\r

  \      <use width=\"164.8\" height=\"260.8\" x=\"-82.4\" y=\"-130.4\"
  xlink:href=\"#SQ3\"></use>\r

  \      <use transform=\"rotate(180)\" width=\"164.8\" height=\"260.8\"
  x=\"-82.4\" y=\"-130.4\" xlink:href=\"#SQ3\"></use>\r

  \      <use width=\"164.8\" height=\"260.8\" x=\"-82.4\" y=\"-130.4\"
  xlink:href=\"#SQ4\"></use>\r

  \      <use transform=\"rotate(180)\" width=\"164.8\" height=\"260.8\"
  x=\"-82.4\" y=\"-130.4\" xlink:href=\"#SQ4\"></use>\r

  \      <use width=\"164.8\" height=\"260.8\" x=\"-82.4\" y=\"-130.4\"
  xlink:href=\"#SQ5\"></use>\r

  \      <use transform=\"rotate(180)\" width=\"164.8\" height=\"260.8\"
  x=\"-82.4\" y=\"-130.4\" xlink:href=\"#SQ5\"></use>\r

  \      <use width=\"164.8\" height=\"260.8\" x=\"-82.4\" y=\"-130.4\"
  xlink:href=\"#SQ6\"></use>\r

  \      <use transform=\"rotate(180)\" width=\"164.8\" height=\"260.8\"
  x=\"-82.4\" y=\"-130.4\" xlink:href=\"#SQ6\"></use>\r

  \      <use xlink:href=\"#VSQ\" height=\"32\" x=\"-114.4\"
  y=\"-156\"></use>\r

  \      <use xlink:href=\"#SSQ\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \      <use xlink:href=\"#SSQ\" height=\"55.68\" x=\"36.088\"
  y=\"-132.16\"></use>\r

  \      <g transform=\"rotate(180)\">\r

  \        <use xlink:href=\"#VSQ\" height=\"32\" x=\"-114.4\"
  y=\"-156\"></use>\r

  \        <use xlink:href=\"#SSQ\" height=\"26.769\" x=\"-111.784\"
  y=\"-119\"></use>\r

  \        <use xlink:href=\"#SSQ\" height=\"55.68\" x=\"36.088\"
  y=\"-132.16\"></use>\r

  \      </g>\r

  \      <use xlink:href=\"#XSQ\" stroke=\"#44F\" fill=\"none\"></use>\r

  \    </svg>\r

  \  `;\r

  \  html = replaceAllFast(html, 'black', 'green');\r

  \  mDiv(dTable, {}, null, html);\r

  \  return;\r

  }"
test100: "function test100() {\r

  \  let keys = {};\r

  \  for (const k in CODE.di) { for (const k1 in CODE.di[k]) keys[k1] =
  CODE.di[k][k1]; }\r

  \  CODE.all = keys;\r

  \  CODE.keylist = Object.keys(keys)\r

  \  let inter = intersection(Object.keys(keys), Object.keys(window));\r

  \  let done = {};\r

  \  let tbd = ['_start'];\r

  \  let MAX = 1007, i = 0;\r

  \  let alltext = '';\r

  \  while (!isEmpty(tbd)) {\r

  \    if (++i > MAX) break;\r

  \    let sym = tbd[0];\r

  \    let o = CODE.all[sym];\r

  \    if (nundef(o)) o = getObjectFromWindow(sym);\r

  \    if (o.type != 'func') { tbd.shift(); lookupSet(done, [o.type, sym], o);
  continue; }\r

  \    let olive = window[sym];\r

  \    if (nundef(olive)) { tbd.shift(); lookupSet(done, [o.type, sym], o);
  continue; }\r

  \    let text = olive.toString();\r

  \    if (!isEmpty(text)) alltext += text + '\\r\\n';\r

  \    let words = toWords(text, true);\r

  \    for (const w of words) {\r

  \      if (nundef(done[w]) && w != sym && isdef(CODE.all[w])) addIf(tbd,
  w);\r

  \    }\r

  \    tbd.shift();\r

  \    lookupSet(done, [o.type, sym], o);\r

  \  }\r

  \  let tres = '';\r

  \  for (const k of ['const', 'var', 'cla', 'func']) {\r

  \    console.log('done', k, done[k])\r

  \    let o = done[k]; if (nundef(o)) continue;\r

  \    let klist = get_keys(o);\r

  \    if (k == 'func') klist = sortCaseInsensitive(klist);\r

  \    for (const k1 of klist) {\r

  \      if (isLetter(k1) && k1 == k1.toLowerCase()) continue;\r

  \      let code = CODE.justcode[k1];\r

  \      if (!isEmptyOrWhiteSpace(code)) tres += code;\r

  \    }\r

  \  }\r

  }"
test100_partial_sequences: "function test100_partial_sequences() {\r

  \  let hand = ['AHn', '2Hn', '3Hn', '4Hn', '5Hn', '6Hn', '7Hn', '8Hn'];\r

  \  hand = ['AHn', '2Hn', '3Hn', '4Hn', '5Hn', '7Hn', '8Hn'];\r

  \  hand = ['4Hn', '7Hn', 'AHn', '2Hn', '5Hn', '6Hn', '3Hn', '8Hn'];\r

  \  hand = ['4Hn', '7Hn', 'AHn', '2Hn', '3Hn', '8Hn'];\r

  \  hand = ['4Hn', '7Hn', 'AHn', '2Hn', '9Hn', 'THn', 'QHn', '3Hn', '8Hn'];\r

  \  hand = ['4Hn', '7Hn', 'AHn', '2Hn', 'THn', 'QHn', '3Hn', '8Hn'];\r

  \  let items = hand.map(x => ferro_get_card(x));\r

  \  console.log('items', items);\r

  \  sortCardItemsToSequence(items);\r

  }"
test11: "function test11() {\r

  \  document.body.style.height = '100vh';\r

  \  let mobj = addDeckTo(makeDeck({ kind: 'deck52', N: 30, nJokers: 5 }),
  document.body, 'discardPile', true, true);\r

  \  mobj.setPos(0, -300);\r

  }"
test11_besseresColoring: "function test11_besseresColoring() {\r

  \  var dMain = document.getElementById('dMain');\r

  \  mStyle(dMain, { bg: 'indigo' });\r

  \  let [dHeaderLeft, dTitle, dHeaderRight] = std3title(dMain, 'Aristocracy',
  { family: 'AlgerianRegular' });\r

  \  let [dLeft, dMiddle, dRight] = std3fold(dMain);\r

  \  let dFooter = mDiv(dMain, { bg: '#00000050' }, 'dFooter', 'footer');\r

  \  let bMenuLeft = stdMenuButton(dHeaderLeft);\r

  \  stdSidebarController(bMenuLeft, 'dLeft');\r

  \  let bMenuRight = stdMenuButton(dHeaderRight);\r

  \  stdSidebarController(bMenuRight, 'dRight');\r

  }"
test11_cardcoloring: "function test11_cardcoloring() {\r

  \  let dTable = mBy('dTable'); clearElement(dTable);\r

  \  let card = ari_get_card('KHn');\r

  \  mAppend(dTable, iDiv(card));\r

  \  let d = mDiv(dTable, {}, null, queen_html());\r

  }"
test11_function: "function test11_function() {\r

  \  C = new Plotter(dTable, {}, {}, gameloop_start, gameloop_stop, 'cc');\r

  \  C.add({ astep: .1, a: 0, bstep: .1, b: 0, color: 'skyblue', thickness: 1,
  basefunc: x => -x * (-Math.sign(x)), func: x => Math.sin(x), update:
  oscillator });\r

  }"
test11_gengraph: "function test11_gengraph() {\r

  \  let items = create_nodes({ x: 0, y: 0, w: 500, h: 500 }, 20, 120);\r

  \  console.log('items', items, items[120]);\r

  \  dTable = toElem('map');\r

  \  plot_on_div(dTable, items);\r

  \  adjacency_init(items);\r

  }"
test11_oest: "function test11_oest() {\r

  \  let map = M.map = create_map({ zoom: 7, center: Geo.cities.salzburg });\r

  \  let list = get_values(Geo.cities).filter(x => x.country == 'Austria');\r

  \  console.log('list', list);\r

  \  for (const c of list) {\r

  \    create_agent(map, c);\r

  \  }\r

  }"
test11_say: "async function test11_say() {\r

  \  say(germanize('wie fuehlst du dich gerade?'), 'pl', test12_iconviewer, 1,
  .8, .8);\r

  }"
test12: "function test12() {\r

  \  document.body.style.height = '100vh';\r

  \  let deck = makeDeck({ kind: 'deck52', N: 30, nJokers: 5 });\r

  \  clearElement(document.body);\r

  \  addDeckTo(deck, document.body, 'deck1', true, true);\r

  }"
test12_backToPresent: "function test12_backToPresent() {\r

  \  dMenu = mMenuLine(dMain);\r

  \  dMenu.style.display = 'block';\r

  \  let bToggle = mMenuButton(dMenu);\r

  \  let d = mDiv(dMain);\r

  \  mCenterFlex(d);\r

  \  let d1 = present_structured1(d, state);\r

  \  let sb = iSidebar(mDiv(d), d1, bToggle, 40, true);\r

  }"
test12_cyto: "function test12_cyto() {\r\n}"
test12_europe: "function test12_europe() {\r

  \  let map = M.map = create_map({ zoom: 5, center: Geo.cities.stuttgart
  });\r

  \  let list = get_values(Geo.cities).filter(x => x.continent == 'Europe' &&
  x.pop >= 1000000 && x.country == 'Austria');\r

  \  console.log('list', list);\r

  \  for (const c of list) {\r

  \    let m = create_fa(map, 'helicopter', c.center);\r

  \    break;\r

  \  }\r

  }"
test12_fop: "function test12_fop() {\r

  \  let f = fprime('x*x'); let y = f(5); console.log('math.js y', y);\r

  }"
test12_iconviewer: "async function test12_iconviewer() {\r

  \  let items = findKeys('face').map(x => Syms[x]);\r

  \  items = KeySets['smileys-emotion'].map(x => Syms[x]);\r

  \  items = items.map(x => ({ key: x.key, text: x.text, E: x.E, D: x.D,
  family: x.family }));\r

  \  let items2 = Info.emotion.map(x => ({ key: x, E: x, D: '', family:
  'opensans', text: '' }));\r

  \  sortBy(items2, 'key');\r

  \  items2 = arrRemoveDuplicates(items2, 'E');\r

  \  items = items.concat(items2);\r

  \  dTable = mBy('dTable');\r

  \  for (const item of items) ui_type_item(dTable, item, {}, null,
  item.key);\r

  }"
test12_try_svg: "function test12_try_svg() {\r\n}"
test13: "function test13() {\r

  \  let d = document.body;\r

  \  dTable = mDiv(d, { box: true, padding: 4, w: '100vw', h: '100vh', bg:
  GREEN }, 'dTable');\r

  \  dFiddle = mDiv(dTable, { w: 200, h: 200, bg: RED, padding: 4 },
  'dFiddle');\r

  \  dTitle = mDiv(dFiddle, {}, null, 'Fiddle');\r

  \  AU.ta = mDom(dFiddle, { w: '100%', h: 'rest', bg: '#ffffff80' }, { id:
  'ta', className: 'plain', tag: 'textarea' });\r

  \  console.log('AU.ta class', AU.ta)\r

  }"
test13_doubleDD: "function test13_doubleDD() {\r

  \  let dParent = addDivToBody();\r

  \  dParent.id = 'dParent';\r

  \  let d = addDivPosTo(dParent, 20, 50, 200, 200, unit = 'px', bg =
  'red');\r

  \  let dTarget1 = addDivPosTo(dParent, 250, 50, 300, 200, unit = 'px', bg =
  'purple');\r

  \  dTarget1.id = 'dTarget1';\r

  \  let dTarget2 = addDivPosTo(dTarget1, 50, 50, 200, 120, unit = 'px', bg =
  'green');\r

  \  dTarget2.id = 'dTarget2';\r

  \  let pic = addPicto(d, 'whistle');\r

  \  pic.id = 'dPic';\r

  \  posXY(pic, dParent, 10, 20);\r

  \  pic.draggable = true;\r

  \  pic.ondragstart = drag;\r

  \  pic.isPic = true;\r

  \  dTarget1.ondragover = allowDrop;\r

  \  dTarget1.ondrop = drop;\r

  \  dTarget2.draggable = true;\r

  \  dTarget2.ondragstart = drag;\r

  \  dTarget2.isPic = false;\r

  \  dParent.ondragover = allowDrop;\r

  \  dParent.ondrop = drop;\r

  }"
test13_get_the_div: "function test13_get_the_div() {\r

  \  let map = M.map = create_map({ zoom: 5, center: Geo.cities.stuttgart
  });\r

  \  let dmap = document.getElementById('map');\r

  \  let dtiles = dmap.firstChild.firstChild;\r

  \  console.log('dtiles', dtiles);\r

  }"
test13_load_yt_in_iframe: "function test13_load_yt_in_iframe() {\r

  \  var div = document.createElement('iframe');\r

  \  div.id = 'iframe1';\r

  \  mStyle(div, { w: 500, h: 300 })\r

  \  document.getElementById(\"map\").appendChild(div);\r

  \  div.src = \"https://www.youtube.com/embed/3pNpHZ1yv3I\"; //YES!\r

  \  //iDiv.src = \"https://www.youtube.com/embed/3pNpHZ1yv3I?autoplay=1\";\r

  }"
test13_makeDraggableTo: "function test13_makeDraggableTo() {\r

  \  let dParent = addDivToBody();\r

  \  dParent.id = 'dParent';\r

  \  let d = addDivPosTo(dParent, 20, 50, 200, 200, unit = 'px', bg =
  'red');\r

  \  let dTarget1 = addDivPosTo(dParent, 250, 50, 300, 200, unit = 'px', bg =
  'purple');\r

  \  dTarget1.id = 'dTarget1';\r

  \  let dTarget2 = addDivPosTo(dTarget1, 50, 50, 200, 120, unit = 'px', bg =
  'green');\r

  \  dTarget2.id = 'dTarget2';\r

  \  let pic = addPicto(d, 'whistle');\r

  \  pic.id = 'dPic';\r

  \  posXY(pic, dParent, 10, 20);\r

  \  makeElemDraggableTo(pic, dTarget1);\r

  \  makeElemDraggableTo(dTarget2, dParent);\r

  }"
test13_nerdamer: "function test13_nerdamer() {\r

  \  nerdamer.setVar('M', 'matrix([1, 5], [4, 4])');\r

  \  var x = nerdamer('invert(M)');\r

  \  console.log(x.toString(), typeof x, x);\r

  \  var r = nerdamer('polarform(b*x+x*c*i)');\r

  \  console.log(r.toString());\r

  \  var t = nerdamer('polarform(5+i)')\r

  \  console.log(t.toString());\r

  \  nerdamer.setVar('M', 'matrix([x,y],[a,b])');\r

  \  console.log(nerdamer('transpose(M)').toString());\r

  \  nerdamer.setVar('M', 'matrix([4,5],[1,7])');\r

  \  x = nerdamer('determinant(M)');\r

  \  console.log(x.toString(), Number(x), typeof x, typeof Number(x),
  Number(x) + 1);\r

  \  console.log('==>', parseFloat(x));\r

  \  var x = nerdamer('limit(x^x-1,x,0)');\r

  \  console.log(x.toString());\r

  \  var y = nerdamer('limit((x^2+2*x-3)/(x^6+4),x,0)');\r

  \  console.log(y.toString());\r

  \  var x = nerdamer('solve(x^3+1, x)');\r

  \  console.log(x.toString());\r

  \  x = nerdamer.solve('x^2+2*x+1', 'x');\r

  \  console.log(x.toString());\r

  \  x = nerdamer.solve('3*(x+a)*(x-b)', 'x');\r

  \  console.log(x.toString());\r

  \  x = nerdamer.solve('3*(x+a)*(x-b)', 'x');\r

  \  console.log(x.toString());\r

  \  x = nerdamer('solve(x^4=1,x)');\r

  \  console.log(x.toString());\r

  \  x = nerdamer('solve(y=m*x+c, x)');\r

  \  console.log(x.toString());\r

  \  x = nerdamer.solve('x^2-1', 'x');\r

  \  console.log(x.toString());\r

  \  x = nerdamer.max(1, 4, 3, 5);\r

  \  console.log(x.toString());\r

  \  var x = nerdamer('sqcomp(9*x^2-18*x+17)');\r

  \  console.log(x.toString());\r

  \  var y = nerdamer('sqcomp(a*x^2+b*x-11*c, x)');\r

  \  console.log(y.toString());\r

  \  var x = nerdamer('roots(x^2-3*x-10)');\r

  \  console.log(x.toString())\r

  \  var y = nerdamer('roots(x^2+1)');\r

  \  console.log(y.toString());\r

  \  var x = nerdamer('divide(x^2+2*x+1, x+1)');\r

  \  console.log(x.toString())\r

  \  var y = nerdamer('divide(-b*z-a*z+b^3+a*b^2+a*b+a^2, b+a)');\r

  \  console.log(y.toString());\r

  \  var x = nerdamer('gcd(x^2+2*x+1, x^2+6*x+5)');\r

  \  console.log(x.toString())\r

  \  var y = nerdamer('gcd(b*z+a*z+b^2+a*b, a+b)');\r

  \  console.log(y.toString());\r

  \  var z = nerdamer('gcd(24,12,552)');\r

  \  console.log(z.toString());\r

  \  var x = nerdamer('product(x+1, x, 1, 20)');\r

  \  console.log(x.toString())\r

  \  var y = nerdamer('product(x+y, x, 1, 5)');\r

  \  console.log(y.toString());\r

  \  var z = nerdamer('product(x, x, 1, 5)');\r

  \  console.log(z.toString());\r

  \  var x = nerdamer('sum(x+1, x, 1, 5)');\r

  \  console.log(x.toString())\r

  \  var y = nerdamer('sum(x+y, x, 1, 20)');\r

  \  console.log(y.toString());\r

  \  console.log('_______simplify')\r

  \  var x = nerdamer('simplify((x^2+4*x-45)/(x^2+x-30))');\r

  \  console.log(x.toString());\r

  \  var y = nerdamer('simplify((17/2)*(-10+8*i)^(-1)-5*(-10+8*i)^(-1)*i)');\r

  \  console.log(y.toString());\r

  \  var z = nerdamer('simplify(1+1+3+5+13)');\r

  \  console.log(z, typeof z, Number(z) + 1);\r

  \  console.log('_______ defint')\r

  \  var x = nerdamer('defint(e^(cos(x)), 1, 2)');\r

  \  console.log(x.text());\r

  \  var y = nerdamer('defint(x^2+2*x+1,0, 10)');\r

  \  console.log(y.text());\r

  \  var y = nerdamer('defint(log(2cos(x/2)),-π,π,x)');\r

  \  console.log(y.text());\r

  \  console.log('_______ derivative diff')\r

  \  var x = nerdamer('diff(cos(x)*sin(x), x)');\r

  \  console.log(x.toString());\r

  \  var y = nerdamer('diff([x^2, cos(x), 1], x, 2)');\r

  \  console.log(y.toString());\r

  \  var y = nerdamer('diff(x^3+a*x^3+x^2, x, 2)');\r

  \  console.log(y.toString());\r

  \  x = nerdamer.diff(nerdamer('x^2').add(1).multiply('tan(x)'), 'x')\r

  \  console.log(x.toString());\r

  \  x = nerdamer('diff(a+b*x+c*x^2, x)');\r

  \  console.log(x.toString());\r

  \  x = nerdamer('diff(x^2, x)');\r

  \  console.log(x.toString());\r

  \  var x = nerdamer('sin(9+5)');\r

  \  console.log(x.toString());\r

  \  console.log(x.evaluate().toString());\r

  \  var x = nerdamer('integrate(x*2,x)');\r

  \  console.log(x.toString());\r

  \  y = x.evaluate();\r

  \  console.log('eval:', y);\r

  \  var x = nerdamer('integrate(10*q/(4*x^2+24*x+20), x)');\r

  \  console.log(x.toString());\r

  \  var y = nerdamer('integrate(sec(x)^2, x)');\r

  \  console.log(y.toString());\r

  \  var y = nerdamer('integrate([sec(x)^2, x^2, 2], x)');\r

  \  console.log(y.toString());\r

  \  var x = nerdamer('integrate(cos(x)*x^6, x)');\r

  \  console.log(x.toString());\r

  \  console.log(x.hasIntegral());\r

  \  x = nerdamer.integrate('sinh(x)*e^x');\r

  \  console.log(x.toString());\r

  \  var e = nerdamer('x^2+2*(cos(x)+x*x)', { x: 6 }).evaluate();\r

  \  var e = nerdamer('x^2+2*(cos(x)+x*x)', { x: 6 });\r

  \  var e = nerdamer('x^2+2*(cos(x)+x*x)', { x: 6 }).evaluate();\r

  \  console.log(e.text());\r

  \  console.log(e);\r

  \  var e = nerdamer('x^2+2*(cos(x)+x*x)');\r

  \  console.log(e.text());\r

  \  console.log(e);\r

  \  var result = nerdamer('cos(x)', { x: 6 });\r

  \  console.log(result.text());\r

  \  var result = nerdamer('cos(x)', { x: 6 }, 'numer');\r

  \  console.log(result.text());\r

  \  var result = nerdamer('cos(x)', { x: 6 }).evaluate();\r

  \  console.log(result.text());\r

  \  var f = nerdamer('integrate(x,x)').buildFunction();\r

  \  console.log(f(3));\r

  \  f = nerdamer('diff(x^3,x)').buildFunction();\r

  \  console.log(f(20));\r

  }"
test13_simpleDD: "function test13_simpleDD() {\r

  \  document.body.style.height = '100vh';\r

  \  let dParent = addDivToBody();\r

  \  dParent.id = 'dParent';\r

  \  let d = addDivPosTo(dParent, 20, 50, 200, 200, unit = 'px', bg =
  'red');\r

  \  let purpleTarget = addDivPosTo(dParent, 250, 50, 300, 200, unit = 'px',
  bg = 'purple');\r

  \  let greenTarget = addDivPosTo(purpleTarget, 50, 50, 200, 120, unit =
  'px', bg = 'green');\r

  \  let pic = createPicto({ key: 'whistle', parent: d, bg: 'yellow', border:
  '1px solid green', rounding: 12 });\r

  \  pic.type = 'pic';\r

  \  makeDraggable(pic);\r

  \  makeDroppable(purpleTarget);\r

  \  dropPosition = (ev, elem, target) => { posOverlap(elem, target, 10, 5,
  'type'); };\r

  }"
test13_simpleDDMultiple: "function test13_simpleDDMultiple() {\r

  \  let dParent = addDivToBody();\r

  \  dParent.id = 'dParent';\r

  \  let purpleTarget = addDivPosTo(dParent, 250, 50, 300, 200, unit = 'px',
  bg = 'purple');\r

  \  let greenTarget = addDivPosTo(purpleTarget, 50, 50, 200, 120, unit =
  'px', bg = 'green');\r

  \  let d = addDivPosTo(dParent, 20, 50, 200, 200, unit = 'px', bg =
  'red');\r

  \  for (let i = 0; i < 7; i++) {\r

  \    let k = getRandomKey(iconChars);\r

  \    let pic = createPicto({ key: k, parent: d, bg: 'yellow', border: '1px
  solid green', rounding: 12 });\r

  \    pic.type = 'pic';\r

  \    posOverlap(pic, d, 120, 0, 'type');\r

  \    makeDraggable(pic);\r

  \  }\r

  \  makeDroppable(purpleTarget);\r

  \  dropPosition = (ev, elem, target) => { posOverlap(elem, target, 10, 5,
  'type'); };\r

  }"
test14: "function test14() {\r

  \  show_emos();\r

  \  say('what do you feel right now???', 'uk', null, .5, .8);\r

  }"
test14_divPosTest: "function test14_divPosTest() {\r

  \  let dParent = addDivToBody();\r

  \  dParent.style.setProperty('float', 'right');\r

  \  dParent.style.setProperty('margin', '10px');\r

  \  setDivBg(dParent, 'green');\r

  \  setDivSize(dParent, 300, 200);\r

  \  let d = addDivPosTo(dParent, 20, 50, 100, 100, unit = 'px', bg =
  'red');\r

  }"
test14_factory: "function test14_factory() {\r

  \  let d = mSym('frog', 'map');\r

  }"
test14_function: "function test14_function() {\r

  \  C = new Plotter(dTable, {}, {}, gameloop_start, gameloop_stop, 'cc');\r

  \  C.add({ astep: .1, a: 0, bstep: .1, b: 0, color: 'skyblue', thickness: 1,
  basefunc: x => -x * (-Math.sign(x)), func: x => Math.sin(x), update:
  oscillator });\r

  \  C.play();\r

  }"
test15: "function test15() {\r

  \  let d = document.body; mClass(d, 'fullpage');\r

  \  let areas = [\r

  \    'dTestButtons dTestButtons',\r

  \    'dSearch dSidebar',\r

  \    'dFiddle dSidebar',\r

  \    'dTable dSidebar',\r

  \  ];\r

  \  let cols = '1fr 200px';\r

  \  let rows = 'auto auto auto 1fr';\r

  \  dGrid = mGridFrom(d, areas, cols, rows);\r

  \  for (const ch of arrChildren(dGrid)) {\r

  \    console.log('rect', ch.id, getRect(ch))\r

  \  }\r

  \  mStyle(dGrid, { fg: 'white', bg: 'silver' })\r

  \  test15_weiter();\r

  }"
test15_addDivU: "function test15_addDivU() {\r

  \  let dParent = addDivU({ dParent: document.body, bg: 'yellow', margin: 10,
  w: 300, h: 200, unit: 'px', float: 'right' });\r

  \  let d = addDivU({ dParent: dParent, x: 20, y: 50, w: 100, h: 100, unit:
  'px', position: 'absolute', bg: 'red' });\r

  }"
test15_fa_list: "function test15_fa_list() {\r

  \  dTable = mBy('map');\r

  \  let animations = ['beat', 'bounce', 'fade', 'flip', 'pulse', 'shake',
  'spin'];\r

  \  let iani = 0;\r

  \  let list = Info.fa;\r

  \  for (const w of arrTake(list, 25)) {\r

  \    let an = 'pulse';\r

  \    let d = mDiv(dTable, { align: 'center', bg: 'blue', margin: 8, fg:
  'white', display: 'inline-block', padding: 10 }, null, `<i class=\"fa fa-${w}
  fa-${an} fa-3x\"></i><br>${w}`);\r

  \  }\r

  }"
test15_function: "function test15_function() {\r

  \  C = new Plotter(dTable);\r

  \  C.add({ color: 'skyblue', thickness: 1, func: x => Math.sin(x) });\r

  \  C.draw();\r

  }"
test15_qa: "function test15_qa() {\r

  \  G = {\r

  \    i: 0,\r

  \    q: null,\r

  \    alist: null,\r

  \    selist: null,\r

  \    hist: [],\r

  \    stcont: { box: true, wmin: 600 },\r

  \    sta: { cursor: 'pointer', aitems: 'center', vpadding: 6, hpadding: 12,
  gap: 4, margin: 6, rounding: 12, fg: 'contrast' },\r

  \    stq: { padding: 12, weight: 'bold', family: 'opensans', fz: 28 },\r

  \  };\r

  \  q0();\r

  }"
test15_weiter: "function test15_weiter() {\r

  \  mStyle(dFiddle, { padding: 4, h: 400 });\r

  \  mClear(dFiddle)\r

  \  dTestButtons.innerHTML = 'Test Buttons'\r

  \  mDom(dFiddle, {}, { html: 'Fiddle' })\r

  \  AU.ta = mDom(dFiddle, { w100: true, hrest: true, bg: '#ffffff80' }, {
  tag: 'textarea', id: 'ta', className: 'plain hop1' });\r

  \  console.log('AU.ta', AU.ta)\r

  }"
test16: "function test16() {\r

  \  let d = document.body; mClass(d, 'fullpage');\r

  \  let areas = [\r

  \    'dTestButtons dTestButtons',\r

  \    'dSearch dSidebar',\r

  \    'dFiddle dSidebar',\r

  \    'dTable dSidebar',\r

  \  ];\r

  \  let cols = '1fr 200px';\r

  \  let rows = 'auto auto auto 1fr';\r

  \  dPage = mGridFrom(d, areas, cols, rows);\r

  \  mStyle(dPage, { fg: 'white', bg: 'silver' })\r

  \  mStyle(dFiddle, { h: 400, padding: 14, box: true });\r

  \  mDom(dFiddle, {}, { html: 'Fiddle' });\r

  \  AU.ta = mDom(dFiddle, { w100: true, box: true, h: 'rest', bg: '#ffffff80'
  }, { tag: 'textarea', id: 'ta', className: 'plain hop1' });\r

  \  maButton('test', onclickTest, dTestButtons, { className: 'a' });\r

  }"
test16_fa_animation: "function test16_fa_animation() {\r

  \  dTable = mBy('map');\r

  \  let fa = rChoose(Info.fa);\r

  \  mCenterCenterFlex(dTable); mStyle(dTable, { bg: 'white', position:
  'relative' });\r

  \  let d0 = mDiv(dTable); mStyle(d0, { rounding: '50%', align: 'center', bg:
  'blue', fg: 'white', display: 'inline-block' })\r

  \  let dfa = mDiv(d0, { padding: 40, }, null, `<i class=\"fa fa-${fa}
  fa-2x\"></i>`);\r

  }"
test16_function: "function test16_function() {\r

  \  C = new Plotter(dTable);\r

  \  C.add({ color: 'skyblue', thickness: 1, func:
  nerdamer('integrate(x,x)').buildFunction() });\r

  \  C.draw();\r

  }"
test16_g: "function test16_g() {\r

  \  let dParent = addDivToBody();\r

  \  let g1 = addGFill('g1', dParent);\r

  \  let g2 = d3.select(g1).append('g').attr('fill', 'yellow').attr('stroke',
  'black').attr('stroke-width', 5);\r

  \  g2.append('rect').attr('width', '50px').attr('height', '50px');\r

  \  let g3 = d3.select(g1).append('g').attr('fill', 'red').attr('stroke',
  'white').attr('stroke-width', 5);\r

  \  let r3 = g3.append('rect').attr('width', '50%').attr('height', '50px');\r

  \  g3.node().style.transform = 'translate(-10px, -200px)';\r

  \  let g = g3.node();\r

  \  g.classList.add('green');\r

  \  g.classList.add('yellowStroke');\r

  \  let cl = g.classList;\r

  \  console.log(cl, typeof cl, cl.value, typeof cl.value);\r

  \  let cl2 = g.getAttribute('class')\r

  \  console.log(cl2, typeof cl2);\r

  \  console.log(g.getAttribute('class'))\r

  \  g.classList.remove('yellowStroke');\r

  \  let boundsG1 = getBounds(g1);\r

  \  let boundsG2 = getBounds(g2.node());\r

  \  let boundsG2_rel = getBounds(g2.node(), true);\r

  \  let boundsG3 = getBounds(g3.node());\r

  \  let boundsG3_rel = getBounds(g3.node(), true);\r

  \  let boundsDiv = getBounds(dParent);\r

  \  console.log('boundsG1', boundsG1)\r

  \  console.log('boundsG2', boundsG2)\r

  \  console.log('boundsG2_rel', boundsG2_rel)\r

  \  console.log('boundsG3', boundsG3)\r

  \  console.log('boundsG3_rel', boundsG3_rel)\r

  \  console.log('boundsDiv', boundsDiv)\r

  \  return;\r

  \  d3.select(g2).style('transform', 'translate(50%, 50%)')\r

  \  //first import d3.js: <script
  src=\"https://d3js.org/d3.v5.min.js\"></script>\r

  \  let r = d3.select(g1).attr('fill', 'red').append('rect').attr('width',
  '100px').attr('height', '100px');\r

  \  console.log('g1', d3.select(g1).node());\r

  \  console.log('r', r.node());\r

  \  let rect = d3.select(g1.children[0]);\r

  \  console.log(rect, r);\r

  \  r.attr('stroke', 'green').attr('stroke-width', 5).attr('rx',
  20).attr('ry', 20);\r

  }"
test16_yt: "function test16_yt() {\r

  \  playt();\r

  }"
test16a: "function test16a() {\r

  \  let d = document.body; mClass(d, 'fullpage');\r

  \  let areas = [\r

  \    'dTestButtons dTestButtons',\r

  \    'dSearch dSidebar',\r

  \    'dFiddle dSidebar',\r

  \    'dTable dSidebar',\r

  \  ];\r

  \  let cols = '1fr 200px';\r

  \  let rows = 'auto auto auto 1fr';\r

  \  dPage = mGridFrom(d, areas, cols, rows, { padding: 4, box: true });\r

  \  mStyle(dPage, { fg: 'white', bg: 'silver' }); \r

  \  let elem = mSearch('keywords:',mySearch,dSearch); \r

  \  mStyle(dFiddle, { h: 400 }); \r

  \  mDom(dFiddle, {}, { html: 'Edit Code:' });\r

  \  AU.ta = mDom(dFiddle, { w100: true, box: true, h: 'rest', bg: '#ffffff80'
  }, { tag: 'textarea', id: 'ta', className: 'plain hop1' });\r

  \  mFlex(dTestButtons);\r

  \  mButton('TEST', onclickTest, dTestButtons); \r

  }"
test17_load_save_texte: "function test17_load_save_texte() {\r

  \  mStyle(dTable, { h: '100%', family: 'opensans', fz: 20, bg: ORANGE, fg:
  'white', position: 'relative' }); mCenterFlex(dTable);\r

  \  let buttons = ['clear', 'magic'];\r

  \  dToolbar = mToolbar(buttons, onclick_toobar, 'dToolbar', { padding: 10,
  display: 'flex', gap: 10, bg: 'orange' });\r

  \  document.addEventListener('mouseleave', e => { console.log('page mouse
  left!!!'); save_all(); })\r

  \  document.addEventListener('visibilitychange', e => { if
  (document.visibilityState === 'visible') { console.log('page activated!'); }
  else { console.log('page deactivated!!!'); save_all(); } });\r

  \  load_all();\r

  \  onclick = open_invisible_input;\r

  }"
test17_randomwalk: "function test17_randomwalk() {\r

  \  C = new CCanvasNoClear(dTable, {}, {}, gameloop_start, gameloop_stop);\r

  \  C.add({ update: move_random, w: 2, h: 2 });\r

  \  C.add(new CItemWalker({ label: 'tom' }))\r

  \  C.play();\r

  }"
test1ttt: "function test1ttt() {\r

  \  let board = new Board(dTable, 4, 4, ev => {\r

  \    let field = Items[ev.target.id];\r

  \    console.log('field', field);\r

  \    if (isdef(field.content)) return;\r

  \    let item = { field: field, container: ev.target, styles: { bg: 'red',
  w: 30, h: 30, rounding: '50%' } };\r

  \    game_add_item(item);\r

  \  });\r

  }"
test2: "function test2() {\r\n}"
test2_2rows: "function test2_2rows() {\r

  \  var dMain = document.getElementById('dMain');\r

  \  let dHeader = mDiv(dMain, {}, 'dHeader', 'header', ['div1']);\r

  \  let dOuter = mDiv(dMain, {}, 'dOuter', 'outer', ['div2']);\r

  }"
test2_ari_deck_and_hand: "function test2_ari_deck_and_hand(otree) {\r

  \  let deck = ui_make_random_deck(10);\r

  \  let hand = ui_make_random_hand(1);\r

  \  let d = iDiv(deck.topmost);\r

  \  deck.items.map(x => { mStyle(iDiv(x), { cursor: 'pointer' });
  iDiv(x).onclick = () => anim_from_deck_to_hand(x, deck, hand); });\r

  }"
test2_boa_verify: "function test2_boa_verify() {\r

  \  mAppear('dScreen', 100);\r

  \  if (FirstLoad) { FirstLoad = false; initialize_state(); }\r

  \  get_toolbar();\r

  \  onclick_location('boa');\r

  \  boaverify_start();\r

  }"
test2_nerd: "function test2_nerd() {\r

  \  var core = nerdamer.getCore();\r

  \  var _ = core.PARSER;\r

  \  core.Math2.custom = function (x) { return (100 * formula1(x)).toFixed(4);
  };\r

  \  _.functions.custom = [, 1];\r

  \  var x = nerdamer('custom(140)').evaluate();\r

  \  console.log(x.toString());\r

  \  let fi = nerdamer(`integrate(custom(x),x)`).buildFunction();\r

  \  let y = fi(100);\r

  \  console.log('fi(100)', y)\r

  }"
test2_onclick_user: "function test2_onclick_user() {\r

  \  let ms = 300;\r

  \  show_users(300);\r

  \  setTimeout(() => onclick_user('felix'), 400);\r

  }"
test2_p5_perlin: "function test2_p5_perlin() {\r

  \  dTable = mBy('dTable'); mCenterFlex(dTable);\r

  \  let o = mCanvas(dTable, { w: 600, h: 400 }, {}, startloop, pauseloop,
  'cc');\r

  \  iAdd(o, {}, { draw: draw_perlin_x });\r

  \  o.play();\r

  }"
test2_pic_dicts: "function test2_pic_dicts() {\r

  \  create_pic_dicts(['d']);\r

  }"
test2_point_nomath: "function test2_point_nomath() {\r

  \  C = new CCanvas(dTable, {}, {}, gameloop_start, gameloop_stop);\r

  \  C.add();\r

  \  C.add({ x: -200, y: 100, color: 'pink', draw: draw_point });\r

  \  C.draw();\r

  \  C.play();\r

  }"
test2_show_contacts: "function test2_show_contacts() {\r

  \  get_login();\r

  }"
test2_sit_around_table: "function test2_sit_around_table() {\r

  \  dTable = mBy('dTable');\r

  \  let r = getRect(dTable);\r

  \  let sz = 250;\r

  \  let pts = cCircle({ x: r.w / 2, y: r.h / 2 }, r.w - sz, 6, -90);\r

  \  for (const pt of pts) {\r

  \    console.log('pt', pt)\r

  \    mDiv(dTable, { round: true, x: pt.x - sz / 2, y: pt.y - sz / 2,
  position: 'absolute', w: sz, h: sz, bg: 'randdark' });\r

  \  }\r

  }"
test2_two_maps: "async function test2_two_maps() {\r

  \  let [cities, capitals] = await get_cities_and_capitals();\r

  \  let o = { center: cities.Paris.center, zoom: 7, id: 'map' };\r

  \  let m1 = create_map(jsCopy(o));\r

  \  copyKeys({ id: 'map2', preferCanvas: true }, o);\r

  \  let m2 = create_map(o);\r

  \  let a1 = create_agent(m1);\r

  \  let a2 = create_agent(m2);\r

  \  let f1 = x => x + rFloat(-.01, .05);\r

  \  let f2 = x => x + rGaussian(-.01, .05);\r

  \  run_for_seconds(2, () => { map_moveby(a2, f2, f2); map_moveby(a1, f1,
  f1); })\r

  }"
test2_waypointfallback: "function test2_waypointfallback() {\r

  \  var map = L.map('map');\r

  \  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r

  \    attribution: '© OpenStreetMap contributors'\r

  \  }).addTo(map);\r

  \  console.log('geo', Geo)\r

  \  let [p1, p2] = [Geo.places.tuerkenschanzpark, Geo.places.vegagasse];\r

  \  map.setView(p1, 16)\r

  \  M = L.Routing.control({\r

  \    waypoints: [\r

  \      L.latLng(p1[0], p1[1]),\r

  \      L.latLng(p2[0], p2[1])\r

  \    ],\r

  \    waypointNameFallback: function (latLng) {\r

  \      function zeroPad(n) {\r

  \        n = Math.round(n);\r

  \        return n < 10 ? '0' + n : n;\r

  \      }\r

  \      function sexagesimal(p, pos, neg) {\r

  \        var n = Math.abs(p),\r

  \          degs = Math.floor(n),\r

  \          mins = (n - degs) * 60,\r

  \          secs = (mins - Math.floor(mins)) * 60,\r

  \          frac = Math.round((secs - Math.floor(secs)) * 100);\r

  \        return (n >= 0 ? pos : neg) + degs + '°' +\r

  \          zeroPad(mins) + '\\'' +\r

  \          zeroPad(secs) + '.' + zeroPad(frac) + '\"';\r

  \      }\r

  \      return sexagesimal(latLng.lat, 'N', 'S') + ' ' +
  sexagesimal(latLng.lng, 'E', 'W');\r

  \    },\r

  \    routeWhileDragging: true\r

  \  }).addTo(map);\r

  }"
test20_aspect_ratio_image_card: "function test20_aspect_ratio_image_card() {\r

  \  let d = mDiv(dTable, { display: 'grid', place: 'center', h: '100%' });\r

  \  let dcard = mDiv(d, { w: '50%', display: 'flex', dir: 'column', padding:
  '1rem' }, null, null, 'blue');\r

  \  let dtitle = mTag('h1', 'Video Title', dcard);\r

  \  let dimg = mDiv(dcard, { aspectRatio: '16 / 9' }, null, null, 'green');\r

  \  let ddesc = mTag('p', 'Descriptive Text goes here', dcard);\r

  \  return d;\r

  }"
test20_imagePalette: "function test20_imagePalette(dTable) {\r

  \  let pal =
  colorPaletteFromUrl('../base/assets/images/happy/ocean1.jpg');\r

  \  let hslist = pal.map(x => colorHSL(x, true));\r

  \  let i = 0; hslist = hslist.map(x => ({ h: x.h, s: x.s, l: x.l, color:
  pal[i], ipal: i++ }))\r

  \  i = 0; let byhue = sortBy(hslist, 'h').map(x => ({ color: x.color, ipal:
  x.ipal, ihue: i++, h: x.h, s: x.s, l: x.l }));\r

  \  i = 0; let bylum = sortBy(byhue, 'l').map(x => ({ color: x.color, ilum:
  i++, ihue: x.ihue, h: x.h, s: x.s, l: x.l }));\r

  \  let dmax = 0, c1max, c2max;\r

  \  let dlist = [];\r

  \  for (let i = 0; i < bylum.length - 1; i++) {\r

  \    for (let j = i + 1; j < bylum.length; j++) {\r

  \      let [c1, c2] = [bylum[i], bylum[j]];\r

  \      let d = colorDistance1(c1, c2);\r

  \      dlist.push({ c1: c1, c2: c2, d: d });\r

  \      if (d > dmax) { dmax = d; c1max = c1; c2max = c2; }\r

  \    }\r

  \  }\r

  \  sortByDescending(dlist, 'd');\r

  \  let lums = [2, 9];\r

  \  let hues = [6, 7];\r

  \  dlist = dlist.filter(x => x.d >= 30 && (lums.includes(x.c1.ilum) ||
  hues.includes(x.c2.ihue)));\r

  \  console.log('===>result', dlist)\r

  \  let bestof = arrTake(dlist, 5);\r

  \  let crand = rChoose(bestof);\r

  \  mStyle(mBy('dAdmin'), { bg: crand.c2.color, fg: crand.c1.color });\r

  \  console.log('chosen:', crand.c1.color, crand.c2.color, crand.d);\r

  }"
test21_centering_container: "function test21_centering_container() {\r

  \  let d = mDiv(dTable, { bg: 'yellow', w: '100%', h: '100%' });
  mCenterCenter(d);\r

  \  let d1 = mDiv(d, { bg: 'red', 'place-content': 'center', w: '80%',
  display: 'grid', 'grid-template-columns': 'repeat(auto-fill, 100px)',
  'grid-gap': '1rem' });\r

  \  for (let i = 0; i < 14; i++) {\r

  \    mDiv(d1, { w: rNumber(50, 150), h: 100, bg: 'random', margin: 10 });\r

  \  }\r

  }"
test21_resizable: "function test21_resizable() {\r\n}"
test22_centering_container: "function test22_centering_container() {\r

  \  let d = mDiv(dTable, { bg: 'yellow', w: '100%', h: '100%', aitems:
  'center' }); mCenterCenter(d);\r

  \  for (let i = 0; i < 14; i++) {\r

  \    mDiv(d, { display: 'inline-block', w: rNumber(50, 150), h: rNumber(50,
  150), bg: 'random', margin: 10 });\r

  \  }\r

  }"
test3: function test3() { test1(); }
test3_3rows: "function test3_3rows() {\r

  \  var dMain = document.getElementById('dMain');\r

  \  let dHeader = mDiv(dMain, { bg: 'random' }, 'dHeader', 'header');\r

  \  let dOuter = mDiv(dMain, { bg: 'random', flex: '1 0 auto' }, 'dOuter',
  'outer');\r

  \  let dFooter = mDiv(dMain, { bg: 'random' }, 'dFooter', 'footer');\r

  \  mSize(dHeader, '100%', 50);\r

  }"
test3_add_cities_layer: "function test3_add_cities_layer(color) {\r

  \  let cities = rChoose(M.capitals, 20);\r

  \  for (const c of cities) map_add_city(M.cities[c]);\r

  }"
test3_ari_deck_2_hands: "function test3_ari_deck_2_hands(otree) {\r

  \  let deck = ui_make_random_deck(10);\r

  \  let hand1 = ui_make_random_hand(1);\r

  \  let hand2 = ui_make_random_hand(1);\r

  \  let d = iDiv(deck.topmost);\r

  \  top_card_to_hands_abwechselnd(deck, hand1, hand2);\r

  }"
test3_better_agent: "async function test3_better_agent() {\r

  \  M = create_map();\r

  \  console.log('M', M);\r

  \  let agent = new Agent(M, .0001, false);\r

  \  let c1 = create_button(M.map, 'hallo')\r

  \  let c2 = create_button(M.map, 'h2')\r

  \  let c3 = create_button(M.map, 'h3')\r

  \  console.log('buttons', c1, c2, c3)\r

  }"
test3_boa_havecode: "function test3_boa_havecode() {\r

  \  mAppear('dScreen', 100);\r

  \  if (FirstLoad) { FirstLoad = false; initialize_state(); }\r

  \  get_toolbar();\r

  \  onclick_location('boa');\r

  \  S.boa_authorization_code = '123456';\r

  \  boahavecode_start();\r

  }"
test3_cdf: "function test3_cdf() {\r

  \  y = cumulative_distribution(85, 115, 100, 15);\r

  \  y = cumulative_distribution(105, 115, 100, 15);\r

  \  return;\r

  \  console.log('y', y); return;\r

  \  for (let x = 0; x <= 150; x += 25) {\r

  \    let y = cdf0(x);\r

  \    console.log('x', x, 'y', y)\r

  \  }\r

  }"
test3_game_options: "function test3_game_options() {\r

  \  present_game_options();\r

  \  close_sidebar();\r

  }"
test3_letters: "async function test3_letters(l, n) {\r

  \  let text = await route_path_text(`../base/assets/words/${l}dict.txt`);\r

  \  let picdi = await
  route_path_yaml_dict(`../base/assets/words/${l}picdict.yaml`);\r

  \  let splitter = l == 'e' ? '\\r\\n' : '\\n';\r

  \  let words = text.split(splitter);\r

  \  let result = words.filter(x => x.length == n);\r

  \  let result2 = result.filter(x => x in picdi);\r

  \  return { all: result, pic: result2 };\r

  }"
test3_mapbounds: "function test3_mapbounds() {\r

  \  var map = L.map('map');\r

  \  map.setView(Geo.places.vegagasse, 16)\r

  \  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r

  \    attribution: '© OpenStreetMap contributors'\r

  \  }).addTo(map);\r

  \  let b = map.getBounds();\r

  \  console.log('b', b._southWest, b._northEast);\r

  \  let [p1, p2] = [[b._southWest.lat, b._southWest.lng], [b._northEast.lat,
  b._northEast.lng]];\r

  \  M = get_route_control(map, p1, p2);\r

  }"
test3_p5_perlin_2d: "function test3_p5_perlin_2d() {\r

  \  dTable = mBy('dTable'); mCenterFlex(dTable);\r

  \  let o = mCanvas(dTable, { w: 600, h: 400 }, {}, startloop, pauseloop,
  'cc');\r

  \  iAdd(o, {}, { draw: draw_perlin_xy });\r

  \  o.play();\r

  }"
test3_point_math: "function test3_point_math() {\r

  \  C = new CCanvas(dTable, {}, {}, gameloop_start, gameloop_stop, 'cc',
  null, true);\r

  \  C.add();\r

  \  C.add({ x: 50, y: 80, color: 'pink', draw: draw_point, update:
  update_move });\r

  \  C.add({ x: 50, y: -80, color: 'red', draw: draw_car, update: update_car,
  v: { a: 0, mag: 5 } });\r

  \  C.draw();\r

  \  C.play();\r

  }"
test3_show_tables: "function test3_show_tables() {\r

  \  phpPost({ app: 'easy' }, 'tables');\r

  }"
test3_sit_around_table: "function test3_sit_around_table(n = 4) {\r

  \  dTable = mBy('dTable');\r

  \  let r = getRect(dTable);\r

  \  let [w, h] = [r.w * .9, r.h * .9];\r

  \  let [offx, offy] = [r.w * .05, r.h * .05];\r

  \  let mindim = Math.min(w, h);\r

  \  let [szTable, szPlayer] = [mindim / 2, mindim / 4];\r

  \  let pTable = { x: offx + w / 2 - szTable / 2, y: offy + h / 2 - szTable /
  2 };\r

  \  let styles = { round: true, x: pTable.x, y: pTable.y, position:
  'absolute', w: szTable, h: szTable, classname: 'wood' };\r

  \  let d = mDiv(dTable, styles);\r

  \  let table = iAdd({ numplayers: n, styles: styles }, { div: d })\r

  \  let numPlayers = n;\r

  \  let sz = szPlayer;\r

  \  let pts = cCircle({ x: offx + w / 2, y: offy + h / 2 }, w - sz,
  numPlayers);\r

  \  console.log('pts', pts);\r

  \  let players = [];\r

  \  for (const pt of pts) {\r

  \    let [x, y] = [pt.x - sz / 2, pt.y - sz / 2];\r

  \    styles = { round: true, x: x, y: y, position: 'absolute', w: sz, h: sz,
  bg: colorFrom('randdark') };\r

  \    d = mDiv(dTable, styles);\r

  \    let player = iAdd({ styles: styles }, { div: d });\r

  \    players.push(player);\r

  \  }\r

  \  return [table, players];\r

  }"
test4: function test4() { test2(); }
test4_3rows: "function test4_3rows() {\r

  \  var dMain = document.getElementById('dMain');\r

  \  let dHeader = mDiv(dMain, { bg: 'random' }, 'dHeader', 'header');\r

  \  let dOuter = mDiv(dMain, { bg: 'random', flex: '1 0 auto', display:
  'flex', 'flex-flow': 'row wrap' });\r

  \  let dLeft = mDiv(dOuter, { bg: 'random', flex: '0 0 200px' }, 'dLeft',
  'left');\r

  \  let dMiddle = mDiv(dOuter, { bg: 'random', flex: '1 0 auto' }, 'dMiddle',
  'middle');\r

  \  let dRight = mDiv(dOuter, { bg: 'random', flex: '0 0 200px' }, 'dRight',
  'right');\r

  \  let dFooter = mDiv(dMain, { bg: 'random' }, 'dFooter', 'footer');\r

  \  mSize(dHeader, '100%', 50);\r

  }"
test4_ari_deck_2_fixed_size_hands: "function
  test4_ari_deck_2_fixed_size_hands(otree) {\r

  \  let deck = ui_make_random_deck(10);\r

  \  mLinebreak(dTable);\r

  \  let hand1 = ui_make_random_hand(1); mStyle(hand1.container, { w: '50%'
  });\r

  \  let hand2 = ui_make_random_hand(1); mStyle(hand2.container, { w: '50%'
  });\r

  \  let d = iDiv(deck.topmost);\r

  \  top_card_to_hands_abwechselnd(deck, hand1, hand2);\r

  }"
test4_boa_main: "function test4_boa_main() {\r

  \  mAppear('dScreen', 100);\r

  \  if (FirstLoad) { FirstLoad = false; initialize_state(); }\r

  \  get_toolbar();\r

  \  onclick_location('boa');\r

  \  S.boa_authorization_code = '123456';\r

  \  boamain_start();\r

  }"
test4_direct_login_onclick_user: "function test4_direct_login_onclick_user() {\r

  \  show_users();\r

  \  let uplayer = localStorage.getItem('uname');\r

  \  if (isdef(uplayer)) onclick_user(uplayer);\r

  }"
test4_get_waypoints: "function test4_get_waypoints(mymap, p1, p2) {\r

  \  var routeData = L.Routing.control({\r

  \    waypoints: points_to_waypoints(p1, p2),\r

  \    lineOptions: { styles: [{ color: '#006a4e', opacity: 1, weight: 5 }],
  },\r

  \    draggableWaypoints: false,\r

  \    createMarker: function () { return false; },\r

  \    show: false,\r

  \  }).addTo(mymap);\r

  \  var routeArray = new Array();\r

  \  routeArray = routeData.getWaypoints();\r

  \  console.log(routeArray);\r

  \  return routeData;\r

  \  L.motion.polyline([[52.501737, -2.119792], [52.501267, -2.114707],
  [52.500313, -2.110361], [52.499243, -2.108751], [52.498596, -2.105886],
  [52.498812, -2.104953], [52.498798, -2.102591]], {\r

  \    color: \"transparent\"\r

  \  }, {\r

  \    auto: true,\r

  \    duration: 30000,\r

  \    easing: L.Motion.Ease.easeInOutQuart\r

  \  }, {\r

  \    removeOnEnd: false,\r

  \    showMarker: true,\r

  \    icon: L.icon({ iconUrl: 'marker.png', iconSize: [32, 37] })\r

  \  }).addTo(mymap);\r

  }"
test4_intelli: "function test4_intelli() {\r

  \  dTable = dTable = mSection({ position: 'relative' }, 'dTable');
  mCenterFlex(dTable);\r

  \  let ta = mTextarea(10, 90, dTable, { padding: 20, position: 'relative'
  });\r

  \  setTimeout(() => ta.autofocus = true, 10);\r

  \  let buttons = mDiv(dTable, { w: '100%', align: 'right', maright: 4 });\r

  \  let st = { fz: 14 };\r

  \  maButton('RUN (ctl+Enter)', au_run, buttons, st);\r

  \  maButton('LINE (ctl+shft+Enter)', au_run_line, buttons, st);\r

  \  let tacon = mTextarea(3, 90, dTable, { matop: 4, padding: 20, position:
  'relative' });\r

  \  ta.focus();\r

  \  AU.popup = mDiv(dTable, { position: 'absolute', wmin: 100, hmin: 100,
  hmax: 600, overy: 'auto', bg: 'blue', fg: 'white' });\r

  \  hide(AU.popup)\r

  \  AU.fnames = get_keys(CODE.funcs); AU.fnames.sort();\r

  \  AU.list = [];\r

  \  AU.prefix = '';\r

  \  AU.selected = null;\r

  \  AU.n = -1;\r

  \  AU.ta = ta;\r

  \  AU.tacon = tacon;\r

  \  ta.onkeydown = ev => {\r

  \    let k = ev.key;\r

  \    if (k == 'Enter' && AU.selected) ev.preventDefault();\r

  \  }\r

  \  ta.onkeyup = ev => {\r

  \    let k = ev.key;\r

  \    let fnames = AU.fnames;\r

  \    let popup = AU.popup;\r

  \    if (k == 'Enter' && ev.ctrlKey) {\r

  \      au_reset();\r

  \      let code = ev.shiftKey ? getTextAreaCurrentLine(AU.ta) :
  AU.ta.value;\r

  \      runcode(code);\r

  \    } else if (k == ' ' || k == ')') {\r

  \      AU.previous = AU.prefix;\r

  \      if (isdef(AU.fnames[AU.previous])) {\r

  \        let w = AU.selected = AU.previous;\r

  \        AU.uebernommen = CODE.funcs[w];\r

  \        popup.innerHTML = AU.previous + '(' + AU.uebernommen.params +
  ')';\r

  \      } else {\r

  \        au_reset();\r

  \      }\r

  \    } else if (k == 'Enter' && AU.selected) {\r

  \      let w = AU.selected.innerHTML;\r

  \      let s = stringAfter(w, AU.prefix);\r

  \      AU.ta.value = AU.ta.value + s;\r

  \      AU.uebernommen = CODE.funcs[w];\r

  \      popup.innerHTML = w + '(' + AU.uebernommen.params + ')';\r

  \    } else if (k == 'Backspace' && AU.prefix.length > 1) {\r

  \      AU.prefix = AU.prefix.slice(0, -1);\r

  \      au_show_list();\r

  \    } else if (k == 'ArrowDown' && !isEmpty(AU.list)) {\r

  \      if (AU.n < AU.list.length - 1) AU.n++;\r

  \      let ch = popup.children;\r

  \      if (AU.selected) mStyle(AU.selected, { bg: 'blue' });\r

  \      AU.selected = ch[AU.n];\r

  \      mStyle(AU.selected, { bg: 'green' });\r

  \    } else if (k == 'ArrowUp' && !isEmpty(AU.list)) {\r

  \      if (AU.n > 0) AU.n--;\r

  \      let ch = popup.children;\r

  \      if (AU.selected) mStyle(AU.selected, { bg: 'blue' });\r

  \      AU.selected = ch[AU.n];\r

  \      mStyle(AU.selected, { bg: 'green' });\r

  \    } else if (isLetter(k) || k == '_') {\r

  \      if (isEmpty(AU.prefix)) AU.selectionEnd = AU.ta.selectionEnd;\r

  \      AU.prefix += k;\r

  \      au_show_list();\r

  \    } else if (k != 'Shift') {\r

  \      au_reset();\r

  \    }\r

  \  }\r

  }"
test4_load_games: "function test4_load_games() {\r\n}"
test4_multiple_wordlists: "async function test4_multiple_wordlists() {\r

  \  for (const l of ['e', 'd', 's', 'f']) {\r

  \    for (let i = 6; i < 15; i++) {\r

  \      let res = await test3_letters(l, i);\r

  \      let s = `${l} ${i} ${res.all.length} (davon: ${res.pic.length}
  ${Math.round((res.pic.length / res.all.length) * 100)}%)`;\r

  \      console.log('', s);\r

  \    }\r

  \    console.log('________');\r

  \  }\r

  }"
test4_range_math_GEHT_NICHT: "function test4_range_math_GEHT_NICHT() {\r

  \  C = new MathCanvas(dTable, {}, {}, gameloop_start, gameloop_stop, 'cc',
  10);\r

  \  let x = colorMix('yellow', 'red'); console.log('color', x)\r

  \  let p1 = C.point(5, 3, 'yellow');\r

  \  let p2 = C.point(25, 12, 'red');\r

  \  for (let i = 0.1; i < .9; i += .1) {\r

  \    let p3 = lerpoint(p1, p2, i);\r

  \    C.add(p3);\r

  \  }\r

  \  C.draw();\r

  }"
test4_save: "function test4_save() {\r

  \  let [table, players] = test3_sit_around_table(3);\r

  \  serialize_all();\r

  }"
test4_tools: "function test4_tools() {\r

  \  let map = create_map();\r

  \  console.log('map', map);\r

  \  let d = map._controlContainer;\r

  \  console.log('control container', d);\r

  \  dMap = mDiv(d, { position: 'absolute', top: 0, left: 50, w: '100%', h:
  '100%' });\r

  \  dMap.style.zIndex = 12000;\r

  \  dTop = mDiv(dMap, { hmargin: 10, padding: 10, cursor: 'pointer' }, null,
  null, 'top'); mFlexWrap(dTop);\r

  \  let b = mButton('hallo', dummy_reaction, dTop);\r

  \  b = mButton('download', () => downloadJson({ hallo: 4343 }, '__test'),
  dTop);\r

  \  let a = mLink(\"http://duckduckgo.com\", dTop, { color: 'dimgray' },
  null, 'ein link');\r

  \  a = mLink(\"javascript:void(0)\", dTop, { color: 'dimgray' }, null, 'ein
  link');\r

  \  a.onclick = dummy_reaction;\r

  \  b = mButton('Paris', () => map.setView(Geo.cities.Paris.center), dTop);\r

  \  b = mButton('London', () => map.flyTo(Geo.cities.London.center), dTop);\r

  \  let agent = new Agent(map, .0001, false);\r

  \  return;\r

  \  let x = create_toolbar(map); console.log('toolbar', x)\r

  \  let tb = x._container; console.log('toolbar', tb);\r

  \  mButton('click', () => console.log('clicked!'), tb, { cursor: 'pointer'
  })\r

  }"
test5: "function test5(map, p1, p2) {\r

  \  let control = M.control = test4_get_waypoints(map, p1, p2);\r

  \  M.coords = [];\r

  \  control.on('routeselected', function (e) {\r

  \    arrExtend(M.coords, e.route.coordinates);\r

  \    console.log('M', M)\r

  \  });\r

  }"
test5_33mitMenuButtons: "function test5_33mitMenuButtons() {\r

  \  let page = pageLayout33();\r

  \  let bMenuRight = stdMenuButton();\r

  \  mRight(page.dHeader, bMenuRight);\r

  \  let bMenuLeft = stdMenuButton();\r

  \  mLeft(page.dHeader, bMenuLeft);\r

  }"
test5_ari_anim_deal_market: "function test5_ari_anim_deal_market(otree) {\r

  \  let deck = ui_make_random_deck(50);\r

  \  let market = ui_make_random_market(1);\r

  \  mLinebreak(dTable);\r

  \  let hand1 = ui_make_random_hand(7); mStyle(hand1.container, { w: '50%'
  });\r

  \  let hand2 = ui_make_random_hand(7); mStyle(hand2.container, { w: '50%'
  });\r

  \  top_card_to_market(deck, market);\r

  }"
test5_bw_skin: "function test5_bw_skin() {\r

  \  mAppear('dScreen', 100);\r

  \  if (FirstLoad) { FirstLoad = false; initialize_state(); }\r

  \  get_toolbar();\r

  \  bw_widget_popup('skype');\r

  }"
test5_letters_upto: "async function test5_letters_upto(l, n) {\r

  \  let text = await route_path_text(`../base/assets/words/${l}dict.txt`);\r

  \  let picdi = await
  route_path_yaml_dict(`../base/assets/words/${l}picdict.yaml`);\r

  \  let splitter = l == 'e' ? '\\r\\n' : '\\n';\r

  \  let words = text.split(splitter);\r

  \  let result = words.filter(x => x.length >= 3 && x.length <= n);\r

  \  let result2 = result.filter(x => x in picdi);\r

  \  return { all: result, pic: result2 };\r

  }"
test5_line_GEHT_NICHT: "function test5_line_GEHT_NICHT() {\r

  \  C = new MathCanvas(dTable, {}, {}, gameloop_start, gameloop_stop, 'cc',
  10);\r

  \  let p1 = C.point(5, 3, 'yellow');\r

  \  let p2 = C.point(25, 12, 'red');\r

  \  for (let i = 0; i < 1; i += .01) {\r

  \    let p3 = lerpoint(p1, p2, i);\r

  \    C.add(p3);\r

  \  }\r

  \  C.draw();\r

  }"
test5_load: "function test5_load() {\r

  \  dTable = mDiv('dTable');\r

  \  load_all();\r

  }"
test5_prelim: function test5_prelim() { }
test5_showroute: "function test5_showroute() {\r

  \  let map = M.map = create_map();\r

  \  let agent = M.agent = new Agent(map, .0001, false);\r

  \  let tb = M.toolbar = create_toolbar(map);\r

  \  let pts = [Geo.places.tuerkenschanzpark, Geo.places.vegagasse]\r

  \  let color = 'green';\r

  \  let callback = e => fit_points(map, pts);\r

  \  let control = M.router = show_route(map, pts, color, callback);\r

  }"
test52CardsOther: "function test52CardsOther() {\r

  \  keys = ['spades', 'hearts', 'clubs', 'diamonds'];\r

  \  for (let i = 0; i < 4; i++) {\r

  \    let k = keys[i % keys.length];\r

  \    console.log('k', k);\r

  \    let card = Karte.random(k, 110);\r

  \    mAppend(dTable, iDiv(card));\r

  \  }\r

  }"
test6: "function test6(map, p1, p2) {\r

  \  let control = M.control = L.Routing.control({\r

  \    waypoints: points_to_waypoints(p1, p2),\r

  \    lineOptions: { styles: [{ color: '#006a4e', opacity: 1, weight: 5 }],
  },\r

  \    draggableWaypoints: false,\r

  \    createMarker: function () { return false; },\r

  \    show: false,\r

  \  }).addTo(map);\r

  \  M.coords = [];\r

  \  control.on('routesfound', function (e) {\r

  \    M.routes = e.routes;\r

  \    M.num_requests = e.target._requestCount;\r

  \    M.coords = arrExtend(M.coords, e.routes[0].coordinates);\r

  \    console.log('M', M)\r

  \  });\r

  }"
test6_33mitMenuButtons: "function test6_33mitMenuButtons() {\r

  \  let page = pageLayout33();\r

  \  let bMenuRight = stdMenuButton();\r

  \  mRight(page.dHeader, bMenuRight);\r

  \  let bMenuLeft = stdMenuButton();\r

  \  mLeft(page.dHeader, bMenuLeft);\r

  \  dLeft.style.flex = 'unset';//'1 1 200px';\r

  \  bMenuLeft.onclick = () => {\r

  \    mStyle(mBy('dLeft'), { wmin: 0, w: 0 });\r

  \  }\r

  }"
test6_ari_anim_auto_deal: "function test6_ari_anim_auto_deal(otree) {\r

  \  let deck = ui_make_random_deck(50);\r

  \  let market = ui_make_random_market(0);\r

  \  mLinebreak(dTable);\r

  \  let hand1 = ui_make_random_hand(7); mStyle(hand1.container, { w: '50%'
  });\r

  \  let hand2 = ui_make_random_hand(7); mStyle(hand2.container, { w: '50%'
  });\r

  \  top_card_to_market(deck, market);\r

  }"
test6_click: "function test6_click() {\r

  \  let map = M.map = create_map({ zoom: 16 });\r

  \  add_click_set_agent();\r

  \  let tb = M.toolbar = create_toolbar(map);\r

  \  mButton('route', () => {\r

  \    map.off('click');\r

  \    let pts = M.agents.map(x => x.pos);\r

  \    let color = 'red';\r

  \    let callback = e => fit_points(map, pts);\r

  \    M.router = show_route(map, pts, color, callback);\r

  \  }, tb);\r

  \  mButton('clear', () => { clear_router(); clear_agents();
  add_click_set_agent(); }, tb);\r

  }"
test6_func_GEHT_NICHT: "function test6_func_GEHT_NICHT() {\r

  \  C = new MathCanvas(dTable, {}, {}, gameloop_start, gameloop_stop, 'cc',
  10);\r

  \  let f = x => Math.sqrt(x), d = .01;\r

  \  for (let x = C.minx; x < C.maxx; x += d) {\r

  \    let pt = C.point(x, f(x), 'yellow');\r

  \    C.add(pt);\r

  \  }\r

  \  C.draw();\r

  }"
test6_generate_statement: "function test6_generate_statement() {\r

  \  mAppear('dScreen', 100);\r

  \  if (FirstLoad) { FirstLoad = false; initialize_state(); }\r

  \  get_toolbar();\r

  \  generate_statement();\r

  }"
test6_init: "function test6_init() {\r

  \  let item = { styles: { bg: 'orange', w: 30, h: 30, round: true } };\r

  \  iInit(c1, item);\r

  \  iInit(c2, item);\r

  \  iInit(dTable, item);\r

  \  start_loop();\r

  \  setTimeout(() => item.styles.bg = BLUE, 2000);\r

  }"
test6_multiple_wordlists: "async function test6_multiple_wordlists() {\r

  \  for (const l of ['e', 'd', 's', 'f']) {\r

  \    for (let i = 3; i < 15; i++) {\r

  \      let res = await test5_letters_upto(l, i);\r

  \      let s = `${l} ${i} ${res.all.length} (davon: ${res.pic.length}
  ${Math.round((res.pic.length / res.all.length) * 100)}%)`;\r

  \      console.log('', s);\r

  \    }\r

  \    console.log('________');\r

  \  }\r

  }"
test7: "function test7() {\r

  \  var dMain = document.getElementById('dMain');\r

  \  let dHeader = mDiv(dMain, { bg: 'random' }, 'dHeader', 'header');\r

  \  let [dLeft, dMiddle, dRight] = std3fold(dMain);\r

  \  let dFooter = mDiv(dMain, { bg: 'random' }, 'dFooter', 'footer');\r

  \  let bMenuLeft = stdMenuButton();\r

  \  mLeft(dHeader, bMenuLeft);\r

  \  stdSidebarController(bMenuLeft, 'dLeft');\r

  \  let bMenuRight = stdMenuButton();\r

  \  mRight(dHeader, bMenuRight);\r

  \  stdSidebarController(bMenuRight, 'dRight');\r

  }"
test7_add_hand_card: "function test7_add_hand_card() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  let card = prompt('enter card (eg. 8H');\r

  \  fen.players[uplayer].hand.push(card + 'n');\r

  \  take_turn_fen();\r

  }"
test7_ari_anim_auto_deal: "function test7_ari_anim_auto_deal(otree) {\r

  \  let deck = ui_make_random_deck(50);\r

  \  let market = ui_make_random_market(0);\r

  \  mLinebreak(dTable);\r

  \  let hand1 = ui_make_random_hand(7); mStyle(hand1.container, { w: '50%'
  });\r

  \  let hand2 = ui_make_random_hand(7); mStyle(hand2.container, { w: '50%'
  });\r

  \  DA.qanim = [\r

  \    [anim_from_deck_to_marketX, [deck, market]],\r

  \    [anim_from_deck_to_marketX, [deck, market]],\r

  \  ];\r

  \  anim_from_deck_to_marketX(deck, market);\r

  }"
test7_card: "function test7_card() {\r

  \  dTable = mBy('dTable'); mCenterFlex(dTable);\r

  \  let x = ui_type_hand(['3Hn', '4Hn', '4Hl'], dTable); console.log('hand',
  x);\r

  \  iReg(x);\r

  \  let c = ari_get_card('QDn', 500); mAppend(dTable, iDiv(c));\r

  \  animatedTitle();\r

  }"
test7_display_dims_on_moveend: "function test7_display_dims_on_moveend() {\r

  \  let map = M.map = create_map({ zoom: 16 });\r

  \  map.on('moveend', function (e) { calc_map_dims(); console.log(\"dims\",
  M.dims); });\r

  \  let city = rChoose(M.capitals);\r

  \  console.log('city has been chosen:', city);\r

  \  map.flyTo(Geo.cities[city].center);\r

  }"
test7_function: "function test7_function() {\r

  \  C = new CCanvas(dTable, {}, {}, gameloop_start, gameloop_stop, 'cc');\r

  \  let ctx = C.cx;\r

  \  let canvas = C.cv;\r

  \  let h = canvas.height;\r

  \  let w = canvas.width;\r

  \  let cw = w / 2;\r

  \  let ch = h / 2;\r

  \  let subStepCount = 10;\r

  \  let scale = 10;\r

  \  function plot(func, col, lineWidth) {\r

  \    let invScale = 1 / scale;\r

  \    let top = ch * invScale;\r

  \    let bottom = -ch * invScale;\r

  \    let subStep = invScale / subStepCount;\r

  \    let x, y, yy, xx, subX;\r

  \    let start = (-cw - 1) * invScale;\r

  \    let end = (cw + 1) * invScale;\r

  \    ctx.strokeStyle = col;\r

  \    ctx.lineWidth = lineWidth * invScale;\r

  \    ctx.beginPath();\r

  \    for (x = start; x < end; x += invScale) {\r

  \      for (subX = 0; subX < invScale; subX += subStep) {\r

  \        y = func(x + subX);\r

  \        if (yy !== undefined) {\r

  \          if (y > top || y < bottom) {\r

  \            if (yy < top && yy > bottom) {\r

  \              ctx.lineTo(x + subX, y);\r

  \            }\r

  \          } else {\r

  \            if (yy > top || yy < bottom) {\r

  \              ctx.moveTo(xx, yy);\r

  \            }\r

  \            if (subX === 0) {\r

  \              if (y > bottom && y < top) {\r

  \                if (Math.abs(yy - y) > (top - bottom) * (1 / 3)) {\r

  \                  ctx.moveTo(x, y);\r

  \                } else {\r

  \                  ctx.lineTo(x, y);\r

  \                }\r

  \              }\r

  \            }\r

  \          }\r

  \        } else {\r

  \          if (subX === 0) {\r

  \            ctx.moveTo(x, y);\r

  \          }\r

  \        }\r

  \        yy = y;\r

  \        xx = x + subX;\r

  \      }\r

  \    }\r

  \    ctx.stroke();\r

  \  }\r

  \  ctx.setTransform(scale, 0, 0, -scale, cw, ch);\r

  \  plot(x => 0, 'white', 2);\r

  \  plot(x => 5 * Math.sin(x), 'white', 2);\r

  \  plot(x => 5 * Math.sin(x), 'white', 2);\r

  }"
test7_letters_200from: "async function test7_letters_200from(l, n) {\r

  \  let text = await route_path_text(`../base/assets/words/${l}dict.txt`);\r

  \  let picdi = await
  route_path_yaml_dict(`../base/assets/words/${l}picdict.yaml`);\r

  \  let splitter = l == 'e' ? '\\r\\n' : '\\n';\r

  \  let words = text.split(splitter);\r

  \  let result = words.filter(x => x.length >= n);\r

  \  let result2 = result.filter(x => x in picdi);\r

  \  result2.sort((a, b) => a.length - b.length);\r

  \  result3 = arrTake(result2, 200);\r

  \  return { all: result, pic: result2, sel: result3 };\r

  }"
test7_uploadfile: "function test7_uploadfile() {\r

  \  let o = { filename: 'ex', data: { text: 'jajajaaber geh jaaaa', id: 78912
  } };\r

  \  route_post_json('http://localhost:3000/post/json', o, response => {\r

  \    console.log(JSON.stringify(response))\r

  \  });\r

  }"
test8: "function test8() {\r

  \  var dMain = document.getElementById('dMain');\r

  \  let dHeader = mDiv(dMain, { bg: 'random' }, 'dHeader', 'header');\r

  \  let [dLeft, dMiddle] = std2fold(dMain);\r

  \  let dFooter = mDiv(dMain, { bg: 'random' }, 'dFooter', 'footer');\r

  \  let bMenuLeft = stdMenuButton();\r

  \  mLeft(dHeader, bMenuLeft);\r

  \  stdSidebarController(bMenuLeft, 'dLeft');\r

  }"
test8_function: "function test8_function() {\r

  \  C = new CCanvas(dTable, {}, {}, gameloop_start, gameloop_stop, 'tl');\r

  \  let canvas = C.cv;\r

  \  if (null == canvas || !canvas.getContext) return;\r

  \  var axes = {}, ctx = canvas.getContext(\"2d\");\r

  \  axes.x0 = .5 + .5 * canvas.width;\r

  \  axes.y0 = .5 + .5 * canvas.height;\r

  \  axes.scale = 40;\r

  \  axes.doNegativeX = true;\r

  \  console.log('axes', axes)\r

  \  showAxes(ctx, axes);\r

  \  funGraph(ctx, axes, fun1, \"rgb(11,153,11)\", 1);\r

  \  funGraph(ctx, axes, fun2, \"rgb(66,44,255)\", 2);\r

  }"
test8_load_googlemap_in_iframe: "function test8_load_googlemap_in_iframe() {\r

  \  var iDiv = document.createElement('iframe');\r

  \  iDiv.id = 'iframe1';\r

  \  mStyle(iDiv, { w: '100%', h: '100%' })\r

  \  document.getElementById(\"map\").appendChild(iDiv);\r

  \  iDiv.src = 'https://maps.google.com/maps?q=48.2,16.3&output=embed';\r

  \  // iDiv.src =
  'https://maps.google.com/maps?q=48.2,16.3&hl=fa;z=5&ie=UTF8&output=embed&hl=e\
  n';\r

  }"
test8_mimi_hand_card_0_hover: "function test8_mimi_hand_card_0_hover() {\r

  \  let hand = G.mimi.hand.items;\r

  \  let card = hand[0];\r

  \  mClass(iDiv(card), 'hoverScale');\r

  }"
test8_multiple_wordlists: "async function test8_multiple_wordlists() {\r

  \  for (const l of ['e', 'd', 's', 'f']) {\r

  \    for (let i = 3; i < 15; i++) {\r

  \      let res = await test7_letters_200from(l, i);\r

  \      let s = `${l} >=${i} ${res.all.length} (davon: ${res.pic.length}
  ${Math.round((res.pic.length / res.all.length) * 100)}%)`;\r

  \      console.log('', s);\r

  \      console.log('result', res.sel)\r

  \    }\r

  \    console.log('________');\r

  \  }\r

  }"
test8_simple_intellisense: "function test8_simple_intellisense() {\r

  \  dTable = mBy('dTable');\r

  \  fiddleInit();\r

  }"
test9: "function test9() {\r

  \  var dMain = document.getElementById('dMain');\r

  \  let [dHeaderLeft, dTitle, dHeaderRight] = std3title(dMain,
  'Aristocracy');\r

  \  let [dLeft, dMiddle] = std2fold(dMain);\r

  \  let dFooter = mDiv(dMain, { bg: 'random' }, 'dFooter', 'footer');\r

  \  let bMenuLeft = stdMenuButton(dHeaderLeft);\r

  \  stdSidebarController(bMenuLeft, 'dLeft');\r

  }"
test9_dbSave: function test9_dbSave() { DB.appdata.simple = [1, 2, 3, 4, 5]; }
test9_function: "function test9_function() {\r

  \  C = new CCanvas(dTable, {}, {}, gameloop_start, gameloop_stop, 'tl');\r

  \  let canvas = C.cv;\r

  \  let axes = {}, ctx = canvas.getContext(\"2d\");\r

  \  axes.x0 = .5 + .5 * canvas.width;\r

  \  axes.y0 = .5 + .5 * canvas.height;\r

  \  axes.scale = 40;\r

  \  axes.doNegativeX = true;\r

  \  C.add({ astep: .1, a: 0, bstep: .1, b: 0, func: x => Math.sin(x), axes:
  axes, update: geniales_sin_ease });\r

  }"
test9_google: "function test9_google() {\r

  \  mBy('dTable').innerHTML = `\r

  \  <iframe class='flat' id=\"gmap\"
  src=\"http://maps.google.com/maps?z=15&t=m&q=loc:48.25+16.3&output=embed\"
  width=\"100%\" height=\"${window.innerWidth}\"></iframe>  \r

  \  `;\r

  \  let x = document.getElementById('gmap');\r

  \  console.log('x', x);\r

  \  mStyle(x, { bg: 'blue' });\r

  }"
test9_just_1_card: "function test9_just_1_card() {\r

  \  let dTable = mBy('dTable')\r

  \  clearElement(dTable);\r

  \  let card = ari_get_card('QSn', 200);\r

  \  mAppend(dTable, iDiv(card));\r

  \  return card;\r

  }"
test9_only_syms: "async function test9_only_syms(l) {\r

  \  let text = await route_path_text(`../base/assets/words/${l}dict.txt`);\r

  \  let picdi = await
  route_path_yaml_dict(`../base/assets/words/${l}picdict.yaml`);\r

  \  let syms = await route_path_yaml_dict(`../base/assets/allSyms.yaml`);\r

  \  let keys = Object.keys(syms);\r

  \  let lang = l.toUpperCase();\r

  \  let res = keys.filter(x => isdef(syms[x][lang]) &&
  nundef(picdi[syms[x][lang].toLowerCase()]));\r

  \  console.log('only syms: lang', l, res.map(x => syms[x][lang]));\r

  }"
test98: "function test98() {\r

  \  let area = mBy(table);\r

  }"
test99: "function test99() {\r

  \  console.log('ah');\r

  \  let area = mBy('board'); mPosRel(area);\r

  \  let olist = getOlist();\r

  \  let size = 50, gap = 10;\r

  \  let uis = getUis(olist, colorLabelDiv(size));\r

  \  let container = mDivPosAbs(100, 100, area);\r

  \  let [w, h] = layoutRow(uis, container, size, size, gap);\r

  \  mStyle(container, { width: w, height: h, 'background-color': 'white',
  'border-radius': gap });\r

  \  colorLabelRow(o)\r

  }"
testAblauf00: "async function testAblauf00(defs, spec, sdata0) {\r

  \  await testEngine.init(defs, sdata0, TEST_SERIES);\r

  \  let [sp, defaults, sdata] = [testEngine.spec, testEngine.defs,
  testEngine.sdata];\r

  \  T = R = new RSG(sp, defaults);\r

  \  R.initialChannels = [];\r

  \  ensureRtree(R);\r

  \  R.baseArea = 'table';\r

  \  createStaticUi(R.baseArea, R);\r

  \  for (const oid in sdata) { R.addObject(oid, sdata[oid]);
  R.addRForObject(oid); }\r

  \  for (const oid in sdata) {\r

  \    let o = sdata[oid];\r

  \    if (isdef(o.loc)) { continue; }\r

  \    let topUids;\r

  \    for (const key of R.getR(oid)) {\r

  \      let specNode = R.getSpec(key);\r

  \      if (o.loc && nundef(R.Locations[key]) && nundef(specNode._ref)) {\r

  \        topUids = addOidByLocProperty(oid, key, R);\r

  \      } else if (isdef(R.Locations[key])) {\r

  \        topUids = addOidByParentKeyLocation(oid, key, R);\r

  \      }\r

  \      if (isEmpty(topUids)) { continue; }\r

  \      for (const top of topUids) {\r

  \        let uiParent = R.uiNodes[top.uidParent];\r

  \        let rParent = R.rNodes[top.uidParent];\r

  \        if (isdef(uiParent)) {\r

  \          uiParent.adirty = true;\r

  \          uiParent.children = rParent.children.map(x => x);\r

  \        }\r

  \        recUi(R.rNodes[top.uid], R, top.uidParent, oid, key);\r

  \      }\r

  \    }\r

  \  }\r

  \  sieveLocOids(R);\r

  \  recAdjustDirtyContainers(R.tree.uid, R, true);\r

  \  updateOutput(R);\r

  \  testEngine.verify(R);\r

  }"
testAblauf01: "async function testAblauf01(defs, spec, sdata0) {\r

  \  await testEngine.init(defs, sdata0, TEST_SERIES);\r

  \  let [sp, defaults, sdata] = [testEngine.spec, testEngine.defs,
  testEngine.sdata];\r

  \  T = R = new RSG(sp, defaults);\r

  \  R.initialChannels = [];\r

  \  ensureRtree(R);\r

  \  R.baseArea = 'table';\r

  \  createStaticUi(R.baseArea, R);\r

  \  for (const oid in sdata) { R.addObject(oid, sdata[oid]);
  R.addRForObject(oid); }\r

  \  for (const oid in sdata) {\r

  \    let o = sdata[oid];\r

  \    if (isdef(o.loc)) { continue; }\r

  \    let topUids;\r

  \    for (const key of R.getR(oid)) {\r

  \      let parents = R.Locations[key];\r

  \      if (nundef(parents)) continue;\r

  \      topUids = [];\r

  \      for (const uidParent of parents) {\r

  \        if (parentHasThisChildAlready(uidParent, oid)) continue;\r

  \        let n1 = instantOidKey(oid, key, uidParent, R);\r

  \        topUids.push({ uid: n1.uid, uidParent: uidParent });\r

  \      }\r

  \      if (isEmpty(topUids)) { continue; }\r

  \      for (const top of topUids) {\r

  \        let uiParent = R.uiNodes[top.uidParent];\r

  \        let rParent = R.rNodes[top.uidParent];\r

  \        if (isdef(uiParent)) {\r

  \          uiParent.adirty = true;\r

  \          uiParent.children = rParent.children.map(x => x);\r

  \        }\r

  \        recUi(R.rNodes[top.uid], R, top.uidParent, oid, key);\r

  \      }\r

  \    }\r

  \  }\r

  \  recAdjustDirtyContainers(R.tree.uid, R, true);\r

  \  updateOutput(R);\r

  \  testEngine.verify(R);\r

  }"
testAblauf02: "async function testAblauf02(defs, spec, sdata0) {\r

  \  await testEngine.init(defs, sdata0, TEST_SERIES);\r

  \  let [sp, defaults, sdata] = [testEngine.spec, testEngine.defs,
  testEngine.sdata];\r

  \  T = R = new RSG(sp, defaults);\r

  \  R.initialChannels = [];\r

  \  ensureRtree(R);\r

  \  R.baseArea = 'table';\r

  \  createStaticUi(R.baseArea, R);\r

  \  for (const oid in sdata) { R.addObject(oid, sdata[oid]);
  R.addRForObject(oid); }\r

  \  for (const oid in sdata) {\r

  \    let o = sdata[oid];\r

  \    if (isdef(o.loc)) { continue; }\r

  \    let topUids;\r

  \    for (const key of R.getR(oid)) {\r

  \      let parents = R.Locations[key];\r

  \      if (nundef(parents)) continue;\r

  \      topUids = [];\r

  \      for (const uidParent of parents) {\r

  \        if (parentHasThisChildAlready(uidParent, oid)) continue;\r

  \        let rtreeParent = R.rNodes[uidParent];\r

  \        if (nundef(rtreeParent.children)) { rtreeParent.children = []; }\r

  \        let n1 = recTree(R.lastSpec[key], rtreeParent, R, oid, key);\r

  \        R.rNodes[n1.uid] = n1;\r

  \        rtreeParent.children.push(n1.uid);\r

  \        if (rtreeParent.children.length == 2 && rtreeParent.type ==
  'invisible' && lookup(rtreeParent, ['params', 'bg'])) {\r

  \          let uiParent = R.uiNodes[rtreeParent.uid];\r

  \          if (isdef(uiParent)) {\r

  \            rtreeParent.type = uiParent.type = 'panel';\r

  \            decodeParams(uiParent, R, {});\r

  \            uiParent.adirty = true;\r

  \            applyCssStyles(uiParent.ui, uiParent.cssParams);\r

  \          }\r

  \        }\r

  \        topUids.push({ uid: n1.uid, uidParent: uidParent });\r

  \      }\r

  \      if (isEmpty(topUids)) { continue; }\r

  \      for (const top of topUids) {\r

  \        let uiParent = R.uiNodes[top.uidParent];\r

  \        let rParent = R.rNodes[top.uidParent];\r

  \        if (isdef(uiParent)) {\r

  \          uiParent.adirty = true;\r

  \          uiParent.children = rParent.children.map(x => x);\r

  \        }\r

  \        recUi(R.rNodes[top.uid], R, top.uidParent, oid, key);\r

  \      }\r

  \    }\r

  \  }\r

  \  recAdjustDirtyContainers(R.tree.uid, R, true);\r

  \  updateOutput(R);\r

  \  testEngine.verify(R);\r

  }"
testActivate: "function testActivate(R) {\r

  \  console.log('testActivate', R)\r

  \  activateUis(R);\r

  }"
testAdd10Cards: "function testAdd10Cards() {\r

  \  let uilist = [], ch;\r

  \  for (let i = 0; i < 10; i++) {\r

  \    if (coin()) {\r

  \      let card = Card52.getItem();\r

  \      ch = iDiv(card);\r

  \      mAppend(dTable, ch);\r

  \    } else {\r

  \      ch = mDiv(dTable, { w: 76, h: 110, bg: 'random' });\r

  \      mClass(ch, 'card');\r

  \    }\r

  \    uilist.push(ch);\r

  \  }\r

  }"
testAddBoard: "function testAddBoard(R) {\r

  \  R.initRound();\r

  \  reAddServerObject('board');\r

  }"
testAddInfluence: "function testAddInfluence(mapController, gObjects) {\r

  \  let data = {};\r

  \  addIf_dep(\"map\", execOptions.activatedTests);\r

  \  data.created = {\r

  \    \"507565\": {\r

  \      value: 1,\r

  \      nation: \"Canada\",\r

  \      faction: \"Axis\",\r

  \      obj_type: \"influence\",\r

  \      visible: {\r

  \        xset: [\"Axis\", \"USSR\", \"West\"]\r

  \      },\r

  \      _id: 507565\r

  \    },\r

  \    \"531772\": {\r

  \      value: 2,\r

  \      nation: \"Ireland\",\r

  \      faction: \"West\",\r

  \      obj_type: \"influence\",\r

  \      visible: {\r

  \        xset: [\"Axis\", \"USSR\", \"West\"]\r

  \      },\r

  \      _id: 531772\r

  \    },\r

  \    \"531773\": {\r

  \      value: 3,\r

  \      nation: \"Portugal\",\r

  \      faction: \"USSR\",\r

  \      obj_type: \"influence\",\r

  \      visible: {\r

  \        xset: [\"Axis\", \"USSR\", \"West\"]\r

  \      },\r

  \      _id: 531773\r

  \    },\r

  \    \"531774\": {\r

  \      value: 2,\r

  \      nation: \"Norway\",\r

  \      faction: \"Axis\",\r

  \      obj_type: \"influence\",\r

  \      visible: {\r

  \        xset: [\"Axis\", \"USSR\", \"West\"]\r

  \      },\r

  \      _id: 531774\r

  \    },\r

  \    \"531775\": {\r

  \      value: 4,\r

  \      nation: \"Latin_America\",\r

  \      faction: \"Axis\",\r

  \      obj_type: \"influence\",\r

  \      visible: {\r

  \        xset: [\"Axis\", \"USSR\", \"West\"]\r

  \      },\r

  \      _id: 531775\r

  \    }\r

  \  };\r

  \  mapController.update(data, gObjects);\r

  }"
testAddLocObject: "function testAddLocObject(R) {\r

  \  R.initRound();\r

  \  let oidLoc = getRandomExistingObjectWithRep(R);\r

  \  let oid = getUID('o');\r

  \  let o = { name: 'felix' + oid, loc: oidLoc };\r

  \  addServerObject(oid, o, R);\r

  }"
testAddObject: "function testAddObject(R) {\r

  \  R.initRound();\r

  \  let oid = getUID('o');\r

  \  let o = { obj_type: 'card' };\r

  \  o.short_name = chooseRandom(['K', 'Q', 'J', 'A', 2, 3, 4, 5, 6, 7, 8]);\r

  \  addServerObject(oid, o, R);\r

  }"
testAddOidKey: "function testAddOidKey(R) {\r

  \  console.log(R.instantiable)\r

  \  let n = lastCond(R.instantiable, x => !lookup(R.rNodesOidKey, [x.oid,
  x.key]));\r

  \  if (!n) {\r

  \    console.log('all nodes are instantiated!!!');\r

  \    return;\r

  \  }\r

  \  let [oid, key] = [n.oid, n.key];\r

  \  let o = R.getO(oid);\r

  \  if (!o) {\r

  \    console.log('no object with oid', oid, 'found!!!');\r

  \    return;\r

  \  }\r

  \  if (o.loc) addOidByLocProperty(oid, key, R); else
  addOidByParentKeyLocation(oid, key, R);\r

  \  updateOutput(R);\r

  }"
testAndSave: "function testAndSave() {\r

  \  sendRoute('/loadYML/icons', d => {\r

  \    console.log(d);\r

  \    let dictFont = JSON.parse(d);\r

  \    console.log(dictFont);\r

  \    let newDictFont = {};\r

  \    for (const key in dictFont) {\r

  \      newDictFont[key] = dictFont[key].unicode;\r

  \    }\r

  \    let json_str = JSON.stringify(newDictFont);\r

  \    saveFile(\"yourfilename.json\", \"data:application/json\", new
  Blob([json_str], { type: \"\" }));\r

  \    console.log('DONE!')\r

  \  })\r

  }"
testAndSave2: "function testAndSave2() {\r

  \  let newDictFont = {};\r

  \  for (const key in faIcons) {\r

  \    newDictFont[key] = faIcons[key][3];\r

  \  }\r

  \  let json_str = JSON.stringify(newDictFont);\r

  \  saveFile(\"yourfilename.json\", \"data:application/json\", new
  Blob([json_str], { type: \"\" }));\r

  \  console.log('DONE!')\r

  }"
testanim0: "function testanim0() {\r

  \  let [fen, phase, stage, deck, market] = [Z.fen, Z.phase, Z.stage, Z.deck,
  Z.market];\r

  \  let ms = 400;\r

  \  let item = deck.topmost;\r

  \  mAnimate(iDiv(item), 'transform', [`scale(1,1)`, `scale(0,1)`],\r

  \    () => {\r

  \      if (item.faceUp) face_down(item); else face_up(item);\r

  \      mAnimate(iDiv(item), 'transform', [`scale(0,1)`, `scale(1,1)`],
  null,\r

  \        ms / 2, 'ease-in', 0, 'both');\r

  \    }, ms / 2, 'ease-out', 100, 'both');\r

  }"
testanim1: "function testanim1() {\r

  \  let [fen, phase, deck, market] = [Z.fen, Z.phase, Z.deck, Z.market];\r

  \  DA.qanim = [];\r

  \  let n_market = phase == 'jack' ? 3 : 2;\r

  \  fen.stage = Z.stage = phase == 'jack' ? 12 : phase == 'queen' ? 11 : 4;\r

  \  for (let i = 0; i < n_market; i++) {\r

  \    DA.qanim = DA.qanim.concat([\r

  \      [qanim_flip_topmost, [deck]],\r

  \      [qanim_move_topmost, [deck, market]],\r

  \      [q_move_topmost, [deck, market]],\r

  \    ]);\r

  \  }\r

  \  DA.qanim.push([q_mirror_fen, ['deck', 'market']]);\r

  \  DA.qanim.push([ari_pre_action, []]);\r

  \  qanim();\r

  }"
testBirdCards: "function testBirdCards() {\r

  \  let keys = SymKeys.filter(x => Syms[x].family != 'emoNoto');\r

  \  console.log('groups', ByGroupSubgroup);\r

  \  console.log('keySets', KeySets);\r

  \  keys = KeySets['animal-bird'];\r

  \  for (let i = 0; i < 40; i++) {\r

  \    let k = chooseRandom(keys);\r

  \    console.log('k', k);\r

  \    let card = Karte.get(k, 300);\r

  \    mAppend(dTable, iDiv(card));\r

  \  }\r

  }"
testbuttons_off: "function testbuttons_off() {\r

  \  let buttons = arrChildren(mBy('dTestButtons'));\r

  \  for (const b of arrFromIndex(buttons, 1)) {\r

  \    mClass(b, 'disabled');\r

  \    mClassRemove(b, 'enabled');\r

  \  }\r

  \  mBy('b_delete_table').innerHTML = 'delete most recent table';\r

  }"
testbuttons_on: "function testbuttons_on() {\r

  \  let buttons = arrChildren(mBy('dTestButtons'));\r

  \  for (const b of arrFromIndex(buttons, 1)) {\r

  \    mClassRemove(b, 'disabled');\r

  \    mClass(b, 'enabled');\r

  \  }\r

  \  mBy('b_delete_table').innerHTML = 'delete current table';\r

  }"
testCard: "async function testCard() {\r

  \  let sdata = genServerDataCards();\r

  \  console.log('sdata', sdata)\r

  \  let spec = {\r

  \    ROOT: { cond: 'all', data: '.short_name' }\r

  \  };\r

  \  await rParse('direct', { defs: DEFS, spec: spec, sdata: sdata });\r

  \  mBy('message').innerHTML = '(direct) ' + getFunctionCallerName();\r

  }"
testCard52Cards: "function testCard52Cards() {\r

  \  for (let i = 0; i < 20; i++) {\r

  \    let card = Card52.random();\r

  \    mAppend(dTable, iDiv(card));\r

  \  }\r

  }"
testCardContent0: "function testCardContent0(card) {\r

  \  let dCard = iDiv(card);\r

  \  mRows(dCard, spotItPattern(5, 2), { sz: Card.sz / 6, fg: 'random',
  hmargin: 8, vmargin: 4 }, { 'justify-content': 'center' }, {
  'justify-content': 'center' }); return;\r

  \  mRows(dCard, spotItPattern(5, 2), { sz: Card.sz / 8, fg: 'random',
  margin: 6 }, { 'justify-content': 'center' }, { 'justify-content': 'center'
  }); return;\r

  \  mRows(dCard, cardPattern(13, 'spade suit'), { sz: Card.sz / 8, fg:
  'random', margin: 6 }, { 'justify-content': 'center' }, { 'justify-content':
  'center' }); return;\r

  \  mRows(dCard, [['frog', 'frog', 'frog'], ['frog', 'frog'], ['frog',
  'frog', 'frog']], { sz: Card.sz / 6, fg: 'random' }, { 'justify-content':
  'center' }, { 'justify-content': 'center' }); return;\r

  \  mRows(dCard, [['frog', 'frog', 'frog'], ['frog', 'frog'], ['frog',
  'frog', 'frog']], { sz: Card.sz / 5, fg: 'random' }, { 'justify-content':
  'center' }, { 'justify-content': 'space-evenly' }); return;\r

  \  mSym('frog', dCard, {}, 'cc'); return;\r

  \  mRows(iDiv(card), [[['frog', 3], 'HALLO', 'bee'], ['frog', 'HALLO',
  'bee'], ['frog', 'HALLO', 4, 'bee'], 'ja das ist es!']);\r

  \  return;\r

  \  let d = iDiv(dCard, { display: 'flex', dir: 'column', h: '100%',
  'justify-content': 'center' }, 'dOuter');\r

  \  return;\r

  \  for (const arr of rows) {\r

  \    let dCol = mDiv(d, { display: 'flex', 'justify-content':
  'space-between', 'align-items': 'center' });\r

  \    for (const c of arr) {\r

  \      let dc;\r

  \      if (isdef(Syms[c])) {\r

  \        dc = mDiv(dCol, { fg: 'black' });\r

  \        ds = mSym(dc, dCol, { sz: Card.sz / 5, fg: 'random' });\r

  \      } else {\r

  \        dc = mDiv(dCol, { fg: 'black' }, null, c);\r

  \      }\r

  \    }\r

  \  }\r

  }"
testCardDraw52: "async function testCardDraw52() {\r

  \  let d = mBy('table');\r

  \  let ui = cardFace({ rank: 'K' }, 70, 110);\r

  \  mAppend(d, ui);\r

  }"
testCardHorizontal: "async function testCardHorizontal() {\r

  \  let sdata = genServerDataCards();\r

  \  let spec = {\r

  \    ROOT: { _NODE: 'cards', params: { orientation: 'h' } },\r

  \    cards: { cond: 'all', data: '.short_name' }\r

  \  };\r

  \  await rParse('direct', { defs: DEFS, spec: spec, sdata: sdata });\r

  \  mBy('message').innerHTML = '(direct) ' + getFunctionCallerName();\r

  }"
testCardHorizontal2: "async function testCardHorizontal2() {\r

  \  let sdata = genServerDataCards();\r

  \  let spec = {\r

  \    ROOT: { type: 'panel', _NODE: 'cards' },\r

  \    cards: { cond: 'all', data: '.short_name' }\r

  \  };\r

  \  await rParse('direct', { defs: DEFS, spec: spec, sdata: sdata });\r

  \  mBy('message').innerHTML = '(direct) ' + getFunctionCallerName();\r

  }"
testCardsGridOverlap: "function testCardsGridOverlap() {\r

  \  dTable = stdGridContainer(dMiddle);\r

  \  testAdd10Cards();\r

  }"
testCardsNoOverlap: "function testCardsNoOverlap() {\r

  \  dTable = stdContainerRowWrap(dMiddle);\r

  \  testAdd10Cards();\r

  }"
testCardsUni: "async function testCardsUni(n, spec, cardGenerator =
  genServerDataCards) {\r

  \  let sdata = cardGenerator(n);\r

  \  await rParse('direct', { defs: DEFS, spec: spec, sdata: sdata });\r

  \  mBy('message').innerHTML = '(direct) ' + getFunctionCallerName();\r

  }"
testCatan: "async function testCatan(r, c) {\r

  \  let sdata = genServerDataCatan(r, c);\r

  \  let spec = { ROOT: { cond: { obj_type: 'Board' }, type: 'grid', data:
  '.uid' } };\r

  \  await rParse('direct', { defs: DEFS, spec: spec, sdata: sdata });\r

  \  mBy('message').innerHTML = '(direct) ' + getFunctionCallerName();\r

  }"
testCenteredNode: "function testCenteredNode() {\r

  \  let dTable = mBy('table');\r

  \  let d = mDiv(dTable);\r

  \  mSize(d, 100, 100);\r

  \  mColor(d, 'blue');\r

  \  let d1 = mNode({ a: 'HALLO', b: 'geh' }, d);\r

  \  mCenterH(d1);\r

  }"
testColarrVersions: "function testColarrVersions() {\r

  \  let tests = [[2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [6, 3]];\r

  \  for (let i = 0; i < 50; i++) {\r

  \    let [rows, cols] = [randomNumber(1, 10), randomNumber(1, 10)];\r

  \    let carr1 = _calc_hex_col_array(rows, cols);\r

  \    let carr2 = _calc_hex_col_arrayNew(rows, cols);\r

  \    let even = (rows % 2) == 0;\r

  \    console.log('rows', rows, (even ? 'even' : 'odd'), 'cols', cols,
  '\\nold', carr1, '\\nnew', carr2);\r

  \    console.assert(even || sameList(carr1, carr2),
  'FEHLER!!!!!!!!!!!!!!!!!!');\r

  \  }\r

  }"
testCommonKeys: "async function testCommonKeys() {\r

  \  initRSGData(); showGame(); initDom();\r

  \  let gaIcons = await route_rsg_asset('gameIconCodes');\r

  \  let faIcons = await route_rsg_asset('faIconCodes');\r

  \  let smallIcons = await route_rsg_asset('iconTest');\r

  \  faKeys = [];\r

  \  for (const k in gaIcons) {\r

  \    if (isdef(faIcons[k])) faKeys.push(k);\r

  \  }\r

  \  console.log('common keys:', faKeys);\r

  \  let board = makeDrawingArea('board', 'a_d_game', true);\r

  \  setAreaWidth('a_d_game', 1400);\r

  \  setAreaHeight('a_d_game', 1000);\r

  \  let keys = faKeys;\r

  \  let xStart = -600;\r

  \  let yStart = -400;\r

  \  let y = yStart;\r

  \  let x = xStart;\r

  \  for (const k of keys) {\r

  \    addPictoFromChar('board', gaIcons[k], 50, x, y);\r

  \    if (y > -yStart) { y = yStart; x += 60; } else y += 60;\r

  \  }\r

  \  y = yStart; x += 60;\r

  \  for (const k of keys) {\r

  \    addPictoFromChar('board', faIcons[k], 50, x, y);\r

  \    if (y > -yStart) { y = yStart; x += 60; } else y += 60;\r

  \  }\r

  \  // let key = chooseRandom(Object.keys(faChars));//'clock';\r

  }"
testComposeShapesAndResize: "function testComposeShapesAndResize() {\r

  \  let g = gCanvas('table', 400, 300, 'skyblue');\r

  \  testResizeHex(g);\r

  }"
testControlFlow: "function testControlFlow(player = \"USSR\", filename = \"\",
  seed = 4) {\r

  \  execOptions.output = \"none\";\r

  \  addIf_dep(\"control\", execOptions.activatedTests);\r

  \  if (empty(filename)) {\r

  \    sendInit(player, gameloop, seed);\r

  \  } else {\r

  \    sendLoading(filename, player, gameloop);\r

  \  }\r

  }"
testCreateDivWithDivFixedSize: "function testCreateDivWithDivFixedSize() {\r

  \  let d = mBy('table');\r

  \  clearElement(d);\r

  \  d.style.position = 'relative';\r

  \  let root = mDiv(d);\r

  \  root.style.position = 'relative';\r

  \  root.style.width = '200px';\r

  \  root.style.height = '100px';\r

  \  let ch = mDiv(root);\r

  \  ch.style.position = 'absolute';\r

  \  ch.style.left = '20px';\r

  \  ch.style.top = '10px';\r

  \  ch.style.width = '30px';\r

  \  ch.style.height = '60px';\r

  \  ch.style.backgroundColor = 'blue';\r

  \  root.style.backgroundColor = 'red';\r

  }"
testCreateMultipleUnitsOnSameTile: "function testCreateMultipleUnitsOnSameTile()
  {\r

  \  execOptions.output = \"none\";\r

  \  addIf_dep(\"units\", execOptions.activatedTests);\r

  \  let data = generateUnitList();\r

  \  let player = \"West\";\r

  \  for (const id in data.created) {\r

  \    const o = data.created[id];\r

  \    o.tile = \"London\";\r

  \    o.nationality = \"Britain\";\r

  \    units.createUnit(id, o, player);\r

  \  }\r

  \  player = \"USSR\";\r

  \  for (const id in data.created) {\r

  \    let idNew = id + 200;\r

  \    const o = data.created[id];\r

  \    o.tile = \"Berlin\";\r

  \    o.nationality = \"Germany\";\r

  \    o._id = idNew;\r

  \    units.createUnit(idNew, o, player);\r

  \  }\r

  }"
testCreateNCards: "function testCreateNCards() {\r

  \  let cman = new ACards(assets);\r

  \  let n = 20;\r

  \  for (let i = 0; i < n; i++) {\r

  \    let c = generateCard();\r

  \    cman.createCard(c.id, c.o);\r

  \  }\r

  }"
testCreateOneCard: "function testCreateOneCard() {\r

  \  let c = generateCard();\r

  \  let cman = new ACards(assets);\r

  \  cman.createCard(c.id, c.o);\r

  }"
testCreateSingleUnit: "function testCreateSingleUnit() {\r

  \  execOptions.output = \"none\";\r

  \  addIf_dep(\"units\", execOptions.activatedTests);\r

  \  let data = generateUnitList();\r

  \  let player = \"West\";\r

  \  for (const id in data.created) {\r

  \    const o = data.created[id];\r

  \    units.createUnit(id, o, player);\r

  \    break;\r

  \  }\r

  }"
testDeactivate: "function testDeactivate(R) {\r

  \  deactivateUis(R);\r

  }"
testDeal2: "function testDeal2() {\r

  \  deck.mount(d);\r

  \  bDeal.addEventListener('click', function () { deck.pokerN(1); });\r

  \  makeTestButton('deal2', () => deck.pokerN(2), topbar1);\r

  }"
testDec: "function testDec() {\r

  \  let x = hexStringToDecimal('F');\r

  \  console.log('x', x);\r

  \  console.log('x', hexStringToDecimal('FFFF'));\r

  \  console.log('x', hexStringToDecimal('1A'));\r

  \  console.log('x', hexStringToDecimal('1F499'));\r

  \  console.log('x', hexStringToDecimal('1F981'));\r

  }"
testDirList: "async function testDirList() {\r

  \  let x = await (await fetch('/RSG/js')).text();\r

  \  while (!isEmpty(x)) {\r

  \    word = stringBefore(x, '\"');\r

  \    console.log('______________word:', word);\r

  \    x = stringAfter(x, '<a href=\"/');\r

  \  }\r

  \  return;\r

  \  var regexp =
  /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a\
  -z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\
  \\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))/i;\r

  \  var match, files = [];\r

  \  let max = 5;\r

  \  while ((match = regexp.exec(x)) != null) {\r

  \    files.push(match.index);\r

  \    max -= 1; if (max <= 0) break;\r

  \  }\r

  \  console.log('________________', files);\r

  \  return;\r

  \  var request = new XMLHttpRequest();\r

  \  request.open('GET', '/RSG/', true);\r

  \  let resp;\r

  \  request.onload = function () {\r

  \    if (request.status >= 200 && request.status < 400) {\r

  \      resp = request.responseText;\r

  \    }\r

  \  };\r

  \  request.send();\r

  \  let directory_listing = resp;\r

  \  var regexp =
  /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a\
  -z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\
  \\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))/i;\r

  \  var match, files = [];\r

  \  while ((match = regexp.exec(resp)) != null) {\r

  \    files.push(match.index);\r

  \  }\r

  \  console.log(files);\r

  }"
testDocumentFile: "async function testDocumentFile() {\r

  \  let akku = await documentFile('/RSG/js/done/docs/docfile.js');\r

  \  let keys = Object.keys(akku);\r

  \  keys.sort();\r

  \  keys.map(x => console.log('signature:', x, '\\ncomment block:\\n',
  akku[x]));\r

  }"
testDocumentVault: "async function testDocumentVault() {\r

  \  let vault = [\r

  \    \"/RSG/js/R/binding.js\",\r

  \    \"/RSG/js/R/rsgTypes.js\",\r

  \    \"/RSG/js/testing/engine.js\",\r

  \    \"/RSG/js/testing/onClick.js\",\r

  \    \"/RSG/js/testing/SimpleGrid.js\",\r

  \    \"/RSG/js/testing/testBoard.js\",\r

  \    \"/RSG/js/testing/testCards.js\",\r

  \    \"/RSG/js/testing/testFactory.js\",\r

  \    \"/RSG/js/testing/testData.js\",\r

  \    \"/RSG/js/testing/testing.js\",\r

  \    \"/RSG/js/done/activator.js\",\r

  \    \"/C/assets.js\",\r

  \    \"/RSG/js/done/index.js\",\r

  \    \"/RSG/js/done/utils.js\",\r

  \  ];\r

  \  console.log(res);\r

  }"
testEdit: "function testEdit(origData, player = \"USSR\", filename = \"test1\",
  seed = 0) {\r

  \  execOptions.output = \"none\";\r

  \  sendInit(player, d1 => {\r

  \    freezeUI();\r

  \    let tuples = getTuples(d1);\r

  \    sendEditAction(player, [\"France\", \"Vienna\", \"Fleet\"], d2 => {\r

  \      gameloop(origData);\r

  \    });\r

  \  });\r

  }"
testEditAddRandomUnit: "function testEditAddRandomUnit() {\r

  \  let tuple = randomUnitTuple();\r

  }"
testEditModeCreateUnit: "function testEditModeCreateUnit() {\r

  \  player = \"USSR\";\r

  \  sendLoading(\"setup_complete\", player, dInit => {\r

  \    sender.send(\"edit/\" + player + \"/USSR+Moscow+Infantry\", dEdit =>
  {\r

  \      let newUnit = Object.values(dEdit.created)[0];\r

  \      let newId = Object.keys(dEdit.created)[0];\r

  \      dInit.created[newId] = newUnit;\r

  \      gameloop(dInit);\r

  \    });\r

  \  });\r

  }"
testEditModeCreateUnit_trial1: "function testEditModeCreateUnit_trial1() {\r

  \  sendInit(player, dInit => {\r

  \    gameloop(dInit);\r

  \  });\r

  }"
testFaKeysNotInGa: "async function testFaKeysNotInGa() {\r

  \  initRSGData(); showGame(); initDom();\r

  \  let gaIcons = await route_rsg_asset('gameIconCodes');\r

  \  let faIcons = await route_rsg_asset('faIconCodes');\r

  \  let smallIcons = await route_rsg_asset('iconTest');\r

  \  faKeys = [];\r

  \  for (const k in faIcons) {\r

  \    if (nundef(gaIcons[k])) faKeys.push(k);\r

  \  }\r

  \  console.log('common keys:', faKeys);\r

  \  let board = makeDrawingArea('board', 'a_d_game', true);\r

  \  setAreaWidth('a_d_game', 2400);\r

  \  setAreaHeight('a_d_game', 1500);\r

  \  let keys = faKeys;\r

  \  let xStart = -1100;\r

  \  let yStart = -670;\r

  \  let y = yStart;\r

  \  let x = xStart;\r

  \  for (const k of keys) {\r

  \    addPictoFromChar('board', faIcons[k], 50, x, y);\r

  \    if (y > -yStart) { y = yStart; x += 60; } else y += 60;\r

  \  }\r

  \  // let key = chooseRandom(Object.keys(faChars));//'clock';\r

  }"
testFetchCsvAsTextAndSearch: "async function testFetchCsvAsTextAndSearch() {\r

  \  timit = new TimeIt('*timer', TIMIT_SHOW);\r

  \  await loadAssets();\r

  \  timit.show();\r

  \  mEmo('blue heart', 'table', 100);\r

  \  mFlexLinebreak('table');\r

  \  for (const k of ['cat', 'lion', 'tiger', 'leopard', 'horse', 'zebra',
  'deer', 'ox', 'cow']) {\r

  \    let emo = mEmo(k, 'table', 50);\r

  \  }\r

  }"
testFindKeys: "function testFindKeys() {\r\n}"
testGeneralBoard: "async function testGeneralBoard(r, c, shape, hasNodes,
  hasEdges, { mapVariant, fieldContent, nodeContent, edgeContent } = {}) {\r

  \  let sdata = genServerDataGeneralBoard(r, c, shape, hasNodes, hasEdges, {
  mapVariant, fieldContent, nodeContent, edgeContent });\r

  \  console.log('sdata', sdata)\r

  \  let spec = {\r

  \    ROOT: { cond: { obj_type: 'Board' }, type: 'grid' }\r

  \  };\r

  \  if (isdef(fieldContent)) {\r

  \    spec.fields = { cond: { obj_type: 'Field' }, data: '.content' };\r

  \  }\r

  \  if (isdef(nodeContent)) {\r

  \    spec.nodes = { cond: { obj_type: 'Corner' }, data: '.content' };\r

  \  }\r

  \  if (isdef(edgeContent)) {\r

  \    spec.edges = { cond: { obj_type: 'Edge' }, data: '.content' };\r

  \  }\r

  \  await rParse('direct', { defs: DEFS, spec: spec, sdata: sdata });\r

  \  mBy('message').innerHTML = '(direct) ' + getFunctionCallerName();\r

  }"
testGetElements: "function testGetElements() {\r

  \  let x = getElements([0, 1, 2]);\r

  \  console.log('x', x);\r

  \  x = getElements([[3, 2], [0, 1, 2]]);\r

  \  console.log('x', x);\r

  }"
testGSM: "function testGSM() {\r

  \  if (activatedTests.includes('GSM')) {\r

  \    console.log(...arguments);\r

  \  }\r

  }"
testHelpers: "function testHelpers() {\r

  \  if (activatedTests.includes('helpers')) {\r

  \    console.log(...arguments);\r

  \  }\r

  }"
testHexgrid: "function testHexgrid() {\r

  \  if (activatedTests.includes('hexgrid')) {\r

  \    console.log(...arguments);\r

  \  }\r

  }"
testIndenting: "function testIndenting() {\r

  \  let spc = '&nbsp;';\r

  \  let d = mDiv(mBy('table'));\r

  \  mSize(d, 200, 200);\r

  \  mColor(d, 'orange');\r

  \  let s = `\r

  \  hallo\r

  \    das ist\r

  \     ein\r

  \   string\r

  \    1\r

  \     2\r

  \      3`;\r

  \  s = s.replace('\\t', '  ');\r

  \  let startLine = true;\r

  \  let lines = s.split('\\n');\r

  \  let lineInfo = {};\r

  \  let html = '';\r

  \  for (let i = 0; i < lines.length; i += 1) {\r

  \    let line = lines[i];\r

  \    let n = countIndent(line, 4);\r

  \    console.log('_____________n=' + n, line);\r

  \    let x = spc.repeat(n) + line;\r

  \    html += x + '<br>';\r

  \    console.log(x)\r

  \  }\r

  \  let d1 = mText(html, d)\r

  }"
TESTING_bar: "function TESTING_bar(fileName = getCurrentFileName(),
  myFunctionName = getFunctionsNameThatCalledThisFunction()) {\r

  }"
TESTING_foo: "function TESTING_foo() {\r

  \  TESTING_bar();\r

  }"
testingMS: "function testingMS() {\r

  \  if (isdef(IdOwner.t)) IdOwner.t.map(x => addTestInteraction1(x));\r

  }"
testInitToEnd: "function testInitToEnd(player = \"USSR\", seed = 0) {\r

  \  hide(bStop);\r

  \  sendInit(player, d => testRunToEnd(d, player), seed);\r

  }"
testInno: "function testInno() {\r\n}"
testInnoCardPhantasie: "function testInnoCardPhantasie() {\r

  \  dTable = mDiv(mBy('wrapper'), { position: 'absolute', padding: 10, w:
  '100vw', h: '100vh', bg: 'white' });\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable, { fg: 'black', bg:
  INNO.color.red, w: Card.sz, h: Card.sz * .65 });\r

  \  let [dCard, sz, szTitle, gap] = [iDiv(card), Card.sz / 4, 24, 8];\r

  \  let [dTitle, dMain] = cTitleArea(card, 32);\r

  \  let d = mAddContent(dTitle, 'MetalWorking', { bg: INNO.sym.tower.bg, fg:
  'white', h: 32, fz: 23, align: 'center', position: 'relative' });\r

  \  mAddContent(d, '5', { float: 'right', hpadding: 10 });\r

  \  let s = mSym(INNO.sym.tower.key, d, { h: 22, fg: INNO.sym.tower.fg },
  'cl');\r

  \  let margin = 20;\r

  \  innoSym('leaf', dMain, sz, 'tl', margin);\r

  \  innoSym('crown', dMain, sz, 'bl', margin);\r

  \  innoSym('leaf', dMain, sz, 'bc', margin);\r

  \  innoSym('leaf', dMain, sz, 'br', margin);\r

  \  let box = mBoxFromMargins(dMain, 0, margin, sz + margin, sz + margin);\r

  \  let text = 'I demand if you get [tower] or [crown], immediately switch to
  age [2]. aber ich hab ja gott sei dank zeit! denn wenn nicht ist es ein echtes
  problem. dann muss ich einen anderen test machen!';\r

  \  let t2 = innoText(text);\r

  \  mFillText(t2, box);\r

  \  return;\r

  \  box = mDiv(dMain, { w: sz, h: sz, bg: 'dimgrey', rounding: 10 });
  mPlace(box, 'tl');\r

  \  s = mSym('white-tower', box, { sz: sz * .75, fg: 'silver' }, 'cc');\r

  \  box = mDiv(dMain, { w: sz, h: sz, bg: 'dimgrey', rounding: 10 });
  mPlace(box, 'bl');\r

  \  s = mSym('frog', box, { sz: sz * .75, fg: 'silver' }, 'cc');\r

  \  box = mDiv(dMain, { w: sz, h: sz, bg: 'dimgrey', rounding: 10 });
  mPlace(box, 'bc');\r

  \  s = mSym('maple-leaf', box, { sz: sz * .75, fg: 'silver' }, 'cc');\r

  \  box = mDiv(dMain, { w: sz, h: sz, bg: 'grey', alpha: .5, rounding: 10 });
  mPlace(box, 'br');\r

  \  text = 'denn wenn es nicht geht und ich bin muede dann halt nicht!';\r

  \  mFillText(text, box);\r

  \  box = mBoxFromMargins(dMain, 4, 4, sz + 8, sz + 10);\r

  \  text = 'das muss jetzt ein viel laenderer text sein. aber ich hab ja gott
  sei dank zeit! denn wenn nicht ist es ein echtes problem. dann muss ich einen
  anderen test machen!';\r

  \  mFillText(text, box);\r

  \  return;\r

  \  text = 'das ist ein sehr langer text ich hoffe er ist auf jeden fall zu
  lang fuer diese box. denn wenn nicht ist es ein echtes problem. dann muss ich
  einen anderen test machen!';\r

  \  box = mPlaceText(text, [szTitle, 10, sz + gap, sz + gap], d, { fg:
  'dimgrey' }, { bg: 'beige', border: '1px solid grey', rounding: 10 });\r

  \  text = 'denn wenn nicht ist es ein echtes problem. dann muss ich einen
  anderen test machen!';\r

  \  box = mPlaceText(text, [sz, sz, 'bl'], d, { fg: 'dimgrey', bg: 'pink',
  rounding: 10, border: '5px solid pink' });\r

  \  let x1 = mSym('crow', d, { w: sz, h: sz, fg: 'green' }, 'br');\r

  \  x1 = mSym('abacus', d, { w: sz, h: sz }, 'bc');\r

  \  box = mPlaceText('hallo das ist noch ein echo!!!', [sz, sz, 'tl'], d, {
  fg: 'blue', bg: 'orange', rounding: 10 });\r

  }"
testInnoMain: "function testInnoMain() {\r

  \  mStyle(dTable, { gap: 10, pabottom: 150 });\r

  \  for (const k in Cinno) {\r

  \    if (isdef(Cinno[k].expansion)) cardInno(dTable, k);\r

  \  }\r

  }"
testIntegrationCards: "function testIntegrationCards(filename =
  \"prod_complete\", player = \"Axis\") {\r

  \  execOptions.output = \"none\";\r

  \  addIf_dep(\"cards\", execOptions.activatedTests);\r

  \  if (empty(filename)) {\r

  \    sendInit(player, gameloop, 0);\r

  \  } else {\r

  \    sendLoading(filename, player, gameloop);\r

  \  }\r

  }"
testIntegrationMap: "function testIntegrationMap(filename = \"prod_complete\",
  player = \"Axis\") {\r

  \  execOptions.output = \"none\";\r

  \  addIf_dep(\"map\", execOptions.activatedTests);\r

  \  if (empty(filename)) {\r

  \    sendInit(player, gameloop, 0);\r

  \  } else {\r

  \    sendLoading(filename, player, gameloop);\r

  \  }\r

  }"
testIntegrationUnits: "function testIntegrationUnits(filename = \"\", player =
  \"USSR\", seed = 4) {\r

  \  execOptions.output = \"none\";\r

  \  addIf_dep(\"units\", execOptions.activatedTests);\r

  \  if (empty(filename)) {\r

  \    sendInit(player, gameloop, seed);\r

  \  } else {\r

  \    sendLoading(filename, player, gameloop);\r

  \  }\r

  }"
testjourney0: "function testjourney0() {\r

  \  let [fen, uname] = [Z.fen, Z.uname];\r

  \  let plist = find_players_with_potential_journey(fen);\r

  \  console.log('journey players', plist);\r

  \  if (!plist.includes(uname)) {\r

  \    set_nextplayer_after_journey();\r

  \    console.log('Z.turn', Z.turn)\r

  \    take_turn_fen();\r

  \  }\r

  }"
testJustARect: "function testJustARect() {\r

  \  let svg = new MMS({ parent: UIS.a_d_game, type: 'svg' }).setDefaults({
  bg: 'green' }).attach();\r

  \  let rect = new MMS({ parent: svg, type: 'rect' }).setDefaults({ w: 50, h:
  50, bg: 'red' }).attach();\r

  }"
testKarte0: "function testKarte0() {\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable); let d =
  iDiv(card); let sz = Card.sz;\r

  \  let suit = mSuit('Pik', d, { h: 300 });\r

  \  let p = suit.firstChild;\r

  \  console.log('p', p);\r

  \  console.log('child', p.firstChild);\r

  }"
testKarte1: "function testKarte1() {\r

  \  let card = cLandscape(dTable);\r

  \  let sz = card.sz;\r

  \  console.log('sz', sz)\r

  \  let d = iDiv(card);\r

  \  let x = mShape('triangle', d, { bg: 'blue', w: sz / 4, h: sz / 4,
  position: 'absolute', top: 10, left: 10 });\r

  \  x = mShape('test1', d, { bg: 'red', w: sz / 4, h: sz / 4, position:
  'absolute', bottom: 10, left: 10 });\r

  \  x = mSym('bee', d, { fz: sz / 5, position: 'absolute', bottom: 10, right:
  10 });\r

  \  x = mDiv(d, { bg: YELLOW, w: sz / 4, h: sz / 4, position: 'absolute',
  top: 10, right: 10 }, null, null, 'triangle');\r

  \  let text = 'diese karte erlaubt es dir, zu verschwinden und aufzutauchen
  wo immer du willst.<br><br>pass jedoch auf: wenn du auf einer ungesicherten
  mine landest, verlierst du 1 leben!';\r

  \  let [fz, w, h] = fitFont(text, 20, sz, sz / 2);\r

  \  let pos = { left: (card.w - w) / 2, top: (card.h - h) / 2 }\r

  \  x = mDiv(d, { align: 'left', fz: fz, fg: 'black', w: w, h: h, top:
  pos.top, left: pos.left, display: 'inline-block', position: 'absolute' },
  null, text);\r

  \  console.log('x', x)\r

  \  let sh0 = [\r

  \    `<div class=\"triangle\"></div>`,\r

  \    `<div class=\"triangle type2\"
  style=\"--b:linear-gradient(red,blue);\"></div>`,\r

  \    `<div class=\"triangle type3\"
  style=\"--b:conic-gradient(green,pink,green);\"></div>`,\r

  \    `<div class=\"triangle hex\"
  style=\"--b:url(https://picsum.photos/id/1067/200/200)
  center/cover;\"></div>`,\r

  \    `<div class=\"triangle hex\"
  style=\"--b:url(../assets/images/felix.jpg) center/cover;\"></div>`,\r

  \  ];\r

  \  let sh = [\r

  \    `<div class=\"weired\"></div>`,\r

  \    `<div class=\"weired\"
  style=\"--b:linear-gradient(red,blue);\"></div>`,\r

  \    `<div class=\"weired\" style=\r

  \    \"--b:conic-gradient(green,pink,green);\r

  \    --clip:polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);\r

  \    --patop:100%;\r

  \    \"></div>`,\r

  \    //`<div class=\"triangle hex\"
  style=\"--b:url(https://picsum.photos/id/1067/200/200)
  center/cover;\"></div>`,\r

  \  ];\r

  \  for (const sh1 of sh) {\r

  \    x = createElementFromHtml(sh1);\r

  \    mStyle(x, { w: 80 });\r

  \    mAppend(dTable, x);\r

  \  }\r

  \  return;\r

  \  let styles = { margin: 10, bg: 'random' };\r

  \  for (let i = 0; i < 3; i++) { let d = mShape('triangle', dTable);
  console.log('d', d); }\r

  }"
testKarte2: "function testKarte2() {\r

  \  let card = cLandscape(dTable);\r

  \  let isLandscape = card.w > card.h;\r

  \  let sz = card.sz;\r

  \  console.log('sz', sz)\r

  \  let text = 'diese karte erlaubt es dir, zu verschwinden und aufzutauchen
  wo immer du willst.<br><br>pass jedoch auf: wenn du auf einer ungesicherten
  mine landest, verlierst du 1 leben!';\r

  \  let d = iDiv(card);\r

  \  let sh = [\r

  \    { type: 'html', pos: 'TL', sz: 's', content: `<div
  class=\"weired\"></div>` },\r

  \    { type: 'html', pos: 'TR', sz: 's', content: `<div class=\"weired\"
  style=\"--b:linear-gradient(red,blue);\"></div>` },\r

  \    {\r

  \      type: 'html', pos: 'BL', sz: 's', content: `<div class=\"weired\"
  style=\r

  \    \"--b:conic-gradient(green,pink,green);\r

  \    --clip:polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);\r

  \    --patop:100%;\r

  \    \"></div>`},\r

  \    {\r

  \      type: 'html', pos: 'BR', sz: 's', content: `<div class=\"weired\"
  style=\r

  \    \"--b:url(../assets/images/felix.jpg) center/cover;\r

  \    --clip:polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);\r

  \    --patop:100%;\r

  \    \"></div>`},\r

  \    { type: 'text', pos: 'CC', sz: 'l', content: 'diese karte erlaubt es
  dir, zu verschwinden und aufzutauchen wo immer du willst.<br><br>pass jedoch
  auf: wenn du auf einer ungesicherten mine landest, verlierst du 1 leben!' },\r

  \  ];\r

  \  var SZ = sz;\r

  \  var GAP = SZ * .1;\r

  \  var SIZE = { xs: SZ / 8, s: SZ / 4, m: SZ / 2, l: SZ * 2 / 3, xl: SZ };\r

  \  var POS = { TL: { top: GAP, left: GAP }, TR: { top: GAP, right: GAP },
  BL: { bottom: GAP, right: GAP }, BR: { bottom: GAP, right: GAP } };\r

  \  for (const sh1 of sh) {\r

  \    let t = sh1.content;\r

  \    x = isString(t) ? t[0] == '<' ? createElementFromHtml(t) : makeText(t,
  sz, sz / 2) : t;\r

  \    mAppend(d, x);\r

  \    let pos = sh1.pos;\r

  \    if (pos != 'CC') {\r

  \      mStyle(x, { w: 80 });\r

  \      window['mPos' + sh1.pos](x, 10);\r

  \    }\r

  \  }\r

  }"
testKarte3_svg: "function testKarte3_svg() {\r

  \  mStyle(dTable, { gap: 10 }); let card;\r

  \  card = cBlankSvg(dTable);\r

  \  console.log('card', card);\r

  \  let g = iG(card); console.log('g', g);\r

  \  let x = mgSuit('Pik'); console.log('x', x);\r

  \  mgSize(x, Card.sz / 2);\r

  \  mgPos(card, x);\r

  }"
testKarte4: "function testKarte4() {\r

  \  mStyle(dTable, { gap: 10 }); let card;\r

  \  card = cBlank(dTable);\r

  \  let d = iDiv(card);\r

  \  let sz = Card.sz;\r

  \  let arr = [];\r

  \  let suit = mSuit('Pik');\r

  \  let triangle = mShape('triangle', null, { bg: 'red' });\r

  \  let sym = mSym('frog');\r

  \  let shape = mShape('test1');\r

  \  let x = mShapeX98(); console.log('\\nx', x); mAppend(d, x);\r

  \  return;\r

  \  let h = sz / 4;\r

  \  suit.setAttribute('height', h);\r

  \  mStyle(sym, { fz: h * .75 });\r

  \  mSize(shape, h * .75);\r

  \  mSize(triangle, h * .75);\r

  \  arr = [triangle, suit, sym, shape, x];\r

  \  console.log('\\nx', x);\r

  \  mAppend(d, x); return;\r

  \  for (const x of arr) { mAppend(d, x); }\r

  \  gSizeToContent(suit);\r

  }"
testKarte5: "function testKarte5() {\r

  \  for (let i = 0; i < 10; i++) {\r

  \    let n = i * 15;\r

  \    let x = mShapeR(); console.log('\\nx', x);\r

  \    mStyle(x, { w: n }); mClassReplace(x, 'weired' + (n > 120 ? 8 : n > 80
  ? 5 : n > 50 ? 3 : 1));\r

  \    mAppend(dTable, x);\r

  \  }\r

  }"
testKarte6: "function testKarte6() {\r

  \  for (let i = 0; i < 10; i++) {\r

  \    let n = i * 15;\r

  \    let x = mShapeR('triup', dTable, { sz: n, bg: 'random' });
  console.log('\\nx', x); mAppend(dTable, x);\r

  \  }\r

  }"
testKarte8: "function testKarte8() {\r

  \  for (let i = 0; i < 1; i++) {\r

  \    testKarte7();\r

  \  }\r

  }"
testKartePosition1: "function testKartePosition1() {\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable); let d =
  iDiv(card); let sz = Card.sz / 4;\r

  \  let s3 = mSuit('Pik', d); mSuitSize(s3, 30); mSuitTL(s3);
  console.log('s3', s3);\r

  \  let s4 = mSuit('Treff', d); mSuitSize(s4, 30); mSuitPos(s4, 'bottom',
  'right'); console.log('s4', s4);\r

  \  let s5 = mSuit('Herz', d, { sz: 30 }); mSuitPos(s5, 'bottom', 'left');
  console.log('s5', s5);\r

  \  let s6 = mSuit('Karo', d, { sz: 30 }); mSuitPos(s6, 'top', 'right');
  console.log('s6', s6);\r

  \  return;\r

  \  console.log('suit', suit);\r

  \  mPos(suit, 0, 0);\r

  \  mPos(suit1, -10, Card.h - sz);\r

  \  mPos(suit1, -10 * sz / 100, Card.h - sz);\r

  }"
testKartePosition2: "function testKartePosition2() {\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable); let d =
  iDiv(card); let sz = Card.sz / 4;\r

  \  let s1 = mSuit('Pik', d, { sz: 25 }, 'tl'); console.log('s1', s1);\r

  \  let s2 = mSuit('Karo', d, { sz: 50 }, 'tr'); console.log('s2', s2);\r

  \  let s3 = mSuit('Herz', d, { sz: 75 }, 'bl'); console.log('s3', s3);\r

  \  let s4 = mSuit('Treff', d, { sz: 100 }, 'br'); console.log('s4', s4);\r

  }"
testKartePositionSuit: "function testKartePositionSuit() {\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable); let d =
  iDiv(card); let sz = Card.sz / 6;\r

  \  let s1 = mSuit('Herz', d, { sz: sz }, 'tc');\r

  \  let s2 = mSuit('Herz', d, { sz: sz }, 'cr');\r

  \  let s3 = mSuit('Herz', d, { sz: sz }, 'bc');\r

  \  let s4 = mSuit('Herz', d, { sz: sz }, 'cl');\r

  \  let s5 = mSuit('Pik', d, { sz: sz * 2 }, 'cc');\r

  \  s5 = mSuit('Treff', d, { sz: sz * 1.5 }, 'tl');\r

  \  s5 = mSuit('Treff', d, { sz: sz * 1.5 }, 'tr');\r

  \  s5 = mSuit('Treff', d, { sz: sz * 1.5 }, 'bl');\r

  \  s5 = mSuit('Treff', d, { sz: sz * 1.5 }, 'br');\r

  }"
testKartePositionSuitOuterCenters: "function testKartePositionSuitOuterCenters()
  {\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable); let d =
  iDiv(card); let sz = Card.sz / 4;\r

  \  let s1 = mSuit('Pik', d, { sz: 60 }, 'tc'); console.log('s1', s1);\r

  \  let s2 = mSuit('Karo', d, { sz: 60 }, 'cr'); console.log('s2', s2);\r

  \  let s3 = mSuit('Herz', d, { sz: 60 }, 'bc'); console.log('s3', s3);\r

  \  let s4 = mSuit('Treff', d, { sz: 60 }, 'cl'); console.log('s4', s4);\r

  }"
testKarteSizing: "function testKarteSizing() {\r

  \  mStyle(dTable, { gap: 10 }); let card;\r

  \  card = cBlank(dTable);\r

  \  let d = iDiv(card);\r

  \  let sz = Card.sz;\r

  \  let arr = [];\r

  \  let suit = mSuit('Pik');\r

  \  let triangle = mShape('triangle', null, { bg: 'red' });\r

  \  let sym = mSym('frog');\r

  \  let shape = mShape('test1');\r

  \  let x = mShapeR();\r

  \  let h = sz / 4;\r

  \  suit.setAttribute('height', h);\r

  \  mStyle(sym, { fz: h * .75 });\r

  \  mSize(shape, h * .75);\r

  \  mSize(triangle, h * .75);\r

  \  mStyle(x, { w: h * .75 }); mClassReplace(x, 'weired1');\r

  \  arr = [triangle, suit, sym, shape, x];\r

  \  for (const x of arr) { mAppend(d, x); }\r

  \  gSizeToContent(suit);\r

  }"
testKnight: "function testKnight() {\r

  \  let c = makeCard(0, 'hallo');\r

  \  c.mount(d);\r

  \  c.setSide('front');\r

  \  blank(c);\r

  \  setTitle(c, 'Knight')\r

  \  setText(c, 'You can play this card whenever you want to move the
  robber!')\r

  \  moveTo(c, -100, -100);\r

  }"
testLines: "function testLines() {\r

  \  initRSGData(); showGame(); initDom();\r

  \  let board = makeDrawingArea('board', 'a_d_game', true);\r

  \  let mobj = makeDrawingElement('el1', 'board');\r

  \  mobj.line({ thickness: 10, cap: 'round' }).setBg('red').attach();\r

  \  console.log(mobj)\r

  \  console.log(mobj.elem)\r

  \  let [x1, y1, x2, y2] = mobj.getEndPointsOfLineSegmentOfLength(40);\r

  \  let ms2 = makeDrawingElement('el2', 'board');\r

  \  ms2.line({ thickness: 15, x1: x1, y1: y1, x2: x2, y2: y2
  }).setBg('blue').attach();\r

  \  [x1, y1, x2, y2] = mobj.getEndPointsOfLineSegmentOfLength(120);\r

  \  let ms3 = makeDrawingElement('el3', 'board');\r

  \  ms3.line({ thickness: 5, x1: x1, y1: y1, x2: x2, y2: y2
  }).setBg('green').attach();\r

  }"
testLoadSpring: "function testLoadSpring(filename = \"spring_start\", player =
  \"Axis\") {\r

  \  execOptions.output = \"none\";\r

  \  if (empty(filename)) {\r

  \    sendInit(player, gameloop, 5);\r

  \  } else {\r

  \    sendLoading(filename, player, gameloop);\r

  \  }\r

  }"
testLoadToEnd: "function testLoadToEnd(player = \"Axis\", filename =
  \"setup_complete\") {\r

  \  hide(bStop);\r

  \  sendLoading(filename, player, d => testRunToEnd(d, player), \"raw\");\r

  }"
testLookupRemoveFromList: "function testLookupRemoveFromList() {\r

  \  let d = { a: { b: [2] } };\r

  \  let res = lookupRemoveFromList(d, ['a', 'b'], 2);\r

  \  console.log('res', res, 'd', d);\r

  \  d = { a: { b: [2] } };\r

  \  res = lookupRemoveFromList(d, ['a', 'b'], 2, true);\r

  \  console.log('res', res, 'd', d);\r

  \  d = { a: { b: [2, 3] } };\r

  \  res = lookupRemoveFromList(d, ['a', 'b'], 3, true);\r

  \  console.log('res', res, 'd', d);\r

  \  d = { a: [0, [2], { b: [] }] };\r

  \  res = lookupRemoveFromList(d, ['a', 1], 2);\r

  \  console.log('res', res, 'd', d);\r

  }"
testMakeACanvas: "function testMakeACanvas() {\r

  \  let dParent = mBy('table');\r

  \  let div = stage3_prepContainer(dParent);\r

  \  div.style.width = 400 + 'px';\r

  \  div.style.height = 300 + 'px';\r

  \  mColor(div, 'orange');\r

  \  let svg = gSvg();\r

  \  let style =
  `margin:0;padding:0;position:absolute;top:0px;left:0px;width:100%;height:100%\
  ;`\r

  \  svg.setAttribute('style', style);\r

  \  mColor(svg, 'green');\r

  \  div.appendChild(svg);\r

  \  let g = gG();\r

  \  g.style.transform = \"translate(50%, 50%)\";\r

  \  gBg(g, 'blue');\r

  \  svg.appendChild(g);\r

  \  return g;\r

  }"
testMakeAreas: "function testMakeAreas(dParent) {\r

  \  let dGrid = mDiv(dParent, { gap: 10, bg: 'white', w: '90%', padding: 10,
  display: 'inline-grid', rounding: 10 }, 'dGrid');\r

  \  let layout = ['T', 'H A'];\r

  \  let x = createGridLayout(dGrid, layout);\r

  \  let areaStyles = { bg: 'green', hmin: 200, rounding: 6 };\r

  \  let contentStyles = { lowerRounding: 6 };\r

  \  let messageStyles = { fg: 'yellow' };\r

  \  let titleStyles = { bg: 'dimgray', family: 'AlgerianRegular',
  upperRounding: 6 };\r

  \  let areas = {\r

  \    T: { title: 'table', id: 'dTrick', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles, titleOnTop: true },\r

  \    H: { title: 'YOU', id: 'dHuman', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles, titleOnTop: false },\r

  \    A: { title: 'opponent', id: 'dAI', showTitle: true, messageArea: true,
  areaStyles: areaStyles, contentStyles: contentStyles, messageStyles:
  messageStyles, titleStyles: titleStyles, titleOnTop: false },\r

  \  };\r

  \  let items = [];\r

  \  for (const k in areas) {\r

  \    let item = areas[k];\r

  \    item.areaStyles['grid-area'] = k;\r

  \    let dCell = mTitledMessageDiv(item.title, dGrid, item.id,
  item.areaStyles, item.contentStyles, item.titleStyles, item.messageStyles,
  item.titleOnTop)\r

  \    iRegister(item, item.id);\r

  \    if (item.titleOnTop) iAdd(item, { div: dCell, dTitle:
  dCell.children[0], dMessage: dCell.children[1], dContent: dCell.children[2]
  });\r

  \    else iAdd(item, { div: dCell, dTitle: dCell.children[2], dMessage:
  dCell.children[0], dContent: dCell.children[1] });\r

  \    mCenterCenterFlex(diContent(item));\r

  \    mStyle(diContent(item), { gap: 10 });\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
testManualCircleOnG: "function testManualCircleOnG() {\r

  \  let svg = new MMS({ parent: UIS.a_d_game, type: 'svg' }).setDefaults({
  bg: 'green' }).attach();\r

  \  let g = new MMS({ parent: svg, type: 'g' }).setDefaults({ bg: 'blue'
  }).attach();\r

  \  let circle = new MMS({ parent: g, type: 'ellipse' }).attach();\r

  \  let r = document.createElementNS('http://www.w3.org/2000/svg',
  'ellipse');\r

  \  r.setAttribute('rx', 35);\r

  \  r.setAttribute('ry', 45);\r

  \  r.setAttribute('cx', 0);\r

  \  r.setAttribute('cy', 0);\r

  \  r.setAttribute('fill', 'yellow');\r

  \  g.elem.appendChild(r);\r

  }"
testMovement: "function testMovement(filename = \"test_movement\", player =
  \"Axis\") {\r

  \  execOptions.output = \"none\";\r

  \  if (empty(filename)) {\r

  \    sendInit(player, gameloop, 5);\r

  \  } else {\r

  \    sendLoading(filename, player, gameloop);\r

  \  }\r

  }"
testMS_fine: "function testMS_fine() {\r

  \  if (activatedTests.includes('MS_fine')) {\r

  \    console.log(...arguments);\r

  \  }\r

  }"
testMuell0: "function testMuell0() {\r

  \  dTable = makePage();\r

  \  mStyle(dTable, { display: 'flex', })\r

  \  let dGrid = mDiv(dTable, { wmin: 110, hmin: 70, bg: 'white', padding: 3,
  rounding: 6 });\r

  \  let d = mTitledMessageDiv('title', dGrid, 'id1',\r

  \    { bg: 'green', rounding: 6 },\r

  \    { lowerRounding: 6 },\r

  \    { bg: 'dimgray', align: 'center', 'line-height': 30, family:
  'AlgerianRegular', upperRounding: 6 },\r

  \    { fg: 'yellow', padding: 10 },\r

  \    true);\r

  }"
testMultiline: "function testMultiline() {\r

  \  let d = mDiv(mBy('table'));\r

  \  mSize(d, 200, 200);\r

  \  mColor(d, 'orange');\r

  \  let s = ' hallo\\n\\tdas\\n   ist\\n\\t\\tda';\r

  \  let dMulti = mMultiline(s, 2, d);\r

  }"
testNewMSAPI: "function testNewMSAPI() {\r

  \  initRSGData(); showGame(); initDom();\r

  \  let board = makeDrawingArea('board', 'a_d_game', true);\r

  \  let mobj = makeDrawingElement('el1', 'board');\r

  \  _makeGroundShape(mobj, 0, 25, 100, 100, 'blue', 'quad', { scaleY: 2, rot:
  45 });\r

  \  mobj.attach();\r

  \  console.log(mobj)\r

  }"
testObjectWithUiAndClasses: "function testObjectWithUiAndClasses() {\r

  \  let n = { uid: '_1' };\r

  \  let d = mCenteredNode({ a: 'HALLO', b: 'geh' });\r

  \  console.log(d, d.classList);\r

  \  mSize(d, 100, 50);\r

  \  mAppend(mBy('table'), d);\r

  \  mCenterText(d.firstChild);\r

  \  mClass(d.firstChild, 'centered')\r

  \  n.class = ['centered'];\r

  \  console.log('line2', d, d.classList);\r

  \  n.ui = d;\r

  \  let dDesc = mNodeFilter(n, { dParent: mBy('table'), lstShow: ['uid',
  'class'] });\r

  }"
testOutput: "function testOutput(o) {\r

  \  return;\r

  \  for (const key in o) {\r

  \    const arg = o[key];\r

  \    if (isNumber(key) && key <= execOptions.outputLevel) {\r

  \      console.log(H.moveCounter + ':', ...arg);\r

  \    }\r

  \  }\r

  }"
testPageHeader: "function testPageHeader() {\r

  \  pageHeaderClearAll();\r

  \  pageHeaderSetGame();\r

  \  pageHeaderAddPlayer('username', 'playerId', 'green', true);\r

  }"
testPicto: "async function testPicto(n) {\r

  \  initRSGData(); showGame(); initDom();\r

  \  let board = makeDrawingArea('board', 'a_d_game', true);\r

  \  let keys = ['achievement', 'wheat', 'criminal', 'police', 'cop',
  'trophy', 'victory', 'plenty', 'fruit', 'bounty', 'house', 'castle',
  'building', 'settlement', 'city', 'robber', 'thief', 'street', 'road'];\r

  \  let y = -300;\r

  \  let x = -300;\r

  \  let i = 0;\r

  \  timit.showTime('************server');\r

  \  iconChars = await vidCache.load('iconChars', route_iconChars);\r

  \  timit.showTime('iconChars');\r

  \  console.log(iconChars);\r

  \  for (const k of keys) {\r

  \    addPicto('board', k, 50, x, y);\r

  \    if (y > 250) { y = -300; x += 60; } else y += 60;\r

  \    i += 1; if (i >= n) break;\r

  \  }\r

  }"
testPicto_dep: "function testPicto_dep(n) {\r

  \  initRSGData(); showGame(); initDom();\r

  \  let board = makeDrawingArea('board', 'a_d_game', true);\r

  \  let keys = ['achievement', 'wheat', 'criminal', 'police', 'cop',
  'trophy', 'victory', 'plenty', 'fruit', 'bounty', 'house', 'castle',
  'building', 'settlement', 'city', 'robber', 'thief', 'street', 'road'];\r

  \  let y = -300;\r

  \  let x = -300;\r

  \  let i = 0;\r

  \  loadIconChars([() => {\r

  \    console.log(iconChars);\r

  \    for (const k of keys) {\r

  \      addPicto('board', k, 50, x, y);\r

  \      if (y > 250) { y = -300; x += 60; } else y += 60;\r

  \      i += 1; if (i >= n) break;\r

  \    }\r

  \  }]);\r

  }"
testPlayerHand1: "function testPlayerHand1() {\r

  \  G.table = cards1;\r

  \  G.playersAugmented = {\r

  \    White: {\r

  \      devcards: { _set: [{ _obj: 'c1' }, { _obj: 'c3' }] }\r

  \    }\r

  \  };\r

  \  _showHand(['c1', 'c2', 'c3'], 'a_d_game');\r

  }"
testPos00: "function testPos00() {\r

  \  let board = [\r

  \    ['bk', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'bn', 'em', 'wr', 'em', 'wp', 'em', 'em'],\r

  \    ['br', 'em', 'bp', 'em', 'em', 'bn', 'wn', 'em'],\r

  \    ['em', 'em', 'bp', 'bp', 'bp', 'em', 'wp', 'bp'],\r

  \    ['bp', 'bp', 'em', 'bp', 'wn', 'em', 'wp', 'em'],\r

  \    ['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'em', 'em', 'wk', 'em', 'em', 'em', 'em'],\r

  \    ['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],\r

  \  ];\r

  \  console.log(board_to_fen(board));\r

  }"
testPosition3: "function testPosition3() {\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable); let d =
  iDiv(card); let sz = Card.sz / 5;\r

  \  let x1 = mShapeR('hex', null, { w: sz, h: sz, bg: 'random' });
  console.log('\\nx1', x1);\r

  \  for (const p of ['tl', 'tc', 'tr', 'cl', 'cc', 'cr', 'bl', 'bc', 'br'])
  {\r

  \    let x2 = x1.cloneNode(); mAppend(d, x2); mPlace(x2, p, 20);\r

  \  }\r

  }"
testPositionCardSym: "function testPositionCardSym() {\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable); let d =
  iDiv(card); let sz = Card.sz / 5;\r

  \  let x1 = mSym('crow', d, { w: sz, h: sz, bg: 'random' }, 'cc');
  console.log('\\nx1', x1);\r

  }"
testPositionPatterns: "function testPositionPatterns() {\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable); let d =
  iDiv(card); let sz = Card.sz / 5;\r

  \  let x1 = mShapeR('hex', null, { w: sz, h: sz, bg: 'random' });
  console.log('\\nx1', x1);\r

  \  for (const p of ['tl', 'tc', 'tr', 'cl', 'cc', 'cr', 'bl', 'bc', 'br'])
  {\r

  \    let x2 = x1.cloneNode(); mAppend(d, x2);\r

  \    mPlace(x2, p, p.includes('c') ? 0 : 20);\r

  \  }\r

  }"
testPositionPatterns1: "function testPositionPatterns1() {\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable); let d =
  iDiv(card); let sz = Card.sz / 5;\r

  \  let x1 = mShapeR('circle', null, { w: sz, h: sz, bg: 'random' });
  console.log('\\nx1', x1);\r

  \  for (const p of ['tl', 'tr', 'bl', 'br']) {\r

  \    let x2 = x1.cloneNode(); mAppend(d, x2);\r

  \    mPlace(x2, p, 20);\r

  \  }\r

  \  for (const p of ['tc', 'cl', 'cc', 'cr', 'bc']) {\r

  \    let x2 = x1.cloneNode(); mAppend(d, x2);\r

  \    mPlace(x2, p);\r

  \  }\r

  }"
testPositionShapeR0: "function testPositionShapeR0() {\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable); let d =
  iDiv(card); let sz = Card.sz / 4;\r

  \  let x1 = mShapeR('triup', d, { sz: sz, bg: 'random' });
  console.log('\\nx1', x1);\r

  \  mPlace(x1, 'tl');\r

  \  let x2 = mShapeR('hex', d, { sz: sz, bg: 'random' });
  console.log('\\nx1', x2);\r

  \  mPlace(x2, 'tr');\r

  \  let x3 = mShapeR('triangle', d, { sz: sz, bg: 'random' });
  console.log('\\nx1', x3);\r

  \  mPlace(x3, 'br');\r

  \  let x4 = mShapeR('hexFlat', d, { sz: sz, bg: 'random' });
  console.log('\\nx1', x4);\r

  \  mPlace(x4, 'bl');\r

  }"
testRandomSeries: "function testRandomSeries(G, n, callback) {\r

  \  sender.send(\"init/hotseat/Axis/1\", dInit => {\r

  \    testRandomSeriesRec([], dInit, G, n, callback);\r

  \  });\r

  }"
testRandomSeries_sendInit: "function testRandomSeries_sendInit(lst, G, n,
  callback) {\r

  \  sendInit(\r

  \    G.player,\r

  \    dInit => {\r

  \      lst.push();\r

  \      testRandomSeriesRec(dInit, G, n - 1, callback);\r

  \    },\r

  \    G.seed\r

  \  );\r

  }"
testRandomSeriesRec: "function testRandomSeriesRec(lst, dInit, G, n, callback)
  {\r

  \  sender.send(\"randint/\" + 100, di => {\r

  \    let x = di.int;\r

  \    lst.push(x);\r

  \    if (n > 0) {\r

  \      testRandomSeriesRec(lst, dInit, G, n - 1, callback);\r

  \    } else {\r

  \      callback(dInit);\r

  \    }\r

  \  });\r

  }"
testRectanglesTextInBoxesW0: "function testRectanglesTextInBoxesW0() {\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable, { w: Card.sz, h:
  Card.sz * .8 });\r

  \  let [d, sz, szTitle, gap] = [iDiv(card), Card.sz / 4, 24, 8];\r

  \  let box = mBoxFromMargins(d, szTitle, 10, sz + gap, sz + gap);\r

  \  let r = mMeasure(box);\r

  \  text = 'das ist ein sehr langer text ich hoffe er ist auf jeden fall zu
  lang fuer diese box. denn wenn nicht ist es ein echtes problem. dann muss ich
  einen anderen test machen!';\r

  \  let [fz, w, h] = fitFont(text, 20, r.w, r.h);\r

  \  console.log('res', fz, w, h);\r

  \  let dText = mDiv(box, {\r

  \    w: w, h: h, fz: fz, fg: 'black',\r

  \    position: 'absolute', transform: 'translate(-50%,-50%)', top: '50%',
  left: '50%'\r

  \  }, null, text);\r

  \  box = mDiv(d, { w: sz, h: sz });\r

  \  mPlace(box, 'bl');\r

  \  r = mMeasure(box);\r

  \  text = 'denn wenn nicht ist es ein echtes problem. dann muss ich einen
  anderen test machen!';\r

  \  [fz, w, h] = fitFont(text, 20, r.w, r.h);\r

  \  console.log('res', fz, w, h);\r

  \  dText = mDiv(box, {\r

  \    w: w, h: h, fz: fz, fg: 'black',\r

  \    position: 'absolute', transform: 'translate(-50%,-50%)', top: '50%',
  left: '50%'\r

  \  }, null, text);\r

  \  mPlaceText('hallo das ist noch ein echo!!!', [sz, sz, 'tl'], d, { fg:
  'blue' }, { bg: 'orange', border: '1px dashed red', rounding: 10 });\r

  }"
testRectanglesW1: "function testRectanglesW1() {\r

  \  mStyle(dTable, { gap: 10 }); let card = cBlank(dTable, { w: Card.sz, h:
  Card.sz * .8 });\r

  \  let [d, sz, szTitle, gap] = [iDiv(card), Card.sz / 4, 24, 8];\r

  \  let text = 'das ist ein sehr langer text ich hoffe er ist auf jeden fall
  zu lang fuer diese box. denn wenn nicht ist es ein echtes problem. dann muss
  ich einen anderen test machen!';\r

  \  box = mPlaceText(text, [szTitle, 10, sz + gap, sz + gap], d, { fg:
  'dimgrey' }, { bg: 'beige', border: '1px solid grey', rounding: 10 });\r

  \  text = 'denn wenn nicht ist es ein echtes problem. dann muss ich einen
  anderen test machen!';\r

  \  box = mPlaceText(text, [sz, sz, 'bl'], d, { fg: 'dimgrey', bg: 'pink',
  rounding: 10, border: '5px solid pink' });\r

  \  let x1 = mSym('crow', d, { w: sz, h: sz, fg: 'green' }, 'br');\r

  \  x1 = mSym('abacus', d, { w: sz, h: sz }, 'bc');\r

  \  box = mPlaceText('hallo das ist noch ein echo!!!', [sz, sz, 'tl'], d, {
  fg: 'blue', bg: 'orange', rounding: 10 });\r

  }"
testRegexSplit: "function testRegexSplit() {\r

  \  let res = '\\nfunction \\nfunction hallo(){return \"hallo\";}\\nasync
  function hallo1(){return \"hallo1\";}'\r

  \  let regex = new RegExp('\\nasync
  function|\\nfunction|\\nvar|\\nconst|\\nclass', 'g');\r

  \  let fcode = res.split(regex);\r

  \  console.log(fcode);\r

  }"
testRemoveBoard: "function testRemoveBoard(R) {\r

  \  let oid = detectFirstBoardObject(R);\r

  \  console.log('testRemoveBoard: first board object detected has oid',
  oid);\r

  \  removeServerObject(oid, 'board');\r

  }"
testRemoveInfluence: "function testRemoveInfluence(mapController, gObjects) {\r

  \  let data = {};\r

  \  addIf_dep(\"map\", execOptions.activatedTests);\r

  \  data.removed = {\r

  \    \"507565\": {\r

  \      obj_type: \"influence\",\r

  \      visible: {\r

  \        xset: [\"Axis\", \"USSR\", \"West\"]\r

  \      },\r

  \      _id: 507565\r

  \    },\r

  \    \"531772\": {\r

  \      obj_type: \"influence\",\r

  \      visible: {\r

  \        xset: [\"Axis\", \"USSR\", \"West\"]\r

  \      },\r

  \      _id: 531772\r

  \    },\r

  \    \"531773\": {\r

  \      obj_type: \"influence\",\r

  \      visible: {\r

  \        xset: [\"Axis\", \"USSR\", \"West\"]\r

  \      },\r

  \      _id: 531773\r

  \    },\r

  \    \"531774\": {\r

  \      value: 2,\r

  \      nation: \"Norway\",\r

  \      faction: \"Axis\",\r

  \      obj_type: \"influence\",\r

  \      visible: {\r

  \        xset: [\"Axis\", \"USSR\", \"West\"]\r

  \      },\r

  \      _id: 531774\r

  \    },\r

  \    \"531775\": {\r

  \      value: 4,\r

  \      nation: \"Latin_America\",\r

  \      faction: \"Axis\",\r

  \      obj_type: \"influence\",\r

  \      visible: {\r

  \        xset: [\"Axis\", \"USSR\", \"West\"]\r

  \      },\r

  \      _id: 531775\r

  \    }\r

  \  };\r

  \  mapController.update(data, gObjects);\r

  }"
testRemoveObject: "function testRemoveObject(R) {\r

  \  let data = dict2list(sData);\r

  \  data = data.filter(x => (nundef(x.fields)) && nundef(x.neighbors));\r

  \  data = data.filter(x => firstCondDict(R.rNodes, y => y.oid == x.id));\r

  \  console.log('data gefiltered:', data)\r

  \  if (isEmpty(data)) {\r

  \    console.log('no objects left in sData!!!');\r

  \    return;\r

  \  }\r

  \  let oid = chooseRandom(data).id;\r

  \  removeServerObject(oid, 'random');\r

  }"
testRemoveOidKey: "function testRemoveOidKey(R) {\r

  \  let n = getRandomUidNodeWithAct(R);\r

  \  if (!n) {\r

  \    console.log('there is no oid to remove!!!');\r

  \    return;\r

  \  }\r

  \  let [oid, key] = [n.oid, n.key];\r

  \  let nodeInstances = lookup(R.rNodesOidKey, [oid, key]);\r

  \  console.log('_________ testRemoveOidKey', 'remove all', oid, key,
  nodeInstances);\r

  \  removeOidKey(oid, key, R);\r

  \  updateOutput(R);\r

  }"
testResizeEllipse: "function testResizeEllipse(g) {\r

  \  let el = agEllipse(g, 100, 100);\r

  \  gBg(el, 'violet');\r

  \  gPos(el, 100, 110);\r

  \  gSize(el, 50, 20);\r

  }"
testResizeHex: "function testResizeHex(g) {\r

  \  let el = agHex(g, 50, 50);\r

  \  gBg(el, 'blue');\r

  \  gPos(el, 100, 110);\r

  \  gSize(el, 20, 20, 'hex');\r

  }"
testResizeRect: "function testResizeRect(g) {\r

  \  let el = agRect(g, 100, 50);\r

  \  gBg(el, 'violet');\r

  \  gPos(el, 100, 110);\r

  \  gSize(el, 50, 20);\r

  }"
testRunToEnd: "function testRunToEnd(data, player) {\r

  \  let tuples = getTuples(data);\r

  \  if (empty(tuples)) {\r

  \    let waitingSet = getSet(data, \"waiting_for\");\r

  \    if (empty(waitingSet)) {\r

  \      error(\"NO ACTIONS AND EMPTY WAITING SET... sending empty
  action!!!\");\r

  \      sendAction(player, [\"none\"], d => testRunToEnd(d, player));\r

  \    } else {\r

  \      let nextPlayer = waitingSet[0];\r

  \      sendChangeToPlayer(nextPlayer, d1 => {\r

  \        testRunToEnd(d1, nextPlayer);\r

  \      });\r

  \    }\r

  \  } else {\r

  \    decider.pickTuple(tuples, t => {\r

  \      sendAction(player, t, d => testRunToEnd(d, player));\r

  \    });\r

  \  }\r

  }"
tests0_table_drawloop: "function tests0_table_drawloop() {\r

  \  dTable = mBy('dTable'); mStyle(dTable, { vpadding: 20, bg: BLUE, align:
  'center' });\r

  \  G = { items: [] };\r

  \  TO.running = setInterval(drawloop, 100);\r

  \  test1ttt();\r

  }"
tests1_canvas_vs_dom: "function tests1_canvas_vs_dom() {\r

  \  let dPage = mBy('dTable'); mCenterCenterFlex(dPage); mStyle(dPage, { gap:
  4 });\r

  \  G = { items: [] };\r

  \  dHeader = mDivLine(dPage);\r

  \  mLinebreak(dPage);\r

  \  let st = { w: 300, h: 250, bg: 'randlight' };\r

  \  let c1 = new ccanvas(dPage, st);\r

  \  mLinebreak(dPage);\r

  \  dTable = mDiv(dPage, st);\r

  \  mLinebreak(dPage);\r

  \  let c2 = new ccanvas(dPage, st);\r

  \  mLinebreak(dPage);\r

  \  dFooter = mDivLine(dPage);\r

  \  mLinebreak(dPage);\r

  }"
testSaveLoadUiTree: "function testSaveLoadUiTree() {\r

  \  let uiTree = jsCopyMinus(T.uiTree, 'act', 'ui', 'defParams', 'params');\r

  \  console.log(uiTree);\r

  }"
testsendupdate: "async function testsendupdate() {\r

  \  let data = {\r

  \    user: isdef(U) ? U.name : 'felix',\r

  \    game: 'paris',\r

  \    fen: dixit_setup(['mimi', 'felix']),\r

  \    turn: ['felix'],\r

  \    step: 1,\r

  \  }\r

  \  let o = { type: 'updategame', data: data };\r

  \  let ostring = JSON.stringify(o);\r

  \  mBy('inpost').value = ostring;\r

  \  let res = await route_post_form_callback_js('/singlepost', 'fRoute', data
  => console.log('got from serverr', data))\r

  }"
testSetBgOnSvgInsteadOfG: "function testSetBgOnSvgInsteadOfG() {\r

  \  let g = new MMS({ parent: UIS.a_d_game, type: 'g' }).setDefaults({ bg:
  'yellow' }).attach();\r

  }"
testShapes: "function testShapes() {\r

  \  initRSGData(); showGame(); initDom();\r

  \  let board = makeDrawingArea('board', 'a_d_game', true);\r

  \  let mobj = makeDrawingElement('el1', 'board');\r

  \  let sz = 200;\r

  \  let c = 'blue';\r

  \  let c1 = colorFrom('green', .1);\r

  \  console.log(c1);\r

  \  makeVisual(mobj, 0, 0, sz, sz, c1, 'quad');\r

  \  mobj.text({ txt: 'hallo', fill: colorDarker(c), fz: 30, y: -sz / 3 });\r

  \  mobj.ellipse({ w: sz / 2, h: sz / 2, fill: 'green', alpha: .5 })\r

  \  mobj.attach();\r

  \  mobj.addClickHandler('', () => {\r

  \    mobj.setShape('star');\r

  \  });\r

  \  let ms1 = makeDrawingElement('el2', 'board');\r

  \  makeVisual(ms1, -sz, 0, sz, sz, c1, 'triangle');\r

  \  ms1.attach();\r

  }"
testSolutionConverter: "async function testSolutionConverter() {\r

  \  let series = TEST_SERIES;\r

  \  let sols = await loadSolutions(series);\r

  \  console.log('solutions', sols);\r

  \  await saveSolutions(series, sols);\r

  }"
testSorting: "function testSorting() {\r

  \  let o = { z: [3, 2, 5, 1], d: { w: 2, r: 3 } };\r

  \  let d = mBy('spec');\r

  \  mNodeFilter(o, { dParent: d, title: 'orig' });\r

  \  mNodeFilter(o, { sort: 'all', dParent: d, title: 'sorted' });\r

  \  mNodeFilter(o, { sort: 'keys', dParent: d, title: 'justkeys' });\r

  }"
testSpeech: "async function testSpeech() {\r

  \  await loadAssets();\r

  \  hide('floatingMenu');\r

  \  let table = mBy('table');\r

  \  let e = mEmo('red heart', table, 200);\r

  \  e.style.color = 'red';\r

  \  mFlexLinebreak(table);\r

  \  lang = 'E';\r

  \  matchingWords = ['heart'];\r

  \  if (isEnglish(lang)) {\r

  \    mInstruction('Say the word in English', table);\r

  \  } else {\r

  \    mInstruction('Sag das Wort auf Deutsch', table);\r

  \  }\r

  \  mFlexLinebreak(table);\r

  \  hintMessage = mHeading('HALLO', table, 1, 'hint');\r

  \  mFlexLinebreak(table);\r

  \  resultMessage = mText('jajaja', table);\r

  \  resultMessage.id = 'result';\r

  \  resultMessage.style.marginTop = '200px';\r

  \  resultMessage.style.fontSize = '20pt';\r

  }"
testSplitIntoNumbersAndWords: "function testSplitIntoNumbersAndWords() {\r

  \  let ss = ['1k 2queen', '1 k 12 q', '12king2queen', '31 ace 2queen', '1 3
  3 4', '1 10 3 8', '1J3As', '12 koenig 2 Ass'];\r

  \  for (const s of ss) {\r

  \    let x = splitIntoNumbersAndWords(s);\r

  \  }\r

  }"
testSpotit: "function testSpotit() {\r

  \  let [rows, cols, numCards, setName] = [3, 2, 3, 'animals'];\r

  \  let infos = spotitDeal(rows, cols, numCards, setName);\r

  \  let items = [];\r

  \  for (const info of infos) {\r

  \    let item = spotitCard(info, dTable, { margin: 10 },
  spotitOnClickSymbol);\r

  \    items.push(item);\r

  \  }\r

  \  return;\r

  \  for (const item of items) {\r

  \    for (const k in item.shares) {\r

  \      let other = Items[item.shares[k]];\r

  \    }\r

  \  }\r

  }"
testStep: "function testStep(data, player) {\r

  \  let tuples = getTuples(data);\r

  \  if (empty(tuples)) {\r

  \    let waitingSet = getSet(data, \"waiting_for\");\r

  \    if (empty(waitingSet)) {\r

  \      error(\"NO ACTIONS AND EMPTY WAITING SET... sending empty
  action!!!\");\r

  \      nextAction = () => sendAction(player, [\"none\"], d => testStep(d,
  player));\r

  \    } else {\r

  \      let nextPlayer = waitingSet[0];\r

  \      nextAction = () =>\r

  \        sendChangeToPlayer(nextPlayer, d1 => {\r

  \          testStep(d1, nextPlayer);\r

  \        });\r

  \    }\r

  \  } else {\r

  \    decider.pickTuple(tuples, t => {\r

  \      sendAction(player, t, d => testStep(d, player));\r

  \    });\r

  \  }\r

  \  show(bStep);\r

  }"
testStepByStep: "function testStepByStep(player = \"Axis\", filename =
  \"gov_complete\") {\r

  \  sendLoading(filename, player, d => testStep(d, player), \"raw\");\r

  }"
testSuperGenialDivAndGBehavingTheSame: "function
  testSuperGenialDivAndGBehavingTheSame() {\r

  \  let msD = new MMS({ parent: UIS.a_d_game, type: 'div' }).rect({ x: 20, y:
  100, w: 50, h: 50, bg: 'blue' }).attach();\r

  \  let msG = new MMS({ parent: UIS.a_d_game, type: 'g' }).rect({ x: 20, y:
  100, w: 25, h: 25, bg: 'red' }).attach();\r

  \  console.log(msD.elem, msG.elem)\r

  }"
testSvgGRectTakesBg: "function testSvgGRectTakesBg() {\r

  \  let svg = new MMS({ parent: UIS.a_d_game, type: 'svg'
  }).setDefaults().attach();\r

  \  let g = new MMS({ parent: svg, type: 'g' }).setDefaults({ bg: 'red'
  }).attach();\r

  \  let rect = new MMS({ parent: g, type: 'rect' }).setDefaults({ w: 50, h:
  50, bg: 'yellow' }).attach();\r

  \  g.centerOrigin();\r

  }"
testTtt: "async function testTtt(r, c) {\r

  \  let sdata = genServerDataTtt(r, c);\r

  \  let spec = { ROOT: { cond: { obj_type: 'Board' }, type: 'grid', data:
  '.uid' } };\r

  \  await rParse('direct', { defs: DEFS, spec: spec, sdata: sdata });\r

  \  mBy('message').innerHTML = '(direct) ' + getFunctionCallerName();\r

  }"
testVCentered: "function testVCentered() {\r

  \  let dTable = mBy('table');\r

  \  let d = mDiv(dTable);\r

  \  mSize(d, 100, 100);\r

  \  mColor(d, 'blue');\r

  \  let d1 = mText('HALLO', d);\r

  \  mCenterV(d1);\r

  }"
textCorrectionFactor: "function textCorrectionFactor(text, styles, w, h, fz) {\r

  \  styles.fz = fz;\r

  \  let size = getSizeWithStyles(text, styles);\r

  \  if (Math.abs(size.h - h) > fz) { return size.h / h; } else return 0;\r

  }"
ThreeFoldRep: "function ThreeFoldRep() {\r

  \  var i = 0, r = 0;\r

  \  for (i = 0; i < brd_hisPly; ++i) {\r

  \    if (brd_history[i].posKey == brd_posKey) {\r

  \      r++;\r

  \    }\r

  \  }\r

  \  return r;\r

  }"
Tile: "function Tile(mapX, mapY, x, y, type) {\r

  \  this.x = x;\r

  \  this.y = y;\r

  \  this.mapX = mapX;\r

  \  this.mapY = mapY;\r

  \  this.isCollidable = false;\r

  \  this.collisionCallback = false;\r

  \  this.type = type;\r

  \  this.isAnimated = false;\r

  \  this.isCollidable = false;\r

  \  this.isClickable = false;\r

  \  this.clickCallback = false;\r

  \  this.animationPlaying = false;\r

  \  this.setCollision = function (callBack) {\r

  \    this.collisionCallback = callBack;\r

  \    this.isCollidable = true;\r

  \  }\r

  \  this.setAnimation = function () {\r

  \    this.isAnimated = true;\r

  \  }\r

  \  this.setClick = function (callBack) {\r

  \    this.isClickable = true;\r

  \    this.clickCallback = callBack;\r

  \  }\r

  \  this.checkCollision = function (sprite, w, h) {\r

  \    shw = sprite.width / 2;\r

  \    shh = sprite.height / 2;\r

  \    scx = sprite.x + shw;\r

  \    scy = sprite.y + shh;\r

  \    thw = w / 2;\r

  \    thh = h / 2;\r

  \    tcx = this.x + thw;\r

  \    tcy = this.y + thh;\r

  \    if (Math.abs(scx - tcx) < (thw + shw)) {\r

  \      if (Math.abs(scy - tcy) < (thh + shh)) {\r

  \        this.collisionCallback(this);\r

  \      }\r

  \    }\r

  \  }\r

  }"
tileCondBelongsTo: function tileCondBelongsTo(t, pl, prop) { return t[prop] == pl.id; }
TileMap: "function TileMap(scene) {\r

  \  this.tileSheet = new Image();\r

  \  this.tiles = new Array();\r

  \  this.symbolImageMap = new Array();\r

  \  this.tileAnimations = new Array();\r

  \  this.specificTileAnimations = new Array();\r

  \  this.mapData = false;\r

  \  this.tileWidth = 0;\r

  \  this.tileHeight = 0;\r

  \  this.sheetWidth = 0;\r

  \  this.sheetHeight = 0;\r

  \  this.camera = new Camera(scene);\r

  \  this.loadTileSheet = function (tileWidth, tileHeight, sheetWidth,
  sheetHeight, tileSheet, tileSymbols) {\r

  \    this.tileSheet.src = tileSheet;\r

  \    this.tileWidth = tileWidth;\r

  \    this.tileHeight = tileHeight;\r

  \    this.SheetWidth = sheetWidth;\r

  \    this.SheetHeight = sheetHeight;\r

  \    numRows = Math.floor(this.SheetWidth / this.tileWidth);\r

  \    numCols = Math.floor(this.SheetHeight / this.tileHeight);\r

  \    for (i = 0; i < numRows; i++) {\r

  \      for (j = 0; j < numCols; j++) {\r

  \        if ((i * numCols) + j < tileSymbols.length) {\r

  \          this.symbolImageMap[(i * numCols) + j] = new Array(j *
  this.tileWidth, i * this.tileHeight, tileSymbols[(i * numCols) + j]);\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  this.loadMapData = function (mapArray) {\r

  \    this.mapData = new Array();\r

  \    for (i = 0; i < mapArray.length; i++) {\r

  \      this.mapData.push(new Array());\r

  \      temp = new Array();\r

  \      for (j = 0; j < mapArray[i].length; j++) {\r

  \        k = 0;\r

  \        notConverted = true;\r

  \        while (notConverted && k < this.symbolImageMap.length) {\r

  \          if (mapArray[i][j] == this.symbolImageMap[k][2]) {
  this.mapData[i][j] = k; notConverted = false; }\r

  \          k++;\r

  \        }\r

  \        temp[j] = new Tile(j, i, j * this.tileWidth, i * this.tileHeight,
  k);\r

  \      }\r

  \      this.tiles.push(temp)\r

  \    }\r

  \  }\r

  \  this.drawMap = function () {\r

  \    this.camera.update();\r

  \    ctx = this.camera.context;\r

  \    for (i = 0; i < this.mapData.length; i++) {\r

  \      for (j = 0; j < this.mapData[i].length; j++) {\r

  \        drawX = this.tiles[i][j].x - this.camera.cameraOffsetX;\r

  \        drawY = this.tiles[i][j].y - this.camera.cameraOffsetY;\r

  \        if (0 < drawX < this.camera.cWidth && 0 < drawY <
  this.camera.cHeight) {\r

  \          ctx.save();\r

  \          sheetX = this.symbolImageMap[this.mapData[i][j]][0];\r

  \          sheetY = this.symbolImageMap[this.mapData[i][j]][1];\r

  \          ctx.translate(drawX, drawY);\r

  \          if (this.tiles[i][j].animationPlaying) {
  this.drawTileAnimation(this.tiles[i][j], ctx); }\r

  \          else {\r

  \            ctx.drawImage(this.tileSheet, sheetX, sheetY, this.tileWidth,
  this.tileHeight, 0, 0, this.tileWidth, this.tileHeight);\r

  \            ctx.restore();\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  this.addTileCollision = function (collisionCallback, typeOrX, y) {\r

  \    if (typeof y == \"undefined\") {\r

  \      for (i = 0; i < this.tiles.length; i++) {\r

  \        for (j = 0; j < this.tiles[i].length; j++) {\r

  \          if (this.tiles[i][j].type == typeOrX) {\r

  \            this.tiles[i][j].setCollision(collisionCallback);\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \    else {\r

  \      this.tiles[typeOrX][y].setCollision(collisionCallback);\r

  \    }\r

  \  }\r

  \  this.loadCollisionMap = function (collisionMap) {\r

  \    for (l = 0; l < collisionMap.length; l++) {\r

  \      c = 0;\r

  \      notConverted = true;\r

  \      while (c < this.symbolImageMap.length && notConverted) {\r

  \        if (this.symbolImageMap[c][2] == collisionMap[l][0]) {\r

  \          collisionMap[l][0] = c + 1;\r

  \          notConverted = false;\r

  \        }\r

  \        c++;\r

  \      }\r

  \    }\r

  \    for (i = 0; i < this.tiles.length; i++) {\r

  \      for (j = 0; j < this.tiles[i].length; j++) {\r

  \        k = 0;\r

  \        notAssigned = true;\r

  \        while (k < collisionMap.length && notAssigned) {\r

  \          if (this.tiles[i][j].type == collisionMap[k][0]) {\r

  \            this.tiles[i][j].setCollision(collisionMap[k][1]);\r

  \            notAssigned = false;\r

  \          }\r

  \          k++;\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  this.mapScroll = function (dx, dy) { this.camera.moveCamera(dx, dy); }\r

  \  this.cameraFollowSprite = function (sprite, waitX, waitY) {
  this.camera.followSprite(sprite, waitX, waitY); }\r

  \  this.loadZOrderMap = function (zMap) { }\r

  \  this.addTileAnimation = function (imgWidth, imgHeight, cellWidth,
  cellHeight, tileName, animSheet) {\r

  \    animation = new Animation(animSheet, imgWidth, imgHeight, cellWidth,
  cellHeight);\r

  \    animation.setup();\r

  \    for (i = 0; i < this.symbolImageMap.length; i++) {\r

  \      if (this.symbolImageMap[i][2] = tileName) {\r

  \        this.tileAnimations[i] = animation;\r

  \      }\r

  \    }\r

  \  }\r

  \  this.addSpecificTileAnimation = function (imgWidth, imgHeight, cellWidth,
  cellHeight, tileX, tileY, animSheet) {\r

  \    animation = new Animation(animSheet, imgWidth, imgHeight, cellWidth,
  cellHeight);\r

  \    animation.setup();\r

  \    this.specificTileAnimations[tileX][tileY] = animation;\r

  \  }\r

  \  this.drawTileAnimation = function (tile, ctx) {\r

  \    notSpecific = true;\r

  \    if (typeof this.specificTileAnimations[tile.mapX][tile.mapY] !==
  'undefined' && this.specificTileAnimations[tile.mapX][tile.mapY] !== null) {\r

  \      notSpecific = false;\r

  \      this.specificTileAnimations[tile.mapX][tile.mapY].reset();\r

  \      this.specificTileAnimations[tile.mapX][tile.mapY].drawFrame(ctx);\r

  \    }\r

  \    if (typeof this.tileAnimations[tile.type] !== 'undefined' &&
  this.tileAnimations[tile.type] !== null && notSpecific) {\r

  \      this.tileAnimations[tile.type].reset();\r

  \      this.tileAnimations[tile.type].drawFrame(ctx);\r

  \    }\r

  \  }\r

  \  this.playTileAnimation = function (tile) { tile.animationPlaying = true;
  }\r

  \  this.stopTileAnimation = function (tile) { tile.animationPlaying = false;
  }\r

  \  this.checkCollisions = function (sprite) {\r

  \    tileCoordX = Math.floor(sprite.x / this.tileWidth);\r

  \    tileCoordY = Math.floor(sprite.y / this.tileHeight);\r

  \    checkRowsBegin = tileCoordX - 1;\r

  \    checkRowsEnd = tileCoordX + 2;\r

  \    checkColsBegin = tileCoordY - 1;\r

  \    checkColsEnd = tileCoordY + 2;\r

  \    if (tileCoordX > -1 && tileCoordY > -1 && tileCoordY <
  this.mapData.length && tileCoordX < this.mapData[tileCoordY].length) {\r

  \      if (tileCoordX == 0) { checkRowsBegin = 0; }\r

  \      if (tileCoordX == (this.mapData[tileCoordY].length - 1)) {
  checkRowsEnd = this.mapData.length; }\r

  \      if (tileCoordY == 0) { checkColsBegin = 0; }\r

  \      if (tileCoordY == (this.mapData.length - 1)) { checkColsBegin =
  this.mapData[tileCoordY].length; }\r

  \      for (i = checkColsBegin; i < checkColsEnd; i++) {\r

  \        for (j = checkRowsBegin; j < checkRowsEnd; j++) {\r

  \          if (this.tiles[i][j].isCollidable) {\r

  \            this.tiles[i][j].checkCollision(sprite, this.tileWidth,
  this.tileHeight);\r

  \          }\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  \  this.makeSpriteMapRelative = function (sprite) {
  sprite.setCameraRelative(this.camera); }\r

  \  this.setPosition = function () { }\r

  }"
timeConversion: "function timeConversion(duration, format = 'Hmsh') {\r

  \  const portions = [];\r

  \  const msInHour = 1000 * 60 * 60;\r

  \  const hours = Math.trunc(duration / msInHour);\r

  \  if (format.includes('H')) portions.push((hours < 10 ? '0' : '') +
  hours);\r

  \  duration = duration - (hours * msInHour);\r

  \  const msInMinute = 1000 * 60;\r

  \  const minutes = Math.trunc(duration / msInMinute);\r

  \  if (format.includes('m')) portions.push((minutes < 10 ? '0' : '') +
  minutes);\r

  \  duration = duration - (minutes * msInMinute);\r

  \  const msInSecond = 1000;\r

  \  const seconds = Math.trunc(duration / 1000);\r

  \  if (format.includes('s')) portions.push((seconds < 10 ? '0' : '') +
  seconds);\r

  \  duration = duration - (seconds * msInSecond);\r

  \  const hundreds = duration / 10;\r

  \  if (format.includes('h')) portions.push((hundreds < 10 ? '0' : '') +
  hundreds);\r

  \  return portions.join(':');\r

  }"
timeToMs: function timeToMs(h, m, s) { return ((((h * 60) + m) * 60) + s) * 1000; }
title_tableDiv_bounds: "function title_tableDiv_bounds(dParent, title, o) {\r

  \  let [d, t, w, h] = o_tableDiv_bounds(dParent, o);\r

  \  let ti = document.createElement('p');\r

  \  ti.innerHTML = title;\r

  \  t.prepend(ti);\r

  \  return [d, d.offsetWidth, d.offsetHeight];\r

  }"
to_admin: "function to_admin() {\r

  \  show('dAdminButtons');\r

  \  U = DB.users.mimi; show_user(DB.users[U.name]);\r

  \  to_games();\r

  }"
to_aristocard: "function to_aristocard(ckey, sz = 100, color = RED, w) {\r

  \  let info = jsCopy(C52Cards[ckey.substring(0, 2)]);\r

  \  info.key = ckey;\r

  \  info.cardtype = ckey[2];\r

  \  let [r, s] = [info.rank, info.suit];\r

  \  info.val = r == 'A' ? 1 : 'TJQK'.includes(r) ? 10 : Number(r);\r

  \  info.color = color;\r

  \  info.sz = info.h = sz;\r

  \  info.w = valf(w, sz * .7);\r

  \  info.irank = 'A23456789TJQK'.indexOf(r);\r

  \  info.isuit = 'SHCD'.indexOf(s);\r

  \  info.isort = info.isuit * 13 + info.irank;\r

  \  return info;\r

  }"
to_commissioncard: function to_commissioncard(ckey, sz = 40, color = GREEN, w) {
  return to_aristocard(ckey, sz, color); }
to_create_table: "function to_create_table() {\r

  \  let t = create_table();\r

  \  server_send(t, 'create_table_and_start', to_table);\r

  }"
to_games: "function to_games() {\r

  \  console.log('games fuer user', U.name, 'suchen');\r

  \  get_games(U.name, show_games_menu);\r

  }"
to_lat_lng: function to_lat_lng(pts = []) { return points_to_waypoints(pts); }
to_luxurycard: function to_luxurycard(ckey, sz = 100, color = 'gold', w) {
  return to_aristocard(ckey, sz, color); }
to_rumorcard: function to_rumorcard(ckey, sz = 40, color = GREEN, w) { return
  to_aristocard(ckey, sz, color); }
to_server: "function to_server(req, type, to_php = true) {\r

  \  where(type);\r

  \  if (!to_php) {\r

  \    server_offline(req, type);\r

  \  } else if (is_online()) {\r

  \    server_online(req, type);\r

  \  } else {\r

  \    if (type == 'chat') { alert('no internet!');
  mClassReplace(mBy(\"label_chat\"), 'enabled', 'disabled'); }\r

  \    server_offline(req, type);\r

  \  }\r

  }"
to_table: "function to_table() {\r

  \  console.log('table should be presented!')\r

  }"
to_words: "function to_words(x) {\r

  \  let list = x.split('\\n');\r

  \  let di = {};\r

  \  list.map(x => di[x.toLowerCase()] = x);\r

  \  return di;\r

  }"
toBase10: "function toBase10(s, base = 16) {\r

  \  let s1 = reverseString(s.toLowerCase());\r

  \  let res = 0;\r

  \  let mult = 1;\r

  \  for (let i = 0; i < s1.length; i++) {\r

  \    let l = s1[i];\r

  \    let hexarr = ['a', 'b', 'c', 'd', 'e', 'f'];\r

  \    let n = isNumber(l) ? Number(l) : 10 + hexarr.indexOf(l);\r

  \    res += mult * n;\r

  \    mult *= base;\r

  \  }\r

  \  return res;\r

  }"
toBoardString: "function toBoardString(arr, rows, cols) {\r

  \  let s = '\\n';\r

  \  for (let r = 0; r < rows; r++) {\r

  \    for (let c = 0; c < cols; c++) {\r

  \      let item = arr[r * cols + c];\r

  \      s += '' + (nundef(item) ? '_' : item) + ' ';\r

  \    }\r

  \    s += '\\n';\r

  \  }\r

  \  return s;\r

  }"
toDegree: function toDegree(rad) { return Math.floor(180 * rad / Math.PI); }
toElem: "function toElem(d) { return isString(d) ? mBy(d) : d; }"
toggle_apps: function toggle_apps() { if (isEmpty(mBy('dApps').innerHTML))
  show_apps(); else iClear('dApps'); }
toggle_bw_symbol: "function toggle_bw_symbol(d) {\r

  \  if (nundef(d)) d = document.getElementById('tbbw');\r

  \  d = d.getElementsByTagName('i')[0];\r

  \  if (isdef(d)) {\r

  \    if (d.classList.contains('fa-car')) {\r

  \      d.classList.remove('fa-car');\r

  \      d.classList.add('fa-star');\r

  \      mStyle(d, { fg: 'silver' });\r

  \    } else {\r

  \      d.classList.remove('fa-star');\r

  \      d.classList.add('fa-car');\r

  \      mStyle(d, { fg: 'transparent' });\r

  \    }\r

  \  }\r

  }"
toggle_face: function toggle_face(item) { if (item.faceUp) face_down(item); else
  face_up(item); }
toggle_fiddle: function toggle_fiddle() { if (nundef(dFiddle)) show_fiddle();
  else { fiddleSave(); for (const d of [dConsole, dFiddle, dSearch, dSidebar]) {
  iClear(d); } dFiddle = null; } }
toggle_games: function toggle_games() { if (isEmpty(mBy('dGames').innerHTML))
  show_games(); else iClear('dGames'); }
toggle_games_off: "function toggle_games_off() { let a = mBy('aGames');
  hide('dGames'); mStyle(a, { bg: 'silver' }); }"
toggle_games_on: "function toggle_games_on() { let a = mBy('aGames'); mStyle(a,
  { bg: 'skyblue' }); }"
toggle_layers_control: "function toggle_layers_control() {\r

  \  if (DA.layers_control) { M.map.removeControl(DA.layers_control);
  DA.layers_control = null; }\r

  \  else {\r

  \    let baseLayers = get_layer_options();\r

  \    let overlayLayers = get_layer_options();\r

  \    DA.layers_control = L.control.layers(baseLayers, overlayLayers, {
  collapsed: false })\r

  \    DA.layers_control.addTo(M.map);\r

  \  }\r

  }"
toggle_list_member: function toggle_list_member(arr, el) { arrToggleMember(arr, el); }
toggle_mini_user_info: "function toggle_mini_user_info() {\r

  \  if (nundef(DA.left_panel) || DA.left_panel == 'open')
  close_mini_user_info(); else open_mini_user_info();\r

  }"
toggle_polling_status: "function toggle_polling_status() {\r

  \  if (is_polling_on()) {\r

  \    stop_polling();\r

  \    let b = mBy('b_polling');\r

  \    b.className = 'buttonClass donebutton enabled off';\r

  \    b.innerHTML = 'polling off';\r

  \  } else {\r

  \    allow_polling();\r

  \    let b = mBy('b_polling');\r

  \    b.className = 'buttonClass donebutton enabled on';\r

  \    b.innerHTML = 'polling on';\r

  \  }\r

  \  console.log('Polling Status:', is_polling_on() ? 'ON' : 'OFF');\r

  }"
toggle_select: "function toggle_select(item, selected, selstyle = 'selected')
  {\r

  \  let ui = iDiv(item);\r

  \  item.isSelected = !item.isSelected;\r

  \  if (item.isSelected) {\r

  \    mStyleOrClass(ui, selstyle);\r

  \  } else if (isString(selstyle)) {\r

  \    mClassRemove(ui, selstyle);\r

  \  } else if (isdef(item.style)) {\r

  \    mStyle(ui, item.style);\r

  \  } else {\r

  \    mStyleUndo(ui, selstyle);\r

  \  }\r

  \  if (isdef(selected)) {\r

  \    if (isList(selected)) {\r

  \      if (item.isSelected) {\r

  \        console.assert(!selected.includes(item), 'UNSELECTED PIC IN
  PICLIST!!!!!!!!!!!!')\r

  \        selected.push(item);\r

  \      } else {\r

  \        console.assert(selected.includes(item), 'PIC NOT IN PICLIST BUT HAS
  BEEN SELECTED!!!!!!!!!!!!')\r

  \        removeInPlace(selected, item);\r

  \      }\r

  \    } else {\r

  \      mStyle(iDiv(selected), selected.style);\r

  \      selected.isSelected = false;\r

  \    }\r

  \  }\r

  \  return item.isSelected ? item : null;\r

  }"
toggle_sidebar: "function toggle_sidebar() {\r

  \  if (nundef(DA.left_panel) || DA.left_panel == 'open') close_sidebar();
  else open_sidebar();\r

  }"
toggle_sound: "function toggle_sound() {\r

  \  U.settings.silent = !U.settings.silent;\r

  \  if (isdef(G)) G.silent = U.settings.silent;\r

  \  set_sound(U.settings.silent);\r

  }"
toggle_tables_off: "function toggle_tables_off() { let a = mBy('aTables');
  hide('dTables'); mStyle(a, { bg: 'silver' }); }"
toggle_tables_on: "function toggle_tables_on() { let a = mBy('aTables');
  mStyle(a, { bg: '#afe78f' }); } //'lightgreen' }); }"
toggle_users_off: "function toggle_users_off() { let a = mBy('aUsers');
  hide('dUsers'); mStyle(a, { bg: 'silver' }); }"
toggle_users_on: "function toggle_users_on() { let a = mBy('aUsers'); mStyle(a,
  { bg: 'coral' }); }"
toggleCollapsible: "function toggleCollapsible(ev) {\r

  \  let b = ev.target;\r

  \  b.classList.toggle(\"active\");\r

  \  var content = getLinkContainerId(b.id);\r

  \  if (isVisible(content)) hide(content); else show(content);\r

  }"
toggleFace: function toggleFace(pic) { if (pic.isFaceUp) turnFaceDown(pic); else
  turnFaceUp(pic); }
toggleFaceSimple: function toggleFaceSimple(pic) { if (pic.isFaceUp)
  turnFaceDownSimple(pic); else turnFaceUpSimple(pic); }
toggleItemSelection: "function toggleItemSelection(item, selectedItems) {\r

  \  let ui = iDiv(item);\r

  \  item.isSelected = nundef(item.isSelected) ? true : !item.isSelected;\r

  \  if (item.isSelected) mClass(ui, 'framedPicture'); else mRemoveClass(ui,
  'framedPicture');\r

  \  if (isdef(selectedItems)) {\r

  \    if (item.isSelected) {\r

  \      console.assert(!selectedItems.includes(item), 'UNSELECTED PIC IN
  PICLIST!!!!!!!!!!!!')\r

  \      selectedItems.push(item);\r

  \    } else {\r

  \      console.assert(selectedItems.includes(item), 'PIC NOT IN PICLIST BUT
  HAS BEEN SELECTED!!!!!!!!!!!!')\r

  \      removeInPlace(selectedItems, item);\r

  \    }\r

  \  }\r

  }"
togglePic: "function togglePic(ev) {\r

  \  let id = evToClosestId(ev);\r

  \  console.log(id)\r

  \  let item = UIS[id];\r

  \  console.log(item)\r

  \  if (isdef(item.pic)) removePic(item); else addPic(item, item.key);\r

  }"
toggleSelection: "function toggleSelection(pic, selected, clSelected =
  'framedPicture', clUnselected = null) {\r

  \  let ui = iDiv(pic);\r

  \  pic.isSelected = !pic.isSelected;\r

  \  if (pic.isSelected) {\r

  \    if (isdef(clUnselected)) mClassRemove(ui, clUnselected);\r

  \    mClass(ui, clSelected);\r

  \  } else {\r

  \    mClassRemove(ui, clSelected);\r

  \    if (isdef(clUnselected)) mClass(ui, clUnselected);\r

  \  }\r

  \  if (isdef(selected)) {\r

  \    if (isList(selected)) {\r

  \      if (pic.isSelected) {\r

  \        console.assert(!selected.includes(pic), 'UNSELECTED PIC IN
  PICLIST!!!!!!!!!!!!')\r

  \        selected.push(pic);\r

  \      } else {\r

  \        console.assert(selected.includes(pic), 'PIC NOT IN PICLIST BUT HAS
  BEEN SELECTED!!!!!!!!!!!!')\r

  \        removeInPlace(selected, pic);\r

  \      }\r

  \    } else {\r

  \      mClassRemove(iDiv(selected), clSelected);\r

  \      if (isdef(clUnselected)) mClass(iDiv(selected), clUnselected);\r

  \      selected.isSelected = false;\r

  \    }\r

  \  }\r

  \  return pic.isSelected ? pic : null;\r

  }"
toggleSelectionOfPicture: "function toggleSelectionOfPicture(pic, selectedPics,
  className = 'framedPicture') {\r

  \  let ui = iDiv(pic);\r

  \  pic.isSelected = !pic.isSelected;\r

  \  if (pic.isSelected) mClass(ui, className); else mClassRemove(ui,
  className);\r

  \  if (isdef(selectedPics)) {\r

  \    if (pic.isSelected) {\r

  \      console.assert(!selectedPics.includes(pic), 'UNSELECTED PIC IN
  PICLIST!!!!!!!!!!!!')\r

  \      selectedPics.push(pic);\r

  \    } else {\r

  \      console.assert(selectedPics.includes(pic), 'PIC NOT IN PICLIST BUT
  HAS BEEN SELECTED!!!!!!!!!!!!')\r

  \      removeInPlace(selectedPics, pic);\r

  \    }\r

  \  }\r

  }"
toggleSettings: function toggleSettings() { if (isVisible2('dSettings'))
  closeSettings(); else openSettings(); }
toggleSidebar: "function toggleSidebar(ev, k, key) {\r

  \  if (nundef(DA.countKey)) { DA.countKey = {}; }\r

  \  if (nundef(DA.countKey[k])) { DA.countKey[k] = 0; }\r

  \  DA.countKey[k]++;\r

  \  let isOdd = DA.countKey[k] % 2 == 1;\r

  \  if (key == 'Escape' || ev.ctrlKey && k == 122) {\r

  \    if (isOdd) {\r

  \      mBy('left_panel').style.flex = 0;\r

  \      setTimeout(() => {\r

  \        show('mini_profile_img');\r

  \        show('mini_username');\r

  \      }, 500)\r

  \      mBy('mini_menu_right').style.display = 'flex';\r

  \    } else {\r

  \      mBy('left_panel').style.flex = 1;\r

  \      hide('mini_profile_img');\r

  \      hide('mini_username');\r

  \      mBy('mini_menu_right').style.display = 'none';\r

  \    }\r

  \  }\r

  }"
toggleSound: "function toggleSound(key) {\r

  \  if (DA.isSound == true) { pauseSound(); DA.isSound = false; return; }\r

  \  playSound(key);\r

  \  DA.isSound = true;\r

  }"
toggleTheme: "function toggleTheme() {\r

  \  let bg = colorHex(dMain.style.backgroundColor);\r

  \  let lum = getBrightness(bg);\r

  \  console.log('current:\\nbg', bg, '\\nbaseColor', DA.pageBaseColor,
  '\\nlum', lum);\r

  \  if (bg != DA.pageBaseColor) setPageBackground(DA.pageBaseColor, 'white',
  false);\r

  \  else if (lum <= .5) setPageBackground(colorLighter(bg), 'black',
  false);\r

  \  else setPageBackground(colorDarker(bg, 1), 'white', false);\r

  }"
toggleTooltips: "function toggleTooltips(b) {\r

  \  if (S.settings.tooltips) {\r

  \    b.textContent = 'tooltips: OFF';\r

  \    S.settings.tooltips = false;\r

  \  } else {\r

  \    b.textContent = 'tooltips: ON';\r

  \    S.settings.tooltips = true;\r

  \  }\r

  }"
toHTMLString: "function toHTMLString(msg) {\r

  \  msg = JSON.stringify(msg);\r

  \  msg = msg.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\r

  \  msg = msg.replace('\\\\n', '<br>');\r

  \  msg = msg.replace(/\\\\n/g, '<br>');\r

  \  msg = msg.replace(/\"/g, '');\r

  \  return msg.trim();\r

  }"
toLetterArray: function toLetterArray(s) { return toLetterList(s); }
toLetterList: "function toLetterList(s) {\r

  \  return [...s];\r

  }"
toLetters: function toLetters(s) { return [...s]; }
toList: "function toList(x) { return isList(x) ? x : [x]; }"
toLocalStorage: function toLocalStorage(o, name = '_all') {
  localStorage.setItem(name, JSON.stringify(o)); }
toModulo: function toModulo(n, modul) { rem = n % modul; n = n - rem; if (n < 0)
  n = 0; return n; }
toNoun: function toNoun(s) { return capitalize(s.toLowerCase()); }
too_many_string_items: function too_many_string_items(A) { return
  A.items.filter(x => nundef(x.o)).length >= 8; }
toogle_internet_status: "function toogle_internet_status() {\r

  \  if (is_online()) {\r

  \    go_offline();\r

  \    let b = mBy('b_internet');\r

  \    b.className = 'statusbutton enabled off';\r

  \    b.innerHTML = 'offline';\r

  \  } else {\r

  \    go_online();\r

  \    db_save();\r

  \    let b = mBy('b_internet');\r

  \    b.className = 'statusbutton enabled on';\r

  \    b.innerHTML = 'online';\r

  \  }\r

  \  console.log('InternetStatus:', is_online() ? 'online' : 'OFFLINE');\r

  }"
toolbar_check: "function toolbar_check() {\r

  \  if (isEmpty(G.selist)) { mDisable('bclear'); mDisable('bnext') } else {
  mEnable('bclear'); mEnable('bnext') }\r

  \  if (isEmpty(G.hist)) { mDisable('bback'); } else { mEnable('bback'); }\r

  }"
top_card_to_hands_abwechselnd: "function top_card_to_hands_abwechselnd(deck,
  hand1, hand2) {\r

  \  DA.hand = hand1;\r

  \  deck.items.map(x => {\r

  \    mStyle(iDiv(x), { cursor: 'pointer' });\r

  \    iDiv(x).onclick = () => {\r

  \      anim_from_deck_to_handX(x, deck, DA.hand);\r

  \      DA.hand = DA.hand == hand1 ? hand2 : hand1;\r

  \    }\r

  \  });\r

  }"
top_card_to_market: "function top_card_to_market(deck, market) {\r

  \  deck.items.map(x => {\r

  \    mStyle(iDiv(x), { cursor: 'pointer' });\r

  \    iDiv(x).onclick = () => {\r

  \      anim_from_deck_to_marketX(x, deck, market);\r

  \    }\r

  \  });\r

  }"
top_elem_from_to: function top_elem_from_to(arr1, arr2) { arr2.push(arr1.shift()); }
top_elem_from_to_top: function top_elem_from_to_top(arr1, arr2) { arr2.unshift(arr1.shift()); }
topCard: function topCard(deck) { return deck.cards[0]; }
topCardShouldGoTo: "function topCardShouldGoTo(deck0, deck1, faceUp) {\r

  \  let c = Deck.transferTopFromToBottom(deck0, deck1)\r

  \  if (faceUp == true) Card52.turnFaceUp(c);\r

  \  mRemoveStyle(c.div, ['cursor', 'position']);\r

  }"
toRadian: function toRadian(deg) { return deg * (Math.PI / 180); }
TOSQ: function TOSQ(m) { return (((m) >> 7) & 0x7F); }
tossCoin: "function tossCoin(percent) {\r

  \  let r = Math.random();\r

  \  r *= 100;\r

  \  return r < percent;\r

  }"
totalFreeze: "function totalFreeze() {\r

  \  hide('passToNextPlayerUI')\r

  \  show('freezer');\r

  }"
toUmlaut: "function toUmlaut(w) {\r

  \  if (isList(w)) {\r

  \    let res = [];\r

  \    for (const w1 of w) res.push(toUmlaut(w1));\r

  \    return res;\r

  \  } else {\r

  \    w = replaceAll(w, 'ue', 'ü');\r

  \    w = replaceAll(w, 'ae', 'ä');\r

  \    w = replaceAll(w, 'oe', 'ö');\r

  \    w = replaceAll(w, 'UE', 'Ü');\r

  \    w = replaceAll(w, 'AE', 'Ä');\r

  \    w = replaceAll(w, 'OE', 'Ö');\r

  \    return w;\r

  \  }\r

  }"
toWords: "function toWords(s, allow_ = false) {\r

  \  let arr = allow_ ? s.split(/[\\W]+/) : s.split(/[\\W|_]+/);\r

  \  return arr.filter(x => !isEmpty(x));\r

  }"
toWordsSpeech: "function toWordsSpeech(s) {\r

  \  var th = ['', 'thousand', 'million', 'billion', 'trillion'];\r

  \  var dg = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',
  'eight', 'nine'];\r

  \  var tn = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen',
  'sixteen', 'seventeen', 'eighteen', 'nineteen'];\r

  \  var tw = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy',
  'eighty', 'ninety'];\r

  \  s = s.toString();\r

  \  s = s.replace(/[\\, ]/g, '');\r

  \  if (s != parseFloat(s)) return 'not a number';\r

  \  var x = s.indexOf('.');\r

  \  if (x == -1) x = s.length;\r

  \  if (x > 15) return 'too big';\r

  \  var n = s.split('');\r

  \  var str = '';\r

  \  var sk = 0;\r

  \  for (var i = 0; i < x; i++) {\r

  \    if ((x - i) % 3 == 2) {\r

  \      if (n[i] == '1') { str += tn[Number(n[i + 1])] + ' '; i++; sk = 1;
  }\r

  \      else if (n[i] != 0) { str += tw[n[i] - 2] + ' '; sk = 1; }\r

  \    } else if (n[i] != 0) {\r

  \      str += dg[n[i]] + ' '; if ((x - i) % 3 == 0) str += 'hundred '; sk =
  1;\r

  \    } if ((x - i) % 3 == 1) {\r

  \      if (sk) str += th[(x - i - 1) / 3] + ' '; sk = 0;\r

  \    }\r

  \  }\r

  \  if (x != s.length) {\r

  \    var y = s.length;\r

  \    str += 'point ';\r

  \    str.replace(/\\s+/g, ' ');\r

  \  }\r

  \  return str.trim();\r

  }"
toYaml: function toYaml(o) { return jsonToYaml(o); }
trace: function trace() { if (isTraceOn) console.log('___ ',
  getFunctionsNameThatCalledThisFunction(), '\n', ...arguments); }
transColor: "function transColor(r, g, b, a) {\r

  \  return 'rgba(r,g,b,a)';\r

  }"
transferElement: "function transferElement() {\r

  \  let h = Daat.hand;\r

  \  let item = Daat.item;\r

  \  h.addTop(item.val);\r

  \  let zHand = Daat.zone;\r

  \  clearElement(zHand);\r

  \  let items = i52(h.cards());\r

  \  let handItem = Daat.iHand = iSplay(items, zHand);\r

  }"
transformToString: "function transformToString(k, val, refs) {\r

  \  if (val && isDict(val) && '_set' in val) { val = val._set; }\r

  \  if (k == 'visible' && !isEmpty(val) && !isDict(val[0])) { val = val.map(x
  => { return { _player: x } }); }\r

  \  let sval = null;\r

  \  if (isList(val) && isEmpty(val)) { sval = '{ }'; }\r

  \  else if (isList(val) && isString(val[0])) { sval = '{' + val.join(',') +
  '}' }\r

  \  else if (isListOf(val, '_obj')) { sval = makeRefLinkDiv4ListOf_obj(val,
  refs); }\r

  \  else if (isListOf(val, '_player')) { sval =
  makeRefLinkDiv4ListOf_player(val, refs); }\r

  \  else if (val && isDict(val) && '_obj' in val) { sval =
  makeRefLinkDiv4_obj(val, refs); }\r

  \  else if (val && isDict(val) && '_ndarray' in val) { sval =
  makeRefLinkDiv4MatrixOf_obj(val, refs) }\r

  \  else if (val && isDict(val) && '_player' in val) { sval =
  makeRefLinkDiv4_player(val, refs); }\r

  \  else if (isDictOrList(val)) {\r

  \    sval = tableHTMLX(val, refs);\r

  \  }\r

  \  else sval = simpleRep(val);\r

  \  return sval;\r

  }"
transitionTo: "function transitionTo(id) {\r

  \  let delay = dCurrent ? .1 : 0;\r

  \  hideCurrent();\r

  \  setTimeout(() => setCurrent(id), delay);\r

  }"
translateStylesToCy: "function translateStylesToCy(styles, group) {\r

  \  let di = {};\r

  \  for (const k in styles) {\r

  \    let v = styles[k];\r

  \    let [prop, val] = translateToCssStyle(k, v, true);\r

  \    if (group == 'edge' && k == 'bg') di['line-color'] = val;\r

  \    else if (prop == 'shape' && val == 'hex') {\r

  \      di.shape = 'polygon';\r

  \      di['shape-polygon-points'] = [0, -1, 1, -0.5, 1, 0.5, 0, 1, -1, 0.5,
  -1, -0.5];\r

  \    }\r

  \    else di[prop] = val;\r

  \  }\r

  \  return di;\r

  }"
translateToCssStyle: function translateToCssStyle(prop, val) { return mStyleTranslate(prop, val); }
translateToGerman: "function translateToGerman(w) {\r

  \  if (isNumber(w)) return w;\r

  \  else if (isdef(DD[w])) return DD[w];\r

  \  else return w;\r

  }"
trash111: "function trash111() {\r

  \  let tgServer = G.serverData.tupleGroups;\r

  \  for (const tg of tgServer) {\r

  \    let desc = tg.desc.line.toString();\r

  \    let choices = tg.tuples._set;\r

  \    let tuples = choices.map(x => x._tuple);\r

  \    tupleGroups.push({ desc: desc, tuples: tuples });\r

  \  }\r

  \  return tupleGroups;\r

  }"
tree_add: "function tree_add() {\r

  \  let root = C.root;\r

  \  if (root.phase == 'spring') {\r

  \    C.changed = false;\r

  \    assertion(root, 'ROOT IS NULL BEI TREE_ADD!!!!!!!!!!!!!')\r

  \    if (!root.done) {\r

  \      let b = create_branch(root, root.angle, root.len * root.dlen,
  root.color);\r

  \      lookupAddToList(C.items, [b.t], b);\r

  \      C.changed = true;\r

  \    } else {\r

  \      for (const b of C.items.branch.filter(x => !x.done)) {\r

  \        if (b.age < root.depth) {\r

  \          let br = root.branching;\r

  \          for (const a of br) {\r

  \            let o = create_branch(b, b.angle + toRadian(a), b.len *
  root.dlen, colorMix(b.color, 'lime', 3)); lookupAddToList(C.items, [o.t],
  o);\r

  \          }\r

  \        } else {\r

  \          let o = create_leaf(b, root); lookupAddToList(C.items, [o.t],
  o);\r

  \        }\r

  \        C.changed = true;\r

  \        root.maxage = b.age + 1;\r

  \        b.done = true;\r

  \      }\r

  \    }\r

  \    if (!C.changed) { root.minage = 0; root.phase = 'summer'; }\r

  \  }\r

  \  else if (root.phase == 'summer') {\r

  \    let colors = ['darkgreen', 'olive', '#8B9216', '#A79F0F', '#EDA421',
  '#E98604', '#DF3908', '#C91E0A', '#8C584A'];\r

  \    let changed = mutate_colors('leaf', colors);\r

  \    if (!changed) root.phase = 'autumn';\r

  \    root.jitter = true;\r

  \    C.changed = true;\r

  \  }\r

  \  else if (root.phase == 'autumn') {\r

  \    root.jitter = false;\r

  \    C.changed = true;\r

  \    let falling = C.items.leaf.filter(l => l.p.y < CV.height);\r

  \    if (isEmpty(falling)) {\r

  \      C.changed = false; root.phase = 'winter';\r

  \    } else {\r

  \      for (const b of falling) { b.p = { x: b.p.x + Math.random() * .51, y:
  b.p.y + Math.random() * 3 }; }\r

  \    }\r

  \  }\r

  \  else if (root.phase == 'winter') {\r

  \    let colors = ['#8E2100', '#5C1306', '#371C0F', '#1C1B19'];\r

  \    let changed = mutate_colors('branch', colors);\r

  \    if (!changed) root.phase = 'over';\r

  \    C.changed = true;\r

  \  }\r

  \  else if (root.phase == 'over') { root.animated = false; }\r

  \  if (root.animated) TO.iv1 = setTimeout(tree_add, root.speed[root.phase]);
  else TO.iv1 = setTimeout(() => G_init('tree'), 3000);\r

  }"
tree_clear: function tree_clear() { G_clear(); onclick_menu_item('tree'); }
tree_init: "function tree_init(offx = 0, offy = 0, options = {}) {\r

  \  let root = {\r

  \    done: false,\r

  \    t: 'root',\r

  \    age: 0,\r

  \    p2: { x: offx + CV.width / 2, y: offy + CV.height },\r

  \    len: valf(options.len, 100),\r

  \    angle: toRadian(90),\r

  \    thickness: valf(options.thick, 20),\r

  \    color: valf(options.color, 'sienna'),\r

  \    depth: NATURE.depth,\r

  \    branching: NATURE.branching,\r

  \    dlen: .7,\r

  \    dthickness: .7,\r

  \    phase: 'spring',\r

  \    speed: { spring: 100, summer: 100, autumn: 25, winter: 100, over: 2000
  },\r

  \    animated: false,\r

  \    jitter: false,\r

  \  };\r

  \  return root;\r

  }"
treee: "function treee(o) {\r

  \  let s = '<table class=\"tttable\">';\r

  \  for (const k in o) {\r

  \    s += '<tr><th>' + k + '</th><td>';\r

  \    let val = o[k];\r

  \    let sval = isSet(val) ? empty(val._set) ? '{ }' : simpleRep(val) :
  isDict(val) ? treee(val) : simpleRep(val);\r

  \    s += sval + '</td>';\r

  \  }\r

  \  s += '</table>';\r

  \  return s;\r

  }"
tri0: "function tri0() {\r

  \  let sq3 = 1.73205080757;\r

  \  let sq3b = Math.sqrt(3);\r

  \  console.log('sq3', sq3, 'sq3b', sq3b)\r

  }"
tri1: "function tri1() {\r

  \  let sq3 = Math.sqrt(3);\r

  \  let a = 48;\r

  \  let wp = a / 4, hp = a / 4, h = sq3 * a / 2;\r

  \  let [xoff, dx, yoff, dy] = [h + wp / 2, 2 * h, hp / 2, a / 2];\r

  \  let [rows, maxcols] = [3, 4];\r

  \  let ys = 2 + 3 * rows;\r

  \  let xs = maxcols;\r

  \  let x = xoff, y = yoff;\r

  \  let pts = [];\r

  \  let infos = [];\r

  \  let idx = 0;\r

  \  let yEven = true;\r

  \  for (let i = 0; i < ys; i++) {\r

  \    let tcolOffset = yEven ? 1 : 0;\r

  \    let isCenterRow = i >= 2 && ((i - 2) % 3) == 0;\r

  \    for (let j = 0; j < xs + (1 - tcolOffset); j++) {\r

  \      let pt = { x: x, y: y };\r

  \      pts.push(pt);\r

  \      infos.push({ index: idx, tcol: tcolOffset + 2 * j, trow: i, x: x, y:
  y, pt: pt, isCenterRow: isCenterRow, isHexCenter: isCenterRow, isCenterCol: j
  % 2 == 1 });\r

  \      x += dx;\r

  \      idx += 1;\r

  \    }\r

  \    yEven = !yEven;\r

  \    y += dy; x = i % 2 ? xoff : wp / 2;\r

  \  }\r

  \  let byrc = {};\r

  \  for (const i of infos) {\r

  \    lookupSet(byrc, [i.trow, i.tcol], i.index);\r

  \  }\r

  \  console.log('byrc', byrc)\r

  \  let byxy = {};\r

  \  let adjList = [];\r

  \  let di = {};\r

  \  for (const info of infos) {\r

  \    let [r, c] = [info.trow, info.tcol];\r

  \    info.nodes = [\r

  \      lookup(byrc, [r - 2, c]),\r

  \      lookup(byrc, [r - 1, c + 1]),\r

  \      lookup(byrc, [r + 1, c + 1]),\r

  \      lookup(byrc, [r + 2, c]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \    ];\r

  \    for (let i = 0; i < 6; i++) {\r

  \      let n1 = info.nodes[i];\r

  \      if (n1 == null) continue;\r

  \      let n2 = info.nodes[(i + 1 % 6)];\r

  \      if (n2 == null) continue;\r

  \      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;\r

  \      lookupSet(di, [n1, n2], true);\r

  \      adjList.push([n1, n2]);\r

  \    }\r

  \    info.neighbors = [\r

  \      lookup(byrc, [r - 3, c + 1]),\r

  \      lookup(byrc, [r, c + 2]),\r

  \      lookup(byrc, [r + 3, c + 1]),\r

  \      lookup(byrc, [r + 3, c - 1]),\r

  \      lookup(byrc, [r, c - 2]),\r

  \      lookup(byrc, [r - 3, c - 1]),\r

  \    ];\r

  \  }\r

  \  let sym = chooseRandom(getAnimals());\r

  \  let items = [];\r

  \  for (const info of infos) {\r

  \    let item = info.isHexCenter ? drawBee(info.pt) : drawSym(sym,
  info.pt);\r

  \    items.push(item);\r

  \  }\r

  }"
tri2: "function tri2() {\r

  \  let sq3 = Math.sqrt(3);\r

  \  let a = 48;\r

  \  let wp = a / 4, hp = a / 4, h = sq3 * a / 2;\r

  \  let [xoff, dx, yoff, dy] = [h + wp / 2, 2 * h, hp / 2, a / 2];\r

  \  let [rows, maxcols] = [3, 4];\r

  \  let ys = 2 + 3 * rows;\r

  \  let xs = maxcols;\r

  \  let x = xoff, y = yoff;\r

  \  let pts = [];\r

  \  let infos = [];\r

  \  let idx = 0;\r

  \  let yEven = true;\r

  \  for (let i = 0; i < ys; i++) {\r

  \    let tcolOffset = yEven ? 1 : 0;\r

  \    let isCenterRow = i >= 2 && ((i - 2) % 3) == 0;\r

  \    for (let j = 0; j < xs + (1 - tcolOffset); j++) {\r

  \      let pt = { x: x, y: y };\r

  \      pts.push(pt);\r

  \      infos.push({ index: idx, tcol: tcolOffset + 2 * j, trow: i, x: x, y:
  y, pt: pt, isCenterRow: isCenterRow, isHexCenter: isCenterRow, isCenterCol: j
  % 2 == 1 });\r

  \      x += dx;\r

  \      idx += 1;\r

  \    }\r

  \    yEven = !yEven;\r

  \    y += dy; x = i % 2 ? xoff : wp / 2;\r

  \  }\r

  \  let byrc = {};\r

  \  for (const i of infos) {\r

  \    lookupSet(byrc, [i.trow, i.tcol], i.index);\r

  \  }\r

  \  console.log('byrc', byrc)\r

  \  let byxy = {};\r

  \  let adjList = [];\r

  \  let di = {};\r

  \  for (const info of infos) {\r

  \    let [r, c] = [info.trow, info.tcol];\r

  \    info.nodes = [\r

  \      lookup(byrc, [r - 2, c]),\r

  \      lookup(byrc, [r - 1, c + 1]),\r

  \      lookup(byrc, [r + 1, c + 1]),\r

  \      lookup(byrc, [r + 2, c]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \    ];\r

  \    for (let i = 0; i < 6; i++) {\r

  \      let n1 = info.nodes[i];\r

  \      if (n1 == null) continue;\r

  \      let n2 = info.nodes[(i + 1 % 6)];\r

  \      if (n2 == null) continue;\r

  \      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;\r

  \      lookupSet(di, [n1, n2], true);\r

  \      adjList.push([n1, n2]);\r

  \    }\r

  \    info.neighbors = [\r

  \      lookup(byrc, [r - 3, c + 1]),\r

  \      lookup(byrc, [r, c + 2]),\r

  \      lookup(byrc, [r + 3, c + 1]),\r

  \      lookup(byrc, [r + 3, c - 1]),\r

  \      lookup(byrc, [r, c - 2]),\r

  \      lookup(byrc, [r - 3, c - 1]),\r

  \    ];\r

  \  }\r

  \  let sym = chooseRandom(getAnimals());\r

  \  let items = [];\r

  \  for (const info of infos) {\r

  \    let item = info.isHexCenter ? drawCenteredBee(info.pt) :
  drawCenteredPlainCircle(info.pt);\r

  \    items.push(item);\r

  \    let d = iDiv(item);\r

  \    if (info.isHexCenter) mClass(d, 'hexagon');\r

  \    if (info.isHexCenter) mText(info.trow + ' ' + info.tcol, d, { fz: 10
  });\r

  \  }\r

  }"
tri3: "function tri3() {\r

  \  let sq3 = Math.sqrt(3);\r

  \  let a = 48;\r

  \  let wp = a / 4, hp = a / 4, h = sq3 * a / 2;\r

  \  let [xoff, dx, yoff, dy] = [h + wp / 2, 2 * h, hp / 2, a / 2];\r

  \  let [rows, maxcols] = [3, 4];\r

  \  let ys = 2 + 3 * rows;\r

  \  let xs = maxcols;\r

  \  let x = xoff, y = yoff;\r

  \  let pts = [];\r

  \  let infos = [];\r

  \  let idx = 0;\r

  \  let yEven = true;\r

  \  for (let i = 0; i < ys; i++) {\r

  \    let tcolOffset = yEven ? 1 : 0;\r

  \    let isCenterRow = i >= 2 && ((i - 2) % 3) == 0;\r

  \    for (let j = 0; j < xs + (1 - tcolOffset); j++) {\r

  \      let pt = { x: x, y: y };\r

  \      pts.push(pt);\r

  \      infos.push({ index: idx, tcol: tcolOffset + 2 * j, trow: i, x: x, y:
  y, pt: pt, isCenterRow: isCenterRow, isHexCenter: isCenterRow, isCenterCol: j
  % 2 == 1 });\r

  \      x += dx;\r

  \      idx += 1;\r

  \    }\r

  \    yEven = !yEven;\r

  \    y += dy; x = i % 2 ? xoff : wp / 2;\r

  \  }\r

  \  let byrc = {};\r

  \  for (const i of infos) {\r

  \    lookupSet(byrc, [i.trow, i.tcol], i.index);\r

  \  }\r

  \  console.log('byrc', byrc)\r

  \  let byxy = {};\r

  \  let adjList = [];\r

  \  let di = {};\r

  \  for (const info of infos) {\r

  \    let [r, c] = [info.trow, info.tcol];\r

  \    info.nodes = [\r

  \      lookup(byrc, [r - 2, c]),\r

  \      lookup(byrc, [r - 1, c + 1]),\r

  \      lookup(byrc, [r + 1, c + 1]),\r

  \      lookup(byrc, [r + 2, c]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \    ];\r

  \    for (let i = 0; i < 6; i++) {\r

  \      let n1 = info.nodes[i];\r

  \      if (n1 == null) continue;\r

  \      let n2 = info.nodes[(i + 1 % 6)];\r

  \      if (n2 == null) continue;\r

  \      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;\r

  \      lookupSet(di, [n1, n2], true);\r

  \      adjList.push([n1, n2]);\r

  \    }\r

  \    info.neighbors = [\r

  \      lookup(byrc, [r - 3, c + 1]),\r

  \      lookup(byrc, [r, c + 2]),\r

  \      lookup(byrc, [r + 3, c + 1]),\r

  \      lookup(byrc, [r + 3, c - 1]),\r

  \      lookup(byrc, [r, c - 2]),\r

  \      lookup(byrc, [r - 3, c - 1]),\r

  \    ];\r

  \  }\r

  \  let sym = chooseRandom(getAnimals());\r

  \  let items = [];\r

  \  for (const info of infos) {\r

  \    let item = drawText(info.trow + ',' + info.tcol, info.pt);\r

  \    items.push(item);\r

  \  }\r

  }"
tri4: "function tri4() {\r

  \  let sq3 = Math.sqrt(3);\r

  \  let a = 48;\r

  \  let wp = a / 4, hp = a / 4, h = sq3 * a / 2;\r

  \  let [xoff, dx, yoff, dy] = [h + wp / 2, 2 * h, hp / 2, a / 2];\r

  \  let [rows, maxcols] = [3, 4];\r

  \  let ys = 2 + 3 * rows;\r

  \  let xs = maxcols;\r

  \  let x = xoff, y = yoff;\r

  \  let pts = [];\r

  \  let infos = [];\r

  \  let idx = 0;\r

  \  let yEven = true;\r

  \  for (let i = 0; i < ys; i++) {\r

  \    let tcolOffset = yEven ? 1 : 0;\r

  \    let isCenterRow = i >= 2 && ((i - 2) % 3) == 0;\r

  \    for (let j = 0; j < xs + (1 - tcolOffset); j++) {\r

  \      let pt = { x: x, y: y };\r

  \      pts.push(pt);\r

  \      infos.push({ index: idx, tcol: tcolOffset + 2 * j, trow: i, x: x, y:
  y, pt: pt, isCenterRow: isCenterRow, isHexCenter: isCenterRow, isCenterCol: j
  % 2 == 1 });\r

  \      x += dx;\r

  \      idx += 1;\r

  \    }\r

  \    yEven = !yEven;\r

  \    y += dy; x = i % 2 ? xoff : wp / 2;\r

  \  }\r

  \  let byrc = {};\r

  \  for (const i of infos) {\r

  \    lookupSet(byrc, [i.trow, i.tcol], i.index);\r

  \  }\r

  \  console.log('byrc', byrc)\r

  \  let byxy = {};\r

  \  let adjList = [];\r

  \  let di = {};\r

  \  for (const info of infos) {\r

  \    let [r, c] = [info.trow, info.tcol];\r

  \    info.nodes = [\r

  \      lookup(byrc, [r - 2, c]),\r

  \      lookup(byrc, [r - 1, c + 1]),\r

  \      lookup(byrc, [r + 1, c + 1]),\r

  \      lookup(byrc, [r + 2, c]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \      lookup(byrc, [r + 1, c - 1]),\r

  \    ];\r

  \    for (let i = 0; i < 6; i++) {\r

  \      let n1 = info.nodes[i];\r

  \      if (n1 == null) continue;\r

  \      let n2 = info.nodes[(i + 1 % 6)];\r

  \      if (n2 == null) continue;\r

  \      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;\r

  \      lookupSet(di, [n1, n2], true);\r

  \      adjList.push([n1, n2]);\r

  \    }\r

  \    info.neighbors = [\r

  \      lookup(byrc, [r - 3, c + 1]),\r

  \      lookup(byrc, [r, c + 2]),\r

  \      lookup(byrc, [r + 3, c + 1]),\r

  \      lookup(byrc, [r + 3, c - 1]),\r

  \      lookup(byrc, [r, c - 2]),\r

  \      lookup(byrc, [r - 3, c - 1]),\r

  \    ];\r

  \  }\r

  \  let sym = chooseRandom(getAnimals());\r

  \  let items = [];\r

  \  for (const info of infos) {\r

  \    let item = drawText(info.trow + ',' + info.tcol, info.pt);\r

  \    if (info.isHexCenter) mStyle(iDiv(item), { bg: 'pink' })\r

  \    items.push(item);\r

  \  }\r

  }"
trialPromptML: "function trialPromptML() {\r

  \  let selinp = Selected.inp;\r

  \  say('try again!');\r

  \  setTimeout(() => {\r

  \    let d = selinp.div;\r

  \    d.innerHTML = '_';\r

  \    mClass(d, 'blink');\r

  \  }, skipAnimations ? 300 : 2000);\r

  \  showFleetingMessage(composeFleetingMessage(), 3000);\r

  \  return 10;\r

  }"
trialPromptSP: "function trialPromptSP() {\r

  \  say(currentLanguage == 'E' ? 'try again!' : 'nochmal', 1, 1, .3, true,
  'zira');\r

  \  animate(dInstruction, 'pulse800' + getSignalColor(), 900);\r

  \  return 1500;\r

  }"
trialPromptSPA: "function trialPromptSPA() {\r

  \  return 10;\r

  }"
trialPromptTC: "function trialPromptTC() {\r

  \  say('try again');\r

  \  shortHintPic();\r

  \  return 10;\r

  }"
trialPromptTP: "function trialPromptTP() {\r

  \  say('try again');\r

  \  shortHintPic();\r

  \  return 10;\r

  }"
trialPromptWP: "function trialPromptWP() {\r

  \  say(currentLanguage == 'E' ? 'try again!' : 'nochmal', 1, 1, .8, true,
  'zira');\r

  \  mLinebreak(dTable);\r

  \  inputBox = addNthInputElement(dTable, trialNumber);\r

  \  defaultFocusElement = inputBox.id;\r

  \  return 10;\r

  }"
trickleDown: "function trickleDown(n, R, trickle) {\r

  \  currentSizing = trickle.sizing;\r

  \  let res = {};\r

  \  res.sizing = isdef(n.params) && isdef(n.params.sizing) ?
  n.params.sizing\r

  \    : isdef(currentSizing) ? currentSizing : R.defs.defaultSizing;\r

  \  return res;\r

  }"
trim: "function trim(str) {\r

  \  return str.replace(/^\\s+|\\s+$/gm, '');\r

  }"
try_find_username: "function try_find_username(ev) {\r

  \  evNoBubble(ev);\r

  \  let username = findAttributeInAncestors(ev.target, 'username');\r

  \  if (nundef(Session.users_by_name[username])) { alert('ERROR username!');
  return null; }\r

  \  return username;\r

  }"
tryBegin: function tryBegin(callback) { let route = '/begin/1';
  _sendRouteJS(route, callback); }
tryConvertToJSON: "function tryConvertToJSON(s) {\r

  \  let res = null;\r

  \  try { res = JSON.parse(s); return res; }\r

  \  catch {\r

  \    return null;\r

  \  }\r

  }"
tsAction: function tsAction(x) { if ('ID' in x) return x.ID; else return x.val; }
tsRec: "function tsRec(x) {\r

  \  if (isList(x)) { return '[' + x.map(tsRec).join('') + ']'; }\r

  \  if (isDict(x)) {\r

  \    if ('_set' in x) {\r

  \      return '{' + tsRec(x._set) + '}';\r

  \    } else if ('_tuple' in x) {\r

  \      return '(' + tsRec(x._tuple) + ')'\r

  \    } else if ('type' in x) {\r

  \      return tsAction(x)\r

  \    } else { return 'obj unknown'; }\r

  \  } else return 'type unknown';\r

  }"
ttBody: "function ttBody(oid, o) {\r

  \  let sProps = '';\r

  \  let sVals = '';\r

  \  for (const p in o) {\r

  \    if (p == 'obj_type' || p == 'name' || p == 'id') continue;\r

  \    let val = o[p];\r

  \    sProps += p + '<br>';\r

  \    sVals += simpleRep(val) + '<br>';\r

  \  }\r

  \  $('div#ttipLeft').html(sProps);\r

  \  $('div#ttipRight').html(sVals);\r

  }"
ttBody2: "function ttBody2(oid, o) {\r

  \  let s = treee(o);\r

  \  clearElement('ttipRight');\r

  \  $('div#ttipLeft').html(s);\r

  }"
ttTitle: "function ttTitle(oid, o) {\r

  \  $('div#ttipTitle').html(('obj_type' in o ? o.obj_type : '_') + ('name' in
  o ? ':' + o.name : 'id' in o ? ':' + o.id : ' ' + oid));\r

  }"
turn_create_otree: "function turn_create_otree(obj) {\r

  \  console.assert(isdef(obj.table), 'turn_create_otree without
  obj.table!!!!!!!!!!!!!!');\r

  \  let g = Session;\r

  \  let [menu, table, fen, plist, players] = [g.cur_menu, g.table, g.fen,
  g.plist, g.players] = ['play', obj.table, obj.table.fen, obj.playerdata,
  obj.table.fen.players];\r

  \  let otree = jsCopy(fen);\r

  \  let order = isdef(fen.plorder) ? fen.plorder : plist.map(x => x.name);\r

  \  otree.player_names = order;\r

  \  for (const uname of order) {\r

  \    let pl = firstCond(plist, x => x.name == uname);\r

  \    copyKeys(DB.users[uname], pl);\r

  \    copyKeys(fen.players[uname], pl);\r

  \    otree[uname] = pl;\r

  \  }\r

  \  addKeys(fen, otree);\r

  \  delete otree.players;\r

  \  return otree;\r

  }"
turn_create_R: "function turn_create_R(otree) {\r

  \  Items = {};\r

  \  let g = Session;\r

  \  R = g.R = new RSG(); R.otree = otree;\r

  \  let r_keys = R.keys = Session.game_keys.r_nodes;\r

  \  let akku = G.akku = [];\r

  \  let root = R.root = rec_create_nodes_tree_akku(R, otree, '', r_keys,
  akku);\r

  \  return R;\r

  }"
turn_new_schwein_up: "function turn_new_schwein_up(schwein, fenbuilding,
  uibuilding) {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let is_first_schwein = isEmpty(fenbuilding.schweine);\r

  \  add_schwein(schwein, fenbuilding, uibuilding);\r

  \  ari_history_list([`${uplayer} reveals a schwein!`], 'inspect');\r

  \  if (is_first_schwein) {\r

  \    console.log('unique AND first new schwein');\r

  \    show_instruction('found schwein - both players get a rumor!');\r

  \    let owner = stringAfter(uibuilding.path, '.');\r

  \    owner = stringBefore(owner, '.');\r

  \    console.log('owner', owner, 'uplayer', uplayer);\r

  \    A.owner = owner;\r

  \    ari_open_rumors(32);\r

  \  } else {\r

  \    console.log('unique new schwein (gibt schon schweine)')\r

  \    show_instruction('found schwein - you gain a rumor!');\r

  \    let rumor = fen.deck_rumors[0]; fen.deck_rumors.shift();\r

  \    fen.players[uplayer].rumors.push(rumor);\r

  \    ari_history_list([`${uplayer} inspects a schweine building!`],
  'inspect');\r

  \    ari_next_action();\r

  \  }\r

  }"
turn_package_otree: "function turn_package_otree(otree) {\r

  \  let keys = Session.game_keys.players;\r

  \  let fen = otree;\r

  \  fen.players = {};\r

  \  for (const plname of otree.plorder) fen.players[plname] =
  stripToKeys(otree[plname], keys);\r

  \  otree.plorder.map(x => delete fen[x]);\r

  \  return fen;\r

  }"
turn_present: "function turn_present(obj) {\r

  \  if (ITER >= Math.min(DA.iter, MAXITER)) { console.log('iter', ITER ==
  MAXITER ? 'MAX' : 'DA.iter'); TOMan.clear(); return; } ITER++;\r

  \  let otree = turn_unpackage_fen(obj);\r

  \  let rtree = turn_create_R(otree);\r

  \  ui_table_actions_stats();\r

  \  if (G.cur_game == 'gAristo') { ari_branch(obj, otree, rtree); }\r

  \  else if (G.cur_game == 'gPreinno') { inno_branch(obj, otree, rtree); }\r

  }"
turn_schwein_up: "function turn_schwein_up(b) {\r

  \  let key = b.keycard.key;\r

  \  let list = b.list;\r

  \  let schwein = firstCond(list, x => x[0] != key[0]);\r

  \  assertion(isdef(schwein), 'WAS DA IST GARKEIN SCHWEIN!!!!!!!!!!', b);\r

  \  let ui = firstCond(b.items, x => x.key == schwein);\r

  \  face_up(ui);\r

  \  let obuilding = lookup(Z.fen, b.path.split('.'));\r

  \  b.schwein = obuilding.schwein = schwein;\r

  \  ari_open_rumors(32);\r

  }"
turn_send_gameover: "function turn_send_gameover(otree, uname) {\r

  \  let fen = turn_package_otree(otree);\r

  \  let g = Session;\r

  \  let o = { uname: uname, tid: g.table.id, fen: fen, table_status: 'over'
  };\r

  \  to_server(o, 'turn_update');\r

  }"
turn_send_move_update: "function turn_send_move_update(otree, uname) {\r

  \  let fen = turn_package_otree(otree);\r

  \  let g = Session;\r

  \  let o = { uname: uname, tid: g.table.id, fen: fen, table_status:
  g.table.status };\r

  \  to_server(o, 'turn_update');\r

  }"
turn_send_reload: "function turn_send_reload(uname) {\r

  \  let g = Session;\r

  \  let o = { uname: uname, tid: g.table.id, table_status: g.table.status
  };\r

  \  to_server(o, 'turn_update');\r

  }"
turn_set_game_assets: "function turn_set_game_assets(g) {\r

  \  if (g.cur_game == 'gPreinno') g.cards = InnoById;\r

  \  else if (g.cur_game == 'gAristo') g.cards = Aristocards;\r

  }"
turn_set_keys: "function turn_set_keys(g, obj) {\r

  \  let fen = obj.table.fen;\r

  \  let di = {\r

  \    table: get_keys(fen),\r

  \    players: get_keys(fen.players[fen.plorder[0]]),\r

  \    r_nodes: [],\r

  \    ui_nodes: []\r

  \  };\r

  \  let rks = arrMinus(di.table.concat(di.players), ['splays', 'herald',
  'plorder', 'coins']);\r

  \  rks = arrPlus(rks, ['green', 'purple', 'blue', 'red', 'yellow']);\r

  \  rks = rks.concat(fen.plorder);\r

  \  di.r_nodes = rks;\r

  \  di.ui_nodes = arrMinus(di.r_nodes, []);\r

  \  g.game_keys = {};\r

  \  for (const k in di) {\r

  \    let di1 = g.game_keys[k] = {};\r

  \    for (const k1 of di[k]) di1[k1] = true;\r

  \  }\r

  }"
turn_show_gameover: "function turn_show_gameover(otree) {\r

  \  let game = Session.cur_game;\r

  \  let table = Session.cur_table;\r

  \  let players = otree2cur_players(otree);\r

  \  let winner = otree.winner;\r

  \  if (!Session.scoring_complete) {\r

  \    console.log('======>scoring!!!!!', table.friendly);\r

  \    scoring_update(otree.plorder, [otree.winner], game);\r

  \    out1();\r

  \    Session.scoring_complete = true;\r

  \  }\r

  \  let pl = otree[winner];\r

  \  let styles = { bg: pl.color, alpha: .75, fg: 'contrast', top: 220, };\r

  \  let msg = 'GAME OVER - The ' + `winner is ${otree.winner}!!!`;\r

  \  let d = status_message(msg, styles);\r

  \  let end_scores = table.status == 'past' ? table.end_scoring :
  get_scores_from_cur_players();\r

  \  show_score_table(end_scores, table.friendly, d);\r

  \  mLinebreak(d);\r

  \  mButton('click to close', onclick_gameover_new, d, { fz: 20 },
  ['buttonClass', 'donebutton']);\r

  }"
turn_unpackage_fen: "function turn_unpackage_fen(obj) {\r

  \  let g = Session;\r

  \  turn_set_game_assets(g);\r

  \  turn_set_keys(g, obj);\r

  \  g.obj = ServerData = obj;\r

  \  let otree = Fen = g.otree = turn_create_otree(obj);\r

  \  return otree;\r

  }"
turnCardsAfter: "function turnCardsAfter(secs, removeBg = false) {\r

  \  let qc = QContextCounter;\r

  \  for (const p of Pictures) { slowlyTurnFaceDown(p, secs - 1, removeBg);
  }\r

  \  TOMain = setTimeout(() => {\r

  \    showInstruction(Goal.label, 'click', dTitle, true);\r

  \    showMouse();\r

  \    GC.activateUi.bind(GC)();\r

  \  }, secs * 1000);\r

  }"
turnDeckFaceUp: function turnDeckFaceUp(deck) { if (deck.isFaceDown) {
  deck.flip(); deck.isFaceDown = false; } }
turnFaceDown: "function turnFaceDown(pic) {\r

  \  let ui = iDiv(pic);\r

  \  for (const p1 of ui.children) p1.style.opacity = 0;\r

  \  ui.style.backgroundColor = 'dimgray';\r

  \  pic.isFaceUp = false;\r

  }"
turnFaceDownSimple: "function turnFaceDownSimple(pic) {\r

  \  let ui = iDiv(pic);\r

  \  ui.style.transition = null;\r

  \  mRemoveClass(ui, 'frameOnHover');\r

  \  for (const ch of ui.children) { ch.style.transition = null;
  ch.style.opacity = 0; }\r

  \  pic.isFaceUp = false;\r

  }"
turnFaceUp: "function turnFaceUp(pic, secTransition = 1) {\r

  \  let div = iDiv(pic);\r

  \  for (const ch of div.children) {\r

  \    ch.style.transition = `opacity ${secTransition}s ease-in-out`;\r

  \    ch.style.opacity = 1;\r

  \  }\r

  \  div.style.transition = null;\r

  \  div.style.backgroundColor = pic.bg;\r

  \  pic.isFaceUp = true;\r

  }"
turnFaceUpSimple: "function turnFaceUpSimple(pic) {\r

  \  let ui = iDiv(pic);\r

  \  mRemoveClass(ui, 'frameOnHover');\r

  \  ui.style.transition = null;\r

  \  for (const ch of ui.children) { ch.style.transition = null;
  ch.style.opacity = 1; }\r

  \  pic.isFaceUp = true;\r

  }"
turtle: "function turtle() {\r

  \  background(51);\r

  \  stroke(255);\r

  \  translate(width / 2, height);\r

  \  for (let i = 0; i < sentence.length; i++) {\r

  \    let x = sentence.charAt(i);\r

  \    if ('ABF'.includes(x)) { line(0, 0, 0, -len); translate(0, -len); }\r

  \    else if (x == '+') rotate(angle);\r

  \    else if (x == '-') rotate(-angle);\r

  \    else if (x == '[') push();\r

  \    else if (x == ']') pop();\r

  \  }\r

  }"
ty01: "function ty01() {\r\n}"
type00flex: function type00flex(n, R) { return 'type00flex'; }
typeEmpty: function typeEmpty(n, R) { return 'empty'; }
typePanelInfo: "function typePanelInfo(n, R) { return isdef(n.children) ? 'panel' : 'info'; }"
ui_add_cards_to_card_container: "function ui_add_cards_to_card_container(cont,
  items, list) {\r

  \  if (nundef(list)) list = items.map(x => x.key);\r

  \  for (const item of items) {\r

  \    mAppend(cont, iDiv(item));\r

  \  }\r

  }"
ui_add_cards_to_deck_container: "function ui_add_cards_to_deck_container(cont,
  items, list) {\r

  \  if (nundef(list)) list = items.map(x => x.key);\r

  \  for (const item of items) {\r

  \    mAppend(cont, iDiv(item));\r

  \    mItemSplay(item, list, 4, Card.ovdeck);\r

  \    face_down(item);\r

  \  }\r

  \  return items[0];\r

  }"
ui_add_cards_to_hand_container: "function ui_add_cards_to_hand_container(cont,
  items, list) {\r

  \  if (nundef(list)) list = items.map(x => x.key);\r

  \  for (const item of items) {\r

  \    mAppend(cont, iDiv(item));\r

  \    mItemSplay(item, list, 2, Card.ovw);\r

  \  }\r

  }"
ui_add_container_title: "function ui_add_container_title(title, cont, items,
  show_if_empty) {\r

  \  if (isdef(title) && (!isEmpty(items) || show_if_empty)) {\r

  \    let st = get_containertitle_styles();\r

  \    let stmeasure = jsCopy(st); delete stmeasure.position;\r

  \    let elem = mText(title, cont, stmeasure);\r

  \    let sz = getSizeNeeded(elem);\r

  \    let offsetx = valf(st.left, 0);\r

  \    let cont_wmin = mGetStyle(cont, 'wmin');\r

  \    let my_min = sz.w + offsetx * 1.5;\r

  \    let wmin = !isNumber(cont_wmin) ? my_min : Math.max(valf(cont_wmin, 0),
  my_min);\r

  \    mStyle(cont, { wmin: wmin });\r

  \    mStyle(elem, st);\r

  \  }\r

  }"
ui_from_deck_to_hand: "function ui_from_deck_to_hand(el, deck, hand) {\r

  \  let topmost = deck.items.shift();\r

  \  console.assert(el == topmost, 'top deck elem is NOT correct!!!!')\r

  \  face_up(topmost);\r

  \  let dtop = iDiv(topmost);\r

  \  deck.list = deck.items.map(x => x.key);\r

  \  deck.topmost = deck.items[0];\r

  \  dtop.remove();\r

  \  dtop.style.position = 'static';\r

  \  hand.items.push(topmost);\r

  \  hand.list = hand.items.map(x => x.key);\r

  \  mAppend(hand.container, dtop);\r

  \  mContainerSplay(hand.container, 2, CWIDTH, CHEIGHT, hand.list.length,
  OVW);\r

  \  mItemSplay(topmost, hand.list, 2, OVW);\r

  }"
ui_game_menu_item: "function ui_game_menu_item(g, g_tables = []) {\r

  \  function runderkreis(color, id) {\r

  \    return `<div id=${id}
  style='width:20px;height:20px;border-radius:50%;background-color:${color};col\
  or:white;position:absolute;left:0px;top:0px;'>` + '' + \"</div>\";\r

  \  }\r

  \  let [sym, bg, color, id] = [Syms[g.logo], g.color, null, getUID()];\r

  \  if (!isEmpty(g_tables)) {\r

  \    let t = g_tables[0];\r

  \    let have_another_move = t.player_status == 'joined';\r

  \    color = have_another_move ? 'green' : 'red';\r

  \    id = `rk_${t.id}`;\r

  \  }\r

  \  return `\r

  \  <div onclick=\"onclick_game_menu_item(event)\" gamename=${g.id}
  style='cursor:pointer;border-radius:10px;margin:10px;padding:5px;padding-top:\
  15px;width:120px;height:90px;display:inline-block;background:${bg};position:r\
  elative;'>\r

  \  ${nundef(color) ? '' : runderkreis(color, id)}\r

  \  <span
  style='font-size:50px;font-family:${sym.family}'>${sym.text}</span><br>${g.fr\
  iendly.toString()}</div>\r

  \  `;\r

  }"
ui_game_stats: "function ui_game_stats(players) {\r

  \  let d = dTitle;\r

  \  clearElement(d);\r

  \  let d1 = mDiv(d, { display: 'flex', 'justify-content': 'center',
  'align-items': 'space-evenly' });\r

  \  for (const plname in players) {\r

  \    let pl = players[plname];\r

  \    let d2 = mDiv(d1, { margin: 4, align: 'center' }, null, `<img
  src='${pl.imgPath}' style=\"display:block\" class='img_person' width=50
  height=50>${pl.score}`);\r

  \  }\r

  }"
ui_get_all_commission_items: "function ui_get_all_commission_items(uplayer) {\r

  \  let items = [], i = 0;\r

  \  let comm = UI.players[uplayer].commissions;\r

  \  for (const o of comm.items) {\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  comm.path, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_all_hidden_building_items: "function
  ui_get_all_hidden_building_items(uplayer) {\r

  \  let items = [];\r

  \  for (const gb of UI.players[uplayer].buildinglist) {\r

  \    items = items.concat(ui_get_hidden_building_items(gb));\r

  \  }\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_blackmailed_items: "function ui_get_blackmailed_items() {\r

  \  let [fen, uplayer] = [Z.fen, Z.uplayer];\r

  \  let commands = ['accept', 'reject'];\r

  \  let rumors = fen.players[uplayer].rumors;\r

  \  let b = path2fen(fen, fen.blackmail.building_path);\r

  \  if (nundef(b.lead)) b.lead = b.list[0];\r

  \  if (isList(rumors) && firstCond(rumors, x => x[0] == b.lead[0])) {\r

  \    commands.push('defend');\r

  \  }\r

  \  return ui_get_string_items(commands);\r

  }"
ui_get_bluff_inputs: "function ui_get_bluff_inputs(strings) {\r

  \  let uplayer = Z.uplayer;\r

  \  let items = ui_get_string_items(uplayer, strings);\r

  \  console.log('items', items)\r

  \  return items;\r

  }"
ui_get_build_items: "function ui_get_build_items(uplayer, except) {\r

  \  let items = ui_get_hand_and_stall_items(uplayer);\r

  \  if (is_card(except)) items = items.filter(x => x.key != except.key);\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_building_items: "function ui_get_building_items(uplayer) {\r

  \  let gblist = UI.players[uplayer].buildinglist;\r

  \  let items = [], i = 0;\r

  \  for (const o of gblist) {\r

  \    let name = o.type + ' ' + (o.list[0][0] == 'T' ? '10' :
  o.list[0][0]);\r

  \    o.div = o.container;\r

  \    let item = { o: o, a: name, key: o.list[0], friendly: name, path:
  o.path, index: i, ui: o.container };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_building_items_of_type: "function ui_get_building_items_of_type(uplayer,
  types = ['farm', 'estate', 'chateau']) {\r

  \  let gblist = UI.players[uplayer].buildinglist.filter(x =>
  types.includes(x.type));\r

  \  let items = [], i = 0;\r

  \  for (const o of gblist) {\r

  \    let name = o.type + ' ' + (o.list[0][0] == 'T' ? '10' :
  o.list[0][0]);\r

  \    o.div = o.container;\r

  \    let item = { o: o, a: name, key: o.list[0], friendly: name, path:
  o.path, index: i, ui: o.container };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_buildings: "function ui_get_buildings(gblist) {\r

  \  let items = [], i = 0;\r

  \  for (const o of gblist) {\r

  \    let name = o.type + ' ' + (o.list[0][0] == 'T' ? '10' :
  o.list[0][0]);\r

  \    o.div = o.container;\r

  \    let item = { o: o, a: name, key: o.list[0], friendly: name, path:
  o.path, index: i, ui: o.container };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_buy_or_pass_items: "function ui_get_buy_or_pass_items() {\r

  \  let items = [], i = 0;\r

  \  if (!isEmpty(UI.deck_discard.items))
  items.push(ui_get_deck_item(UI.deck_discard));\r

  \  items = items.concat(ui_get_string_items(['pass']));\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_card_items: "function ui_get_card_items(cards) {\r

  \  let items = [], i = 0;\r

  \  for (const o of cards) {\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path: ``,
  index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_church_items: "function ui_get_church_items(uplayer) {\r

  \  let fen = Z.fen;\r

  \  let items = [], i = 0;\r

  \  let church = UI.church;\r

  \  for (const o of church.items) {\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  church.path, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  let candidates = fen.candidates = arrMinus(fen.toBeSelected, uplayer);\r

  \  if (candidates.length > 1) {\r

  \    let player_items = ui_get_string_items(candidates);\r

  \    items = items.concat(player_items);\r

  \    reindex_items(items);\r

  \  }\r

  \  return items;\r

  }"
ui_get_coin_amounts: "function ui_get_coin_amounts(uplayer) {\r

  \  let items = [];\r

  \  for (let i = 0; i <= Z.fen.players[uplayer].coins; i++) {\r

  \    let cmd = '' + i;\r

  \    let item = { o: null, a: cmd, key: cmd, friendly: cmd, path: null,
  index: i };\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_commands: "function ui_get_commands(uplayer) {\r

  \  let avail = ari_get_actions(uplayer);\r

  \  let items = [], i = 0;\r

  \  for (const cmd of avail) {\r

  \    let item = { o: null, a: cmd, key: cmd, friendly: cmd, path: null,
  index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_commission_items: "function ui_get_commission_items(uplayer) {\r

  \  let items = [], i = 0;\r

  \  let comm = UI.players[uplayer].commissions;\r

  \  let stall = ui_get_stall_items(uplayer);\r

  \  for (const o of comm.items) {\r

  \    let rank = o.key[0];\r

  \    let similar = firstCond(stall, x => x.key[0] == rank);\r

  \    if (!similar) continue;\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  comm.path, index: i, similar: stall.filter(x => x.key[0] == rank) };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_commission_new_items: "function ui_get_commission_new_items(uplayer) {\r

  \  let items = [], i = 0;\r

  \  let comm = UI.open_commissions;\r

  \  for (const o of comm.items) {\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  comm.path, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  let topdeck = UI.deck_commission.get_topcard();\r

  \  items.push({ o: topdeck, a: topdeck.key, key: topdeck.key, friendly:
  topdeck.short, path: 'deck_commission', index: i });\r

  \  return items;\r

  }"
ui_get_commission_stall_items: "function ui_get_commission_stall_items() {\r

  \  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];\r

  \  console.log('ui_get_commission_stall_items similar',
  A.commission.similar);\r

  \  let items = A.commission.similar;\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_deck_item: "function ui_get_deck_item(uideck) {\r

  \  let topdeck = uideck.get_topcard();\r

  \  let item = { o: topdeck, a: topdeck.key, key: topdeck.key, friendly:
  topdeck.short, path: uideck.path, index: 0 };\r

  \  return item;\r

  }"
ui_get_endgame: function ui_get_endgame(uplayer) { return
  ui_get_string_items(['end game', 'go on']); }
ui_get_estates_chateaus_items: function ui_get_estates_chateaus_items(uplayer) {
  return ui_get_building_items_of_type(uplayer, ['estate', 'chateau']); }
ui_get_exchange_items: "function ui_get_exchange_items(uplayer) {\r

  \  let ihand = ui_get_hand_items(uplayer);\r

  \  let istall = ui_get_stall_items(uplayer);\r

  \  let irepair = ui_get_all_hidden_building_items(uplayer);\r

  \  irepair.map(x => face_up(x.o));\r

  \  let items = ihand.concat(istall).concat(irepair);\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_farms_estates_items: function ui_get_farms_estates_items(uplayer) {
  return ui_get_building_items_of_type(uplayer, ['farm', 'estate']); }
ui_get_ferro_items: "function ui_get_ferro_items() {\r

  \  let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A,
  Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];\r

  \  let items = ui_get_hand_items(uplayer);\r

  \  for (const plname of plorder) {\r

  \    let jlist = UI.players[plname].journeys;\r

  \    for (const jitem of jlist) {\r

  \      for (const o of jitem.items) {\r

  \        if (!is_joker(o)) { continue; }\r

  \        let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  jitem.path, index: 0 };\r

  \        items.push(item);\r

  \      }\r

  \    }\r

  \  }\r

  \  for (const plname of plorder) {\r

  \    let jlist = UI.players[plname].journeys;\r

  \    for (const jitem of jlist) {\r

  \      let o = jitem.items[0];\r

  \      let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  jitem.path, index: 0 };\r

  \      items.push(item);\r

  \    }\r

  \  }\r

  \  let cmds = ui_get_submit_items(['discard', 'auflegen', 'jolly',
  'anlegen']);\r

  \  items = items.concat(cmds);\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_hand_and_journey_items: "function ui_get_hand_and_journey_items(uplayer)
  {\r

  \  let items = ui_get_hand_items(uplayer);\r

  \  let matching = [];\r

  \  for (const plname of Z.plorder) {\r

  \    let jitems = ui_get_journey_items(plname);\r

  \    for (const j of jitems) {\r

  \      for (const card of items) {\r

  \        if (matches_on_either_end(card, j)) { matching.push(j); break; }\r

  \      }\r

  \    }\r

  \  }\r

  \  items = items.concat(matching);\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_hand_and_stall_items: "function ui_get_hand_and_stall_items(uplayer) {\r

  \  let items = ui_get_hand_items(uplayer);\r

  \  items = items.concat(ui_get_stall_items(uplayer));\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_hand_items: "function ui_get_hand_items(uplayer) {\r

  \  let items = [], i = 0;\r

  \  let hand = UI.players[uplayer].hand;\r

  \  for (const o of hand.items) {\r

  \    o.index = i;\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  hand.path, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_hand_items_minus: "function ui_get_hand_items_minus(uplayer, cardlist)
  {\r

  \  if (!isList(cardlist)) cardlist = [cardlist];\r

  \  let items = [], i = 0;\r

  \  let hand = UI.players[uplayer].hand;\r

  \  for (const o of hand.items) {\r

  \    if (cardlist.includes(o)) continue;\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  hand.path, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_harvest_items: "function ui_get_harvest_items(uplayer) {\r

  \  let items = []; let i = 0;\r

  \  for (const gb of UI.players[uplayer].buildinglist) {\r

  \    if (isdef(gb.harvest)) {\r

  \      let d = gb.harvest;\r

  \      mStyle(d, { cursor: 'pointer', opacity: 1 });\r

  \      gb.div = d;\r

  \      let name = 'H' + i + ':' + (gb.list[0][0] == 'T' ? '10' :
  gb.list[0][0]);\r

  \      let item = { o: gb, a: name, key: name, friendly: name, path:
  gb.path, index: i };\r

  \      i++;\r

  \      items.push(item);\r

  \    }\r

  \  }\r

  \  return items;\r

  }"
ui_get_hidden_building_items: "function ui_get_hidden_building_items(uibuilding)
  {\r

  \  let items = [];\r

  \  for (let i = 1; i < uibuilding.items.length; i++) {\r

  \    let o = uibuilding.items[i];\r

  \    o.index = i;\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  uibuilding.path, index: i - 1 };\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_journey_items: "function ui_get_journey_items(plname) {\r

  \  let gblist = UI.players[plname].journeys;\r

  \  let items = [], i = 0;\r

  \  for (const o of gblist) {\r

  \    let name = `${plname}_j${i}`;\r

  \    o.div = o.container;\r

  \    let item = { o: o, a: name, key: o.list[0], friendly: name, path:
  o.path, index: i, ui: o.container };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_market_items: "function ui_get_market_items() {\r

  \  let items = [], i = 0;\r

  \  for (const o of UI.market.items) {\r

  \    o.index = i;\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  `market`, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_open_discard_items: "function ui_get_open_discard_items() {\r

  \  let items = [], i = 0;\r

  \  for (const o of UI.open_discard.items) {\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  `open_discard`, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_other_buildings: "function ui_get_other_buildings(uplayer) {\r

  \  let items = [];\r

  \  for (const plname of Z.plorder) {\r

  \    if (plname == uplayer) continue;\r

  \    items =
  items.concat(ui_get_buildings(UI.players[plname].buildinglist));\r

  \  }\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_other_buildings_and_rumors: "function
  ui_get_other_buildings_and_rumors(uplayer) {\r

  \  let items = ui_get_other_buildings(uplayer);\r

  \  items = items.concat(ui_get_rumors_items(uplayer));\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_other_buildings_with_rumors: "function
  ui_get_other_buildings_with_rumors(uplayer) {\r

  \  let items = [];\r

  \  for (const plname of Z.plorder) {\r

  \    if (plname == uplayer) continue;\r

  \    items =
  items.concat(ui_get_buildings(UI.players[plname].buildinglist.filter(x =>
  !isEmpty(x.rumors))));\r

  \  }\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_payment_items: "function ui_get_payment_items(pay_letter) {\r

  \  let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];\r

  \  let items = ui_get_hand_and_stall_items(uplayer);\r

  \  let n = items.length;\r

  \  items = items.filter(x => x.key[0] == pay_letter);\r

  \  if (n == 4 && A.command == 'build') items = [];\r

  \  if (n == 1 && A.command == 'upgrade') items = [];\r

  \  if (fen.players[uplayer].coins > 0 && fen.phase[0].toUpperCase() ==
  pay_letter) {\r

  \    items.push({ o: null, a: 'coin', key: 'coin', friendly: 'coin', path:
  null });\r

  \  }\r

  \  let i = 0; items.map(x => { x.index = i; i++; });\r

  \  return items;\r

  }"
ui_get_rumors_and_players_items: "function
  ui_get_rumors_and_players_items(uplayer) {\r

  \  let items = [], i = 0;\r

  \  let comm = UI.players[uplayer].rumors;\r

  \  let [data, pl] = [Z.uplayer_data, Z.pl];\r

  \  assertion(isdef(data), 'no data for player ' + uplayer);\r

  \  if (!isDict(data.state)) data.state = { remaining: jsCopy(pl.rumors),
  receivers: [], di: {} };\r

  \  let rem = data.state.remaining;\r

  \  for (const k of rem) {\r

  \    let o = firstCond(comm.items, x => x.key == k);\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  comm.path, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  let players = [];\r

  \  let receivers = data.state.receivers;\r

  \  for (const plname in UI.players) {\r

  \    if (plname == uplayer || receivers.includes(plname)) continue;\r

  \    players.push(plname);\r

  \  }\r

  \  items = items.concat(ui_get_string_items(players));\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_rumors_items: "function ui_get_rumors_items(uplayer) {\r

  \  let items = [], i = 0;\r

  \  let rum = UI.players[uplayer].rumors;\r

  \  for (const o of rum.items) {\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  rum.path, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_schweine_candidates: "function ui_get_schweine_candidates(uibuilding) {\r

  \  let items = ui_get_hidden_building_items(uibuilding);\r

  \  items = items.filter(x => x.o.key[0] != uibuilding.keycard.key[0]);\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_get_stall_items: "function ui_get_stall_items(uplayer) {\r

  \  let items = [], i = 0;\r

  \  let stall = UI.players[uplayer].stall;\r

  \  for (const o of stall.items) {\r

  \    o.index = i;\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  stall.path, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_string_items: "function ui_get_string_items(commands) {\r

  \  let items = [], i = 0;\r

  \  for (const cmd of commands) {\r

  \    let item = { o: null, a: cmd, key: cmd, friendly: cmd, path: null,
  index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_submit_items: "function ui_get_submit_items(commands) {\r

  \  let items = [], i = 0;\r

  \  for (const cmd of commands) {\r

  \    let item = { o: null, a: cmd, key: cmd, friendly: cmd, path: null,
  index: i, submit_on_click: true, itemtype: 'submit' };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_top_rumors: "function ui_get_top_rumors() {\r

  \  let items = [], i = 0;\r

  \  for (const o of UI.rumor_top.items) {\r

  \    let item = { o: o, a: o.key, key: o.key, friendly: o.short, path:
  `rumor_top`, index: i };\r

  \    i++;\r

  \    items.push(item);\r

  \  }\r

  \  return items;\r

  }"
ui_get_trade_items: "function ui_get_trade_items(uplayer) {\r

  \  let items = ui_get_market_items(uplayer);\r

  \  items = items.concat(ui_get_stall_items(uplayer));\r

  \  for (const plname of Z.fen.plorder) {\r

  \    if (plname != uplayer) items =
  items.concat(ui_get_stall_items(plname));\r

  \  }\r

  \  reindex_items(items);\r

  \  return items;\r

  }"
ui_ground_zero: "function ui_ground_zero() {\r

  \  STOPAUS = true;\r

  \  uiActivated = aiActivated = false;\r

  \  clearTimeouts();\r

  \  if (isdef(G) && isdef(G.clear)) G.clear();\r

  \  if (isdef(GC) && isdef(GC.clear)) GC.clear();\r

  \  TOMan.clear();\r

  \  clearMarkers();\r

  \  resetUIDs();\r

  \  Items = {};\r

  }"
ui_make_card_container: "function ui_make_card_container(n, dParent, styles = {
  bg: 'random', padding: 10 }) {\r

  \  let id = getUID('u');\r

  \  let d = mDiv(dParent, styles, id);\r

  \  return d;\r

  }"
ui_make_container: "function ui_make_container(dParent, styles = { bg: 'random',
  padding: 10 }) {\r

  \  let id = getUID('u');\r

  \  let d = mDiv(dParent, styles, id);\r

  \  return d;\r

  }"
ui_make_deck_container: "function ui_make_deck_container(list, dParent, styles =
  { bg: 'random', padding: 10 }, get_card_func) {\r

  \  let id = getUID('u');\r

  \  let d = mDiv(dParent, styles, id);\r

  \  if (isEmpty(list)) return d;\r

  \  let c = get_card_func(list[0]);\r

  \  mContainerSplay(d, 4, c.w, c.h, n, 0);\r

  \  return d;\r

  }"
ui_make_hand_container: "function ui_make_hand_container(items, dParent, styles
  = { bg: 'random', padding: 10 }) {\r

  \  let id = getUID('u');\r

  \  let d = mDiv(dParent, styles, id);\r

  \  if (!isEmpty(items)) {\r

  \    let card = items[0];\r

  \    mContainerSplay(d, 2, card.w, card.h, items.length, card.ov *
  card.w);\r

  \  }\r

  \  return d;\r

  }"
ui_make_player: "function ui_make_player(otree, uname, dParent) {\r

  \  let id = getUID('u');\r

  \  let bg = otree[uname].color;\r

  \  let styles = { bg: bg, fg: 'contrast', w: '100%' };\r

  \  d = mDiv(dParent, styles, id, uname);\r

  \  return d;\r

  }"
ui_make_random_deck: "function ui_make_random_deck(n = 10) {\r

  \  let list = choose(get_keys(Aristocards), n);\r

  \  let cont = ui_make_deck_container(n, dTable, { bg: 'random', padding: 4
  });\r

  \  let items = list.map(x => ari_get_card(x));\r

  \  let topmost = ui_add_cards_to_deck_container(cont, items, list);\r

  \  return {\r

  \    list: list,\r

  \    container: cont,\r

  \    items: items,\r

  \    topmost: topmost,\r

  \  };\r

  }"
ui_make_random_hand: "function ui_make_random_hand(n = 1) {\r

  \  let list = choose(get_keys(Aristocards), n);\r

  \  let cont = ui_make_hand_container(n, dTable, { bg: 'random', padding: 4
  });\r

  \  let items = list.map(x => ari_get_card(x));\r

  \  ui_add_cards_to_hand_container(cont, items, list);\r

  \  return {\r

  \    list: list,\r

  \    container: cont,\r

  \    items: items,\r

  \  };\r

  }"
ui_make_random_market: "function ui_make_random_market(n = 1) {\r

  \  let cont = ui_make_card_container(n, dTable, { bg: 'random', padding: 4,
  display: 'flex' });\r

  \  let list = choose(get_keys(Aristocards), n);\r

  \  let items = list.map(x => ari_get_card(x));\r

  \  if (n > 0) ui_add_cards_to_card_container(cont, items, list);\r

  \  return {\r

  \    list: list,\r

  \    container: cont,\r

  \    items: items,\r

  \  };\r

  }"
ui_make_table: "function ui_make_table() {\r

  \  let d = mBy('inner_left_panel'); clearElement(d);\r

  \  let dou = mDiv100(d, { display: 'flex' });\r

  \  dTable = mDiv(dou, { flex: 5, display: 'flex' });\r

  \  return dTable;\r

  }"
ui_player_info: "function ui_player_info(dParent, outerStyles = { dir: 'column'
  }, innerStyles = {}) {\r

  \  let fen = Z.fen;\r

  \  if (nundef(outerStyles.display)) outerStyles.display = 'flex';\r

  \  mStyle(dParent, outerStyles);\r

  \  let items = {};\r

  \  let styles = jsCopy(innerStyles); addKeys({ rounding: 10, bg:
  '#00000050', margin: 4, padding: 4, patop: 12, box: true, 'border-style':
  'solid', 'border-width': 6 }, styles);\r

  \  let order = get_present_order();\r

  \  for (const plname of order) {\r

  \    let pl = fen.players[plname];\r

  \    let uname = pl.name;\r

  \    let imgPath = `../base/assets/users/${uname}.jpg`;\r

  \    styles['border-color'] = get_user_color(uname);\r

  \    let item = mDivItem(dParent, styles, name2id(uname));\r

  \    let d = iDiv(item);\r

  \    let picstyle = { w: 50, h: 50, box: true };\r

  \    let ucolor = get_user_color(uname);\r

  \    if (pl.playmode == 'bot') {\r

  \      copyKeys({ rounding: 0, border: `double 6px ${ucolor}` },
  picstyle);\r

  \    } else {\r

  \      copyKeys({ rounding: '50%', border: `solid 2px white` }, picstyle);\r

  \    }\r

  \    let img = mImage(imgPath, d, picstyle, 'img_person');\r

  \    items[uname] = item;\r

  \  }\r

  \  if (DA.SIMSIM || is_advanced_user()) activate_playerstats(items)\r

  \  return items;\r

  }"
ui_present_stats: "function ui_present_stats(otree) {\r

  \  let players = otree.player_names;\r

  \  let items = ui_player_info(players.map(x => otree[x]));\r

  \  for (const uname of players) {\r

  \    let pl = otree[uname];\r

  \    let totals = inno_calc_visible_syms(pl.board, pl.splays);\r

  \    pl.totals = totals;\r

  \    let item = items[uname];\r

  \    let d = iDiv(item); mCenterFlex(d); mLinebreak(d);\r

  \    for (const r in totals) {\r

  \      inno_stat_sym(r, totals[r], d, 20);\r

  \    }\r

  \  }\r

  \  return items;\r

  }"
ui_present_table: "function ui_present_table(r, dParent) {\r

  \  let g = Session;\r

  \  let uitree = r.uiNodes = {};\r

  \  if (g.cur_game == 'gPreinno') inno_create_ui_tree(R.root, dParent, r);\r

  \  else if (g.cur_game == 'gAristo') ari_create_ui_tree(R.root, dParent,
  r);\r

  \  return uitree;\r

  }"
ui_table_actions_stats: "function ui_table_actions_stats() {\r

  \  let d = mBy('inner_left_panel'); clearElement(d);\r

  \  let dou = mDiv100(d, { display: 'flex' });\r

  \  dTable = mDiv(dou, { flex: 5, display: 'flex', overflow: 'auto',
  position: 'relative' });\r

  \  mCenterFlex(dTable, false);\r

  \  dTable.animate([{ opacity: 0, transform: 'translateY(50px)' }, { opacity:
  1, transform: 'translateY(0px)' },], { fill: 'both', duration: 1000, easing:
  'ease' });\r

  \  dTop = mDiv(dTable, { bg: '#00000040', fg: 'white', w: '100%' }, 'dOben',
  'hallo');\r

  \  dTop.innerHTML = '';\r

  \  dOben = mDiv(dTable, { bg: '#ffffff40', w: '100%' }, 'dOben', 'hallo');\r

  \  dOben.innerHTML = '';\r

  \  dActions = mDiv(dOben, { w: '100%' });\r

  \  for (let i = 0; i <= 5; i++) {\r

  \    window[`dActions${i}`] = mDiv(dActions, { w: '100%' });\r

  \  }\r

  \  dError = mDiv(dOben, { w: '100%', bg: 'red', fg: 'yellow' });\r

  \  dPlayerStats = dRechts = mDiv(dou, { flex: 1 }, 'dRechts', 'hallo');\r

  }"
ui_type_building: "function ui_type_building(b, dParent, styles = {}, path =
  'farm', title = '', get_card_func = ari_get_card, separate_lead = false,
  ishidden = false) {\r

  \  let cont = ui_make_container(dParent, get_container_styles(styles));\r

  \  let cardcont = mDiv(cont);\r

  \  let list = b.list;\r

  \  let d = mDiv(dParent);\r

  \  let items = list.map(x => get_card_func(x));\r

  \  reindex_items(items);\r

  \  let d_harvest = null;\r

  \  if (isdef(b.h)) {\r

  \    let keycard = items[0];\r

  \    let d = iDiv(keycard);\r

  \    mStyle(d, { position: 'relative' });\r

  \    d_harvest = mDiv(d, { position: 'absolute', w: 20, h: 20, bg: 'orange',
  opacity: .5, fg: 'black', top: '45%', left: -10, rounding: '50%', align:
  'center' }, null, 'H');\r

  \  }\r

  \  let d_rumors = null, rumorItems = [];\r

  \  if (!isEmpty(b.rumors)) {\r

  \    let d = cont;\r

  \    mStyle(d, { position: 'relative' });\r

  \    d_rumors = mDiv(d, { display: 'flex', gap: 2, position: 'absolute', h:
  30, bottom: 0, right: 0 });\r

  \    for (const rumor of b.rumors) {\r

  \      let dr = mDiv(d_rumors, { h: 24, w: 16, vmargin: 3, align: 'center',
  bg: 'dimgray', rounding: 2 }, null, 'R');\r

  \      rumorItems.push({ div: dr, key: rumor });\r

  \    }\r

  \  }\r

  \  let card = isEmpty(items) ? { w: 1, h: 100, ov: 0 } : items[0];\r

  \  let [ov, splay] = separate_lead ? [card.ov * 1.5, 5] : [card.ov, 2];\r

  \  mContainerSplay(cardcont, 5, card.w, card.h, items.length, card.ov * 1.5
  * card.w);\r

  \  ui_add_cards_to_hand_container(cardcont, items, list);\r

  \  ui_add_container_title(title, cont, items);\r

  \  let uischweine = [];\r

  \  for (let i = 1; i < items.length; i++) {\r

  \    let item = items[i];\r

  \    if (!b.schweine.includes(i)) face_down(item); else add_ui_schwein(item,
  uischweine);\r

  \  }\r

  \  return {\r

  \    ctype: 'hand',\r

  \    list: list,\r

  \    path: path,\r

  \    container: cont,\r

  \    cardcontainer: cardcont,\r

  \    items: items,\r

  \    schweine: uischweine,\r

  \    harvest: d_harvest,\r

  \    rumors: rumorItems,\r

  \    keycard: items[0],\r

  \  };\r

  }"
ui_type_church: "function ui_type_church(list, dParent, styles = {}, path =
  'trick', title = '', get_card_func = ari_get_card, show_if_empty = false) {\r

  \  let cont = ui_make_container(dParent, get_container_styles(styles));\r

  \  let cardcont = mDiv(cont, { display: 'flex' });\r

  \  let items = [];\r

  \  let n = Z.plorder.length;\r

  \  let inc = 90;\r

  \  let rotation = n % 2 ? 0 : 90;\r

  \  for (const ckey of list) {\r

  \    let d = mDiv(cardcont, { origin: 'center', transform: `rotate(
  ${rotation}deg )`, position: 'absolute', left: 8 });\r

  \    let c = get_card_func(ckey);\r

  \    if (ckey != arrLast(list)) face_down(c);\r

  \    mAppend(d, iDiv(c));\r

  \    remove_card_shadow(c);\r

  \    let item = { card: c, div: d };\r

  \    items.push(item);\r

  \    rotation += inc;\r

  \  }\r

  \  ui_add_container_title(title, cont, items, show_if_empty);\r

  \  return {\r

  \    list: list,\r

  \    path: path,\r

  \    container: cont,\r

  \    cardcontainer: cardcont,\r

  \    items: items,\r

  \  }\r

  }"
ui_type_deck: "function ui_type_deck(list, dParent, styles = {}, path = 'deck',
  title = 'deck', get_card_func = ari_get_card, show_if_empty = false) {\r

  \  let cont = ui_make_container(dParent, get_container_styles(styles));\r

  \  let cardcont = mDiv(cont);\r

  \  let items = [];\r

  \  ensure_ui(list, cardcont, items, get_card_func);\r

  \  ui_add_container_title(title, cont, items, show_if_empty);\r

  \  function get_topcard() { return isEmpty(list) ? null : items[0]; }\r

  \  function get_bottomcard() { return isEmpty(list) ? null : arrLast(items);
  }\r

  \  function ensure_ui(list, cardcont, items, get_card_func) {\r

  \    clearElement(cardcont); arrClear(items); if (isEmpty(list)) return;\r

  \    let n = Math.min(2, list.length); let ct = get_card_func(list[0]);
  items.push(ct); if (n > 1) { let cb = get_card_func(arrLast(list));
  items.push(cb); }\r

  \    mStyle(cardcont, { position: 'relative', wmin: ct.w + 8, hmin: ct.h
  });\r

  \    for (let i = items.length - 1; i >= 0; i--) { let x = items[i];
  face_down(x); mAppend(cardcont, iDiv(x)); mStyle(iDiv(x), { position:
  'absolute', top: 0, left: 0 }) }\r

  \    mText(list.length, iDiv(ct), { position: 'absolute', left: list.length
  >= 100 ? '10%' : '25%', top: 10, fz: ct.h / 3 });\r

  \  }\r

  \  return {\r

  \    ctype: 'deck',\r

  \    container: cont,\r

  \    cardcontainer: cardcont,\r

  \    items: items,\r

  \    list: list,\r

  \    title: title,\r

  \    path: path,\r

  \    func: get_card_func,\r

  \    get_topcard: get_topcard,\r

  \    get_bottomcard: get_bottomcard,\r

  \    get_card_func: get_card_func,\r

  \    renew: ensure_ui,\r

  \  };\r

  }"
ui_type_hand: "function ui_type_hand(list, dParent, styles = {}, path = 'hand',
  title = 'hand', get_card_func = ari_get_card, show_if_empty = false) {\r

  \  let cont = ui_make_container(dParent, get_container_styles(styles));\r

  \  let items = list.map(x => get_card_func(x));\r

  \  let cardcont = mDiv(cont);\r

  \  let card = isEmpty(items) ? { w: 1, h: Config.ui.card.h, ov: 0 } :
  items[0];\r

  \  let splay = 2;\r

  \  mContainerSplay(cardcont, splay, card.w, card.h, items.length, card.ov *
  card.w);\r

  \  ui_add_cards_to_hand_container(cardcont, items, list);\r

  \  ui_add_container_title(title, cont, items, show_if_empty);\r

  \  return {\r

  \    ctype: 'hand',\r

  \    list: list,\r

  \    path: path,\r

  \    container: cont,\r

  \    cardcontainer: cardcont,\r

  \    splay: splay,\r

  \    items: items,\r

  \  };\r

  }"
ui_type_item: "function ui_type_item(dParent, item, styles = {}, handler = null,
  show_key = null) {\r

  \  addKeys({ align: 'center', overflow: 'hidden', cursor: 'pointer',
  rounding: 10, margin: 10, padding: 5, w: 120, wmin: 90, display:
  'inline-block', bg: 'random', fg: 'contrast' }, styles);\r

  \  let d = mDiv(dParent, styles);\r

  \  if (!isEmptyOrWhiteSpace(item.text)) mSpan(d, { family: item.family, fz:
  50 }, item.text);\r

  \  if (show_key) {\r

  \    mSpan(d, { family: 'opensans' }, '<br>' + show_key);\r

  \  }\r

  \  if (isdef(handler)) d.onclick = handler;\r

  \  return d;\r

  }"
ui_type_item_line: "function ui_type_item_line(dParent, item, styles = {},
  handler = null, props = []) {\r

  \  let d = mDiv(dParent, styles, `d_${item.key}`); mFlex(d);\r

  \  for (const p of props) {\r

  \    let family = p == 'text' ? item.family : 'arial';\r

  \    let fz = p == 'text' ? 40 : 20;\r

  \    mDiv(d, { family: family, fz: fz, bg: styles.bg, fg: styles.fg }, null,
  item[p]);\r

  \  }\r

  \  if (isdef(handler)) { d.onclick = handler; d.setAttribute('item',
  JSON.stringify(item)); }\r

  \  return d;\r

  }"
ui_type_lead_hand: "function ui_type_lead_hand(list, dParent, styles = {}, path
  = 'hand', title = 'hand', get_card_func = ari_get_card, show_if_empty = false)
  {\r

  \  let hcard = isdef(styles.h) ? styles.h - 30 : Config.ui.card.h;\r

  \  addKeys(get_container_styles(styles), styles);\r

  \  let cont = ui_make_container(dParent, styles);\r

  \  let items = list.map(x => get_card_func(x, hcard));\r

  \  let cardcont = mDiv(cont);\r

  \  let card = isEmpty(items) ? { w: 1, h: hcard, ov: 0 } : items[0];\r

  \  let splay = 5;\r

  \  mContainerSplay(cardcont, splay, card.w, card.h, items.length, card.ov *
  card.w);\r

  \  ui_add_cards_to_hand_container(cardcont, items, list);\r

  \  ui_add_container_title(title, cont, items, show_if_empty);\r

  \  return {\r

  \    ctype: 'hand',\r

  \    list: list,\r

  \    path: path,\r

  \    container: cont,\r

  \    cardcontainer: cardcont,\r

  \    splay: splay,\r

  \    items: items,\r

  \  };\r

  }"
ui_type_market: "function ui_type_market(list, dParent, styles = {}, path =
  'market', title = 'market', get_card_func = ari_get_card, show_if_empty =
  false) {\r

  \  let cont = ui_make_container(dParent, get_container_styles(styles));\r

  \  let cardcont = mDiv(cont, { display: 'flex', gap: 2 });\r

  \  let items = list.map(x => get_card_func(x));\r

  \  items.map(x => mAppend(cardcont, iDiv(x)));\r

  \  ui_add_container_title(title, cont, items, show_if_empty);\r

  \  return {\r

  \    ctype: 'market',\r

  \    list: list,\r

  \    path: path,\r

  \    container: cont,\r

  \    cardcontainer: cardcont,\r

  \    items: items,\r

  \  };\r

  }"
ui_type_rank_count: "function ui_type_rank_count(list, dParent, styles, path,
  title, get_card_func, show_if_empty = false) {\r

  \  let cont = ui_make_container(dParent, get_container_styles(styles));\r

  \  let cardcont = mDiv(cont, { display: 'flex' });\r

  \  let items = [];\r

  \  for (const o of list) {\r

  \    let d = mDiv(cardcont, { display: 'flex', dir: 'c', padding: 1, fz: 12,
  align: 'center', position: 'relative' });\r

  \    let c = get_card_func(o.key);\r

  \    mAppend(d, iDiv(c));\r

  \    remove_card_shadow(c);\r

  \    d.innerHTML += `<span style=\"font-weight:bold\">${o.count}</span>`;\r

  \    let item = { card: c, count: o.count, div: d };\r

  \    items.push(item);\r

  \  }\r

  \  ui_add_container_title(title, cont, items, show_if_empty);\r

  \  return {\r

  \    list: list,\r

  \    path: path,\r

  \    container: cont,\r

  \    cardcontainer: cardcont,\r

  \    items: items,\r

  \  }\r

  }"
ui_type_sym_text_line: "function ui_type_sym_text_line(dParent, item, styles =
  {}, handler = null) {\r

  \  let d = mDiv(dParent, styles, `d_${item.key}`); mFlex(d);\r

  \  let sym = valf(item.sym, Syms[item.key]);\r

  \  mDiv(d, { family: sym.family, fz: 40 }, null, sym.text);\r

  \  mDiv(d, { family: 'opensans', fz: 20 }, null, item.text);\r

  \  if (isdef(handler)) { d.onclick = handler; d.setAttribute('item',
  JSON.stringify(item)); }\r

  \  return d;\r

  }"
ui_type_tile: "function ui_type_tile(ga, d, styles, classes) {\r

  \  let item = {};\r

  \  copyKeys(ga, item);\r

  \  let [sym, bg, id] = [Syms[ga.logo], ga.color, getUID()];\r

  \  item.id = id; item.isOpen = true;\r

  \  function open() {\r

  \    let item = Items[id];\r

  \    if (item.isOpen) return; item.isOpen = true;\r

  \    let d1 = iDiv(item); iClear(d1);\r

  \    let d2 = mDiv(d1, { position: 'absolute', top: 2, left: 2, display:
  'flex', gap: 2 });\r

  \    let sz = 20;\r

  \    mDiv(d2, { fz: sz, family: sym.family, 'line-height': sz }, null,
  sym.text);\r

  \    mDiv(d2, { fz: sz - 5, 'line-height': sz }, null, item.friendly);\r

  \    console.log('item.name', item.name)\r

  \    let f = window[item.name + '_open']; if (isdef(f)) f(item);\r

  \  }\r

  \  function close(trigger = true) {\r

  \    let item = Items[id];\r

  \    if (!item.isOpen) return; item.isOpen = false;\r

  \    let d1 = iDiv(item); iClear(d1);\r

  \    mDiv(d1, { fz: 50, family: sym.family, 'line-height': 55 }, null,
  sym.text);\r

  \    mLinebreak(d1, 4);\r

  \    mDiv(d1, { fz: 18, align: 'center' }, null, item.friendly);\r

  \    if (!trigger) return;\r

  \    let f = window[item.name + '_close']; if (isdef(f)) f(item);\r

  \  }\r

  \  function toggle(ev) {\r

  \    evNoBubble(ev);\r

  \    let item = Items[id];\r

  \    if (item.isOpen) close(); else open();\r

  \  }\r

  \  let d1 = mDiv(d, { cursor: 'pointer', 'user-select': 'none', rounding:
  10, margin: 10, vpadding: 15, hmin: 90, wmin: 140, bg: bg, position:
  'relative' }, id, null, 'hop1');\r

  \  d1.setAttribute('name', ga.name);\r

  \  mCenterFlex(d1);\r

  \  iReg(item, { div: d1 });\r

  \  d1.onclick = toggle;\r

  \  close(false);\r

  \  return {\r

  \    item: item,\r

  \    open: open,\r

  \    close: close,\r

  \    toggle: toggle,\r

  \  }\r

  }"
uid: "function uid() {\r

  \  UID += 1;\r

  \  return 'a' + UID;\r

  }"
uidHelpers: "function uidHelpers() {\r

  \  UIDHelpers += 1;\r

  \  return 'id' + UIDHelpers;\r

  }"
uiGetContact: "function uiGetContact(row, msgs = {}) {\r

  \  let image = get_image_path(row);\r

  \  let mydata = `\r

  \      <div class='contact'
  style='position:relative;text-align:center;margin-bottom:18px;'
  username='${row.name}' onclick='start_chat(event)'>\r

  \        <img src='${image}' draggable='true' ondragstart='drag(event)'
  class='img_person sz100' style='margin:0;'/>\r

  \        <br>${row.name}`;\r

  \  if (isdef(msgs[row.username])) {\r

  \    mydata += `<div
  style='width:20px;height:20px;border-radius:50%;background-color:orange;color\
  :white;position:absolute;left:0px;top:0px;'>` + msgs[row.username] +
  \"</div>\";\r

  \  }\r

  \  mydata += \"</div>\";\r

  \  return mydata;\r

  }"
uiGetContacts: "function uiGetContacts(myusers, msgs) {\r

  \  mydata = '';\r

  \  for (const r of myusers) {\r

  \    row = r;\r

  \    mydata += uiGetContact(row, msgs);\r

  \  }\r

  \  return mydata;\r

  }"
uiGetContactStylesAndStart: "function uiGetContactStylesAndStart() {\r

  \  let mydata = `\r

  \  <style>\r

  \    @keyframes appear{\r

  \      0%{opacity:0;transform: translateY(50px)}\r

  \      100%{opacity:1;transform: translateY(0px)}\r

  \     }\r

  \     .contact{\r

  \       cursor:pointer;\r

  \       transition: all .5s cubic-bezier(0.68, -2, 0.265, 1.55);\r

  \     }\r

  \     .contact:hover{\r

  \       transform: scale(1.1);\r

  \     }\r

  \  </style>\r

  \  <div style=\"text-align: center; animation: appear 1s ease both\">\r

  \  `;\r

  \  return mydata;\r

  }"
uiGetGame: "function uiGetGame(gi, tables = []) {\r

  \  let sym = Syms[gi.logo];\r

  \  let bg = getColorDictColor(gi.color);\r

  \  let gname = gi.id;\r

  \  let uname = Session.cur_user;\r

  \  let color = null, id = getUID();\r

  \  if (!isEmpty(tables)) {\r

  \    let t = tables[0];\r

  \    let table_status = t.status;\r

  \    let my_status = t.player_status;\r

  \    let have_another_move = my_status == 'joined' || my_status ==
  'lamov';\r

  \    color = have_another_move ? 'green'\r

  \      : t.player_status == 'join' ? 'orange'\r

  \        : t.host == uname && t.status == 'ready' ? 'yellow'\r

  \          : table_status == 'show' || t.status == 'seen' ? 'blue'\r

  \            : t.status == 'ending' ? 'red' : 'black';\r

  \    id = `rk_${t.id}`;\r

  \  }\r

  \  return `\r

  \  <div onclick=\"onclick_game_in_games_menu(event)\" gamename=${gi.id}
  style='cursor:pointer;border-radius:10px;margin:10px;padding:5px;padding-top:\
  15px;width:120px;height:90px;display:inline-block;background:${bg};position:r\
  elative;'>\r

  \  ${nundef(color) ? '' : runderkreis(color, id)}\r

  \  <span
  style='font-size:50px;font-family:${sym.family}'>${sym.text}</span><br>${gi.f\
  riendly}</div>\r

  \  `;\r

  }"
uiGetGames: "function uiGetGames(mygames, tables) {\r

  \  mydata = '';\r

  \  for (const r of mygames) {\r

  \    row = r;\r

  \    mydata += uiGetGame(row, tables[r.id]);\r

  \  }\r

  \  return mydata;\r

  }"
uiGetGamesStylesAndStart: "function uiGetGamesStylesAndStart() {\r

  \  let mydata = `\r

  \  <style>\r

  \     .contact{\r

  \       cursor:pointer;\r

  \       transition: all .5s cubic-bezier(0.68, -2, 0.265, 1.55);\r

  \     }\r

  \     .contact:hover{\r

  \       transform: scale(1.1);\r

  \     }\r

  \  </style>\r

  \  <div id='game_menu' style=\"text-align: center; animation: appear 1s ease
  both\">\r

  \  `;\r

  \  return mydata;\r

  }"
uiGetLoginNew: "function uiGetLoginNew(row, msgs = {}) {\r

  \  let image = get_image_path(row);\r

  \  let mydata = `\r

  \      <div class='contact'
  style='position:relative;text-align:center;margin-bottom:18px;'
  username='${row.name}' \r

  \        onclick='onclick_user_login_new(event)'>\r

  \        <img src='${image}' draggable='true' ondragstart='drag(event)'
  class='img_person sz100' style='margin:0;'/>\r

  \        <br>${row.name}`;\r

  \  if (isdef(msgs[row.username])) {\r

  \    mydata += `<div
  style='width:20px;height:20px;border-radius:50%;background-color:orange;color\
  :white;position:absolute;left:0px;top:0px;'>` + msgs[row.username] +
  \"</div>\";\r

  \  }\r

  \  mydata += \"</div>\";\r

  \  return mydata;\r

  }"
uiGetLoginNewList: "function uiGetLoginNewList(myusers, msgs) {\r

  \  mydata = '';\r

  \  for (const r of myusers) {\r

  \    row = r;\r

  \    mydata += uiGetLoginNew(row, msgs);\r

  \  }\r

  \  return mydata;\r

  }"
uiGetLoginNewStylesAndStart: "function uiGetLoginNewStylesAndStart() {\r

  \  let mydata = `\r

  \  <style>\r

  \    @keyframes appear{\r

  \      0%{opacity:0;transform: translateY(50px)}\r

  \      100%{opacity:1;transform: translateY(0px)}\r

  \     }\r

  \     .contact{\r

  \       cursor:pointer;\r

  \       transition: all .5s cubic-bezier(0.68, -2, 0.265, 1.55);\r

  \     }\r

  \     .contact:hover{\r

  \       transform: scale(1.1);\r

  \     }\r

  \  </style>\r

  \  <div style=\"text-align: center; animation: appear 1s ease both\">\r

  \  `;\r

  \  return mydata;\r

  }"
uiNodesToUiTree: "function uiNodesToUiTree(R) {\r

  \  let uiTree = {};\r

  \  for (const k in R.uiNodes) {\r

  \    let n = R.uiNodes[k];\r

  \    uiTree[k] = jsCopyMinus(n, 'act', 'ui', 'defParams', 'params');\r

  \  }\r

  \  return uiTree;\r

  }"
unCamel: function unCamel(s) { return separateAtCapitals(s); }
unCamelCase: function unCamelCase(s) { return separateAtCapitals(s); }
uncheckAvailable: "function uncheckAvailable(i) {\r

  \  id = getidAvailable(i); document.getElementById(id).checked = false;\r

  }"
uncheckPlayer: "function uncheckPlayer(i) {\r

  \  id = getidNum(i); document.getElementById(id).checked = false;\r

  }"
uncollapseAll: "function uncollapseAll() {\r

  \  let coll = document.getElementsByClassName(\"collapsible\");\r

  \  for (let i = 0; i < coll.length; i++) {\r

  \    let elem = coll[i];\r

  \    if (!isVisible(getLinkContainerId(elem.id))) fireClick(elem);\r

  \  }\r

  }"
unfillChar: function unfillChar(inp) { unfillCharInput(inp); }
unfillCharInput: "function unfillCharInput(inp) {\r

  \  let d = iDiv(inp);\r

  \  d.innerHTML = '_';\r

  \  mClass(d, 'blink');\r

  \  inp.isBlank = true;\r

  }"
unfillWord: function unfillWord(winp) { winp.charInputs.map(x => unfillCharInput(x)); }
unfocusOnEnter: "function unfocusOnEnter(ev) {\r

  \  if (ev.key === 'Enter') {\r

  \    ev.preventDefault();\r

  \    mBy('dummy').focus();\r

  \  }\r

  }"
unfreezeUI: "function unfreezeUI() {\r

  \  if (!frozen) return;\r

  \  frozen = false;\r

  \  hide('tempFreezer');\r

  }"
unhighAll: function unhighAll(oid) { mapSafe('unhigh', getVisuals, oid); }
unhighAux: function unhighAux(oid) { mapSafe('unhigh', getAuxVisuals, oid); }
unhighlightBoat: "function unhighlightBoat() {\r

  \  if (boatHighlighted) {\r

  \    unhighlightMsAndRelatives(null, boatHighlighted);\r

  \    closeInfoboxesForBoatOids(boatHighlighted);\r

  \    boatHighlighted = null;\r

  \  }\r

  }"
unhighlightContentIds: "function unhighlightContentIds(b) {\r

  \  let s = b.innerHTML;\r

  \  let ids = s.split(/[ ,:;]+/);\r

  \  for (const id of ids) {\r

  \    if (id == '_') continue;\r

  \    let msList = getVisuals(id);\r

  \    if (!msList) continue;\r

  \    for (const ms of msList) ms.unhigh();\r

  \  }\r

  }"
unhighlightMsAndRelatives: "function unhighlightMsAndRelatives(ev, mobj,
  partName) {\r

  \  let id = mobj.id;\r

  \  mobj.unhigh(partName);\r

  \  let relativeIds = id2uids[id];\r

  \  if (nundef(relativeIds)) return;\r

  \  for (const idRel of relativeIds) {\r

  \    let msRel = UIS[idRel];\r

  \    msRel.unhigh('title');\r

  \  }\r

  }"
unhighMain: function unhighMain(oid) { mapSafe('unhigh', getVisual, oid); }
unhighSelfAndRelatives: "function unhighSelfAndRelatives(uid, R) {\r

  \  for (const oid of R.uid2oids[uid]) {\r

  \    for (const uid1 of R.oid2uids[oid]) {\r

  \      let ui = R.getUI(uid1);\r

  \      mUnhigh(ui);\r

  \    }\r

  \  }\r

  \  let n = R.uiNodes[uid];\r

  \  if (n.potentialOverlap) {\r

  \    let ui = R.getUI(uid);\r

  \    sendToBack(ui);\r

  \  }\r

  }"
uniformSizeToContent: "function uniformSizeToContent(uid) {\r

  \  let n = R.uiNodes[uid];\r

  \  if (nundef(n.children)) return { w: 0, h: 0 }\r

  \  parentPadding = isdef(n.params.paddingAroundChildren) ?
  n.params.paddingAroundChildren : DEFS.defaultPadding;\r

  \  childMargin = isdef(n.params.gapBetweenChildren) ?
  n.params.gapBetweenChildren : DEFS.defaultGap;\r

  \  let or = n.params.orientation;\r

  \  let rows = cols = 1;\r

  \  if (or == 'w') { rows = n.params.rows; cols = n.params.cols; }\r

  \  let bl = n.params.baseline;\r

  \  let [y0, wTitle] = calcParentContentYOffsetAndWidth(n, parentPadding);\r

  \  let children = n.children.map(x => R.uiNodes[x]);\r

  \  if (or == 'w') {\r

  \    let wchi = Math.max(...children.map(x => x.size.w));\r

  \    let hchi = Math.max(...children.map(x => x.size.h));\r

  \    let wpar = 2 * parentPadding + wchi * cols + (cols - 1) *
  childMargin;\r

  \    let hpar = y0 + parentPadding + hchi * rows + (rows - 1) *
  childMargin;\r

  \    let xoff = (wTitle > wpar) ? (wTitle - wpar) / 2 : 0;\r

  \    let x = xoff + parentPadding;\r

  \    let y = y0;\r

  \    let i = 0;\r

  \    for (let r = 0; r < rows; r++) {\r

  \      for (let c = 0; c < cols; c++) {\r

  \        let ch = children[i];\r

  \        i += 1;\r

  \        ch.params.size = { w: wchi, h: hchi };\r

  \        ch.params.pos = { x: x, y: y };\r

  \        x += wchi + childMargin;\r

  \        setFixedSizeAndPos(ch);\r

  \      }\r

  \      x = xoff + parentPadding;\r

  \      y += hchi + childMargin;\r

  \    }\r

  \    return { w: wpar, h: hpar };\r

  \  }\r

  \  let axMain, ax2;\r

  \  if (or == 'v') { axMain = 'h'; ax2 = 'w'; }\r

  \  else if (or == 'h') { axMain = 'w'; ax2 = 'h'; }\r

  \  let ax2Max = Math.max(...children.map(x => x.size[ax2]));\r

  \  let axMainSum = children.reduce((a, b) => a + (b.size[axMain] || 0),
  0);\r

  \  axMainSum += childMargin * (children.length - 1);\r

  \  let wmax = (or == 'v' ? ax2Max : axMainSum);\r

  \  let xoff = 0;\r

  \  if (wTitle > wmax) xoff = (wTitle - wmax) / 2;\r

  \  let x0 = parentPadding + xoff;\r

  \  let x = x0;\r

  \  let y = y0;\r

  \  let lastChild = R.uiNodes[n.children[n.children.length - 1]];\r

  \  for (const n1 of children) {\r

  \    if (or == 'v') {\r

  \      switch (bl) {\r

  \        case 'start': x = x0; break;\r

  \        case 'end': x = x0 + ax2Max - n1.size[ax2]; break;\r

  \        case 'centered': x = x0 + (ax2Max - n1.size[ax2]) / 2; break;\r

  \        case 'stretch':\r

  \          x = x0;\r

  \          if (n1.size.w < ax2Max) {\r

  \            n1.size.w = ax2Max;\r

  \            n1.ui.style.minWidth = n1.size.w + 'px';\r

  \          }\r

  \          break;\r

  \        default: x = x0 + (ax2Max - n1.size[ax2]) / 2; break;\r

  \      }\r

  \      n1.pos = { x: x, y: y, cx: x + n1.size.w / 2, cy: y + n1.size.h / 2
  };\r

  \      y += n1.size[axMain];\r

  \      if (n1 != lastChild) y += childMargin;\r

  \    } else {\r

  \      switch (bl) {\r

  \        case 'start': y = y0; break;\r

  \        case 'end': y = y0 + ax2Max - n1.size[ax2]; break;\r

  \        case 'centered': y = y0 + (ax2Max - n1.size[ax2]) / 2; break;\r

  \        case 'stretch':\r

  \          y = y0;\r

  \          if (n1.size.h < ax2Max) {\r

  \            n1.size.h = ax2Max;\r

  \            n1.ui.style.minHeight = n1.size.h + 'px';\r

  \          }\r

  \          break;\r

  \        default: y = y0 + (ax2Max - n1.size[ax2]) / 2; break;\r

  \      }\r

  \      n1.pos = { x: x, y: y, cx: x + n1.size.w / 2, cy: y + n1.size.h / 2
  };\r

  \      x += n1.size.w;\r

  \      if (n1 != lastChild) x += childMargin;\r

  \    }\r

  \    n1.ui.style.left = n1.pos.x + 'px';\r

  \    n1.ui.style.top = n1.pos.y + 'px';\r

  \  }\r

  \  let wParent, hParent;\r

  \  if (or == 'h') {\r

  \    wParent = Math.max(wTitle + parentPadding * 2, x + parentPadding);\r

  \    hParent = y0 + ax2Max + parentPadding;\r

  \  } else {\r

  \    wParent = Math.max(wTitle + parentPadding * 2, ax2Max + 2 * x0);\r

  \    hParent = y0 + axMainSum + parentPadding;\r

  \  }\r

  \  return { w: wParent, h: hParent };\r

  }"
union: "function union(lst1, lst2) {\r

  \  return [...new Set([...lst1, ...lst2])];\r

  }"
uniqueFirstLetters: "function uniqueFirstLetters(arr) {\r

  \  let res = [];\r

  \  for (const s of arr) {\r

  \    if (s.length > 0) {\r

  \      addIf_dep(s[0], res);\r

  \    }\r

  \  }\r

  \  return res;\r

  }"
unitTest8: "function unitTest8() {\r

  \  if (execOptions.activatedTests.includes('8699'))
  console.log(...arguments);\r

  }"
unitTestAutoplay: "function unitTestAutoplay() {\r

  \  if (execOptions.activatedTests.includes('autoplay'))
  console.log(...arguments);\r

  }"
unitTestBattle: "function unitTestBattle() {\r

  \  if (execOptions.activatedTests.includes('battle'))
  console.log(...arguments);\r

  }"
unitTestBuildUnit: "function unitTestBuildUnit() {\r

  \  if (execOptions.activatedTests.includes('buildUnit'))
  console.log(...arguments);\r

  }"
unitTestCard: "function unitTestCard() {\r

  \  if (execOptions.activatedTests.includes('card'))
  console.log(...arguments);\r

  }"
unitTestCards: "function unitTestCards() {\r

  \  if (execOptions.activatedTests.includes('cards'))
  console.log(...arguments);\r

  }"
unitTestCardsNew: "function unitTestCardsNew() {\r

  \  if (execOptions.activatedTests.includes('cardsNew'))
  console.log(...arguments);\r

  }"
unitTestChoice: "function unitTestChoice() {\r

  \  if (execOptions.activatedTests.includes('choice'))
  console.log(...arguments);\r

  }"
unitTestChoicemin: "function unitTestChoicemin() {\r

  \  if (execOptions.activatedTests.includes('choice') ||
  execOptions.activatedTests.includes('choicemin')) console.log(...arguments);\r

  }"
unitTestCombat: "function unitTestCombat() {\r

  \  if (execOptions.activatedTests.includes('combat'))
  console.log(...arguments);\r

  }"
unitTestCombatStage: "function unitTestCombatStage() {\r

  \  if (execOptions.activatedTests.includes('combatStage'))
  console.log(...arguments);\r

  }"
unitTestConflict: "function unitTestConflict() {\r

  \  if (execOptions.activatedTests.includes('conflicts'))
  console.log(...arguments);\r

  }"
unitTestControl: "function unitTestControl() {\r

  \  if (execOptions.activatedTests.includes('control'))
  console.log(...arguments);\r

  }"
unitTestConvoy: "function unitTestConvoy() {\r

  \  if (execOptions.activatedTests.includes('convoy'))
  console.log(...arguments);\r

  }"
unitTestDecision: "function unitTestDecision() {\r

  \  if (execOptions.activatedTests.includes('decision'))
  console.log(...arguments);\r

  }"
unitTestDiplomacy: "function unitTestDiplomacy() {\r

  \  if (execOptions.activatedTests.includes('diplomacy'))
  console.log(...arguments);\r

  }"
unitTestFilter: "function unitTestFilter() {\r

  \  if (execOptions.activatedTests.includes('filter'))
  console.log(...arguments);\r

  }"
unitTestFilterByType: "function unitTestFilterByType() {\r

  \  if (execOptions.activatedTests.includes('filterByType'))
  console.log(...arguments);\r

  }"
unitTestFilterNation: "function unitTestFilterNation() {\r

  \  if (execOptions.activatedTests.includes('filterNation'))
  console.log(...arguments);\r

  }"
unitTestGameloop: "function unitTestGameloop() {\r

  \  if (execOptions.activatedTests.includes('gameloop'))
  console.log(...arguments);\r

  }"
unitTestHover: "function unitTestHover() {\r

  \  if (execOptions.activatedTests.includes('hover'))
  console.log(...arguments);\r

  }"
unitTestInit: "function unitTestInit() {\r

  \  if (execOptions.activatedTests.includes('init'))
  console.log(...arguments);\r

  }"
unitTestLoad: "function unitTestLoad() {\r

  \  if (execOptions.activatedTests.includes('load'))
  console.log(...arguments);\r

  }"
unitTestLog: "function unitTestLog() {\r

  \  if (execOptions.activatedTests.includes('log'))
  console.log(...arguments);\r

  }"
unitTestMap: "function unitTestMap() {\r

  \  if (execOptions.activatedTests.includes('map'))
  console.log(...arguments);\r

  }"
unitTestMatch: "function unitTestMatch() {\r

  \  if (execOptions.activatedTests.includes('match'))
  console.log(...arguments);\r

  }"
unitTestMirrorBattle: "function unitTestMirrorBattle() {\r

  \  if (execOptions.activatedTests.includes('mirror'))
  console.log(...arguments);\r

  }"
unitTestMovement: "function unitTestMovement() {\r

  \  if (execOptions.activatedTests.includes('movement'))
  console.log(...arguments);\r

  }"
unitTestMoving: "function unitTestMoving() {\r

  \  if (execOptions.activatedTests.includes('moving'))
  console.log(...arguments);\r

  }"
unitTestMS: "function unitTestMS() {\r

  \  if (execOptions.activatedTests.includes('ms'))
  console.log(...arguments);\r

  }"
unitTestPlayer: "function unitTestPlayer() {\r

  \  if (execOptions.activatedTests.includes('player'))
  console.log(...arguments);\r

  }"
unitTestRandom: "function unitTestRandom() {\r

  \  if (execOptions.activatedTests.includes('random'))
  console.log(...arguments);\r

  }"
unitTestRemove: "function unitTestRemove() {\r

  \  if (execOptions.activatedTests.includes('remove'))
  console.log(...arguments);\r

  }"
unitTestRemoved: "function unitTestRemoved() {\r

  \  if (execOptions.activatedTests.includes('removed'))
  console.log(...arguments);\r

  }"
unitTestRemovedCheck: "function unitTestRemovedCheck(data) {\r

  \  return execOptions.activatedTests.includes('removed') && 'removed' in
  data && !empty(Object.keys(data.removed));\r

  }"
unitTestRequest: "function unitTestRequest() {\r

  \  if (execOptions.activatedTests.includes('request'))
  console.log(...arguments);\r

  }"
unitTestResnail: "function unitTestResnail() {\r

  \  if (execOptions.activatedTests.includes('resnail'))
  console.log(...arguments);\r

  }"
unitTestResponse: "function unitTestResponse() {\r

  \  if (execOptions.activatedTests.includes('response'))
  console.log(...arguments);\r

  }"
unitTestSave: "function unitTestSave() {\r

  \  if (execOptions.activatedTests.includes('save'))
  console.log(...arguments);\r

  }"
unitTestScenario: "function unitTestScenario() {\r

  \  if (execOptions.activatedTests.includes('scenario'))
  console.log(...arguments);\r

  }"
unitTestScenarioMin: "function unitTestScenarioMin() {\r

  \  if (execOptions.activatedTests.includes('scenarioMin'))
  console.log(...arguments);\r

  }"
unitTestScenarioWar: "function unitTestScenarioWar() {\r

  \  if (execOptions.activatedTests.includes('scenarioWar'))
  console.log(...arguments);\r

  }"
unitTestSeason: "function unitTestSeason() {\r

  \  if (execOptions.activatedTests.includes('season'))
  console.log(...arguments);\r

  }"
unitTestSender: "function unitTestSender() {\r

  \  if (execOptions.activatedTests.includes('sender'))
  console.log(...arguments);\r

  }"
unitTestServer: "function unitTestServer() {\r

  \  if (execOptions.activatedTests.includes('server'))
  console.log(...arguments);\r

  }"
unitTestSkip: "function unitTestSkip() {\r

  \  if (execOptions.activatedTests.includes('skip'))
  console.log(...arguments);\r

  }"
unitTestStage: "function unitTestStage() {\r

  \  if (execOptions.activatedTests.includes('stage'))
  console.log(...arguments);\r

  }"
unitTestStrategy: "function unitTestStrategy() {\r

  \  if (execOptions.activatedTests.includes('strategy'))
  console.log(...arguments);\r

  }"
unitTestUnits: "function unitTestUnits() {\r

  \  if (execOptions.activatedTests.includes('units'))
  console.log(...arguments);\r

  }"
unitTestUnitVisibility: "function unitTestUnitVisibility() {\r

  \  if (execOptions.activatedTests.includes('visible'))
  console.log(...arguments);\r

  }"
unitTestUpgradeUnit: "function unitTestUpgradeUnit() {\r

  \  if (execOptions.activatedTests.includes('upgradeUnit'))
  console.log(...arguments);\r

  }"
unitTimeUp: function unitTimeUp() { return (Settings.minutesPerUnit * 60000 -
  getTimeElapsed()) <= 0; }
unlink: "function unlink(id) {\r

  \  let oids = id2oids[id];\r

  \  let uids = id2uids[id];\r

  \  if (isdef(uids)) for (const uid of uids) removeInPlace(id2uids[uid],
  id);\r

  \  if (isdef(oids)) for (const oid of oids) removeInPlace(oid2ids[oid],
  id);\r

  \  delete id2uids[id];\r

  \  delete id2oids[id];\r

  }"
unpack_table: "function unpack_table(table) {\r

  \  for (const k of ['players', 'fen', 'options', 'scoring']) {\r

  \    let val = table[k];\r

  \    if (isdef(table[k])) table[k] = if_stringified(val); if
  (nundef(table[k])) table[k] = {};\r

  \  }\r

  \  if (isdef(table.modified)) { table.modified = Number(table.modified);
  table.timestamp = new Date(table.modified); table.stime =
  stringBeforeLast(table.timestamp.toString(), 'G').trim(); }\r

  \  assertion(isdef(window[table.game]), 'game function for ' + table.game +
  ' not defined in window');\r

  \  if (isdef(table.game)) { table.func = window[table.game](); }\r

  \  if (isdef(table.options.mode)) { table.mode = table.options.mode; }\r

  \  delete table.action; delete table.expected;\r

  \  return table;\r

  }"
untie_card: "function untie_card(card) {\r

  \  remove_from_selection(card);\r

  \  clear_selection();\r

  \  let oldgroupid = card.groupid;\r

  \  if (isdef(oldgroupid)) delete card.owner;\r

  \  let oldgroup = Items[oldgroupid];\r

  \  let oldindex = isdef(oldgroup) ? oldgroup.ids.indexOf(card.id) : null;\r

  \  if (isdef(oldgroup)) removeInPlace(oldgroup.ids, card.id);\r

  \  return [oldgroup, oldindex];\r

  }"
update_car: "function update_car(canvas, item) {\r

  \  let di = { ArrowUp: canvas.math ? 90 : 270, ArrowDown: canvas.math ? 270
  : 90, ArrowLeft: 180, ArrowRight: 0 };\r

  \  for (const key in di) {\r

  \    if (is_key_down(key)) {\r

  \      item.v.a = di[key];\r

  \      update_position(item);\r

  \      return true;\r

  \    }\r

  \  }\r

  \  return false;\r

  }"
update_cur_table: "function update_cur_table(obj, color) {\r

  \  let t = Session.cur_table;\r

  \  let tnew = obj.table;\r

  \  if (isdef(obj.player_record)) copyKeys(obj.player_record, tnew);\r

  \  copyKeys(tnew, t);\r

  \  if (isdef(color)) {\r

  \    let d = mBy(`rk_${obj.table.id}`);\r

  \    if (isdef(d)) mStyle(d, { bg: color });\r

  \  }\r

  }"
update_current_table: "function update_current_table() {\r

  \  let o = Serverdata.table;\r

  \  assertion(isdef(U), 'NO USER LOGGED IN WHEN GETTING TABLE FROM
  SERVER!!!!!!!!!!!!!!!!!!!!', U, o);\r

  \  if (nundef(Z) || nundef(Z.prev)) Z = { prev: {} };\r

  \  assertion(isdef(Z), 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ', Z);\r

  \  set_user(U.name);\r

  \  for (const wichtig of ['notes', 'uplayer', 'friendly', 'step', 'round',
  'phase', 'stage', 'timestamp', 'modified', 'stime', 'mode', 'scoring']) {\r

  \    if (isdef(Z[wichtig])) Z.prev[wichtig] = jsCopy(Z[wichtig]);\r

  \  }\r

  \  Z.prev.turn = Clientdata.last_turn;\r

  \  copyKeys(o, Z, { uname: true });\r

  \  let [mode, turn, uname, plorder, fen, host] = [Z.mode, Z.turn, Z.uname,
  Z.plorder, Z.fen, Z.host];\r

  \  assertion(!isEmpty(turn), 'turn
  empty!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!', turn, fen,
  plorder);\r

  \  Z.role = !plorder.includes(uname) ? 'spectator' : turn.includes(uname) ?
  'active' : 'inactive';\r

  \  if (Z.game == 'fritz' && Z.role == 'spectator' && isdef(Z.fen.roundorder)
  && Z.fen.roundorder.includes(uname)) {\r

  \    Z.role = 'inactive';\r

  \  }\r

  \  let upl = Z.role == 'active' ? uname : turn[0];\r

  \  if (mode == 'hotseat' && turn.length > 1) { let next =
  get_next_human_player(Z.prev.uplayer); if (next) upl = next; }\r

  \  if (mode == 'multi' && Z.role == 'inactive' && (uname != host ||
  is_human_player(upl))) {\r

  \    upl = uname;\r

  \  }\r

  \  set_player(upl, fen);\r

  \  let [uplayer, pl] = [Z.uplayer, Z.pl];\r

  \  Z.playmode = pl.playmode;\r

  \  if (Z.playmode != 'human') Z.strategy = pl.strategy;\r

  \  let [friendly, modified] = [Z.friendly, Z.modified];\r

  \  Z.skip_presentation = !FORCE_REDRAW && friendly == Z.prev.friendly &&
  modified <= Z.prev.modified && uplayer == Z.prev.uplayer;\r

  \  FORCE_REDRAW = false;\r

  \  if (Z.skip_presentation) {\r

  \    show_status(`nothing new in ${Z.friendly}`);\r

  \    const STOP_POLLING_AFTER = 30000;\r

  \    if (nundef(DA.noshow)) DA.noshow = 1; else DA.noshow++; if (DA.noshow
  >= STOP_POLLING_AFTER) onclick_stoppolling();\r

  \    autopoll();\r

  \  } else {\r

  \    DA.noshow = 0;\r

  \    delete DA.sperre;\r

  \    clear_timeouts();\r

  \  }\r

  }"
update_db_user_from_pl_options: "function update_db_user_from_pl_options(fen,
  game) {\r

  \  let parts = fen.split(',');\r

  \  for (const p of parts) {\r

  \    let [name, startlevel, lang] = p.split(':');\r

  \    startlevel = Number(startlevel);\r

  \    set_startlevel(name, game, startlevel);\r

  \    set_preferred_lang(name, lang);\r

  \  }\r

  }"
update_draw_items: "function update_draw_items() {\r

  \  for (const item of get_values(Items)) {\r

  \    if (isdef(item.update)) item.update(item);\r

  \    if (isdef(item.draw)) item.draw(item);\r

  \  }\r

  }"
update_func: "function update_func(canvas, item) {\r

  \  let [cv, ctx, ia, ib, ifunc, axes] = [canvas.cv, canvas.cx, item.ia,
  item.ib, item.ifunc, item.axes];\r

  \  cClear(cv, ctx);\r

  \  showAxes(ctx, axes);\r

  \  let [la, lb, lf] = [[1, 2, 3, 4, 5, 5, 5, 4, 3, 2], [0, .5, 1, 1.5, 2,
  2.5, 2.5, 2.5, 2, 1.5, 1, .5], ['sin', 'cos']];\r

  \  let [a, b, f] = [la[ia], lb[ib], lf[ifunc]];\r

  \  [item.ia, item.ib, item.ifunc] = [(ia + 1) % la.length, (ib + 1) %
  lb.length, (ifunc + 1) % lf.length];\r

  \  funGraph(ctx, axes, x => Math[f](a * x), \"rgb(11,153,11)\", 1);\r

  \  return false;\r

  }"
update_game_status: "function update_game_status(players) {\r

  \  let d = dTitle;\r

  \  clearElement(d);\r

  \  let d1 = mDiv(d, { display: 'flex', 'justify-content': 'center',
  'align-items': 'space-evenly' });\r

  \  for (const plname in players) {\r

  \    let pl = players[plname];\r

  \    let d2 = mDiv(d1, { margin: 4, align: 'center' }, null, `<img
  src='${pl.imgPath}' style=\"display:block\" class='img_person' width=50
  height=50>${pl.score}`);\r

  \  }\r

  }"
update_game_values: "function update_game_values() {\r

  \  let game = Session.cur_game;\r

  \  let uname = Session.cur_user;\r

  \  let g = Session;\r

  \  let basevals = lookup(DB.games, [game]); if (basevals) copyKeys(basevals,
  g);\r

  \  for (const k in g.options) { g[k] = get_game_or_user_option(g, k); }\r

  \  let uservals = lookup(DB.users, [uname, 'games', game]); if (uservals)
  copyKeys(uservals, g);\r

  \  let levels = lookup(DB.games, [game, 'levels']);\r

  \  g.maxlevel = valf(get_keys(levels).length, 0) - 1;\r

  \  g.color = getColorDictColor(g.color);\r

  \  let level = g.level = nundef(g.level_setting) || g.level_setting ==
  'player' ? valf(g.startlevel, g.def_startlevel)\r

  \    : g.level_setting == 'min' ? 0 : g.level_setting == 'max' ? g.maxlevel
  : g.def_startlevel;\r

  \  if (levels) copyKeys(levels[level], g);\r

  \  delete g.levels;\r

  \  return g;\r

  }"
update_language_choices: "function update_language_choices(g) {\r

  \  let langs = g.availableLanguages;\r

  \  let language_holder = mBy('language_holder');\r

  \  clearElement(language_holder);\r

  \  let friendly = { E: 'english', D: 'german', S: 'spanish', F: 'french', C:
  'mandarin' };\r

  \  if (isdef(language_holder) && isdef(langs) && langs.length > 1) {\r

  \    let avail = toLetterList(langs);\r

  \    let labels = avail.map(x => friendly[x]);\r

  \    let esel = mSelect(language_holder, avail, friendly, valf(g.lang, 'E'),
  (ev) => {\r

  \      let sel = ev.target;\r

  \      let val = sel.value;\r

  \      console.log('selected language', val)\r

  \      set_language(val, false);\r

  \    });\r

  \    mClass(esel.firstChild, 'statusselect');\r

  \  } else if (isdef(language_holder)) {\r

  \    mDiv(language_holder, { patop: 6 }, null, friendly[g.lang],
  'statusselect');\r

  \  }\r

  }"
update_move: "function update_move(canvas, item) {\r

  \  item.y += 1;\r

  \  item.y = cycle(item.y, canvas.miny, canvas.maxy);\r

  \  return true;\r

  }"
update_my_score: "function update_my_score(inc) {\r

  \  let me = Session.cur_players[Session.cur_user];\r

  \  me.score += inc;\r

  \  return me.score;\r

  }"
update_otree_from_ui: "function update_otree_from_ui(otree, objects) {\r

  \  for (const k in objects) {\r

  \    otree[k] = objects[k].list;\r

  \  }\r

  \  qanim();\r

  }"
update_position: "function update_position(item) {\r

  \  let [a1, a2] = [item.a, item.v.a];\r

  \  let diff = Math.abs(a2 - a1);\r

  \  let inc = valf(item.turn_inc, 0);\r

  \  if (inc && diff > inc) {\r

  \    let cclock = is_turn_counter_clockwise(a1, a2);\r

  \    if (cclock) inc = -inc;\r

  \    let anew = a1 + inc;\r

  \    anew = (anew + 360) % 360;\r

  \    item.a = anew;\r

  \  } else {\r

  \    item.a = a2 % 360;\r

  \    let angle = toRadian(item.a);\r

  \    item.x += Math.cos(angle) * item.v.mag;\r

  \    item.y += Math.sin(angle) * item.v.mag;\r

  \  }\r

  }"
update_session: "function update_session(obj) {\r

  \  for (const k in obj) { if (isdef(Session[k])) copyKeys(obj[k],
  Session[k]); else Session[k] = obj[k]; }\r

  \  if (isdef(obj.table)) {\r

  \    Session.cur_table = Session.table;\r

  \    Session.cur_funcs = window[Session.cur_game]();\r

  \    if (!isEmpty(obj.playerdata)) make_players(Session.table.players);\r

  \    console.assert(isdef(Session.cur_user) && Session.cur_game ==
  Session.table.game && Session.cur_tid == Session.table.id, \"SESSION MISMATCH
  IN GAME_OPEN_FOR_MOVE!!!!!!!!!!!!!!!!!!!!!\");\r

  \  }\r

  \  if (isdef(obj.playerdata)) {\r

  \    let o = Session.cur_players;\r

  \    for (const rec of obj.playerdata) {\r

  \      if (rec.state == 'null') rec.state = null;\r

  \      copyKeys(rec, o[rec.name]);\r

  \    }\r

  \  }\r

  }"
update_settings: "function update_settings() {\r

  \  for (const k in settings) {\r

  \    let lower = k.toLowerCase();\r

  \    let inp = mBy(`i_${lower}`);\r

  \    if (isdef(inp)) {\r

  \      let value = Number(inp.innerHTML);\r

  \      if (isNumber(value)) settings[k] = value;\r

  \    }\r

  \  }\r

  \  socket.emit('settings', JSON.stringify(settings));\r

  }"
update_table: "function update_table() {\r

  \  assertion(isdef(U), 'NO USER LOGGED IN WHEN GETTING TABLE FROM
  SERVER!!!!!!!!!!!!!!!!!!!!', U);\r

  \  if (nundef(Z) || nundef(Z.prev)) Z = { prev: {} };\r

  \  for (const wichtig of ['playerdata', 'notes', 'uplayer', 'uname',
  'friendly', 'step', 'round', 'phase', 'stage', 'timestamp', 'modified',
  'stime', 'mode', 'scoring']) {\r

  \    if (isdef(Z[wichtig])) Z.prev[wichtig] = jsCopy(Z[wichtig]);\r

  \  }\r

  \  Z.prev.turn = Clientdata.last_turn = Clientdata.this_turn;\r

  \  copyKeys(Serverdata, Z);\r

  \  if (isdef(Serverdata.table)) { copyKeys(Serverdata.table, Z);
  Z.playerlist = Z.players; copyKeys(Serverdata.table.fen, Z); }\r

  \  assertion(isdef(Z.fen), 'no fen in Z bei cmd=table or startgame!!!',
  Serverdata);\r

  \  Clientdata.this_turn = Z.turn;\r

  \  set_user(U.name);\r

  \  assertion(!isEmpty(Z.turn), 'turn
  empty!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!', Z.turn);\r

  \  let fen = Z.fen;\r

  \  Z.role = !is_playing(Z.uname, fen) ? 'spectator' :
  fen.turn.includes(Z.uname) ? 'active' : 'inactive';\r

  \  let [uname, turn, mode, host] = [Z.uname, fen.turn, Z.mode, Z.host];\r

  \  let upl = Z.role == 'active' ? uname : turn[0];\r

  \  if (mode == 'hotseat' && turn.length > 1) { let next =
  get_next_human_player(Z.prev.uplayer); if (next) upl = next; }\r

  \  if (mode == 'multi' && Z.role == 'inactive' && (uname != host ||
  is_human_player(upl))) { upl = uname; }\r

  \  set_player(upl, fen);\r

  \  let pl = Z.pl;\r

  \  Z.playmode = pl.playmode;\r

  \  Z.strategy = uname == pl.name ? valf(Clientdata.strategy, pl.strategy) :
  pl.strategy;\r

  \  let [uplayer, friendly, modified] = [Z.uplayer, Z.friendly,
  Z.modified];\r

  \  Z.uplayer_data = firstCond(Z.playerdata, x => x.name == Z.uplayer);\r

  \  let sametable = !FORCE_REDRAW && friendly == Z.prev.friendly && modified
  <= Z.prev.modified && uplayer == Z.prev.uplayer;\r

  \  let sameplayerdata = isEmpty(Z.playerdata_changed_for);\r

  \  let myplayerdatachanged = Z.playerdata_changed_for.includes(Z.uplayer);\r

  \  let specialcase = !i_am_host() && !i_am_acting_host() && !i_am_trigger()
  && !myplayerdatachanged;\r

  \  Z.skip_presentation = sametable && (sameplayerdata || specialcase);\r

  \  if (DA.TEST0 && (!sametable || !sameplayerdata)) {\r

  \    console.log('======>Z.skip_presentation', Z.skip_presentation,
  '\\nplayerdata_changed_for', Z.playerdata_changed_for);\r

  \    console.log('_______ *** THE END *** ___________')\r

  \  }\r

  \  FORCE_REDRAW = false;\r

  }"
update_table_options_for_user: "function update_table_options_for_user(uname,
  table_options, game) {\r

  \  let lang = get_preferred_lang(uname);\r

  \  update_db_user_from_pl_options(table_options, game);\r

  \  let lang2 = get_preferred_lang(uname);\r

  \  if (lang != lang2) get_dictionary();\r

  }"
updateBindings: "function updateBindings(supd, R) {\r

  \  for (const oid in supd) {\r

  \    for (const upd of supd[oid]) {\r

  \      let ukind = upd.ukind;\r

  \      if (ukind == 'valueChange') {\r

  \        let propUpdated = upd.prop;\r

  \        let skeys = R.getR(oid);\r

  \        let akku = [];\r

  \        recCollect(R.ROOT, x => { return x.oid == oid }, akku, true);\r

  \        for (const n of akku) {\r

  \          updateNode(n, upd, R);\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  }"
updateBubbleColors: "function updateBubbleColors(e) {\r

  \  const w = window.innerWidth / 255;\r

  \  const h = window.innerHeight / 255;\r

  \  const x = parseInt(e.pageX / w, 10);\r

  \  const y = parseInt(e.pageY / h, 10);\r

  \  const r = x;\r

  \  const g = (y - 255) * -1;\r

  \  const b = x <= y ? y - x : 0;\r

  \  container.style.setProperty('--colorEnd', `rgb(${r},${g},${b})`);\r

  }"
updateCollections: "function updateCollections() {\r

  \  S.settings.collectionTypes = { playerProps: ['hand', 'devcards'],
  objectProps: ['neutral'] };\r

  \  _updateCollections(G.playersUpdated, G.playersAugmented,
  S.settings.collectionTypes.playerProps);\r

  \  _updateCollections(G.tableUpdated, G.table,
  S.settings.collectionTypes.objectProps);\r

  }"
updateColors: "function updateColors(o) {\r

  \  let pal = S.pals[o.iPalette];\r

  \  let bg = pal[o.ipal];\r

  \  o.setBg(bg);\r

  \  if (o.strInfo && o.strInfo.ipals) {\r

  \    let ipals = o.strInfo.ipals;\r

  \    for (const id of o.ids) {\r

  \      let o = getVisual(id);\r

  \      if (o.isManual) continue;\r

  \      let info = o.memInfo;\r

  \      if (info && info.isPal) {\r

  \        let ipal = ipals[info.memType == 'field' ? 0 : info.memType ==
  'corner' ? 1 : 2];\r

  \        o.setBg(pal[ipal], false);\r

  \      }\r

  \    }\r

  \  }\r

  }"
updateCreatedBindings: "function updateCreatedBindings(sCreated, R) {\r

  \  for (const oid in sCreated) {\r

  \    R.addObject(oid, o);\r

  \    for (const sp in R.getSpec()) {\r

  \    }\r

  \    for (const upd of sCreated[oid]) {\r

  \      let ukind = upd.ukind;\r

  \      if (ukind == 'valueChange') {\r

  \        let propUpdated = upd.prop;\r

  \        let skeys = R.getR(oid);\r

  \        let akku = [];\r

  \        recCollect(R.ROOT, x => { return x.oid == oid }, akku, true);\r

  \        for (const n of akku) {\r

  \          updateNode(n, upd, R);\r

  \        }\r

  \      }\r

  \    }\r

  \  }\r

  }"
UpdateDOMStats: "function UpdateDOMStats() {\r

  \  var scoreText = \"Score: \" + (domUpdate_score / 100).toFixed(2);\r

  \  if (Math.abs(domUpdate_score) > MATE - MAXDEPTH) {\r

  \    scoreText = \"Score: \" + \"Mate In \" + (MATE -
  Math.abs(domUpdate_score)) + \" moves\";\r

  \  }\r

  \  $(\"#OrderingOut\").text(\"Ordering: \" + domUpdate_ordering + \"%\");\r

  \  $(\"#DepthOut\").text(\"Depth: \" + domUpdate_depth);\r

  \  $(\"#ScoreOut\").text(scoreText);\r

  \  $(\"#NodesOut\").text(\"Nodes: \" + domUpdate_nodes);\r

  \  $(\"#TimeOut\").text(\"Time: \" + (($.now() - srch_start) /
  1000).toFixed(1) + \"s\");\r

  }"
updateGameArea: "function updateGameArea() {\r

  \  var x, height, gap, minHeight, maxHeight, minGap, maxGap;\r

  \  for (i = 0; i < obstacles.length; i += 1) {\r

  \    if (meme.crashWith(obstacles[i])) {\r

  \      return;\r

  \    }\r

  \  }\r

  \  myGameArea.clear();\r

  \  myGameArea.frameNo += 1;\r

  \  if (myGameArea.frameNo == 1 || everyinterval(150)) {\r

  \    x = myGameArea.canvas.width;\r

  \    minHeight = 20;\r

  \    maxHeight = 200;\r

  \    height = Math.floor(Math.random() * (maxHeight - minHeight + 1) +
  minHeight);\r

  \    minGap = 50;\r

  \    maxGap = 200;\r

  \    gap = Math.floor(Math.random() * (maxGap - minGap + 1) + minGap);\r

  \    obstacles.push(new component(10, height, 'green', x, 0));\r

  \    obstacles.push(new component(10, x - height - gap, 'green', x, height +
  gap));\r

  \  }\r

  \  for (i = 0; i < obstacles.length; i += 1) {\r

  \    obstacles[i].x += -1;\r

  \    obstacles[i].draw();\r

  \  }\r

  \  score.text = 'SCORE: ' + myGameArea.frameNo;\r

  \  score.draw();\r

  \  meme.newPos();\r

  \  meme.draw();\r

  }"
updateGamename: "function updateGamename(gamename) {\r

  \  currentGamename = gamename;\r

  \  let gi = allGames[gamename];\r

  \  currentPlayersById = {};\r

  \  plidByIndex = gi.player_names;\r

  \  for (const plid of gi.player_names) {\r

  \    currentPlayersById[plid] = {};\r

  \  }\r

  \  numPlayersMin = arrMin(gi.num_players);\r

  \  numPlayersMax = arrMax(gi.num_players);\r

  }"
updateGamenameUi: "function updateGamenameUi(id, color) {\r

  \  let uiName = 'spGame';\r

  \  let ui = mBy(uiName);\r

  \  if (nundef(ui)) {\r

  \    ui = mEditableOnEdited(uiName, dLineTopMiddle, 'game: ', '',
  changeGameTo, () => {\r

  \      console.log('Games', getGames());\r

  \    });\r

  \  }\r

  \  ui.innerHTML = id;\r

  \  mStyleX(ui, { fg: color });\r

  }"
updateGameplayerCardCollections: "function updateGameplayerCardCollections(pid,
  oPlayer) {\r

  \  let msPlayerArea = getPlayerArea(pid);\r

  \  for (const propName in oPlayer) {\r

  \    let plColls = getCollections(pid, propName);\r

  \    if (nundef(plColls)) continue;\r

  \    for (const key in plColls) {\r

  \      let coll = plColls[key];\r

  \      if (!coll.tbd) continue;\r

  \      let idCollection = getCollectionArea(key, msPlayerArea);\r

  \      showCollection(coll, idCollection);\r

  \      coll.tbd = null;\r

  \    }\r

  \  }\r

  }"
updateGroupInfo: "async function updateGroupInfo() {\r

  \  let syms20 = await
  route_path_yaml_dict('../assets/speech/syms2020.yaml');\r

  \  console.log(syms20);\r

  \  console.log(KeySets);\r

  \  for (const k in syms20) {\r

  \    KeySets.all.push(k);\r

  \    KeySets.huge.push(k);\r

  \    let info = syms20[k];\r

  \    if (isdef(info.ngroup)) {\r

  \      for (const n of [25, 50, 100]) {\r

  \        if (info.ngroup <= n) KeySets['best' + n].push(k);\r

  \      }\r

  \    }\r

  \    if (info.group != 'smileys-emotion') { KeySets.nemo.push(k); if
  (isdef(info.ngroup)) KeySets.nemo100.push(k); }\r

  \    switch (info.group) {\r

  \      case 'object': KeySets.object.push(k); KeySets.object50.push(k);
  KeySets.objectPlus.push(k); break;\r

  \      case 'animal': KeySets.life.push(k); KeySets.life50.push(k);
  KeySets.lifePlus.push(k); break;\r

  \      case 'fruit': KeySets.life.push(k); KeySets.life50.push(k);
  KeySets.lifePlus.push(k); break;\r

  \      case 'food': KeySets.life.push(k); KeySets.life50.push(k);
  KeySets.lifePlus.push(k); break;\r

  \      case 'drink': KeySets.life.push(k); KeySets.life50.push(k);
  KeySets.lifePlus.push(k); break;\r

  \      case 'vegetable': KeySets.life.push(k); KeySets.life50.push(k);
  KeySets.lifePlus.push(k); break;\r

  \      case 'smileys-emotion': KeySets.emo.push(k); break;\r

  \      case 'people-body': break;\r

  \      default: console.log('forgot group', info.group); break;\r

  \    }\r

  \  }\r

  \  addCatsToKeys();\r

  }"
updateKeySettings: "function updateKeySettings(nMin) {\r

  \  if (nundef(G)) return;\r

  \  G.keys = setKeys({ nMin, lang: Settings.language, keysets: KeySets, key:
  Settings.vocab });\r

  }"
updateLabelSettings: "function updateLabelSettings() {\r

  \  console.assert(isdef(Score.labels), 'Score not set!!!!!')\r

  \  if (Settings.showLabels == 'toggle') Settings.labels = Score.labels ==
  true;\r

  \  else Settings.labels = (Settings.showLabels == 'always');\r

  }"
UpdateListsMaterial: "function UpdateListsMaterial() {\r

  \  var piece, sq, index, colour;\r

  \  for (index = 0; index < BRD_SQ_NUM; ++index) {\r

  \    sq = index;\r

  \    piece = brd_pieces[index];\r

  \    if (piece != PIECES.OFFBOARD && piece != PIECES.EMPTY) {\r

  \      colour = PieceCol[piece];\r

  \      brd_material[colour] += PieceVal[piece];\r

  \      brd_pList[PCEINDEX(piece, brd_pceNum[piece])] = sq;\r

  \      brd_pceNum[piece]++;\r

  \    }\r

  \  }\r

  }"
updateLoginHeader: function updateLoginHeader() {
  document.getElementById('hUsername').innerHTML = 'logged in as <b>' +
  clientData.name + '</b>'; }
updateNode: "function updateNode(n, upd, R) {\r

  \  let oid = upd.oid;\r

  \  let o = R.getO(upd.oid);\r

  \  if (upd.ukind == 'valueChange') {\r

  \    let prop = upd.prop;\r

  \    let oldval = o[prop];\r

  \    o[prop] = upd.newval;\r

  \    let f = RUPDATE[n.type];\r

  \    if (isdef(f)) {\r

  \      let ui = n.ui;\r

  \      let data = n.data;\r

  \      if (data == '.' + upd.prop) {\r

  \        n.content = calcContentFromData(oid, o, n.data, R);\r

  \      }\r

  \      f(ui, n.content);\r

  \    }\r

  \  }\r

  }"
updateOutput: "function updateOutput(R) {\r

  \  for (const area of ['spec', 'uiTree', 'rTree', 'oidNodes', 'dicts',
  'refsIds']) { //'channelsStatic', 'channelsLive' \r

  \    clearElement(area);\r

  \  }\r

  \  if (SHOW_SPEC) { presentNodes(R.lastSpec, 'spec'); }\r

  \  if (SHOW_UITREE) {\r

  \    presentDictTree(R.uiNodes, R.tree.uid, 'uiTree', 'children', R,\r

  \      ['children'],\r

  \      null,\r

  \      ['ui', 'act', 'params', 'defParams', 'cssParams', 'typParams',
  'stdParams'],\r

  \      { 'max-width': '35%', font: '14px arial' });\r

  \  }\r

  \  if (SHOW_RTREE) {\r

  \    presentDictTree(R.rNodes, R.tree.uid, 'rTree', 'children', R,\r

  \      ['children'], null, null, { 'max-width': '35%', font: '14px arial'
  });\r

  \  }\r

  \  if (SHOW_OIDNODES) { presentOidNodes(R, 'oidNodes'); }\r

  \  if (SHOW_DICTIONARIES) {\r

  \    mDictionary(R.rNodesOidKey, { dParent: mBy('dicts'), title:
  'rNodesOidKey ' + Object.keys(R.rNodesOidKey).length });\r

  \    mDictionary(R.Locations, { dParent: mBy('dicts'), title: 'locations ' +
  Object.keys(R.Locations).length });\r

  \  }\r

  \  if (SHOW_IDS_REFS) {\r

  \    mDictionary(R.places, { dParent: mBy('refsIds'), title: 'places ' +
  Object.keys(R.places).length });\r

  \    mDictionary(R.refs, { dParent: mBy('refsIds'), title: 'refs ' +
  Object.keys(R.refs).length });\r

  \  }\r

  \  if (nundef(R.rNodes)) return;\r

  \  let numRTree = Object.keys(R.rNodes).length;\r

  \  let numUiNodes = nundef(R.uiNodes) ? 0 : Object.keys(R.uiNodes).length;\r

  \  let handCounted = R.ROOT.data;\r

  \  console.assert(numRTree == numUiNodes, '!!!FEHLCOUNT!!! #rtree=' +
  numRTree + ', #uiNodes=' + numUiNodes);\r

  }"
updateOutput_dep: "function updateOutput_dep(R) {\r

  \  for (const area of ['spec', 'uiTree', 'rTree', 'oidNodes', 'dicts']) {\r

  \    clearElement(area);\r

  \  }\r

  \  if (SHOW_SPEC) { presentNodes(R.lastSpec, 'spec'); }\r

  \  if (SHOW_UITREE) {\r

  \    presentDictTree(R.uiNodes, R.tree.uid, 'uiTree', 'children', R,\r

  \      ['children'],\r

  \      ['uid', 'adirty', 'type', 'data', 'content', 'uiType', 'oid', 'key',
  'boardType'],\r

  \      null,\r

  \      { 'max-width': '35%', font: '14px arial' });\r

  \  }\r

  \  if (SHOW_RTREE) {\r

  \    presentDictTree(R.rNodes, R.tree.uid, 'rTree', 'children', R,\r

  \      ['children'], null, null, { 'max-width': '35%', font: '14px arial'
  });\r

  \  }\r

  \  if (SHOW_OIDNODES) { presentOidNodes(R, 'oidNodes'); }\r

  \  if (SHOW_DICTIONARIES) {\r

  \    mDictionary(R.rNodesOidKey, { dParent: mBy('dicts'), title:
  'rNodesOidKey ' + Object.keys(R.rNodesOidKey).length });\r

  \    mDictionary(R.Locations, { dParent: mBy('dicts'), title: 'locations ' +
  Object.keys(R.Locations).length });\r

  \  }\r

  \  let numRTree = Object.keys(R.rNodes).length;\r

  \  let numUiNodes = nundef(R.uiNodes) ? 0 : Object.keys(R.uiNodes).length;\r

  \  let handCounted = R.ROOT.data;\r

  \  console.assert(numRTree == numUiNodes, '!!!FEHLCOUNT!!! #rtree=' +
  numRTree + ', #uiNodes=' + numUiNodes);\r

  }"
updatePlayerConfig: "function updatePlayerConfig() {\r

  \  let keysPlayerColors = Object.keys(PLAYER_COLORS);\r

  \  let iColor = 0;\r

  \  for (const id in serverData.players) {\r

  \    let pl = serverData.players[id];\r

  \    let colorName = isdef(pl.color) ? pl.color :
  keysPlayerColors[iColor];\r

  \    colorName = colorName.toLowerCase();\r

  \    let altName = capitalize(colorName);\r

  \    let color = isdef(PLAYER_COLORS[colorName]) ? PLAYER_COLORS[colorName]
  : colorName;\r

  \    playerConfig[GAME].players[id].color = color;\r

  \    iColor += 1;\r

  \  }\r

  }"
updatePlayersForGame: "function updatePlayersForGame() {\r

  \  currentNumPlayers = 0;\r

  \  for (let i = 1; i <= MAX_PLAYERS_AVAILABLE; i += 1) {\r

  \    if (i <= numPlayersMin) { currentNumPlayers += 1; showPlayer(i);
  checkPlayer(i); makePlayerReadOnly(i); }\r

  \    else if (i <= numPlayersMax) { showPlayer(i); uncheckPlayer(i); }\r

  \    else { hidePlayer(i); }\r

  \  }\r

  }"
updatePlayersForMode: "function updatePlayersForMode() {\r

  \  let mode = currentPlaymode;\r

  \  let val = 'me';\r

  \  let n = MAX_PLAYERS_AVAILABLE;\r

  \  for (let i = 1; i <= n; i += 1) {\r

  \    let id = getidType(i);\r

  \    if (!isVisible(id)) continue;\r

  \    if (mode == 'solo') { populateSelect(i, soloTypes, val); val = 'AI
  regular'; }\r

  \    else if (mode == 'hotseat' || mode == 'passplay') { populateSelect(i,
  soloTypes, val); }\r

  \    else {\r

  \      populateSelect(i, allPlayerTypes, val);\r

  \      val = PLAYER_CONFIG_FOR_MULTIPLAYER.length > i ?
  PLAYER_CONFIG_FOR_MULTIPLAYER[i] : 'human';\r

  \    }\r

  \  }\r

  }"
updatePlaymode: "function updatePlaymode(mode) {\r

  \  currentPlaymode = mode;\r

  \  makePlayermodeReadOnly('multiplayer');\r

  }"
updatePreviewImage: "function updatePreviewImage(dParent, file, sz = 768) {\r

  \  const url = URL.createObjectURL(file);\r

  \  dParent.innerHTML = `<img src=\"${url}\" height=${sz}/>`;\r

  }"
updatePreviewImages: "function updatePreviewImages(dParent, files) {\r

  \  for (const f of files) {\r

  \    let sz = 200;\r

  \    let d = mDiv(dParent, { display: 'inline', w: sz, h: sz });\r

  \    updatePreviewImage(d, f, sz);\r

  \  }\r

  }"
updateSettings: "function updateSettings() {\r

  \  appSpecificSettings();\r

  \  for (const k in SettingTypesCommon) {\r

  \    if (SettingTypesCommon[k]) {\r

  \      lookupSetOverride(U, ['settings', k], Settings[k]);\r

  \    } else {\r

  \      if (isdef(G.id)) lookupSetOverride(U, ['games', G.id, 'settings', k],
  Settings[k]);\r

  \    }\r

  \  }\r

  }"
updateSizes: "function updateSizes(nuiBoard) {\r

  \  let szOrig = nuiBoard.params.sizes.f;\r

  \  let szNew = szOrig;\r

  \  let cSizeOrig = nuiBoard.params.sizes.c;\r

  \  let cSizeNew = cSizeOrig;\r

  \  let eSizeOrig = nuiBoard.params.sizes.e;\r

  \  let eSizeNew = eSizeOrig;\r

  \  if (nundef(nuiBoard.resizeInfo)) nuiBoard.resizeInfo = {};\r

  \  if (isdef(nuiBoard.resizeInfo.fields)) {\r

  \    szNew = nuiBoard.resizeInfo.fields;\r

  \  }\r

  \  if (isdef(nuiBoard.resizeInfo.corners)) {\r

  \    cSizeNew = nuiBoard.resizeInfo.corners;\r

  \  }\r

  \  szNew = Math.max(szNew, cSizeNew);\r

  \  if (isdef(nuiBoard.resizeInfo.edges)) {\r

  \    eSizeNew = nuiBoard.resizeInfo.edges;\r

  \  }\r

  \  szNew = Math.max(szNew, eSizeNew);\r

  \  return { sOrig: { f: szOrig, c: cSizeOrig, e: eSizeOrig }, sNew: { f:
  szNew, c: cSizeNew, e: eSizeNew } };\r

  }"
updateSpeakmodeSettings: "function updateSpeakmodeSettings() {\r

  \  if (Settings.silentMode && Settings.spokenFeedback)
  Settings.spokenFeedback = false;\r

  }"
updateStartLevelForUser: "function updateStartLevelForUser(game, level, msg) {\r

  \  lookupSetOverride(U.games, [game, 'startLevel'], level);\r

  \  saveUser();\r

  }"
updateSymbolDict: "async function updateSymbolDict() {\r

  \  let snew = await route_path_yaml_dict('../assets/syms.yaml');\r

  \  let sold = await route_path_yaml_dict('../assets/symbolDict.yaml');\r

  \  let soldlc = {};\r

  \  for (const k in sold) {\r

  \    let klc = k.toLowerCase();\r

  \    let o = soldlc[klc] = sold[k];\r

  \    o.key = klc;\r

  \  }\r

  \  for (const k in snew) {\r

  \    if (nundef(soldlc[k])) {\r

  \      soldlc[k] = snew[k];\r

  \      console.log('new key added to symbolDict', k)\r

  \    } else {\r

  \      let onew = snew[k];\r

  \      let oold = soldlc[k];\r

  \      if (onew.type != oold.type) {\r

  \        soldlc[k] = onew;\r

  \        console.log('symbolDict key updated', k)\r

  \      }\r

  \    }\r

  \  }\r

  \  downloadAsYaml(soldlc, 'symbolDict_upd');\r

  }"
updateSymbolDictFromDictionaries: "async function
  updateSymbolDictFromDictionaries() {\r

  \  [EdDict, DeDict] = await loadGerman();\r

  \  let ekeys = Object.keys(EdDict);\r

  \  let lowerEKeys = ekeys.map(x => x.toLowerCase());\r

  \  console.log('dict e=>d', ekeys);\r

  \  ensureSymByType();\r

  \  let keys = symKeysByType['icon'];\r

  \  console.log('keys', keys);\r

  \  let inter = intersection(keys, lowerEKeys);\r

  \  console.log('intersection:', inter);\r

  \  for (const k of inter) {\r

  \    let entry = lookup(EdDict, [k, 'd']);\r

  \    if (nundef(entry)) {\r

  \      console.log('gibt es nicht!', k)\r

  \    } else {\r

  \      console.log('entry', entry)\r

  \      console.log('JA!', k, entry.join('|'));\r

  \      symbolDict[k].D = entry.join('|').toLowerCase();\r

  \      symbolDict[k].E = k;\r

  \    }\r

  \  }\r

  \  downloadAsYaml(symbolDict, 'symbolDict');\r

  }"
updateTableCardCollections: "function updateTableCardCollections() {\r

  \  let msTableArea = getTabletopCardsArea();\r

  \  for (const oid in collections) {\r

  \    if (nundef(G.table[oid])) continue;\r

  \    let o = G.table[oid];\r

  \    for (const propName in o) {\r

  \      let colls = getCollections(oid, propName);\r

  \      if (nundef(colls)) continue;\r

  \      for (const key in colls) {\r

  \        let coll = colls[key];\r

  \        if (!coll.tbd) continue;\r

  \        let idCollection = getCollectionArea(key, msTableArea);\r

  \        showCollection(coll, idCollection);\r

  \        coll.tbd = null;\r

  \      }\r

  \    }\r

  \  }\r

  }"
updateTableCardCollections_COPY: "function updateTableCardCollections_COPY(oid)
  {\r

  \  if (nundef(collections[oid])) return;\r

  \  let msArea = getTabletopCardsArea();\r

  \  if (isEmpty(collections)) {\r

  \    return;\r

  \  }\r

  \  for (const propName of G.tableUpdated[oid].summary) {\r

  \    let o = G.table[propName];\r

  \    let plColl = getTableCollections(oid, propName);\r

  \    if (isdef(plColl)) {\r

  \      for (const key in plColl) {\r

  \        let ha = plColl[key];\r

  \        let idCollection = getCollectionArea(key, msArea);\r

  \        let divHand = UIS[idCollection].elem;\r

  \        divHand.style.position = null;\r

  \        getSimpleSetElements(ha.hand)\r

  \        showPlayerHandNew(ha.name, ha.arr, key);\r

  \      }\r

  \    }\r

  \  }\r

  }"
updateTablenameUi: "function updateTablenameUi(id, color) {\r

  \  let uiName = 'spTable';\r

  \  let ui = mBy(uiName);\r

  \  if (nundef(ui)) {\r

  \    ui = mEditableOnEdited(uiName, dLineTopRight, 'table: ', '',
  changeTableTo, () => {\r

  \      console.log('Tables', getTables());\r

  \    });\r

  \  }\r

  \  ui.innerHTML = id;\r

  \  mStyleX(ui, { fg: color });\r

  }"
updateTestInput: "function updateTestInput(index) {\r

  \  let elem = mBy('iTestCase');\r

  \  if (isdef(elem)) {\r

  \    elem.max = Object.keys(testEngine.specs).length - 1;\r

  \    elem.min = 0;\r

  \    elem.value = index;\r

  \  }\r

  }"
updateTimeSettings: "function updateTimeSettings() {\r

  \  let timeElem = mBy('time');\r

  \  if (Settings.showTime) { show(timeElem); startTime(timeElem); }\r

  \  else hide(timeElem);\r

  }"
updateTooltipContent: "function updateTooltipContent(oid) {\r

  \  let pool = findPool(oid);\r

  \  let o = pool[oid];\r

  \  ttTitle(oid, o);\r

  \  ttBody(oid, o);\r

  }"
updateTooltipContent_hallo: "function updateTooltipContent_hallo(id) {\r

  \  let oid = getOidForMainId(id);\r

  \  let pool = findPool(id);\r

  \  let o = pool[id];\r

  \  console.log('tt', id, oid, o)\r

  \  return;\r

  \  ttTitle(id, o);\r

  \  ttBody(id, o);\r

  }"
updateUsernameUi: "function updateUsernameUi(id, color) {\r

  \  let uiName = 'spUser';\r

  \  let ui = mBy(uiName);\r

  \  if (nundef(ui)) {\r

  \    ui = mEditableOnEdited(uiName, dLineTopLeft, 'user: ', '',
  changeUserTo, () => {\r

  \      console.log('Users', getUsers());\r

  \    });\r

  \  }\r

  \  ui.innerHTML = id;\r

  \  mStyleX(ui, { fg: color });\r

  }"
updateUserScore: "function updateUserScore() {\r

  \  if (nundef(Score.nTotal) || Score.nTotal <= 0) return;\r

  \  let sc = { nTotal: Score.nTotal, nCorrect: Score.nCorrect, nCorrect1:
  Score.nCorrect1, nWins: Score.nWins, nLoses: Score.nLoses, nTied: Score.nTied
  };\r

  \  let g = G.id;\r

  \  let recOld = lookupSet(U, ['games', g], { startLevel: 0, nTotal: 0,
  nCorrect: 0, nCorrect1: 0, nWins: 0, nLoses: 0, nTied: 0 });\r

  \  let recSession = lookupSet(U, ['session', g], { startLevel: 0, nTotal: 0,
  nCorrect: 0, nCorrect1: 0, nWins: 0, nLoses: 0, nTied: 0 });\r

  \  addByKey(sc, recSession);\r

  \  let counts = DB.games[g].controllerType == 'solo' ? recSession.nWins :
  recSession.nCorrect;\r

  \  recSession.percentage = Math.round(100 * counts / recSession.nTotal);\r

  \  addByKey(sc, recOld);\r

  \  counts = DB.games[g].controllerType == 'solo' ? recOld.nWins :
  recOld.nCorrect;\r

  \  recOld.percentage = Math.round(100 * recOld.nCorrect / recOld.nTotal);\r

  \  Score.nTotal = Score.nCorrect = Score.nCorrect1 = 0;\r

  \  saveUser();\r

  }"
upgradeToSimpleGraph: "function upgradeToSimpleGraph(g, dParent, styles = {})
  {\r

  \  g.id = nundef(dParent.id) ? getUID() : dParent.id;\r

  \  let styleDict = {\r

  \    node: { 'width': 25, 'height': 25, 'background-color': 'red',
  \"color\": \"#fff\", 'label': 'data(id)', \"text-valign\": \"center\",
  \"text-halign\": \"center\", },\r

  \    edge: { 'width': 2, 'line-color': 'silver', 'curve-style': 'haystack',
  },\r

  \    'node.highlight': { 'background-color': 'yellow' },\r

  \    'node.trans': { 'opacity': '0.5' },\r

  \  }\r

  \  for (const ks of ['node', 'edge', 'node.highlight', 'node.trans']) {\r

  \    if (isdef(styles[ks])) {\r

  \      for (const k in styles[ks]) {\r

  \        let [prop, val] = translateToCssStyle(k, styles[ks][k], false);\r

  \        styleDict[ks][prop] = val;\r

  \      }\r

  \    }\r

  \  }\r

  \  let cyStyle = [];\r

  \  for (const k in styleDict) { cyStyle.push({ selector: k, style:
  styleDict[k] }); }\r

  \  let size = getSize(dParent);\r

  \  let d1 = mDiv(dParent, { position: 'relative', bg: 'green', w: size.w -
  80, left: 40, top: 0, h: size.h, align: 'left' });\r

  \  g.cy.mount(d1);\r

  \  g.cy.style(cyStyle);\r

  \  g.enablePanZoom();\r

  \  iAdd(g, { div: dParent, dCy: d1 });\r

  }"
uploadImgData: "function uploadImgData(imgFile) {\r

  \  let pack = {};\r

  \  let data = imgFile.data;\r

  \  let filename = imgFile.name; console.log('filename', filename);\r

  \  let key = stringBefore(filename, '.');\r

  \  pack[key] = { data: data, name: key, filename: filename, type:
  'imageData' };\r

  \  Socket.emit('generalImages', { pack: pack });\r

  \  console.log('uploading pack', pack);\r

  }"
user_already_loaded: function user_already_loaded(name) { return isdef(name &&
  name == Session.cur_user); }
userUpdate: "function userUpdate(proplist, val) {\r

  \  lookupSetOverride(U, proplist, val);\r

  \  saveUser();\r

  }"
useSymbolElemNO: "function useSymbolElemNO(key = 'Treff', h = 50, x = 0, y = 0)
  {\r

  \  return mCreateFrom(`<use xlink:href=\"#${key}\" height=\"${h}\"
  x=\"${x}\" y=\"${y}\"></use>`);\r

  }"
utter: "function utter(text, r = .5, p = .8, v = .5, voiceDesc, callback = null)
  {\r

  \  let [voiceKey, voice] = findSuitableVoice(text, voiceDesc);\r

  \  utterance.text = sepWords(text, voiceKey);\r

  \  utterance.rate = r;\r

  \  utterance.pitch = p;\r

  \  utterance.volume = v;\r

  \  utterance.voice = voice;\r

  \  utterance.onend = callback;\r

  \  synth.onend\r

  \  if (isdef(timeout2)) { clearTimeout(timeout2); }\r

  \  timeout2 = setTimeout(() => {\r

  \    if (!isINTERRUPT) {\r

  \      isSpeakerRunning = true;\r

  \    }\r

  \    synth.speak(utterance); focus(mBy(defaultFocusElement));\r

  \  }, 200);\r

  }"
valf: "function valf() {\r

  \  for (const arg of arguments) if (isdef(arg)) return arg;\r

  \  return null;\r

  }"
valfi: "function valfi() {\r

  \  for (const arg of arguments) {\r

  \    if (isdef(arg)) return arg;\r

  \  }\r

  \  return null;\r

  }"
valnwhite: "function valnwhite() {\r

  \  for (const arg of arguments) if (isdef(arg) && !isEmptyOrWhiteSpace(arg))
  return arg;\r

  \  return null;\r

  }"
valToString: function valToString(n) { if (isFractionType(n)) return
  getTextForFractionX(n.n, n.d); else return n; }
valueOfElement: "function valueOfElement(id) {\r

  \  return document.getElementById(id).value;\r

  }"
verify_min_req: "function verify_min_req() {\r

  \  let [fen, uplayer] = [Z.fen, Z.uplayer];\r

  \  let pl = fen.players[uplayer];\r

  \  let jsorted = jsCopy(pl.journeys).sort((a, b) => b.length - a.length);\r

  \  let di = {\r

  \    '3': jsorted.length > 0 && is_group(jsorted[0]) && jsorted[0].length >=
  3,\r

  \    '33': jsorted.length > 1 && is_group(jsorted[0]) && jsorted[0].length
  >= 3\r

  \      && is_group(jsorted[1]) && jsorted[1].length >= 3,\r

  \    '4': jsorted.length > 0 && is_group(jsorted[0]) && jsorted[0].length >=
  4,\r

  \    '44': jsorted.length > 1 && is_group(jsorted[0]) && jsorted[0].length
  >= 4\r

  \      && is_group(jsorted[1]) && jsorted[1].length >= 4,\r

  \    '5': jsorted.length > 0 && is_group(jsorted[0]) && jsorted[0].length >=
  5,\r

  \    '55': jsorted.length > 1 && is_group(jsorted[0]) && jsorted[0].length
  >= 5\r

  \      && is_group(jsorted[1]) && jsorted[1].length >= 5,\r

  \    '7R': jsorted.length > 0 && is_sequence(jsorted[0]) &&
  jsorted[0].length >= 7,\r

  \  };\r

  \  let goals = is_fixed_goal() ? [get_round_goal()] :
  get_available_goals(uplayer);\r

  \  for (const g of goals) {\r

  \    if (di[g] == true) { return true; }\r

  \  }\r

  \  return false;\r

  }"
verify_unit_test: "function verify_unit_test(otree) {\r

  \  if (isdef(DA.verify) && ITER == DA.iter_verify) {\r

  \    TestRunning = false;\r

  \    let res = DA.verify(otree);\r

  \    console.log('***UNIT TEST ' + TestNumber, res ? 'passed...' :
  'FAILED!!!!!!!!!!!!!!!!');\r

  \    console.assert(res, '*** STOP TEST FAIL ***')\r

  \    if (TestSuiteRunning) test_engine_run_next(TestList);\r

  \  }\r

  \  return true;\r

  }"
verifySequence: "async function verifySequence(indexFrom, indexTo,
  saveOnCompleted = false) {\r

  \  show('btnStop');\r

  \  console.log('______________ verify from', indexFrom, 'to', indexTo,
  'save', saveOnCompleted);\r

  \  testEngine.autosave = true;\r

  \  clearElement(mBy('table'));\r

  \  let series = testEngine.series;\r

  \  let maxIndex = indexTo;\r

  \  let index = indexFrom;\r

  \  await testEngine.loadTestCase(series, index);\r

  \  await rParse(RSG_SOURCE, { defs: testEngine.defs, spec: testEngine.spec,
  sdata: testEngine.sdata });\r

  \  setTimeout(async () => { await verNext(series, index + 1, maxIndex,
  saveOnCompleted); }, 1000);\r

  }"
verNext: "async function verNext(series, index, maxIndex, saveOnCompleted =
  false) {\r

  \  await testEngine.loadTestCase(series, index);\r

  \  await rParse(RSG_SOURCE, { defs: testEngine.defs, spec: testEngine.spec,
  sdata: testEngine.sdata });\r

  \  let timeOUT = 500;\r

  \  if (index < maxIndex && !STOP) setTimeout(async () => { await
  verNext(series, index + 1, maxIndex, saveOnCompleted); }, timeOUT);\r

  \  else {\r

  \    isTraceOn = SHOW_TRACE;\r

  \    STOP = false;\r

  \    hide('btnStop');\r

  \    if (saveOnCompleted) saveSolutions(series,
  testEngine.Dict[series].solutions);\r

  \  }\r

  }"
visNumber: "function visNumber(n, dParent, color, or = 'h', asNumber = [0]) {\r

  \  if (!isNumber(n) || asNumber.includes(n)) return zText('' + n, dParent, {
  fg: 'white', fz: 64 });\r

  \  return _visualizeNumber(n, dParent, color, or);\r

  }"
visOperation: "function visOperation(op, a, b, dParent, symResult) {\r

  \  switch (op) {\r

  \    case 'plus':\r

  \    case 'minus': return _visualizeAritOp(op, a, b, dParent, symResult);
  break;\r

  \    case 'mult': return _visualizeMult(a, b, dParent, symResult); break;\r

  \  }\r

  }"
visOperator: "function visOperator(s, dParent, styles = { fg: 'white', fz: 64 })
  {\r

  \  zText(s, dParent, styles);\r

  }"
visual: "function visual(shape, { ipal, fill, x, y, w, h, sPoints, border,
  thickness, rounding, path, txt, fz, sz }, overlay = true, draw = true) {\r

  \  let ms = new MS(uid(), 'g');\r

  \  let options = {};\r

  \  if (ipal) fill = getpal(ipal);\r

  \  if (fill) options.fill = fill;\r

  \  if (x) options.x = x;\r

  \  if (y) options.y = y;\r

  \  if (w) options.w = w;\r

  \  if (h) options.h = h;\r

  \  if (txt) options.txt = txt;\r

  \  if (fz) options.fz = fz;\r

  \  if (sz) options.sz = sz;\r

  \  if (sPoints) options.sPoints = sPoints;\r

  \  if (border) options.border = border;\r

  \  if (thickness) options.thickness = thickness;\r

  \  if (rounding) options.rounding = rounding;\r

  \  if (path) options.path = './assets/images/transpng/' + path + '.png';\r

  \  switch (shape) {\r

  \    case 'circle':\r

  \      ms.circle(options);\r

  \      break;\r

  \    case 'hex':\r

  \      ms.hex(options);\r

  \      break;\r

  \    case 'rect':\r

  \      ms.rect(options);\r

  \      break;\r

  \    case 'poly':\r

  \      ms.poly(options);\r

  \      break;\r

  \    case 'image':\r

  \      ms.image(options);\r

  \      break;\r

  \    case 'text':\r

  \      ms.text(options);\r

  \      break;\r

  \    default:\r

  \      return null;\r

  \  }\r

  \  if (overlay) {\r

  \    overlayOptions = jsCopy(options);\r

  \    overlayOptions.className = 'overlay';\r

  \    delete overlayOptions.fill;\r

  \    delete overlayOptions.path;\r

  \    switch (shape) {\r

  \      case 'circle':\r

  \        ms.circle(overlayOptions);\r

  \        break;\r

  \      case 'hex':\r

  \        ms.hex(overlayOptions);\r

  \        break;\r

  \      case 'rect':\r

  \        ms.rect(overlayOptions);\r

  \        break;\r

  \      case 'poly':\r

  \        ms.poly(overlayOptions);\r

  \        break;\r

  \      case 'image':\r

  \        ms.rect(overlayOptions);\r

  \        break;\r

  \      case 'text':\r

  \        ms.text(overlayOptions);\r

  \        break;\r

  \      default:\r

  \        return null;\r

  \    }\r

  \  }\r

  \  if (draw) ms.draw();\r

  \  return ms;\r

  }"
visualAttributeSetter: "function visualAttributeSetter(c) {\r

  \  let props = 'innerHTML onclick';\r

  \  for (const k of props.split(' ')) {\r

  \    propertyGiver(c, k, x => c.visual[k] = x, () => c.visual[k]);\r

  \  }\r

  }"
visualPropertySetter: "function visualPropertySetter(c) {\r

  \  let props = 'bg fg h w background color height width rounding padding fz
  font align';\r

  \  for (const k of props.split(' ')) {\r

  \    propertyGiver(c, k,\r

  \      x => { let styles = {}; styles[k] = x; mStyle(c.visual, styles); },\r

  \      () => { return mGetStyle(c.visual, k); }\r

  \    );\r

  \  }\r

  }"
waitForLogin: "function waitForLogin() {\r

  \  initDom();\r

  \  openTabTesting('Seattle');\r

  }"
wegMitwh: "async function wegMitwh() {\r

  \  let syms = await route_path_yaml_dict('../assets/syms.yaml');\r

  \  let newSyms = {};\r

  \  for (const k in syms) {\r

  \    let info = jsCopy(syms[k]);\r

  \    info.w = info.w[0];\r

  \    info.h = info.h[0];\r

  \    newSyms[k] = info;\r

  \  }\r

  \  downloadAsYaml(newSyms, 'syms');\r

  }"
weiter_process_inspect: "function weiter_process_inspect() {\r

  \  let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];\r

  \  let item = A.items[A.selected[0]];\r

  \  let uibuilding = A.uibuilding = item.o;\r

  \  let fenbuilding = A.fenbuilding = lookup(fen,
  uibuilding.path.split('.'));\r

  \  let key = uibuilding.keycard.key;\r

  \  let cards = uibuilding.items;\r

  \  let schweine_cand = [];\r

  \  for (let i = 1; i < cards.length; i++) {\r

  \    if (fenbuilding.schweine.includes(i)) continue;\r

  \    let card = cards[i];\r

  \    if (card.key == key) continue;\r

  \    assertion(i == card.index, 'wrong card index!!!!')\r

  \    schweine_cand.push(card);\r

  \  }\r

  \  if (schweine_cand.length > 1) {\r

  \    Z.stage = 38;\r

  \    ari_pre_action();\r

  \  } else if (schweine_cand.length == 1) {\r

  \    setTimeout(() => turn_new_schwein_up(schweine_cand[0], fenbuilding,
  uibuilding), 3000);\r

  \  } else if (isEmpty(fenbuilding.schweine)) {\r

  \    Z.stage = 29;\r

  \    ari_history_list([`${uplayer} inspects a correct building`],
  'inspect');\r

  \    show_instruction('the building is CORRECT - You loose 1 rumor')\r

  \    setTimeout(ari_pre_action, 2000);\r

  \  } else {\r

  \    let rumor = fen.deck_rumors[0]; fen.deck_rumors.shift();\r

  \    fen.players[uplayer].rumors.push(rumor);\r

  \    show_instruction('no additional schwein has been found - you gain 1
  rumor')\r

  \    ari_history_list([`${uplayer} inspects a schweine!`], 'inspect');\r

  \    setTimeout(ari_next_action, 2000);\r

  \  }\r

  }"
whenSoundPaused: "function whenSoundPaused() {\r

  \  _sndPlayer = null;\r

  \  _sndPlayerIdle = true;\r

  \  _loaded = false;\r

  \  if (!isEmpty(_qSound)) { _deqSound(); } else { _idleSound = true; }\r

  }"
where: "function where(o) {\r

  \  let fname = getFunctionsNameThatCalledThisFunction();\r

  }"
whichGame: function whichGame(callback) { let route = '/game/info';
  _sendRouteJS(route, callback); }
whoAmI: "function whoAmI() {\r

  \  let gc = S.gameConfig;\r

  \  return { username: USERNAME, playerOnTurn: G.player, myPlayers:
  [S.gameConfi] }\r

  }"
wise: "function wise() {\r

  \  function state_info(dParent) { return; }\r

  \  function setup(players, options) {\r

  \    let fen = { players: {}, plorder: jsCopy(players), history: [], num:
  options.num };\r

  \    let starter = fen.starter = fen.plorder[0];\r

  \    Sayings = shuffle(Sayings);\r

  \    fen.index = 0;\r

  \    fen.saying = Sayings[fen.index];\r

  \    for (const plname of players) {\r

  \      let pl = fen.players[plname] = {\r

  \        score: 0,\r

  \        name: plname,\r

  \        color: get_user_color(plname),\r

  \      };\r

  \    }\r

  \    [fen.phase, fen.stage, fen.step, fen.turn] = ['one', 'write', 0,
  jsCopy(fen.plorder)];\r

  \    return fen;\r

  \  }\r

  \  function check_gameover() {\r

  \    let winners = [];\r

  \    for (const plname of Z.plorder) {\r

  \      let cond = get_player_score(plname) >= Z.options.winning_score;\r

  \      if (cond) { winners.push(plname); }\r

  \    }\r

  \    if (!isEmpty(winners)) Z.fen.winners = winners;\r

  \    return isEmpty(winners) ? false : Z.fen.winners;\r

  \  }\r

  \  function post_collect() { agmove_resolve(); }\r

  \  return { post_collect, state_info, setup, present: wise_present,
  check_gameover, activate_ui: wise_activate };\r

  }"
wise_activate: "function wise_activate() {\r

  \  let [pldata, stage, A, fen, phase, uplayer] = [Z.playerdata, Z.stage,
  Z.A, Z.fen, Z.phase, Z.uplayer];\r

  \  let donelist = Z.playerdata.filter(x => isDict(x.state));\r

  \  let complete = donelist.length == Z.plorder.length;\r

  \  let resolvable = uplayer == fen.starter && complete;\r

  \  let waiting = !resolvable && isdef(donelist.find(x => x.name ==
  uplayer));\r

  \  console.log(uplayer, stage, 'done', donelist, 'complete', complete,
  'waiting', waiting);\r

  \  Z.isWaiting = false;\r

  \  if (waiting) {\r

  \    mDiv(dTable, {}, null, 'WAITING FOR PLAYERS TO COMPLETE....');\r

  \    if (complete) {\r

  \      Z.turn = [fen.starter];\r

  \      if (Z.mode != 'multi') take_turn_waiting();\r

  \    }\r

  \    Z.isWaiting = true;\r

  \    autopoll();\r

  \  } else if (stage == 'write' && resolvable) {\r

  \    assertion(uplayer == fen.starter, 'NOT THE STARTER WHO COMPLETES THE
  STAGE!!!')\r

  \    let start = fen.saying.start.toLowerCase();\r

  \    let sentences = [];\r

  \    for (const pldata of Z.playerdata) {\r

  \      let plname = pldata.name;\r

  \      let text = start + ' ' + pldata.state.text;\r

  \      sentences.push({ plname: plname, text: text.toLowerCase() });\r

  \    }\r

  \    sentences.push({ plname: '', text: start + ' ' +
  fen.saying.end.toLowerCase() });\r

  \    fen.sentences = shuffle(sentences);\r

  \    Z.turn = jsCopy(Z.plorder);\r

  \    Z.stage = 'select';\r

  \    take_turn_fen_clear();\r

  \  } else if (stage == 'write') {\r

  \    let d = mCreate('form');\r

  \    let dt = dTable;\r

  \    mAppend(dt, d);\r

  \    d.autocomplete = \"off\";\r

  \    d.action = \"javascript:void(0);\";\r

  \    mDiv(d, { fz: 20 }, 'dForm', fen.saying.start.toLowerCase() + '...');\r

  \    Z.form = d;\r

  \    mLinebreak(d, 10);\r

  \    mInput(d, { wmin: 600 }, 'i_end', 'enter ending');\r

  \    d.onsubmit = wise_submit_text;\r

  \  } else if (stage == 'select' && resolvable) {\r

  \    assertion(uplayer == fen.starter, 'NOT THE STARTER WHO COMPLETES THE
  STAGE!!!')\r

  \    let d = mDiv(dTable, {});\r

  \    fen.result = {};\r

  \    for (const pldata of Z.playerdata) {\r

  \      let selecting = pldata.name;\r

  \      let selected = pldata.state.plname;\r

  \      let text = pldata.state.text;\r

  \      if (isEmpty(selected)) {\r

  \        console.log('REINGEGANGEN!!!!!!!!!!!!!!')\r

  \        fen.players[selecting].score += 1;\r

  \        selected = 'correct';\r

  \      } else if (selecting != selected) {\r

  \        fen.players[selected].score += 1;\r

  \      }\r

  \      fen.result[selecting] = { plname: selected, text: text };\r

  \    }\r

  \    delete fen.sentences;\r

  \    Z.turn = jsCopy(Z.plorder);\r

  \    Z.stage = 'round';\r

  \    take_turn_fen_clear();\r

  \  } else if (stage == 'select') {\r

  \    let d = mDiv(dTable, {});\r

  \    let i = 1;\r

  \    for (const s of fen.sentences) {\r

  \      let d1 = mDiv(d, { fz: 20, hline: 30 }, `dsent_${s.plname}`, '' +
  (i++) + ') ' + s.text, 'hop1');\r

  \      d1.onclick = wise_select_sentence;\r

  \    }\r

  \  } else if (stage == 'round' && resolvable) {\r

  \    assertion(uplayer == fen.starter, 'NOT THE STARTER WHO COMPLETES THE
  STAGE!!!')\r

  \    delete fen.result;\r

  \    Z.turn = jsCopy(Z.plorder);\r

  \    fen.index++;\r

  \    fen.saying = Sayings[fen.index];\r

  \    Z.stage = 'write';\r

  \    take_turn_fen_clear();\r

  \  } else if (stage == 'round') {\r

  \    let d = mDiv(dTable, {});\r

  \    for (const plname in fen.result) {\r

  \      let o = fen.result[plname];\r

  \      let d1 = mDiv(d, { fz: 20, hline: 30 }, null, `${plname} selected
  ${o.plname}: ${o.text}`);\r

  \    }\r

  \    mLinebreak(dTable, 12)\r

  \    mButton('WEITER', wise_onclick_weiter, dTable, {}, ['donebutton',
  'enabled']);\r

  \  } else {\r

  \    console.log('Z', Z)\r

  \    alert('PROBLEM!!!')\r

  \  }\r

  }"
wise_onclick_weiter: "function wise_onclick_weiter() {\r

  \  Z.state = { plname: Z.uplayer };\r

  \  take_turn_multi();\r

  }"
wise_present: "function wise_present(dParent) {\r

  \  let [fen, ui, stage, uplayer] = [Z.fen, UI, Z.stage, Z.uplayer];\r

  \  let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent, 1,
  0);\r

  \  let dt = dTable = dOpenTable; clearElement(dt); mCenterFlex(dt);\r

  \  wise_stats(dt);\r

  \  mLinebreak(dt, 10);\r

  }"
wise_select_sentence: "function wise_select_sentence(ev) {\r

  \  if (!uiActivated) return;\r

  \  let text = ev.target.innerHTML;\r

  \  let plname = stringAfter(ev.target.id, 'dsent_')\r

  \  Z.state = { plname: plname, text: text };\r

  \  take_turn_multi();\r

  }"
wise_stats: "function wise_stats(d) {\r

  \  let players = Z.fen.players;\r

  \  let d1 = mDiv(d, { display: 'flex', 'justify-content': 'center',
  'align-items': 'space-evenly' });\r

  \  for (const plname of get_present_order()) {\r

  \    let pl = players[plname];\r

  \    let onturn = Z.turn.includes(plname);\r

  \    let sz = 50;\r

  \    let bcolor = plname == Z.uplayer ? 'lime' : 'silver';\r

  \    let border = pl.playmode == 'bot' ? `double 5px ${bcolor}` : `solid 5px
  ${bcolor}`;\r

  \    let rounding = pl.playmode == 'bot' ? '0px' : '50%';\r

  \    let d2 = mDiv(d1, { margin: 4, align: 'center' }, null, `<img
  src='../base/assets/images/${plname}.jpg'
  style=\"border-radius:${rounding};display:block;border:${border};box-sizing:b\
  order-box\" class='img_person' width=${sz}
  height=${sz}>${get_player_score(plname)}`);\r

  \  }\r

  }"
wise_submit_text: "function wise_submit_text(ev) { ev.preventDefault(); let text
  = mBy('i_end').value; Z.state = { text: text }; take_turn_multi(); }"
without: "function without(arr, elementToRemove) {\r

  \  return arr.filter(function (el) {\r

  \    return el !== elementToRemove;\r

  \  });\r

  }"
wlog: "function wlog() {\r

  \  let s = '';\r

  \  for (const a of arguments) {\r

  \    s += a + ' ';\r

  \  }\r

  \  console.log(s);\r

  }"
wordCorrectionFactor: "function wordCorrectionFactor(text, styles, w, h, fz) {\r

  \  styles.fz = fz;\r

  \  let size = getSizeWithStyles(text, styles);\r

  \  let hFactor = 1; let wFactor = 1;\r

  \  if (size.h > h - 1) { hFactor = size.h / h; }\r

  \  if (size.w > w - 1) { wFactor = size.w / w; }\r

  \  if (size.w < w && size.h < h) return 0;\r

  \  else return Math.max(hFactor, wFactor);\r

  }"
wordsFromToText: "function wordsFromToText(i, n = 300) {\r

  \  let list = [];\r

  \  for (const k in symbolDict) {\r

  \    let info = symbolDict[k];\r

  \    if (nundef(info.bestE) || !isString(info.bestE) || info.bestE.length <
  2) continue;\r

  \    addIf(list, info.bestE);\r

  \  }\r

  \  let sfromi = arrFromIndex(list, i);\r

  \  s300 = arrTake(sfromi, n);\r

  \  let s = s300.join('\\n');\r

  \  console.log(s);\r

  \  downloadTextFile(s, 'words_' + i);\r

  }"
wordsOfLanguage: "function wordsOfLanguage(key, language) {\r

  \  let y = symbolDict[key];\r

  \  let w = y[language];\r

  \  let wlist = w.split('|');\r

  \  return wlist.map(x => x.trim());\r

  }"
worldMap: "function worldMap(loc) {\r

  \  let html =\r

  \    `<div id=\"map_area\" class=\"grid_div\"
  style=\"width:340px;height:220px;background-color:rgba(86, 182, 222);\">\r

  \      <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 3400 2200\"
  style=\"box-sizing:border-box;\">\r

  \        <g id=\"mapG\" >\r

  \          <image id=\"imgMap\" href=\"/assets/tnt/TTmap.jpg\" />\r

  \        </g>\r

  \      </svg>\r

  \    </div>`;\r

  \  let d = mBy(loc);\r

  \  d.innerHTML = html;\r

  }"
wrapLayoutColarr: "function wrapLayoutColarr(num) {\r

  \  const arr = [[0], [1], [2], [1, 2], [2, 2], [2, 3], [3, 3], [2, 3, 2],
  [2, 3, 3], [3, 3, 3], [3, 4, 3], [3, 4, 4], [4, 4, 4]];\r

  \  return num < arr.length ? arr[num] : [num];\r

  }"
wrapLayoutPosition: "function wrapLayoutPosition(nBoard, tile, R) {\r

  \  let margin = 2;\r

  \  let uids = tile.children;\r

  \  let colarr = wrapLayoutColarr(uids.length);\r

  \  let rows = colarr.length;\r

  \  let iNode = 0;\r

  \  let nChild = R.uiNodes[uids[0]];\r

  \  let size0 = R.uiNodes[uids[0]].size;\r

  \  let wChild = getBounds(nChild.ui).width;\r

  \  let xOffset = nBoard.size.w / 2 + tile.pos.x - size0.w / 2;\r

  \  let yOffset = nBoard.size.h / 2 + tile.pos.y - size0.h / 2;\r

  \  let x = 0;\r

  \  let y = 0;\r

  \  let dx = size0.w + margin;\r

  \  let dy = size0.h + margin;\r

  \  for (let r = 0; r < rows; r++) {\r

  \    x = 0;\r

  \    y = r * dy - (rows * dy - dy) / 2;\r

  \    let wrow = colarr[r] * dx - dx;\r

  \    for (let c = 0; c < colarr[r]; c++) {\r

  \      let robber = R.uiNodes[uids[iNode]];\r

  \      let ui = robber.ui;\r

  \      ui.style.position = 'absolute';\r

  \      ui.style.display = 'inline-block';\r

  \      ui.style.boxSizing = 'border-box'\r

  \      let xPos = x + xOffset - wrow / 2;\r

  \      let yPos = y + yOffset;\r

  \      robber.pos = { x: xPos, y: yPos };\r

  \      ui.style.left = xPos + 'px';\r

  \      ui.style.top = yPos + 'px';\r

  \      ui.style.margin = '0px';\r

  \      x += dx;\r

  \      iNode += 1;\r

  \    }\r

  \  }\r

  }"
wrapLayoutSizeNeeded: "function wrapLayoutSizeNeeded(uids, R) {\r

  \  const arr = [[0], [1], [2], [1, 2], [2, 2], [2, 3], [3, 3], [2, 3, 2],
  [2, 3, 3], [3, 3, 3], [3, 4, 3], [3, 4, 4], [4, 4, 4]];\r

  \  let colarr = wrapLayoutColarr(uids.length);\r

  \  let rows = colarr.length;\r

  \  let iNode = 0;\r

  \  let wmax = 0;\r

  \  let maxNumPerRow = 0;\r

  \  let htot = 0;\r

  \  for (let r = 0; r < rows; r++) {\r

  \    let hmax = 0;\r

  \    let wtot = 0;\r

  \    for (let c = 0; c < colarr[r]; c++) {\r

  \      let n = R.uiNodes[uids[iNode]];\r

  \      let h = n.size.h;\r

  \      let w = n.size.w;\r

  \      hmax = Math.max(hmax, h);\r

  \      wtot += w;\r

  \      maxNumPerRow = Math.max(maxNumPerRow, c);\r

  \    }\r

  \    wmax = Math.max(wmax, wtot);\r

  \    htot += hmax;\r

  \  }\r

  \  let margin = 2;\r

  \  let wNeeded = wmax + margin * (maxNumPerRow + 1);\r

  \  let hNeeded = htot + margin * (rows + 1);\r

  \  return { w: wNeeded, h: hNeeded };\r

  }"
write: function write() { if (verbose) console.log(...arguments); }
writeComments: "function writeComments(pre) {\r

  \  console.log('NEEEEEEEEEEEEEEEEEEEEIIIIIIIIIIIIIIIIIN',
  getFunctionsNameThatCalledThisFunction())\r

  \  if (ROUND_OUTPUT) {\r

  \    console.log('...' + currentGame.substring(1), pre + ' currentLevel:' +
  currentLevel, 'pics:' + NumPics,\r

  \      'labels:' + NumLabels,\r

  \      '\\nkeys:' + currentKeys.length, 'minlen:' + MinWordLength, 'maxlen:'
  + MaxWordLength, 'trials#:' + MaxNumTrials);\r

  \  }\r

  }"
writeExp: function writeExp() { }
writeSound: function writeSound() { return; console.log('calling playSound'); }
yesNo: function yesNo() { return tossCoin(50); }
yPics: "function yPics(ifs, options) {\r

  \  let keys = choose(SymKeys, n);\r

  \  console.log(keys)\r

  \  showPicsS(keys);\r

  }"
yRandomPic: "function yRandomPic(ifs, options) {\r

  }"
zoom: "function zoom(factor) {\r

  \  bodyZoom = factor;\r

  \  if (Math.abs(bodyZoom - 1) < .2) bodyZoom = 1;\r

  \  document.body.style.transformOrigin = '0% 0%';\r

  \  document.body.style.transform = 'scale(' + bodyZoom + ')';\r

  \  localStorage.setItem('bodyZoom', bodyZoom);\r

  }"
zoom_on_resize: "function zoom_on_resize(referenceDivId) {\r

  \  if (!window.onresize) {\r

  \    window.onresize = () => {\r

  \      let newBrowserZoom = Math.round(window.devicePixelRatio * 100);\r

  \      if (isdef(browserZoom) && browserZoom != newBrowserZoom) {
  browserZoom = newBrowserZoom; return; }\r

  \      if (nundef(browserZoom) || browserZoom == newBrowserZoom) {\r

  \        let wNeeded =
  document.getElementById(referenceDivId).getBoundingClientRect().width;\r

  \        let wNeededReally = wNeeded / bodyZoom;\r

  \        let wHave = window.innerWidth;\r

  \        let zn = wHave / wNeeded;\r

  \        let znr = wHave / wNeededReally;\r

  \        if (Math.abs(znr - bodyZoom) > .01) zoom(znr);\r

  \      }\r

  \      browserZoom = newBrowserZoom;\r

  \    };\r

  \  }\r

  }"
zoom_on_wheel_alt: "function zoom_on_wheel_alt() {\r

  \  if (!window.onwheel) {\r

  \    window.addEventListener(\"wheel\", ev => {\r

  \      if (!ev.altKey || ev.ctrlKey) return;\r

  \      ev.preventDefault();\r

  \      if (ev.deltaY > 0) { zoomOut(); } else if (ev.deltaY < 0) zoomIn();\r

  \    }, { passive: false });\r

  \  }\r

  }"
zoomBy: function zoomBy(x) { if (nundef(bodyZoom)) bodyZoom = 1; zoom(bodyZoom * x); }
zoomIn: function zoomIn() { zoomBy(1.5); }
zoomOut: function zoomOut() { zoomBy(.7); }
zPicS: "function zPicS(item, dParent, styles = {}) {\r

  \  let w = styles.w, h = styles.h, padding = styles.padding, hpadding =
  styles.hpadding, wpadding = styles.wpadding;\r

  \  if (isdef(styles.sz)) {\r

  \    if (nundef(w)) w = styles.sz;\r

  \    if (nundef(h)) h = styles.sz;\r

  \  }\r

  \  let stylesNew = jsCopy(styles);\r

  \  if (isdef(w)) {\r

  \    if (isdef(padding)) { w -= 2 * padding; }\r

  \    else if (isdef(wpadding)) { w -= 2 * wpadding; }\r

  \    stylesNew.w = w;\r

  \  }\r

  \  if (isdef(h)) {\r

  \    if (isdef(padding)) { h -= 2 * padding; }\r

  \    else if (isdef(hpadding)) { h -= 2 * hpadding; }\r

  \    stylesNew.h = h;\r

  \  }\r

  \  return _zPicS(item, dParent, stylesNew);\r

  }"
zRepeatEachItem: "function zRepeatEachItem(items, repeat, shufflePositions =
  false) {\r

  \  let orig = items;\r

  \  let itRepeat = items;\r

  \  for (let i = 1; i < repeat; i++) { itRepeat = itRepeat.concat(orig.map(x
  => registeredItemCopy(x))); }\r

  \  if (shufflePositions) { shuffle(itRepeat); }\r

  \  let labelRepeat = {};\r

  \  let idx = 0;\r

  \  for (const item of itRepeat) {\r

  \    let iRepeat = labelRepeat[item.label];\r

  \    if (nundef(iRepeat)) iRepeat = 1; else iRepeat += 1;\r

  \    item.iRepeat = iRepeat;\r

  \    item.index = idx; idx += 1;\r

  \    labelRepeat[item.label] = iRepeat;\r

  \  }\r

  \  return itRepeat;\r

  }"
zRepeatInColorEachItem: "function zRepeatInColorEachItem(items, colorKeys) {\r

  \  let itColors = [];\r

  \  for (let i = 0; i < colorKeys.length; i++) {\r

  \    let newItems;\r

  \    if (i > 0) { newItems = jsCopy(items); newItems.map(x =>
  registerAsNewItem(x)); }\r

  \    else newItems = items;\r

  \    itColors = itColors.concat(newItems);\r

  \  }\r

  \  for (let i = 0; i < colorKeys.length; i++) {\r

  \    let colorKey = colorKeys[i];\r

  \    let textShadowColor = ColorDict[colorKey].c;\r

  \    for (let j = 0; j < items.length; j++) {\r

  \      let index = i * items.length + j;\r

  \      let x = itColors[index];\r

  \      x.index = index;\r

  \      x.textShadowColor = textShadowColor;\r

  \      x.color = ColorDict[colorKey];\r

  \      x.colorKey = colorKey;\r

  \    }\r

  \  }\r

  \  return itColors;\r

  }"
zText: "function zText(text, dParent, textStyles, hText, vCenter = false) {\r

  \  let tSize = getSizeWithStyles(text, textStyles);\r

  \  let extra = 0, lines = 1;\r

  \  if (isdef(hText)) {\r

  \    extra = hText - tSize.h;\r

  \    if (textStyles.fz) lines = Math.floor(tSize.h / textStyles.fz);\r

  \  }\r

  \  let dText = isdef(text) ? mText(text, dParent, textStyles) :
  mDiv(dParent);\r

  \  if (extra > 0 && vCenter) {\r

  \    dText.style.paddingTop = (extra / 2) + 'px';\r

  \    dText.style.paddingBottom = (extra / 2) + 'px';\r

  \  }\r

  \  return { text: text, div: dText, extra: extra, lines: lines, h: tSize.h,
  w: tSize.w, fz: textStyles.fz };\r

  }"
